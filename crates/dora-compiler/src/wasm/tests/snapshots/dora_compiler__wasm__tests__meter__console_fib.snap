---
source: crates/dora-compiler/src/wasm/tests/meter.rs
expression: op
---
module {
  func.func @f0(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_0 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %1, %2 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %3 = llvm.load %2 : !llvm.ptr -> i64
    %4 = arith.cmpi ult, %3, %c3_i64 : i64
    scf.if %4 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %15 = arith.subi %3, %c3_i64 : i64
      llvm.store %15, %2 : i64, !llvm.ptr
    }
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %6 = llvm.load %2 : !llvm.ptr -> i64
    %7 = arith.cmpi ult, %6, %c6_i64 : i64
    scf.if %7 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %15 = arith.subi %6, %c6_i64 : i64
      llvm.store %15, %2 : i64, !llvm.ptr
    }
    call @f22(%arg0, %5) : (!llvm.ptr, i32) -> ()
    %c3_i64_1 = arith.constant 3 : i64
    %8 = llvm.load %2 : !llvm.ptr -> i64
    %9 = arith.cmpi ult, %8, %c3_i64_1 : i64
    scf.if %9 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %15 = arith.subi %8, %c3_i64_1 : i64
      llvm.store %15, %2 : i64, !llvm.ptr
    }
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64_2 = arith.constant 6 : i64
    %11 = llvm.load %2 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c6_i64_2 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %15 = arith.subi %11, %c6_i64_2 : i64
      llvm.store %15, %2 : i64, !llvm.ptr
    }
    call @f23(%arg0, %10) : (!llvm.ptr, i32) -> ()
    %c1_i64 = arith.constant 1 : i64
    %13 = llvm.load %2 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c1_i64 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %15 = arith.subi %13, %c1_i64 : i64
      llvm.store %15, %2 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f1(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c3_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %4, %c3_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c1_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %7, %c1_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %c1048764_i32 = arith.constant 1048764 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %9 = llvm.load %3 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c1_i64_2 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %9, %c1_i64_2 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %c5_i32 = arith.constant 5 : i32
    %c6_i64 = arith.constant 6 : i64
    %11 = llvm.load %3 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c6_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %11, %c6_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %13 = call @f73(%arg0, %6, %c1048764_i32, %c5_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_3 = arith.constant 1 : i64
    %14 = llvm.load %3 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c1_i64_3 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %14, %c1_i64_3 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%13 : i32)
  ^bb2(%16: i32):  // pred: ^bb1
    return %16 : i32
  }
  func.func @f2(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_3 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %4, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %5 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %11, %c3_i64 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %13 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %14 = llvm.load %5 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c1_i64 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %14, %c1_i64 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_4 = arith.constant 3 : i64
    %16 = llvm.load %5 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64_4 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %16, %c3_i64_4 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %18 = arith.subi %13, %c16_i32 : i32
    %c3_i64_5 = arith.constant 3 : i64
    %19 = llvm.load %5 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_5 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %19, %c3_i64_5 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %2 : i32, !llvm.ptr
    %c3_i64_6 = arith.constant 3 : i64
    %21 = llvm.load %5 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_6 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %21, %c3_i64_6 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %23 = llvm.load %5 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c1_i64_7 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %23, %c1_i64_7 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c1_i64_8 = arith.constant 1 : i64
    %25 = llvm.load %5 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_8 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %25, %c1_i64_8 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c1_i64_9 = arith.constant 1 : i64
    %27 = llvm.load %5 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c1_i64_9 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %27, %c1_i64_9 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c1_i64_10 = arith.constant 1 : i64
    %29 = llvm.load %5 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c1_i64_10 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %29, %c1_i64_10 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c3_i64_11 = arith.constant 3 : i64
    %31 = llvm.load %5 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_11 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %31, %c3_i64_11 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_12 = arith.constant 1 : i64
    %34 = llvm.load %5 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c1_i64_12 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %34, %c1_i64_12 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c128_i32 = arith.constant 128 : i32
    %c3_i64_13 = arith.constant 3 : i64
    %36 = llvm.load %5 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_13 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %36, %c3_i64_13 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %38 = arith.cmpi ult, %33, %c128_i32 : i32
    %39 = arith.extui %38 : i1 to i32
    %c1_i64_14 = arith.constant 1 : i64
    %40 = llvm.load %5 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c1_i64_14 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %40, %c1_i64_14 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c0_i32_15 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %39, %c0_i32_15 : i32
    cf.cond_br %42, ^bb6, ^bb7
  ^bb2(%43: i32):  // pred: ^bb3
    return %43 : i32
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %c3_i64_16 = arith.constant 3 : i64
    %44 = llvm.load %5 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c3_i64_16 : i64
    scf.if %45 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %44, %c3_i64_16 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_17 = arith.constant 1 : i64
    %47 = llvm.load %5 : !llvm.ptr -> i64
    %48 = arith.cmpi ult, %47, %c1_i64_17 : i64
    scf.if %48 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %47, %c1_i64_17 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c16_i32_18 = arith.constant 16 : i32
    %c3_i64_19 = arith.constant 3 : i64
    %49 = llvm.load %5 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c3_i64_19 : i64
    scf.if %50 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %49, %c3_i64_19 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %51 = arith.addi %46, %c16_i32_18 : i32
    %c3_i64_20 = arith.constant 3 : i64
    %52 = llvm.load %5 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c3_i64_20 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %52, %c3_i64_20 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    llvm.store %51, %7 : i32, !llvm.ptr
    %c1_i64_21 = arith.constant 1 : i64
    %54 = llvm.load %5 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %c1_i64_21 : i64
    scf.if %55 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %54, %c1_i64_21 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c0_i32_22 = arith.constant 0 : i32
    %c1_i64_23 = arith.constant 1 : i64
    %56 = llvm.load %5 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c1_i64_23 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %56, %c1_i64_23 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c0_i32_22 : i32)
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %c1_i64_24 = arith.constant 1 : i64
    %58 = llvm.load %5 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c1_i64_24 : i64
    scf.if %59 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %58, %c1_i64_24 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c3_i64_25 = arith.constant 3 : i64
    %60 = llvm.load %5 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_25 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %60, %c3_i64_25 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_26 = arith.constant 3 : i64
    %63 = llvm.load %5 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c3_i64_26 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %63, %c3_i64_26 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %65 = arith.extui %62 : i32 to i64
    %66 = arith.addi %65, %c0_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_27 = arith.constant 3 : i64
    %69 = llvm.load %5 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c3_i64_27 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %69, %c3_i64_27 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %71 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_28 = arith.constant 3 : i64
    %72 = llvm.load %5 : !llvm.ptr -> i64
    %73 = arith.cmpi ult, %72, %c3_i64_28 : i64
    scf.if %73 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %72, %c3_i64_28 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %74 = arith.extui %71 : i32 to i64
    %75 = arith.addi %74, %c8_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_29 = arith.constant 3 : i64
    %78 = llvm.load %5 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c3_i64_29 : i64
    scf.if %79 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %78, %c3_i64_29 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    llvm.store %77, %3 : i32, !llvm.ptr
    %c3_i64_30 = arith.constant 3 : i64
    %80 = llvm.load %5 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_30 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %80, %c3_i64_30 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %82 = arith.subi %68, %77 : i32
    %c3_i64_31 = arith.constant 3 : i64
    %83 = llvm.load %5 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_31 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %83, %c3_i64_31 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_32 = arith.constant 3 : i64
    %86 = llvm.load %5 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %c3_i64_32 : i64
    scf.if %87 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %86, %c3_i64_32 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %88 = arith.cmpi uge, %82, %85 : i32
    %89 = arith.extui %88 : i1 to i32
    %c1_i64_33 = arith.constant 1 : i64
    %90 = llvm.load %5 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c1_i64_33 : i64
    scf.if %91 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %90, %c1_i64_33 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c0_i32_34 = arith.constant 0 : i32
    %92 = arith.cmpi ne, %89, %c0_i32_34 : i32
    cf.cond_br %92, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %c3_i64_35 = arith.constant 3 : i64
    %93 = llvm.load %5 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c3_i64_35 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %93, %c3_i64_35 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_36 = arith.constant 3 : i64
    %96 = llvm.load %5 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c3_i64_36 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %96, %c3_i64_36 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %98 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_37 = arith.constant 1 : i64
    %99 = llvm.load %5 : !llvm.ptr -> i64
    %100 = arith.cmpi ult, %99, %c1_i64_37 : i64
    scf.if %100 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %99, %c1_i64_37 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c63_i32 = arith.constant 63 : i32
    %c3_i64_38 = arith.constant 3 : i64
    %101 = llvm.load %5 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c3_i64_38 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %101, %c3_i64_38 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %103 = arith.andi %98, %c63_i32 : i32
    %c1_i64_39 = arith.constant 1 : i64
    %104 = llvm.load %5 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c1_i64_39 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %104, %c1_i64_39 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c128_i32_40 = arith.constant 128 : i32
    %c3_i64_41 = arith.constant 3 : i64
    %106 = llvm.load %5 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c3_i64_41 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %106, %c3_i64_41 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %108 = arith.ori %103, %c128_i32_40 : i32
    %c3_i64_42 = arith.constant 3 : i64
    %109 = llvm.load %5 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c3_i64_42 : i64
    scf.if %110 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %109, %c3_i64_42 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c13_i64 = arith.constant 13 : i64
    %111 = arith.extui %95 : i32 to i64
    %112 = arith.addi %111, %c13_i64 : i64
    %113 = llvm.getelementptr %10[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = arith.trunci %108 : i32 to i8
    llvm.store volatile %114, %113 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_43 = arith.constant 3 : i64
    %115 = llvm.load %5 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c3_i64_43 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %115, %c3_i64_43 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %117 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_44 = arith.constant 3 : i64
    %118 = llvm.load %5 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_44 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %118, %c3_i64_44 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %120 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_45 = arith.constant 1 : i64
    %121 = llvm.load %5 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %c1_i64_45 : i64
    scf.if %122 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %121, %c1_i64_45 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c6_i32 = arith.constant 6 : i32
    %c3_i64_46 = arith.constant 3 : i64
    %123 = llvm.load %5 : !llvm.ptr -> i64
    %124 = arith.cmpi ult, %123, %c3_i64_46 : i64
    scf.if %124 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %123, %c3_i64_46 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %125 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %126 = scf.if %125 -> (i32) {
      %531 = arith.shrui %120, %c6_i32 : i32
      scf.yield %531 : i32
    } else {
      %c0_i32_214 = arith.constant 0 : i32
      scf.yield %c0_i32_214 : i32
    }
    %c1_i64_47 = arith.constant 1 : i64
    %127 = llvm.load %5 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c1_i64_47 : i64
    scf.if %128 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %127, %c1_i64_47 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c192_i32 = arith.constant 192 : i32
    %c3_i64_48 = arith.constant 3 : i64
    %129 = llvm.load %5 : !llvm.ptr -> i64
    %130 = arith.cmpi ult, %129, %c3_i64_48 : i64
    scf.if %130 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %129, %c3_i64_48 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %131 = arith.ori %126, %c192_i32 : i32
    %c3_i64_49 = arith.constant 3 : i64
    %132 = llvm.load %5 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c3_i64_49 : i64
    scf.if %133 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %132, %c3_i64_49 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %134 = arith.extui %117 : i32 to i64
    %135 = arith.addi %134, %c12_i64 : i64
    %136 = llvm.getelementptr %10[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = arith.trunci %131 : i32 to i8
    llvm.store volatile %137, %136 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_50 = arith.constant 1 : i64
    %138 = llvm.load %5 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %c1_i64_50 : i64
    scf.if %139 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %138, %c1_i64_50 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c2_i32 = arith.constant 2 : i32
    %c3_i64_51 = arith.constant 3 : i64
    %140 = llvm.load %5 : !llvm.ptr -> i64
    %141 = arith.cmpi ult, %140, %c3_i64_51 : i64
    scf.if %141 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %140, %c3_i64_51 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    %c1_i64_52 = arith.constant 1 : i64
    %142 = llvm.load %5 : !llvm.ptr -> i64
    %143 = arith.cmpi ult, %142, %c1_i64_52 : i64
    scf.if %143 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %142, %c1_i64_52 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %c1_i64_53 = arith.constant 1 : i64
    %144 = llvm.load %5 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c1_i64_53 : i64
    scf.if %145 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %144, %c1_i64_53 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c3_i64_54 = arith.constant 3 : i64
    %146 = llvm.load %5 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c3_i64_54 : i64
    scf.if %147 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %146, %c3_i64_54 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %148 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_55 = arith.constant 3 : i64
    %149 = llvm.load %5 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c3_i64_55 : i64
    scf.if %150 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %149, %c3_i64_55 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c8_i64_56 = arith.constant 8 : i64
    %151 = arith.extui %148 : i32 to i64
    %152 = arith.addi %151, %c8_i64_56 : i64
    %153 = llvm.getelementptr %10[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_57 = arith.constant 3 : i64
    %155 = llvm.load %5 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %c3_i64_57 : i64
    scf.if %156 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %155, %c3_i64_57 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    llvm.store %154, %3 : i32, !llvm.ptr
    %c3_i64_58 = arith.constant 3 : i64
    %157 = llvm.load %5 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c3_i64_58 : i64
    scf.if %158 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %157, %c3_i64_58 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %159 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_59 = arith.constant 3 : i64
    %160 = llvm.load %5 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_59 : i64
    scf.if %161 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %160, %c3_i64_59 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c0_i64_60 = arith.constant 0 : i64
    %162 = arith.extui %159 : i32 to i64
    %163 = arith.addi %162, %c0_i64_60 : i64
    %164 = llvm.getelementptr %10[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_61 = arith.constant 3 : i64
    %166 = llvm.load %5 : !llvm.ptr -> i64
    %167 = arith.cmpi ult, %166, %c3_i64_61 : i64
    scf.if %167 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %166, %c3_i64_61 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %168 = arith.cmpi eq, %154, %165 : i32
    %169 = arith.extui %168 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %170 = arith.cmpi eq, %169, %c0_i32_62 : i32
    %171 = arith.extui %170 : i1 to i32
    %c1_i64_63 = arith.constant 1 : i64
    %172 = llvm.load %5 : !llvm.ptr -> i64
    %173 = arith.cmpi ult, %172, %c1_i64_63 : i64
    scf.if %173 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %172, %c1_i64_63 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c0_i32_64 = arith.constant 0 : i32
    %174 = arith.cmpi ne, %171, %c0_i32_64 : i32
    cf.cond_br %174, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %c3_i64_65 = arith.constant 3 : i64
    %175 = llvm.load %5 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c3_i64_65 : i64
    scf.if %176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %175, %c3_i64_65 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %177 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_66 = arith.constant 1 : i64
    %178 = llvm.load %5 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c1_i64_66 : i64
    scf.if %179 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %178, %c1_i64_66 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c0_i32_67 = arith.constant 0 : i32
    %c3_i64_68 = arith.constant 3 : i64
    %180 = llvm.load %5 : !llvm.ptr -> i64
    %181 = arith.cmpi ult, %180, %c3_i64_68 : i64
    scf.if %181 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %180, %c3_i64_68 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c12_i64_69 = arith.constant 12 : i64
    %182 = arith.extui %177 : i32 to i64
    %183 = arith.addi %182, %c12_i64_69 : i64
    %184 = llvm.getelementptr %10[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_67, %184 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_70 = arith.constant 3 : i64
    %185 = llvm.load %5 : !llvm.ptr -> i64
    %186 = arith.cmpi ult, %185, %c3_i64_70 : i64
    scf.if %186 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %185, %c3_i64_70 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %187 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_71 = arith.constant 1 : i64
    %188 = llvm.load %5 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c1_i64_71 : i64
    scf.if %189 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %188, %c1_i64_71 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c2048_i32 = arith.constant 2048 : i32
    %c3_i64_72 = arith.constant 3 : i64
    %190 = llvm.load %5 : !llvm.ptr -> i64
    %191 = arith.cmpi ult, %190, %c3_i64_72 : i64
    scf.if %191 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %190, %c3_i64_72 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %192 = arith.cmpi ult, %187, %c2048_i32 : i32
    %193 = arith.extui %192 : i1 to i32
    %c1_i64_73 = arith.constant 1 : i64
    %194 = llvm.load %5 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c1_i64_73 : i64
    scf.if %195 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %194, %c1_i64_73 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c0_i32_74 = arith.constant 0 : i32
    %196 = arith.cmpi ne, %193, %c0_i32_74 : i32
    cf.cond_br %196, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %c1_i64_75 = arith.constant 1 : i64
    %197 = llvm.load %5 : !llvm.ptr -> i64
    %198 = arith.cmpi ult, %197, %c1_i64_75 : i64
    scf.if %198 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %197, %c1_i64_75 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c3_i64_76 = arith.constant 3 : i64
    %199 = llvm.load %5 : !llvm.ptr -> i64
    %200 = arith.cmpi ult, %199, %c3_i64_76 : i64
    scf.if %200 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %199, %c3_i64_76 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %201 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_77 = arith.constant 1 : i64
    %202 = llvm.load %5 : !llvm.ptr -> i64
    %203 = arith.cmpi ult, %202, %c1_i64_77 : i64
    scf.if %203 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %202, %c1_i64_77 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c65536_i32 = arith.constant 65536 : i32
    %c3_i64_78 = arith.constant 3 : i64
    %204 = llvm.load %5 : !llvm.ptr -> i64
    %205 = arith.cmpi ult, %204, %c3_i64_78 : i64
    scf.if %205 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %204, %c3_i64_78 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %206 = arith.cmpi uge, %201, %c65536_i32 : i32
    %207 = arith.extui %206 : i1 to i32
    %c1_i64_79 = arith.constant 1 : i64
    %208 = llvm.load %5 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c1_i64_79 : i64
    scf.if %209 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %208, %c1_i64_79 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c0_i32_80 = arith.constant 0 : i32
    %210 = arith.cmpi ne, %207, %c0_i32_80 : i32
    cf.cond_br %210, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %c3_i64_81 = arith.constant 3 : i64
    %211 = llvm.load %5 : !llvm.ptr -> i64
    %212 = arith.cmpi ult, %211, %c3_i64_81 : i64
    scf.if %212 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %211, %c3_i64_81 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %213 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_82 = arith.constant 3 : i64
    %214 = llvm.load %5 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c3_i64_82 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %214, %c3_i64_82 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %216 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_83 = arith.constant 1 : i64
    %217 = llvm.load %5 : !llvm.ptr -> i64
    %218 = arith.cmpi ult, %217, %c1_i64_83 : i64
    scf.if %218 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %217, %c1_i64_83 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c63_i32_84 = arith.constant 63 : i32
    %c3_i64_85 = arith.constant 3 : i64
    %219 = llvm.load %5 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c3_i64_85 : i64
    scf.if %220 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %219, %c3_i64_85 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %221 = arith.andi %216, %c63_i32_84 : i32
    %c1_i64_86 = arith.constant 1 : i64
    %222 = llvm.load %5 : !llvm.ptr -> i64
    %223 = arith.cmpi ult, %222, %c1_i64_86 : i64
    scf.if %223 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %222, %c1_i64_86 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c128_i32_87 = arith.constant 128 : i32
    %c3_i64_88 = arith.constant 3 : i64
    %224 = llvm.load %5 : !llvm.ptr -> i64
    %225 = arith.cmpi ult, %224, %c3_i64_88 : i64
    scf.if %225 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %224, %c3_i64_88 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %226 = arith.ori %221, %c128_i32_87 : i32
    %c3_i64_89 = arith.constant 3 : i64
    %227 = llvm.load %5 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %c3_i64_89 : i64
    scf.if %228 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %227, %c3_i64_89 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c15_i64 = arith.constant 15 : i64
    %229 = arith.extui %213 : i32 to i64
    %230 = arith.addi %229, %c15_i64 : i64
    %231 = llvm.getelementptr %10[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %232 = arith.trunci %226 : i32 to i8
    llvm.store volatile %232, %231 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_90 = arith.constant 3 : i64
    %233 = llvm.load %5 : !llvm.ptr -> i64
    %234 = arith.cmpi ult, %233, %c3_i64_90 : i64
    scf.if %234 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %233, %c3_i64_90 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %235 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_91 = arith.constant 3 : i64
    %236 = llvm.load %5 : !llvm.ptr -> i64
    %237 = arith.cmpi ult, %236, %c3_i64_91 : i64
    scf.if %237 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %236, %c3_i64_91 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %238 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_92 = arith.constant 1 : i64
    %239 = llvm.load %5 : !llvm.ptr -> i64
    %240 = arith.cmpi ult, %239, %c1_i64_92 : i64
    scf.if %240 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %239, %c1_i64_92 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c6_i32_93 = arith.constant 6 : i32
    %c3_i64_94 = arith.constant 3 : i64
    %241 = llvm.load %5 : !llvm.ptr -> i64
    %242 = arith.cmpi ult, %241, %c3_i64_94 : i64
    scf.if %242 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %241, %c3_i64_94 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c31_i32_95 = arith.constant 31 : i32
    %243 = arith.cmpi ule, %c6_i32_93, %c31_i32_95 : i32
    %244 = scf.if %243 -> (i32) {
      %531 = arith.shrui %238, %c6_i32_93 : i32
      scf.yield %531 : i32
    } else {
      %c0_i32_214 = arith.constant 0 : i32
      scf.yield %c0_i32_214 : i32
    }
    %c1_i64_96 = arith.constant 1 : i64
    %245 = llvm.load %5 : !llvm.ptr -> i64
    %246 = arith.cmpi ult, %245, %c1_i64_96 : i64
    scf.if %246 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %245, %c1_i64_96 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c63_i32_97 = arith.constant 63 : i32
    %c3_i64_98 = arith.constant 3 : i64
    %247 = llvm.load %5 : !llvm.ptr -> i64
    %248 = arith.cmpi ult, %247, %c3_i64_98 : i64
    scf.if %248 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %247, %c3_i64_98 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %249 = arith.andi %244, %c63_i32_97 : i32
    %c1_i64_99 = arith.constant 1 : i64
    %250 = llvm.load %5 : !llvm.ptr -> i64
    %251 = arith.cmpi ult, %250, %c1_i64_99 : i64
    scf.if %251 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %250, %c1_i64_99 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c128_i32_100 = arith.constant 128 : i32
    %c3_i64_101 = arith.constant 3 : i64
    %252 = llvm.load %5 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c3_i64_101 : i64
    scf.if %253 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %252, %c3_i64_101 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %254 = arith.ori %249, %c128_i32_100 : i32
    %c3_i64_102 = arith.constant 3 : i64
    %255 = llvm.load %5 : !llvm.ptr -> i64
    %256 = arith.cmpi ult, %255, %c3_i64_102 : i64
    scf.if %256 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %255, %c3_i64_102 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c14_i64 = arith.constant 14 : i64
    %257 = arith.extui %235 : i32 to i64
    %258 = arith.addi %257, %c14_i64 : i64
    %259 = llvm.getelementptr %10[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = arith.trunci %254 : i32 to i8
    llvm.store volatile %260, %259 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_103 = arith.constant 3 : i64
    %261 = llvm.load %5 : !llvm.ptr -> i64
    %262 = arith.cmpi ult, %261, %c3_i64_103 : i64
    scf.if %262 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %261, %c3_i64_103 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %263 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_104 = arith.constant 3 : i64
    %264 = llvm.load %5 : !llvm.ptr -> i64
    %265 = arith.cmpi ult, %264, %c3_i64_104 : i64
    scf.if %265 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %264, %c3_i64_104 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %266 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_105 = arith.constant 1 : i64
    %267 = llvm.load %5 : !llvm.ptr -> i64
    %268 = arith.cmpi ult, %267, %c1_i64_105 : i64
    scf.if %268 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %267, %c1_i64_105 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c12_i32 = arith.constant 12 : i32
    %c3_i64_106 = arith.constant 3 : i64
    %269 = llvm.load %5 : !llvm.ptr -> i64
    %270 = arith.cmpi ult, %269, %c3_i64_106 : i64
    scf.if %270 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %269, %c3_i64_106 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c31_i32_107 = arith.constant 31 : i32
    %271 = arith.cmpi ule, %c12_i32, %c31_i32_107 : i32
    %272 = scf.if %271 -> (i32) {
      %531 = arith.shrui %266, %c12_i32 : i32
      scf.yield %531 : i32
    } else {
      %c0_i32_214 = arith.constant 0 : i32
      scf.yield %c0_i32_214 : i32
    }
    %c1_i64_108 = arith.constant 1 : i64
    %273 = llvm.load %5 : !llvm.ptr -> i64
    %274 = arith.cmpi ult, %273, %c1_i64_108 : i64
    scf.if %274 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %273, %c1_i64_108 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c63_i32_109 = arith.constant 63 : i32
    %c3_i64_110 = arith.constant 3 : i64
    %275 = llvm.load %5 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_110 : i64
    scf.if %276 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %275, %c3_i64_110 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %277 = arith.andi %272, %c63_i32_109 : i32
    %c1_i64_111 = arith.constant 1 : i64
    %278 = llvm.load %5 : !llvm.ptr -> i64
    %279 = arith.cmpi ult, %278, %c1_i64_111 : i64
    scf.if %279 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %278, %c1_i64_111 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c128_i32_112 = arith.constant 128 : i32
    %c3_i64_113 = arith.constant 3 : i64
    %280 = llvm.load %5 : !llvm.ptr -> i64
    %281 = arith.cmpi ult, %280, %c3_i64_113 : i64
    scf.if %281 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %280, %c3_i64_113 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %282 = arith.ori %277, %c128_i32_112 : i32
    %c3_i64_114 = arith.constant 3 : i64
    %283 = llvm.load %5 : !llvm.ptr -> i64
    %284 = arith.cmpi ult, %283, %c3_i64_114 : i64
    scf.if %284 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %283, %c3_i64_114 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c13_i64_115 = arith.constant 13 : i64
    %285 = arith.extui %263 : i32 to i64
    %286 = arith.addi %285, %c13_i64_115 : i64
    %287 = llvm.getelementptr %10[%286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %288 = arith.trunci %282 : i32 to i8
    llvm.store volatile %288, %287 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_116 = arith.constant 3 : i64
    %289 = llvm.load %5 : !llvm.ptr -> i64
    %290 = arith.cmpi ult, %289, %c3_i64_116 : i64
    scf.if %290 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %289, %c3_i64_116 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %291 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_117 = arith.constant 3 : i64
    %292 = llvm.load %5 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c3_i64_117 : i64
    scf.if %293 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %292, %c3_i64_117 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %294 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_118 = arith.constant 1 : i64
    %295 = llvm.load %5 : !llvm.ptr -> i64
    %296 = arith.cmpi ult, %295, %c1_i64_118 : i64
    scf.if %296 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %295, %c1_i64_118 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c18_i32 = arith.constant 18 : i32
    %c3_i64_119 = arith.constant 3 : i64
    %297 = llvm.load %5 : !llvm.ptr -> i64
    %298 = arith.cmpi ult, %297, %c3_i64_119 : i64
    scf.if %298 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %297, %c3_i64_119 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c31_i32_120 = arith.constant 31 : i32
    %299 = arith.cmpi ule, %c18_i32, %c31_i32_120 : i32
    %300 = scf.if %299 -> (i32) {
      %531 = arith.shrui %294, %c18_i32 : i32
      scf.yield %531 : i32
    } else {
      %c0_i32_214 = arith.constant 0 : i32
      scf.yield %c0_i32_214 : i32
    }
    %c1_i64_121 = arith.constant 1 : i64
    %301 = llvm.load %5 : !llvm.ptr -> i64
    %302 = arith.cmpi ult, %301, %c1_i64_121 : i64
    scf.if %302 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %301, %c1_i64_121 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c7_i32 = arith.constant 7 : i32
    %c3_i64_122 = arith.constant 3 : i64
    %303 = llvm.load %5 : !llvm.ptr -> i64
    %304 = arith.cmpi ult, %303, %c3_i64_122 : i64
    scf.if %304 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %303, %c3_i64_122 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %305 = arith.andi %300, %c7_i32 : i32
    %c1_i64_123 = arith.constant 1 : i64
    %306 = llvm.load %5 : !llvm.ptr -> i64
    %307 = arith.cmpi ult, %306, %c1_i64_123 : i64
    scf.if %307 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %306, %c1_i64_123 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c240_i32 = arith.constant 240 : i32
    %c3_i64_124 = arith.constant 3 : i64
    %308 = llvm.load %5 : !llvm.ptr -> i64
    %309 = arith.cmpi ult, %308, %c3_i64_124 : i64
    scf.if %309 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %308, %c3_i64_124 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %310 = arith.ori %305, %c240_i32 : i32
    %c3_i64_125 = arith.constant 3 : i64
    %311 = llvm.load %5 : !llvm.ptr -> i64
    %312 = arith.cmpi ult, %311, %c3_i64_125 : i64
    scf.if %312 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %311, %c3_i64_125 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c12_i64_126 = arith.constant 12 : i64
    %313 = arith.extui %291 : i32 to i64
    %314 = arith.addi %313, %c12_i64_126 : i64
    %315 = llvm.getelementptr %10[%314] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %316 = arith.trunci %310 : i32 to i8
    llvm.store volatile %316, %315 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_127 = arith.constant 1 : i64
    %317 = llvm.load %5 : !llvm.ptr -> i64
    %318 = arith.cmpi ult, %317, %c1_i64_127 : i64
    scf.if %318 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %317, %c1_i64_127 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c3_i64_128 = arith.constant 3 : i64
    %319 = llvm.load %5 : !llvm.ptr -> i64
    %320 = arith.cmpi ult, %319, %c3_i64_128 : i64
    scf.if %320 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %319, %c3_i64_128 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    %c1_i64_129 = arith.constant 1 : i64
    %321 = llvm.load %5 : !llvm.ptr -> i64
    %322 = arith.cmpi ult, %321, %c1_i64_129 : i64
    scf.if %322 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %321, %c1_i64_129 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %c3_i64_130 = arith.constant 3 : i64
    %323 = llvm.load %5 : !llvm.ptr -> i64
    %324 = arith.cmpi ult, %323, %c3_i64_130 : i64
    scf.if %324 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %323, %c3_i64_130 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %325 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_131 = arith.constant 3 : i64
    %326 = llvm.load %5 : !llvm.ptr -> i64
    %327 = arith.cmpi ult, %326, %c3_i64_131 : i64
    scf.if %327 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %326, %c3_i64_131 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %328 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_132 = arith.constant 1 : i64
    %329 = llvm.load %5 : !llvm.ptr -> i64
    %330 = arith.cmpi ult, %329, %c1_i64_132 : i64
    scf.if %330 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %329, %c1_i64_132 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c63_i32_133 = arith.constant 63 : i32
    %c3_i64_134 = arith.constant 3 : i64
    %331 = llvm.load %5 : !llvm.ptr -> i64
    %332 = arith.cmpi ult, %331, %c3_i64_134 : i64
    scf.if %332 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %331, %c3_i64_134 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %333 = arith.andi %328, %c63_i32_133 : i32
    %c1_i64_135 = arith.constant 1 : i64
    %334 = llvm.load %5 : !llvm.ptr -> i64
    %335 = arith.cmpi ult, %334, %c1_i64_135 : i64
    scf.if %335 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %334, %c1_i64_135 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c128_i32_136 = arith.constant 128 : i32
    %c3_i64_137 = arith.constant 3 : i64
    %336 = llvm.load %5 : !llvm.ptr -> i64
    %337 = arith.cmpi ult, %336, %c3_i64_137 : i64
    scf.if %337 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %336, %c3_i64_137 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %338 = arith.ori %333, %c128_i32_136 : i32
    %c3_i64_138 = arith.constant 3 : i64
    %339 = llvm.load %5 : !llvm.ptr -> i64
    %340 = arith.cmpi ult, %339, %c3_i64_138 : i64
    scf.if %340 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %339, %c3_i64_138 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c14_i64_139 = arith.constant 14 : i64
    %341 = arith.extui %325 : i32 to i64
    %342 = arith.addi %341, %c14_i64_139 : i64
    %343 = llvm.getelementptr %10[%342] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %344 = arith.trunci %338 : i32 to i8
    llvm.store volatile %344, %343 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_140 = arith.constant 3 : i64
    %345 = llvm.load %5 : !llvm.ptr -> i64
    %346 = arith.cmpi ult, %345, %c3_i64_140 : i64
    scf.if %346 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %345, %c3_i64_140 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %347 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_141 = arith.constant 3 : i64
    %348 = llvm.load %5 : !llvm.ptr -> i64
    %349 = arith.cmpi ult, %348, %c3_i64_141 : i64
    scf.if %349 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %348, %c3_i64_141 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %350 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_142 = arith.constant 1 : i64
    %351 = llvm.load %5 : !llvm.ptr -> i64
    %352 = arith.cmpi ult, %351, %c1_i64_142 : i64
    scf.if %352 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %351, %c1_i64_142 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c12_i32_143 = arith.constant 12 : i32
    %c3_i64_144 = arith.constant 3 : i64
    %353 = llvm.load %5 : !llvm.ptr -> i64
    %354 = arith.cmpi ult, %353, %c3_i64_144 : i64
    scf.if %354 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %353, %c3_i64_144 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c31_i32_145 = arith.constant 31 : i32
    %355 = arith.cmpi ule, %c12_i32_143, %c31_i32_145 : i32
    %356 = scf.if %355 -> (i32) {
      %531 = arith.shrui %350, %c12_i32_143 : i32
      scf.yield %531 : i32
    } else {
      %c0_i32_214 = arith.constant 0 : i32
      scf.yield %c0_i32_214 : i32
    }
    %c1_i64_146 = arith.constant 1 : i64
    %357 = llvm.load %5 : !llvm.ptr -> i64
    %358 = arith.cmpi ult, %357, %c1_i64_146 : i64
    scf.if %358 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %357, %c1_i64_146 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c224_i32 = arith.constant 224 : i32
    %c3_i64_147 = arith.constant 3 : i64
    %359 = llvm.load %5 : !llvm.ptr -> i64
    %360 = arith.cmpi ult, %359, %c3_i64_147 : i64
    scf.if %360 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %359, %c3_i64_147 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %361 = arith.ori %356, %c224_i32 : i32
    %c3_i64_148 = arith.constant 3 : i64
    %362 = llvm.load %5 : !llvm.ptr -> i64
    %363 = arith.cmpi ult, %362, %c3_i64_148 : i64
    scf.if %363 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %362, %c3_i64_148 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c12_i64_149 = arith.constant 12 : i64
    %364 = arith.extui %347 : i32 to i64
    %365 = arith.addi %364, %c12_i64_149 : i64
    %366 = llvm.getelementptr %10[%365] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %367 = arith.trunci %361 : i32 to i8
    llvm.store volatile %367, %366 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_150 = arith.constant 3 : i64
    %368 = llvm.load %5 : !llvm.ptr -> i64
    %369 = arith.cmpi ult, %368, %c3_i64_150 : i64
    scf.if %369 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %368, %c3_i64_150 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %370 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_151 = arith.constant 3 : i64
    %371 = llvm.load %5 : !llvm.ptr -> i64
    %372 = arith.cmpi ult, %371, %c3_i64_151 : i64
    scf.if %372 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %371, %c3_i64_151 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %373 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_152 = arith.constant 1 : i64
    %374 = llvm.load %5 : !llvm.ptr -> i64
    %375 = arith.cmpi ult, %374, %c1_i64_152 : i64
    scf.if %375 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %374, %c1_i64_152 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c6_i32_153 = arith.constant 6 : i32
    %c3_i64_154 = arith.constant 3 : i64
    %376 = llvm.load %5 : !llvm.ptr -> i64
    %377 = arith.cmpi ult, %376, %c3_i64_154 : i64
    scf.if %377 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %376, %c3_i64_154 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c31_i32_155 = arith.constant 31 : i32
    %378 = arith.cmpi ule, %c6_i32_153, %c31_i32_155 : i32
    %379 = scf.if %378 -> (i32) {
      %531 = arith.shrui %373, %c6_i32_153 : i32
      scf.yield %531 : i32
    } else {
      %c0_i32_214 = arith.constant 0 : i32
      scf.yield %c0_i32_214 : i32
    }
    %c1_i64_156 = arith.constant 1 : i64
    %380 = llvm.load %5 : !llvm.ptr -> i64
    %381 = arith.cmpi ult, %380, %c1_i64_156 : i64
    scf.if %381 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %380, %c1_i64_156 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c63_i32_157 = arith.constant 63 : i32
    %c3_i64_158 = arith.constant 3 : i64
    %382 = llvm.load %5 : !llvm.ptr -> i64
    %383 = arith.cmpi ult, %382, %c3_i64_158 : i64
    scf.if %383 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %382, %c3_i64_158 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %384 = arith.andi %379, %c63_i32_157 : i32
    %c1_i64_159 = arith.constant 1 : i64
    %385 = llvm.load %5 : !llvm.ptr -> i64
    %386 = arith.cmpi ult, %385, %c1_i64_159 : i64
    scf.if %386 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %385, %c1_i64_159 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c128_i32_160 = arith.constant 128 : i32
    %c3_i64_161 = arith.constant 3 : i64
    %387 = llvm.load %5 : !llvm.ptr -> i64
    %388 = arith.cmpi ult, %387, %c3_i64_161 : i64
    scf.if %388 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %387, %c3_i64_161 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %389 = arith.ori %384, %c128_i32_160 : i32
    %c3_i64_162 = arith.constant 3 : i64
    %390 = llvm.load %5 : !llvm.ptr -> i64
    %391 = arith.cmpi ult, %390, %c3_i64_162 : i64
    scf.if %391 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %390, %c3_i64_162 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c13_i64_163 = arith.constant 13 : i64
    %392 = arith.extui %370 : i32 to i64
    %393 = arith.addi %392, %c13_i64_163 : i64
    %394 = llvm.getelementptr %10[%393] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %395 = arith.trunci %389 : i32 to i8
    llvm.store volatile %395, %394 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_164 = arith.constant 1 : i64
    %396 = llvm.load %5 : !llvm.ptr -> i64
    %397 = arith.cmpi ult, %396, %c1_i64_164 : i64
    scf.if %397 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %396, %c1_i64_164 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c3_i32 = arith.constant 3 : i32
    %c3_i64_165 = arith.constant 3 : i64
    %398 = llvm.load %5 : !llvm.ptr -> i64
    %399 = arith.cmpi ult, %398, %c3_i64_165 : i64
    scf.if %399 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %398, %c3_i64_165 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    %c1_i64_166 = arith.constant 1 : i64
    %400 = llvm.load %5 : !llvm.ptr -> i64
    %401 = arith.cmpi ult, %400, %c1_i64_166 : i64
    scf.if %401 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %400, %c1_i64_166 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %c3_i64_167 = arith.constant 3 : i64
    %402 = llvm.load %5 : !llvm.ptr -> i64
    %403 = arith.cmpi ult, %402, %c3_i64_167 : i64
    scf.if %403 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %402, %c3_i64_167 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %404 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_168 = arith.constant 3 : i64
    %405 = llvm.load %5 : !llvm.ptr -> i64
    %406 = arith.cmpi ult, %405, %c3_i64_168 : i64
    scf.if %406 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %405, %c3_i64_168 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %407 = arith.extui %404 : i32 to i64
    %408 = arith.addi %407, %c4_i64 : i64
    %409 = llvm.getelementptr %10[%408] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %410 = llvm.load volatile %409 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_169 = arith.constant 3 : i64
    %411 = llvm.load %5 : !llvm.ptr -> i64
    %412 = arith.cmpi ult, %411, %c3_i64_169 : i64
    scf.if %412 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %411, %c3_i64_169 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %413 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_170 = arith.constant 3 : i64
    %414 = llvm.load %5 : !llvm.ptr -> i64
    %415 = arith.cmpi ult, %414, %c3_i64_170 : i64
    scf.if %415 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %414, %c3_i64_170 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %416 = arith.addi %410, %413 : i32
    %c3_i64_171 = arith.constant 3 : i64
    %417 = llvm.load %5 : !llvm.ptr -> i64
    %418 = arith.cmpi ult, %417, %c3_i64_171 : i64
    scf.if %418 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %417, %c3_i64_171 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %419 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_172 = arith.constant 3 : i64
    %420 = llvm.load %5 : !llvm.ptr -> i64
    %421 = arith.cmpi ult, %420, %c3_i64_172 : i64
    scf.if %421 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %420, %c3_i64_172 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c0_i64_173 = arith.constant 0 : i64
    %422 = arith.extui %416 : i32 to i64
    %423 = arith.addi %422, %c0_i64_173 : i64
    %424 = llvm.getelementptr %10[%423] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %425 = arith.trunci %419 : i32 to i8
    llvm.store volatile %425, %424 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_174 = arith.constant 3 : i64
    %426 = llvm.load %5 : !llvm.ptr -> i64
    %427 = arith.cmpi ult, %426, %c3_i64_174 : i64
    scf.if %427 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %426, %c3_i64_174 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %428 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_175 = arith.constant 3 : i64
    %429 = llvm.load %5 : !llvm.ptr -> i64
    %430 = arith.cmpi ult, %429, %c3_i64_175 : i64
    scf.if %430 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %429, %c3_i64_175 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %431 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_176 = arith.constant 1 : i64
    %432 = llvm.load %5 : !llvm.ptr -> i64
    %433 = arith.cmpi ult, %432, %c1_i64_176 : i64
    scf.if %433 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %432, %c1_i64_176 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c1_i32_177 = arith.constant 1 : i32
    %c3_i64_178 = arith.constant 3 : i64
    %434 = llvm.load %5 : !llvm.ptr -> i64
    %435 = arith.cmpi ult, %434, %c3_i64_178 : i64
    scf.if %435 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %434, %c3_i64_178 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %436 = arith.addi %431, %c1_i32_177 : i32
    %c3_i64_179 = arith.constant 3 : i64
    %437 = llvm.load %5 : !llvm.ptr -> i64
    %438 = arith.cmpi ult, %437, %c3_i64_179 : i64
    scf.if %438 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %437, %c3_i64_179 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c8_i64_180 = arith.constant 8 : i64
    %439 = arith.extui %428 : i32 to i64
    %440 = arith.addi %439, %c8_i64_180 : i64
    %441 = llvm.getelementptr %10[%440] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %436, %441 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_181 = arith.constant 1 : i64
    %442 = llvm.load %5 : !llvm.ptr -> i64
    %443 = arith.cmpi ult, %442, %c1_i64_181 : i64
    scf.if %443 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %442, %c1_i64_181 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %c3_i64_182 = arith.constant 3 : i64
    %444 = llvm.load %5 : !llvm.ptr -> i64
    %445 = arith.cmpi ult, %444, %c3_i64_182 : i64
    scf.if %445 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %444, %c3_i64_182 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %446 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %447 = llvm.load %5 : !llvm.ptr -> i64
    %448 = arith.cmpi ult, %447, %c6_i64 : i64
    scf.if %448 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %447, %c6_i64 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    call @f18(%arg0, %446) : (!llvm.ptr, i32) -> ()
    %c1_i64_183 = arith.constant 1 : i64
    %449 = llvm.load %5 : !llvm.ptr -> i64
    %450 = arith.cmpi ult, %449, %c1_i64_183 : i64
    scf.if %450 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %449, %c1_i64_183 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %c3_i64_184 = arith.constant 3 : i64
    %451 = llvm.load %5 : !llvm.ptr -> i64
    %452 = arith.cmpi ult, %451, %c3_i64_184 : i64
    scf.if %452 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %451, %c3_i64_184 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %453 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_185 = arith.constant 3 : i64
    %454 = llvm.load %5 : !llvm.ptr -> i64
    %455 = arith.cmpi ult, %454, %c3_i64_185 : i64
    scf.if %455 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %454, %c3_i64_185 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c4_i64_186 = arith.constant 4 : i64
    %456 = arith.extui %453 : i32 to i64
    %457 = arith.addi %456, %c4_i64_186 : i64
    %458 = llvm.getelementptr %10[%457] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %459 = llvm.load volatile %458 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_187 = arith.constant 3 : i64
    %460 = llvm.load %5 : !llvm.ptr -> i64
    %461 = arith.cmpi ult, %460, %c3_i64_187 : i64
    scf.if %461 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %460, %c3_i64_187 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %462 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_188 = arith.constant 3 : i64
    %463 = llvm.load %5 : !llvm.ptr -> i64
    %464 = arith.cmpi ult, %463, %c3_i64_188 : i64
    scf.if %464 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %463, %c3_i64_188 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %465 = arith.addi %459, %462 : i32
    %c3_i64_189 = arith.constant 3 : i64
    %466 = llvm.load %5 : !llvm.ptr -> i64
    %467 = arith.cmpi ult, %466, %c3_i64_189 : i64
    scf.if %467 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %466, %c3_i64_189 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %468 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_190 = arith.constant 1 : i64
    %469 = llvm.load %5 : !llvm.ptr -> i64
    %470 = arith.cmpi ult, %469, %c1_i64_190 : i64
    scf.if %470 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %469, %c1_i64_190 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c12_i32_191 = arith.constant 12 : i32
    %c3_i64_192 = arith.constant 3 : i64
    %471 = llvm.load %5 : !llvm.ptr -> i64
    %472 = arith.cmpi ult, %471, %c3_i64_192 : i64
    scf.if %472 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %471, %c3_i64_192 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %473 = arith.addi %468, %c12_i32_191 : i32
    %c3_i64_193 = arith.constant 3 : i64
    %474 = llvm.load %5 : !llvm.ptr -> i64
    %475 = arith.cmpi ult, %474, %c3_i64_193 : i64
    scf.if %475 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %474, %c3_i64_193 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %476 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64_194 = arith.constant 6 : i64
    %477 = llvm.load %5 : !llvm.ptr -> i64
    %478 = arith.cmpi ult, %477, %c6_i64_194 : i64
    scf.if %478 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %477, %c6_i64_194 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %479 = call @f77(%arg0, %465, %473, %476) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_195 = arith.constant 1 : i64
    %480 = llvm.load %5 : !llvm.ptr -> i64
    %481 = arith.cmpi ult, %480, %c1_i64_195 : i64
    scf.if %481 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %480, %c1_i64_195 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c3_i64_196 = arith.constant 3 : i64
    %482 = llvm.load %5 : !llvm.ptr -> i64
    %483 = arith.cmpi ult, %482, %c3_i64_196 : i64
    scf.if %483 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %482, %c3_i64_196 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %484 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_197 = arith.constant 3 : i64
    %485 = llvm.load %5 : !llvm.ptr -> i64
    %486 = arith.cmpi ult, %485, %c3_i64_197 : i64
    scf.if %486 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %485, %c3_i64_197 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %487 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_198 = arith.constant 3 : i64
    %488 = llvm.load %5 : !llvm.ptr -> i64
    %489 = arith.cmpi ult, %488, %c3_i64_198 : i64
    scf.if %489 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %488, %c3_i64_198 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c8_i64_199 = arith.constant 8 : i64
    %490 = arith.extui %487 : i32 to i64
    %491 = arith.addi %490, %c8_i64_199 : i64
    %492 = llvm.getelementptr %10[%491] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %493 = llvm.load volatile %492 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_200 = arith.constant 3 : i64
    %494 = llvm.load %5 : !llvm.ptr -> i64
    %495 = arith.cmpi ult, %494, %c3_i64_200 : i64
    scf.if %495 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %494, %c3_i64_200 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %496 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_201 = arith.constant 3 : i64
    %497 = llvm.load %5 : !llvm.ptr -> i64
    %498 = arith.cmpi ult, %497, %c3_i64_201 : i64
    scf.if %498 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %497, %c3_i64_201 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %499 = arith.addi %493, %496 : i32
    %c3_i64_202 = arith.constant 3 : i64
    %500 = llvm.load %5 : !llvm.ptr -> i64
    %501 = arith.cmpi ult, %500, %c3_i64_202 : i64
    scf.if %501 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %500, %c3_i64_202 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c8_i64_203 = arith.constant 8 : i64
    %502 = arith.extui %484 : i32 to i64
    %503 = arith.addi %502, %c8_i64_203 : i64
    %504 = llvm.getelementptr %10[%503] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %499, %504 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_204 = arith.constant 1 : i64
    %505 = llvm.load %5 : !llvm.ptr -> i64
    %506 = arith.cmpi ult, %505, %c1_i64_204 : i64
    scf.if %506 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %505, %c1_i64_204 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %c3_i64_205 = arith.constant 3 : i64
    %507 = llvm.load %5 : !llvm.ptr -> i64
    %508 = arith.cmpi ult, %507, %c3_i64_205 : i64
    scf.if %508 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %507, %c3_i64_205 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %509 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_206 = arith.constant 3 : i64
    %510 = llvm.load %5 : !llvm.ptr -> i64
    %511 = arith.cmpi ult, %510, %c3_i64_206 : i64
    scf.if %511 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %510, %c3_i64_206 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %512 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_207 = arith.constant 3 : i64
    %513 = llvm.load %5 : !llvm.ptr -> i64
    %514 = arith.cmpi ult, %513, %c3_i64_207 : i64
    scf.if %514 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %513, %c3_i64_207 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %515 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64_208 = arith.constant 6 : i64
    %516 = llvm.load %5 : !llvm.ptr -> i64
    %517 = arith.cmpi ult, %516, %c6_i64_208 : i64
    scf.if %517 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %516, %c6_i64_208 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    call @f19(%arg0, %509, %512, %515) : (!llvm.ptr, i32, i32, i32) -> ()
    %c3_i64_209 = arith.constant 3 : i64
    %518 = llvm.load %5 : !llvm.ptr -> i64
    %519 = arith.cmpi ult, %518, %c3_i64_209 : i64
    scf.if %519 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %518, %c3_i64_209 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %520 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_210 = arith.constant 3 : i64
    %521 = llvm.load %5 : !llvm.ptr -> i64
    %522 = arith.cmpi ult, %521, %c3_i64_210 : i64
    scf.if %522 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %521, %c3_i64_210 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    %c8_i64_211 = arith.constant 8 : i64
    %523 = arith.extui %520 : i32 to i64
    %524 = arith.addi %523, %c8_i64_211 : i64
    %525 = llvm.getelementptr %10[%524] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %526 = llvm.load volatile %525 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_212 = arith.constant 3 : i64
    %527 = llvm.load %5 : !llvm.ptr -> i64
    %528 = arith.cmpi ult, %527, %c3_i64_212 : i64
    scf.if %528 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %527, %c3_i64_212 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    llvm.store %526, %3 : i32, !llvm.ptr
    %c1_i64_213 = arith.constant 1 : i64
    %529 = llvm.load %5 : !llvm.ptr -> i64
    %530 = arith.cmpi ult, %529, %c1_i64_213 : i64
    scf.if %530 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %531 = arith.subi %529, %c1_i64_213 : i64
      llvm.store %531, %5 : i64, !llvm.ptr
    }
    cf.br ^bb13
  }
  func.func @f3(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_3 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %4, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %9 = llvm.load %5 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c1_i64 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %9, %c1_i64 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %5 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %11, %c3_i64 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %14 = llvm.load %5 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c3_i64_4 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %14, %c3_i64_4 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %16 = arith.extui %13 : i32 to i64
    %17 = arith.addi %16, %c0_i64 : i64
    %18 = llvm.getelementptr %8[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_5 = arith.constant 3 : i64
    %20 = llvm.load %5 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_5 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %20, %c3_i64_5 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_6 = arith.constant 3 : i64
    %23 = llvm.load %5 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_6 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %23, %c3_i64_6 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %22 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_7 = arith.constant 3 : i64
    %29 = llvm.load %5 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_7 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %29, %c3_i64_7 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    llvm.store %28, %3 : i32, !llvm.ptr
    %c3_i64_8 = arith.constant 3 : i64
    %31 = llvm.load %5 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_8 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %31, %c3_i64_8 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %33 = arith.subi %19, %28 : i32
    %c3_i64_9 = arith.constant 3 : i64
    %34 = llvm.load %5 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c3_i64_9 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %34, %c3_i64_9 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_10 = arith.constant 3 : i64
    %37 = llvm.load %5 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c3_i64_10 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %37, %c3_i64_10 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %39 = arith.cmpi uge, %33, %36 : i32
    %40 = arith.extui %39 : i1 to i32
    %c1_i64_11 = arith.constant 1 : i64
    %41 = llvm.load %5 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c1_i64_11 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %41, %c1_i64_11 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c0_i32_12 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %40, %c0_i32_12 : i32
    cf.cond_br %43, ^bb3, ^bb4
  ^bb2(%44: i32):  // pred: ^bb3
    return %44 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c3_i64_13 = arith.constant 3 : i64
    %45 = llvm.load %5 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_13 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %45, %c3_i64_13 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_14 = arith.constant 3 : i64
    %48 = llvm.load %5 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c3_i64_14 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %48, %c3_i64_14 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %50 = arith.extui %47 : i32 to i64
    %51 = arith.addi %50, %c4_i64 : i64
    %52 = llvm.getelementptr %8[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %54 = llvm.load %5 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %c3_i64_15 : i64
    scf.if %55 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %54, %c3_i64_15 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_16 = arith.constant 3 : i64
    %57 = llvm.load %5 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_16 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %57, %c3_i64_16 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %59 = arith.addi %53, %56 : i32
    %c3_i64_17 = arith.constant 3 : i64
    %60 = llvm.load %5 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_17 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %60, %c3_i64_17 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_18 = arith.constant 3 : i64
    %63 = llvm.load %5 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c3_i64_18 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %63, %c3_i64_18 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %66 = llvm.load %5 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c6_i64 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %66, %c6_i64 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %68 = call @f77(%arg0, %59, %62, %65) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_19 = arith.constant 1 : i64
    %69 = llvm.load %5 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c1_i64_19 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %69, %c1_i64_19 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c3_i64_20 = arith.constant 3 : i64
    %71 = llvm.load %5 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c3_i64_20 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %71, %c3_i64_20 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_21 = arith.constant 3 : i64
    %74 = llvm.load %5 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c3_i64_21 : i64
    scf.if %75 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %74, %c3_i64_21 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_22 = arith.constant 3 : i64
    %77 = llvm.load %5 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c3_i64_22 : i64
    scf.if %78 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %77, %c3_i64_22 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c8_i64_23 = arith.constant 8 : i64
    %79 = arith.extui %76 : i32 to i64
    %80 = arith.addi %79, %c8_i64_23 : i64
    %81 = llvm.getelementptr %8[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_24 = arith.constant 3 : i64
    %83 = llvm.load %5 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_24 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %83, %c3_i64_24 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_25 = arith.constant 3 : i64
    %86 = llvm.load %5 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %c3_i64_25 : i64
    scf.if %87 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %86, %c3_i64_25 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %88 = arith.addi %82, %85 : i32
    %c3_i64_26 = arith.constant 3 : i64
    %89 = llvm.load %5 : !llvm.ptr -> i64
    %90 = arith.cmpi ult, %89, %c3_i64_26 : i64
    scf.if %90 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %89, %c3_i64_26 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c8_i64_27 = arith.constant 8 : i64
    %91 = arith.extui %73 : i32 to i64
    %92 = arith.addi %91, %c8_i64_27 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %93 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_28 = arith.constant 1 : i64
    %94 = llvm.load %5 : !llvm.ptr -> i64
    %95 = arith.cmpi ult, %94, %c1_i64_28 : i64
    scf.if %95 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %94, %c1_i64_28 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c0_i32_29 = arith.constant 0 : i32
    %c1_i64_30 = arith.constant 1 : i64
    %96 = llvm.load %5 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c1_i64_30 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %96, %c1_i64_30 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c0_i32_29 : i32)
  ^bb4:  // pred: ^bb1
    %c3_i64_31 = arith.constant 3 : i64
    %98 = llvm.load %5 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_31 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %98, %c3_i64_31 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %100 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_32 = arith.constant 3 : i64
    %101 = llvm.load %5 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c3_i64_32 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %101, %c3_i64_32 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %103 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_33 = arith.constant 3 : i64
    %104 = llvm.load %5 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c3_i64_33 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %104, %c3_i64_33 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64_34 = arith.constant 6 : i64
    %107 = llvm.load %5 : !llvm.ptr -> i64
    %108 = arith.cmpi ult, %107, %c6_i64_34 : i64
    scf.if %108 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %107, %c6_i64_34 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    call @f19(%arg0, %100, %103, %106) : (!llvm.ptr, i32, i32, i32) -> ()
    %c3_i64_35 = arith.constant 3 : i64
    %109 = llvm.load %5 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c3_i64_35 : i64
    scf.if %110 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %109, %c3_i64_35 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %111 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_36 = arith.constant 3 : i64
    %112 = llvm.load %5 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c3_i64_36 : i64
    scf.if %113 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %112, %c3_i64_36 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c8_i64_37 = arith.constant 8 : i64
    %114 = arith.extui %111 : i32 to i64
    %115 = arith.addi %114, %c8_i64_37 : i64
    %116 = llvm.getelementptr %8[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %117 = llvm.load volatile %116 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_38 = arith.constant 3 : i64
    %118 = llvm.load %5 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_38 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %118, %c3_i64_38 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    llvm.store %117, %3 : i32, !llvm.ptr
    %c1_i64_39 = arith.constant 1 : i64
    %120 = llvm.load %5 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c1_i64_39 : i64
    scf.if %121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %120, %c1_i64_39 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f4(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %7, %c3_i64 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c3_i64_2 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %10, %c3_i64_2 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %12 = arith.extui %9 : i32 to i64
    %13 = arith.addi %12, %c4_i64 : i64
    %14 = llvm.getelementptr %6[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %16 = llvm.load %3 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64_3 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %16, %c3_i64_3 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %19 = llvm.load %3 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_4 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %19, %c3_i64_4 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %21 = arith.extui %18 : i32 to i64
    %22 = arith.addi %21, %c8_i64 : i64
    %23 = llvm.getelementptr %6[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_5 = arith.constant 3 : i64
    %25 = llvm.load %3 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c3_i64_5 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %25, %c3_i64_5 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %28 = llvm.load %3 : !llvm.ptr -> i64
    %29 = arith.cmpi ult, %28, %c6_i64 : i64
    scf.if %29 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %28, %c6_i64 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %30 = call @f74(%arg0, %15, %24, %27) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64 = arith.constant 1 : i64
    %31 = llvm.load %3 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c1_i64 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %31, %c1_i64 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%30 : i32)
  ^bb2(%33: i32):  // pred: ^bb1
    return %33 : i32
  }
  func.func public @fibonacci(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_4 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %5, %6 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %7 = llvm.load %6 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c1_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %7, %c1_i64 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %c1_i64_5 = arith.constant 1 : i64
    %9 = llvm.load %6 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c1_i64_5 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %9, %c1_i64_5 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %6 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %11, %c3_i64 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_6 = arith.constant 1 : i64
    %14 = llvm.load %6 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c1_i64_6 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %14, %c1_i64_6 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %c0_i32_7 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %13, %c0_i32_7 : i32
    cf.cond_br %16, ^bb4, ^bb5
  ^bb2(%17: i32):  // pred: ^bb3
    return %17 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb6
    %c3_i64_8 = arith.constant 3 : i64
    %18 = llvm.load %6 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_8 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %18, %c3_i64_8 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_9 = arith.constant 1 : i64
    %21 = llvm.load %6 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c1_i64_9 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %21, %c1_i64_9 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    cf.br ^bb2(%20 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i64_10 = arith.constant 1 : i64
    %23 = llvm.load %6 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c1_i64_10 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %23, %c1_i64_10 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %c1_i32_11 = arith.constant 1 : i32
    %c3_i64_12 = arith.constant 3 : i64
    %25 = llvm.load %6 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c3_i64_12 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %25, %c3_i64_12 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_11, %2 : i32, !llvm.ptr
    %c1_i64_13 = arith.constant 1 : i64
    %27 = llvm.load %6 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c1_i64_13 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %27, %c1_i64_13 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %c0_i32_14 = arith.constant 0 : i32
    %c3_i64_15 = arith.constant 3 : i64
    %29 = llvm.load %6 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_15 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %29, %c3_i64_15 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_14, %3 : i32, !llvm.ptr
    %c1_i64_16 = arith.constant 1 : i64
    %31 = llvm.load %6 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c1_i64_16 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %31, %c1_i64_16 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    cf.br ^bb7
  ^bb5:  // pred: ^bb1
    %c1_i64_17 = arith.constant 1 : i64
    %33 = llvm.load %6 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c1_i64_17 : i64
    scf.if %34 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %33, %c1_i64_17 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %c0_i32_18 = arith.constant 0 : i32
    %c3_i64_19 = arith.constant 3 : i64
    %35 = llvm.load %6 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %c3_i64_19 : i64
    scf.if %36 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %35, %c3_i64_19 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    %c1_i64_20 = arith.constant 1 : i64
    %37 = llvm.load %6 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c1_i64_20 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %37, %c1_i64_20 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb6:  // pred: ^bb8
    %c1_i64_21 = arith.constant 1 : i64
    %39 = llvm.load %6 : !llvm.ptr -> i64
    %40 = arith.cmpi ult, %39, %c1_i64_21 : i64
    scf.if %40 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %39, %c1_i64_21 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb7:  // 2 preds: ^bb4, ^bb7
    %c3_i64_22 = arith.constant 3 : i64
    %41 = llvm.load %6 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c3_i64_22 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %41, %c3_i64_22 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_23 = arith.constant 3 : i64
    %44 = llvm.load %6 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c3_i64_23 : i64
    scf.if %45 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %44, %c3_i64_23 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_24 = arith.constant 3 : i64
    %47 = llvm.load %6 : !llvm.ptr -> i64
    %48 = arith.cmpi ult, %47, %c3_i64_24 : i64
    scf.if %48 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %47, %c3_i64_24 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %49 = arith.addi %43, %46 : i32
    %c3_i64_25 = arith.constant 3 : i64
    %50 = llvm.load %6 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c3_i64_25 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %50, %c3_i64_25 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    llvm.store %49, %4 : i32, !llvm.ptr
    %c3_i64_26 = arith.constant 3 : i64
    %52 = llvm.load %6 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c3_i64_26 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %52, %c3_i64_26 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_27 = arith.constant 3 : i64
    %55 = llvm.load %6 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c3_i64_27 : i64
    scf.if %56 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %55, %c3_i64_27 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    llvm.store %54, %1 : i32, !llvm.ptr
    %c3_i64_28 = arith.constant 3 : i64
    %57 = llvm.load %6 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_28 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %57, %c3_i64_28 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_29 = arith.constant 3 : i64
    %60 = llvm.load %6 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_29 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %60, %c3_i64_29 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    llvm.store %59, %3 : i32, !llvm.ptr
    %c3_i64_30 = arith.constant 3 : i64
    %62 = llvm.load %6 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c3_i64_30 : i64
    scf.if %63 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %62, %c3_i64_30 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %64 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_31 = arith.constant 3 : i64
    %65 = llvm.load %6 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c3_i64_31 : i64
    scf.if %66 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %65, %c3_i64_31 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    llvm.store %64, %2 : i32, !llvm.ptr
    %c3_i64_32 = arith.constant 3 : i64
    %67 = llvm.load %6 : !llvm.ptr -> i64
    %68 = arith.cmpi ult, %67, %c3_i64_32 : i64
    scf.if %68 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %67, %c3_i64_32 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_33 = arith.constant 1 : i64
    %70 = llvm.load %6 : !llvm.ptr -> i64
    %71 = arith.cmpi ult, %70, %c1_i64_33 : i64
    scf.if %71 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %70, %c1_i64_33 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_34 = arith.constant 3 : i64
    %72 = llvm.load %6 : !llvm.ptr -> i64
    %73 = arith.cmpi ult, %72, %c3_i64_34 : i64
    scf.if %73 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %72, %c3_i64_34 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %74 = arith.addi %69, %c-1_i32 : i32
    %c3_i64_35 = arith.constant 3 : i64
    %75 = llvm.load %6 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c3_i64_35 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %75, %c3_i64_35 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    llvm.store %74, %0 : i32, !llvm.ptr
    %c1_i64_36 = arith.constant 1 : i64
    %77 = llvm.load %6 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c1_i64_36 : i64
    scf.if %78 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %77, %c1_i64_36 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    %c0_i32_37 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %74, %c0_i32_37 : i32
    cf.cond_br %79, ^bb7, ^bb8
  ^bb8:  // pred: ^bb7
    %c1_i64_38 = arith.constant 1 : i64
    %80 = llvm.load %6 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c1_i64_38 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %82 = arith.subi %80, %c1_i64_38 : i64
      llvm.store %82, %6 : i64, !llvm.ptr
    }
    cf.br ^bb6
  }
  func.func public @call(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_0 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %1, %2 : i64, !llvm.ptr
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %8 = llvm.load %2 : !llvm.ptr -> i64
    %9 = arith.cmpi ult, %8, %c3_i64 : i64
    scf.if %9 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %8, %c3_i64 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %10 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %11 = llvm.load %2 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c1_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %11, %c1_i64 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c112_i32 = arith.constant 112 : i32
    %c3_i64_1 = arith.constant 3 : i64
    %13 = llvm.load %2 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64_1 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %13, %c3_i64_1 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %15 = arith.subi %10, %c112_i32 : i32
    %c3_i64_2 = arith.constant 3 : i64
    %16 = llvm.load %2 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64_2 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %16, %c3_i64_2 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    llvm.store %15, %0 : i32, !llvm.ptr
    %c3_i64_3 = arith.constant 3 : i64
    %18 = llvm.load %2 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_3 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %18, %c3_i64_3 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    llvm.store %15, %4 : i32, !llvm.ptr
    %c3_i64_4 = arith.constant 3 : i64
    %20 = llvm.load %2 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_4 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %20, %c3_i64_4 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_5 = arith.constant 1 : i64
    %23 = llvm.load %2 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c1_i64_5 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %23, %c1_i64_5 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c55_i32 = arith.constant 55 : i32
    %c3_i64_6 = arith.constant 3 : i64
    %25 = llvm.load %2 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c3_i64_6 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %25, %c3_i64_6 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %27 = arith.extui %22 : i32 to i64
    %28 = arith.addi %27, %c12_i64 : i64
    %29 = llvm.getelementptr %7[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c55_i32, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_7 = arith.constant 3 : i64
    %30 = llvm.load %2 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c3_i64_7 : i64
    scf.if %31 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %30, %c3_i64_7 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_8 = arith.constant 1 : i64
    %33 = llvm.load %2 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c1_i64_8 : i64
    scf.if %34 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %33, %c1_i64_8 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c0_i32_9 = arith.constant 0 : i32
    %c3_i64_10 = arith.constant 3 : i64
    %35 = llvm.load %2 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %c3_i64_10 : i64
    scf.if %36 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %35, %c3_i64_10 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c72_i64 = arith.constant 72 : i64
    %37 = arith.extui %32 : i32 to i64
    %38 = arith.addi %37, %c72_i64 : i64
    %39 = llvm.getelementptr %7[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_9, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_11 = arith.constant 3 : i64
    %40 = llvm.load %2 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c3_i64_11 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %40, %c3_i64_11 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_12 = arith.constant 1 : i64
    %43 = llvm.load %2 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c1_i64_12 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %43, %c1_i64_12 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c3_i64_13 = arith.constant 3 : i64
    %45 = llvm.load %2 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_13 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %45, %c3_i64_13 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c64_i64 = arith.constant 64 : i64
    %47 = arith.extui %42 : i32 to i64
    %48 = arith.addi %47, %c64_i64 : i64
    %49 = llvm.getelementptr %7[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %49 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_14 = arith.constant 3 : i64
    %50 = llvm.load %2 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c3_i64_14 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %50, %c3_i64_14 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %52 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_15 = arith.constant 1 : i64
    %53 = llvm.load %2 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c1_i64_15 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %53, %c1_i64_15 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c3_i32 = arith.constant 3 : i32
    %c3_i64_16 = arith.constant 3 : i64
    %55 = llvm.load %2 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c3_i64_16 : i64
    scf.if %56 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %55, %c3_i64_16 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c108_i64 = arith.constant 108 : i64
    %57 = arith.extui %52 : i32 to i64
    %58 = arith.addi %57, %c108_i64 : i64
    %59 = llvm.getelementptr %7[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %60, %59 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_17 = arith.constant 3 : i64
    %61 = llvm.load %2 : !llvm.ptr -> i64
    %62 = arith.cmpi ult, %61, %c3_i64_17 : i64
    scf.if %62 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %61, %c3_i64_17 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_18 = arith.constant 1 : i64
    %64 = llvm.load %2 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c1_i64_18 : i64
    scf.if %65 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %64, %c1_i64_18 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_19 = arith.constant 3 : i64
    %66 = llvm.load %2 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c3_i64_19 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %66, %c3_i64_19 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c92_i64 = arith.constant 92 : i64
    %68 = arith.extui %63 : i32 to i64
    %69 = arith.addi %68, %c92_i64 : i64
    %70 = llvm.getelementptr %7[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %70 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_20 = arith.constant 3 : i64
    %71 = llvm.load %2 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c3_i64_20 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %71, %c3_i64_20 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_21 = arith.constant 1 : i64
    %74 = llvm.load %2 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c1_i64_21 : i64
    scf.if %75 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %74, %c1_i64_21 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c0_i32_22 = arith.constant 0 : i32
    %c3_i64_23 = arith.constant 3 : i64
    %76 = llvm.load %2 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c3_i64_23 : i64
    scf.if %77 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %76, %c3_i64_23 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c104_i64 = arith.constant 104 : i64
    %78 = arith.extui %73 : i32 to i64
    %79 = arith.addi %78, %c104_i64 : i64
    %80 = llvm.getelementptr %7[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_22, %80 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_24 = arith.constant 3 : i64
    %81 = llvm.load %2 : !llvm.ptr -> i64
    %82 = arith.cmpi ult, %81, %c3_i64_24 : i64
    scf.if %82 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %81, %c3_i64_24 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %83 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_25 = arith.constant 1 : i64
    %84 = llvm.load %2 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c1_i64_25 : i64
    scf.if %85 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %84, %c1_i64_25 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c1048576_i32 = arith.constant 1048576 : i32
    %c3_i64_26 = arith.constant 3 : i64
    %86 = llvm.load %2 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %c3_i64_26 : i64
    scf.if %87 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %86, %c3_i64_26 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c100_i64 = arith.constant 100 : i64
    %88 = arith.extui %83 : i32 to i64
    %89 = arith.addi %88, %c100_i64 : i64
    %90 = llvm.getelementptr %7[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048576_i32, %90 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_27 = arith.constant 3 : i64
    %91 = llvm.load %2 : !llvm.ptr -> i64
    %92 = arith.cmpi ult, %91, %c3_i64_27 : i64
    scf.if %92 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %91, %c3_i64_27 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %93 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_28 = arith.constant 1 : i64
    %94 = llvm.load %2 : !llvm.ptr -> i64
    %95 = arith.cmpi ult, %94, %c1_i64_28 : i64
    scf.if %95 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %94, %c1_i64_28 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c0_i32_29 = arith.constant 0 : i32
    %c3_i64_30 = arith.constant 3 : i64
    %96 = llvm.load %2 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c3_i64_30 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %96, %c3_i64_30 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c84_i64 = arith.constant 84 : i64
    %98 = arith.extui %93 : i32 to i64
    %99 = arith.addi %98, %c84_i64 : i64
    %100 = llvm.getelementptr %7[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_29, %100 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_31 = arith.constant 3 : i64
    %101 = llvm.load %2 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c3_i64_31 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %101, %c3_i64_31 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %103 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_32 = arith.constant 1 : i64
    %104 = llvm.load %2 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c1_i64_32 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %104, %c1_i64_32 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c0_i32_33 = arith.constant 0 : i32
    %c3_i64_34 = arith.constant 3 : i64
    %106 = llvm.load %2 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c3_i64_34 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %106, %c3_i64_34 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c76_i64 = arith.constant 76 : i64
    %108 = arith.extui %103 : i32 to i64
    %109 = arith.addi %108, %c76_i64 : i64
    %110 = llvm.getelementptr %7[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_33, %110 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_35 = arith.constant 3 : i64
    %111 = llvm.load %2 : !llvm.ptr -> i64
    %112 = arith.cmpi ult, %111, %c3_i64_35 : i64
    scf.if %112 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %111, %c3_i64_35 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %113 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_36 = arith.constant 3 : i64
    %114 = llvm.load %2 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %c3_i64_36 : i64
    scf.if %115 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %114, %c3_i64_36 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %116 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_37 = arith.constant 1 : i64
    %117 = llvm.load %2 : !llvm.ptr -> i64
    %118 = arith.cmpi ult, %117, %c1_i64_37 : i64
    scf.if %118 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %117, %c1_i64_37 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c64_i32 = arith.constant 64 : i32
    %c3_i64_38 = arith.constant 3 : i64
    %119 = llvm.load %2 : !llvm.ptr -> i64
    %120 = arith.cmpi ult, %119, %c3_i64_38 : i64
    scf.if %120 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %119, %c3_i64_38 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %121 = arith.addi %116, %c64_i32 : i32
    %c3_i64_39 = arith.constant 3 : i64
    %122 = llvm.load %2 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %c3_i64_39 : i64
    scf.if %123 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %122, %c3_i64_39 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c96_i64 = arith.constant 96 : i64
    %124 = arith.extui %113 : i32 to i64
    %125 = arith.addi %124, %c96_i64 : i64
    %126 = llvm.getelementptr %7[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %126 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_40 = arith.constant 1 : i64
    %127 = llvm.load %2 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c1_i64_40 : i64
    scf.if %128 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %127, %c1_i64_40 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c3_i64_41 = arith.constant 3 : i64
    %129 = llvm.load %2 : !llvm.ptr -> i64
    %130 = arith.cmpi ult, %129, %c3_i64_41 : i64
    scf.if %130 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %129, %c3_i64_41 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %131 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_42 = arith.constant 1 : i64
    %132 = llvm.load %2 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c1_i64_42 : i64
    scf.if %133 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %132, %c1_i64_42 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c12_i32 = arith.constant 12 : i32
    %c3_i64_43 = arith.constant 3 : i64
    %134 = llvm.load %2 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c3_i64_43 : i64
    scf.if %135 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %134, %c3_i64_43 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %136 = arith.addi %131, %c12_i32 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %137 = llvm.load %2 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c3_i64_44 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %137, %c3_i64_44 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %139 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_45 = arith.constant 1 : i64
    %140 = llvm.load %2 : !llvm.ptr -> i64
    %141 = arith.cmpi ult, %140, %c1_i64_45 : i64
    scf.if %141 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %140, %c1_i64_45 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c76_i32 = arith.constant 76 : i32
    %c3_i64_46 = arith.constant 3 : i64
    %142 = llvm.load %2 : !llvm.ptr -> i64
    %143 = arith.cmpi ult, %142, %c3_i64_46 : i64
    scf.if %143 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %142, %c3_i64_46 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %144 = arith.addi %139, %c76_i32 : i32
    %c6_i64 = arith.constant 6 : i64
    %145 = llvm.load %2 : !llvm.ptr -> i64
    %146 = arith.cmpi ult, %145, %c6_i64 : i64
    scf.if %146 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %145, %c6_i64 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %147 = call @f65(%arg0, %136, %144) : (!llvm.ptr, i32, i32) -> i32
    %c3_i64_47 = arith.constant 3 : i64
    %148 = llvm.load %2 : !llvm.ptr -> i64
    %149 = arith.cmpi ult, %148, %c3_i64_47 : i64
    scf.if %149 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %148, %c3_i64_47 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c0_i32_48 = arith.constant 0 : i32
    %150 = arith.cmpi eq, %147, %c0_i32_48 : i32
    %151 = arith.extui %150 : i1 to i32
    %c1_i64_49 = arith.constant 1 : i64
    %152 = llvm.load %2 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c1_i64_49 : i64
    scf.if %153 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %152, %c1_i64_49 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c0_i32_50 = arith.constant 0 : i32
    %154 = arith.cmpi ne, %151, %c0_i32_50 : i32
    cf.cond_br %154, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %c3_i64_51 = arith.constant 3 : i64
    %155 = llvm.load %2 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %c3_i64_51 : i64
    scf.if %156 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %155, %c3_i64_51 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %157 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_52 = arith.constant 1 : i64
    %158 = llvm.load %2 : !llvm.ptr -> i64
    %159 = arith.cmpi ult, %158, %c1_i64_52 : i64
    scf.if %159 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %158, %c1_i64_52 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c48_i32 = arith.constant 48 : i32
    %c3_i64_53 = arith.constant 3 : i64
    %160 = llvm.load %2 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_53 : i64
    scf.if %161 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %160, %c3_i64_53 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %162 = arith.addi %157, %c48_i32 : i32
    %c1_i64_54 = arith.constant 1 : i64
    %163 = llvm.load %2 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c1_i64_54 : i64
    scf.if %164 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %163, %c1_i64_54 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_55 = arith.constant 3 : i64
    %165 = llvm.load %2 : !llvm.ptr -> i64
    %166 = arith.cmpi ult, %165, %c3_i64_55 : i64
    scf.if %166 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %165, %c3_i64_55 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %167 = arith.addi %162, %c8_i32 : i32
    %c3_i64_56 = arith.constant 3 : i64
    %168 = llvm.load %2 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c3_i64_56 : i64
    scf.if %169 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %168, %c3_i64_56 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %170 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_57 = arith.constant 1 : i64
    %171 = llvm.load %2 : !llvm.ptr -> i64
    %172 = arith.cmpi ult, %171, %c1_i64_57 : i64
    scf.if %172 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %171, %c1_i64_57 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c64_i32_58 = arith.constant 64 : i32
    %c3_i64_59 = arith.constant 3 : i64
    %173 = llvm.load %2 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c3_i64_59 : i64
    scf.if %174 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %173, %c3_i64_59 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %175 = arith.addi %170, %c64_i32_58 : i32
    %c1_i64_60 = arith.constant 1 : i64
    %176 = llvm.load %2 : !llvm.ptr -> i64
    %177 = arith.cmpi ult, %176, %c1_i64_60 : i64
    scf.if %177 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %176, %c1_i64_60 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c8_i32_61 = arith.constant 8 : i32
    %c3_i64_62 = arith.constant 3 : i64
    %178 = llvm.load %2 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c3_i64_62 : i64
    scf.if %179 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %178, %c3_i64_62 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %180 = arith.addi %175, %c8_i32_61 : i32
    %c3_i64_63 = arith.constant 3 : i64
    %181 = llvm.load %2 : !llvm.ptr -> i64
    %182 = arith.cmpi ult, %181, %c3_i64_63 : i64
    scf.if %182 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %181, %c3_i64_63 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %183 = arith.extui %180 : i32 to i64
    %184 = arith.addi %183, %c0_i64 : i64
    %185 = llvm.getelementptr %7[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = llvm.load volatile %185 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_64 = arith.constant 3 : i64
    %187 = llvm.load %2 : !llvm.ptr -> i64
    %188 = arith.cmpi ult, %187, %c3_i64_64 : i64
    scf.if %188 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %187, %c3_i64_64 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c0_i64_65 = arith.constant 0 : i64
    %189 = arith.extui %167 : i32 to i64
    %190 = arith.addi %189, %c0_i64_65 : i64
    %191 = llvm.getelementptr %7[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %186, %191 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_66 = arith.constant 3 : i64
    %192 = llvm.load %2 : !llvm.ptr -> i64
    %193 = arith.cmpi ult, %192, %c3_i64_66 : i64
    scf.if %193 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %192, %c3_i64_66 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %194 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_67 = arith.constant 3 : i64
    %195 = llvm.load %2 : !llvm.ptr -> i64
    %196 = arith.cmpi ult, %195, %c3_i64_67 : i64
    scf.if %196 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %195, %c3_i64_67 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %197 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_68 = arith.constant 3 : i64
    %198 = llvm.load %2 : !llvm.ptr -> i64
    %199 = arith.cmpi ult, %198, %c3_i64_68 : i64
    scf.if %199 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %198, %c3_i64_68 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c64_i64_69 = arith.constant 64 : i64
    %200 = arith.extui %197 : i32 to i64
    %201 = arith.addi %200, %c64_i64_69 : i64
    %202 = llvm.getelementptr %7[%201] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %203 = llvm.load volatile %202 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_70 = arith.constant 3 : i64
    %204 = llvm.load %2 : !llvm.ptr -> i64
    %205 = arith.cmpi ult, %204, %c3_i64_70 : i64
    scf.if %205 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %204, %c3_i64_70 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c48_i64 = arith.constant 48 : i64
    %206 = arith.extui %194 : i32 to i64
    %207 = arith.addi %206, %c48_i64 : i64
    %208 = llvm.getelementptr %7[%207] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %203, %208 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_71 = arith.constant 3 : i64
    %209 = llvm.load %2 : !llvm.ptr -> i64
    %210 = arith.cmpi ult, %209, %c3_i64_71 : i64
    scf.if %210 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %209, %c3_i64_71 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %211 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_72 = arith.constant 1 : i64
    %212 = llvm.load %2 : !llvm.ptr -> i64
    %213 = arith.cmpi ult, %212, %c1_i64_72 : i64
    scf.if %213 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %212, %c1_i64_72 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c1_i32_73 = arith.constant 1 : i32
    %c3_i64_74 = arith.constant 3 : i64
    %214 = llvm.load %2 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c3_i64_74 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %214, %c3_i64_74 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c44_i64 = arith.constant 44 : i64
    %216 = arith.extui %211 : i32 to i64
    %217 = arith.addi %216, %c44_i64 : i64
    %218 = llvm.getelementptr %7[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_73, %218 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_75 = arith.constant 3 : i64
    %219 = llvm.load %2 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c3_i64_75 : i64
    scf.if %220 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %219, %c3_i64_75 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %221 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_76 = arith.constant 1 : i64
    %222 = llvm.load %2 : !llvm.ptr -> i64
    %223 = arith.cmpi ult, %222, %c1_i64_76 : i64
    scf.if %223 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %222, %c1_i64_76 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c1_i32_77 = arith.constant 1 : i32
    %c3_i64_78 = arith.constant 3 : i64
    %224 = llvm.load %2 : !llvm.ptr -> i64
    %225 = arith.cmpi ult, %224, %c3_i64_78 : i64
    scf.if %225 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %224, %c3_i64_78 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %226 = arith.extui %221 : i32 to i64
    %227 = arith.addi %226, %c20_i64 : i64
    %228 = llvm.getelementptr %7[%227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_77, %228 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_79 = arith.constant 3 : i64
    %229 = llvm.load %2 : !llvm.ptr -> i64
    %230 = arith.cmpi ult, %229, %c3_i64_79 : i64
    scf.if %230 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %229, %c3_i64_79 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %231 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_80 = arith.constant 1 : i64
    %232 = llvm.load %2 : !llvm.ptr -> i64
    %233 = arith.cmpi ult, %232, %c1_i64_80 : i64
    scf.if %233 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %232, %c1_i64_80 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c1048792_i32 = arith.constant 1048792 : i32
    %c3_i64_81 = arith.constant 3 : i64
    %234 = llvm.load %2 : !llvm.ptr -> i64
    %235 = arith.cmpi ult, %234, %c3_i64_81 : i64
    scf.if %235 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %234, %c3_i64_81 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %236 = arith.extui %231 : i32 to i64
    %237 = arith.addi %236, %c16_i64 : i64
    %238 = llvm.getelementptr %7[%237] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048792_i32, %238 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_82 = arith.constant 3 : i64
    %239 = llvm.load %2 : !llvm.ptr -> i64
    %240 = arith.cmpi ult, %239, %c3_i64_82 : i64
    scf.if %240 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %239, %c3_i64_82 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %241 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_83 = arith.constant 1 : i64
    %242 = llvm.load %2 : !llvm.ptr -> i64
    %243 = arith.cmpi ult, %242, %c1_i64_83 : i64
    scf.if %243 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %242, %c1_i64_83 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c1_i64_84 = arith.constant 1 : i64
    %c3_i64_85 = arith.constant 3 : i64
    %244 = llvm.load %2 : !llvm.ptr -> i64
    %245 = arith.cmpi ult, %244, %c3_i64_85 : i64
    scf.if %245 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %244, %c3_i64_85 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %246 = arith.extui %241 : i32 to i64
    %247 = arith.addi %246, %c28_i64 : i64
    %248 = llvm.getelementptr %7[%247] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_84, %248 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_86 = arith.constant 3 : i64
    %249 = llvm.load %2 : !llvm.ptr -> i64
    %250 = arith.cmpi ult, %249, %c3_i64_86 : i64
    scf.if %250 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %249, %c3_i64_86 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %251 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_87 = arith.constant 3 : i64
    %252 = llvm.load %2 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c3_i64_87 : i64
    scf.if %253 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %252, %c3_i64_87 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %254 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_88 = arith.constant 1 : i64
    %255 = llvm.load %2 : !llvm.ptr -> i64
    %256 = arith.cmpi ult, %255, %c1_i64_88 : i64
    scf.if %256 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %255, %c1_i64_88 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c48_i32_89 = arith.constant 48 : i32
    %c3_i64_90 = arith.constant 3 : i64
    %257 = llvm.load %2 : !llvm.ptr -> i64
    %258 = arith.cmpi ult, %257, %c3_i64_90 : i64
    scf.if %258 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %257, %c3_i64_90 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %259 = arith.addi %254, %c48_i32_89 : i32
    %c3_i64_91 = arith.constant 3 : i64
    %260 = llvm.load %2 : !llvm.ptr -> i64
    %261 = arith.cmpi ult, %260, %c3_i64_91 : i64
    scf.if %261 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %260, %c3_i64_91 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c40_i64 = arith.constant 40 : i64
    %262 = arith.extui %251 : i32 to i64
    %263 = arith.addi %262, %c40_i64 : i64
    %264 = llvm.getelementptr %7[%263] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %259, %264 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_92 = arith.constant 3 : i64
    %265 = llvm.load %2 : !llvm.ptr -> i64
    %266 = arith.cmpi ult, %265, %c3_i64_92 : i64
    scf.if %266 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %265, %c3_i64_92 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %267 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_93 = arith.constant 3 : i64
    %268 = llvm.load %2 : !llvm.ptr -> i64
    %269 = arith.cmpi ult, %268, %c3_i64_93 : i64
    scf.if %269 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %268, %c3_i64_93 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %270 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_94 = arith.constant 1 : i64
    %271 = llvm.load %2 : !llvm.ptr -> i64
    %272 = arith.cmpi ult, %271, %c1_i64_94 : i64
    scf.if %272 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %271, %c1_i64_94 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c40_i32 = arith.constant 40 : i32
    %c3_i64_95 = arith.constant 3 : i64
    %273 = llvm.load %2 : !llvm.ptr -> i64
    %274 = arith.cmpi ult, %273, %c3_i64_95 : i64
    scf.if %274 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %273, %c3_i64_95 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %275 = arith.addi %270, %c40_i32 : i32
    %c3_i64_96 = arith.constant 3 : i64
    %276 = llvm.load %2 : !llvm.ptr -> i64
    %277 = arith.cmpi ult, %276, %c3_i64_96 : i64
    scf.if %277 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %276, %c3_i64_96 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %278 = arith.extui %267 : i32 to i64
    %279 = arith.addi %278, %c24_i64 : i64
    %280 = llvm.getelementptr %7[%279] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %275, %280 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_97 = arith.constant 3 : i64
    %281 = llvm.load %2 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c3_i64_97 : i64
    scf.if %282 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %281, %c3_i64_97 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %283 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_98 = arith.constant 1 : i64
    %284 = llvm.load %2 : !llvm.ptr -> i64
    %285 = arith.cmpi ult, %284, %c1_i64_98 : i64
    scf.if %285 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %284, %c1_i64_98 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c76_i32_99 = arith.constant 76 : i32
    %c3_i64_100 = arith.constant 3 : i64
    %286 = llvm.load %2 : !llvm.ptr -> i64
    %287 = arith.cmpi ult, %286, %c3_i64_100 : i64
    scf.if %287 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %286, %c3_i64_100 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %288 = arith.addi %283, %c76_i32_99 : i32
    %c3_i64_101 = arith.constant 3 : i64
    %289 = llvm.load %2 : !llvm.ptr -> i64
    %290 = arith.cmpi ult, %289, %c3_i64_101 : i64
    scf.if %290 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %289, %c3_i64_101 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %291 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_102 = arith.constant 1 : i64
    %292 = llvm.load %2 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c1_i64_102 : i64
    scf.if %293 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %292, %c1_i64_102 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_103 = arith.constant 3 : i64
    %294 = llvm.load %2 : !llvm.ptr -> i64
    %295 = arith.cmpi ult, %294, %c3_i64_103 : i64
    scf.if %295 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %294, %c3_i64_103 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %296 = arith.addi %291, %c16_i32 : i32
    %c6_i64_104 = arith.constant 6 : i64
    %297 = llvm.load %2 : !llvm.ptr -> i64
    %298 = arith.cmpi ult, %297, %c6_i64_104 : i64
    scf.if %298 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %297, %c6_i64_104 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    call @f59(%arg0, %288, %296) : (!llvm.ptr, i32, i32) -> ()
    %c3_i64_105 = arith.constant 3 : i64
    %299 = llvm.load %2 : !llvm.ptr -> i64
    %300 = arith.cmpi ult, %299, %c3_i64_105 : i64
    scf.if %300 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %299, %c3_i64_105 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %301 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_106 = arith.constant 1 : i64
    %302 = llvm.load %2 : !llvm.ptr -> i64
    %303 = arith.cmpi ult, %302, %c1_i64_106 : i64
    scf.if %303 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %302, %c1_i64_106 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c48_i32_107 = arith.constant 48 : i32
    %c3_i64_108 = arith.constant 3 : i64
    %304 = llvm.load %2 : !llvm.ptr -> i64
    %305 = arith.cmpi ult, %304, %c3_i64_108 : i64
    scf.if %305 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %304, %c3_i64_108 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %306 = arith.addi %301, %c48_i32_107 : i32
    %c6_i64_109 = arith.constant 6 : i64
    %307 = llvm.load %2 : !llvm.ptr -> i64
    %308 = arith.cmpi ult, %307, %c6_i64_109 : i64
    scf.if %308 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %307, %c6_i64_109 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    call @f22(%arg0, %306) : (!llvm.ptr, i32) -> ()
    %c3_i64_110 = arith.constant 3 : i64
    %309 = llvm.load %2 : !llvm.ptr -> i64
    %310 = arith.cmpi ult, %309, %c3_i64_110 : i64
    scf.if %310 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %309, %c3_i64_110 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %311 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_111 = arith.constant 1 : i64
    %312 = llvm.load %2 : !llvm.ptr -> i64
    %313 = arith.cmpi ult, %312, %c1_i64_111 : i64
    scf.if %313 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %312, %c1_i64_111 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c48_i32_112 = arith.constant 48 : i32
    %c3_i64_113 = arith.constant 3 : i64
    %314 = llvm.load %2 : !llvm.ptr -> i64
    %315 = arith.cmpi ult, %314, %c3_i64_113 : i64
    scf.if %315 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %314, %c3_i64_113 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %316 = arith.addi %311, %c48_i32_112 : i32
    %c6_i64_114 = arith.constant 6 : i64
    %317 = llvm.load %2 : !llvm.ptr -> i64
    %318 = arith.cmpi ult, %317, %c6_i64_114 : i64
    scf.if %318 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %317, %c6_i64_114 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    call @f23(%arg0, %316) : (!llvm.ptr, i32) -> ()
    %c3_i64_115 = arith.constant 3 : i64
    %319 = llvm.load %2 : !llvm.ptr -> i64
    %320 = arith.cmpi ult, %319, %c3_i64_115 : i64
    scf.if %320 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %319, %c3_i64_115 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %321 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_116 = arith.constant 1 : i64
    %322 = llvm.load %2 : !llvm.ptr -> i64
    %323 = arith.cmpi ult, %322, %c1_i64_116 : i64
    scf.if %323 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %322, %c1_i64_116 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c76_i32_117 = arith.constant 76 : i32
    %c3_i64_118 = arith.constant 3 : i64
    %324 = llvm.load %2 : !llvm.ptr -> i64
    %325 = arith.cmpi ult, %324, %c3_i64_118 : i64
    scf.if %325 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %324, %c3_i64_118 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %326 = arith.addi %321, %c76_i32_117 : i32
    %c6_i64_119 = arith.constant 6 : i64
    %327 = llvm.load %2 : !llvm.ptr -> i64
    %328 = arith.cmpi ult, %327, %c6_i64_119 : i64
    scf.if %328 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %327, %c6_i64_119 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    call @f8(%arg0, %326) : (!llvm.ptr, i32) -> ()
    %c3_i64_120 = arith.constant 3 : i64
    %329 = llvm.load %2 : !llvm.ptr -> i64
    %330 = arith.cmpi ult, %329, %c3_i64_120 : i64
    scf.if %330 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %329, %c3_i64_120 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %331 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_121 = arith.constant 1 : i64
    %332 = llvm.load %2 : !llvm.ptr -> i64
    %333 = arith.cmpi ult, %332, %c1_i64_121 : i64
    scf.if %333 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %332, %c1_i64_121 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c112_i32_122 = arith.constant 112 : i32
    %c3_i64_123 = arith.constant 3 : i64
    %334 = llvm.load %2 : !llvm.ptr -> i64
    %335 = arith.cmpi ult, %334, %c3_i64_123 : i64
    scf.if %335 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %334, %c3_i64_123 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %336 = arith.addi %331, %c112_i32_122 : i32
    %c3_i64_124 = arith.constant 3 : i64
    %337 = llvm.load %2 : !llvm.ptr -> i64
    %338 = arith.cmpi ult, %337, %c3_i64_124 : i64
    scf.if %338 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %337, %c3_i64_124 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    llvm.store %336, %4 : i32, !llvm.ptr
    %c1_i64_125 = arith.constant 1 : i64
    %339 = llvm.load %2 : !llvm.ptr -> i64
    %340 = arith.cmpi ult, %339, %c1_i64_125 : i64
    scf.if %340 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %339, %c1_i64_125 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i64_126 = arith.constant 1 : i64
    %341 = llvm.load %2 : !llvm.ptr -> i64
    %342 = arith.cmpi ult, %341, %c1_i64_126 : i64
    scf.if %342 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %341, %c1_i64_126 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c1048616_i32 = arith.constant 1048616 : i32
    %c1_i64_127 = arith.constant 1 : i64
    %343 = llvm.load %2 : !llvm.ptr -> i64
    %344 = arith.cmpi ult, %343, %c1_i64_127 : i64
    scf.if %344 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %343, %c1_i64_127 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c55_i32_128 = arith.constant 55 : i32
    %c3_i64_129 = arith.constant 3 : i64
    %345 = llvm.load %2 : !llvm.ptr -> i64
    %346 = arith.cmpi ult, %345, %c3_i64_129 : i64
    scf.if %346 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %345, %c3_i64_129 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %347 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_130 = arith.constant 1 : i64
    %348 = llvm.load %2 : !llvm.ptr -> i64
    %349 = arith.cmpi ult, %348, %c1_i64_130 : i64
    scf.if %349 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %348, %c1_i64_130 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c16_i32_131 = arith.constant 16 : i32
    %c3_i64_132 = arith.constant 3 : i64
    %350 = llvm.load %2 : !llvm.ptr -> i64
    %351 = arith.cmpi ult, %350, %c3_i64_132 : i64
    scf.if %351 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %350, %c3_i64_132 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %352 = arith.addi %347, %c16_i32_131 : i32
    %c1_i64_133 = arith.constant 1 : i64
    %353 = llvm.load %2 : !llvm.ptr -> i64
    %354 = arith.cmpi ult, %353, %c1_i64_133 : i64
    scf.if %354 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %353, %c1_i64_133 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c1048600_i32 = arith.constant 1048600 : i32
    %c1_i64_134 = arith.constant 1 : i64
    %355 = llvm.load %2 : !llvm.ptr -> i64
    %356 = arith.cmpi ult, %355, %c1_i64_134 : i64
    scf.if %356 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %355, %c1_i64_134 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c1048748_i32 = arith.constant 1048748 : i32
    %c6_i64_135 = arith.constant 6 : i64
    %357 = llvm.load %2 : !llvm.ptr -> i64
    %358 = arith.cmpi ult, %357, %c6_i64_135 : i64
    scf.if %358 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %357, %c6_i64_135 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    call @f67(%arg0, %c1048616_i32, %c55_i32_128, %352, %c1048600_i32, %c1048748_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c0_i64_136 = arith.constant 0 : i64
    %359 = llvm.load %2 : !llvm.ptr -> i64
    %360 = arith.cmpi ult, %359, %c0_i64_136 : i64
    scf.if %360 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %361 = arith.subi %359, %c0_i64_136 : i64
      llvm.store %361, %2 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f7(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c3_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %14 = arith.subi %4, %c3_i64 : i64
      llvm.store %14, %3 : i64, !llvm.ptr
    }
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64_2 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %14 = arith.subi %7, %c3_i64_2 : i64
      llvm.store %14, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c6_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %14 = arith.subi %10, %c6_i64 : i64
      llvm.store %14, %3 : i64, !llvm.ptr
    }
    call @f48(%arg0, %6, %9) : (!llvm.ptr, i32, i32) -> ()
    %c1_i64 = arith.constant 1 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c1_i64 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %14 = arith.subi %12, %c1_i64 : i64
      llvm.store %14, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f8(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_0 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %1, %2 : i64, !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %6[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %2 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %44 = arith.subi %11, %c3_i64 : i64
      llvm.store %44, %2 : i64, !llvm.ptr
    }
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_1 = arith.constant 3 : i64
    %14 = llvm.load %2 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c3_i64_1 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %44 = arith.subi %14, %c3_i64_1 : i64
      llvm.store %44, %2 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.extui %13 : i32 to i64
    %17 = arith.addi %16, %c4_i64 : i64
    %18 = llvm.getelementptr %5[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %20 = llvm.load %2 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_2 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %44 = arith.subi %20, %c3_i64_2 : i64
      llvm.store %44, %2 : i64, !llvm.ptr
    }
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %23 = llvm.load %2 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_3 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %44 = arith.subi %23, %c3_i64_3 : i64
      llvm.store %44, %2 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %22 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %5[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %29 = llvm.load %2 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c6_i64 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %44 = arith.subi %29, %c6_i64 : i64
      llvm.store %44, %2 : i64, !llvm.ptr
    }
    %31 = llvm.call %8(%10, %19, %28) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c3_i64_4 = arith.constant 3 : i64
    %32 = llvm.load %2 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c3_i64_4 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %44 = arith.subi %32, %c3_i64_4 : i64
      llvm.store %44, %2 : i64, !llvm.ptr
    }
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64_5 = arith.constant 6 : i64
    %35 = llvm.load %2 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %c6_i64_5 : i64
    scf.if %36 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %44 = arith.subi %35, %c6_i64_5 : i64
      llvm.store %44, %2 : i64, !llvm.ptr
    }
    call @f22(%arg0, %34) : (!llvm.ptr, i32) -> ()
    %c3_i64_6 = arith.constant 3 : i64
    %37 = llvm.load %2 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c3_i64_6 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %44 = arith.subi %37, %c3_i64_6 : i64
      llvm.store %44, %2 : i64, !llvm.ptr
    }
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64_7 = arith.constant 6 : i64
    %40 = llvm.load %2 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c6_i64_7 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %44 = arith.subi %40, %c6_i64_7 : i64
      llvm.store %44, %2 : i64, !llvm.ptr
    }
    call @f23(%arg0, %39) : (!llvm.ptr, i32) -> ()
    %c1_i64 = arith.constant 1 : i64
    %42 = llvm.load %2 : !llvm.ptr -> i64
    %43 = arith.cmpi ult, %42, %c1_i64 : i64
    scf.if %43 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %44 = arith.subi %42, %c1_i64 : i64
      llvm.store %44, %2 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f9(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c1_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %4, %c1_i64 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %c1048800_i32 = arith.constant 1048800 : i32
    %c3_i64 = arith.constant 3 : i64
    %6 = llvm.load %3 : !llvm.ptr -> i64
    %7 = arith.cmpi ult, %6, %c3_i64 : i64
    scf.if %7 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %6, %c3_i64 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %9 = llvm.load %3 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c3_i64_2 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %9, %c3_i64_2 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c6_i64 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %12, %c6_i64 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %14 = call @f12(%arg0, %c1048800_i32, %8, %11) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_3 = arith.constant 1 : i64
    %15 = llvm.load %3 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c1_i64_3 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %15, %c1_i64_3 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%14 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f10(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_2 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %3, %4 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %5 = llvm.load %4 : !llvm.ptr -> i64
    %6 = arith.cmpi ult, %5, %c1_i64 : i64
    scf.if %6 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %7 = arith.subi %5, %c1_i64 : i64
      llvm.store %7, %4 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f11(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %4 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_3 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %4, %5 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %6 = llvm.load %5 : !llvm.ptr -> i64
    %7 = arith.cmpi ult, %6, %c1_i64 : i64
    scf.if %7 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %6, %c1_i64 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %c1_i64_4 = arith.constant 1 : i64
    %8 = llvm.load %5 : !llvm.ptr -> i64
    %9 = arith.cmpi ult, %8, %c1_i64_4 : i64
    scf.if %9 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %8, %c1_i64_4 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %c1048800_i32 = arith.constant 1048800 : i32
    %c3_i64 = arith.constant 3 : i64
    %10 = llvm.load %5 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c3_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %10, %c3_i64 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %12 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_5 = arith.constant 3 : i64
    %13 = llvm.load %5 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64_5 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %13, %c3_i64_5 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %16 = llvm.load %5 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c6_i64 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %16, %c6_i64 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %18 = call @f12(%arg0, %c1048800_i32, %12, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    %c3_i64_6 = arith.constant 3 : i64
    %19 = llvm.load %5 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_6 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %19, %c3_i64_6 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %2 : i32, !llvm.ptr
    %c3_i64_7 = arith.constant 3 : i64
    %21 = llvm.load %5 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_7 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %21, %c3_i64_7 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %c0_i32 = arith.constant 0 : i32
    %23 = arith.cmpi eq, %18, %c0_i32 : i32
    %24 = arith.extui %23 : i1 to i32
    %c1_i64_8 = arith.constant 1 : i64
    %25 = llvm.load %5 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_8 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %25, %c1_i64_8 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %c0_i32_9 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %24, %c0_i32_9 : i32
    cf.cond_br %27, ^bb3, ^bb4
  ^bb2(%28: i32):  // pred: ^bb3
    return %28 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c3_i64_10 = arith.constant 3 : i64
    %29 = llvm.load %5 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_10 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %29, %c3_i64_10 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_11 = arith.constant 1 : i64
    %32 = llvm.load %5 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c1_i64_11 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %32, %c1_i64_11 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    cf.br ^bb2(%31 : i32)
  ^bb4:  // pred: ^bb1
    %c3_i64_12 = arith.constant 3 : i64
    %34 = llvm.load %5 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c3_i64_12 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %34, %c3_i64_12 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_13 = arith.constant 3 : i64
    %37 = llvm.load %5 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c3_i64_13 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %37, %c3_i64_13 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_14 = arith.constant 3 : i64
    %40 = llvm.load %5 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c3_i64_14 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %40, %c3_i64_14 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %43 = llvm.load %5 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c3_i64_15 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %43, %c3_i64_15 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_16 = arith.constant 3 : i64
    %46 = llvm.load %5 : !llvm.ptr -> i64
    %47 = arith.cmpi ult, %46, %c3_i64_16 : i64
    scf.if %47 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %46, %c3_i64_16 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_17 = arith.constant 3 : i64
    %49 = llvm.load %5 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c3_i64_17 : i64
    scf.if %50 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %49, %c3_i64_17 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %51 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_18 = arith.constant 3 : i64
    %52 = llvm.load %5 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c3_i64_18 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %52, %c3_i64_18 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %54 = arith.cmpi ult, %48, %51 : i32
    %55 = arith.extui %54 : i1 to i32
    %c1_i64_19 = arith.constant 1 : i64
    %56 = llvm.load %5 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c1_i64_19 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %56, %c1_i64_19 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %c0_i32_20 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %55, %c0_i32_20 : i32
    %59 = arith.select %58, %42, %45 : i32
    %c6_i64_21 = arith.constant 6 : i64
    %60 = llvm.load %5 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c6_i64_21 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %60, %c6_i64_21 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %62 = call @f77(%arg0, %36, %39, %59) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_22 = arith.constant 1 : i64
    %63 = llvm.load %5 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c1_i64_22 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %63, %c1_i64_22 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    %c1_i64_23 = arith.constant 1 : i64
    %65 = llvm.load %5 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c1_i64_23 : i64
    scf.if %66 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %67 = arith.subi %65, %c1_i64_23 : i64
      llvm.store %67, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f12(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_5 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %11 = llvm.load %7 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c1_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %11, %c1_i64 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_6 = arith.constant 0 : i32
    %c3_i64 = arith.constant 3 : i64
    %13 = llvm.load %7 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %13, %c3_i64 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_6, %3 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %15 = llvm.load %7 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c1_i64_7 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %15, %c1_i64_7 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1_i64_8 = arith.constant 1 : i64
    %17 = llvm.load %7 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c1_i64_8 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %17, %c1_i64_8 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_9 = arith.constant 0 : i32
    %c3_i64_10 = arith.constant 3 : i64
    %19 = llvm.load %7 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_10 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %19, %c3_i64_10 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1049500_i64 = arith.constant 1049500 : i64
    %21 = arith.extui %c0_i32_9 : i32 to i64
    %22 = arith.addi %21, %c1049500_i64 : i64
    %23 = llvm.getelementptr %10[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %25 = llvm.load %7 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c3_i64_11 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %25, %c3_i64_11 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    llvm.store %24, %4 : i32, !llvm.ptr
    %c1_i64_12 = arith.constant 1 : i64
    %27 = llvm.load %7 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c1_i64_12 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %27, %c1_i64_12 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_13 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %24, %c0_i32_13 : i32
    cf.cond_br %29, ^bb3, ^bb4
  ^bb2(%30: i32):  // pred: ^bb5
    return %30 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c1_i64_14 = arith.constant 1 : i64
    %31 = llvm.load %7 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c1_i64_14 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %31, %c1_i64_14 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c3_i64_15 = arith.constant 3 : i64
    %33 = llvm.load %7 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c3_i64_15 : i64
    scf.if %34 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %33, %c3_i64_15 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %35 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_16 = arith.constant 1 : i64
    %36 = llvm.load %7 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c1_i64_16 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %36, %c1_i64_16 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_17 = arith.constant 0 : i32
    %c3_i64_18 = arith.constant 3 : i64
    %38 = llvm.load %7 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_18 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %38, %c3_i64_18 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_19 = arith.constant 3 : i64
    %41 = llvm.load %7 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c3_i64_19 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %41, %c3_i64_19 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %43 = arith.subi %c0_i32_17, %40 : i32
    %c3_i64_20 = arith.constant 3 : i64
    %44 = llvm.load %7 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c3_i64_20 : i64
    scf.if %45 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %44, %c3_i64_20 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %46 = arith.andi %35, %43 : i32
    %c3_i64_21 = arith.constant 3 : i64
    %47 = llvm.load %7 : !llvm.ptr -> i64
    %48 = arith.cmpi ult, %47, %c3_i64_21 : i64
    scf.if %48 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %47, %c3_i64_21 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    llvm.store %46, %4 : i32, !llvm.ptr
    %c3_i64_22 = arith.constant 3 : i64
    %49 = llvm.load %7 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c3_i64_22 : i64
    scf.if %50 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %49, %c3_i64_22 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %51 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_23 = arith.constant 3 : i64
    %52 = llvm.load %7 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c3_i64_23 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %52, %c3_i64_23 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %54 = arith.cmpi ult, %46, %51 : i32
    %55 = arith.extui %54 : i1 to i32
    %c1_i64_24 = arith.constant 1 : i64
    %56 = llvm.load %7 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c1_i64_24 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %56, %c1_i64_24 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_25 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %55, %c0_i32_25 : i32
    cf.cond_br %58, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c2_i64 = arith.constant 2 : i64
    %59 = llvm.load %7 : !llvm.ptr -> i64
    %60 = arith.cmpi ult, %59, %c2_i64 : i64
    scf.if %60 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %59, %c2_i64 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_26 = arith.constant 0 : i32
    %61 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_26) : (!llvm.ptr, i32) -> i32
    %c3_i64_27 = arith.constant 3 : i64
    %62 = llvm.load %7 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c3_i64_27 : i64
    scf.if %63 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %62, %c3_i64_27 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    llvm.store %61, %5 : i32, !llvm.ptr
    %c1_i64_28 = arith.constant 1 : i64
    %64 = llvm.load %7 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c1_i64_28 : i64
    scf.if %65 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %64, %c1_i64_28 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_29 = arith.constant 0 : i32
    %c1_i64_30 = arith.constant 1 : i64
    %66 = llvm.load %7 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c1_i64_30 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %66, %c1_i64_30 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_31 = arith.constant 0 : i32
    %c1_i64_32 = arith.constant 1 : i64
    %68 = llvm.load %7 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c1_i64_32 : i64
    scf.if %69 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %68, %c1_i64_32 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1049536_i32 = arith.constant 1049536 : i32
    %c3_i64_33 = arith.constant 3 : i64
    %70 = llvm.load %7 : !llvm.ptr -> i64
    %71 = arith.cmpi ult, %70, %c3_i64_33 : i64
    scf.if %71 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %70, %c3_i64_33 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %72 = arith.subi %c0_i32_31, %c1049536_i32 : i32
    %c3_i64_34 = arith.constant 3 : i64
    %73 = llvm.load %7 : !llvm.ptr -> i64
    %74 = arith.cmpi ult, %73, %c3_i64_34 : i64
    scf.if %74 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %73, %c3_i64_34 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    llvm.store %72, %4 : i32, !llvm.ptr
    %c3_i64_35 = arith.constant 3 : i64
    %75 = llvm.load %7 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c3_i64_35 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %75, %c3_i64_35 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1049500_i64_36 = arith.constant 1049500 : i64
    %77 = arith.extui %c0_i32_29 : i32 to i64
    %78 = arith.addi %77, %c1049500_i64_36 : i64
    %79 = llvm.getelementptr %10[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %72, %79 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_37 = arith.constant 1 : i64
    %80 = llvm.load %7 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c1_i64_37 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %80, %c1_i64_37 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_38 = arith.constant 0 : i32
    %c1_i64_39 = arith.constant 1 : i64
    %82 = llvm.load %7 : !llvm.ptr -> i64
    %83 = arith.cmpi ult, %82, %c1_i64_39 : i64
    scf.if %83 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %82, %c1_i64_39 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1_i32_40 = arith.constant 1 : i32
    %c3_i64_41 = arith.constant 3 : i64
    %84 = llvm.load %7 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c3_i64_41 : i64
    scf.if %85 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %84, %c3_i64_41 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %86 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_42 = arith.constant 1 : i64
    %87 = llvm.load %7 : !llvm.ptr -> i64
    %88 = arith.cmpi ult, %87, %c1_i64_42 : i64
    scf.if %88 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %87, %c1_i64_42 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_43 = arith.constant 3 : i64
    %89 = llvm.load %7 : !llvm.ptr -> i64
    %90 = arith.cmpi ult, %89, %c3_i64_43 : i64
    scf.if %90 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %89, %c3_i64_43 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %91 = arith.cmpi ule, %c16_i32, %c31_i32 : i32
    %92 = scf.if %91 -> (i32) {
      %257 = arith.shli %86, %c16_i32 : i32
      scf.yield %257 : i32
    } else {
      %c0_i32_122 = arith.constant 0 : i32
      scf.yield %c0_i32_122 : i32
    }
    %c3_i64_44 = arith.constant 3 : i64
    %93 = llvm.load %7 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c3_i64_44 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %93, %c3_i64_44 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %95 = arith.subi %c1_i32_40, %92 : i32
    %c3_i64_45 = arith.constant 3 : i64
    %96 = llvm.load %7 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c3_i64_45 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %96, %c3_i64_45 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1049504_i64 = arith.constant 1049504 : i64
    %98 = arith.extui %c0_i32_38 : i32 to i64
    %99 = arith.addi %98, %c1049504_i64 : i64
    %100 = llvm.getelementptr %10[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %100 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_46 = arith.constant 1 : i64
    %101 = llvm.load %7 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c1_i64_46 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %101, %c1_i64_46 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb7, ^bb8
    %c3_i64_47 = arith.constant 3 : i64
    %103 = llvm.load %7 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %c3_i64_47 : i64
    scf.if %104 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %103, %c3_i64_47 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %105 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_48 = arith.constant 1 : i64
    %106 = llvm.load %7 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c1_i64_48 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %106, %c1_i64_48 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    cf.br ^bb2(%105 : i32)
  ^bb6:  // pred: ^bb3
    %c1_i64_49 = arith.constant 1 : i64
    %108 = llvm.load %7 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %108, %c1_i64_49 : i64
    scf.if %109 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %108, %c1_i64_49 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_50 = arith.constant 0 : i32
    %c3_i64_51 = arith.constant 3 : i64
    %110 = llvm.load %7 : !llvm.ptr -> i64
    %111 = arith.cmpi ult, %110, %c3_i64_51 : i64
    scf.if %111 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %110, %c3_i64_51 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_50, %3 : i32, !llvm.ptr
    %c1_i64_52 = arith.constant 1 : i64
    %112 = llvm.load %7 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c1_i64_52 : i64
    scf.if %113 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %112, %c1_i64_52 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1_i64_53 = arith.constant 1 : i64
    %114 = llvm.load %7 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %c1_i64_53 : i64
    scf.if %115 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %114, %c1_i64_53 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_54 = arith.constant 0 : i32
    %c3_i64_55 = arith.constant 3 : i64
    %116 = llvm.load %7 : !llvm.ptr -> i64
    %117 = arith.cmpi ult, %116, %c3_i64_55 : i64
    scf.if %117 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %116, %c3_i64_55 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1049504_i64_56 = arith.constant 1049504 : i64
    %118 = arith.extui %c0_i32_54 : i32 to i64
    %119 = arith.addi %118, %c1049504_i64_56 : i64
    %120 = llvm.getelementptr %10[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_57 = arith.constant 3 : i64
    %122 = llvm.load %7 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %c3_i64_57 : i64
    scf.if %123 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %122, %c3_i64_57 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    llvm.store %121, %1 : i32, !llvm.ptr
    %c3_i64_58 = arith.constant 3 : i64
    %124 = llvm.load %7 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c3_i64_58 : i64
    scf.if %125 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %124, %c3_i64_58 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %126 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_59 = arith.constant 3 : i64
    %127 = llvm.load %7 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c3_i64_59 : i64
    scf.if %128 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %127, %c3_i64_59 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %129 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_60 = arith.constant 3 : i64
    %130 = llvm.load %7 : !llvm.ptr -> i64
    %131 = arith.cmpi ult, %130, %c3_i64_60 : i64
    scf.if %131 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %130, %c3_i64_60 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %132 = arith.subi %126, %129 : i32
    %c3_i64_61 = arith.constant 3 : i64
    %133 = llvm.load %7 : !llvm.ptr -> i64
    %134 = arith.cmpi ult, %133, %c3_i64_61 : i64
    scf.if %134 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %133, %c3_i64_61 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    llvm.store %132, %2 : i32, !llvm.ptr
    %c1_i64_62 = arith.constant 1 : i64
    %135 = llvm.load %7 : !llvm.ptr -> i64
    %136 = arith.cmpi ult, %135, %c1_i64_62 : i64
    scf.if %136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %135, %c1_i64_62 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1_i32_63 = arith.constant 1 : i32
    %c3_i64_64 = arith.constant 3 : i64
    %137 = llvm.load %7 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c3_i64_64 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %137, %c3_i64_64 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %139 = arith.addi %132, %c1_i32_63 : i32
    %c3_i64_65 = arith.constant 3 : i64
    %140 = llvm.load %7 : !llvm.ptr -> i64
    %141 = arith.cmpi ult, %140, %c3_i64_65 : i64
    scf.if %141 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %140, %c3_i64_65 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    llvm.store %139, %5 : i32, !llvm.ptr
    %c3_i64_66 = arith.constant 3 : i64
    %142 = llvm.load %7 : !llvm.ptr -> i64
    %143 = arith.cmpi ult, %142, %c3_i64_66 : i64
    scf.if %143 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %142, %c3_i64_66 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %144 = arith.cmpi ule, %121, %139 : i32
    %145 = arith.extui %144 : i1 to i32
    %c1_i64_67 = arith.constant 1 : i64
    %146 = llvm.load %7 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c1_i64_67 : i64
    scf.if %147 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %146, %c1_i64_67 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_68 = arith.constant 0 : i32
    %148 = arith.cmpi ne, %145, %c0_i32_68 : i32
    cf.cond_br %148, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb9
    %c1_i64_69 = arith.constant 1 : i64
    %149 = llvm.load %7 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c1_i64_69 : i64
    scf.if %150 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %149, %c1_i64_69 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_70 = arith.constant 0 : i32
    %c3_i64_71 = arith.constant 3 : i64
    %151 = llvm.load %7 : !llvm.ptr -> i64
    %152 = arith.cmpi ult, %151, %c3_i64_71 : i64
    scf.if %152 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %151, %c3_i64_71 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_72 = arith.constant 3 : i64
    %154 = llvm.load %7 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c3_i64_72 : i64
    scf.if %155 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %154, %c3_i64_72 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1049500_i64_73 = arith.constant 1049500 : i64
    %156 = arith.extui %c0_i32_70 : i32 to i64
    %157 = arith.addi %156, %c1049500_i64_73 : i64
    %158 = llvm.getelementptr %10[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %153, %158 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_74 = arith.constant 1 : i64
    %159 = llvm.load %7 : !llvm.ptr -> i64
    %160 = arith.cmpi ult, %159, %c1_i64_74 : i64
    scf.if %160 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %159, %c1_i64_74 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_75 = arith.constant 0 : i32
    %c3_i64_76 = arith.constant 3 : i64
    %161 = llvm.load %7 : !llvm.ptr -> i64
    %162 = arith.cmpi ult, %161, %c3_i64_76 : i64
    scf.if %162 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %161, %c3_i64_76 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %163 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_77 = arith.constant 3 : i64
    %164 = llvm.load %7 : !llvm.ptr -> i64
    %165 = arith.cmpi ult, %164, %c3_i64_77 : i64
    scf.if %165 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %164, %c3_i64_77 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %166 = arith.subi %c0_i32_75, %163 : i32
    %c3_i64_78 = arith.constant 3 : i64
    %167 = llvm.load %7 : !llvm.ptr -> i64
    %168 = arith.cmpi ult, %167, %c3_i64_78 : i64
    scf.if %168 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %167, %c3_i64_78 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    llvm.store %166, %3 : i32, !llvm.ptr
    %c1_i64_79 = arith.constant 1 : i64
    %169 = llvm.load %7 : !llvm.ptr -> i64
    %170 = arith.cmpi ult, %169, %c1_i64_79 : i64
    scf.if %170 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %169, %c1_i64_79 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb8:  // pred: ^bb6
    %c1_i64_80 = arith.constant 1 : i64
    %171 = llvm.load %7 : !llvm.ptr -> i64
    %172 = arith.cmpi ult, %171, %c1_i64_80 : i64
    scf.if %172 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %171, %c1_i64_80 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_81 = arith.constant 0 : i32
    %c3_i64_82 = arith.constant 3 : i64
    %173 = llvm.load %7 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c3_i64_82 : i64
    scf.if %174 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %173, %c3_i64_82 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %175 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_83 = arith.constant 3 : i64
    %176 = llvm.load %7 : !llvm.ptr -> i64
    %177 = arith.cmpi ult, %176, %c3_i64_83 : i64
    scf.if %177 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %176, %c3_i64_83 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %178 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_84 = arith.constant 3 : i64
    %179 = llvm.load %7 : !llvm.ptr -> i64
    %180 = arith.cmpi ult, %179, %c3_i64_84 : i64
    scf.if %180 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %179, %c3_i64_84 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %181 = arith.subi %175, %178 : i32
    %c3_i64_85 = arith.constant 3 : i64
    %182 = llvm.load %7 : !llvm.ptr -> i64
    %183 = arith.cmpi ult, %182, %c3_i64_85 : i64
    scf.if %183 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %182, %c3_i64_85 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    llvm.store %181, %5 : i32, !llvm.ptr
    %c3_i64_86 = arith.constant 3 : i64
    %184 = llvm.load %7 : !llvm.ptr -> i64
    %185 = arith.cmpi ult, %184, %c3_i64_86 : i64
    scf.if %185 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %184, %c3_i64_86 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %186 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_87 = arith.constant 3 : i64
    %187 = llvm.load %7 : !llvm.ptr -> i64
    %188 = arith.cmpi ult, %187, %c3_i64_87 : i64
    scf.if %188 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %187, %c3_i64_87 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %189 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_88 = arith.constant 3 : i64
    %190 = llvm.load %7 : !llvm.ptr -> i64
    %191 = arith.cmpi ult, %190, %c3_i64_88 : i64
    scf.if %191 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %190, %c3_i64_88 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %192 = arith.cmpi ugt, %186, %189 : i32
    %193 = arith.extui %192 : i1 to i32
    %c1_i64_89 = arith.constant 1 : i64
    %194 = llvm.load %7 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c1_i64_89 : i64
    scf.if %195 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %194, %c1_i64_89 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_90 = arith.constant 0 : i32
    %196 = arith.cmpi ne, %193, %c0_i32_90 : i32
    %197 = arith.select %196, %c0_i32_81, %181 : i32
    %c1_i64_91 = arith.constant 1 : i64
    %198 = llvm.load %7 : !llvm.ptr -> i64
    %199 = arith.cmpi ult, %198, %c1_i64_91 : i64
    scf.if %199 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %198, %c1_i64_91 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_92 = arith.constant 3 : i64
    %200 = llvm.load %7 : !llvm.ptr -> i64
    %201 = arith.cmpi ult, %200, %c3_i64_92 : i64
    scf.if %201 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %200, %c3_i64_92 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %202 = arith.addi %197, %c-1_i32 : i32
    %c1_i64_93 = arith.constant 1 : i64
    %203 = llvm.load %7 : !llvm.ptr -> i64
    %204 = arith.cmpi ult, %203, %c1_i64_93 : i64
    scf.if %204 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %203, %c1_i64_93 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c16_i32_94 = arith.constant 16 : i32
    %c3_i64_95 = arith.constant 3 : i64
    %205 = llvm.load %7 : !llvm.ptr -> i64
    %206 = arith.cmpi ult, %205, %c3_i64_95 : i64
    scf.if %206 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %205, %c3_i64_95 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c31_i32_96 = arith.constant 31 : i32
    %207 = arith.cmpi ule, %c16_i32_94, %c31_i32_96 : i32
    %208 = scf.if %207 -> (i32) {
      %257 = arith.shrui %202, %c16_i32_94 : i32
      scf.yield %257 : i32
    } else {
      %c0_i32_122 = arith.constant 0 : i32
      scf.yield %c0_i32_122 : i32
    }
    %c1_i64_97 = arith.constant 1 : i64
    %209 = llvm.load %7 : !llvm.ptr -> i64
    %210 = arith.cmpi ult, %209, %c1_i64_97 : i64
    scf.if %210 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %209, %c1_i64_97 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1_i32_98 = arith.constant 1 : i32
    %c3_i64_99 = arith.constant 3 : i64
    %211 = llvm.load %7 : !llvm.ptr -> i64
    %212 = arith.cmpi ult, %211, %c3_i64_99 : i64
    scf.if %212 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %211, %c3_i64_99 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %213 = arith.addi %208, %c1_i32_98 : i32
    %c3_i64_100 = arith.constant 3 : i64
    %214 = llvm.load %7 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c3_i64_100 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %214, %c3_i64_100 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    llvm.store %213, %1 : i32, !llvm.ptr
    %c20_i64 = arith.constant 20 : i64
    %216 = llvm.load %7 : !llvm.ptr -> i64
    %217 = arith.cmpi ult, %216, %c20_i64 : i64
    scf.if %217 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %216, %c20_i64 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_101 = arith.constant 0 : i32
    %218 = call @dora_fn_wasm_memory_grow(%arg0, %213, %c0_i32_101) : (!llvm.ptr, i32, i32) -> i32
    %c1_i64_102 = arith.constant 1 : i64
    %219 = llvm.load %7 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c1_i64_102 : i64
    scf.if %220 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %219, %c1_i64_102 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c-1_i32_103 = arith.constant -1 : i32
    %c3_i64_104 = arith.constant 3 : i64
    %221 = llvm.load %7 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c3_i64_104 : i64
    scf.if %222 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %221, %c3_i64_104 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %223 = arith.cmpi eq, %218, %c-1_i32_103 : i32
    %224 = arith.extui %223 : i1 to i32
    %c1_i64_105 = arith.constant 1 : i64
    %225 = llvm.load %7 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c1_i64_105 : i64
    scf.if %226 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %225, %c1_i64_105 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_106 = arith.constant 0 : i32
    %227 = arith.cmpi ne, %224, %c0_i32_106 : i32
    cf.cond_br %227, ^bb5, ^bb9
  ^bb9:  // pred: ^bb8
    %c1_i64_107 = arith.constant 1 : i64
    %228 = llvm.load %7 : !llvm.ptr -> i64
    %229 = arith.cmpi ult, %228, %c1_i64_107 : i64
    scf.if %229 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %228, %c1_i64_107 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_108 = arith.constant 0 : i32
    %c1_i64_109 = arith.constant 1 : i64
    %230 = llvm.load %7 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c1_i64_109 : i64
    scf.if %231 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %230, %c1_i64_109 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c0_i32_110 = arith.constant 0 : i32
    %c3_i64_111 = arith.constant 3 : i64
    %232 = llvm.load %7 : !llvm.ptr -> i64
    %233 = arith.cmpi ult, %232, %c3_i64_111 : i64
    scf.if %233 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %232, %c3_i64_111 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1049504_i64_112 = arith.constant 1049504 : i64
    %234 = arith.extui %c0_i32_110 : i32 to i64
    %235 = arith.addi %234, %c1049504_i64_112 : i64
    %236 = llvm.getelementptr %10[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %237 = llvm.load volatile %236 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_113 = arith.constant 3 : i64
    %238 = llvm.load %7 : !llvm.ptr -> i64
    %239 = arith.cmpi ult, %238, %c3_i64_113 : i64
    scf.if %239 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %238, %c3_i64_113 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %240 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_114 = arith.constant 1 : i64
    %241 = llvm.load %7 : !llvm.ptr -> i64
    %242 = arith.cmpi ult, %241, %c1_i64_114 : i64
    scf.if %242 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %241, %c1_i64_114 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c16_i32_115 = arith.constant 16 : i32
    %c3_i64_116 = arith.constant 3 : i64
    %243 = llvm.load %7 : !llvm.ptr -> i64
    %244 = arith.cmpi ult, %243, %c3_i64_116 : i64
    scf.if %244 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %243, %c3_i64_116 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c31_i32_117 = arith.constant 31 : i32
    %245 = arith.cmpi ule, %c16_i32_115, %c31_i32_117 : i32
    %246 = scf.if %245 -> (i32) {
      %257 = arith.shli %240, %c16_i32_115 : i32
      scf.yield %257 : i32
    } else {
      %c0_i32_122 = arith.constant 0 : i32
      scf.yield %c0_i32_122 : i32
    }
    %c3_i64_118 = arith.constant 3 : i64
    %247 = llvm.load %7 : !llvm.ptr -> i64
    %248 = arith.cmpi ult, %247, %c3_i64_118 : i64
    scf.if %248 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %247, %c3_i64_118 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %249 = arith.subi %237, %246 : i32
    %c3_i64_119 = arith.constant 3 : i64
    %250 = llvm.load %7 : !llvm.ptr -> i64
    %251 = arith.cmpi ult, %250, %c3_i64_119 : i64
    scf.if %251 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %250, %c3_i64_119 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    %c1049504_i64_120 = arith.constant 1049504 : i64
    %252 = arith.extui %c0_i32_108 : i32 to i64
    %253 = arith.addi %252, %c1049504_i64_120 : i64
    %254 = llvm.getelementptr %10[%253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %249, %254 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_121 = arith.constant 1 : i64
    %255 = llvm.load %7 : !llvm.ptr -> i64
    %256 = arith.cmpi ult, %255, %c1_i64_121 : i64
    scf.if %256 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %257 = arith.subi %255, %c1_i64_121 : i64
      llvm.store %257, %7 : i64, !llvm.ptr
    }
    cf.br ^bb7
  }
  func.func @f13(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c3_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %4, %c3_i64 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c1_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %7, %c1_i64 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %c1048800_i32 = arith.constant 1048800 : i32
    %c3_i64_2 = arith.constant 3 : i64
    %9 = llvm.load %3 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c3_i64_2 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %9, %c3_i64_2 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c6_i64 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %12, %c6_i64 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %14 = call @f66(%arg0, %6, %c1048800_i32, %11) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_3 = arith.constant 1 : i64
    %15 = llvm.load %3 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c1_i64_3 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %15, %c1_i64_3 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%14 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f14(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_0 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %1, %2 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %3 = llvm.load %2 : !llvm.ptr -> i64
    %4 = arith.cmpi ult, %3, %c3_i64 : i64
    scf.if %4 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %15 = arith.subi %3, %c3_i64 : i64
      llvm.store %15, %2 : i64, !llvm.ptr
    }
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %6 = llvm.load %2 : !llvm.ptr -> i64
    %7 = arith.cmpi ult, %6, %c6_i64 : i64
    scf.if %7 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %15 = arith.subi %6, %c6_i64 : i64
      llvm.store %15, %2 : i64, !llvm.ptr
    }
    call @f22(%arg0, %5) : (!llvm.ptr, i32) -> ()
    %c3_i64_1 = arith.constant 3 : i64
    %8 = llvm.load %2 : !llvm.ptr -> i64
    %9 = arith.cmpi ult, %8, %c3_i64_1 : i64
    scf.if %9 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %15 = arith.subi %8, %c3_i64_1 : i64
      llvm.store %15, %2 : i64, !llvm.ptr
    }
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64_2 = arith.constant 6 : i64
    %11 = llvm.load %2 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c6_i64_2 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %15 = arith.subi %11, %c6_i64_2 : i64
      llvm.store %15, %2 : i64, !llvm.ptr
    }
    call @f23(%arg0, %10) : (!llvm.ptr, i32) -> ()
    %c1_i64 = arith.constant 1 : i64
    %13 = llvm.load %2 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c1_i64 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %15 = arith.subi %13, %c1_i64 : i64
      llvm.store %15, %2 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f15(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c3_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %4, %c3_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64_2 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %7, %c3_i64_2 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c6_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %10, %c6_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    call @f16(%arg0, %6, %9) : (!llvm.ptr, i32, i32) -> ()
    %c1_i64 = arith.constant 1 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c1_i64 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %12, %c1_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_3 = arith.constant 1 : i64
    %14 = llvm.load %3 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c1_i64_3 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %14, %c1_i64_3 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%16: i32):  // pred: ^bb1
    return %16 : i32
  }
  func.func @f16(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_3 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %4, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %5 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %11, %c3_i64 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %13 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %14 = llvm.load %5 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c1_i64 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %14, %c1_i64 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_4 = arith.constant 3 : i64
    %16 = llvm.load %5 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64_4 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %16, %c3_i64_4 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %18 = arith.subi %13, %c16_i32 : i32
    %c3_i64_5 = arith.constant 3 : i64
    %19 = llvm.load %5 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_5 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %19, %c3_i64_5 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %2 : i32, !llvm.ptr
    %c3_i64_6 = arith.constant 3 : i64
    %21 = llvm.load %5 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_6 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %21, %c3_i64_6 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %23 = llvm.load %5 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c1_i64_7 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %23, %c1_i64_7 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c1_i64_8 = arith.constant 1 : i64
    %25 = llvm.load %5 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_8 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %25, %c1_i64_8 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c1_i64_9 = arith.constant 1 : i64
    %27 = llvm.load %5 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c1_i64_9 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %27, %c1_i64_9 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c1_i64_10 = arith.constant 1 : i64
    %29 = llvm.load %5 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c1_i64_10 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %29, %c1_i64_10 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c3_i64_11 = arith.constant 3 : i64
    %31 = llvm.load %5 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_11 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %31, %c3_i64_11 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_12 = arith.constant 1 : i64
    %34 = llvm.load %5 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c1_i64_12 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %34, %c1_i64_12 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c128_i32 = arith.constant 128 : i32
    %c3_i64_13 = arith.constant 3 : i64
    %36 = llvm.load %5 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_13 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %36, %c3_i64_13 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %38 = arith.cmpi ult, %33, %c128_i32 : i32
    %39 = arith.extui %38 : i1 to i32
    %c1_i64_14 = arith.constant 1 : i64
    %40 = llvm.load %5 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c1_i64_14 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %40, %c1_i64_14 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c0_i32_15 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %39, %c0_i32_15 : i32
    cf.cond_br %42, ^bb6, ^bb7
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %c3_i64_16 = arith.constant 3 : i64
    %43 = llvm.load %5 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c3_i64_16 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %43, %c3_i64_16 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_17 = arith.constant 1 : i64
    %46 = llvm.load %5 : !llvm.ptr -> i64
    %47 = arith.cmpi ult, %46, %c1_i64_17 : i64
    scf.if %47 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %46, %c1_i64_17 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c16_i32_18 = arith.constant 16 : i32
    %c3_i64_19 = arith.constant 3 : i64
    %48 = llvm.load %5 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c3_i64_19 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %48, %c3_i64_19 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %50 = arith.addi %45, %c16_i32_18 : i32
    %c3_i64_20 = arith.constant 3 : i64
    %51 = llvm.load %5 : !llvm.ptr -> i64
    %52 = arith.cmpi ult, %51, %c3_i64_20 : i64
    scf.if %52 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %51, %c3_i64_20 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    llvm.store %50, %7 : i32, !llvm.ptr
    %c1_i64_21 = arith.constant 1 : i64
    %53 = llvm.load %5 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c1_i64_21 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %53, %c1_i64_21 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %c1_i64_22 = arith.constant 1 : i64
    %55 = llvm.load %5 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c1_i64_22 : i64
    scf.if %56 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %55, %c1_i64_22 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c3_i64_23 = arith.constant 3 : i64
    %57 = llvm.load %5 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_23 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %57, %c3_i64_23 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %59 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_24 = arith.constant 3 : i64
    %60 = llvm.load %5 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_24 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %60, %c3_i64_24 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %62 = arith.extui %59 : i32 to i64
    %63 = arith.addi %62, %c0_i64 : i64
    %64 = llvm.getelementptr %10[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_25 = arith.constant 3 : i64
    %66 = llvm.load %5 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c3_i64_25 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %66, %c3_i64_25 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_26 = arith.constant 3 : i64
    %69 = llvm.load %5 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c3_i64_26 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %69, %c3_i64_26 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %71 = arith.extui %68 : i32 to i64
    %72 = arith.addi %71, %c8_i64 : i64
    %73 = llvm.getelementptr %10[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %74 = llvm.load volatile %73 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_27 = arith.constant 3 : i64
    %75 = llvm.load %5 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c3_i64_27 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %75, %c3_i64_27 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    llvm.store %74, %3 : i32, !llvm.ptr
    %c3_i64_28 = arith.constant 3 : i64
    %77 = llvm.load %5 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c3_i64_28 : i64
    scf.if %78 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %77, %c3_i64_28 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %79 = arith.subi %65, %74 : i32
    %c3_i64_29 = arith.constant 3 : i64
    %80 = llvm.load %5 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_29 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %80, %c3_i64_29 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_30 = arith.constant 3 : i64
    %83 = llvm.load %5 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_30 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %83, %c3_i64_30 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %85 = arith.cmpi uge, %79, %82 : i32
    %86 = arith.extui %85 : i1 to i32
    %c1_i64_31 = arith.constant 1 : i64
    %87 = llvm.load %5 : !llvm.ptr -> i64
    %88 = arith.cmpi ult, %87, %c1_i64_31 : i64
    scf.if %88 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %87, %c1_i64_31 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c0_i32_32 = arith.constant 0 : i32
    %89 = arith.cmpi ne, %86, %c0_i32_32 : i32
    cf.cond_br %89, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %c3_i64_33 = arith.constant 3 : i64
    %90 = llvm.load %5 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c3_i64_33 : i64
    scf.if %91 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %90, %c3_i64_33 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %92 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_34 = arith.constant 3 : i64
    %93 = llvm.load %5 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c3_i64_34 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %93, %c3_i64_34 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_35 = arith.constant 1 : i64
    %96 = llvm.load %5 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c1_i64_35 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %96, %c1_i64_35 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c63_i32 = arith.constant 63 : i32
    %c3_i64_36 = arith.constant 3 : i64
    %98 = llvm.load %5 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_36 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %98, %c3_i64_36 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %100 = arith.andi %95, %c63_i32 : i32
    %c1_i64_37 = arith.constant 1 : i64
    %101 = llvm.load %5 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c1_i64_37 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %101, %c1_i64_37 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c128_i32_38 = arith.constant 128 : i32
    %c3_i64_39 = arith.constant 3 : i64
    %103 = llvm.load %5 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %c3_i64_39 : i64
    scf.if %104 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %103, %c3_i64_39 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %105 = arith.ori %100, %c128_i32_38 : i32
    %c3_i64_40 = arith.constant 3 : i64
    %106 = llvm.load %5 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c3_i64_40 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %106, %c3_i64_40 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c13_i64 = arith.constant 13 : i64
    %108 = arith.extui %92 : i32 to i64
    %109 = arith.addi %108, %c13_i64 : i64
    %110 = llvm.getelementptr %10[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = arith.trunci %105 : i32 to i8
    llvm.store volatile %111, %110 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_41 = arith.constant 3 : i64
    %112 = llvm.load %5 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c3_i64_41 : i64
    scf.if %113 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %112, %c3_i64_41 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_42 = arith.constant 3 : i64
    %115 = llvm.load %5 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c3_i64_42 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %115, %c3_i64_42 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_43 = arith.constant 1 : i64
    %118 = llvm.load %5 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c1_i64_43 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %118, %c1_i64_43 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c6_i32 = arith.constant 6 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %120 = llvm.load %5 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c3_i64_44 : i64
    scf.if %121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %120, %c3_i64_44 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %122 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %123 = scf.if %122 -> (i32) {
      %528 = arith.shrui %117, %c6_i32 : i32
      scf.yield %528 : i32
    } else {
      %c0_i32_212 = arith.constant 0 : i32
      scf.yield %c0_i32_212 : i32
    }
    %c1_i64_45 = arith.constant 1 : i64
    %124 = llvm.load %5 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c1_i64_45 : i64
    scf.if %125 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %124, %c1_i64_45 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c192_i32 = arith.constant 192 : i32
    %c3_i64_46 = arith.constant 3 : i64
    %126 = llvm.load %5 : !llvm.ptr -> i64
    %127 = arith.cmpi ult, %126, %c3_i64_46 : i64
    scf.if %127 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %126, %c3_i64_46 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %128 = arith.ori %123, %c192_i32 : i32
    %c3_i64_47 = arith.constant 3 : i64
    %129 = llvm.load %5 : !llvm.ptr -> i64
    %130 = arith.cmpi ult, %129, %c3_i64_47 : i64
    scf.if %130 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %129, %c3_i64_47 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %131 = arith.extui %114 : i32 to i64
    %132 = arith.addi %131, %c12_i64 : i64
    %133 = llvm.getelementptr %10[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = arith.trunci %128 : i32 to i8
    llvm.store volatile %134, %133 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_48 = arith.constant 1 : i64
    %135 = llvm.load %5 : !llvm.ptr -> i64
    %136 = arith.cmpi ult, %135, %c1_i64_48 : i64
    scf.if %136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %135, %c1_i64_48 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c2_i32 = arith.constant 2 : i32
    %c3_i64_49 = arith.constant 3 : i64
    %137 = llvm.load %5 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c3_i64_49 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %137, %c3_i64_49 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    %c1_i64_50 = arith.constant 1 : i64
    %139 = llvm.load %5 : !llvm.ptr -> i64
    %140 = arith.cmpi ult, %139, %c1_i64_50 : i64
    scf.if %140 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %139, %c1_i64_50 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %c1_i64_51 = arith.constant 1 : i64
    %141 = llvm.load %5 : !llvm.ptr -> i64
    %142 = arith.cmpi ult, %141, %c1_i64_51 : i64
    scf.if %142 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %141, %c1_i64_51 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c3_i64_52 = arith.constant 3 : i64
    %143 = llvm.load %5 : !llvm.ptr -> i64
    %144 = arith.cmpi ult, %143, %c3_i64_52 : i64
    scf.if %144 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %143, %c3_i64_52 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %145 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_53 = arith.constant 3 : i64
    %146 = llvm.load %5 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c3_i64_53 : i64
    scf.if %147 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %146, %c3_i64_53 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c8_i64_54 = arith.constant 8 : i64
    %148 = arith.extui %145 : i32 to i64
    %149 = arith.addi %148, %c8_i64_54 : i64
    %150 = llvm.getelementptr %10[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_55 = arith.constant 3 : i64
    %152 = llvm.load %5 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c3_i64_55 : i64
    scf.if %153 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %152, %c3_i64_55 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    llvm.store %151, %3 : i32, !llvm.ptr
    %c3_i64_56 = arith.constant 3 : i64
    %154 = llvm.load %5 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c3_i64_56 : i64
    scf.if %155 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %154, %c3_i64_56 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %156 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_57 = arith.constant 3 : i64
    %157 = llvm.load %5 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c3_i64_57 : i64
    scf.if %158 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %157, %c3_i64_57 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c0_i64_58 = arith.constant 0 : i64
    %159 = arith.extui %156 : i32 to i64
    %160 = arith.addi %159, %c0_i64_58 : i64
    %161 = llvm.getelementptr %10[%160] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %162 = llvm.load volatile %161 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_59 = arith.constant 3 : i64
    %163 = llvm.load %5 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c3_i64_59 : i64
    scf.if %164 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %163, %c3_i64_59 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %165 = arith.cmpi eq, %151, %162 : i32
    %166 = arith.extui %165 : i1 to i32
    %c0_i32_60 = arith.constant 0 : i32
    %167 = arith.cmpi eq, %166, %c0_i32_60 : i32
    %168 = arith.extui %167 : i1 to i32
    %c1_i64_61 = arith.constant 1 : i64
    %169 = llvm.load %5 : !llvm.ptr -> i64
    %170 = arith.cmpi ult, %169, %c1_i64_61 : i64
    scf.if %170 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %169, %c1_i64_61 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c0_i32_62 = arith.constant 0 : i32
    %171 = arith.cmpi ne, %168, %c0_i32_62 : i32
    cf.cond_br %171, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %c3_i64_63 = arith.constant 3 : i64
    %172 = llvm.load %5 : !llvm.ptr -> i64
    %173 = arith.cmpi ult, %172, %c3_i64_63 : i64
    scf.if %173 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %172, %c3_i64_63 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %174 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_64 = arith.constant 1 : i64
    %175 = llvm.load %5 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c1_i64_64 : i64
    scf.if %176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %175, %c1_i64_64 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c0_i32_65 = arith.constant 0 : i32
    %c3_i64_66 = arith.constant 3 : i64
    %177 = llvm.load %5 : !llvm.ptr -> i64
    %178 = arith.cmpi ult, %177, %c3_i64_66 : i64
    scf.if %178 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %177, %c3_i64_66 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c12_i64_67 = arith.constant 12 : i64
    %179 = arith.extui %174 : i32 to i64
    %180 = arith.addi %179, %c12_i64_67 : i64
    %181 = llvm.getelementptr %10[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_65, %181 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_68 = arith.constant 3 : i64
    %182 = llvm.load %5 : !llvm.ptr -> i64
    %183 = arith.cmpi ult, %182, %c3_i64_68 : i64
    scf.if %183 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %182, %c3_i64_68 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %184 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_69 = arith.constant 1 : i64
    %185 = llvm.load %5 : !llvm.ptr -> i64
    %186 = arith.cmpi ult, %185, %c1_i64_69 : i64
    scf.if %186 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %185, %c1_i64_69 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c2048_i32 = arith.constant 2048 : i32
    %c3_i64_70 = arith.constant 3 : i64
    %187 = llvm.load %5 : !llvm.ptr -> i64
    %188 = arith.cmpi ult, %187, %c3_i64_70 : i64
    scf.if %188 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %187, %c3_i64_70 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %189 = arith.cmpi ult, %184, %c2048_i32 : i32
    %190 = arith.extui %189 : i1 to i32
    %c1_i64_71 = arith.constant 1 : i64
    %191 = llvm.load %5 : !llvm.ptr -> i64
    %192 = arith.cmpi ult, %191, %c1_i64_71 : i64
    scf.if %192 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %191, %c1_i64_71 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c0_i32_72 = arith.constant 0 : i32
    %193 = arith.cmpi ne, %190, %c0_i32_72 : i32
    cf.cond_br %193, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %c1_i64_73 = arith.constant 1 : i64
    %194 = llvm.load %5 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c1_i64_73 : i64
    scf.if %195 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %194, %c1_i64_73 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c3_i64_74 = arith.constant 3 : i64
    %196 = llvm.load %5 : !llvm.ptr -> i64
    %197 = arith.cmpi ult, %196, %c3_i64_74 : i64
    scf.if %197 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %196, %c3_i64_74 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %198 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_75 = arith.constant 1 : i64
    %199 = llvm.load %5 : !llvm.ptr -> i64
    %200 = arith.cmpi ult, %199, %c1_i64_75 : i64
    scf.if %200 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %199, %c1_i64_75 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c65536_i32 = arith.constant 65536 : i32
    %c3_i64_76 = arith.constant 3 : i64
    %201 = llvm.load %5 : !llvm.ptr -> i64
    %202 = arith.cmpi ult, %201, %c3_i64_76 : i64
    scf.if %202 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %201, %c3_i64_76 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %203 = arith.cmpi uge, %198, %c65536_i32 : i32
    %204 = arith.extui %203 : i1 to i32
    %c1_i64_77 = arith.constant 1 : i64
    %205 = llvm.load %5 : !llvm.ptr -> i64
    %206 = arith.cmpi ult, %205, %c1_i64_77 : i64
    scf.if %206 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %205, %c1_i64_77 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c0_i32_78 = arith.constant 0 : i32
    %207 = arith.cmpi ne, %204, %c0_i32_78 : i32
    cf.cond_br %207, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %c3_i64_79 = arith.constant 3 : i64
    %208 = llvm.load %5 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c3_i64_79 : i64
    scf.if %209 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %208, %c3_i64_79 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %210 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_80 = arith.constant 3 : i64
    %211 = llvm.load %5 : !llvm.ptr -> i64
    %212 = arith.cmpi ult, %211, %c3_i64_80 : i64
    scf.if %212 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %211, %c3_i64_80 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %213 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_81 = arith.constant 1 : i64
    %214 = llvm.load %5 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c1_i64_81 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %214, %c1_i64_81 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c63_i32_82 = arith.constant 63 : i32
    %c3_i64_83 = arith.constant 3 : i64
    %216 = llvm.load %5 : !llvm.ptr -> i64
    %217 = arith.cmpi ult, %216, %c3_i64_83 : i64
    scf.if %217 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %216, %c3_i64_83 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %218 = arith.andi %213, %c63_i32_82 : i32
    %c1_i64_84 = arith.constant 1 : i64
    %219 = llvm.load %5 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c1_i64_84 : i64
    scf.if %220 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %219, %c1_i64_84 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c128_i32_85 = arith.constant 128 : i32
    %c3_i64_86 = arith.constant 3 : i64
    %221 = llvm.load %5 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c3_i64_86 : i64
    scf.if %222 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %221, %c3_i64_86 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %223 = arith.ori %218, %c128_i32_85 : i32
    %c3_i64_87 = arith.constant 3 : i64
    %224 = llvm.load %5 : !llvm.ptr -> i64
    %225 = arith.cmpi ult, %224, %c3_i64_87 : i64
    scf.if %225 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %224, %c3_i64_87 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c15_i64 = arith.constant 15 : i64
    %226 = arith.extui %210 : i32 to i64
    %227 = arith.addi %226, %c15_i64 : i64
    %228 = llvm.getelementptr %10[%227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %229 = arith.trunci %223 : i32 to i8
    llvm.store volatile %229, %228 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_88 = arith.constant 3 : i64
    %230 = llvm.load %5 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c3_i64_88 : i64
    scf.if %231 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %230, %c3_i64_88 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %232 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_89 = arith.constant 3 : i64
    %233 = llvm.load %5 : !llvm.ptr -> i64
    %234 = arith.cmpi ult, %233, %c3_i64_89 : i64
    scf.if %234 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %233, %c3_i64_89 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %235 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_90 = arith.constant 1 : i64
    %236 = llvm.load %5 : !llvm.ptr -> i64
    %237 = arith.cmpi ult, %236, %c1_i64_90 : i64
    scf.if %237 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %236, %c1_i64_90 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c6_i32_91 = arith.constant 6 : i32
    %c3_i64_92 = arith.constant 3 : i64
    %238 = llvm.load %5 : !llvm.ptr -> i64
    %239 = arith.cmpi ult, %238, %c3_i64_92 : i64
    scf.if %239 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %238, %c3_i64_92 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c31_i32_93 = arith.constant 31 : i32
    %240 = arith.cmpi ule, %c6_i32_91, %c31_i32_93 : i32
    %241 = scf.if %240 -> (i32) {
      %528 = arith.shrui %235, %c6_i32_91 : i32
      scf.yield %528 : i32
    } else {
      %c0_i32_212 = arith.constant 0 : i32
      scf.yield %c0_i32_212 : i32
    }
    %c1_i64_94 = arith.constant 1 : i64
    %242 = llvm.load %5 : !llvm.ptr -> i64
    %243 = arith.cmpi ult, %242, %c1_i64_94 : i64
    scf.if %243 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %242, %c1_i64_94 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c63_i32_95 = arith.constant 63 : i32
    %c3_i64_96 = arith.constant 3 : i64
    %244 = llvm.load %5 : !llvm.ptr -> i64
    %245 = arith.cmpi ult, %244, %c3_i64_96 : i64
    scf.if %245 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %244, %c3_i64_96 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %246 = arith.andi %241, %c63_i32_95 : i32
    %c1_i64_97 = arith.constant 1 : i64
    %247 = llvm.load %5 : !llvm.ptr -> i64
    %248 = arith.cmpi ult, %247, %c1_i64_97 : i64
    scf.if %248 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %247, %c1_i64_97 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c128_i32_98 = arith.constant 128 : i32
    %c3_i64_99 = arith.constant 3 : i64
    %249 = llvm.load %5 : !llvm.ptr -> i64
    %250 = arith.cmpi ult, %249, %c3_i64_99 : i64
    scf.if %250 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %249, %c3_i64_99 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %251 = arith.ori %246, %c128_i32_98 : i32
    %c3_i64_100 = arith.constant 3 : i64
    %252 = llvm.load %5 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c3_i64_100 : i64
    scf.if %253 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %252, %c3_i64_100 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c14_i64 = arith.constant 14 : i64
    %254 = arith.extui %232 : i32 to i64
    %255 = arith.addi %254, %c14_i64 : i64
    %256 = llvm.getelementptr %10[%255] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %257 = arith.trunci %251 : i32 to i8
    llvm.store volatile %257, %256 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_101 = arith.constant 3 : i64
    %258 = llvm.load %5 : !llvm.ptr -> i64
    %259 = arith.cmpi ult, %258, %c3_i64_101 : i64
    scf.if %259 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %258, %c3_i64_101 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %260 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_102 = arith.constant 3 : i64
    %261 = llvm.load %5 : !llvm.ptr -> i64
    %262 = arith.cmpi ult, %261, %c3_i64_102 : i64
    scf.if %262 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %261, %c3_i64_102 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %263 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_103 = arith.constant 1 : i64
    %264 = llvm.load %5 : !llvm.ptr -> i64
    %265 = arith.cmpi ult, %264, %c1_i64_103 : i64
    scf.if %265 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %264, %c1_i64_103 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c12_i32 = arith.constant 12 : i32
    %c3_i64_104 = arith.constant 3 : i64
    %266 = llvm.load %5 : !llvm.ptr -> i64
    %267 = arith.cmpi ult, %266, %c3_i64_104 : i64
    scf.if %267 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %266, %c3_i64_104 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c31_i32_105 = arith.constant 31 : i32
    %268 = arith.cmpi ule, %c12_i32, %c31_i32_105 : i32
    %269 = scf.if %268 -> (i32) {
      %528 = arith.shrui %263, %c12_i32 : i32
      scf.yield %528 : i32
    } else {
      %c0_i32_212 = arith.constant 0 : i32
      scf.yield %c0_i32_212 : i32
    }
    %c1_i64_106 = arith.constant 1 : i64
    %270 = llvm.load %5 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %270, %c1_i64_106 : i64
    scf.if %271 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %270, %c1_i64_106 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c63_i32_107 = arith.constant 63 : i32
    %c3_i64_108 = arith.constant 3 : i64
    %272 = llvm.load %5 : !llvm.ptr -> i64
    %273 = arith.cmpi ult, %272, %c3_i64_108 : i64
    scf.if %273 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %272, %c3_i64_108 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %274 = arith.andi %269, %c63_i32_107 : i32
    %c1_i64_109 = arith.constant 1 : i64
    %275 = llvm.load %5 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c1_i64_109 : i64
    scf.if %276 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %275, %c1_i64_109 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c128_i32_110 = arith.constant 128 : i32
    %c3_i64_111 = arith.constant 3 : i64
    %277 = llvm.load %5 : !llvm.ptr -> i64
    %278 = arith.cmpi ult, %277, %c3_i64_111 : i64
    scf.if %278 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %277, %c3_i64_111 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %279 = arith.ori %274, %c128_i32_110 : i32
    %c3_i64_112 = arith.constant 3 : i64
    %280 = llvm.load %5 : !llvm.ptr -> i64
    %281 = arith.cmpi ult, %280, %c3_i64_112 : i64
    scf.if %281 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %280, %c3_i64_112 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c13_i64_113 = arith.constant 13 : i64
    %282 = arith.extui %260 : i32 to i64
    %283 = arith.addi %282, %c13_i64_113 : i64
    %284 = llvm.getelementptr %10[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %285 = arith.trunci %279 : i32 to i8
    llvm.store volatile %285, %284 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_114 = arith.constant 3 : i64
    %286 = llvm.load %5 : !llvm.ptr -> i64
    %287 = arith.cmpi ult, %286, %c3_i64_114 : i64
    scf.if %287 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %286, %c3_i64_114 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %288 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_115 = arith.constant 3 : i64
    %289 = llvm.load %5 : !llvm.ptr -> i64
    %290 = arith.cmpi ult, %289, %c3_i64_115 : i64
    scf.if %290 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %289, %c3_i64_115 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %291 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_116 = arith.constant 1 : i64
    %292 = llvm.load %5 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c1_i64_116 : i64
    scf.if %293 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %292, %c1_i64_116 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c18_i32 = arith.constant 18 : i32
    %c3_i64_117 = arith.constant 3 : i64
    %294 = llvm.load %5 : !llvm.ptr -> i64
    %295 = arith.cmpi ult, %294, %c3_i64_117 : i64
    scf.if %295 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %294, %c3_i64_117 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c31_i32_118 = arith.constant 31 : i32
    %296 = arith.cmpi ule, %c18_i32, %c31_i32_118 : i32
    %297 = scf.if %296 -> (i32) {
      %528 = arith.shrui %291, %c18_i32 : i32
      scf.yield %528 : i32
    } else {
      %c0_i32_212 = arith.constant 0 : i32
      scf.yield %c0_i32_212 : i32
    }
    %c1_i64_119 = arith.constant 1 : i64
    %298 = llvm.load %5 : !llvm.ptr -> i64
    %299 = arith.cmpi ult, %298, %c1_i64_119 : i64
    scf.if %299 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %298, %c1_i64_119 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c7_i32 = arith.constant 7 : i32
    %c3_i64_120 = arith.constant 3 : i64
    %300 = llvm.load %5 : !llvm.ptr -> i64
    %301 = arith.cmpi ult, %300, %c3_i64_120 : i64
    scf.if %301 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %300, %c3_i64_120 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %302 = arith.andi %297, %c7_i32 : i32
    %c1_i64_121 = arith.constant 1 : i64
    %303 = llvm.load %5 : !llvm.ptr -> i64
    %304 = arith.cmpi ult, %303, %c1_i64_121 : i64
    scf.if %304 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %303, %c1_i64_121 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c240_i32 = arith.constant 240 : i32
    %c3_i64_122 = arith.constant 3 : i64
    %305 = llvm.load %5 : !llvm.ptr -> i64
    %306 = arith.cmpi ult, %305, %c3_i64_122 : i64
    scf.if %306 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %305, %c3_i64_122 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %307 = arith.ori %302, %c240_i32 : i32
    %c3_i64_123 = arith.constant 3 : i64
    %308 = llvm.load %5 : !llvm.ptr -> i64
    %309 = arith.cmpi ult, %308, %c3_i64_123 : i64
    scf.if %309 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %308, %c3_i64_123 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c12_i64_124 = arith.constant 12 : i64
    %310 = arith.extui %288 : i32 to i64
    %311 = arith.addi %310, %c12_i64_124 : i64
    %312 = llvm.getelementptr %10[%311] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %313 = arith.trunci %307 : i32 to i8
    llvm.store volatile %313, %312 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_125 = arith.constant 1 : i64
    %314 = llvm.load %5 : !llvm.ptr -> i64
    %315 = arith.cmpi ult, %314, %c1_i64_125 : i64
    scf.if %315 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %314, %c1_i64_125 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c3_i64_126 = arith.constant 3 : i64
    %316 = llvm.load %5 : !llvm.ptr -> i64
    %317 = arith.cmpi ult, %316, %c3_i64_126 : i64
    scf.if %317 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %316, %c3_i64_126 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    %c1_i64_127 = arith.constant 1 : i64
    %318 = llvm.load %5 : !llvm.ptr -> i64
    %319 = arith.cmpi ult, %318, %c1_i64_127 : i64
    scf.if %319 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %318, %c1_i64_127 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %c3_i64_128 = arith.constant 3 : i64
    %320 = llvm.load %5 : !llvm.ptr -> i64
    %321 = arith.cmpi ult, %320, %c3_i64_128 : i64
    scf.if %321 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %320, %c3_i64_128 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %322 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_129 = arith.constant 3 : i64
    %323 = llvm.load %5 : !llvm.ptr -> i64
    %324 = arith.cmpi ult, %323, %c3_i64_129 : i64
    scf.if %324 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %323, %c3_i64_129 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %325 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_130 = arith.constant 1 : i64
    %326 = llvm.load %5 : !llvm.ptr -> i64
    %327 = arith.cmpi ult, %326, %c1_i64_130 : i64
    scf.if %327 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %326, %c1_i64_130 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c63_i32_131 = arith.constant 63 : i32
    %c3_i64_132 = arith.constant 3 : i64
    %328 = llvm.load %5 : !llvm.ptr -> i64
    %329 = arith.cmpi ult, %328, %c3_i64_132 : i64
    scf.if %329 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %328, %c3_i64_132 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %330 = arith.andi %325, %c63_i32_131 : i32
    %c1_i64_133 = arith.constant 1 : i64
    %331 = llvm.load %5 : !llvm.ptr -> i64
    %332 = arith.cmpi ult, %331, %c1_i64_133 : i64
    scf.if %332 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %331, %c1_i64_133 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c128_i32_134 = arith.constant 128 : i32
    %c3_i64_135 = arith.constant 3 : i64
    %333 = llvm.load %5 : !llvm.ptr -> i64
    %334 = arith.cmpi ult, %333, %c3_i64_135 : i64
    scf.if %334 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %333, %c3_i64_135 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %335 = arith.ori %330, %c128_i32_134 : i32
    %c3_i64_136 = arith.constant 3 : i64
    %336 = llvm.load %5 : !llvm.ptr -> i64
    %337 = arith.cmpi ult, %336, %c3_i64_136 : i64
    scf.if %337 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %336, %c3_i64_136 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c14_i64_137 = arith.constant 14 : i64
    %338 = arith.extui %322 : i32 to i64
    %339 = arith.addi %338, %c14_i64_137 : i64
    %340 = llvm.getelementptr %10[%339] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %341 = arith.trunci %335 : i32 to i8
    llvm.store volatile %341, %340 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_138 = arith.constant 3 : i64
    %342 = llvm.load %5 : !llvm.ptr -> i64
    %343 = arith.cmpi ult, %342, %c3_i64_138 : i64
    scf.if %343 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %342, %c3_i64_138 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %344 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_139 = arith.constant 3 : i64
    %345 = llvm.load %5 : !llvm.ptr -> i64
    %346 = arith.cmpi ult, %345, %c3_i64_139 : i64
    scf.if %346 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %345, %c3_i64_139 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %347 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_140 = arith.constant 1 : i64
    %348 = llvm.load %5 : !llvm.ptr -> i64
    %349 = arith.cmpi ult, %348, %c1_i64_140 : i64
    scf.if %349 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %348, %c1_i64_140 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c12_i32_141 = arith.constant 12 : i32
    %c3_i64_142 = arith.constant 3 : i64
    %350 = llvm.load %5 : !llvm.ptr -> i64
    %351 = arith.cmpi ult, %350, %c3_i64_142 : i64
    scf.if %351 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %350, %c3_i64_142 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c31_i32_143 = arith.constant 31 : i32
    %352 = arith.cmpi ule, %c12_i32_141, %c31_i32_143 : i32
    %353 = scf.if %352 -> (i32) {
      %528 = arith.shrui %347, %c12_i32_141 : i32
      scf.yield %528 : i32
    } else {
      %c0_i32_212 = arith.constant 0 : i32
      scf.yield %c0_i32_212 : i32
    }
    %c1_i64_144 = arith.constant 1 : i64
    %354 = llvm.load %5 : !llvm.ptr -> i64
    %355 = arith.cmpi ult, %354, %c1_i64_144 : i64
    scf.if %355 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %354, %c1_i64_144 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c224_i32 = arith.constant 224 : i32
    %c3_i64_145 = arith.constant 3 : i64
    %356 = llvm.load %5 : !llvm.ptr -> i64
    %357 = arith.cmpi ult, %356, %c3_i64_145 : i64
    scf.if %357 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %356, %c3_i64_145 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %358 = arith.ori %353, %c224_i32 : i32
    %c3_i64_146 = arith.constant 3 : i64
    %359 = llvm.load %5 : !llvm.ptr -> i64
    %360 = arith.cmpi ult, %359, %c3_i64_146 : i64
    scf.if %360 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %359, %c3_i64_146 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c12_i64_147 = arith.constant 12 : i64
    %361 = arith.extui %344 : i32 to i64
    %362 = arith.addi %361, %c12_i64_147 : i64
    %363 = llvm.getelementptr %10[%362] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %364 = arith.trunci %358 : i32 to i8
    llvm.store volatile %364, %363 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_148 = arith.constant 3 : i64
    %365 = llvm.load %5 : !llvm.ptr -> i64
    %366 = arith.cmpi ult, %365, %c3_i64_148 : i64
    scf.if %366 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %365, %c3_i64_148 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %367 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_149 = arith.constant 3 : i64
    %368 = llvm.load %5 : !llvm.ptr -> i64
    %369 = arith.cmpi ult, %368, %c3_i64_149 : i64
    scf.if %369 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %368, %c3_i64_149 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %370 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_150 = arith.constant 1 : i64
    %371 = llvm.load %5 : !llvm.ptr -> i64
    %372 = arith.cmpi ult, %371, %c1_i64_150 : i64
    scf.if %372 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %371, %c1_i64_150 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c6_i32_151 = arith.constant 6 : i32
    %c3_i64_152 = arith.constant 3 : i64
    %373 = llvm.load %5 : !llvm.ptr -> i64
    %374 = arith.cmpi ult, %373, %c3_i64_152 : i64
    scf.if %374 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %373, %c3_i64_152 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c31_i32_153 = arith.constant 31 : i32
    %375 = arith.cmpi ule, %c6_i32_151, %c31_i32_153 : i32
    %376 = scf.if %375 -> (i32) {
      %528 = arith.shrui %370, %c6_i32_151 : i32
      scf.yield %528 : i32
    } else {
      %c0_i32_212 = arith.constant 0 : i32
      scf.yield %c0_i32_212 : i32
    }
    %c1_i64_154 = arith.constant 1 : i64
    %377 = llvm.load %5 : !llvm.ptr -> i64
    %378 = arith.cmpi ult, %377, %c1_i64_154 : i64
    scf.if %378 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %377, %c1_i64_154 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c63_i32_155 = arith.constant 63 : i32
    %c3_i64_156 = arith.constant 3 : i64
    %379 = llvm.load %5 : !llvm.ptr -> i64
    %380 = arith.cmpi ult, %379, %c3_i64_156 : i64
    scf.if %380 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %379, %c3_i64_156 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %381 = arith.andi %376, %c63_i32_155 : i32
    %c1_i64_157 = arith.constant 1 : i64
    %382 = llvm.load %5 : !llvm.ptr -> i64
    %383 = arith.cmpi ult, %382, %c1_i64_157 : i64
    scf.if %383 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %382, %c1_i64_157 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c128_i32_158 = arith.constant 128 : i32
    %c3_i64_159 = arith.constant 3 : i64
    %384 = llvm.load %5 : !llvm.ptr -> i64
    %385 = arith.cmpi ult, %384, %c3_i64_159 : i64
    scf.if %385 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %384, %c3_i64_159 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %386 = arith.ori %381, %c128_i32_158 : i32
    %c3_i64_160 = arith.constant 3 : i64
    %387 = llvm.load %5 : !llvm.ptr -> i64
    %388 = arith.cmpi ult, %387, %c3_i64_160 : i64
    scf.if %388 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %387, %c3_i64_160 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c13_i64_161 = arith.constant 13 : i64
    %389 = arith.extui %367 : i32 to i64
    %390 = arith.addi %389, %c13_i64_161 : i64
    %391 = llvm.getelementptr %10[%390] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %392 = arith.trunci %386 : i32 to i8
    llvm.store volatile %392, %391 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_162 = arith.constant 1 : i64
    %393 = llvm.load %5 : !llvm.ptr -> i64
    %394 = arith.cmpi ult, %393, %c1_i64_162 : i64
    scf.if %394 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %393, %c1_i64_162 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c3_i32 = arith.constant 3 : i32
    %c3_i64_163 = arith.constant 3 : i64
    %395 = llvm.load %5 : !llvm.ptr -> i64
    %396 = arith.cmpi ult, %395, %c3_i64_163 : i64
    scf.if %396 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %395, %c3_i64_163 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    %c1_i64_164 = arith.constant 1 : i64
    %397 = llvm.load %5 : !llvm.ptr -> i64
    %398 = arith.cmpi ult, %397, %c1_i64_164 : i64
    scf.if %398 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %397, %c1_i64_164 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %c3_i64_165 = arith.constant 3 : i64
    %399 = llvm.load %5 : !llvm.ptr -> i64
    %400 = arith.cmpi ult, %399, %c3_i64_165 : i64
    scf.if %400 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %399, %c3_i64_165 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %401 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_166 = arith.constant 3 : i64
    %402 = llvm.load %5 : !llvm.ptr -> i64
    %403 = arith.cmpi ult, %402, %c3_i64_166 : i64
    scf.if %403 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %402, %c3_i64_166 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %404 = arith.extui %401 : i32 to i64
    %405 = arith.addi %404, %c4_i64 : i64
    %406 = llvm.getelementptr %10[%405] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %407 = llvm.load volatile %406 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_167 = arith.constant 3 : i64
    %408 = llvm.load %5 : !llvm.ptr -> i64
    %409 = arith.cmpi ult, %408, %c3_i64_167 : i64
    scf.if %409 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %408, %c3_i64_167 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %410 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_168 = arith.constant 3 : i64
    %411 = llvm.load %5 : !llvm.ptr -> i64
    %412 = arith.cmpi ult, %411, %c3_i64_168 : i64
    scf.if %412 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %411, %c3_i64_168 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %413 = arith.addi %407, %410 : i32
    %c3_i64_169 = arith.constant 3 : i64
    %414 = llvm.load %5 : !llvm.ptr -> i64
    %415 = arith.cmpi ult, %414, %c3_i64_169 : i64
    scf.if %415 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %414, %c3_i64_169 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %416 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_170 = arith.constant 3 : i64
    %417 = llvm.load %5 : !llvm.ptr -> i64
    %418 = arith.cmpi ult, %417, %c3_i64_170 : i64
    scf.if %418 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %417, %c3_i64_170 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c0_i64_171 = arith.constant 0 : i64
    %419 = arith.extui %413 : i32 to i64
    %420 = arith.addi %419, %c0_i64_171 : i64
    %421 = llvm.getelementptr %10[%420] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %422 = arith.trunci %416 : i32 to i8
    llvm.store volatile %422, %421 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_172 = arith.constant 3 : i64
    %423 = llvm.load %5 : !llvm.ptr -> i64
    %424 = arith.cmpi ult, %423, %c3_i64_172 : i64
    scf.if %424 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %423, %c3_i64_172 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %425 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_173 = arith.constant 3 : i64
    %426 = llvm.load %5 : !llvm.ptr -> i64
    %427 = arith.cmpi ult, %426, %c3_i64_173 : i64
    scf.if %427 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %426, %c3_i64_173 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %428 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_174 = arith.constant 1 : i64
    %429 = llvm.load %5 : !llvm.ptr -> i64
    %430 = arith.cmpi ult, %429, %c1_i64_174 : i64
    scf.if %430 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %429, %c1_i64_174 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c1_i32_175 = arith.constant 1 : i32
    %c3_i64_176 = arith.constant 3 : i64
    %431 = llvm.load %5 : !llvm.ptr -> i64
    %432 = arith.cmpi ult, %431, %c3_i64_176 : i64
    scf.if %432 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %431, %c3_i64_176 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %433 = arith.addi %428, %c1_i32_175 : i32
    %c3_i64_177 = arith.constant 3 : i64
    %434 = llvm.load %5 : !llvm.ptr -> i64
    %435 = arith.cmpi ult, %434, %c3_i64_177 : i64
    scf.if %435 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %434, %c3_i64_177 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c8_i64_178 = arith.constant 8 : i64
    %436 = arith.extui %425 : i32 to i64
    %437 = arith.addi %436, %c8_i64_178 : i64
    %438 = llvm.getelementptr %10[%437] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %433, %438 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_179 = arith.constant 1 : i64
    %439 = llvm.load %5 : !llvm.ptr -> i64
    %440 = arith.cmpi ult, %439, %c1_i64_179 : i64
    scf.if %440 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %439, %c1_i64_179 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %c3_i64_180 = arith.constant 3 : i64
    %441 = llvm.load %5 : !llvm.ptr -> i64
    %442 = arith.cmpi ult, %441, %c3_i64_180 : i64
    scf.if %442 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %441, %c3_i64_180 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %443 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %444 = llvm.load %5 : !llvm.ptr -> i64
    %445 = arith.cmpi ult, %444, %c6_i64 : i64
    scf.if %445 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %444, %c6_i64 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    call @f18(%arg0, %443) : (!llvm.ptr, i32) -> ()
    %c1_i64_181 = arith.constant 1 : i64
    %446 = llvm.load %5 : !llvm.ptr -> i64
    %447 = arith.cmpi ult, %446, %c1_i64_181 : i64
    scf.if %447 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %446, %c1_i64_181 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %c3_i64_182 = arith.constant 3 : i64
    %448 = llvm.load %5 : !llvm.ptr -> i64
    %449 = arith.cmpi ult, %448, %c3_i64_182 : i64
    scf.if %449 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %448, %c3_i64_182 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %450 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_183 = arith.constant 3 : i64
    %451 = llvm.load %5 : !llvm.ptr -> i64
    %452 = arith.cmpi ult, %451, %c3_i64_183 : i64
    scf.if %452 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %451, %c3_i64_183 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c4_i64_184 = arith.constant 4 : i64
    %453 = arith.extui %450 : i32 to i64
    %454 = arith.addi %453, %c4_i64_184 : i64
    %455 = llvm.getelementptr %10[%454] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %456 = llvm.load volatile %455 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_185 = arith.constant 3 : i64
    %457 = llvm.load %5 : !llvm.ptr -> i64
    %458 = arith.cmpi ult, %457, %c3_i64_185 : i64
    scf.if %458 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %457, %c3_i64_185 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %459 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_186 = arith.constant 3 : i64
    %460 = llvm.load %5 : !llvm.ptr -> i64
    %461 = arith.cmpi ult, %460, %c3_i64_186 : i64
    scf.if %461 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %460, %c3_i64_186 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %462 = arith.addi %456, %459 : i32
    %c3_i64_187 = arith.constant 3 : i64
    %463 = llvm.load %5 : !llvm.ptr -> i64
    %464 = arith.cmpi ult, %463, %c3_i64_187 : i64
    scf.if %464 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %463, %c3_i64_187 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %465 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_188 = arith.constant 1 : i64
    %466 = llvm.load %5 : !llvm.ptr -> i64
    %467 = arith.cmpi ult, %466, %c1_i64_188 : i64
    scf.if %467 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %466, %c1_i64_188 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c12_i32_189 = arith.constant 12 : i32
    %c3_i64_190 = arith.constant 3 : i64
    %468 = llvm.load %5 : !llvm.ptr -> i64
    %469 = arith.cmpi ult, %468, %c3_i64_190 : i64
    scf.if %469 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %468, %c3_i64_190 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %470 = arith.addi %465, %c12_i32_189 : i32
    %c3_i64_191 = arith.constant 3 : i64
    %471 = llvm.load %5 : !llvm.ptr -> i64
    %472 = arith.cmpi ult, %471, %c3_i64_191 : i64
    scf.if %472 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %471, %c3_i64_191 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %473 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64_192 = arith.constant 6 : i64
    %474 = llvm.load %5 : !llvm.ptr -> i64
    %475 = arith.cmpi ult, %474, %c6_i64_192 : i64
    scf.if %475 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %474, %c6_i64_192 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %476 = call @f77(%arg0, %462, %470, %473) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_193 = arith.constant 1 : i64
    %477 = llvm.load %5 : !llvm.ptr -> i64
    %478 = arith.cmpi ult, %477, %c1_i64_193 : i64
    scf.if %478 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %477, %c1_i64_193 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c3_i64_194 = arith.constant 3 : i64
    %479 = llvm.load %5 : !llvm.ptr -> i64
    %480 = arith.cmpi ult, %479, %c3_i64_194 : i64
    scf.if %480 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %479, %c3_i64_194 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %481 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_195 = arith.constant 3 : i64
    %482 = llvm.load %5 : !llvm.ptr -> i64
    %483 = arith.cmpi ult, %482, %c3_i64_195 : i64
    scf.if %483 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %482, %c3_i64_195 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %484 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_196 = arith.constant 3 : i64
    %485 = llvm.load %5 : !llvm.ptr -> i64
    %486 = arith.cmpi ult, %485, %c3_i64_196 : i64
    scf.if %486 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %485, %c3_i64_196 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c8_i64_197 = arith.constant 8 : i64
    %487 = arith.extui %484 : i32 to i64
    %488 = arith.addi %487, %c8_i64_197 : i64
    %489 = llvm.getelementptr %10[%488] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %490 = llvm.load volatile %489 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_198 = arith.constant 3 : i64
    %491 = llvm.load %5 : !llvm.ptr -> i64
    %492 = arith.cmpi ult, %491, %c3_i64_198 : i64
    scf.if %492 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %491, %c3_i64_198 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %493 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_199 = arith.constant 3 : i64
    %494 = llvm.load %5 : !llvm.ptr -> i64
    %495 = arith.cmpi ult, %494, %c3_i64_199 : i64
    scf.if %495 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %494, %c3_i64_199 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %496 = arith.addi %490, %493 : i32
    %c3_i64_200 = arith.constant 3 : i64
    %497 = llvm.load %5 : !llvm.ptr -> i64
    %498 = arith.cmpi ult, %497, %c3_i64_200 : i64
    scf.if %498 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %497, %c3_i64_200 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c8_i64_201 = arith.constant 8 : i64
    %499 = arith.extui %481 : i32 to i64
    %500 = arith.addi %499, %c8_i64_201 : i64
    %501 = llvm.getelementptr %10[%500] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %496, %501 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_202 = arith.constant 1 : i64
    %502 = llvm.load %5 : !llvm.ptr -> i64
    %503 = arith.cmpi ult, %502, %c1_i64_202 : i64
    scf.if %503 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %502, %c1_i64_202 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %c3_i64_203 = arith.constant 3 : i64
    %504 = llvm.load %5 : !llvm.ptr -> i64
    %505 = arith.cmpi ult, %504, %c3_i64_203 : i64
    scf.if %505 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %504, %c3_i64_203 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %506 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_204 = arith.constant 3 : i64
    %507 = llvm.load %5 : !llvm.ptr -> i64
    %508 = arith.cmpi ult, %507, %c3_i64_204 : i64
    scf.if %508 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %507, %c3_i64_204 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %509 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_205 = arith.constant 3 : i64
    %510 = llvm.load %5 : !llvm.ptr -> i64
    %511 = arith.cmpi ult, %510, %c3_i64_205 : i64
    scf.if %511 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %510, %c3_i64_205 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %512 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64_206 = arith.constant 6 : i64
    %513 = llvm.load %5 : !llvm.ptr -> i64
    %514 = arith.cmpi ult, %513, %c6_i64_206 : i64
    scf.if %514 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %513, %c6_i64_206 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    call @f19(%arg0, %506, %509, %512) : (!llvm.ptr, i32, i32, i32) -> ()
    %c3_i64_207 = arith.constant 3 : i64
    %515 = llvm.load %5 : !llvm.ptr -> i64
    %516 = arith.cmpi ult, %515, %c3_i64_207 : i64
    scf.if %516 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %515, %c3_i64_207 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %517 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_208 = arith.constant 3 : i64
    %518 = llvm.load %5 : !llvm.ptr -> i64
    %519 = arith.cmpi ult, %518, %c3_i64_208 : i64
    scf.if %519 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %518, %c3_i64_208 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    %c8_i64_209 = arith.constant 8 : i64
    %520 = arith.extui %517 : i32 to i64
    %521 = arith.addi %520, %c8_i64_209 : i64
    %522 = llvm.getelementptr %10[%521] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %523 = llvm.load volatile %522 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_210 = arith.constant 3 : i64
    %524 = llvm.load %5 : !llvm.ptr -> i64
    %525 = arith.cmpi ult, %524, %c3_i64_210 : i64
    scf.if %525 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %524, %c3_i64_210 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    llvm.store %523, %3 : i32, !llvm.ptr
    %c1_i64_211 = arith.constant 1 : i64
    %526 = llvm.load %5 : !llvm.ptr -> i64
    %527 = arith.cmpi ult, %526, %c1_i64_211 : i64
    scf.if %527 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %528 = arith.subi %526, %c1_i64_211 : i64
      llvm.store %528, %5 : i64, !llvm.ptr
    }
    cf.br ^bb13
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_3 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %4, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %9 = llvm.load %5 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c1_i64 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %9, %c1_i64 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %5 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %11, %c3_i64 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %14 = llvm.load %5 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c3_i64_4 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %14, %c3_i64_4 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %16 = arith.extui %13 : i32 to i64
    %17 = arith.addi %16, %c0_i64 : i64
    %18 = llvm.getelementptr %8[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_5 = arith.constant 3 : i64
    %20 = llvm.load %5 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_5 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %20, %c3_i64_5 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_6 = arith.constant 3 : i64
    %23 = llvm.load %5 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_6 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %23, %c3_i64_6 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %22 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_7 = arith.constant 3 : i64
    %29 = llvm.load %5 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_7 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %29, %c3_i64_7 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    llvm.store %28, %3 : i32, !llvm.ptr
    %c3_i64_8 = arith.constant 3 : i64
    %31 = llvm.load %5 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_8 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %31, %c3_i64_8 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %33 = arith.subi %19, %28 : i32
    %c3_i64_9 = arith.constant 3 : i64
    %34 = llvm.load %5 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c3_i64_9 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %34, %c3_i64_9 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_10 = arith.constant 3 : i64
    %37 = llvm.load %5 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c3_i64_10 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %37, %c3_i64_10 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %39 = arith.cmpi uge, %33, %36 : i32
    %40 = arith.extui %39 : i1 to i32
    %c1_i64_11 = arith.constant 1 : i64
    %41 = llvm.load %5 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c1_i64_11 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %41, %c1_i64_11 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c0_i32_12 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %40, %c0_i32_12 : i32
    cf.cond_br %43, ^bb3, ^bb4
  ^bb2(%44: i32):  // pred: ^bb3
    return %44 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c3_i64_13 = arith.constant 3 : i64
    %45 = llvm.load %5 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_13 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %45, %c3_i64_13 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_14 = arith.constant 3 : i64
    %48 = llvm.load %5 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c3_i64_14 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %48, %c3_i64_14 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %50 = arith.extui %47 : i32 to i64
    %51 = arith.addi %50, %c4_i64 : i64
    %52 = llvm.getelementptr %8[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %54 = llvm.load %5 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %c3_i64_15 : i64
    scf.if %55 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %54, %c3_i64_15 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_16 = arith.constant 3 : i64
    %57 = llvm.load %5 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_16 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %57, %c3_i64_16 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %59 = arith.addi %53, %56 : i32
    %c3_i64_17 = arith.constant 3 : i64
    %60 = llvm.load %5 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_17 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %60, %c3_i64_17 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_18 = arith.constant 3 : i64
    %63 = llvm.load %5 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c3_i64_18 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %63, %c3_i64_18 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %66 = llvm.load %5 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c6_i64 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %66, %c6_i64 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %68 = call @f77(%arg0, %59, %62, %65) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_19 = arith.constant 1 : i64
    %69 = llvm.load %5 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c1_i64_19 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %69, %c1_i64_19 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c3_i64_20 = arith.constant 3 : i64
    %71 = llvm.load %5 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c3_i64_20 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %71, %c3_i64_20 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_21 = arith.constant 3 : i64
    %74 = llvm.load %5 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c3_i64_21 : i64
    scf.if %75 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %74, %c3_i64_21 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_22 = arith.constant 3 : i64
    %77 = llvm.load %5 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c3_i64_22 : i64
    scf.if %78 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %77, %c3_i64_22 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c8_i64_23 = arith.constant 8 : i64
    %79 = arith.extui %76 : i32 to i64
    %80 = arith.addi %79, %c8_i64_23 : i64
    %81 = llvm.getelementptr %8[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_24 = arith.constant 3 : i64
    %83 = llvm.load %5 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_24 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %83, %c3_i64_24 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_25 = arith.constant 3 : i64
    %86 = llvm.load %5 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %c3_i64_25 : i64
    scf.if %87 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %86, %c3_i64_25 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %88 = arith.addi %82, %85 : i32
    %c3_i64_26 = arith.constant 3 : i64
    %89 = llvm.load %5 : !llvm.ptr -> i64
    %90 = arith.cmpi ult, %89, %c3_i64_26 : i64
    scf.if %90 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %89, %c3_i64_26 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c8_i64_27 = arith.constant 8 : i64
    %91 = arith.extui %73 : i32 to i64
    %92 = arith.addi %91, %c8_i64_27 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %93 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_28 = arith.constant 1 : i64
    %94 = llvm.load %5 : !llvm.ptr -> i64
    %95 = arith.cmpi ult, %94, %c1_i64_28 : i64
    scf.if %95 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %94, %c1_i64_28 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c0_i32_29 = arith.constant 0 : i32
    %c1_i64_30 = arith.constant 1 : i64
    %96 = llvm.load %5 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c1_i64_30 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %96, %c1_i64_30 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c0_i32_29 : i32)
  ^bb4:  // pred: ^bb1
    %c3_i64_31 = arith.constant 3 : i64
    %98 = llvm.load %5 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_31 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %98, %c3_i64_31 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %100 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_32 = arith.constant 3 : i64
    %101 = llvm.load %5 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c3_i64_32 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %101, %c3_i64_32 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %103 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_33 = arith.constant 3 : i64
    %104 = llvm.load %5 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c3_i64_33 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %104, %c3_i64_33 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64_34 = arith.constant 6 : i64
    %107 = llvm.load %5 : !llvm.ptr -> i64
    %108 = arith.cmpi ult, %107, %c6_i64_34 : i64
    scf.if %108 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %107, %c6_i64_34 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    call @f19(%arg0, %100, %103, %106) : (!llvm.ptr, i32, i32, i32) -> ()
    %c3_i64_35 = arith.constant 3 : i64
    %109 = llvm.load %5 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c3_i64_35 : i64
    scf.if %110 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %109, %c3_i64_35 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %111 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_36 = arith.constant 3 : i64
    %112 = llvm.load %5 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c3_i64_36 : i64
    scf.if %113 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %112, %c3_i64_36 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    %c8_i64_37 = arith.constant 8 : i64
    %114 = arith.extui %111 : i32 to i64
    %115 = arith.addi %114, %c8_i64_37 : i64
    %116 = llvm.getelementptr %8[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %117 = llvm.load volatile %116 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_38 = arith.constant 3 : i64
    %118 = llvm.load %5 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_38 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %118, %c3_i64_38 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    llvm.store %117, %3 : i32, !llvm.ptr
    %c1_i64_39 = arith.constant 1 : i64
    %120 = llvm.load %5 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c1_i64_39 : i64
    scf.if %121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %120, %c1_i64_39 : i64
      llvm.store %122, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %9 = llvm.load %3 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c3_i64 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %9, %c3_i64 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %11 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c1_i64 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %12, %c1_i64 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_2 = arith.constant 3 : i64
    %14 = llvm.load %3 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c3_i64_2 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %14, %c3_i64_2 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %16 = arith.subi %11, %c16_i32 : i32
    %c3_i64_3 = arith.constant 3 : i64
    %17 = llvm.load %3 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c3_i64_3 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %17, %c3_i64_3 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    llvm.store %16, %1 : i32, !llvm.ptr
    %c3_i64_4 = arith.constant 3 : i64
    %19 = llvm.load %3 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_4 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %19, %c3_i64_4 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    llvm.store %16, %5 : i32, !llvm.ptr
    %c3_i64_5 = arith.constant 3 : i64
    %21 = llvm.load %3 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_5 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %21, %c3_i64_5 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_6 = arith.constant 1 : i64
    %24 = llvm.load %3 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c1_i64_6 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %24, %c1_i64_6 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_7 = arith.constant 3 : i64
    %26 = llvm.load %3 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c3_i64_7 : i64
    scf.if %27 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %26, %c3_i64_7 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %28 = arith.addi %23, %c8_i32 : i32
    %c3_i64_8 = arith.constant 3 : i64
    %29 = llvm.load %3 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_8 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %29, %c3_i64_8 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_9 = arith.constant 3 : i64
    %32 = llvm.load %3 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c3_i64_9 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %32, %c3_i64_9 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_10 = arith.constant 3 : i64
    %35 = llvm.load %3 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %c3_i64_10 : i64
    scf.if %36 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %35, %c3_i64_10 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %37 = arith.extui %34 : i32 to i64
    %38 = arith.addi %37, %c0_i64 : i64
    %39 = llvm.getelementptr %8[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_11 = arith.constant 1 : i64
    %41 = llvm.load %3 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c1_i64_11 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %41, %c1_i64_11 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %c1_i32_12 = arith.constant 1 : i32
    %c6_i64 = arith.constant 6 : i64
    %43 = llvm.load %3 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c6_i64 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %43, %c6_i64 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    call @f21(%arg0, %28, %31, %40, %c1_i32_12) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %c1_i64_13 = arith.constant 1 : i64
    %45 = llvm.load %3 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c1_i64_13 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %45, %c1_i64_13 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %c3_i64_14 = arith.constant 3 : i64
    %47 = llvm.load %3 : !llvm.ptr -> i64
    %48 = arith.cmpi ult, %47, %c3_i64_14 : i64
    scf.if %48 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %47, %c3_i64_14 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %50 = llvm.load %3 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c3_i64_15 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %50, %c3_i64_15 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %52 = arith.extui %49 : i32 to i64
    %53 = arith.addi %52, %c8_i64 : i64
    %54 = llvm.getelementptr %8[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_16 = arith.constant 3 : i64
    %56 = llvm.load %3 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c3_i64_16 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %56, %c3_i64_16 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    llvm.store %55, %0 : i32, !llvm.ptr
    %c1_i64_17 = arith.constant 1 : i64
    %58 = llvm.load %3 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c1_i64_17 : i64
    scf.if %59 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %58, %c1_i64_17 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %c3_i64_18 = arith.constant 3 : i64
    %60 = llvm.load %3 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_18 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %60, %c3_i64_18 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %62 = arith.cmpi eq, %55, %c-2147483647_i32 : i32
    %63 = arith.extui %62 : i1 to i32
    %c1_i64_19 = arith.constant 1 : i64
    %64 = llvm.load %3 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c1_i64_19 : i64
    scf.if %65 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %64, %c1_i64_19 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %c0_i32_20 = arith.constant 0 : i32
    %66 = arith.cmpi ne, %63, %c0_i32_20 : i32
    cf.cond_br %66, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %c3_i64_21 = arith.constant 3 : i64
    %67 = llvm.load %3 : !llvm.ptr -> i64
    %68 = arith.cmpi ult, %67, %c3_i64_21 : i64
    scf.if %68 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %67, %c3_i64_21 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_22 = arith.constant 1 : i64
    %70 = llvm.load %3 : !llvm.ptr -> i64
    %71 = arith.cmpi ult, %70, %c1_i64_22 : i64
    scf.if %71 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %70, %c1_i64_22 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %c16_i32_23 = arith.constant 16 : i32
    %c3_i64_24 = arith.constant 3 : i64
    %72 = llvm.load %3 : !llvm.ptr -> i64
    %73 = arith.cmpi ult, %72, %c3_i64_24 : i64
    scf.if %73 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %72, %c3_i64_24 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %74 = arith.addi %69, %c16_i32_23 : i32
    %c3_i64_25 = arith.constant 3 : i64
    %75 = llvm.load %3 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c3_i64_25 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %75, %c3_i64_25 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    llvm.store %74, %5 : i32, !llvm.ptr
    %c1_i64_26 = arith.constant 1 : i64
    %77 = llvm.load %3 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c1_i64_26 : i64
    scf.if %78 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %77, %c1_i64_26 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c3_i64_27 = arith.constant 3 : i64
    %79 = llvm.load %3 : !llvm.ptr -> i64
    %80 = arith.cmpi ult, %79, %c3_i64_27 : i64
    scf.if %80 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %79, %c3_i64_27 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_28 = arith.constant 3 : i64
    %82 = llvm.load %3 : !llvm.ptr -> i64
    %83 = arith.cmpi ult, %82, %c3_i64_28 : i64
    scf.if %83 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %82, %c3_i64_28 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %84 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_29 = arith.constant 3 : i64
    %85 = llvm.load %3 : !llvm.ptr -> i64
    %86 = arith.cmpi ult, %85, %c3_i64_29 : i64
    scf.if %86 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %85, %c3_i64_29 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %87 = arith.extui %84 : i32 to i64
    %88 = arith.addi %87, %c12_i64 : i64
    %89 = llvm.getelementptr %8[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %90 = llvm.load volatile %89 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c6_i64_30 = arith.constant 6 : i64
    %91 = llvm.load %3 : !llvm.ptr -> i64
    %92 = arith.cmpi ult, %91, %c6_i64_30 : i64
    scf.if %92 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %91, %c6_i64_30 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    call @f55(%arg0, %81, %90) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_31 = arith.constant 0 : i64
    %93 = llvm.load %3 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c0_i64_31 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %95 = arith.subi %93, %c0_i64_31 : i64
      llvm.store %95, %3 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f19(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_3 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %4, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %5 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %11, %c3_i64 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %13 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %14 = llvm.load %5 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c1_i64 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %14, %c1_i64 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_4 = arith.constant 3 : i64
    %16 = llvm.load %5 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64_4 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %16, %c3_i64_4 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %18 = arith.subi %13, %c16_i32 : i32
    %c3_i64_5 = arith.constant 3 : i64
    %19 = llvm.load %5 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_5 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %19, %c3_i64_5 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %3 : i32, !llvm.ptr
    %c3_i64_6 = arith.constant 3 : i64
    %21 = llvm.load %5 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_6 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %21, %c3_i64_6 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %7 : i32, !llvm.ptr
    %c3_i64_7 = arith.constant 3 : i64
    %23 = llvm.load %5 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_7 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %23, %c3_i64_7 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_8 = arith.constant 1 : i64
    %26 = llvm.load %5 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c1_i64_8 : i64
    scf.if %27 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %26, %c1_i64_8 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_9 = arith.constant 3 : i64
    %28 = llvm.load %5 : !llvm.ptr -> i64
    %29 = arith.cmpi ult, %28, %c3_i64_9 : i64
    scf.if %29 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %28, %c3_i64_9 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %30 = arith.addi %25, %c8_i32 : i32
    %c3_i64_10 = arith.constant 3 : i64
    %31 = llvm.load %5 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_10 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %31, %c3_i64_10 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %34 = llvm.load %5 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c3_i64_11 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %34, %c3_i64_11 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_12 = arith.constant 3 : i64
    %37 = llvm.load %5 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c3_i64_12 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %37, %c3_i64_12 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %40 = llvm.load %5 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c6_i64 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %40, %c6_i64 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    call @f21(%arg0, %30, %33, %36, %39) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %c1_i64_13 = arith.constant 1 : i64
    %42 = llvm.load %5 : !llvm.ptr -> i64
    %43 = arith.cmpi ult, %42, %c1_i64_13 : i64
    scf.if %43 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %42, %c1_i64_13 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %c3_i64_14 = arith.constant 3 : i64
    %44 = llvm.load %5 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c3_i64_14 : i64
    scf.if %45 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %44, %c3_i64_14 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %47 = llvm.load %5 : !llvm.ptr -> i64
    %48 = arith.cmpi ult, %47, %c3_i64_15 : i64
    scf.if %48 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %47, %c3_i64_15 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %49 = arith.extui %46 : i32 to i64
    %50 = arith.addi %49, %c8_i64 : i64
    %51 = llvm.getelementptr %10[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_16 = arith.constant 3 : i64
    %53 = llvm.load %5 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c3_i64_16 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %53, %c3_i64_16 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    llvm.store %52, %2 : i32, !llvm.ptr
    %c1_i64_17 = arith.constant 1 : i64
    %55 = llvm.load %5 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c1_i64_17 : i64
    scf.if %56 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %55, %c1_i64_17 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %c3_i64_18 = arith.constant 3 : i64
    %57 = llvm.load %5 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_18 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %57, %c3_i64_18 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %59 = arith.cmpi eq, %52, %c-2147483647_i32 : i32
    %60 = arith.extui %59 : i1 to i32
    %c1_i64_19 = arith.constant 1 : i64
    %61 = llvm.load %5 : !llvm.ptr -> i64
    %62 = arith.cmpi ult, %61, %c1_i64_19 : i64
    scf.if %62 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %61, %c1_i64_19 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %c0_i32_20 = arith.constant 0 : i32
    %63 = arith.cmpi ne, %60, %c0_i32_20 : i32
    cf.cond_br %63, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %c3_i64_21 = arith.constant 3 : i64
    %64 = llvm.load %5 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c3_i64_21 : i64
    scf.if %65 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %64, %c3_i64_21 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %66 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_22 = arith.constant 1 : i64
    %67 = llvm.load %5 : !llvm.ptr -> i64
    %68 = arith.cmpi ult, %67, %c1_i64_22 : i64
    scf.if %68 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %67, %c1_i64_22 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %c16_i32_23 = arith.constant 16 : i32
    %c3_i64_24 = arith.constant 3 : i64
    %69 = llvm.load %5 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c3_i64_24 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %69, %c3_i64_24 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %71 = arith.addi %66, %c16_i32_23 : i32
    %c3_i64_25 = arith.constant 3 : i64
    %72 = llvm.load %5 : !llvm.ptr -> i64
    %73 = arith.cmpi ult, %72, %c3_i64_25 : i64
    scf.if %73 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %72, %c3_i64_25 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    llvm.store %71, %7 : i32, !llvm.ptr
    %c1_i64_26 = arith.constant 1 : i64
    %74 = llvm.load %5 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c1_i64_26 : i64
    scf.if %75 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %74, %c1_i64_26 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c3_i64_27 = arith.constant 3 : i64
    %76 = llvm.load %5 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c3_i64_27 : i64
    scf.if %77 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %76, %c3_i64_27 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_28 = arith.constant 3 : i64
    %79 = llvm.load %5 : !llvm.ptr -> i64
    %80 = arith.cmpi ult, %79, %c3_i64_28 : i64
    scf.if %80 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %79, %c3_i64_28 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %81 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_29 = arith.constant 3 : i64
    %82 = llvm.load %5 : !llvm.ptr -> i64
    %83 = arith.cmpi ult, %82, %c3_i64_29 : i64
    scf.if %83 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %82, %c3_i64_29 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %84 = arith.extui %81 : i32 to i64
    %85 = arith.addi %84, %c12_i64 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c6_i64_30 = arith.constant 6 : i64
    %88 = llvm.load %5 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c6_i64_30 : i64
    scf.if %89 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %88, %c6_i64_30 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    call @f55(%arg0, %78, %87) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64 = arith.constant 0 : i64
    %90 = llvm.load %5 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c0_i64 : i64
    scf.if %91 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %92 = arith.subi %90, %c0_i64 : i64
      llvm.store %92, %5 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f20(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_5 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %11 = llvm.load %7 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c1_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %11, %c1_i64 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c1_i64_6 = arith.constant 1 : i64
    %13 = llvm.load %7 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c1_i64_6 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %13, %c1_i64_6 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c1_i64_7 = arith.constant 1 : i64
    %15 = llvm.load %7 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c1_i64_7 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %15, %c1_i64_7 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c1_i64_8 = arith.constant 1 : i64
    %17 = llvm.load %7 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c1_i64_8 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %17, %c1_i64_8 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c1_i64_9 = arith.constant 1 : i64
    %19 = llvm.load %7 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c1_i64_9 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %19, %c1_i64_9 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c1_i64_10 = arith.constant 1 : i64
    %21 = llvm.load %7 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c1_i64_10 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %21, %c1_i64_10 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %23 = llvm.load %7 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %23, %c3_i64 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %26 = llvm.load %7 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c3_i64_11 : i64
    scf.if %27 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %26, %c3_i64_11 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_12 = arith.constant 0 : i32
    %28 = arith.cmpi eq, %25, %c0_i32_12 : i32
    %29 = arith.extui %28 : i1 to i32
    %c1_i64_13 = arith.constant 1 : i64
    %30 = llvm.load %7 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c1_i64_13 : i64
    scf.if %31 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %30, %c1_i64_13 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_14 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %29, %c0_i32_14 : i32
    cf.cond_br %32, ^bb8, ^bb9
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb19
    %c3_i64_15 = arith.constant 3 : i64
    %33 = llvm.load %7 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c3_i64_15 : i64
    scf.if %34 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %33, %c3_i64_15 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_16 = arith.constant 3 : i64
    %36 = llvm.load %7 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_16 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %36, %c3_i64_16 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_17 = arith.constant 3 : i64
    %39 = llvm.load %7 : !llvm.ptr -> i64
    %40 = arith.cmpi ult, %39, %c3_i64_17 : i64
    scf.if %40 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %39, %c3_i64_17 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %41 = arith.extui %35 : i32 to i64
    %42 = arith.addi %41, %c0_i64 : i64
    %43 = llvm.getelementptr %10[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %38, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_18 = arith.constant 1 : i64
    %44 = llvm.load %7 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c1_i64_18 : i64
    scf.if %45 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %44, %c1_i64_18 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb7, ^bb8, ^bb18
    %c1_i64_19 = arith.constant 1 : i64
    %46 = llvm.load %7 : !llvm.ptr -> i64
    %47 = arith.cmpi ult, %46, %c1_i64_19 : i64
    scf.if %47 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %46, %c1_i64_19 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c1_i32_20 = arith.constant 1 : i32
    %c3_i64_21 = arith.constant 3 : i64
    %48 = llvm.load %7 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c3_i64_21 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %48, %c3_i64_21 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_20, %2 : i32, !llvm.ptr
    %c1_i64_22 = arith.constant 1 : i64
    %50 = llvm.load %7 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c1_i64_22 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %50, %c1_i64_22 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb6, ^bb11, ^bb14
    %c1_i64_23 = arith.constant 1 : i64
    %52 = llvm.load %7 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c1_i64_23 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %52, %c1_i64_23 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c3_i64_24 = arith.constant 3 : i64
    %54 = llvm.load %7 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %c3_i64_24 : i64
    scf.if %55 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %54, %c3_i64_24 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_25 = arith.constant 3 : i64
    %57 = llvm.load %7 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_25 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %57, %c3_i64_25 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_26 = arith.constant 0 : i32
    %59 = arith.cmpi eq, %56, %c0_i32_26 : i32
    %60 = arith.extui %59 : i1 to i32
    %c1_i64_27 = arith.constant 1 : i64
    %61 = llvm.load %7 : !llvm.ptr -> i64
    %62 = arith.cmpi ult, %61, %c1_i64_27 : i64
    scf.if %62 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %61, %c1_i64_27 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_28 = arith.constant 0 : i32
    %63 = arith.cmpi ne, %60, %c0_i32_28 : i32
    cf.cond_br %63, ^bb18, ^bb19
  ^bb6:  // 2 preds: ^bb12, ^bb15
    %c3_i64_29 = arith.constant 3 : i64
    %64 = llvm.load %7 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c3_i64_29 : i64
    scf.if %65 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %64, %c3_i64_29 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %66 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_30 = arith.constant 3 : i64
    %67 = llvm.load %7 : !llvm.ptr -> i64
    %68 = arith.cmpi ult, %67, %c3_i64_30 : i64
    scf.if %68 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %67, %c3_i64_30 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    llvm.store %66, %3 : i32, !llvm.ptr
    %c1_i64_31 = arith.constant 1 : i64
    %69 = llvm.load %7 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c1_i64_31 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %69, %c1_i64_31 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb7:  // pred: ^bb9
    %c3_i64_32 = arith.constant 3 : i64
    %71 = llvm.load %7 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c3_i64_32 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %71, %c3_i64_32 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_33 = arith.constant 1 : i64
    %74 = llvm.load %7 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c1_i64_33 : i64
    scf.if %75 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %74, %c1_i64_33 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_34 = arith.constant 0 : i32
    %c3_i64_35 = arith.constant 3 : i64
    %76 = llvm.load %7 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c3_i64_35 : i64
    scf.if %77 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %76, %c3_i64_35 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %78 = arith.extui %73 : i32 to i64
    %79 = arith.addi %78, %c4_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_34, %80 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_36 = arith.constant 1 : i64
    %81 = llvm.load %7 : !llvm.ptr -> i64
    %82 = arith.cmpi ult, %81, %c1_i64_36 : i64
    scf.if %82 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %81, %c1_i64_36 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb8:  // pred: ^bb1
    %c3_i64_37 = arith.constant 3 : i64
    %83 = llvm.load %7 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_37 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %83, %c3_i64_37 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %85 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_38 = arith.constant 1 : i64
    %86 = llvm.load %7 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %c1_i64_38 : i64
    scf.if %87 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %86, %c1_i64_38 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_39 = arith.constant 0 : i32
    %c3_i64_40 = arith.constant 3 : i64
    %88 = llvm.load %7 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c3_i64_40 : i64
    scf.if %89 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %88, %c3_i64_40 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c4_i64_41 = arith.constant 4 : i64
    %90 = arith.extui %85 : i32 to i64
    %91 = arith.addi %90, %c4_i64_41 : i64
    %92 = llvm.getelementptr %10[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_39, %92 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_42 = arith.constant 1 : i64
    %93 = llvm.load %7 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c1_i64_42 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %93, %c1_i64_42 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb9:  // pred: ^bb1
    %c3_i64_43 = arith.constant 3 : i64
    %95 = llvm.load %7 : !llvm.ptr -> i64
    %96 = arith.cmpi ult, %95, %c3_i64_43 : i64
    scf.if %96 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %95, %c3_i64_43 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_44 = arith.constant 1 : i64
    %98 = llvm.load %7 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c1_i64_44 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %98, %c1_i64_44 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_45 = arith.constant 3 : i64
    %100 = llvm.load %7 : !llvm.ptr -> i64
    %101 = arith.cmpi ult, %100, %c3_i64_45 : i64
    scf.if %101 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %100, %c3_i64_45 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %102 = arith.cmpi sle, %97, %c-1_i32 : i32
    %103 = arith.extui %102 : i1 to i32
    %c1_i64_46 = arith.constant 1 : i64
    %104 = llvm.load %7 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c1_i64_46 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %104, %c1_i64_46 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_47 = arith.constant 0 : i32
    %106 = arith.cmpi ne, %103, %c0_i32_47 : i32
    cf.cond_br %106, ^bb7, ^bb10
  ^bb10:  // pred: ^bb9
    %c1_i64_48 = arith.constant 1 : i64
    %107 = llvm.load %7 : !llvm.ptr -> i64
    %108 = arith.cmpi ult, %107, %c1_i64_48 : i64
    scf.if %108 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %107, %c1_i64_48 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c1_i64_49 = arith.constant 1 : i64
    %109 = llvm.load %7 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c1_i64_49 : i64
    scf.if %110 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %109, %c1_i64_49 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c3_i64_50 = arith.constant 3 : i64
    %111 = llvm.load %7 : !llvm.ptr -> i64
    %112 = arith.cmpi ult, %111, %c3_i64_50 : i64
    scf.if %112 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %111, %c3_i64_50 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %113 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_51 = arith.constant 3 : i64
    %114 = llvm.load %7 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %c3_i64_51 : i64
    scf.if %115 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %114, %c3_i64_51 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c4_i64_52 = arith.constant 4 : i64
    %116 = arith.extui %113 : i32 to i64
    %117 = arith.addi %116, %c4_i64_52 : i64
    %118 = llvm.getelementptr %10[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_53 = arith.constant 3 : i64
    %120 = llvm.load %7 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c3_i64_53 : i64
    scf.if %121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %120, %c3_i64_53 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_54 = arith.constant 0 : i32
    %122 = arith.cmpi eq, %119, %c0_i32_54 : i32
    %123 = arith.extui %122 : i1 to i32
    %c1_i64_55 = arith.constant 1 : i64
    %124 = llvm.load %7 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c1_i64_55 : i64
    scf.if %125 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %124, %c1_i64_55 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_56 = arith.constant 0 : i32
    %126 = arith.cmpi ne, %123, %c0_i32_56 : i32
    cf.cond_br %126, ^bb12, ^bb13
  ^bb11:  // 2 preds: ^bb16, ^bb17
    %c3_i64_57 = arith.constant 3 : i64
    %127 = llvm.load %7 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c3_i64_57 : i64
    scf.if %128 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %127, %c3_i64_57 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %129 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_58 = arith.constant 3 : i64
    %130 = llvm.load %7 : !llvm.ptr -> i64
    %131 = arith.cmpi ult, %130, %c3_i64_58 : i64
    scf.if %131 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %130, %c3_i64_58 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %132 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %133 = llvm.load %7 : !llvm.ptr -> i64
    %134 = arith.cmpi ult, %133, %c6_i64 : i64
    scf.if %134 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %133, %c6_i64 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %135 = call @f9(%arg0, %129, %132) : (!llvm.ptr, i32, i32) -> i32
    %c3_i64_59 = arith.constant 3 : i64
    %136 = llvm.load %7 : !llvm.ptr -> i64
    %137 = arith.cmpi ult, %136, %c3_i64_59 : i64
    scf.if %137 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %136, %c3_i64_59 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    llvm.store %135, %3 : i32, !llvm.ptr
    %c1_i64_60 = arith.constant 1 : i64
    %138 = llvm.load %7 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %c1_i64_60 : i64
    scf.if %139 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %138, %c1_i64_60 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb12:  // pred: ^bb10
    %c3_i64_61 = arith.constant 3 : i64
    %140 = llvm.load %7 : !llvm.ptr -> i64
    %141 = arith.cmpi ult, %140, %c3_i64_61 : i64
    scf.if %141 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %140, %c3_i64_61 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %142 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_62 = arith.constant 3 : i64
    %143 = llvm.load %7 : !llvm.ptr -> i64
    %144 = arith.cmpi ult, %143, %c3_i64_62 : i64
    scf.if %144 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %143, %c3_i64_62 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_63 = arith.constant 0 : i32
    %145 = arith.cmpi eq, %142, %c0_i32_63 : i32
    %146 = arith.extui %145 : i1 to i32
    %c1_i64_64 = arith.constant 1 : i64
    %147 = llvm.load %7 : !llvm.ptr -> i64
    %148 = arith.cmpi ult, %147, %c1_i64_64 : i64
    scf.if %148 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %147, %c1_i64_64 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_65 = arith.constant 0 : i32
    %149 = arith.cmpi ne, %146, %c0_i32_65 : i32
    cf.cond_br %149, ^bb6, ^bb17
  ^bb13:  // pred: ^bb10
    %c1_i64_66 = arith.constant 1 : i64
    %150 = llvm.load %7 : !llvm.ptr -> i64
    %151 = arith.cmpi ult, %150, %c1_i64_66 : i64
    scf.if %151 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %150, %c1_i64_66 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c3_i64_67 = arith.constant 3 : i64
    %152 = llvm.load %7 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c3_i64_67 : i64
    scf.if %153 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %152, %c3_i64_67 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %154 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_68 = arith.constant 3 : i64
    %155 = llvm.load %7 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %c3_i64_68 : i64
    scf.if %156 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %155, %c3_i64_68 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %157 = arith.extui %154 : i32 to i64
    %158 = arith.addi %157, %c8_i64 : i64
    %159 = llvm.getelementptr %10[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_69 = arith.constant 3 : i64
    %161 = llvm.load %7 : !llvm.ptr -> i64
    %162 = arith.cmpi ult, %161, %c3_i64_69 : i64
    scf.if %162 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %161, %c3_i64_69 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    llvm.store %160, %5 : i32, !llvm.ptr
    %c1_i64_70 = arith.constant 1 : i64
    %163 = llvm.load %7 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c1_i64_70 : i64
    scf.if %164 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %163, %c1_i64_70 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_71 = arith.constant 0 : i32
    %165 = arith.cmpi ne, %160, %c0_i32_71 : i32
    cf.cond_br %165, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %c3_i64_72 = arith.constant 3 : i64
    %166 = llvm.load %7 : !llvm.ptr -> i64
    %167 = arith.cmpi ult, %166, %c3_i64_72 : i64
    scf.if %167 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %166, %c3_i64_72 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %168 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_73 = arith.constant 3 : i64
    %169 = llvm.load %7 : !llvm.ptr -> i64
    %170 = arith.cmpi ult, %169, %c3_i64_73 : i64
    scf.if %170 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %169, %c3_i64_73 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i64_74 = arith.constant 0 : i64
    %171 = arith.extui %168 : i32 to i64
    %172 = arith.addi %171, %c0_i64_74 : i64
    %173 = llvm.getelementptr %10[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %174 = llvm.load volatile %173 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_75 = arith.constant 3 : i64
    %175 = llvm.load %7 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c3_i64_75 : i64
    scf.if %176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %175, %c3_i64_75 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %177 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_76 = arith.constant 3 : i64
    %178 = llvm.load %7 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c3_i64_76 : i64
    scf.if %179 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %178, %c3_i64_76 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %180 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_77 = arith.constant 3 : i64
    %181 = llvm.load %7 : !llvm.ptr -> i64
    %182 = arith.cmpi ult, %181, %c3_i64_77 : i64
    scf.if %182 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %181, %c3_i64_77 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %183 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64_78 = arith.constant 6 : i64
    %184 = llvm.load %7 : !llvm.ptr -> i64
    %185 = arith.cmpi ult, %184, %c6_i64_78 : i64
    scf.if %185 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %184, %c6_i64_78 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %186 = call @f11(%arg0, %174, %177, %180, %183) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    %c3_i64_79 = arith.constant 3 : i64
    %187 = llvm.load %7 : !llvm.ptr -> i64
    %188 = arith.cmpi ult, %187, %c3_i64_79 : i64
    scf.if %188 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %187, %c3_i64_79 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    llvm.store %186, %3 : i32, !llvm.ptr
    %c1_i64_80 = arith.constant 1 : i64
    %189 = llvm.load %7 : !llvm.ptr -> i64
    %190 = arith.cmpi ult, %189, %c1_i64_80 : i64
    scf.if %190 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %189, %c1_i64_80 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb15:  // pred: ^bb13
    %c3_i64_81 = arith.constant 3 : i64
    %191 = llvm.load %7 : !llvm.ptr -> i64
    %192 = arith.cmpi ult, %191, %c3_i64_81 : i64
    scf.if %192 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %191, %c3_i64_81 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %193 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_82 = arith.constant 3 : i64
    %194 = llvm.load %7 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c3_i64_82 : i64
    scf.if %195 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %194, %c3_i64_82 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_83 = arith.constant 0 : i32
    %196 = arith.cmpi eq, %193, %c0_i32_83 : i32
    %197 = arith.extui %196 : i1 to i32
    %c1_i64_84 = arith.constant 1 : i64
    %198 = llvm.load %7 : !llvm.ptr -> i64
    %199 = arith.cmpi ult, %198, %c1_i64_84 : i64
    scf.if %199 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %198, %c1_i64_84 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_85 = arith.constant 0 : i32
    %200 = arith.cmpi ne, %197, %c0_i32_85 : i32
    cf.cond_br %200, ^bb6, ^bb16
  ^bb16:  // pred: ^bb15
    %c1_i64_86 = arith.constant 1 : i64
    %201 = llvm.load %7 : !llvm.ptr -> i64
    %202 = arith.cmpi ult, %201, %c1_i64_86 : i64
    scf.if %202 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %201, %c1_i64_86 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_87 = arith.constant 0 : i32
    %c3_i64_88 = arith.constant 3 : i64
    %203 = llvm.load %7 : !llvm.ptr -> i64
    %204 = arith.cmpi ult, %203, %c3_i64_88 : i64
    scf.if %204 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %203, %c3_i64_88 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c1049497_i64 = arith.constant 1049497 : i64
    %205 = arith.extui %c0_i32_87 : i32 to i64
    %206 = arith.addi %205, %c1049497_i64 : i64
    %207 = llvm.getelementptr %10[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %208 = llvm.load volatile %207 {alignment = 1 : i64} : !llvm.ptr -> i8
    %209 = arith.extui %208 : i8 to i32
    %c1_i64_89 = arith.constant 1 : i64
    %210 = llvm.load %7 : !llvm.ptr -> i64
    %211 = arith.cmpi ult, %210, %c1_i64_89 : i64
    scf.if %211 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %210, %c1_i64_89 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c1_i64_90 = arith.constant 1 : i64
    %212 = llvm.load %7 : !llvm.ptr -> i64
    %213 = arith.cmpi ult, %212, %c1_i64_90 : i64
    scf.if %213 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %212, %c1_i64_90 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    cf.br ^bb11
  ^bb17:  // pred: ^bb12
    %c1_i64_91 = arith.constant 1 : i64
    %214 = llvm.load %7 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c1_i64_91 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %214, %c1_i64_91 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_92 = arith.constant 0 : i32
    %c3_i64_93 = arith.constant 3 : i64
    %216 = llvm.load %7 : !llvm.ptr -> i64
    %217 = arith.cmpi ult, %216, %c3_i64_93 : i64
    scf.if %217 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %216, %c3_i64_93 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c1049497_i64_94 = arith.constant 1049497 : i64
    %218 = arith.extui %c0_i32_92 : i32 to i64
    %219 = arith.addi %218, %c1049497_i64_94 : i64
    %220 = llvm.getelementptr %10[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %221 = llvm.load volatile %220 {alignment = 1 : i64} : !llvm.ptr -> i8
    %222 = arith.extui %221 : i8 to i32
    %c1_i64_95 = arith.constant 1 : i64
    %223 = llvm.load %7 : !llvm.ptr -> i64
    %224 = arith.cmpi ult, %223, %c1_i64_95 : i64
    scf.if %224 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %223, %c1_i64_95 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c1_i64_96 = arith.constant 1 : i64
    %225 = llvm.load %7 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c1_i64_96 : i64
    scf.if %226 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %225, %c1_i64_96 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    cf.br ^bb11
  ^bb18:  // pred: ^bb5
    %c3_i64_97 = arith.constant 3 : i64
    %227 = llvm.load %7 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %c3_i64_97 : i64
    scf.if %228 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %227, %c3_i64_97 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %229 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_98 = arith.constant 3 : i64
    %230 = llvm.load %7 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c3_i64_98 : i64
    scf.if %231 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %230, %c3_i64_98 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %232 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_99 = arith.constant 3 : i64
    %233 = llvm.load %7 : !llvm.ptr -> i64
    %234 = arith.cmpi ult, %233, %c3_i64_99 : i64
    scf.if %234 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %233, %c3_i64_99 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c8_i64_100 = arith.constant 8 : i64
    %235 = arith.extui %229 : i32 to i64
    %236 = arith.addi %235, %c8_i64_100 : i64
    %237 = llvm.getelementptr %10[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %232, %237 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_101 = arith.constant 3 : i64
    %238 = llvm.load %7 : !llvm.ptr -> i64
    %239 = arith.cmpi ult, %238, %c3_i64_101 : i64
    scf.if %239 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %238, %c3_i64_101 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %240 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_102 = arith.constant 3 : i64
    %241 = llvm.load %7 : !llvm.ptr -> i64
    %242 = arith.cmpi ult, %241, %c3_i64_102 : i64
    scf.if %242 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %241, %c3_i64_102 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %243 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_103 = arith.constant 3 : i64
    %244 = llvm.load %7 : !llvm.ptr -> i64
    %245 = arith.cmpi ult, %244, %c3_i64_103 : i64
    scf.if %245 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %244, %c3_i64_103 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c4_i64_104 = arith.constant 4 : i64
    %246 = arith.extui %240 : i32 to i64
    %247 = arith.addi %246, %c4_i64_104 : i64
    %248 = llvm.getelementptr %10[%247] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %243, %248 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_105 = arith.constant 1 : i64
    %249 = llvm.load %7 : !llvm.ptr -> i64
    %250 = arith.cmpi ult, %249, %c1_i64_105 : i64
    scf.if %250 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %249, %c1_i64_105 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb19:  // pred: ^bb5
    %c3_i64_106 = arith.constant 3 : i64
    %251 = llvm.load %7 : !llvm.ptr -> i64
    %252 = arith.cmpi ult, %251, %c3_i64_106 : i64
    scf.if %252 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %251, %c3_i64_106 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %253 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_107 = arith.constant 3 : i64
    %254 = llvm.load %7 : !llvm.ptr -> i64
    %255 = arith.cmpi ult, %254, %c3_i64_107 : i64
    scf.if %255 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %254, %c3_i64_107 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %256 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_108 = arith.constant 3 : i64
    %257 = llvm.load %7 : !llvm.ptr -> i64
    %258 = arith.cmpi ult, %257, %c3_i64_108 : i64
    scf.if %258 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %257, %c3_i64_108 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c8_i64_109 = arith.constant 8 : i64
    %259 = arith.extui %253 : i32 to i64
    %260 = arith.addi %259, %c8_i64_109 : i64
    %261 = llvm.getelementptr %10[%260] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %256, %261 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_110 = arith.constant 3 : i64
    %262 = llvm.load %7 : !llvm.ptr -> i64
    %263 = arith.cmpi ult, %262, %c3_i64_110 : i64
    scf.if %263 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %262, %c3_i64_110 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %264 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_111 = arith.constant 3 : i64
    %265 = llvm.load %7 : !llvm.ptr -> i64
    %266 = arith.cmpi ult, %265, %c3_i64_111 : i64
    scf.if %266 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %265, %c3_i64_111 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %267 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_112 = arith.constant 3 : i64
    %268 = llvm.load %7 : !llvm.ptr -> i64
    %269 = arith.cmpi ult, %268, %c3_i64_112 : i64
    scf.if %269 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %268, %c3_i64_112 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c4_i64_113 = arith.constant 4 : i64
    %270 = arith.extui %264 : i32 to i64
    %271 = arith.addi %270, %c4_i64_113 : i64
    %272 = llvm.getelementptr %10[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %267, %272 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_114 = arith.constant 1 : i64
    %273 = llvm.load %7 : !llvm.ptr -> i64
    %274 = arith.cmpi ult, %273, %c1_i64_114 : i64
    scf.if %274 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %273, %c1_i64_114 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    %c0_i32_115 = arith.constant 0 : i32
    %c3_i64_116 = arith.constant 3 : i64
    %275 = llvm.load %7 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_116 : i64
    scf.if %276 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %275, %c3_i64_116 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_115, %2 : i32, !llvm.ptr
    %c1_i64_117 = arith.constant 1 : i64
    %277 = llvm.load %7 : !llvm.ptr -> i64
    %278 = arith.cmpi ult, %277, %c1_i64_117 : i64
    scf.if %278 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %279 = arith.subi %277, %c1_i64_117 : i64
      llvm.store %279, %7 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f21(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_6 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %7, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %14 = llvm.load %8 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c3_i64 : i64
    scf.if %15 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %14, %c3_i64 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %16 = llvm.load %10 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %17 = llvm.load %8 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c1_i64 : i64
    scf.if %18 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %17, %c1_i64 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_7 = arith.constant 3 : i64
    %19 = llvm.load %8 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_7 : i64
    scf.if %20 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %19, %c3_i64_7 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %21 = arith.subi %16, %c32_i32 : i32
    %c3_i64_8 = arith.constant 3 : i64
    %22 = llvm.load %8 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c3_i64_8 : i64
    scf.if %23 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %22, %c3_i64_8 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %21, %4 : i32, !llvm.ptr
    %c3_i64_9 = arith.constant 3 : i64
    %24 = llvm.load %8 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c3_i64_9 : i64
    scf.if %25 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %24, %c3_i64_9 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %21, %10 : i32, !llvm.ptr
    %c1_i64_10 = arith.constant 1 : i64
    %26 = llvm.load %8 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c1_i64_10 : i64
    scf.if %27 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %26, %c1_i64_10 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c1_i64_11 = arith.constant 1 : i64
    %28 = llvm.load %8 : !llvm.ptr -> i64
    %29 = arith.cmpi ult, %28, %c1_i64_11 : i64
    scf.if %29 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %28, %c1_i64_11 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c3_i64_12 = arith.constant 3 : i64
    %30 = llvm.load %8 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c3_i64_12 : i64
    scf.if %31 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %30, %c3_i64_12 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_13 = arith.constant 3 : i64
    %33 = llvm.load %8 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c3_i64_13 : i64
    scf.if %34 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %33, %c3_i64_13 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_14 = arith.constant 3 : i64
    %36 = llvm.load %8 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_14 : i64
    scf.if %37 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %36, %c3_i64_14 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %38 = arith.addi %32, %35 : i32
    %c3_i64_15 = arith.constant 3 : i64
    %39 = llvm.load %8 : !llvm.ptr -> i64
    %40 = arith.cmpi ult, %39, %c3_i64_15 : i64
    scf.if %40 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %39, %c3_i64_15 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %38, %3 : i32, !llvm.ptr
    %c3_i64_16 = arith.constant 3 : i64
    %41 = llvm.load %8 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c3_i64_16 : i64
    scf.if %42 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %41, %c3_i64_16 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_17 = arith.constant 3 : i64
    %44 = llvm.load %8 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c3_i64_17 : i64
    scf.if %45 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %44, %c3_i64_17 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %46 = arith.cmpi uge, %38, %43 : i32
    %47 = arith.extui %46 : i1 to i32
    %c1_i64_18 = arith.constant 1 : i64
    %48 = llvm.load %8 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c1_i64_18 : i64
    scf.if %49 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %48, %c1_i64_18 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c0_i32_19 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %47, %c0_i32_19 : i32
    cf.cond_br %50, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb5, ^bb9, ^bb10
    %c3_i64_20 = arith.constant 3 : i64
    %51 = llvm.load %8 : !llvm.ptr -> i64
    %52 = arith.cmpi ult, %51, %c3_i64_20 : i64
    scf.if %52 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %51, %c3_i64_20 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_21 = arith.constant 3 : i64
    %54 = llvm.load %8 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %c3_i64_21 : i64
    scf.if %55 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %54, %c3_i64_21 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_22 = arith.constant 3 : i64
    %57 = llvm.load %8 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_22 : i64
    scf.if %58 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %57, %c3_i64_22 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %59 = arith.extui %53 : i32 to i64
    %60 = arith.addi %59, %c4_i64 : i64
    %61 = llvm.getelementptr %13[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %56, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_23 = arith.constant 3 : i64
    %62 = llvm.load %8 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c3_i64_23 : i64
    scf.if %63 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %62, %c3_i64_23 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %64 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_24 = arith.constant 3 : i64
    %65 = llvm.load %8 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c3_i64_24 : i64
    scf.if %66 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %65, %c3_i64_24 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_25 = arith.constant 3 : i64
    %68 = llvm.load %8 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c3_i64_25 : i64
    scf.if %69 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %68, %c3_i64_25 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %70 = arith.extui %64 : i32 to i64
    %71 = arith.addi %70, %c0_i64 : i64
    %72 = llvm.getelementptr %13[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %67, %72 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_26 = arith.constant 3 : i64
    %73 = llvm.load %8 : !llvm.ptr -> i64
    %74 = arith.cmpi ult, %73, %c3_i64_26 : i64
    scf.if %74 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %73, %c3_i64_26 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %75 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_27 = arith.constant 1 : i64
    %76 = llvm.load %8 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c1_i64_27 : i64
    scf.if %77 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %76, %c1_i64_27 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c32_i32_28 = arith.constant 32 : i32
    %c3_i64_29 = arith.constant 3 : i64
    %78 = llvm.load %8 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c3_i64_29 : i64
    scf.if %79 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %78, %c3_i64_29 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %80 = arith.addi %75, %c32_i32_28 : i32
    %c3_i64_30 = arith.constant 3 : i64
    %81 = llvm.load %8 : !llvm.ptr -> i64
    %82 = arith.cmpi ult, %81, %c3_i64_30 : i64
    scf.if %82 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %81, %c3_i64_30 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %80, %10 : i32, !llvm.ptr
    %c1_i64_31 = arith.constant 1 : i64
    %83 = llvm.load %8 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c1_i64_31 : i64
    scf.if %84 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %83, %c1_i64_31 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i64_32 = arith.constant 1 : i64
    %85 = llvm.load %8 : !llvm.ptr -> i64
    %86 = arith.cmpi ult, %85, %c1_i64_32 : i64
    scf.if %86 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %85, %c1_i64_32 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c1_i32_33 = arith.constant 1 : i32
    %c3_i64_34 = arith.constant 3 : i64
    %87 = llvm.load %8 : !llvm.ptr -> i64
    %88 = arith.cmpi ult, %87, %c3_i64_34 : i64
    scf.if %88 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %87, %c3_i64_34 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_33, %5 : i32, !llvm.ptr
    %c3_i64_35 = arith.constant 3 : i64
    %89 = llvm.load %8 : !llvm.ptr -> i64
    %90 = arith.cmpi ult, %89, %c3_i64_35 : i64
    scf.if %90 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %89, %c3_i64_35 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %91 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_36 = arith.constant 3 : i64
    %92 = llvm.load %8 : !llvm.ptr -> i64
    %93 = arith.cmpi ult, %92, %c3_i64_36 : i64
    scf.if %93 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %92, %c3_i64_36 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c0_i64_37 = arith.constant 0 : i64
    %94 = arith.extui %91 : i32 to i64
    %95 = arith.addi %94, %c0_i64_37 : i64
    %96 = llvm.getelementptr %13[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_38 = arith.constant 3 : i64
    %98 = llvm.load %8 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_38 : i64
    scf.if %99 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %98, %c3_i64_38 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %97, %2 : i32, !llvm.ptr
    %c1_i64_39 = arith.constant 1 : i64
    %100 = llvm.load %8 : !llvm.ptr -> i64
    %101 = arith.cmpi ult, %100, %c1_i64_39 : i64
    scf.if %101 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %100, %c1_i64_39 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c1_i32_40 = arith.constant 1 : i32
    %c3_i64_41 = arith.constant 3 : i64
    %102 = llvm.load %8 : !llvm.ptr -> i64
    %103 = arith.cmpi ult, %102, %c3_i64_41 : i64
    scf.if %103 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %102, %c3_i64_41 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %104 = arith.cmpi ule, %c1_i32_40, %c31_i32 : i32
    %105 = scf.if %104 -> (i32) {
      %324 = arith.shli %97, %c1_i32_40 : i32
      scf.yield %324 : i32
    } else {
      %c0_i32_127 = arith.constant 0 : i32
      scf.yield %c0_i32_127 : i32
    }
    %c3_i64_42 = arith.constant 3 : i64
    %106 = llvm.load %8 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c3_i64_42 : i64
    scf.if %107 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %106, %c3_i64_42 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %105, %6 : i32, !llvm.ptr
    %c3_i64_43 = arith.constant 3 : i64
    %108 = llvm.load %8 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %108, %c3_i64_43 : i64
    scf.if %109 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %108, %c3_i64_43 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %110 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_44 = arith.constant 3 : i64
    %111 = llvm.load %8 : !llvm.ptr -> i64
    %112 = arith.cmpi ult, %111, %c3_i64_44 : i64
    scf.if %112 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %111, %c3_i64_44 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %113 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_45 = arith.constant 3 : i64
    %114 = llvm.load %8 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %c3_i64_45 : i64
    scf.if %115 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %114, %c3_i64_45 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_46 = arith.constant 3 : i64
    %117 = llvm.load %8 : !llvm.ptr -> i64
    %118 = arith.cmpi ult, %117, %c3_i64_46 : i64
    scf.if %118 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %117, %c3_i64_46 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %119 = arith.cmpi ugt, %113, %116 : i32
    %120 = arith.extui %119 : i1 to i32
    %c1_i64_47 = arith.constant 1 : i64
    %121 = llvm.load %8 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %c1_i64_47 : i64
    scf.if %122 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %121, %c1_i64_47 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c0_i32_48 = arith.constant 0 : i32
    %123 = arith.cmpi ne, %120, %c0_i32_48 : i32
    %124 = arith.select %123, %105, %110 : i32
    %c3_i64_49 = arith.constant 3 : i64
    %125 = llvm.load %8 : !llvm.ptr -> i64
    %126 = arith.cmpi ult, %125, %c3_i64_49 : i64
    scf.if %126 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %125, %c3_i64_49 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %124, %3 : i32, !llvm.ptr
    %c1_i64_50 = arith.constant 1 : i64
    %127 = llvm.load %8 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c1_i64_50 : i64
    scf.if %128 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %127, %c1_i64_50 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_51 = arith.constant 3 : i64
    %129 = llvm.load %8 : !llvm.ptr -> i64
    %130 = arith.cmpi ult, %129, %c3_i64_51 : i64
    scf.if %130 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %129, %c3_i64_51 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %131 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_52 = arith.constant 1 : i64
    %132 = llvm.load %8 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c1_i64_52 : i64
    scf.if %133 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %132, %c1_i64_52 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c8_i32_53 = arith.constant 8 : i32
    %c3_i64_54 = arith.constant 3 : i64
    %134 = llvm.load %8 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c3_i64_54 : i64
    scf.if %135 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %134, %c3_i64_54 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %136 = arith.cmpi ugt, %131, %c8_i32_53 : i32
    %137 = arith.extui %136 : i1 to i32
    %c1_i64_55 = arith.constant 1 : i64
    %138 = llvm.load %8 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %c1_i64_55 : i64
    scf.if %139 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %138, %c1_i64_55 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c0_i32_56 = arith.constant 0 : i32
    %140 = arith.cmpi ne, %137, %c0_i32_56 : i32
    %141 = arith.select %140, %124, %c8_i32 : i32
    %c3_i64_57 = arith.constant 3 : i64
    %142 = llvm.load %8 : !llvm.ptr -> i64
    %143 = arith.cmpi ult, %142, %c3_i64_57 : i64
    scf.if %143 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %142, %c3_i64_57 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %141, %3 : i32, !llvm.ptr
    %c1_i64_58 = arith.constant 1 : i64
    %144 = llvm.load %8 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c1_i64_58 : i64
    scf.if %145 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %144, %c1_i64_58 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_59 = arith.constant 3 : i64
    %146 = llvm.load %8 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c3_i64_59 : i64
    scf.if %147 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %146, %c3_i64_59 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %148 = arith.xori %141, %c-1_i32 : i32
    %c1_i64_60 = arith.constant 1 : i64
    %149 = llvm.load %8 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c1_i64_60 : i64
    scf.if %150 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %149, %c1_i64_60 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c31_i32_61 = arith.constant 31 : i32
    %c3_i64_62 = arith.constant 3 : i64
    %151 = llvm.load %8 : !llvm.ptr -> i64
    %152 = arith.cmpi ult, %151, %c3_i64_62 : i64
    scf.if %152 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %151, %c3_i64_62 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c31_i32_63 = arith.constant 31 : i32
    %153 = arith.cmpi ule, %c31_i32_61, %c31_i32_63 : i32
    %154 = scf.if %153 -> (i32) {
      %324 = arith.shrui %148, %c31_i32_61 : i32
      scf.yield %324 : i32
    } else {
      %c0_i32_127 = arith.constant 0 : i32
      scf.yield %c0_i32_127 : i32
    }
    %c3_i64_64 = arith.constant 3 : i64
    %155 = llvm.load %8 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %c3_i64_64 : i64
    scf.if %156 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %155, %c3_i64_64 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %154, %6 : i32, !llvm.ptr
    %c1_i64_65 = arith.constant 1 : i64
    %157 = llvm.load %8 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c1_i64_65 : i64
    scf.if %158 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %157, %c1_i64_65 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c1_i64_66 = arith.constant 1 : i64
    %159 = llvm.load %8 : !llvm.ptr -> i64
    %160 = arith.cmpi ult, %159, %c1_i64_66 : i64
    scf.if %160 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %159, %c1_i64_66 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c3_i64_67 = arith.constant 3 : i64
    %161 = llvm.load %8 : !llvm.ptr -> i64
    %162 = arith.cmpi ult, %161, %c3_i64_67 : i64
    scf.if %162 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %161, %c3_i64_67 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %163 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_68 = arith.constant 1 : i64
    %164 = llvm.load %8 : !llvm.ptr -> i64
    %165 = arith.cmpi ult, %164, %c1_i64_68 : i64
    scf.if %165 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %164, %c1_i64_68 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c0_i32_69 = arith.constant 0 : i32
    %166 = arith.cmpi ne, %163, %c0_i32_69 : i32
    cf.cond_br %166, ^bb7, ^bb8
  ^bb5:  // pred: ^bb1
    %c1_i64_70 = arith.constant 1 : i64
    %167 = llvm.load %8 : !llvm.ptr -> i64
    %168 = arith.cmpi ult, %167, %c1_i64_70 : i64
    scf.if %168 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %167, %c1_i64_70 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c0_i32_71 = arith.constant 0 : i32
    %c3_i64_72 = arith.constant 3 : i64
    %169 = llvm.load %8 : !llvm.ptr -> i64
    %170 = arith.cmpi ult, %169, %c3_i64_72 : i64
    scf.if %170 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %169, %c3_i64_72 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_71, %2 : i32, !llvm.ptr
    %c1_i64_73 = arith.constant 1 : i64
    %171 = llvm.load %8 : !llvm.ptr -> i64
    %172 = arith.cmpi ult, %171, %c1_i64_73 : i64
    scf.if %172 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %171, %c1_i64_73 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb7, ^bb8
    %c3_i64_74 = arith.constant 3 : i64
    %173 = llvm.load %8 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c3_i64_74 : i64
    scf.if %174 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %173, %c3_i64_74 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %175 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_75 = arith.constant 3 : i64
    %176 = llvm.load %8 : !llvm.ptr -> i64
    %177 = arith.cmpi ult, %176, %c3_i64_75 : i64
    scf.if %177 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %176, %c3_i64_75 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %178 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_76 = arith.constant 3 : i64
    %179 = llvm.load %8 : !llvm.ptr -> i64
    %180 = arith.cmpi ult, %179, %c3_i64_76 : i64
    scf.if %180 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %179, %c3_i64_76 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %181 = arith.extui %175 : i32 to i64
    %182 = arith.addi %181, %c24_i64 : i64
    %183 = llvm.getelementptr %13[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %178, %183 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_77 = arith.constant 3 : i64
    %184 = llvm.load %8 : !llvm.ptr -> i64
    %185 = arith.cmpi ult, %184, %c3_i64_77 : i64
    scf.if %185 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %184, %c3_i64_77 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %186 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_78 = arith.constant 1 : i64
    %187 = llvm.load %8 : !llvm.ptr -> i64
    %188 = arith.cmpi ult, %187, %c1_i64_78 : i64
    scf.if %188 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %187, %c1_i64_78 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c8_i32_79 = arith.constant 8 : i32
    %c3_i64_80 = arith.constant 3 : i64
    %189 = llvm.load %8 : !llvm.ptr -> i64
    %190 = arith.cmpi ult, %189, %c3_i64_80 : i64
    scf.if %190 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %189, %c3_i64_80 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %191 = arith.addi %186, %c8_i32_79 : i32
    %c3_i64_81 = arith.constant 3 : i64
    %192 = llvm.load %8 : !llvm.ptr -> i64
    %193 = arith.cmpi ult, %192, %c3_i64_81 : i64
    scf.if %193 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %192, %c3_i64_81 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %194 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_82 = arith.constant 3 : i64
    %195 = llvm.load %8 : !llvm.ptr -> i64
    %196 = arith.cmpi ult, %195, %c3_i64_82 : i64
    scf.if %196 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %195, %c3_i64_82 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %197 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_83 = arith.constant 3 : i64
    %198 = llvm.load %8 : !llvm.ptr -> i64
    %199 = arith.cmpi ult, %198, %c3_i64_83 : i64
    scf.if %199 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %198, %c3_i64_83 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %200 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_84 = arith.constant 1 : i64
    %201 = llvm.load %8 : !llvm.ptr -> i64
    %202 = arith.cmpi ult, %201, %c1_i64_84 : i64
    scf.if %202 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %201, %c1_i64_84 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c20_i32 = arith.constant 20 : i32
    %c3_i64_85 = arith.constant 3 : i64
    %203 = llvm.load %8 : !llvm.ptr -> i64
    %204 = arith.cmpi ult, %203, %c3_i64_85 : i64
    scf.if %204 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %203, %c3_i64_85 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %205 = arith.addi %200, %c20_i32 : i32
    %c3_i64_86 = arith.constant 3 : i64
    %206 = llvm.load %8 : !llvm.ptr -> i64
    %207 = arith.cmpi ult, %206, %c3_i64_86 : i64
    scf.if %207 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %206, %c3_i64_86 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %208 = llvm.load %4 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %209 = llvm.load %8 : !llvm.ptr -> i64
    %210 = arith.cmpi ult, %209, %c6_i64 : i64
    scf.if %210 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %209, %c6_i64 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    call @f20(%arg0, %191, %194, %197, %205, %208) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c1_i64_87 = arith.constant 1 : i64
    %211 = llvm.load %8 : !llvm.ptr -> i64
    %212 = arith.cmpi ult, %211, %c1_i64_87 : i64
    scf.if %212 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %211, %c1_i64_87 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c3_i64_88 = arith.constant 3 : i64
    %213 = llvm.load %8 : !llvm.ptr -> i64
    %214 = arith.cmpi ult, %213, %c3_i64_88 : i64
    scf.if %214 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %213, %c3_i64_88 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %215 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_89 = arith.constant 3 : i64
    %216 = llvm.load %8 : !llvm.ptr -> i64
    %217 = arith.cmpi ult, %216, %c3_i64_89 : i64
    scf.if %217 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %216, %c3_i64_89 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %218 = arith.extui %215 : i32 to i64
    %219 = arith.addi %218, %c8_i64 : i64
    %220 = llvm.getelementptr %13[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %221 = llvm.load volatile %220 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_90 = arith.constant 1 : i64
    %222 = llvm.load %8 : !llvm.ptr -> i64
    %223 = arith.cmpi ult, %222, %c1_i64_90 : i64
    scf.if %223 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %222, %c1_i64_90 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c0_i32_91 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %221, %c0_i32_91 : i32
    cf.cond_br %224, ^bb9, ^bb10
  ^bb7:  // pred: ^bb4
    %c3_i64_92 = arith.constant 3 : i64
    %225 = llvm.load %8 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c3_i64_92 : i64
    scf.if %226 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %225, %c3_i64_92 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %227 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_93 = arith.constant 3 : i64
    %228 = llvm.load %8 : !llvm.ptr -> i64
    %229 = arith.cmpi ult, %228, %c3_i64_93 : i64
    scf.if %229 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %228, %c3_i64_93 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %230 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_94 = arith.constant 3 : i64
    %231 = llvm.load %8 : !llvm.ptr -> i64
    %232 = arith.cmpi ult, %231, %c3_i64_94 : i64
    scf.if %232 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %231, %c3_i64_94 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %233 = arith.extui %227 : i32 to i64
    %234 = arith.addi %233, %c28_i64 : i64
    %235 = llvm.getelementptr %13[%234] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %230, %235 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_95 = arith.constant 3 : i64
    %236 = llvm.load %8 : !llvm.ptr -> i64
    %237 = arith.cmpi ult, %236, %c3_i64_95 : i64
    scf.if %237 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %236, %c3_i64_95 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %238 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_96 = arith.constant 3 : i64
    %239 = llvm.load %8 : !llvm.ptr -> i64
    %240 = arith.cmpi ult, %239, %c3_i64_96 : i64
    scf.if %240 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %239, %c3_i64_96 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %241 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_97 = arith.constant 3 : i64
    %242 = llvm.load %8 : !llvm.ptr -> i64
    %243 = arith.cmpi ult, %242, %c3_i64_97 : i64
    scf.if %243 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %242, %c3_i64_97 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c4_i64_98 = arith.constant 4 : i64
    %244 = arith.extui %241 : i32 to i64
    %245 = arith.addi %244, %c4_i64_98 : i64
    %246 = llvm.getelementptr %13[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load volatile %246 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_99 = arith.constant 3 : i64
    %248 = llvm.load %8 : !llvm.ptr -> i64
    %249 = arith.cmpi ult, %248, %c3_i64_99 : i64
    scf.if %249 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %248, %c3_i64_99 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %250 = arith.extui %238 : i32 to i64
    %251 = arith.addi %250, %c20_i64 : i64
    %252 = llvm.getelementptr %13[%251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %247, %252 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_100 = arith.constant 1 : i64
    %253 = llvm.load %8 : !llvm.ptr -> i64
    %254 = arith.cmpi ult, %253, %c1_i64_100 : i64
    scf.if %254 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %253, %c1_i64_100 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    cf.br ^bb6
  ^bb8:  // pred: ^bb4
    %c1_i64_101 = arith.constant 1 : i64
    %255 = llvm.load %8 : !llvm.ptr -> i64
    %256 = arith.cmpi ult, %255, %c1_i64_101 : i64
    scf.if %256 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %255, %c1_i64_101 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c0_i32_102 = arith.constant 0 : i32
    %c3_i64_103 = arith.constant 3 : i64
    %257 = llvm.load %8 : !llvm.ptr -> i64
    %258 = arith.cmpi ult, %257, %c3_i64_103 : i64
    scf.if %258 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %257, %c3_i64_103 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_102, %5 : i32, !llvm.ptr
    %c1_i64_104 = arith.constant 1 : i64
    %259 = llvm.load %8 : !llvm.ptr -> i64
    %260 = arith.cmpi ult, %259, %c1_i64_104 : i64
    scf.if %260 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %259, %c1_i64_104 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    cf.br ^bb6
  ^bb9:  // pred: ^bb6
    %c3_i64_105 = arith.constant 3 : i64
    %261 = llvm.load %8 : !llvm.ptr -> i64
    %262 = arith.cmpi ult, %261, %c3_i64_105 : i64
    scf.if %262 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %261, %c3_i64_105 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %263 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_106 = arith.constant 3 : i64
    %264 = llvm.load %8 : !llvm.ptr -> i64
    %265 = arith.cmpi ult, %264, %c3_i64_106 : i64
    scf.if %265 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %264, %c3_i64_106 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %266 = arith.extui %263 : i32 to i64
    %267 = arith.addi %266, %c16_i64 : i64
    %268 = llvm.getelementptr %13[%267] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %269 = llvm.load volatile %268 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_107 = arith.constant 3 : i64
    %270 = llvm.load %8 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %270, %c3_i64_107 : i64
    scf.if %271 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %270, %c3_i64_107 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %269, %1 : i32, !llvm.ptr
    %c3_i64_108 = arith.constant 3 : i64
    %272 = llvm.load %8 : !llvm.ptr -> i64
    %273 = arith.cmpi ult, %272, %c3_i64_108 : i64
    scf.if %273 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %272, %c3_i64_108 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %274 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_109 = arith.constant 3 : i64
    %275 = llvm.load %8 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_109 : i64
    scf.if %276 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %275, %c3_i64_109 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %277 = arith.extui %274 : i32 to i64
    %278 = arith.addi %277, %c12_i64 : i64
    %279 = llvm.getelementptr %13[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_110 = arith.constant 3 : i64
    %281 = llvm.load %8 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c3_i64_110 : i64
    scf.if %282 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %281, %c3_i64_110 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %280, %2 : i32, !llvm.ptr
    %c1_i64_111 = arith.constant 1 : i64
    %283 = llvm.load %8 : !llvm.ptr -> i64
    %284 = arith.cmpi ult, %283, %c1_i64_111 : i64
    scf.if %284 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %283, %c1_i64_111 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb10:  // pred: ^bb6
    %c3_i64_112 = arith.constant 3 : i64
    %285 = llvm.load %8 : !llvm.ptr -> i64
    %286 = arith.cmpi ult, %285, %c3_i64_112 : i64
    scf.if %286 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %285, %c3_i64_112 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %287 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_113 = arith.constant 3 : i64
    %288 = llvm.load %8 : !llvm.ptr -> i64
    %289 = arith.cmpi ult, %288, %c3_i64_113 : i64
    scf.if %289 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %288, %c3_i64_113 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c12_i64_114 = arith.constant 12 : i64
    %290 = arith.extui %287 : i32 to i64
    %291 = arith.addi %290, %c12_i64_114 : i64
    %292 = llvm.getelementptr %13[%291] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %293 = llvm.load volatile %292 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_115 = arith.constant 3 : i64
    %294 = llvm.load %8 : !llvm.ptr -> i64
    %295 = arith.cmpi ult, %294, %c3_i64_115 : i64
    scf.if %295 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %294, %c3_i64_115 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %293, %2 : i32, !llvm.ptr
    %c3_i64_116 = arith.constant 3 : i64
    %296 = llvm.load %8 : !llvm.ptr -> i64
    %297 = arith.cmpi ult, %296, %c3_i64_116 : i64
    scf.if %297 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %296, %c3_i64_116 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %298 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_117 = arith.constant 3 : i64
    %299 = llvm.load %8 : !llvm.ptr -> i64
    %300 = arith.cmpi ult, %299, %c3_i64_117 : i64
    scf.if %300 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %299, %c3_i64_117 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %301 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_118 = arith.constant 3 : i64
    %302 = llvm.load %8 : !llvm.ptr -> i64
    %303 = arith.cmpi ult, %302, %c3_i64_118 : i64
    scf.if %303 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %302, %c3_i64_118 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c0_i64_119 = arith.constant 0 : i64
    %304 = arith.extui %298 : i32 to i64
    %305 = arith.addi %304, %c0_i64_119 : i64
    %306 = llvm.getelementptr %13[%305] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %301, %306 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_120 = arith.constant 3 : i64
    %307 = llvm.load %8 : !llvm.ptr -> i64
    %308 = arith.cmpi ult, %307, %c3_i64_120 : i64
    scf.if %308 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %307, %c3_i64_120 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %309 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_121 = arith.constant 3 : i64
    %310 = llvm.load %8 : !llvm.ptr -> i64
    %311 = arith.cmpi ult, %310, %c3_i64_121 : i64
    scf.if %311 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %310, %c3_i64_121 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %312 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_122 = arith.constant 3 : i64
    %313 = llvm.load %8 : !llvm.ptr -> i64
    %314 = arith.cmpi ult, %313, %c3_i64_122 : i64
    scf.if %314 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %313, %c3_i64_122 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c4_i64_123 = arith.constant 4 : i64
    %315 = arith.extui %309 : i32 to i64
    %316 = arith.addi %315, %c4_i64_123 : i64
    %317 = llvm.getelementptr %13[%316] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %312, %317 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_124 = arith.constant 1 : i64
    %318 = llvm.load %8 : !llvm.ptr -> i64
    %319 = arith.cmpi ult, %318, %c1_i64_124 : i64
    scf.if %319 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %318, %c1_i64_124 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %c3_i64_125 = arith.constant 3 : i64
    %320 = llvm.load %8 : !llvm.ptr -> i64
    %321 = arith.cmpi ult, %320, %c3_i64_125 : i64
    scf.if %321 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %320, %c3_i64_125 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    llvm.store %c-2147483647_i32, %2 : i32, !llvm.ptr
    %c1_i64_126 = arith.constant 1 : i64
    %322 = llvm.load %8 : !llvm.ptr -> i64
    %323 = arith.cmpi ult, %322, %c1_i64_126 : i64
    scf.if %323 {
      %c20_i32_127 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_127) : (i32) -> ()
    } else {
      %324 = arith.subi %322, %c1_i64_126 : i64
      llvm.store %324, %8 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_0 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %1, %2 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %3 = llvm.load %2 : !llvm.ptr -> i64
    %4 = arith.cmpi ult, %3, %c1_i64 : i64
    scf.if %4 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %5 = arith.subi %3, %c1_i64 : i64
      llvm.store %5, %2 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f23(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c1_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %7, %c1_i64 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %9 = llvm.load %3 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c3_i64 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %9, %c3_i64 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c3_i64_2 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %12, %c3_i64_2 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %11 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %18 = llvm.load %3 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_3 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %18, %c3_i64_3 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    llvm.store %17, %1 : i32, !llvm.ptr
    %c3_i64_4 = arith.constant 3 : i64
    %20 = llvm.load %3 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_4 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %20, %c3_i64_4 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c0_i32_5 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %17, %c0_i32_5 : i32
    %23 = arith.extui %22 : i1 to i32
    %c1_i64_6 = arith.constant 1 : i64
    %24 = llvm.load %3 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c1_i64_6 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %24, %c1_i64_6 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c0_i32_7 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %23, %c0_i32_7 : i32
    cf.cond_br %26, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c1_i64_8 = arith.constant 1 : i64
    %27 = llvm.load %3 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c1_i64_8 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %27, %c1_i64_8 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c3_i64_9 = arith.constant 3 : i64
    %29 = llvm.load %3 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_9 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %29, %c3_i64_9 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_10 = arith.constant 3 : i64
    %32 = llvm.load %3 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c3_i64_10 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %32, %c3_i64_10 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %34 = arith.extui %31 : i32 to i64
    %35 = arith.addi %34, %c4_i64 : i64
    %36 = llvm.getelementptr %6[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %38 = llvm.load %3 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_11 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %38, %c3_i64_11 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_12 = arith.constant 1 : i64
    %41 = llvm.load %3 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c1_i64_12 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %41, %c1_i64_12 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c1_i32_13 = arith.constant 1 : i32
    %c6_i64 = arith.constant 6 : i64
    %43 = llvm.load %3 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c6_i64 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %43, %c6_i64 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    call @f10(%arg0, %37, %40, %c1_i32_13) : (!llvm.ptr, i32, i32, i32) -> ()
    %c1_i64_14 = arith.constant 1 : i64
    %45 = llvm.load %3 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c1_i64_14 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %45, %c1_i64_14 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f24(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %7, %c3_i64 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c1_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %10, %c1_i64 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    %c4854689474455388916_i64 = arith.constant 4854689474455388916 : i64
    %c3_i64_2 = arith.constant 3 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c3_i64_2 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %12, %c3_i64_2 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %14 = arith.extui %9 : i32 to i64
    %15 = arith.addi %14, %c8_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4854689474455388916_i64, %16 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_3 = arith.constant 3 : i64
    %17 = llvm.load %3 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c3_i64_3 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %17, %c3_i64_3 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_4 = arith.constant 1 : i64
    %20 = llvm.load %3 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c1_i64_4 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %20, %c1_i64_4 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    %c-1846477596472271460_i64 = arith.constant -1846477596472271460 : i64
    %c3_i64_5 = arith.constant 3 : i64
    %22 = llvm.load %3 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c3_i64_5 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %22, %c3_i64_5 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %24 = arith.extui %19 : i32 to i64
    %25 = arith.addi %24, %c0_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-1846477596472271460_i64, %26 {alignment = 1 : i64} : i64, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %27 = llvm.load %3 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c1_i64_6 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %27, %c1_i64_6 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f25(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %7, %c3_i64 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c1_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %10, %c1_i64 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    %c7199936582794304877_i64 = arith.constant 7199936582794304877 : i64
    %c3_i64_2 = arith.constant 3 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c3_i64_2 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %12, %c3_i64_2 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %14 = arith.extui %9 : i32 to i64
    %15 = arith.addi %14, %c8_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c7199936582794304877_i64, %16 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_3 = arith.constant 3 : i64
    %17 = llvm.load %3 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c3_i64_3 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %17, %c3_i64_3 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_4 = arith.constant 1 : i64
    %20 = llvm.load %3 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c1_i64_4 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %20, %c1_i64_4 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    %c-5076933981314334344_i64 = arith.constant -5076933981314334344 : i64
    %c3_i64_5 = arith.constant 3 : i64
    %22 = llvm.load %3 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c3_i64_5 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %22, %c3_i64_5 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %24 = arith.extui %19 : i32 to i64
    %25 = arith.addi %24, %c0_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-5076933981314334344_i64, %26 {alignment = 1 : i64} : i64, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %27 = llvm.load %3 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c1_i64_6 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %29 = arith.subi %27, %c1_i64_6 : i64
      llvm.store %29, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f26(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_5 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %13 = llvm.load %7 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64 : i64
    scf.if %14 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %13, %c3_i64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %15 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %16 = llvm.load %7 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c1_i64 : i64
    scf.if %17 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %16, %c1_i64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_6 = arith.constant 3 : i64
    %18 = llvm.load %7 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_6 : i64
    scf.if %19 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %18, %c3_i64_6 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %20 = arith.subi %15, %c32_i32 : i32
    %c3_i64_7 = arith.constant 3 : i64
    %21 = llvm.load %7 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_7 : i64
    scf.if %22 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %21, %c3_i64_7 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %3 : i32, !llvm.ptr
    %c3_i64_8 = arith.constant 3 : i64
    %23 = llvm.load %7 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_8 : i64
    scf.if %24 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %23, %c3_i64_8 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %25 = llvm.load %7 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_9 : i64
    scf.if %26 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %25, %c1_i64_9 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c3_i64_10 = arith.constant 3 : i64
    %27 = llvm.load %7 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c3_i64_10 : i64
    scf.if %28 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %27, %c3_i64_10 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %30 = llvm.load %7 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c3_i64_11 : i64
    scf.if %31 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %30, %c3_i64_11 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_12 = arith.constant 3 : i64
    %33 = llvm.load %7 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c3_i64_12 : i64
    scf.if %34 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %33, %c3_i64_12 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %35 = arith.addi %29, %32 : i32
    %c3_i64_13 = arith.constant 3 : i64
    %36 = llvm.load %7 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_13 : i64
    scf.if %37 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %36, %c3_i64_13 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %35, %2 : i32, !llvm.ptr
    %c3_i64_14 = arith.constant 3 : i64
    %38 = llvm.load %7 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_14 : i64
    scf.if %39 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %38, %c3_i64_14 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %41 = llvm.load %7 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c3_i64_15 : i64
    scf.if %42 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %41, %c3_i64_15 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %43 = arith.cmpi uge, %35, %40 : i32
    %44 = arith.extui %43 : i1 to i32
    %c1_i64_16 = arith.constant 1 : i64
    %45 = llvm.load %7 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c1_i64_16 : i64
    scf.if %46 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %45, %c1_i64_16 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_17 = arith.constant 0 : i32
    %47 = arith.cmpi ne, %44, %c0_i32_17 : i32
    cf.cond_br %47, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i64_18 = arith.constant 1 : i64
    %48 = llvm.load %7 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c1_i64_18 : i64
    scf.if %49 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %48, %c1_i64_18 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i32_19 = arith.constant 1 : i32
    %c3_i64_20 = arith.constant 3 : i64
    %50 = llvm.load %7 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c3_i64_20 : i64
    scf.if %51 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %50, %c3_i64_20 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_19, %4 : i32, !llvm.ptr
    %c3_i64_21 = arith.constant 3 : i64
    %52 = llvm.load %7 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c3_i64_21 : i64
    scf.if %53 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %52, %c3_i64_21 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_22 = arith.constant 3 : i64
    %55 = llvm.load %7 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c3_i64_22 : i64
    scf.if %56 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %55, %c3_i64_22 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %57 = arith.extui %54 : i32 to i64
    %58 = arith.addi %57, %c0_i64 : i64
    %59 = llvm.getelementptr %12[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_23 = arith.constant 3 : i64
    %61 = llvm.load %7 : !llvm.ptr -> i64
    %62 = arith.cmpi ult, %61, %c3_i64_23 : i64
    scf.if %62 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %61, %c3_i64_23 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %60, %5 : i32, !llvm.ptr
    %c1_i64_24 = arith.constant 1 : i64
    %63 = llvm.load %7 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c1_i64_24 : i64
    scf.if %64 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %63, %c1_i64_24 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i32_25 = arith.constant 1 : i32
    %c3_i64_26 = arith.constant 3 : i64
    %65 = llvm.load %7 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c3_i64_26 : i64
    scf.if %66 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %65, %c3_i64_26 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %67 = arith.cmpi ule, %c1_i32_25, %c31_i32 : i32
    %68 = scf.if %67 -> (i32) {
      %294 = arith.shli %60, %c1_i32_25 : i32
      scf.yield %294 : i32
    } else {
      %c0_i32_117 = arith.constant 0 : i32
      scf.yield %c0_i32_117 : i32
    }
    %c3_i64_27 = arith.constant 3 : i64
    %69 = llvm.load %7 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c3_i64_27 : i64
    scf.if %70 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %69, %c3_i64_27 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %68, %1 : i32, !llvm.ptr
    %c3_i64_28 = arith.constant 3 : i64
    %71 = llvm.load %7 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c3_i64_28 : i64
    scf.if %72 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %71, %c3_i64_28 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_29 = arith.constant 3 : i64
    %74 = llvm.load %7 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c3_i64_29 : i64
    scf.if %75 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %74, %c3_i64_29 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %76 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_30 = arith.constant 3 : i64
    %77 = llvm.load %7 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c3_i64_30 : i64
    scf.if %78 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %77, %c3_i64_30 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_31 = arith.constant 3 : i64
    %80 = llvm.load %7 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_31 : i64
    scf.if %81 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %80, %c3_i64_31 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %82 = arith.cmpi ugt, %76, %79 : i32
    %83 = arith.extui %82 : i1 to i32
    %c1_i64_32 = arith.constant 1 : i64
    %84 = llvm.load %7 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c1_i64_32 : i64
    scf.if %85 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %84, %c1_i64_32 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_33 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %83, %c0_i32_33 : i32
    %87 = arith.select %86, %68, %73 : i32
    %c3_i64_34 = arith.constant 3 : i64
    %88 = llvm.load %7 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c3_i64_34 : i64
    scf.if %89 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %88, %c3_i64_34 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %87, %1 : i32, !llvm.ptr
    %c1_i64_35 = arith.constant 1 : i64
    %90 = llvm.load %7 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c1_i64_35 : i64
    scf.if %91 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %90, %c1_i64_35 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_36 = arith.constant 3 : i64
    %92 = llvm.load %7 : !llvm.ptr -> i64
    %93 = arith.cmpi ult, %92, %c3_i64_36 : i64
    scf.if %93 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %92, %c3_i64_36 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_37 = arith.constant 1 : i64
    %95 = llvm.load %7 : !llvm.ptr -> i64
    %96 = arith.cmpi ult, %95, %c1_i64_37 : i64
    scf.if %96 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %95, %c1_i64_37 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i32_38 = arith.constant 8 : i32
    %c3_i64_39 = arith.constant 3 : i64
    %97 = llvm.load %7 : !llvm.ptr -> i64
    %98 = arith.cmpi ult, %97, %c3_i64_39 : i64
    scf.if %98 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %97, %c3_i64_39 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %99 = arith.cmpi ugt, %94, %c8_i32_38 : i32
    %100 = arith.extui %99 : i1 to i32
    %c1_i64_40 = arith.constant 1 : i64
    %101 = llvm.load %7 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c1_i64_40 : i64
    scf.if %102 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %101, %c1_i64_40 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_41 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %100, %c0_i32_41 : i32
    %104 = arith.select %103, %87, %c8_i32 : i32
    %c3_i64_42 = arith.constant 3 : i64
    %105 = llvm.load %7 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %c3_i64_42 : i64
    scf.if %106 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %105, %c3_i64_42 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %104, %1 : i32, !llvm.ptr
    %c1_i64_43 = arith.constant 1 : i64
    %107 = llvm.load %7 : !llvm.ptr -> i64
    %108 = arith.cmpi ult, %107, %c1_i64_43 : i64
    scf.if %108 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %107, %c1_i64_43 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %109 = llvm.load %7 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c3_i64_44 : i64
    scf.if %110 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %109, %c3_i64_44 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %111 = arith.xori %104, %c-1_i32 : i32
    %c1_i64_45 = arith.constant 1 : i64
    %112 = llvm.load %7 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c1_i64_45 : i64
    scf.if %113 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %112, %c1_i64_45 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c31_i32_46 = arith.constant 31 : i32
    %c3_i64_47 = arith.constant 3 : i64
    %114 = llvm.load %7 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %c3_i64_47 : i64
    scf.if %115 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %114, %c3_i64_47 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c31_i32_48 = arith.constant 31 : i32
    %116 = arith.cmpi ule, %c31_i32_46, %c31_i32_48 : i32
    %117 = scf.if %116 -> (i32) {
      %294 = arith.shrui %111, %c31_i32_46 : i32
      scf.yield %294 : i32
    } else {
      %c0_i32_117 = arith.constant 0 : i32
      scf.yield %c0_i32_117 : i32
    }
    %c3_i64_49 = arith.constant 3 : i64
    %118 = llvm.load %7 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_49 : i64
    scf.if %119 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %118, %c3_i64_49 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %117, %2 : i32, !llvm.ptr
    %c1_i64_50 = arith.constant 1 : i64
    %120 = llvm.load %7 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c1_i64_50 : i64
    scf.if %121 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %120, %c1_i64_50 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i64_51 = arith.constant 1 : i64
    %122 = llvm.load %7 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %c1_i64_51 : i64
    scf.if %123 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %122, %c1_i64_51 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c3_i64_52 = arith.constant 3 : i64
    %124 = llvm.load %7 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c3_i64_52 : i64
    scf.if %125 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %124, %c3_i64_52 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %126 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_53 = arith.constant 1 : i64
    %127 = llvm.load %7 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c1_i64_53 : i64
    scf.if %128 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %127, %c1_i64_53 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_54 = arith.constant 0 : i32
    %129 = arith.cmpi ne, %126, %c0_i32_54 : i32
    cf.cond_br %129, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i64_55 = arith.constant 1 : i64
    %130 = llvm.load %7 : !llvm.ptr -> i64
    %131 = arith.cmpi ult, %130, %c1_i64_55 : i64
    scf.if %131 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %130, %c1_i64_55 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_56 = arith.constant 0 : i32
    %c1_i64_57 = arith.constant 1 : i64
    %132 = llvm.load %7 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c1_i64_57 : i64
    scf.if %133 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %132, %c1_i64_57 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_58 = arith.constant 0 : i32
    %c6_i64 = arith.constant 6 : i64
    %134 = llvm.load %7 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c6_i64 : i64
    scf.if %135 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %134, %c6_i64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    call @f55(%arg0, %c0_i32_56, %c0_i32_58) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_59 = arith.constant 0 : i64
    %136 = llvm.load %7 : !llvm.ptr -> i64
    %137 = arith.cmpi ult, %136, %c0_i64_59 : i64
    scf.if %137 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %136, %c0_i64_59 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %c3_i64_60 = arith.constant 3 : i64
    %138 = llvm.load %7 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %c3_i64_60 : i64
    scf.if %139 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %138, %c3_i64_60 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %140 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_61 = arith.constant 3 : i64
    %141 = llvm.load %7 : !llvm.ptr -> i64
    %142 = arith.cmpi ult, %141, %c3_i64_61 : i64
    scf.if %142 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %141, %c3_i64_61 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %143 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_62 = arith.constant 3 : i64
    %144 = llvm.load %7 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c3_i64_62 : i64
    scf.if %145 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %144, %c3_i64_62 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %146 = arith.extui %140 : i32 to i64
    %147 = arith.addi %146, %c24_i64 : i64
    %148 = llvm.getelementptr %12[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %148 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_63 = arith.constant 3 : i64
    %149 = llvm.load %7 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c3_i64_63 : i64
    scf.if %150 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %149, %c3_i64_63 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %151 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_64 = arith.constant 1 : i64
    %152 = llvm.load %7 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c1_i64_64 : i64
    scf.if %153 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %152, %c1_i64_64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i32_65 = arith.constant 8 : i32
    %c3_i64_66 = arith.constant 3 : i64
    %154 = llvm.load %7 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c3_i64_66 : i64
    scf.if %155 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %154, %c3_i64_66 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %156 = arith.addi %151, %c8_i32_65 : i32
    %c3_i64_67 = arith.constant 3 : i64
    %157 = llvm.load %7 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c3_i64_67 : i64
    scf.if %158 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %157, %c3_i64_67 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %159 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_68 = arith.constant 3 : i64
    %160 = llvm.load %7 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_68 : i64
    scf.if %161 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %160, %c3_i64_68 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %162 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_69 = arith.constant 3 : i64
    %163 = llvm.load %7 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c3_i64_69 : i64
    scf.if %164 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %163, %c3_i64_69 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %165 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_70 = arith.constant 1 : i64
    %166 = llvm.load %7 : !llvm.ptr -> i64
    %167 = arith.cmpi ult, %166, %c1_i64_70 : i64
    scf.if %167 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %166, %c1_i64_70 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c20_i32 = arith.constant 20 : i32
    %c3_i64_71 = arith.constant 3 : i64
    %168 = llvm.load %7 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c3_i64_71 : i64
    scf.if %169 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %168, %c3_i64_71 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %170 = arith.addi %165, %c20_i32 : i32
    %c6_i64_72 = arith.constant 6 : i64
    %171 = llvm.load %7 : !llvm.ptr -> i64
    %172 = arith.cmpi ult, %171, %c6_i64_72 : i64
    scf.if %172 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %171, %c6_i64_72 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    call @f34(%arg0, %156, %159, %162, %170) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %c1_i64_73 = arith.constant 1 : i64
    %173 = llvm.load %7 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c1_i64_73 : i64
    scf.if %174 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %173, %c1_i64_73 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c3_i64_74 = arith.constant 3 : i64
    %175 = llvm.load %7 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c3_i64_74 : i64
    scf.if %176 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %175, %c3_i64_74 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %177 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_75 = arith.constant 3 : i64
    %178 = llvm.load %7 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c3_i64_75 : i64
    scf.if %179 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %178, %c3_i64_75 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %180 = arith.extui %177 : i32 to i64
    %181 = arith.addi %180, %c8_i64 : i64
    %182 = llvm.getelementptr %12[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %183 = llvm.load volatile %182 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_76 = arith.constant 3 : i64
    %184 = llvm.load %7 : !llvm.ptr -> i64
    %185 = arith.cmpi ult, %184, %c3_i64_76 : i64
    scf.if %185 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %184, %c3_i64_76 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_77 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %183, %c0_i32_77 : i32
    %187 = arith.extui %186 : i1 to i32
    %c1_i64_78 = arith.constant 1 : i64
    %188 = llvm.load %7 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c1_i64_78 : i64
    scf.if %189 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %188, %c1_i64_78 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_79 = arith.constant 0 : i32
    %190 = arith.cmpi ne, %187, %c0_i32_79 : i32
    cf.cond_br %190, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %c3_i64_80 = arith.constant 3 : i64
    %191 = llvm.load %7 : !llvm.ptr -> i64
    %192 = arith.cmpi ult, %191, %c3_i64_80 : i64
    scf.if %192 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %191, %c3_i64_80 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %193 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_81 = arith.constant 3 : i64
    %194 = llvm.load %7 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c3_i64_81 : i64
    scf.if %195 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %194, %c3_i64_81 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %196 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_82 = arith.constant 3 : i64
    %197 = llvm.load %7 : !llvm.ptr -> i64
    %198 = arith.cmpi ult, %197, %c3_i64_82 : i64
    scf.if %198 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %197, %c3_i64_82 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %199 = arith.extui %193 : i32 to i64
    %200 = arith.addi %199, %c28_i64 : i64
    %201 = llvm.getelementptr %12[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %196, %201 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_83 = arith.constant 3 : i64
    %202 = llvm.load %7 : !llvm.ptr -> i64
    %203 = arith.cmpi ult, %202, %c3_i64_83 : i64
    scf.if %203 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %202, %c3_i64_83 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %204 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_84 = arith.constant 3 : i64
    %205 = llvm.load %7 : !llvm.ptr -> i64
    %206 = arith.cmpi ult, %205, %c3_i64_84 : i64
    scf.if %206 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %205, %c3_i64_84 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %207 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_85 = arith.constant 3 : i64
    %208 = llvm.load %7 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c3_i64_85 : i64
    scf.if %209 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %208, %c3_i64_85 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %210 = arith.extui %207 : i32 to i64
    %211 = arith.addi %210, %c4_i64 : i64
    %212 = llvm.getelementptr %12[%211] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %213 = llvm.load volatile %212 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_86 = arith.constant 3 : i64
    %214 = llvm.load %7 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c3_i64_86 : i64
    scf.if %215 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %214, %c3_i64_86 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %216 = arith.extui %204 : i32 to i64
    %217 = arith.addi %216, %c20_i64 : i64
    %218 = llvm.getelementptr %12[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %213, %218 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_87 = arith.constant 1 : i64
    %219 = llvm.load %7 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c1_i64_87 : i64
    scf.if %220 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %219, %c1_i64_87 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c1_i64_88 = arith.constant 1 : i64
    %221 = llvm.load %7 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c1_i64_88 : i64
    scf.if %222 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %221, %c1_i64_88 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_89 = arith.constant 0 : i32
    %c3_i64_90 = arith.constant 3 : i64
    %223 = llvm.load %7 : !llvm.ptr -> i64
    %224 = arith.cmpi ult, %223, %c3_i64_90 : i64
    scf.if %224 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %223, %c3_i64_90 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_89, %4 : i32, !llvm.ptr
    %c1_i64_91 = arith.constant 1 : i64
    %225 = llvm.load %7 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c1_i64_91 : i64
    scf.if %226 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %225, %c1_i64_91 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %c3_i64_92 = arith.constant 3 : i64
    %227 = llvm.load %7 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %c3_i64_92 : i64
    scf.if %228 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %227, %c3_i64_92 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %229 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_93 = arith.constant 3 : i64
    %230 = llvm.load %7 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c3_i64_93 : i64
    scf.if %231 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %230, %c3_i64_93 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %232 = arith.extui %229 : i32 to i64
    %233 = arith.addi %232, %c12_i64 : i64
    %234 = llvm.getelementptr %12[%233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %235 = llvm.load volatile %234 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_94 = arith.constant 3 : i64
    %236 = llvm.load %7 : !llvm.ptr -> i64
    %237 = arith.cmpi ult, %236, %c3_i64_94 : i64
    scf.if %237 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %236, %c3_i64_94 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %235, %2 : i32, !llvm.ptr
    %c3_i64_95 = arith.constant 3 : i64
    %238 = llvm.load %7 : !llvm.ptr -> i64
    %239 = arith.cmpi ult, %238, %c3_i64_95 : i64
    scf.if %239 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %238, %c3_i64_95 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %240 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_96 = arith.constant 3 : i64
    %241 = llvm.load %7 : !llvm.ptr -> i64
    %242 = arith.cmpi ult, %241, %c3_i64_96 : i64
    scf.if %242 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %241, %c3_i64_96 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %243 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_97 = arith.constant 3 : i64
    %244 = llvm.load %7 : !llvm.ptr -> i64
    %245 = arith.cmpi ult, %244, %c3_i64_97 : i64
    scf.if %245 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %244, %c3_i64_97 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i64_98 = arith.constant 0 : i64
    %246 = arith.extui %240 : i32 to i64
    %247 = arith.addi %246, %c0_i64_98 : i64
    %248 = llvm.getelementptr %12[%247] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %243, %248 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_99 = arith.constant 3 : i64
    %249 = llvm.load %7 : !llvm.ptr -> i64
    %250 = arith.cmpi ult, %249, %c3_i64_99 : i64
    scf.if %250 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %249, %c3_i64_99 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %251 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_100 = arith.constant 3 : i64
    %252 = llvm.load %7 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c3_i64_100 : i64
    scf.if %253 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %252, %c3_i64_100 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %254 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_101 = arith.constant 3 : i64
    %255 = llvm.load %7 : !llvm.ptr -> i64
    %256 = arith.cmpi ult, %255, %c3_i64_101 : i64
    scf.if %256 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %255, %c3_i64_101 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c4_i64_102 = arith.constant 4 : i64
    %257 = arith.extui %251 : i32 to i64
    %258 = arith.addi %257, %c4_i64_102 : i64
    %259 = llvm.getelementptr %12[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %254, %259 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_103 = arith.constant 3 : i64
    %260 = llvm.load %7 : !llvm.ptr -> i64
    %261 = arith.cmpi ult, %260, %c3_i64_103 : i64
    scf.if %261 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %260, %c3_i64_103 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %262 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_104 = arith.constant 1 : i64
    %263 = llvm.load %7 : !llvm.ptr -> i64
    %264 = arith.cmpi ult, %263, %c1_i64_104 : i64
    scf.if %264 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %263, %c1_i64_104 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c32_i32_105 = arith.constant 32 : i32
    %c3_i64_106 = arith.constant 3 : i64
    %265 = llvm.load %7 : !llvm.ptr -> i64
    %266 = arith.cmpi ult, %265, %c3_i64_106 : i64
    scf.if %266 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %265, %c3_i64_106 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %267 = arith.addi %262, %c32_i32_105 : i32
    %c3_i64_107 = arith.constant 3 : i64
    %268 = llvm.load %7 : !llvm.ptr -> i64
    %269 = arith.cmpi ult, %268, %c3_i64_107 : i64
    scf.if %269 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %268, %c3_i64_107 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %267, %9 : i32, !llvm.ptr
    %c1_i64_108 = arith.constant 1 : i64
    %270 = llvm.load %7 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %270, %c1_i64_108 : i64
    scf.if %271 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %270, %c1_i64_108 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %c3_i64_109 = arith.constant 3 : i64
    %272 = llvm.load %7 : !llvm.ptr -> i64
    %273 = arith.cmpi ult, %272, %c3_i64_109 : i64
    scf.if %273 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %272, %c3_i64_109 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %274 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_110 = arith.constant 3 : i64
    %275 = llvm.load %7 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_110 : i64
    scf.if %276 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %275, %c3_i64_110 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c12_i64_111 = arith.constant 12 : i64
    %277 = arith.extui %274 : i32 to i64
    %278 = arith.addi %277, %c12_i64_111 : i64
    %279 = llvm.getelementptr %12[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_112 = arith.constant 3 : i64
    %281 = llvm.load %7 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c3_i64_112 : i64
    scf.if %282 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %281, %c3_i64_112 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %283 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_113 = arith.constant 3 : i64
    %284 = llvm.load %7 : !llvm.ptr -> i64
    %285 = arith.cmpi ult, %284, %c3_i64_113 : i64
    scf.if %285 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %284, %c3_i64_113 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %286 = arith.extui %283 : i32 to i64
    %287 = arith.addi %286, %c16_i64 : i64
    %288 = llvm.getelementptr %12[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %289 = llvm.load volatile %288 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c6_i64_114 = arith.constant 6 : i64
    %290 = llvm.load %7 : !llvm.ptr -> i64
    %291 = arith.cmpi ult, %290, %c6_i64_114 : i64
    scf.if %291 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %290, %c6_i64_114 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    call @f55(%arg0, %280, %289) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_115 = arith.constant 0 : i64
    %292 = llvm.load %7 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c0_i64_115 : i64
    scf.if %293 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %292, %c0_i64_115 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c9_i32_116 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_116) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f27(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c3_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %4, %c3_i64 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c1_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %7, %c1_i64 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %c1048824_i32 = arith.constant 1048824 : i32
    %c3_i64_2 = arith.constant 3 : i64
    %9 = llvm.load %3 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c3_i64_2 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %9, %c3_i64_2 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c6_i64 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %12, %c6_i64 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %14 = call @f66(%arg0, %6, %c1048824_i32, %11) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_3 = arith.constant 1 : i64
    %15 = llvm.load %3 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c1_i64_3 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %15, %c1_i64_3 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%14 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f28(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c1_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %7, %c1_i64 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %9 = llvm.load %3 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c3_i64 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %9, %c3_i64 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c3_i64_2 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %12, %c3_i64_2 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %11 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %18 = llvm.load %3 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_3 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %18, %c3_i64_3 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    llvm.store %17, %1 : i32, !llvm.ptr
    %c3_i64_4 = arith.constant 3 : i64
    %20 = llvm.load %3 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_4 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %20, %c3_i64_4 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c0_i32_5 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %17, %c0_i32_5 : i32
    %23 = arith.extui %22 : i1 to i32
    %c1_i64_6 = arith.constant 1 : i64
    %24 = llvm.load %3 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c1_i64_6 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %24, %c1_i64_6 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c0_i32_7 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %23, %c0_i32_7 : i32
    cf.cond_br %26, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c1_i64_8 = arith.constant 1 : i64
    %27 = llvm.load %3 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c1_i64_8 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %27, %c1_i64_8 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c3_i64_9 = arith.constant 3 : i64
    %29 = llvm.load %3 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_9 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %29, %c3_i64_9 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_10 = arith.constant 3 : i64
    %32 = llvm.load %3 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c3_i64_10 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %32, %c3_i64_10 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %34 = arith.extui %31 : i32 to i64
    %35 = arith.addi %34, %c4_i64 : i64
    %36 = llvm.getelementptr %6[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %38 = llvm.load %3 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_11 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %38, %c3_i64_11 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_12 = arith.constant 1 : i64
    %41 = llvm.load %3 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c1_i64_12 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %41, %c1_i64_12 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c1_i32_13 = arith.constant 1 : i32
    %c6_i64 = arith.constant 6 : i64
    %43 = llvm.load %3 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c6_i64 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %43, %c6_i64 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    call @f10(%arg0, %37, %40, %c1_i32_13) : (!llvm.ptr, i32, i32, i32) -> ()
    %c1_i64_14 = arith.constant 1 : i64
    %45 = llvm.load %3 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c1_i64_14 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %45, %c1_i64_14 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f29(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c1_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %7, %c1_i64 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %9 = llvm.load %3 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c3_i64 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %9, %c3_i64 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c3_i64_2 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %12, %c3_i64_2 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %11 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %18 = llvm.load %3 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_3 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %18, %c3_i64_3 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    llvm.store %17, %1 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %20 = llvm.load %3 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c1_i64_4 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %20, %c1_i64_4 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c3_i64_5 = arith.constant 3 : i64
    %22 = llvm.load %3 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c3_i64_5 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %22, %c3_i64_5 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    %24 = arith.ori %17, %c-2147483648_i32 : i32
    %c1_i64_6 = arith.constant 1 : i64
    %25 = llvm.load %3 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_6 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %25, %c1_i64_6 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    %c-2147483648_i32_7 = arith.constant -2147483648 : i32
    %c3_i64_8 = arith.constant 3 : i64
    %27 = llvm.load %3 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c3_i64_8 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %27, %c3_i64_8 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    %29 = arith.cmpi eq, %24, %c-2147483648_i32_7 : i32
    %30 = arith.extui %29 : i1 to i32
    %c1_i64_9 = arith.constant 1 : i64
    %31 = llvm.load %3 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c1_i64_9 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %31, %c1_i64_9 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    %c0_i32_10 = arith.constant 0 : i32
    %33 = arith.cmpi ne, %30, %c0_i32_10 : i32
    cf.cond_br %33, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c1_i64_11 = arith.constant 1 : i64
    %34 = llvm.load %3 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c1_i64_11 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %34, %c1_i64_11 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c3_i64_12 = arith.constant 3 : i64
    %36 = llvm.load %3 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_12 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %36, %c3_i64_12 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_13 = arith.constant 3 : i64
    %39 = llvm.load %3 : !llvm.ptr -> i64
    %40 = arith.cmpi ult, %39, %c3_i64_13 : i64
    scf.if %40 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %39, %c3_i64_13 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %41 = arith.extui %38 : i32 to i64
    %42 = arith.addi %41, %c4_i64 : i64
    %43 = llvm.getelementptr %6[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_14 = arith.constant 3 : i64
    %45 = llvm.load %3 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_14 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %45, %c3_i64_14 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_15 = arith.constant 1 : i64
    %48 = llvm.load %3 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c1_i64_15 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %48, %c1_i64_15 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    %c1_i32_16 = arith.constant 1 : i32
    %c6_i64 = arith.constant 6 : i64
    %50 = llvm.load %3 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c6_i64 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %50, %c6_i64 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    call @f10(%arg0, %44, %47, %c1_i32_16) : (!llvm.ptr, i32, i32, i32) -> ()
    %c1_i64_17 = arith.constant 1 : i64
    %52 = llvm.load %3 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c1_i64_17 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %54 = arith.subi %52, %c1_i64_17 : i64
      llvm.store %54, %3 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f30(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %19 = arith.subi %7, %c3_i64 : i64
      llvm.store %19, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c1_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %19 = arith.subi %10, %c1_i64 : i64
      llvm.store %19, %3 : i64, !llvm.ptr
    }
    %c0_i32 = arith.constant 0 : i32
    %c3_i64_2 = arith.constant 3 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c3_i64_2 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %19 = arith.subi %12, %c3_i64_2 : i64
      llvm.store %19, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %9 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %17 = llvm.load %3 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c1_i64_3 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %19 = arith.subi %17, %c1_i64_3 : i64
      llvm.store %19, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f31(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_3 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %4, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %5 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %11, %c3_i64 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %13 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %14 = llvm.load %5 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c1_i64 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %14, %c1_i64 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_4 = arith.constant 3 : i64
    %16 = llvm.load %5 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64_4 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %16, %c3_i64_4 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %18 = arith.subi %13, %c16_i32 : i32
    %c3_i64_5 = arith.constant 3 : i64
    %19 = llvm.load %5 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_5 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %19, %c3_i64_5 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %2 : i32, !llvm.ptr
    %c3_i64_6 = arith.constant 3 : i64
    %21 = llvm.load %5 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_6 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %21, %c3_i64_6 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %23 = llvm.load %5 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c1_i64_7 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %23, %c1_i64_7 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c1_i64_8 = arith.constant 1 : i64
    %25 = llvm.load %5 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_8 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %25, %c1_i64_8 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c1_i64_9 = arith.constant 1 : i64
    %27 = llvm.load %5 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c1_i64_9 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %27, %c1_i64_9 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c1_i64_10 = arith.constant 1 : i64
    %29 = llvm.load %5 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c1_i64_10 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %29, %c1_i64_10 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c3_i64_11 = arith.constant 3 : i64
    %31 = llvm.load %5 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_11 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %31, %c3_i64_11 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_12 = arith.constant 1 : i64
    %34 = llvm.load %5 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c1_i64_12 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %34, %c1_i64_12 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c128_i32 = arith.constant 128 : i32
    %c3_i64_13 = arith.constant 3 : i64
    %36 = llvm.load %5 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_13 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %36, %c3_i64_13 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %38 = arith.cmpi ult, %33, %c128_i32 : i32
    %39 = arith.extui %38 : i1 to i32
    %c1_i64_14 = arith.constant 1 : i64
    %40 = llvm.load %5 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c1_i64_14 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %40, %c1_i64_14 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c0_i32_15 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %39, %c0_i32_15 : i32
    cf.cond_br %42, ^bb6, ^bb7
  ^bb2(%43: i32):  // pred: ^bb3
    return %43 : i32
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %c3_i64_16 = arith.constant 3 : i64
    %44 = llvm.load %5 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c3_i64_16 : i64
    scf.if %45 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %44, %c3_i64_16 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_17 = arith.constant 1 : i64
    %47 = llvm.load %5 : !llvm.ptr -> i64
    %48 = arith.cmpi ult, %47, %c1_i64_17 : i64
    scf.if %48 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %47, %c1_i64_17 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c16_i32_18 = arith.constant 16 : i32
    %c3_i64_19 = arith.constant 3 : i64
    %49 = llvm.load %5 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c3_i64_19 : i64
    scf.if %50 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %49, %c3_i64_19 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %51 = arith.addi %46, %c16_i32_18 : i32
    %c3_i64_20 = arith.constant 3 : i64
    %52 = llvm.load %5 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c3_i64_20 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %52, %c3_i64_20 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    llvm.store %51, %7 : i32, !llvm.ptr
    %c1_i64_21 = arith.constant 1 : i64
    %54 = llvm.load %5 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %c1_i64_21 : i64
    scf.if %55 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %54, %c1_i64_21 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c0_i32_22 = arith.constant 0 : i32
    %c1_i64_23 = arith.constant 1 : i64
    %56 = llvm.load %5 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c1_i64_23 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %56, %c1_i64_23 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c0_i32_22 : i32)
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %c1_i64_24 = arith.constant 1 : i64
    %58 = llvm.load %5 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c1_i64_24 : i64
    scf.if %59 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %58, %c1_i64_24 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c3_i64_25 = arith.constant 3 : i64
    %60 = llvm.load %5 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_25 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %60, %c3_i64_25 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_26 = arith.constant 3 : i64
    %63 = llvm.load %5 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c3_i64_26 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %63, %c3_i64_26 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %65 = arith.extui %62 : i32 to i64
    %66 = arith.addi %65, %c0_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_27 = arith.constant 3 : i64
    %69 = llvm.load %5 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c3_i64_27 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %69, %c3_i64_27 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %71 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_28 = arith.constant 3 : i64
    %72 = llvm.load %5 : !llvm.ptr -> i64
    %73 = arith.cmpi ult, %72, %c3_i64_28 : i64
    scf.if %73 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %72, %c3_i64_28 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %74 = arith.extui %71 : i32 to i64
    %75 = arith.addi %74, %c8_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_29 = arith.constant 3 : i64
    %78 = llvm.load %5 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c3_i64_29 : i64
    scf.if %79 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %78, %c3_i64_29 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    llvm.store %77, %3 : i32, !llvm.ptr
    %c3_i64_30 = arith.constant 3 : i64
    %80 = llvm.load %5 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_30 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %80, %c3_i64_30 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %82 = arith.subi %68, %77 : i32
    %c3_i64_31 = arith.constant 3 : i64
    %83 = llvm.load %5 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_31 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %83, %c3_i64_31 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_32 = arith.constant 3 : i64
    %86 = llvm.load %5 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %c3_i64_32 : i64
    scf.if %87 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %86, %c3_i64_32 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %88 = arith.cmpi uge, %82, %85 : i32
    %89 = arith.extui %88 : i1 to i32
    %c1_i64_33 = arith.constant 1 : i64
    %90 = llvm.load %5 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c1_i64_33 : i64
    scf.if %91 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %90, %c1_i64_33 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c0_i32_34 = arith.constant 0 : i32
    %92 = arith.cmpi ne, %89, %c0_i32_34 : i32
    cf.cond_br %92, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %c3_i64_35 = arith.constant 3 : i64
    %93 = llvm.load %5 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c3_i64_35 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %93, %c3_i64_35 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_36 = arith.constant 3 : i64
    %96 = llvm.load %5 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c3_i64_36 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %96, %c3_i64_36 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %98 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_37 = arith.constant 1 : i64
    %99 = llvm.load %5 : !llvm.ptr -> i64
    %100 = arith.cmpi ult, %99, %c1_i64_37 : i64
    scf.if %100 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %99, %c1_i64_37 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c63_i32 = arith.constant 63 : i32
    %c3_i64_38 = arith.constant 3 : i64
    %101 = llvm.load %5 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c3_i64_38 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %101, %c3_i64_38 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %103 = arith.andi %98, %c63_i32 : i32
    %c1_i64_39 = arith.constant 1 : i64
    %104 = llvm.load %5 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c1_i64_39 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %104, %c1_i64_39 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c128_i32_40 = arith.constant 128 : i32
    %c3_i64_41 = arith.constant 3 : i64
    %106 = llvm.load %5 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c3_i64_41 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %106, %c3_i64_41 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %108 = arith.ori %103, %c128_i32_40 : i32
    %c3_i64_42 = arith.constant 3 : i64
    %109 = llvm.load %5 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c3_i64_42 : i64
    scf.if %110 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %109, %c3_i64_42 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c13_i64 = arith.constant 13 : i64
    %111 = arith.extui %95 : i32 to i64
    %112 = arith.addi %111, %c13_i64 : i64
    %113 = llvm.getelementptr %10[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = arith.trunci %108 : i32 to i8
    llvm.store volatile %114, %113 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_43 = arith.constant 3 : i64
    %115 = llvm.load %5 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c3_i64_43 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %115, %c3_i64_43 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %117 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_44 = arith.constant 3 : i64
    %118 = llvm.load %5 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_44 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %118, %c3_i64_44 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %120 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_45 = arith.constant 1 : i64
    %121 = llvm.load %5 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %c1_i64_45 : i64
    scf.if %122 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %121, %c1_i64_45 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c6_i32 = arith.constant 6 : i32
    %c3_i64_46 = arith.constant 3 : i64
    %123 = llvm.load %5 : !llvm.ptr -> i64
    %124 = arith.cmpi ult, %123, %c3_i64_46 : i64
    scf.if %124 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %123, %c3_i64_46 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %125 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %126 = scf.if %125 -> (i32) {
      %525 = arith.shrui %120, %c6_i32 : i32
      scf.yield %525 : i32
    } else {
      %c0_i32_212 = arith.constant 0 : i32
      scf.yield %c0_i32_212 : i32
    }
    %c1_i64_47 = arith.constant 1 : i64
    %127 = llvm.load %5 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c1_i64_47 : i64
    scf.if %128 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %127, %c1_i64_47 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c192_i32 = arith.constant 192 : i32
    %c3_i64_48 = arith.constant 3 : i64
    %129 = llvm.load %5 : !llvm.ptr -> i64
    %130 = arith.cmpi ult, %129, %c3_i64_48 : i64
    scf.if %130 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %129, %c3_i64_48 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %131 = arith.ori %126, %c192_i32 : i32
    %c3_i64_49 = arith.constant 3 : i64
    %132 = llvm.load %5 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c3_i64_49 : i64
    scf.if %133 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %132, %c3_i64_49 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %134 = arith.extui %117 : i32 to i64
    %135 = arith.addi %134, %c12_i64 : i64
    %136 = llvm.getelementptr %10[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = arith.trunci %131 : i32 to i8
    llvm.store volatile %137, %136 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_50 = arith.constant 1 : i64
    %138 = llvm.load %5 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %c1_i64_50 : i64
    scf.if %139 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %138, %c1_i64_50 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c2_i32 = arith.constant 2 : i32
    %c3_i64_51 = arith.constant 3 : i64
    %140 = llvm.load %5 : !llvm.ptr -> i64
    %141 = arith.cmpi ult, %140, %c3_i64_51 : i64
    scf.if %141 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %140, %c3_i64_51 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    %c1_i64_52 = arith.constant 1 : i64
    %142 = llvm.load %5 : !llvm.ptr -> i64
    %143 = arith.cmpi ult, %142, %c1_i64_52 : i64
    scf.if %143 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %142, %c1_i64_52 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %c1_i64_53 = arith.constant 1 : i64
    %144 = llvm.load %5 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c1_i64_53 : i64
    scf.if %145 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %144, %c1_i64_53 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c3_i64_54 = arith.constant 3 : i64
    %146 = llvm.load %5 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c3_i64_54 : i64
    scf.if %147 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %146, %c3_i64_54 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %148 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_55 = arith.constant 3 : i64
    %149 = llvm.load %5 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c3_i64_55 : i64
    scf.if %150 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %149, %c3_i64_55 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c8_i64_56 = arith.constant 8 : i64
    %151 = arith.extui %148 : i32 to i64
    %152 = arith.addi %151, %c8_i64_56 : i64
    %153 = llvm.getelementptr %10[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_57 = arith.constant 3 : i64
    %155 = llvm.load %5 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %c3_i64_57 : i64
    scf.if %156 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %155, %c3_i64_57 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    llvm.store %154, %3 : i32, !llvm.ptr
    %c3_i64_58 = arith.constant 3 : i64
    %157 = llvm.load %5 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c3_i64_58 : i64
    scf.if %158 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %157, %c3_i64_58 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %159 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_59 = arith.constant 3 : i64
    %160 = llvm.load %5 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_59 : i64
    scf.if %161 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %160, %c3_i64_59 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c0_i64_60 = arith.constant 0 : i64
    %162 = arith.extui %159 : i32 to i64
    %163 = arith.addi %162, %c0_i64_60 : i64
    %164 = llvm.getelementptr %10[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_61 = arith.constant 3 : i64
    %166 = llvm.load %5 : !llvm.ptr -> i64
    %167 = arith.cmpi ult, %166, %c3_i64_61 : i64
    scf.if %167 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %166, %c3_i64_61 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %168 = arith.cmpi eq, %154, %165 : i32
    %169 = arith.extui %168 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %170 = arith.cmpi eq, %169, %c0_i32_62 : i32
    %171 = arith.extui %170 : i1 to i32
    %c1_i64_63 = arith.constant 1 : i64
    %172 = llvm.load %5 : !llvm.ptr -> i64
    %173 = arith.cmpi ult, %172, %c1_i64_63 : i64
    scf.if %173 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %172, %c1_i64_63 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c0_i32_64 = arith.constant 0 : i32
    %174 = arith.cmpi ne, %171, %c0_i32_64 : i32
    cf.cond_br %174, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %c3_i64_65 = arith.constant 3 : i64
    %175 = llvm.load %5 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c3_i64_65 : i64
    scf.if %176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %175, %c3_i64_65 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %177 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_66 = arith.constant 1 : i64
    %178 = llvm.load %5 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c1_i64_66 : i64
    scf.if %179 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %178, %c1_i64_66 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c0_i32_67 = arith.constant 0 : i32
    %c3_i64_68 = arith.constant 3 : i64
    %180 = llvm.load %5 : !llvm.ptr -> i64
    %181 = arith.cmpi ult, %180, %c3_i64_68 : i64
    scf.if %181 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %180, %c3_i64_68 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c12_i64_69 = arith.constant 12 : i64
    %182 = arith.extui %177 : i32 to i64
    %183 = arith.addi %182, %c12_i64_69 : i64
    %184 = llvm.getelementptr %10[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_67, %184 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_70 = arith.constant 3 : i64
    %185 = llvm.load %5 : !llvm.ptr -> i64
    %186 = arith.cmpi ult, %185, %c3_i64_70 : i64
    scf.if %186 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %185, %c3_i64_70 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %187 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_71 = arith.constant 1 : i64
    %188 = llvm.load %5 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c1_i64_71 : i64
    scf.if %189 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %188, %c1_i64_71 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c2048_i32 = arith.constant 2048 : i32
    %c3_i64_72 = arith.constant 3 : i64
    %190 = llvm.load %5 : !llvm.ptr -> i64
    %191 = arith.cmpi ult, %190, %c3_i64_72 : i64
    scf.if %191 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %190, %c3_i64_72 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %192 = arith.cmpi ult, %187, %c2048_i32 : i32
    %193 = arith.extui %192 : i1 to i32
    %c1_i64_73 = arith.constant 1 : i64
    %194 = llvm.load %5 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c1_i64_73 : i64
    scf.if %195 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %194, %c1_i64_73 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c0_i32_74 = arith.constant 0 : i32
    %196 = arith.cmpi ne, %193, %c0_i32_74 : i32
    cf.cond_br %196, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %c1_i64_75 = arith.constant 1 : i64
    %197 = llvm.load %5 : !llvm.ptr -> i64
    %198 = arith.cmpi ult, %197, %c1_i64_75 : i64
    scf.if %198 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %197, %c1_i64_75 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c3_i64_76 = arith.constant 3 : i64
    %199 = llvm.load %5 : !llvm.ptr -> i64
    %200 = arith.cmpi ult, %199, %c3_i64_76 : i64
    scf.if %200 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %199, %c3_i64_76 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %201 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_77 = arith.constant 1 : i64
    %202 = llvm.load %5 : !llvm.ptr -> i64
    %203 = arith.cmpi ult, %202, %c1_i64_77 : i64
    scf.if %203 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %202, %c1_i64_77 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c65536_i32 = arith.constant 65536 : i32
    %c3_i64_78 = arith.constant 3 : i64
    %204 = llvm.load %5 : !llvm.ptr -> i64
    %205 = arith.cmpi ult, %204, %c3_i64_78 : i64
    scf.if %205 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %204, %c3_i64_78 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %206 = arith.cmpi uge, %201, %c65536_i32 : i32
    %207 = arith.extui %206 : i1 to i32
    %c1_i64_79 = arith.constant 1 : i64
    %208 = llvm.load %5 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c1_i64_79 : i64
    scf.if %209 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %208, %c1_i64_79 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c0_i32_80 = arith.constant 0 : i32
    %210 = arith.cmpi ne, %207, %c0_i32_80 : i32
    cf.cond_br %210, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %c3_i64_81 = arith.constant 3 : i64
    %211 = llvm.load %5 : !llvm.ptr -> i64
    %212 = arith.cmpi ult, %211, %c3_i64_81 : i64
    scf.if %212 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %211, %c3_i64_81 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %213 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_82 = arith.constant 3 : i64
    %214 = llvm.load %5 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c3_i64_82 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %214, %c3_i64_82 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %216 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_83 = arith.constant 1 : i64
    %217 = llvm.load %5 : !llvm.ptr -> i64
    %218 = arith.cmpi ult, %217, %c1_i64_83 : i64
    scf.if %218 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %217, %c1_i64_83 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c63_i32_84 = arith.constant 63 : i32
    %c3_i64_85 = arith.constant 3 : i64
    %219 = llvm.load %5 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c3_i64_85 : i64
    scf.if %220 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %219, %c3_i64_85 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %221 = arith.andi %216, %c63_i32_84 : i32
    %c1_i64_86 = arith.constant 1 : i64
    %222 = llvm.load %5 : !llvm.ptr -> i64
    %223 = arith.cmpi ult, %222, %c1_i64_86 : i64
    scf.if %223 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %222, %c1_i64_86 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c128_i32_87 = arith.constant 128 : i32
    %c3_i64_88 = arith.constant 3 : i64
    %224 = llvm.load %5 : !llvm.ptr -> i64
    %225 = arith.cmpi ult, %224, %c3_i64_88 : i64
    scf.if %225 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %224, %c3_i64_88 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %226 = arith.ori %221, %c128_i32_87 : i32
    %c3_i64_89 = arith.constant 3 : i64
    %227 = llvm.load %5 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %c3_i64_89 : i64
    scf.if %228 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %227, %c3_i64_89 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c15_i64 = arith.constant 15 : i64
    %229 = arith.extui %213 : i32 to i64
    %230 = arith.addi %229, %c15_i64 : i64
    %231 = llvm.getelementptr %10[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %232 = arith.trunci %226 : i32 to i8
    llvm.store volatile %232, %231 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_90 = arith.constant 3 : i64
    %233 = llvm.load %5 : !llvm.ptr -> i64
    %234 = arith.cmpi ult, %233, %c3_i64_90 : i64
    scf.if %234 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %233, %c3_i64_90 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %235 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_91 = arith.constant 3 : i64
    %236 = llvm.load %5 : !llvm.ptr -> i64
    %237 = arith.cmpi ult, %236, %c3_i64_91 : i64
    scf.if %237 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %236, %c3_i64_91 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %238 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_92 = arith.constant 1 : i64
    %239 = llvm.load %5 : !llvm.ptr -> i64
    %240 = arith.cmpi ult, %239, %c1_i64_92 : i64
    scf.if %240 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %239, %c1_i64_92 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c6_i32_93 = arith.constant 6 : i32
    %c3_i64_94 = arith.constant 3 : i64
    %241 = llvm.load %5 : !llvm.ptr -> i64
    %242 = arith.cmpi ult, %241, %c3_i64_94 : i64
    scf.if %242 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %241, %c3_i64_94 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c31_i32_95 = arith.constant 31 : i32
    %243 = arith.cmpi ule, %c6_i32_93, %c31_i32_95 : i32
    %244 = scf.if %243 -> (i32) {
      %525 = arith.shrui %238, %c6_i32_93 : i32
      scf.yield %525 : i32
    } else {
      %c0_i32_212 = arith.constant 0 : i32
      scf.yield %c0_i32_212 : i32
    }
    %c1_i64_96 = arith.constant 1 : i64
    %245 = llvm.load %5 : !llvm.ptr -> i64
    %246 = arith.cmpi ult, %245, %c1_i64_96 : i64
    scf.if %246 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %245, %c1_i64_96 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c63_i32_97 = arith.constant 63 : i32
    %c3_i64_98 = arith.constant 3 : i64
    %247 = llvm.load %5 : !llvm.ptr -> i64
    %248 = arith.cmpi ult, %247, %c3_i64_98 : i64
    scf.if %248 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %247, %c3_i64_98 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %249 = arith.andi %244, %c63_i32_97 : i32
    %c1_i64_99 = arith.constant 1 : i64
    %250 = llvm.load %5 : !llvm.ptr -> i64
    %251 = arith.cmpi ult, %250, %c1_i64_99 : i64
    scf.if %251 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %250, %c1_i64_99 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c128_i32_100 = arith.constant 128 : i32
    %c3_i64_101 = arith.constant 3 : i64
    %252 = llvm.load %5 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c3_i64_101 : i64
    scf.if %253 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %252, %c3_i64_101 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %254 = arith.ori %249, %c128_i32_100 : i32
    %c3_i64_102 = arith.constant 3 : i64
    %255 = llvm.load %5 : !llvm.ptr -> i64
    %256 = arith.cmpi ult, %255, %c3_i64_102 : i64
    scf.if %256 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %255, %c3_i64_102 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c14_i64 = arith.constant 14 : i64
    %257 = arith.extui %235 : i32 to i64
    %258 = arith.addi %257, %c14_i64 : i64
    %259 = llvm.getelementptr %10[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = arith.trunci %254 : i32 to i8
    llvm.store volatile %260, %259 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_103 = arith.constant 3 : i64
    %261 = llvm.load %5 : !llvm.ptr -> i64
    %262 = arith.cmpi ult, %261, %c3_i64_103 : i64
    scf.if %262 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %261, %c3_i64_103 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %263 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_104 = arith.constant 3 : i64
    %264 = llvm.load %5 : !llvm.ptr -> i64
    %265 = arith.cmpi ult, %264, %c3_i64_104 : i64
    scf.if %265 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %264, %c3_i64_104 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %266 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_105 = arith.constant 1 : i64
    %267 = llvm.load %5 : !llvm.ptr -> i64
    %268 = arith.cmpi ult, %267, %c1_i64_105 : i64
    scf.if %268 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %267, %c1_i64_105 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c12_i32 = arith.constant 12 : i32
    %c3_i64_106 = arith.constant 3 : i64
    %269 = llvm.load %5 : !llvm.ptr -> i64
    %270 = arith.cmpi ult, %269, %c3_i64_106 : i64
    scf.if %270 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %269, %c3_i64_106 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c31_i32_107 = arith.constant 31 : i32
    %271 = arith.cmpi ule, %c12_i32, %c31_i32_107 : i32
    %272 = scf.if %271 -> (i32) {
      %525 = arith.shrui %266, %c12_i32 : i32
      scf.yield %525 : i32
    } else {
      %c0_i32_212 = arith.constant 0 : i32
      scf.yield %c0_i32_212 : i32
    }
    %c1_i64_108 = arith.constant 1 : i64
    %273 = llvm.load %5 : !llvm.ptr -> i64
    %274 = arith.cmpi ult, %273, %c1_i64_108 : i64
    scf.if %274 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %273, %c1_i64_108 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c63_i32_109 = arith.constant 63 : i32
    %c3_i64_110 = arith.constant 3 : i64
    %275 = llvm.load %5 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_110 : i64
    scf.if %276 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %275, %c3_i64_110 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %277 = arith.andi %272, %c63_i32_109 : i32
    %c1_i64_111 = arith.constant 1 : i64
    %278 = llvm.load %5 : !llvm.ptr -> i64
    %279 = arith.cmpi ult, %278, %c1_i64_111 : i64
    scf.if %279 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %278, %c1_i64_111 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c128_i32_112 = arith.constant 128 : i32
    %c3_i64_113 = arith.constant 3 : i64
    %280 = llvm.load %5 : !llvm.ptr -> i64
    %281 = arith.cmpi ult, %280, %c3_i64_113 : i64
    scf.if %281 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %280, %c3_i64_113 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %282 = arith.ori %277, %c128_i32_112 : i32
    %c3_i64_114 = arith.constant 3 : i64
    %283 = llvm.load %5 : !llvm.ptr -> i64
    %284 = arith.cmpi ult, %283, %c3_i64_114 : i64
    scf.if %284 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %283, %c3_i64_114 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c13_i64_115 = arith.constant 13 : i64
    %285 = arith.extui %263 : i32 to i64
    %286 = arith.addi %285, %c13_i64_115 : i64
    %287 = llvm.getelementptr %10[%286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %288 = arith.trunci %282 : i32 to i8
    llvm.store volatile %288, %287 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_116 = arith.constant 3 : i64
    %289 = llvm.load %5 : !llvm.ptr -> i64
    %290 = arith.cmpi ult, %289, %c3_i64_116 : i64
    scf.if %290 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %289, %c3_i64_116 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %291 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_117 = arith.constant 3 : i64
    %292 = llvm.load %5 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c3_i64_117 : i64
    scf.if %293 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %292, %c3_i64_117 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %294 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_118 = arith.constant 1 : i64
    %295 = llvm.load %5 : !llvm.ptr -> i64
    %296 = arith.cmpi ult, %295, %c1_i64_118 : i64
    scf.if %296 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %295, %c1_i64_118 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c18_i32 = arith.constant 18 : i32
    %c3_i64_119 = arith.constant 3 : i64
    %297 = llvm.load %5 : !llvm.ptr -> i64
    %298 = arith.cmpi ult, %297, %c3_i64_119 : i64
    scf.if %298 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %297, %c3_i64_119 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c31_i32_120 = arith.constant 31 : i32
    %299 = arith.cmpi ule, %c18_i32, %c31_i32_120 : i32
    %300 = scf.if %299 -> (i32) {
      %525 = arith.shrui %294, %c18_i32 : i32
      scf.yield %525 : i32
    } else {
      %c0_i32_212 = arith.constant 0 : i32
      scf.yield %c0_i32_212 : i32
    }
    %c1_i64_121 = arith.constant 1 : i64
    %301 = llvm.load %5 : !llvm.ptr -> i64
    %302 = arith.cmpi ult, %301, %c1_i64_121 : i64
    scf.if %302 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %301, %c1_i64_121 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c7_i32 = arith.constant 7 : i32
    %c3_i64_122 = arith.constant 3 : i64
    %303 = llvm.load %5 : !llvm.ptr -> i64
    %304 = arith.cmpi ult, %303, %c3_i64_122 : i64
    scf.if %304 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %303, %c3_i64_122 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %305 = arith.andi %300, %c7_i32 : i32
    %c1_i64_123 = arith.constant 1 : i64
    %306 = llvm.load %5 : !llvm.ptr -> i64
    %307 = arith.cmpi ult, %306, %c1_i64_123 : i64
    scf.if %307 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %306, %c1_i64_123 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c240_i32 = arith.constant 240 : i32
    %c3_i64_124 = arith.constant 3 : i64
    %308 = llvm.load %5 : !llvm.ptr -> i64
    %309 = arith.cmpi ult, %308, %c3_i64_124 : i64
    scf.if %309 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %308, %c3_i64_124 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %310 = arith.ori %305, %c240_i32 : i32
    %c3_i64_125 = arith.constant 3 : i64
    %311 = llvm.load %5 : !llvm.ptr -> i64
    %312 = arith.cmpi ult, %311, %c3_i64_125 : i64
    scf.if %312 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %311, %c3_i64_125 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c12_i64_126 = arith.constant 12 : i64
    %313 = arith.extui %291 : i32 to i64
    %314 = arith.addi %313, %c12_i64_126 : i64
    %315 = llvm.getelementptr %10[%314] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %316 = arith.trunci %310 : i32 to i8
    llvm.store volatile %316, %315 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_127 = arith.constant 1 : i64
    %317 = llvm.load %5 : !llvm.ptr -> i64
    %318 = arith.cmpi ult, %317, %c1_i64_127 : i64
    scf.if %318 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %317, %c1_i64_127 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c3_i64_128 = arith.constant 3 : i64
    %319 = llvm.load %5 : !llvm.ptr -> i64
    %320 = arith.cmpi ult, %319, %c3_i64_128 : i64
    scf.if %320 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %319, %c3_i64_128 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    %c1_i64_129 = arith.constant 1 : i64
    %321 = llvm.load %5 : !llvm.ptr -> i64
    %322 = arith.cmpi ult, %321, %c1_i64_129 : i64
    scf.if %322 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %321, %c1_i64_129 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %c3_i64_130 = arith.constant 3 : i64
    %323 = llvm.load %5 : !llvm.ptr -> i64
    %324 = arith.cmpi ult, %323, %c3_i64_130 : i64
    scf.if %324 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %323, %c3_i64_130 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %325 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_131 = arith.constant 3 : i64
    %326 = llvm.load %5 : !llvm.ptr -> i64
    %327 = arith.cmpi ult, %326, %c3_i64_131 : i64
    scf.if %327 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %326, %c3_i64_131 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %328 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_132 = arith.constant 1 : i64
    %329 = llvm.load %5 : !llvm.ptr -> i64
    %330 = arith.cmpi ult, %329, %c1_i64_132 : i64
    scf.if %330 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %329, %c1_i64_132 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c63_i32_133 = arith.constant 63 : i32
    %c3_i64_134 = arith.constant 3 : i64
    %331 = llvm.load %5 : !llvm.ptr -> i64
    %332 = arith.cmpi ult, %331, %c3_i64_134 : i64
    scf.if %332 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %331, %c3_i64_134 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %333 = arith.andi %328, %c63_i32_133 : i32
    %c1_i64_135 = arith.constant 1 : i64
    %334 = llvm.load %5 : !llvm.ptr -> i64
    %335 = arith.cmpi ult, %334, %c1_i64_135 : i64
    scf.if %335 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %334, %c1_i64_135 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c128_i32_136 = arith.constant 128 : i32
    %c3_i64_137 = arith.constant 3 : i64
    %336 = llvm.load %5 : !llvm.ptr -> i64
    %337 = arith.cmpi ult, %336, %c3_i64_137 : i64
    scf.if %337 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %336, %c3_i64_137 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %338 = arith.ori %333, %c128_i32_136 : i32
    %c3_i64_138 = arith.constant 3 : i64
    %339 = llvm.load %5 : !llvm.ptr -> i64
    %340 = arith.cmpi ult, %339, %c3_i64_138 : i64
    scf.if %340 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %339, %c3_i64_138 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c14_i64_139 = arith.constant 14 : i64
    %341 = arith.extui %325 : i32 to i64
    %342 = arith.addi %341, %c14_i64_139 : i64
    %343 = llvm.getelementptr %10[%342] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %344 = arith.trunci %338 : i32 to i8
    llvm.store volatile %344, %343 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_140 = arith.constant 3 : i64
    %345 = llvm.load %5 : !llvm.ptr -> i64
    %346 = arith.cmpi ult, %345, %c3_i64_140 : i64
    scf.if %346 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %345, %c3_i64_140 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %347 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_141 = arith.constant 3 : i64
    %348 = llvm.load %5 : !llvm.ptr -> i64
    %349 = arith.cmpi ult, %348, %c3_i64_141 : i64
    scf.if %349 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %348, %c3_i64_141 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %350 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_142 = arith.constant 1 : i64
    %351 = llvm.load %5 : !llvm.ptr -> i64
    %352 = arith.cmpi ult, %351, %c1_i64_142 : i64
    scf.if %352 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %351, %c1_i64_142 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c12_i32_143 = arith.constant 12 : i32
    %c3_i64_144 = arith.constant 3 : i64
    %353 = llvm.load %5 : !llvm.ptr -> i64
    %354 = arith.cmpi ult, %353, %c3_i64_144 : i64
    scf.if %354 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %353, %c3_i64_144 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c31_i32_145 = arith.constant 31 : i32
    %355 = arith.cmpi ule, %c12_i32_143, %c31_i32_145 : i32
    %356 = scf.if %355 -> (i32) {
      %525 = arith.shrui %350, %c12_i32_143 : i32
      scf.yield %525 : i32
    } else {
      %c0_i32_212 = arith.constant 0 : i32
      scf.yield %c0_i32_212 : i32
    }
    %c1_i64_146 = arith.constant 1 : i64
    %357 = llvm.load %5 : !llvm.ptr -> i64
    %358 = arith.cmpi ult, %357, %c1_i64_146 : i64
    scf.if %358 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %357, %c1_i64_146 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c224_i32 = arith.constant 224 : i32
    %c3_i64_147 = arith.constant 3 : i64
    %359 = llvm.load %5 : !llvm.ptr -> i64
    %360 = arith.cmpi ult, %359, %c3_i64_147 : i64
    scf.if %360 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %359, %c3_i64_147 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %361 = arith.ori %356, %c224_i32 : i32
    %c3_i64_148 = arith.constant 3 : i64
    %362 = llvm.load %5 : !llvm.ptr -> i64
    %363 = arith.cmpi ult, %362, %c3_i64_148 : i64
    scf.if %363 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %362, %c3_i64_148 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c12_i64_149 = arith.constant 12 : i64
    %364 = arith.extui %347 : i32 to i64
    %365 = arith.addi %364, %c12_i64_149 : i64
    %366 = llvm.getelementptr %10[%365] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %367 = arith.trunci %361 : i32 to i8
    llvm.store volatile %367, %366 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_150 = arith.constant 3 : i64
    %368 = llvm.load %5 : !llvm.ptr -> i64
    %369 = arith.cmpi ult, %368, %c3_i64_150 : i64
    scf.if %369 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %368, %c3_i64_150 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %370 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_151 = arith.constant 3 : i64
    %371 = llvm.load %5 : !llvm.ptr -> i64
    %372 = arith.cmpi ult, %371, %c3_i64_151 : i64
    scf.if %372 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %371, %c3_i64_151 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %373 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_152 = arith.constant 1 : i64
    %374 = llvm.load %5 : !llvm.ptr -> i64
    %375 = arith.cmpi ult, %374, %c1_i64_152 : i64
    scf.if %375 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %374, %c1_i64_152 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c6_i32_153 = arith.constant 6 : i32
    %c3_i64_154 = arith.constant 3 : i64
    %376 = llvm.load %5 : !llvm.ptr -> i64
    %377 = arith.cmpi ult, %376, %c3_i64_154 : i64
    scf.if %377 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %376, %c3_i64_154 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c31_i32_155 = arith.constant 31 : i32
    %378 = arith.cmpi ule, %c6_i32_153, %c31_i32_155 : i32
    %379 = scf.if %378 -> (i32) {
      %525 = arith.shrui %373, %c6_i32_153 : i32
      scf.yield %525 : i32
    } else {
      %c0_i32_212 = arith.constant 0 : i32
      scf.yield %c0_i32_212 : i32
    }
    %c1_i64_156 = arith.constant 1 : i64
    %380 = llvm.load %5 : !llvm.ptr -> i64
    %381 = arith.cmpi ult, %380, %c1_i64_156 : i64
    scf.if %381 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %380, %c1_i64_156 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c63_i32_157 = arith.constant 63 : i32
    %c3_i64_158 = arith.constant 3 : i64
    %382 = llvm.load %5 : !llvm.ptr -> i64
    %383 = arith.cmpi ult, %382, %c3_i64_158 : i64
    scf.if %383 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %382, %c3_i64_158 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %384 = arith.andi %379, %c63_i32_157 : i32
    %c1_i64_159 = arith.constant 1 : i64
    %385 = llvm.load %5 : !llvm.ptr -> i64
    %386 = arith.cmpi ult, %385, %c1_i64_159 : i64
    scf.if %386 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %385, %c1_i64_159 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c128_i32_160 = arith.constant 128 : i32
    %c3_i64_161 = arith.constant 3 : i64
    %387 = llvm.load %5 : !llvm.ptr -> i64
    %388 = arith.cmpi ult, %387, %c3_i64_161 : i64
    scf.if %388 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %387, %c3_i64_161 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %389 = arith.ori %384, %c128_i32_160 : i32
    %c3_i64_162 = arith.constant 3 : i64
    %390 = llvm.load %5 : !llvm.ptr -> i64
    %391 = arith.cmpi ult, %390, %c3_i64_162 : i64
    scf.if %391 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %390, %c3_i64_162 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c13_i64_163 = arith.constant 13 : i64
    %392 = arith.extui %370 : i32 to i64
    %393 = arith.addi %392, %c13_i64_163 : i64
    %394 = llvm.getelementptr %10[%393] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %395 = arith.trunci %389 : i32 to i8
    llvm.store volatile %395, %394 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_164 = arith.constant 1 : i64
    %396 = llvm.load %5 : !llvm.ptr -> i64
    %397 = arith.cmpi ult, %396, %c1_i64_164 : i64
    scf.if %397 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %396, %c1_i64_164 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c3_i32 = arith.constant 3 : i32
    %c3_i64_165 = arith.constant 3 : i64
    %398 = llvm.load %5 : !llvm.ptr -> i64
    %399 = arith.cmpi ult, %398, %c3_i64_165 : i64
    scf.if %399 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %398, %c3_i64_165 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    %c1_i64_166 = arith.constant 1 : i64
    %400 = llvm.load %5 : !llvm.ptr -> i64
    %401 = arith.cmpi ult, %400, %c1_i64_166 : i64
    scf.if %401 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %400, %c1_i64_166 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %c3_i64_167 = arith.constant 3 : i64
    %402 = llvm.load %5 : !llvm.ptr -> i64
    %403 = arith.cmpi ult, %402, %c3_i64_167 : i64
    scf.if %403 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %402, %c3_i64_167 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %404 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_168 = arith.constant 3 : i64
    %405 = llvm.load %5 : !llvm.ptr -> i64
    %406 = arith.cmpi ult, %405, %c3_i64_168 : i64
    scf.if %406 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %405, %c3_i64_168 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %407 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_169 = arith.constant 1 : i64
    %408 = llvm.load %5 : !llvm.ptr -> i64
    %409 = arith.cmpi ult, %408, %c1_i64_169 : i64
    scf.if %409 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %408, %c1_i64_169 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c1_i32_170 = arith.constant 1 : i32
    %c3_i64_171 = arith.constant 3 : i64
    %410 = llvm.load %5 : !llvm.ptr -> i64
    %411 = arith.cmpi ult, %410, %c3_i64_171 : i64
    scf.if %411 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %410, %c3_i64_171 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %412 = arith.addi %407, %c1_i32_170 : i32
    %c3_i64_172 = arith.constant 3 : i64
    %413 = llvm.load %5 : !llvm.ptr -> i64
    %414 = arith.cmpi ult, %413, %c3_i64_172 : i64
    scf.if %414 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %413, %c3_i64_172 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c8_i64_173 = arith.constant 8 : i64
    %415 = arith.extui %404 : i32 to i64
    %416 = arith.addi %415, %c8_i64_173 : i64
    %417 = llvm.getelementptr %10[%416] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %412, %417 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_174 = arith.constant 3 : i64
    %418 = llvm.load %5 : !llvm.ptr -> i64
    %419 = arith.cmpi ult, %418, %c3_i64_174 : i64
    scf.if %419 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %418, %c3_i64_174 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %420 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_175 = arith.constant 3 : i64
    %421 = llvm.load %5 : !llvm.ptr -> i64
    %422 = arith.cmpi ult, %421, %c3_i64_175 : i64
    scf.if %422 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %421, %c3_i64_175 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %423 = arith.extui %420 : i32 to i64
    %424 = arith.addi %423, %c4_i64 : i64
    %425 = llvm.getelementptr %10[%424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %426 = llvm.load volatile %425 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_176 = arith.constant 3 : i64
    %427 = llvm.load %5 : !llvm.ptr -> i64
    %428 = arith.cmpi ult, %427, %c3_i64_176 : i64
    scf.if %428 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %427, %c3_i64_176 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %429 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_177 = arith.constant 3 : i64
    %430 = llvm.load %5 : !llvm.ptr -> i64
    %431 = arith.cmpi ult, %430, %c3_i64_177 : i64
    scf.if %431 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %430, %c3_i64_177 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %432 = arith.addi %426, %429 : i32
    %c3_i64_178 = arith.constant 3 : i64
    %433 = llvm.load %5 : !llvm.ptr -> i64
    %434 = arith.cmpi ult, %433, %c3_i64_178 : i64
    scf.if %434 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %433, %c3_i64_178 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %435 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_179 = arith.constant 3 : i64
    %436 = llvm.load %5 : !llvm.ptr -> i64
    %437 = arith.cmpi ult, %436, %c3_i64_179 : i64
    scf.if %437 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %436, %c3_i64_179 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c0_i64_180 = arith.constant 0 : i64
    %438 = arith.extui %432 : i32 to i64
    %439 = arith.addi %438, %c0_i64_180 : i64
    %440 = llvm.getelementptr %10[%439] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %441 = arith.trunci %435 : i32 to i8
    llvm.store volatile %441, %440 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_181 = arith.constant 1 : i64
    %442 = llvm.load %5 : !llvm.ptr -> i64
    %443 = arith.cmpi ult, %442, %c1_i64_181 : i64
    scf.if %443 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %442, %c1_i64_181 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %c3_i64_182 = arith.constant 3 : i64
    %444 = llvm.load %5 : !llvm.ptr -> i64
    %445 = arith.cmpi ult, %444, %c3_i64_182 : i64
    scf.if %445 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %444, %c3_i64_182 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %446 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %447 = llvm.load %5 : !llvm.ptr -> i64
    %448 = arith.cmpi ult, %447, %c6_i64 : i64
    scf.if %448 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %447, %c6_i64 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    call @f32(%arg0, %446) : (!llvm.ptr, i32) -> ()
    %c1_i64_183 = arith.constant 1 : i64
    %449 = llvm.load %5 : !llvm.ptr -> i64
    %450 = arith.cmpi ult, %449, %c1_i64_183 : i64
    scf.if %450 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %449, %c1_i64_183 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %c3_i64_184 = arith.constant 3 : i64
    %451 = llvm.load %5 : !llvm.ptr -> i64
    %452 = arith.cmpi ult, %451, %c3_i64_184 : i64
    scf.if %452 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %451, %c3_i64_184 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %453 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_185 = arith.constant 3 : i64
    %454 = llvm.load %5 : !llvm.ptr -> i64
    %455 = arith.cmpi ult, %454, %c3_i64_185 : i64
    scf.if %455 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %454, %c3_i64_185 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c4_i64_186 = arith.constant 4 : i64
    %456 = arith.extui %453 : i32 to i64
    %457 = arith.addi %456, %c4_i64_186 : i64
    %458 = llvm.getelementptr %10[%457] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %459 = llvm.load volatile %458 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_187 = arith.constant 3 : i64
    %460 = llvm.load %5 : !llvm.ptr -> i64
    %461 = arith.cmpi ult, %460, %c3_i64_187 : i64
    scf.if %461 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %460, %c3_i64_187 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %462 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_188 = arith.constant 3 : i64
    %463 = llvm.load %5 : !llvm.ptr -> i64
    %464 = arith.cmpi ult, %463, %c3_i64_188 : i64
    scf.if %464 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %463, %c3_i64_188 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %465 = arith.addi %459, %462 : i32
    %c3_i64_189 = arith.constant 3 : i64
    %466 = llvm.load %5 : !llvm.ptr -> i64
    %467 = arith.cmpi ult, %466, %c3_i64_189 : i64
    scf.if %467 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %466, %c3_i64_189 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %468 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_190 = arith.constant 1 : i64
    %469 = llvm.load %5 : !llvm.ptr -> i64
    %470 = arith.cmpi ult, %469, %c1_i64_190 : i64
    scf.if %470 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %469, %c1_i64_190 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c12_i32_191 = arith.constant 12 : i32
    %c3_i64_192 = arith.constant 3 : i64
    %471 = llvm.load %5 : !llvm.ptr -> i64
    %472 = arith.cmpi ult, %471, %c3_i64_192 : i64
    scf.if %472 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %471, %c3_i64_192 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %473 = arith.addi %468, %c12_i32_191 : i32
    %c3_i64_193 = arith.constant 3 : i64
    %474 = llvm.load %5 : !llvm.ptr -> i64
    %475 = arith.cmpi ult, %474, %c3_i64_193 : i64
    scf.if %475 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %474, %c3_i64_193 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %476 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64_194 = arith.constant 6 : i64
    %477 = llvm.load %5 : !llvm.ptr -> i64
    %478 = arith.cmpi ult, %477, %c6_i64_194 : i64
    scf.if %478 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %477, %c6_i64_194 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %479 = call @f77(%arg0, %465, %473, %476) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_195 = arith.constant 1 : i64
    %480 = llvm.load %5 : !llvm.ptr -> i64
    %481 = arith.cmpi ult, %480, %c1_i64_195 : i64
    scf.if %481 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %480, %c1_i64_195 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c3_i64_196 = arith.constant 3 : i64
    %482 = llvm.load %5 : !llvm.ptr -> i64
    %483 = arith.cmpi ult, %482, %c3_i64_196 : i64
    scf.if %483 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %482, %c3_i64_196 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %484 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_197 = arith.constant 3 : i64
    %485 = llvm.load %5 : !llvm.ptr -> i64
    %486 = arith.cmpi ult, %485, %c3_i64_197 : i64
    scf.if %486 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %485, %c3_i64_197 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %487 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_198 = arith.constant 3 : i64
    %488 = llvm.load %5 : !llvm.ptr -> i64
    %489 = arith.cmpi ult, %488, %c3_i64_198 : i64
    scf.if %489 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %488, %c3_i64_198 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %490 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_199 = arith.constant 3 : i64
    %491 = llvm.load %5 : !llvm.ptr -> i64
    %492 = arith.cmpi ult, %491, %c3_i64_199 : i64
    scf.if %492 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %491, %c3_i64_199 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %493 = arith.addi %487, %490 : i32
    %c3_i64_200 = arith.constant 3 : i64
    %494 = llvm.load %5 : !llvm.ptr -> i64
    %495 = arith.cmpi ult, %494, %c3_i64_200 : i64
    scf.if %495 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %494, %c3_i64_200 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c8_i64_201 = arith.constant 8 : i64
    %496 = arith.extui %484 : i32 to i64
    %497 = arith.addi %496, %c8_i64_201 : i64
    %498 = llvm.getelementptr %10[%497] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %493, %498 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_202 = arith.constant 1 : i64
    %499 = llvm.load %5 : !llvm.ptr -> i64
    %500 = arith.cmpi ult, %499, %c1_i64_202 : i64
    scf.if %500 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %499, %c1_i64_202 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %c3_i64_203 = arith.constant 3 : i64
    %501 = llvm.load %5 : !llvm.ptr -> i64
    %502 = arith.cmpi ult, %501, %c3_i64_203 : i64
    scf.if %502 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %501, %c3_i64_203 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %503 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_204 = arith.constant 3 : i64
    %504 = llvm.load %5 : !llvm.ptr -> i64
    %505 = arith.cmpi ult, %504, %c3_i64_204 : i64
    scf.if %505 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %504, %c3_i64_204 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %506 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_205 = arith.constant 3 : i64
    %507 = llvm.load %5 : !llvm.ptr -> i64
    %508 = arith.cmpi ult, %507, %c3_i64_205 : i64
    scf.if %508 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %507, %c3_i64_205 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %509 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64_206 = arith.constant 6 : i64
    %510 = llvm.load %5 : !llvm.ptr -> i64
    %511 = arith.cmpi ult, %510, %c6_i64_206 : i64
    scf.if %511 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %510, %c6_i64_206 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    call @f26(%arg0, %503, %506, %509) : (!llvm.ptr, i32, i32, i32) -> ()
    %c3_i64_207 = arith.constant 3 : i64
    %512 = llvm.load %5 : !llvm.ptr -> i64
    %513 = arith.cmpi ult, %512, %c3_i64_207 : i64
    scf.if %513 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %512, %c3_i64_207 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %514 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_208 = arith.constant 3 : i64
    %515 = llvm.load %5 : !llvm.ptr -> i64
    %516 = arith.cmpi ult, %515, %c3_i64_208 : i64
    scf.if %516 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %515, %c3_i64_208 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    %c8_i64_209 = arith.constant 8 : i64
    %517 = arith.extui %514 : i32 to i64
    %518 = arith.addi %517, %c8_i64_209 : i64
    %519 = llvm.getelementptr %10[%518] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %520 = llvm.load volatile %519 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_210 = arith.constant 3 : i64
    %521 = llvm.load %5 : !llvm.ptr -> i64
    %522 = arith.cmpi ult, %521, %c3_i64_210 : i64
    scf.if %522 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %521, %c3_i64_210 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    llvm.store %520, %3 : i32, !llvm.ptr
    %c1_i64_211 = arith.constant 1 : i64
    %523 = llvm.load %5 : !llvm.ptr -> i64
    %524 = arith.cmpi ult, %523, %c1_i64_211 : i64
    scf.if %524 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %525 = arith.subi %523, %c1_i64_211 : i64
      llvm.store %525, %5 : i64, !llvm.ptr
    }
    cf.br ^bb13
  }
  func.func @f32(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_5 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %13 = llvm.load %7 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64 : i64
    scf.if %14 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %13, %c3_i64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %15 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %16 = llvm.load %7 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c1_i64 : i64
    scf.if %17 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %16, %c1_i64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_6 = arith.constant 3 : i64
    %18 = llvm.load %7 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_6 : i64
    scf.if %19 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %18, %c3_i64_6 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %20 = arith.subi %15, %c32_i32 : i32
    %c3_i64_7 = arith.constant 3 : i64
    %21 = llvm.load %7 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_7 : i64
    scf.if %22 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %21, %c3_i64_7 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %1 : i32, !llvm.ptr
    %c3_i64_8 = arith.constant 3 : i64
    %23 = llvm.load %7 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_8 : i64
    scf.if %24 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %23, %c3_i64_8 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %25 = llvm.load %7 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_9 : i64
    scf.if %26 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %25, %c1_i64_9 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c3_i64_10 = arith.constant 3 : i64
    %27 = llvm.load %7 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c3_i64_10 : i64
    scf.if %28 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %27, %c3_i64_10 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %30 = llvm.load %7 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c3_i64_11 : i64
    scf.if %31 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %30, %c3_i64_11 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %32 = arith.extui %29 : i32 to i64
    %33 = arith.addi %32, %c0_i64 : i64
    %34 = llvm.getelementptr %12[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_12 = arith.constant 3 : i64
    %36 = llvm.load %7 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_12 : i64
    scf.if %37 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %36, %c3_i64_12 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %35, %2 : i32, !llvm.ptr
    %c1_i64_13 = arith.constant 1 : i64
    %38 = llvm.load %7 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c1_i64_13 : i64
    scf.if %39 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %38, %c1_i64_13 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_14 = arith.constant 3 : i64
    %40 = llvm.load %7 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c3_i64_14 : i64
    scf.if %41 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %40, %c3_i64_14 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %42 = arith.cmpi eq, %35, %c-1_i32 : i32
    %43 = arith.extui %42 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %44 = arith.cmpi eq, %43, %c0_i32_15 : i32
    %45 = arith.extui %44 : i1 to i32
    %c1_i64_16 = arith.constant 1 : i64
    %46 = llvm.load %7 : !llvm.ptr -> i64
    %47 = arith.cmpi ult, %46, %c1_i64_16 : i64
    scf.if %47 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %46, %c1_i64_16 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_17 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %45, %c0_i32_17 : i32
    cf.cond_br %48, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i64_18 = arith.constant 1 : i64
    %49 = llvm.load %7 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c1_i64_18 : i64
    scf.if %50 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %49, %c1_i64_18 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i32_19 = arith.constant 1 : i32
    %c3_i64_20 = arith.constant 3 : i64
    %51 = llvm.load %7 : !llvm.ptr -> i64
    %52 = arith.cmpi ult, %51, %c3_i64_20 : i64
    scf.if %52 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %51, %c3_i64_20 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_19, %3 : i32, !llvm.ptr
    %c3_i64_21 = arith.constant 3 : i64
    %53 = llvm.load %7 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c3_i64_21 : i64
    scf.if %54 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %53, %c3_i64_21 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_22 = arith.constant 1 : i64
    %56 = llvm.load %7 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c1_i64_22 : i64
    scf.if %57 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %56, %c1_i64_22 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i32_23 = arith.constant 1 : i32
    %c3_i64_24 = arith.constant 3 : i64
    %58 = llvm.load %7 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c3_i64_24 : i64
    scf.if %59 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %58, %c3_i64_24 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %60 = arith.cmpi ule, %c1_i32_23, %c31_i32 : i32
    %61 = scf.if %60 -> (i32) {
      %294 = arith.shli %55, %c1_i32_23 : i32
      scf.yield %294 : i32
    } else {
      %c0_i32_120 = arith.constant 0 : i32
      scf.yield %c0_i32_120 : i32
    }
    %c3_i64_25 = arith.constant 3 : i64
    %62 = llvm.load %7 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c3_i64_25 : i64
    scf.if %63 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %62, %c3_i64_25 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %61, %4 : i32, !llvm.ptr
    %c3_i64_26 = arith.constant 3 : i64
    %64 = llvm.load %7 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c3_i64_26 : i64
    scf.if %65 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %64, %c3_i64_26 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_27 = arith.constant 1 : i64
    %67 = llvm.load %7 : !llvm.ptr -> i64
    %68 = arith.cmpi ult, %67, %c1_i64_27 : i64
    scf.if %68 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %67, %c1_i64_27 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i32_28 = arith.constant 1 : i32
    %c3_i64_29 = arith.constant 3 : i64
    %69 = llvm.load %7 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c3_i64_29 : i64
    scf.if %70 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %69, %c3_i64_29 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %71 = arith.addi %66, %c1_i32_28 : i32
    %c3_i64_30 = arith.constant 3 : i64
    %72 = llvm.load %7 : !llvm.ptr -> i64
    %73 = arith.cmpi ult, %72, %c3_i64_30 : i64
    scf.if %73 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %72, %c3_i64_30 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %71, %5 : i32, !llvm.ptr
    %c3_i64_31 = arith.constant 3 : i64
    %74 = llvm.load %7 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c3_i64_31 : i64
    scf.if %75 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %74, %c3_i64_31 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %76 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_32 = arith.constant 3 : i64
    %77 = llvm.load %7 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c3_i64_32 : i64
    scf.if %78 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %77, %c3_i64_32 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %79 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_33 = arith.constant 3 : i64
    %80 = llvm.load %7 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_33 : i64
    scf.if %81 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %80, %c3_i64_33 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %82 = arith.cmpi ugt, %76, %79 : i32
    %83 = arith.extui %82 : i1 to i32
    %c1_i64_34 = arith.constant 1 : i64
    %84 = llvm.load %7 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c1_i64_34 : i64
    scf.if %85 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %84, %c1_i64_34 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_35 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %83, %c0_i32_35 : i32
    %87 = arith.select %86, %61, %71 : i32
    %c3_i64_36 = arith.constant 3 : i64
    %88 = llvm.load %7 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c3_i64_36 : i64
    scf.if %89 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %88, %c3_i64_36 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %87, %4 : i32, !llvm.ptr
    %c1_i64_37 = arith.constant 1 : i64
    %90 = llvm.load %7 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c1_i64_37 : i64
    scf.if %91 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %90, %c1_i64_37 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_38 = arith.constant 3 : i64
    %92 = llvm.load %7 : !llvm.ptr -> i64
    %93 = arith.cmpi ult, %92, %c3_i64_38 : i64
    scf.if %93 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %92, %c3_i64_38 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %94 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_39 = arith.constant 1 : i64
    %95 = llvm.load %7 : !llvm.ptr -> i64
    %96 = arith.cmpi ult, %95, %c1_i64_39 : i64
    scf.if %96 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %95, %c1_i64_39 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i32_40 = arith.constant 8 : i32
    %c3_i64_41 = arith.constant 3 : i64
    %97 = llvm.load %7 : !llvm.ptr -> i64
    %98 = arith.cmpi ult, %97, %c3_i64_41 : i64
    scf.if %98 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %97, %c3_i64_41 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %99 = arith.cmpi ugt, %94, %c8_i32_40 : i32
    %100 = arith.extui %99 : i1 to i32
    %c1_i64_42 = arith.constant 1 : i64
    %101 = llvm.load %7 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c1_i64_42 : i64
    scf.if %102 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %101, %c1_i64_42 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_43 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %100, %c0_i32_43 : i32
    %104 = arith.select %103, %87, %c8_i32 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %105 = llvm.load %7 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %c3_i64_44 : i64
    scf.if %106 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %105, %c3_i64_44 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %104, %4 : i32, !llvm.ptr
    %c1_i64_45 = arith.constant 1 : i64
    %107 = llvm.load %7 : !llvm.ptr -> i64
    %108 = arith.cmpi ult, %107, %c1_i64_45 : i64
    scf.if %108 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %107, %c1_i64_45 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c-1_i32_46 = arith.constant -1 : i32
    %c3_i64_47 = arith.constant 3 : i64
    %109 = llvm.load %7 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c3_i64_47 : i64
    scf.if %110 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %109, %c3_i64_47 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %111 = arith.xori %104, %c-1_i32_46 : i32
    %c1_i64_48 = arith.constant 1 : i64
    %112 = llvm.load %7 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c1_i64_48 : i64
    scf.if %113 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %112, %c1_i64_48 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c31_i32_49 = arith.constant 31 : i32
    %c3_i64_50 = arith.constant 3 : i64
    %114 = llvm.load %7 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %c3_i64_50 : i64
    scf.if %115 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %114, %c3_i64_50 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c31_i32_51 = arith.constant 31 : i32
    %116 = arith.cmpi ule, %c31_i32_49, %c31_i32_51 : i32
    %117 = scf.if %116 -> (i32) {
      %294 = arith.shrui %111, %c31_i32_49 : i32
      scf.yield %294 : i32
    } else {
      %c0_i32_120 = arith.constant 0 : i32
      scf.yield %c0_i32_120 : i32
    }
    %c3_i64_52 = arith.constant 3 : i64
    %118 = llvm.load %7 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_52 : i64
    scf.if %119 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %118, %c3_i64_52 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %117, %5 : i32, !llvm.ptr
    %c1_i64_53 = arith.constant 1 : i64
    %120 = llvm.load %7 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c1_i64_53 : i64
    scf.if %121 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %120, %c1_i64_53 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i64_54 = arith.constant 1 : i64
    %122 = llvm.load %7 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %c1_i64_54 : i64
    scf.if %123 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %122, %c1_i64_54 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c3_i64_55 = arith.constant 3 : i64
    %124 = llvm.load %7 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c3_i64_55 : i64
    scf.if %125 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %124, %c3_i64_55 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %126 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_56 = arith.constant 1 : i64
    %127 = llvm.load %7 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c1_i64_56 : i64
    scf.if %128 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %127, %c1_i64_56 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_57 = arith.constant 0 : i32
    %129 = arith.cmpi ne, %126, %c0_i32_57 : i32
    cf.cond_br %129, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i64_58 = arith.constant 1 : i64
    %130 = llvm.load %7 : !llvm.ptr -> i64
    %131 = arith.cmpi ult, %130, %c1_i64_58 : i64
    scf.if %131 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %130, %c1_i64_58 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_59 = arith.constant 0 : i32
    %c1_i64_60 = arith.constant 1 : i64
    %132 = llvm.load %7 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c1_i64_60 : i64
    scf.if %133 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %132, %c1_i64_60 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_61 = arith.constant 0 : i32
    %c6_i64 = arith.constant 6 : i64
    %134 = llvm.load %7 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c6_i64 : i64
    scf.if %135 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %134, %c6_i64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    call @f55(%arg0, %c0_i32_59, %c0_i32_61) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_62 = arith.constant 0 : i64
    %136 = llvm.load %7 : !llvm.ptr -> i64
    %137 = arith.cmpi ult, %136, %c0_i64_62 : i64
    scf.if %137 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %136, %c0_i64_62 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %c3_i64_63 = arith.constant 3 : i64
    %138 = llvm.load %7 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %c3_i64_63 : i64
    scf.if %139 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %138, %c3_i64_63 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_64 = arith.constant 3 : i64
    %141 = llvm.load %7 : !llvm.ptr -> i64
    %142 = arith.cmpi ult, %141, %c3_i64_64 : i64
    scf.if %142 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %141, %c3_i64_64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %143 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_65 = arith.constant 3 : i64
    %144 = llvm.load %7 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c3_i64_65 : i64
    scf.if %145 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %144, %c3_i64_65 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %146 = arith.extui %140 : i32 to i64
    %147 = arith.addi %146, %c24_i64 : i64
    %148 = llvm.getelementptr %12[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %148 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_66 = arith.constant 3 : i64
    %149 = llvm.load %7 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c3_i64_66 : i64
    scf.if %150 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %149, %c3_i64_66 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %151 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_67 = arith.constant 1 : i64
    %152 = llvm.load %7 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c1_i64_67 : i64
    scf.if %153 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %152, %c1_i64_67 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i32_68 = arith.constant 8 : i32
    %c3_i64_69 = arith.constant 3 : i64
    %154 = llvm.load %7 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c3_i64_69 : i64
    scf.if %155 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %154, %c3_i64_69 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %156 = arith.addi %151, %c8_i32_68 : i32
    %c3_i64_70 = arith.constant 3 : i64
    %157 = llvm.load %7 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c3_i64_70 : i64
    scf.if %158 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %157, %c3_i64_70 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %159 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_71 = arith.constant 3 : i64
    %160 = llvm.load %7 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_71 : i64
    scf.if %161 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %160, %c3_i64_71 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %162 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_72 = arith.constant 3 : i64
    %163 = llvm.load %7 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c3_i64_72 : i64
    scf.if %164 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %163, %c3_i64_72 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %165 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_73 = arith.constant 1 : i64
    %166 = llvm.load %7 : !llvm.ptr -> i64
    %167 = arith.cmpi ult, %166, %c1_i64_73 : i64
    scf.if %167 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %166, %c1_i64_73 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c20_i32 = arith.constant 20 : i32
    %c3_i64_74 = arith.constant 3 : i64
    %168 = llvm.load %7 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c3_i64_74 : i64
    scf.if %169 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %168, %c3_i64_74 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %170 = arith.addi %165, %c20_i32 : i32
    %c6_i64_75 = arith.constant 6 : i64
    %171 = llvm.load %7 : !llvm.ptr -> i64
    %172 = arith.cmpi ult, %171, %c6_i64_75 : i64
    scf.if %172 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %171, %c6_i64_75 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    call @f34(%arg0, %156, %159, %162, %170) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %c1_i64_76 = arith.constant 1 : i64
    %173 = llvm.load %7 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c1_i64_76 : i64
    scf.if %174 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %173, %c1_i64_76 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c3_i64_77 = arith.constant 3 : i64
    %175 = llvm.load %7 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c3_i64_77 : i64
    scf.if %176 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %175, %c3_i64_77 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %177 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_78 = arith.constant 3 : i64
    %178 = llvm.load %7 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c3_i64_78 : i64
    scf.if %179 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %178, %c3_i64_78 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %180 = arith.extui %177 : i32 to i64
    %181 = arith.addi %180, %c8_i64 : i64
    %182 = llvm.getelementptr %12[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %183 = llvm.load volatile %182 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_79 = arith.constant 3 : i64
    %184 = llvm.load %7 : !llvm.ptr -> i64
    %185 = arith.cmpi ult, %184, %c3_i64_79 : i64
    scf.if %185 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %184, %c3_i64_79 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_80 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %183, %c0_i32_80 : i32
    %187 = arith.extui %186 : i1 to i32
    %c1_i64_81 = arith.constant 1 : i64
    %188 = llvm.load %7 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c1_i64_81 : i64
    scf.if %189 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %188, %c1_i64_81 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_82 = arith.constant 0 : i32
    %190 = arith.cmpi ne, %187, %c0_i32_82 : i32
    cf.cond_br %190, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %c3_i64_83 = arith.constant 3 : i64
    %191 = llvm.load %7 : !llvm.ptr -> i64
    %192 = arith.cmpi ult, %191, %c3_i64_83 : i64
    scf.if %192 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %191, %c3_i64_83 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %193 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_84 = arith.constant 3 : i64
    %194 = llvm.load %7 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c3_i64_84 : i64
    scf.if %195 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %194, %c3_i64_84 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %196 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_85 = arith.constant 3 : i64
    %197 = llvm.load %7 : !llvm.ptr -> i64
    %198 = arith.cmpi ult, %197, %c3_i64_85 : i64
    scf.if %198 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %197, %c3_i64_85 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %199 = arith.extui %193 : i32 to i64
    %200 = arith.addi %199, %c28_i64 : i64
    %201 = llvm.getelementptr %12[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %196, %201 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_86 = arith.constant 3 : i64
    %202 = llvm.load %7 : !llvm.ptr -> i64
    %203 = arith.cmpi ult, %202, %c3_i64_86 : i64
    scf.if %203 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %202, %c3_i64_86 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %204 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_87 = arith.constant 3 : i64
    %205 = llvm.load %7 : !llvm.ptr -> i64
    %206 = arith.cmpi ult, %205, %c3_i64_87 : i64
    scf.if %206 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %205, %c3_i64_87 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %207 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_88 = arith.constant 3 : i64
    %208 = llvm.load %7 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c3_i64_88 : i64
    scf.if %209 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %208, %c3_i64_88 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %210 = arith.extui %207 : i32 to i64
    %211 = arith.addi %210, %c4_i64 : i64
    %212 = llvm.getelementptr %12[%211] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %213 = llvm.load volatile %212 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_89 = arith.constant 3 : i64
    %214 = llvm.load %7 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c3_i64_89 : i64
    scf.if %215 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %214, %c3_i64_89 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %216 = arith.extui %204 : i32 to i64
    %217 = arith.addi %216, %c20_i64 : i64
    %218 = llvm.getelementptr %12[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %213, %218 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_90 = arith.constant 1 : i64
    %219 = llvm.load %7 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c1_i64_90 : i64
    scf.if %220 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %219, %c1_i64_90 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c1_i64_91 = arith.constant 1 : i64
    %221 = llvm.load %7 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c1_i64_91 : i64
    scf.if %222 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %221, %c1_i64_91 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_92 = arith.constant 0 : i32
    %c3_i64_93 = arith.constant 3 : i64
    %223 = llvm.load %7 : !llvm.ptr -> i64
    %224 = arith.cmpi ult, %223, %c3_i64_93 : i64
    scf.if %224 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %223, %c3_i64_93 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_92, %3 : i32, !llvm.ptr
    %c1_i64_94 = arith.constant 1 : i64
    %225 = llvm.load %7 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c1_i64_94 : i64
    scf.if %226 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %225, %c1_i64_94 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %c3_i64_95 = arith.constant 3 : i64
    %227 = llvm.load %7 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %c3_i64_95 : i64
    scf.if %228 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %227, %c3_i64_95 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %229 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_96 = arith.constant 3 : i64
    %230 = llvm.load %7 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c3_i64_96 : i64
    scf.if %231 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %230, %c3_i64_96 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %232 = arith.extui %229 : i32 to i64
    %233 = arith.addi %232, %c12_i64 : i64
    %234 = llvm.getelementptr %12[%233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %235 = llvm.load volatile %234 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_97 = arith.constant 3 : i64
    %236 = llvm.load %7 : !llvm.ptr -> i64
    %237 = arith.cmpi ult, %236, %c3_i64_97 : i64
    scf.if %237 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %236, %c3_i64_97 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %235, %2 : i32, !llvm.ptr
    %c3_i64_98 = arith.constant 3 : i64
    %238 = llvm.load %7 : !llvm.ptr -> i64
    %239 = arith.cmpi ult, %238, %c3_i64_98 : i64
    scf.if %239 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %238, %c3_i64_98 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %240 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_99 = arith.constant 3 : i64
    %241 = llvm.load %7 : !llvm.ptr -> i64
    %242 = arith.cmpi ult, %241, %c3_i64_99 : i64
    scf.if %242 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %241, %c3_i64_99 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %243 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_100 = arith.constant 3 : i64
    %244 = llvm.load %7 : !llvm.ptr -> i64
    %245 = arith.cmpi ult, %244, %c3_i64_100 : i64
    scf.if %245 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %244, %c3_i64_100 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i64_101 = arith.constant 0 : i64
    %246 = arith.extui %240 : i32 to i64
    %247 = arith.addi %246, %c0_i64_101 : i64
    %248 = llvm.getelementptr %12[%247] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %243, %248 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_102 = arith.constant 3 : i64
    %249 = llvm.load %7 : !llvm.ptr -> i64
    %250 = arith.cmpi ult, %249, %c3_i64_102 : i64
    scf.if %250 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %249, %c3_i64_102 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %251 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_103 = arith.constant 3 : i64
    %252 = llvm.load %7 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c3_i64_103 : i64
    scf.if %253 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %252, %c3_i64_103 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %254 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_104 = arith.constant 3 : i64
    %255 = llvm.load %7 : !llvm.ptr -> i64
    %256 = arith.cmpi ult, %255, %c3_i64_104 : i64
    scf.if %256 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %255, %c3_i64_104 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c4_i64_105 = arith.constant 4 : i64
    %257 = arith.extui %251 : i32 to i64
    %258 = arith.addi %257, %c4_i64_105 : i64
    %259 = llvm.getelementptr %12[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %254, %259 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_106 = arith.constant 3 : i64
    %260 = llvm.load %7 : !llvm.ptr -> i64
    %261 = arith.cmpi ult, %260, %c3_i64_106 : i64
    scf.if %261 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %260, %c3_i64_106 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %262 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_107 = arith.constant 1 : i64
    %263 = llvm.load %7 : !llvm.ptr -> i64
    %264 = arith.cmpi ult, %263, %c1_i64_107 : i64
    scf.if %264 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %263, %c1_i64_107 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c32_i32_108 = arith.constant 32 : i32
    %c3_i64_109 = arith.constant 3 : i64
    %265 = llvm.load %7 : !llvm.ptr -> i64
    %266 = arith.cmpi ult, %265, %c3_i64_109 : i64
    scf.if %266 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %265, %c3_i64_109 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %267 = arith.addi %262, %c32_i32_108 : i32
    %c3_i64_110 = arith.constant 3 : i64
    %268 = llvm.load %7 : !llvm.ptr -> i64
    %269 = arith.cmpi ult, %268, %c3_i64_110 : i64
    scf.if %269 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %268, %c3_i64_110 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %267, %9 : i32, !llvm.ptr
    %c1_i64_111 = arith.constant 1 : i64
    %270 = llvm.load %7 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %270, %c1_i64_111 : i64
    scf.if %271 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %270, %c1_i64_111 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %c3_i64_112 = arith.constant 3 : i64
    %272 = llvm.load %7 : !llvm.ptr -> i64
    %273 = arith.cmpi ult, %272, %c3_i64_112 : i64
    scf.if %273 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %272, %c3_i64_112 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %274 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_113 = arith.constant 3 : i64
    %275 = llvm.load %7 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_113 : i64
    scf.if %276 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %275, %c3_i64_113 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c12_i64_114 = arith.constant 12 : i64
    %277 = arith.extui %274 : i32 to i64
    %278 = arith.addi %277, %c12_i64_114 : i64
    %279 = llvm.getelementptr %12[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_115 = arith.constant 3 : i64
    %281 = llvm.load %7 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c3_i64_115 : i64
    scf.if %282 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %281, %c3_i64_115 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %283 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_116 = arith.constant 3 : i64
    %284 = llvm.load %7 : !llvm.ptr -> i64
    %285 = arith.cmpi ult, %284, %c3_i64_116 : i64
    scf.if %285 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %284, %c3_i64_116 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %286 = arith.extui %283 : i32 to i64
    %287 = arith.addi %286, %c16_i64 : i64
    %288 = llvm.getelementptr %12[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %289 = llvm.load volatile %288 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c6_i64_117 = arith.constant 6 : i64
    %290 = llvm.load %7 : !llvm.ptr -> i64
    %291 = arith.cmpi ult, %290, %c6_i64_117 : i64
    scf.if %291 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %290, %c6_i64_117 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    call @f55(%arg0, %280, %289) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_118 = arith.constant 0 : i64
    %292 = llvm.load %7 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c0_i64_118 : i64
    scf.if %293 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %292, %c0_i64_118 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c9_i32_119 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_119) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f33(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_3 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %4, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %9 = llvm.load %5 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c1_i64 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %9, %c1_i64 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %5 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %11, %c3_i64 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %14 = llvm.load %5 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c3_i64_4 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %14, %c3_i64_4 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %16 = arith.extui %13 : i32 to i64
    %17 = arith.addi %16, %c0_i64 : i64
    %18 = llvm.getelementptr %8[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_5 = arith.constant 3 : i64
    %20 = llvm.load %5 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_5 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %20, %c3_i64_5 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_6 = arith.constant 3 : i64
    %23 = llvm.load %5 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_6 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %23, %c3_i64_6 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %22 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_7 = arith.constant 3 : i64
    %29 = llvm.load %5 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_7 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %29, %c3_i64_7 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    llvm.store %28, %3 : i32, !llvm.ptr
    %c3_i64_8 = arith.constant 3 : i64
    %31 = llvm.load %5 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_8 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %31, %c3_i64_8 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %33 = arith.subi %19, %28 : i32
    %c3_i64_9 = arith.constant 3 : i64
    %34 = llvm.load %5 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c3_i64_9 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %34, %c3_i64_9 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_10 = arith.constant 3 : i64
    %37 = llvm.load %5 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c3_i64_10 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %37, %c3_i64_10 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %39 = arith.cmpi uge, %33, %36 : i32
    %40 = arith.extui %39 : i1 to i32
    %c1_i64_11 = arith.constant 1 : i64
    %41 = llvm.load %5 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c1_i64_11 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %41, %c1_i64_11 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c0_i32_12 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %40, %c0_i32_12 : i32
    cf.cond_br %43, ^bb3, ^bb4
  ^bb2(%44: i32):  // pred: ^bb3
    return %44 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c3_i64_13 = arith.constant 3 : i64
    %45 = llvm.load %5 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_13 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %45, %c3_i64_13 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_14 = arith.constant 3 : i64
    %48 = llvm.load %5 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c3_i64_14 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %48, %c3_i64_14 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %50 = arith.extui %47 : i32 to i64
    %51 = arith.addi %50, %c4_i64 : i64
    %52 = llvm.getelementptr %8[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %54 = llvm.load %5 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %c3_i64_15 : i64
    scf.if %55 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %54, %c3_i64_15 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_16 = arith.constant 3 : i64
    %57 = llvm.load %5 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_16 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %57, %c3_i64_16 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %59 = arith.addi %53, %56 : i32
    %c3_i64_17 = arith.constant 3 : i64
    %60 = llvm.load %5 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_17 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %60, %c3_i64_17 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_18 = arith.constant 3 : i64
    %63 = llvm.load %5 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c3_i64_18 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %63, %c3_i64_18 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %66 = llvm.load %5 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c6_i64 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %66, %c6_i64 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %68 = call @f77(%arg0, %59, %62, %65) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_19 = arith.constant 1 : i64
    %69 = llvm.load %5 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c1_i64_19 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %69, %c1_i64_19 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c3_i64_20 = arith.constant 3 : i64
    %71 = llvm.load %5 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c3_i64_20 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %71, %c3_i64_20 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_21 = arith.constant 3 : i64
    %74 = llvm.load %5 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c3_i64_21 : i64
    scf.if %75 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %74, %c3_i64_21 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %76 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_22 = arith.constant 3 : i64
    %77 = llvm.load %5 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c3_i64_22 : i64
    scf.if %78 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %77, %c3_i64_22 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_23 = arith.constant 3 : i64
    %80 = llvm.load %5 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_23 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %80, %c3_i64_23 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %82 = arith.addi %76, %79 : i32
    %c3_i64_24 = arith.constant 3 : i64
    %83 = llvm.load %5 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_24 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %83, %c3_i64_24 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c8_i64_25 = arith.constant 8 : i64
    %85 = arith.extui %73 : i32 to i64
    %86 = arith.addi %85, %c8_i64_25 : i64
    %87 = llvm.getelementptr %8[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %87 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_26 = arith.constant 1 : i64
    %88 = llvm.load %5 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c1_i64_26 : i64
    scf.if %89 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %88, %c1_i64_26 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c0_i32_27 = arith.constant 0 : i32
    %c1_i64_28 = arith.constant 1 : i64
    %90 = llvm.load %5 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c1_i64_28 : i64
    scf.if %91 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %90, %c1_i64_28 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c0_i32_27 : i32)
  ^bb4:  // pred: ^bb1
    %c3_i64_29 = arith.constant 3 : i64
    %92 = llvm.load %5 : !llvm.ptr -> i64
    %93 = arith.cmpi ult, %92, %c3_i64_29 : i64
    scf.if %93 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %92, %c3_i64_29 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %94 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_30 = arith.constant 3 : i64
    %95 = llvm.load %5 : !llvm.ptr -> i64
    %96 = arith.cmpi ult, %95, %c3_i64_30 : i64
    scf.if %96 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %95, %c3_i64_30 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %97 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_31 = arith.constant 3 : i64
    %98 = llvm.load %5 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_31 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %98, %c3_i64_31 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64_32 = arith.constant 6 : i64
    %101 = llvm.load %5 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c6_i64_32 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %101, %c6_i64_32 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    call @f26(%arg0, %94, %97, %100) : (!llvm.ptr, i32, i32, i32) -> ()
    %c3_i64_33 = arith.constant 3 : i64
    %103 = llvm.load %5 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %c3_i64_33 : i64
    scf.if %104 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %103, %c3_i64_33 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_34 = arith.constant 3 : i64
    %106 = llvm.load %5 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c3_i64_34 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %106, %c3_i64_34 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c8_i64_35 = arith.constant 8 : i64
    %108 = arith.extui %105 : i32 to i64
    %109 = arith.addi %108, %c8_i64_35 : i64
    %110 = llvm.getelementptr %8[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_36 = arith.constant 3 : i64
    %112 = llvm.load %5 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c3_i64_36 : i64
    scf.if %113 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %112, %c3_i64_36 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    llvm.store %111, %3 : i32, !llvm.ptr
    %c1_i64_37 = arith.constant 1 : i64
    %114 = llvm.load %5 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %c1_i64_37 : i64
    scf.if %115 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %114, %c1_i64_37 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f34(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_4 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %5, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %10 = llvm.load %6 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c1_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %10, %c1_i64 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c1_i64_5 = arith.constant 1 : i64
    %12 = llvm.load %6 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c1_i64_5 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %12, %c1_i64_5 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c1_i64_6 = arith.constant 1 : i64
    %14 = llvm.load %6 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c1_i64_6 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %14, %c1_i64_6 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %16 = llvm.load %6 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %16, %c3_i64 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_7 = arith.constant 3 : i64
    %19 = llvm.load %6 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_7 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %19, %c3_i64_7 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_8 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %18, %c0_i32_8 : i32
    %22 = arith.extui %21 : i1 to i32
    %c1_i64_9 = arith.constant 1 : i64
    %23 = llvm.load %6 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c1_i64_9 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %23, %c1_i64_9 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_10 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %22, %c0_i32_10 : i32
    cf.cond_br %25, ^bb5, ^bb6
  ^bb2:  // 2 preds: ^bb3, ^bb19
    return
  ^bb3:  // 3 preds: ^bb4, ^bb5, ^bb18
    %c3_i64_11 = arith.constant 3 : i64
    %26 = llvm.load %6 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c3_i64_11 : i64
    scf.if %27 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %26, %c3_i64_11 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_12 = arith.constant 1 : i64
    %29 = llvm.load %6 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c1_i64_12 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %29, %c1_i64_12 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c1_i32_13 = arith.constant 1 : i32
    %c3_i64_14 = arith.constant 3 : i64
    %31 = llvm.load %6 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_14 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %31, %c3_i64_14 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %33 = arith.extui %28 : i32 to i64
    %34 = arith.addi %33, %c0_i64 : i64
    %35 = llvm.getelementptr %9[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_13, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_15 = arith.constant 1 : i64
    %36 = llvm.load %6 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c1_i64_15 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %36, %c1_i64_15 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // pred: ^bb6
    %c3_i64_16 = arith.constant 3 : i64
    %38 = llvm.load %6 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_16 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %38, %c3_i64_16 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_17 = arith.constant 1 : i64
    %41 = llvm.load %6 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c1_i64_17 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %41, %c1_i64_17 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_18 = arith.constant 0 : i32
    %c3_i64_19 = arith.constant 3 : i64
    %43 = llvm.load %6 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c3_i64_19 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %43, %c3_i64_19 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %45 = arith.extui %40 : i32 to i64
    %46 = arith.addi %45, %c4_i64 : i64
    %47 = llvm.getelementptr %9[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_18, %47 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_20 = arith.constant 1 : i64
    %48 = llvm.load %6 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c1_i64_20 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %48, %c1_i64_20 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %c3_i64_21 = arith.constant 3 : i64
    %50 = llvm.load %6 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c3_i64_21 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %50, %c3_i64_21 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %52 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_22 = arith.constant 1 : i64
    %53 = llvm.load %6 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c1_i64_22 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %53, %c1_i64_22 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_23 = arith.constant 0 : i32
    %c3_i64_24 = arith.constant 3 : i64
    %55 = llvm.load %6 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c3_i64_24 : i64
    scf.if %56 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %55, %c3_i64_24 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c4_i64_25 = arith.constant 4 : i64
    %57 = arith.extui %52 : i32 to i64
    %58 = arith.addi %57, %c4_i64_25 : i64
    %59 = llvm.getelementptr %9[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_23, %59 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_26 = arith.constant 1 : i64
    %60 = llvm.load %6 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c1_i64_26 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %60, %c1_i64_26 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb6:  // pred: ^bb1
    %c3_i64_27 = arith.constant 3 : i64
    %62 = llvm.load %6 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c3_i64_27 : i64
    scf.if %63 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %62, %c3_i64_27 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_28 = arith.constant 1 : i64
    %65 = llvm.load %6 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c1_i64_28 : i64
    scf.if %66 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %65, %c1_i64_28 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_29 = arith.constant 3 : i64
    %67 = llvm.load %6 : !llvm.ptr -> i64
    %68 = arith.cmpi ult, %67, %c3_i64_29 : i64
    scf.if %68 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %67, %c3_i64_29 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %69 = arith.cmpi sle, %64, %c-1_i32 : i32
    %70 = arith.extui %69 : i1 to i32
    %c1_i64_30 = arith.constant 1 : i64
    %71 = llvm.load %6 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c1_i64_30 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %71, %c1_i64_30 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_31 = arith.constant 0 : i32
    %73 = arith.cmpi ne, %70, %c0_i32_31 : i32
    cf.cond_br %73, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %c1_i64_32 = arith.constant 1 : i64
    %74 = llvm.load %6 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c1_i64_32 : i64
    scf.if %75 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %74, %c1_i64_32 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c1_i64_33 = arith.constant 1 : i64
    %76 = llvm.load %6 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c1_i64_33 : i64
    scf.if %77 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %76, %c1_i64_33 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c1_i64_34 = arith.constant 1 : i64
    %78 = llvm.load %6 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c1_i64_34 : i64
    scf.if %79 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %78, %c1_i64_34 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c3_i64_35 = arith.constant 3 : i64
    %80 = llvm.load %6 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_35 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %80, %c3_i64_35 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %82 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_36 = arith.constant 3 : i64
    %83 = llvm.load %6 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_36 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %83, %c3_i64_36 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c4_i64_37 = arith.constant 4 : i64
    %85 = arith.extui %82 : i32 to i64
    %86 = arith.addi %85, %c4_i64_37 : i64
    %87 = llvm.getelementptr %9[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_38 = arith.constant 3 : i64
    %89 = llvm.load %6 : !llvm.ptr -> i64
    %90 = arith.cmpi ult, %89, %c3_i64_38 : i64
    scf.if %90 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %89, %c3_i64_38 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_39 = arith.constant 0 : i32
    %91 = arith.cmpi eq, %88, %c0_i32_39 : i32
    %92 = arith.extui %91 : i1 to i32
    %c1_i64_40 = arith.constant 1 : i64
    %93 = llvm.load %6 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c1_i64_40 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %93, %c1_i64_40 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_41 = arith.constant 0 : i32
    %95 = arith.cmpi ne, %92, %c0_i32_41 : i32
    cf.cond_br %95, ^bb10, ^bb11
  ^bb8:  // 4 preds: ^bb9, ^bb12, ^bb15, ^bb17
    %c1_i64_42 = arith.constant 1 : i64
    %96 = llvm.load %6 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c1_i64_42 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %96, %c1_i64_42 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c3_i64_43 = arith.constant 3 : i64
    %98 = llvm.load %6 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_43 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %98, %c3_i64_43 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %100 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_44 = arith.constant 3 : i64
    %101 = llvm.load %6 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c3_i64_44 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %101, %c3_i64_44 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_45 = arith.constant 0 : i32
    %103 = arith.cmpi eq, %100, %c0_i32_45 : i32
    %104 = arith.extui %103 : i1 to i32
    %c1_i64_46 = arith.constant 1 : i64
    %105 = llvm.load %6 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %c1_i64_46 : i64
    scf.if %106 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %105, %c1_i64_46 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_47 = arith.constant 0 : i32
    %107 = arith.cmpi ne, %104, %c0_i32_47 : i32
    cf.cond_br %107, ^bb18, ^bb19
  ^bb9:  // 2 preds: ^bb14, ^bb16
    %c3_i64_48 = arith.constant 3 : i64
    %108 = llvm.load %6 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %108, %c3_i64_48 : i64
    scf.if %109 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %108, %c3_i64_48 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %110 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_49 = arith.constant 3 : i64
    %111 = llvm.load %6 : !llvm.ptr -> i64
    %112 = arith.cmpi ult, %111, %c3_i64_49 : i64
    scf.if %112 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %111, %c3_i64_49 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %113 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %114 = llvm.load %6 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %c6_i64 : i64
    scf.if %115 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %114, %c6_i64 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %116 = call @f9(%arg0, %110, %113) : (!llvm.ptr, i32, i32) -> i32
    %c3_i64_50 = arith.constant 3 : i64
    %117 = llvm.load %6 : !llvm.ptr -> i64
    %118 = arith.cmpi ult, %117, %c3_i64_50 : i64
    scf.if %118 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %117, %c3_i64_50 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    llvm.store %116, %3 : i32, !llvm.ptr
    %c1_i64_51 = arith.constant 1 : i64
    %119 = llvm.load %6 : !llvm.ptr -> i64
    %120 = arith.cmpi ult, %119, %c1_i64_51 : i64
    scf.if %120 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %119, %c1_i64_51 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    cf.br ^bb8
  ^bb10:  // pred: ^bb7
    %c1_i64_52 = arith.constant 1 : i64
    %121 = llvm.load %6 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %c1_i64_52 : i64
    scf.if %122 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %121, %c1_i64_52 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c3_i64_53 = arith.constant 3 : i64
    %123 = llvm.load %6 : !llvm.ptr -> i64
    %124 = arith.cmpi ult, %123, %c3_i64_53 : i64
    scf.if %124 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %123, %c3_i64_53 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_54 = arith.constant 1 : i64
    %126 = llvm.load %6 : !llvm.ptr -> i64
    %127 = arith.cmpi ult, %126, %c1_i64_54 : i64
    scf.if %127 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %126, %c1_i64_54 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_55 = arith.constant 0 : i32
    %128 = arith.cmpi ne, %125, %c0_i32_55 : i32
    cf.cond_br %128, ^bb16, ^bb17
  ^bb11:  // pred: ^bb7
    %c1_i64_56 = arith.constant 1 : i64
    %129 = llvm.load %6 : !llvm.ptr -> i64
    %130 = arith.cmpi ult, %129, %c1_i64_56 : i64
    scf.if %130 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %129, %c1_i64_56 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c3_i64_57 = arith.constant 3 : i64
    %131 = llvm.load %6 : !llvm.ptr -> i64
    %132 = arith.cmpi ult, %131, %c3_i64_57 : i64
    scf.if %132 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %131, %c3_i64_57 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %133 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_58 = arith.constant 3 : i64
    %134 = llvm.load %6 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c3_i64_58 : i64
    scf.if %135 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %134, %c3_i64_58 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %136 = arith.extui %133 : i32 to i64
    %137 = arith.addi %136, %c8_i64 : i64
    %138 = llvm.getelementptr %9[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load volatile %138 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_59 = arith.constant 3 : i64
    %140 = llvm.load %6 : !llvm.ptr -> i64
    %141 = arith.cmpi ult, %140, %c3_i64_59 : i64
    scf.if %141 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %140, %c3_i64_59 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    llvm.store %139, %4 : i32, !llvm.ptr
    %c1_i64_60 = arith.constant 1 : i64
    %142 = llvm.load %6 : !llvm.ptr -> i64
    %143 = arith.cmpi ult, %142, %c1_i64_60 : i64
    scf.if %143 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %142, %c1_i64_60 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_61 = arith.constant 0 : i32
    %144 = arith.cmpi ne, %139, %c0_i32_61 : i32
    cf.cond_br %144, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %c3_i64_62 = arith.constant 3 : i64
    %145 = llvm.load %6 : !llvm.ptr -> i64
    %146 = arith.cmpi ult, %145, %c3_i64_62 : i64
    scf.if %146 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %145, %c3_i64_62 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %147 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_63 = arith.constant 3 : i64
    %148 = llvm.load %6 : !llvm.ptr -> i64
    %149 = arith.cmpi ult, %148, %c3_i64_63 : i64
    scf.if %149 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %148, %c3_i64_63 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i64_64 = arith.constant 0 : i64
    %150 = arith.extui %147 : i32 to i64
    %151 = arith.addi %150, %c0_i64_64 : i64
    %152 = llvm.getelementptr %9[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %153 = llvm.load volatile %152 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_65 = arith.constant 3 : i64
    %154 = llvm.load %6 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c3_i64_65 : i64
    scf.if %155 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %154, %c3_i64_65 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %156 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_66 = arith.constant 3 : i64
    %157 = llvm.load %6 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c3_i64_66 : i64
    scf.if %158 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %157, %c3_i64_66 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %159 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_67 = arith.constant 3 : i64
    %160 = llvm.load %6 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_67 : i64
    scf.if %161 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %160, %c3_i64_67 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %162 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64_68 = arith.constant 6 : i64
    %163 = llvm.load %6 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c6_i64_68 : i64
    scf.if %164 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %163, %c6_i64_68 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %165 = call @f11(%arg0, %153, %156, %159, %162) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    %c3_i64_69 = arith.constant 3 : i64
    %166 = llvm.load %6 : !llvm.ptr -> i64
    %167 = arith.cmpi ult, %166, %c3_i64_69 : i64
    scf.if %167 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %166, %c3_i64_69 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    llvm.store %165, %3 : i32, !llvm.ptr
    %c1_i64_70 = arith.constant 1 : i64
    %168 = llvm.load %6 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c1_i64_70 : i64
    scf.if %169 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %168, %c1_i64_70 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    cf.br ^bb8
  ^bb13:  // pred: ^bb11
    %c1_i64_71 = arith.constant 1 : i64
    %170 = llvm.load %6 : !llvm.ptr -> i64
    %171 = arith.cmpi ult, %170, %c1_i64_71 : i64
    scf.if %171 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %170, %c1_i64_71 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c3_i64_72 = arith.constant 3 : i64
    %172 = llvm.load %6 : !llvm.ptr -> i64
    %173 = arith.cmpi ult, %172, %c3_i64_72 : i64
    scf.if %173 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %172, %c3_i64_72 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %174 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_73 = arith.constant 1 : i64
    %175 = llvm.load %6 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c1_i64_73 : i64
    scf.if %176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %175, %c1_i64_73 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_74 = arith.constant 0 : i32
    %177 = arith.cmpi ne, %174, %c0_i32_74 : i32
    cf.cond_br %177, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %c1_i64_75 = arith.constant 1 : i64
    %178 = llvm.load %6 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c1_i64_75 : i64
    scf.if %179 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %178, %c1_i64_75 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_76 = arith.constant 0 : i32
    %c3_i64_77 = arith.constant 3 : i64
    %180 = llvm.load %6 : !llvm.ptr -> i64
    %181 = arith.cmpi ult, %180, %c3_i64_77 : i64
    scf.if %181 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %180, %c3_i64_77 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c1049497_i64 = arith.constant 1049497 : i64
    %182 = arith.extui %c0_i32_76 : i32 to i64
    %183 = arith.addi %182, %c1049497_i64 : i64
    %184 = llvm.getelementptr %9[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %185 = llvm.load volatile %184 {alignment = 1 : i64} : !llvm.ptr -> i8
    %186 = arith.extui %185 : i8 to i32
    %c1_i64_78 = arith.constant 1 : i64
    %187 = llvm.load %6 : !llvm.ptr -> i64
    %188 = arith.cmpi ult, %187, %c1_i64_78 : i64
    scf.if %188 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %187, %c1_i64_78 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c1_i64_79 = arith.constant 1 : i64
    %189 = llvm.load %6 : !llvm.ptr -> i64
    %190 = arith.cmpi ult, %189, %c1_i64_79 : i64
    scf.if %190 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %189, %c1_i64_79 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb15:  // pred: ^bb13
    %c3_i64_80 = arith.constant 3 : i64
    %191 = llvm.load %6 : !llvm.ptr -> i64
    %192 = arith.cmpi ult, %191, %c3_i64_80 : i64
    scf.if %192 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %191, %c3_i64_80 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %193 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_81 = arith.constant 3 : i64
    %194 = llvm.load %6 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c3_i64_81 : i64
    scf.if %195 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %194, %c3_i64_81 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    llvm.store %193, %3 : i32, !llvm.ptr
    %c1_i64_82 = arith.constant 1 : i64
    %196 = llvm.load %6 : !llvm.ptr -> i64
    %197 = arith.cmpi ult, %196, %c1_i64_82 : i64
    scf.if %197 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %196, %c1_i64_82 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    cf.br ^bb8
  ^bb16:  // pred: ^bb10
    %c1_i64_83 = arith.constant 1 : i64
    %198 = llvm.load %6 : !llvm.ptr -> i64
    %199 = arith.cmpi ult, %198, %c1_i64_83 : i64
    scf.if %199 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %198, %c1_i64_83 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_84 = arith.constant 0 : i32
    %c3_i64_85 = arith.constant 3 : i64
    %200 = llvm.load %6 : !llvm.ptr -> i64
    %201 = arith.cmpi ult, %200, %c3_i64_85 : i64
    scf.if %201 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %200, %c3_i64_85 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c1049497_i64_86 = arith.constant 1049497 : i64
    %202 = arith.extui %c0_i32_84 : i32 to i64
    %203 = arith.addi %202, %c1049497_i64_86 : i64
    %204 = llvm.getelementptr %9[%203] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %205 = llvm.load volatile %204 {alignment = 1 : i64} : !llvm.ptr -> i8
    %206 = arith.extui %205 : i8 to i32
    %c1_i64_87 = arith.constant 1 : i64
    %207 = llvm.load %6 : !llvm.ptr -> i64
    %208 = arith.cmpi ult, %207, %c1_i64_87 : i64
    scf.if %208 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %207, %c1_i64_87 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c1_i64_88 = arith.constant 1 : i64
    %209 = llvm.load %6 : !llvm.ptr -> i64
    %210 = arith.cmpi ult, %209, %c1_i64_88 : i64
    scf.if %210 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %209, %c1_i64_88 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb17:  // pred: ^bb10
    %c3_i64_89 = arith.constant 3 : i64
    %211 = llvm.load %6 : !llvm.ptr -> i64
    %212 = arith.cmpi ult, %211, %c3_i64_89 : i64
    scf.if %212 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %211, %c3_i64_89 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %213 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_90 = arith.constant 3 : i64
    %214 = llvm.load %6 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c3_i64_90 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %214, %c3_i64_90 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    llvm.store %213, %3 : i32, !llvm.ptr
    %c1_i64_91 = arith.constant 1 : i64
    %216 = llvm.load %6 : !llvm.ptr -> i64
    %217 = arith.cmpi ult, %216, %c1_i64_91 : i64
    scf.if %217 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %216, %c1_i64_91 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    cf.br ^bb8
  ^bb18:  // pred: ^bb8
    %c3_i64_92 = arith.constant 3 : i64
    %218 = llvm.load %6 : !llvm.ptr -> i64
    %219 = arith.cmpi ult, %218, %c3_i64_92 : i64
    scf.if %219 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %218, %c3_i64_92 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %220 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_93 = arith.constant 3 : i64
    %221 = llvm.load %6 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c3_i64_93 : i64
    scf.if %222 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %221, %c3_i64_93 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %223 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_94 = arith.constant 3 : i64
    %224 = llvm.load %6 : !llvm.ptr -> i64
    %225 = arith.cmpi ult, %224, %c3_i64_94 : i64
    scf.if %225 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %224, %c3_i64_94 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c8_i64_95 = arith.constant 8 : i64
    %226 = arith.extui %220 : i32 to i64
    %227 = arith.addi %226, %c8_i64_95 : i64
    %228 = llvm.getelementptr %9[%227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %223, %228 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_96 = arith.constant 3 : i64
    %229 = llvm.load %6 : !llvm.ptr -> i64
    %230 = arith.cmpi ult, %229, %c3_i64_96 : i64
    scf.if %230 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %229, %c3_i64_96 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %231 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_97 = arith.constant 3 : i64
    %232 = llvm.load %6 : !llvm.ptr -> i64
    %233 = arith.cmpi ult, %232, %c3_i64_97 : i64
    scf.if %233 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %232, %c3_i64_97 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %234 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_98 = arith.constant 3 : i64
    %235 = llvm.load %6 : !llvm.ptr -> i64
    %236 = arith.cmpi ult, %235, %c3_i64_98 : i64
    scf.if %236 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %235, %c3_i64_98 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c4_i64_99 = arith.constant 4 : i64
    %237 = arith.extui %231 : i32 to i64
    %238 = arith.addi %237, %c4_i64_99 : i64
    %239 = llvm.getelementptr %9[%238] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %234, %239 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_100 = arith.constant 1 : i64
    %240 = llvm.load %6 : !llvm.ptr -> i64
    %241 = arith.cmpi ult, %240, %c1_i64_100 : i64
    scf.if %241 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %240, %c1_i64_100 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb19:  // pred: ^bb8
    %c3_i64_101 = arith.constant 3 : i64
    %242 = llvm.load %6 : !llvm.ptr -> i64
    %243 = arith.cmpi ult, %242, %c3_i64_101 : i64
    scf.if %243 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %242, %c3_i64_101 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %244 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_102 = arith.constant 3 : i64
    %245 = llvm.load %6 : !llvm.ptr -> i64
    %246 = arith.cmpi ult, %245, %c3_i64_102 : i64
    scf.if %246 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %245, %c3_i64_102 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %247 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_103 = arith.constant 3 : i64
    %248 = llvm.load %6 : !llvm.ptr -> i64
    %249 = arith.cmpi ult, %248, %c3_i64_103 : i64
    scf.if %249 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %248, %c3_i64_103 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c8_i64_104 = arith.constant 8 : i64
    %250 = arith.extui %244 : i32 to i64
    %251 = arith.addi %250, %c8_i64_104 : i64
    %252 = llvm.getelementptr %9[%251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %247, %252 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_105 = arith.constant 3 : i64
    %253 = llvm.load %6 : !llvm.ptr -> i64
    %254 = arith.cmpi ult, %253, %c3_i64_105 : i64
    scf.if %254 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %253, %c3_i64_105 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %255 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_106 = arith.constant 3 : i64
    %256 = llvm.load %6 : !llvm.ptr -> i64
    %257 = arith.cmpi ult, %256, %c3_i64_106 : i64
    scf.if %257 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %256, %c3_i64_106 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %258 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_107 = arith.constant 3 : i64
    %259 = llvm.load %6 : !llvm.ptr -> i64
    %260 = arith.cmpi ult, %259, %c3_i64_107 : i64
    scf.if %260 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %259, %c3_i64_107 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c4_i64_108 = arith.constant 4 : i64
    %261 = arith.extui %255 : i32 to i64
    %262 = arith.addi %261, %c4_i64_108 : i64
    %263 = llvm.getelementptr %9[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %258, %263 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_109 = arith.constant 3 : i64
    %264 = llvm.load %6 : !llvm.ptr -> i64
    %265 = arith.cmpi ult, %264, %c3_i64_109 : i64
    scf.if %265 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %264, %c3_i64_109 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %266 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_110 = arith.constant 1 : i64
    %267 = llvm.load %6 : !llvm.ptr -> i64
    %268 = arith.cmpi ult, %267, %c1_i64_110 : i64
    scf.if %268 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %267, %c1_i64_110 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i32_111 = arith.constant 0 : i32
    %c3_i64_112 = arith.constant 3 : i64
    %269 = llvm.load %6 : !llvm.ptr -> i64
    %270 = arith.cmpi ult, %269, %c3_i64_112 : i64
    scf.if %270 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %269, %c3_i64_112 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    %c0_i64_113 = arith.constant 0 : i64
    %271 = arith.extui %266 : i32 to i64
    %272 = arith.addi %271, %c0_i64_113 : i64
    %273 = llvm.getelementptr %9[%272] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_111, %273 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_114 = arith.constant 1 : i64
    %274 = llvm.load %6 : !llvm.ptr -> i64
    %275 = arith.cmpi ult, %274, %c1_i64_114 : i64
    scf.if %275 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %276 = arith.subi %274, %c1_i64_114 : i64
      llvm.store %276, %6 : i64, !llvm.ptr
    }
    cf.br ^bb2
  }
  func.func @f35(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_0 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %1, %2 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %3 = llvm.load %2 : !llvm.ptr -> i64
    %4 = arith.cmpi ult, %3, %c3_i64 : i64
    scf.if %4 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %10 = arith.subi %3, %c3_i64 : i64
      llvm.store %10, %2 : i64, !llvm.ptr
    }
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %6 = llvm.load %2 : !llvm.ptr -> i64
    %7 = arith.cmpi ult, %6, %c6_i64 : i64
    scf.if %7 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %10 = arith.subi %6, %c6_i64 : i64
      llvm.store %10, %2 : i64, !llvm.ptr
    }
    call @f36(%arg0, %5) : (!llvm.ptr, i32) -> ()
    %c0_i64 = arith.constant 0 : i64
    %8 = llvm.load %2 : !llvm.ptr -> i64
    %9 = arith.cmpi ult, %8, %c0_i64 : i64
    scf.if %9 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %10 = arith.subi %8, %c0_i64 : i64
      llvm.store %10, %2 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f36(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_3 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %4, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %5 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %11, %c3_i64 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %13 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %14 = llvm.load %5 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c1_i64 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %14, %c1_i64 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_4 = arith.constant 3 : i64
    %16 = llvm.load %5 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64_4 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %16, %c3_i64_4 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %18 = arith.subi %13, %c16_i32 : i32
    %c3_i64_5 = arith.constant 3 : i64
    %19 = llvm.load %5 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_5 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %19, %c3_i64_5 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %1 : i32, !llvm.ptr
    %c3_i64_6 = arith.constant 3 : i64
    %21 = llvm.load %5 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_6 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %21, %c3_i64_6 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %7 : i32, !llvm.ptr
    %c3_i64_7 = arith.constant 3 : i64
    %23 = llvm.load %5 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_7 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %23, %c3_i64_7 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_8 = arith.constant 3 : i64
    %26 = llvm.load %5 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c3_i64_8 : i64
    scf.if %27 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %26, %c3_i64_8 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %28 = arith.extui %25 : i32 to i64
    %29 = arith.addi %28, %c12_i64 : i64
    %30 = llvm.getelementptr %10[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_9 = arith.constant 3 : i64
    %32 = llvm.load %5 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c3_i64_9 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %32, %c3_i64_9 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    llvm.store %31, %2 : i32, !llvm.ptr
    %c1_i64_10 = arith.constant 1 : i64
    %34 = llvm.load %5 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c1_i64_10 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %34, %c1_i64_10 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c1_i64_11 = arith.constant 1 : i64
    %36 = llvm.load %5 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c1_i64_11 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %36, %c1_i64_11 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c1_i64_12 = arith.constant 1 : i64
    %38 = llvm.load %5 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c1_i64_12 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %38, %c1_i64_12 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c1_i64_13 = arith.constant 1 : i64
    %40 = llvm.load %5 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c1_i64_13 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %40, %c1_i64_13 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c3_i64_14 = arith.constant 3 : i64
    %42 = llvm.load %5 : !llvm.ptr -> i64
    %43 = arith.cmpi ult, %42, %c3_i64_14 : i64
    scf.if %43 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %42, %c3_i64_14 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %45 = llvm.load %5 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_15 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %45, %c3_i64_15 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %47 = arith.extui %44 : i32 to i64
    %48 = arith.addi %47, %c4_i64 : i64
    %49 = llvm.getelementptr %10[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_16 = arith.constant 1 : i64
    %51 = llvm.load %5 : !llvm.ptr -> i64
    %52 = arith.cmpi ult, %51, %c1_i64_16 : i64
    scf.if %52 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %51, %c1_i64_16 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    cf.switch %50 : i32, [
      default: ^bb4,
      0: ^bb6,
      1: ^bb5
    ]
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb7, ^bb8
    %c3_i64_17 = arith.constant 3 : i64
    %53 = llvm.load %5 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c3_i64_17 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %53, %c3_i64_17 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_18 = arith.constant 3 : i64
    %56 = llvm.load %5 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c3_i64_18 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %56, %c3_i64_18 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_19 = arith.constant 3 : i64
    %59 = llvm.load %5 : !llvm.ptr -> i64
    %60 = arith.cmpi ult, %59, %c3_i64_19 : i64
    scf.if %60 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %59, %c3_i64_19 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c4_i64_20 = arith.constant 4 : i64
    %61 = arith.extui %55 : i32 to i64
    %62 = arith.addi %61, %c4_i64_20 : i64
    %63 = llvm.getelementptr %10[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %63 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_21 = arith.constant 3 : i64
    %64 = llvm.load %5 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c3_i64_21 : i64
    scf.if %65 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %64, %c3_i64_21 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %66 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_22 = arith.constant 3 : i64
    %67 = llvm.load %5 : !llvm.ptr -> i64
    %68 = arith.cmpi ult, %67, %c3_i64_22 : i64
    scf.if %68 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %67, %c3_i64_22 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_23 = arith.constant 3 : i64
    %70 = llvm.load %5 : !llvm.ptr -> i64
    %71 = arith.cmpi ult, %70, %c3_i64_23 : i64
    scf.if %71 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %70, %c3_i64_23 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %72 = arith.extui %66 : i32 to i64
    %73 = arith.addi %72, %c0_i64 : i64
    %74 = llvm.getelementptr %10[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %74 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_24 = arith.constant 3 : i64
    %75 = llvm.load %5 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c3_i64_24 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %75, %c3_i64_24 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_25 = arith.constant 1 : i64
    %78 = llvm.load %5 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c1_i64_25 : i64
    scf.if %79 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %78, %c1_i64_25 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c1048972_i32 = arith.constant 1048972 : i32
    %c3_i64_26 = arith.constant 3 : i64
    %80 = llvm.load %5 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_26 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %80, %c3_i64_26 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_27 = arith.constant 3 : i64
    %83 = llvm.load %5 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_27 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %83, %c3_i64_27 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %85 = arith.extui %82 : i32 to i64
    %86 = arith.addi %85, %c24_i64 : i64
    %87 = llvm.getelementptr %10[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_28 = arith.constant 3 : i64
    %89 = llvm.load %5 : !llvm.ptr -> i64
    %90 = arith.cmpi ult, %89, %c3_i64_28 : i64
    scf.if %90 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %89, %c3_i64_28 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %91 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_29 = arith.constant 3 : i64
    %92 = llvm.load %5 : !llvm.ptr -> i64
    %93 = arith.cmpi ult, %92, %c3_i64_29 : i64
    scf.if %93 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %92, %c3_i64_29 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %94 = arith.extui %91 : i32 to i64
    %95 = arith.addi %94, %c28_i64 : i64
    %96 = llvm.getelementptr %10[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_30 = arith.constant 3 : i64
    %98 = llvm.load %5 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_30 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %98, %c3_i64_30 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    llvm.store %97, %0 : i32, !llvm.ptr
    %c3_i64_31 = arith.constant 3 : i64
    %100 = llvm.load %5 : !llvm.ptr -> i64
    %101 = arith.cmpi ult, %100, %c3_i64_31 : i64
    scf.if %101 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %100, %c3_i64_31 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c28_i64_32 = arith.constant 28 : i64
    %102 = arith.extui %97 : i32 to i64
    %103 = arith.addi %102, %c28_i64_32 : i64
    %104 = llvm.getelementptr %10[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i8
    %106 = arith.extui %105 : i8 to i32
    %c3_i64_33 = arith.constant 3 : i64
    %107 = llvm.load %5 : !llvm.ptr -> i64
    %108 = arith.cmpi ult, %107, %c3_i64_33 : i64
    scf.if %108 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %107, %c3_i64_33 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %109 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_34 = arith.constant 3 : i64
    %110 = llvm.load %5 : !llvm.ptr -> i64
    %111 = arith.cmpi ult, %110, %c3_i64_34 : i64
    scf.if %111 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %110, %c3_i64_34 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c29_i64 = arith.constant 29 : i64
    %112 = arith.extui %109 : i32 to i64
    %113 = arith.addi %112, %c29_i64 : i64
    %114 = llvm.getelementptr %10[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %115 = llvm.load volatile %114 {alignment = 1 : i64} : !llvm.ptr -> i8
    %116 = arith.extui %115 : i8 to i32
    %c6_i64 = arith.constant 6 : i64
    %117 = llvm.load %5 : !llvm.ptr -> i64
    %118 = arith.cmpi ult, %117, %c6_i64 : i64
    scf.if %118 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %117, %c6_i64 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    call @f46(%arg0, %77, %c1048972_i32, %88, %106, %116) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c0_i64_35 = arith.constant 0 : i64
    %119 = llvm.load %5 : !llvm.ptr -> i64
    %120 = arith.cmpi ult, %119, %c0_i64_35 : i64
    scf.if %120 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %119, %c0_i64_35 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // 3 preds: ^bb1, ^bb5, ^bb6
    %c3_i64_36 = arith.constant 3 : i64
    %121 = llvm.load %5 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %c3_i64_36 : i64
    scf.if %122 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %121, %c3_i64_36 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %123 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_37 = arith.constant 1 : i64
    %124 = llvm.load %5 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c1_i64_37 : i64
    scf.if %125 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %124, %c1_i64_37 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c3_i64_38 = arith.constant 3 : i64
    %126 = llvm.load %5 : !llvm.ptr -> i64
    %127 = arith.cmpi ult, %126, %c3_i64_38 : i64
    scf.if %127 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %126, %c3_i64_38 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c0_i64_39 = arith.constant 0 : i64
    %128 = arith.extui %123 : i32 to i64
    %129 = arith.addi %128, %c0_i64_39 : i64
    %130 = llvm.getelementptr %10[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %130 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_40 = arith.constant 3 : i64
    %131 = llvm.load %5 : !llvm.ptr -> i64
    %132 = arith.cmpi ult, %131, %c3_i64_40 : i64
    scf.if %132 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %131, %c3_i64_40 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_41 = arith.constant 3 : i64
    %134 = llvm.load %5 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c3_i64_41 : i64
    scf.if %135 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %134, %c3_i64_41 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %136 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_42 = arith.constant 3 : i64
    %137 = llvm.load %5 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c3_i64_42 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %137, %c3_i64_42 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c12_i64_43 = arith.constant 12 : i64
    %139 = arith.extui %133 : i32 to i64
    %140 = arith.addi %139, %c12_i64_43 : i64
    %141 = llvm.getelementptr %10[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %141 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_44 = arith.constant 3 : i64
    %142 = llvm.load %5 : !llvm.ptr -> i64
    %143 = arith.cmpi ult, %142, %c3_i64_44 : i64
    scf.if %143 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %142, %c3_i64_44 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %144 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_45 = arith.constant 1 : i64
    %145 = llvm.load %5 : !llvm.ptr -> i64
    %146 = arith.cmpi ult, %145, %c1_i64_45 : i64
    scf.if %146 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %145, %c1_i64_45 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c1049000_i32 = arith.constant 1049000 : i32
    %c3_i64_46 = arith.constant 3 : i64
    %147 = llvm.load %5 : !llvm.ptr -> i64
    %148 = arith.cmpi ult, %147, %c3_i64_46 : i64
    scf.if %148 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %147, %c3_i64_46 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %149 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_47 = arith.constant 3 : i64
    %150 = llvm.load %5 : !llvm.ptr -> i64
    %151 = arith.cmpi ult, %150, %c3_i64_47 : i64
    scf.if %151 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %150, %c3_i64_47 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c24_i64_48 = arith.constant 24 : i64
    %152 = arith.extui %149 : i32 to i64
    %153 = arith.addi %152, %c24_i64_48 : i64
    %154 = llvm.getelementptr %10[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_49 = arith.constant 3 : i64
    %156 = llvm.load %5 : !llvm.ptr -> i64
    %157 = arith.cmpi ult, %156, %c3_i64_49 : i64
    scf.if %157 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %156, %c3_i64_49 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %158 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_50 = arith.constant 3 : i64
    %159 = llvm.load %5 : !llvm.ptr -> i64
    %160 = arith.cmpi ult, %159, %c3_i64_50 : i64
    scf.if %160 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %159, %c3_i64_50 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c28_i64_51 = arith.constant 28 : i64
    %161 = arith.extui %158 : i32 to i64
    %162 = arith.addi %161, %c28_i64_51 : i64
    %163 = llvm.getelementptr %10[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = llvm.load volatile %163 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_52 = arith.constant 3 : i64
    %165 = llvm.load %5 : !llvm.ptr -> i64
    %166 = arith.cmpi ult, %165, %c3_i64_52 : i64
    scf.if %166 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %165, %c3_i64_52 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    llvm.store %164, %0 : i32, !llvm.ptr
    %c3_i64_53 = arith.constant 3 : i64
    %167 = llvm.load %5 : !llvm.ptr -> i64
    %168 = arith.cmpi ult, %167, %c3_i64_53 : i64
    scf.if %168 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %167, %c3_i64_53 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c28_i64_54 = arith.constant 28 : i64
    %169 = arith.extui %164 : i32 to i64
    %170 = arith.addi %169, %c28_i64_54 : i64
    %171 = llvm.getelementptr %10[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %172 = llvm.load volatile %171 {alignment = 1 : i64} : !llvm.ptr -> i8
    %173 = arith.extui %172 : i8 to i32
    %c3_i64_55 = arith.constant 3 : i64
    %174 = llvm.load %5 : !llvm.ptr -> i64
    %175 = arith.cmpi ult, %174, %c3_i64_55 : i64
    scf.if %175 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %174, %c3_i64_55 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %176 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_56 = arith.constant 3 : i64
    %177 = llvm.load %5 : !llvm.ptr -> i64
    %178 = arith.cmpi ult, %177, %c3_i64_56 : i64
    scf.if %178 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %177, %c3_i64_56 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c29_i64_57 = arith.constant 29 : i64
    %179 = arith.extui %176 : i32 to i64
    %180 = arith.addi %179, %c29_i64_57 : i64
    %181 = llvm.getelementptr %10[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %182 = llvm.load volatile %181 {alignment = 1 : i64} : !llvm.ptr -> i8
    %183 = arith.extui %182 : i8 to i32
    %c6_i64_58 = arith.constant 6 : i64
    %184 = llvm.load %5 : !llvm.ptr -> i64
    %185 = arith.cmpi ult, %184, %c6_i64_58 : i64
    scf.if %185 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %184, %c6_i64_58 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    call @f46(%arg0, %144, %c1049000_i32, %155, %173, %183) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c0_i64_59 = arith.constant 0 : i64
    %186 = llvm.load %5 : !llvm.ptr -> i64
    %187 = arith.cmpi ult, %186, %c0_i64_59 : i64
    scf.if %187 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %186, %c0_i64_59 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c9_i32_60 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_60) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %c3_i64_61 = arith.constant 3 : i64
    %188 = llvm.load %5 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c3_i64_61 : i64
    scf.if %189 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %188, %c3_i64_61 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %190 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_62 = arith.constant 1 : i64
    %191 = llvm.load %5 : !llvm.ptr -> i64
    %192 = arith.cmpi ult, %191, %c1_i64_62 : i64
    scf.if %192 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %191, %c1_i64_62 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c0_i32_63 = arith.constant 0 : i32
    %193 = arith.cmpi ne, %190, %c0_i32_63 : i32
    cf.cond_br %193, ^bb4, ^bb8
  ^bb6:  // pred: ^bb1
    %c3_i64_64 = arith.constant 3 : i64
    %194 = llvm.load %5 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c3_i64_64 : i64
    scf.if %195 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %194, %c3_i64_64 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %196 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_65 = arith.constant 1 : i64
    %197 = llvm.load %5 : !llvm.ptr -> i64
    %198 = arith.cmpi ult, %197, %c1_i64_65 : i64
    scf.if %198 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %197, %c1_i64_65 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c0_i32_66 = arith.constant 0 : i32
    %199 = arith.cmpi ne, %196, %c0_i32_66 : i32
    cf.cond_br %199, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %c1_i64_67 = arith.constant 1 : i64
    %200 = llvm.load %5 : !llvm.ptr -> i64
    %201 = arith.cmpi ult, %200, %c1_i64_67 : i64
    scf.if %201 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %200, %c1_i64_67 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c1_i32_68 = arith.constant 1 : i32
    %c3_i64_69 = arith.constant 3 : i64
    %202 = llvm.load %5 : !llvm.ptr -> i64
    %203 = arith.cmpi ult, %202, %c3_i64_69 : i64
    scf.if %203 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %202, %c3_i64_69 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_68, %2 : i32, !llvm.ptr
    %c1_i64_70 = arith.constant 1 : i64
    %204 = llvm.load %5 : !llvm.ptr -> i64
    %205 = arith.cmpi ult, %204, %c1_i64_70 : i64
    scf.if %205 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %204, %c1_i64_70 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c0_i32_71 = arith.constant 0 : i32
    %c3_i64_72 = arith.constant 3 : i64
    %206 = llvm.load %5 : !llvm.ptr -> i64
    %207 = arith.cmpi ult, %206, %c3_i64_72 : i64
    scf.if %207 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %206, %c3_i64_72 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_71, %3 : i32, !llvm.ptr
    %c1_i64_73 = arith.constant 1 : i64
    %208 = llvm.load %5 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c1_i64_73 : i64
    scf.if %209 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %208, %c1_i64_73 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb8:  // pred: ^bb5
    %c3_i64_74 = arith.constant 3 : i64
    %210 = llvm.load %5 : !llvm.ptr -> i64
    %211 = arith.cmpi ult, %210, %c3_i64_74 : i64
    scf.if %211 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %210, %c3_i64_74 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %212 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_75 = arith.constant 3 : i64
    %213 = llvm.load %5 : !llvm.ptr -> i64
    %214 = arith.cmpi ult, %213, %c3_i64_75 : i64
    scf.if %214 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %213, %c3_i64_75 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c0_i64_76 = arith.constant 0 : i64
    %215 = arith.extui %212 : i32 to i64
    %216 = arith.addi %215, %c0_i64_76 : i64
    %217 = llvm.getelementptr %10[%216] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %218 = llvm.load volatile %217 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_77 = arith.constant 3 : i64
    %219 = llvm.load %5 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c3_i64_77 : i64
    scf.if %220 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %219, %c3_i64_77 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    llvm.store %218, %2 : i32, !llvm.ptr
    %c3_i64_78 = arith.constant 3 : i64
    %221 = llvm.load %5 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c3_i64_78 : i64
    scf.if %222 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %221, %c3_i64_78 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c4_i64_79 = arith.constant 4 : i64
    %223 = arith.extui %218 : i32 to i64
    %224 = arith.addi %223, %c4_i64_79 : i64
    %225 = llvm.getelementptr %10[%224] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %226 = llvm.load volatile %225 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_80 = arith.constant 3 : i64
    %227 = llvm.load %5 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %c3_i64_80 : i64
    scf.if %228 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %227, %c3_i64_80 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    llvm.store %226, %3 : i32, !llvm.ptr
    %c3_i64_81 = arith.constant 3 : i64
    %229 = llvm.load %5 : !llvm.ptr -> i64
    %230 = arith.cmpi ult, %229, %c3_i64_81 : i64
    scf.if %230 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %229, %c3_i64_81 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %231 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_82 = arith.constant 3 : i64
    %232 = llvm.load %5 : !llvm.ptr -> i64
    %233 = arith.cmpi ult, %232, %c3_i64_82 : i64
    scf.if %233 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %232, %c3_i64_82 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    %c0_i64_83 = arith.constant 0 : i64
    %234 = arith.extui %231 : i32 to i64
    %235 = arith.addi %234, %c0_i64_83 : i64
    %236 = llvm.getelementptr %10[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %237 = llvm.load volatile %236 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_84 = arith.constant 3 : i64
    %238 = llvm.load %5 : !llvm.ptr -> i64
    %239 = arith.cmpi ult, %238, %c3_i64_84 : i64
    scf.if %239 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %238, %c3_i64_84 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    llvm.store %237, %2 : i32, !llvm.ptr
    %c1_i64_85 = arith.constant 1 : i64
    %240 = llvm.load %5 : !llvm.ptr -> i64
    %241 = arith.cmpi ult, %240, %c1_i64_85 : i64
    scf.if %241 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %242 = arith.subi %240, %c1_i64_85 : i64
      llvm.store %242, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f37(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_2 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %3, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %10 = llvm.load %4 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c3_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %10, %c3_i64 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %12 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %13 = llvm.load %4 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c1_i64 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %13, %c1_i64 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c48_i32 = arith.constant 48 : i32
    %c3_i64_3 = arith.constant 3 : i64
    %15 = llvm.load %4 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c3_i64_3 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %15, %c3_i64_3 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %17 = arith.subi %12, %c48_i32 : i32
    %c3_i64_4 = arith.constant 3 : i64
    %18 = llvm.load %4 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_4 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %18, %c3_i64_4 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    llvm.store %17, %2 : i32, !llvm.ptr
    %c3_i64_5 = arith.constant 3 : i64
    %20 = llvm.load %4 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_5 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %20, %c3_i64_5 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    llvm.store %17, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %22 = llvm.load %4 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c1_i64_6 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %22, %c1_i64_6 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c1_i64_7 = arith.constant 1 : i64
    %24 = llvm.load %4 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c1_i64_7 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %24, %c1_i64_7 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c0_i32_8 = arith.constant 0 : i32
    %c3_i64_9 = arith.constant 3 : i64
    %26 = llvm.load %4 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c3_i64_9 : i64
    scf.if %27 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %26, %c3_i64_9 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c1049496_i64 = arith.constant 1049496 : i64
    %28 = arith.extui %c0_i32_8 : i32 to i64
    %29 = arith.addi %28, %c1049496_i64 : i64
    %30 = llvm.getelementptr %9[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i8
    %32 = arith.extui %31 : i8 to i32
    %c3_i64_10 = arith.constant 3 : i64
    %33 = llvm.load %4 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c3_i64_10 : i64
    scf.if %34 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %33, %c3_i64_10 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c0_i32_11 = arith.constant 0 : i32
    %35 = arith.cmpi eq, %32, %c0_i32_11 : i32
    %36 = arith.extui %35 : i1 to i32
    %c1_i64_12 = arith.constant 1 : i64
    %37 = llvm.load %4 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c1_i64_12 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %37, %c1_i64_12 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c0_i32_13 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %36, %c0_i32_13 : i32
    cf.cond_br %39, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %c3_i64_14 = arith.constant 3 : i64
    %40 = llvm.load %4 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c3_i64_14 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %40, %c3_i64_14 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_15 = arith.constant 1 : i64
    %43 = llvm.load %4 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c1_i64_15 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %43, %c1_i64_15 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c48_i32_16 = arith.constant 48 : i32
    %c3_i64_17 = arith.constant 3 : i64
    %45 = llvm.load %4 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_17 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %45, %c3_i64_17 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %47 = arith.addi %42, %c48_i32_16 : i32
    %c3_i64_18 = arith.constant 3 : i64
    %48 = llvm.load %4 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c3_i64_18 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %48, %c3_i64_18 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    llvm.store %47, %6 : i32, !llvm.ptr
    %c1_i64_19 = arith.constant 1 : i64
    %50 = llvm.load %4 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c1_i64_19 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %50, %c1_i64_19 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c3_i64_20 = arith.constant 3 : i64
    %52 = llvm.load %4 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c3_i64_20 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %52, %c3_i64_20 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_21 = arith.constant 1 : i64
    %55 = llvm.load %4 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c1_i64_21 : i64
    scf.if %56 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %55, %c1_i64_21 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c2_i32 = arith.constant 2 : i32
    %c3_i64_22 = arith.constant 3 : i64
    %57 = llvm.load %4 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_22 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %57, %c3_i64_22 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %59 = arith.extui %54 : i32 to i64
    %60 = arith.addi %59, %c12_i64 : i64
    %61 = llvm.getelementptr %9[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_23 = arith.constant 3 : i64
    %62 = llvm.load %4 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c3_i64_23 : i64
    scf.if %63 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %62, %c3_i64_23 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_24 = arith.constant 1 : i64
    %65 = llvm.load %4 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c1_i64_24 : i64
    scf.if %66 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %65, %c1_i64_24 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c1048884_i32 = arith.constant 1048884 : i32
    %c3_i64_25 = arith.constant 3 : i64
    %67 = llvm.load %4 : !llvm.ptr -> i64
    %68 = arith.cmpi ult, %67, %c3_i64_25 : i64
    scf.if %68 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %67, %c3_i64_25 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %69 = arith.extui %64 : i32 to i64
    %70 = arith.addi %69, %c8_i64 : i64
    %71 = llvm.getelementptr %9[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048884_i32, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_26 = arith.constant 3 : i64
    %72 = llvm.load %4 : !llvm.ptr -> i64
    %73 = arith.cmpi ult, %72, %c3_i64_26 : i64
    scf.if %73 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %72, %c3_i64_26 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_27 = arith.constant 1 : i64
    %75 = llvm.load %4 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c1_i64_27 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %75, %c1_i64_27 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c1_i64_28 = arith.constant 1 : i64
    %c3_i64_29 = arith.constant 3 : i64
    %77 = llvm.load %4 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c3_i64_29 : i64
    scf.if %78 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %77, %c3_i64_29 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %79 = arith.extui %74 : i32 to i64
    %80 = arith.addi %79, %c20_i64 : i64
    %81 = llvm.getelementptr %9[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_28, %81 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_30 = arith.constant 3 : i64
    %82 = llvm.load %4 : !llvm.ptr -> i64
    %83 = arith.cmpi ult, %82, %c3_i64_30 : i64
    scf.if %83 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %82, %c3_i64_30 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_31 = arith.constant 3 : i64
    %85 = llvm.load %4 : !llvm.ptr -> i64
    %86 = arith.cmpi ult, %85, %c3_i64_31 : i64
    scf.if %86 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %85, %c3_i64_31 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %87 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_32 = arith.constant 3 : i64
    %88 = llvm.load %4 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c3_i64_32 : i64
    scf.if %89 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %88, %c3_i64_32 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c44_i64 = arith.constant 44 : i64
    %90 = arith.extui %84 : i32 to i64
    %91 = arith.addi %90, %c44_i64 : i64
    %92 = llvm.getelementptr %9[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %92 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_33 = arith.constant 3 : i64
    %93 = llvm.load %4 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c3_i64_33 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %93, %c3_i64_33 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_34 = arith.constant 1 : i64
    %96 = llvm.load %4 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c1_i64_34 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %96, %c1_i64_34 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c10_i32 = arith.constant 10 : i32
    %c4_i64 = arith.constant 4 : i64
    %98 = llvm.load %4 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c4_i64 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %98, %c4_i64 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %100 = arith.extui %c10_i32 : i32 to i64
    %c1_i64_35 = arith.constant 1 : i64
    %101 = llvm.load %4 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c1_i64_35 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %101, %c1_i64_35 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c32_i64 = arith.constant 32 : i64
    %c3_i64_36 = arith.constant 3 : i64
    %103 = llvm.load %4 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %c3_i64_36 : i64
    scf.if %104 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %103, %c3_i64_36 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c63_i64 = arith.constant 63 : i64
    %105 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %106 = scf.if %105 -> (i64) {
      %156 = arith.shli %100, %c32_i64 : i64
      scf.yield %156 : i64
    } else {
      %c0_i64_53 = arith.constant 0 : i64
      scf.yield %c0_i64_53 : i64
    }
    %c3_i64_37 = arith.constant 3 : i64
    %107 = llvm.load %4 : !llvm.ptr -> i64
    %108 = arith.cmpi ult, %107, %c3_i64_37 : i64
    scf.if %108 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %107, %c3_i64_37 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_38 = arith.constant 1 : i64
    %110 = llvm.load %4 : !llvm.ptr -> i64
    %111 = arith.cmpi ult, %110, %c1_i64_38 : i64
    scf.if %111 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %110, %c1_i64_38 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c44_i32 = arith.constant 44 : i32
    %c3_i64_39 = arith.constant 3 : i64
    %112 = llvm.load %4 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c3_i64_39 : i64
    scf.if %113 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %112, %c3_i64_39 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %114 = arith.addi %109, %c44_i32 : i32
    %c4_i64_40 = arith.constant 4 : i64
    %115 = llvm.load %4 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c4_i64_40 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %115, %c4_i64_40 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %117 = arith.extui %114 : i32 to i64
    %c3_i64_41 = arith.constant 3 : i64
    %118 = llvm.load %4 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_41 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %118, %c3_i64_41 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %120 = arith.ori %106, %117 : i64
    %c3_i64_42 = arith.constant 3 : i64
    %121 = llvm.load %4 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %c3_i64_42 : i64
    scf.if %122 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %121, %c3_i64_42 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c32_i64_43 = arith.constant 32 : i64
    %123 = arith.extui %95 : i32 to i64
    %124 = arith.addi %123, %c32_i64_43 : i64
    %125 = llvm.getelementptr %9[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %120, %125 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_44 = arith.constant 3 : i64
    %126 = llvm.load %4 : !llvm.ptr -> i64
    %127 = arith.cmpi ult, %126, %c3_i64_44 : i64
    scf.if %127 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %126, %c3_i64_44 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %128 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_45 = arith.constant 3 : i64
    %129 = llvm.load %4 : !llvm.ptr -> i64
    %130 = arith.cmpi ult, %129, %c3_i64_45 : i64
    scf.if %130 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %129, %c3_i64_45 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_46 = arith.constant 1 : i64
    %132 = llvm.load %4 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c1_i64_46 : i64
    scf.if %133 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %132, %c1_i64_46 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_47 = arith.constant 3 : i64
    %134 = llvm.load %4 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c3_i64_47 : i64
    scf.if %135 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %134, %c3_i64_47 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %136 = arith.addi %131, %c32_i32 : i32
    %c3_i64_48 = arith.constant 3 : i64
    %137 = llvm.load %4 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c3_i64_48 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %137, %c3_i64_48 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %139 = arith.extui %128 : i32 to i64
    %140 = arith.addi %139, %c16_i64 : i64
    %141 = llvm.getelementptr %9[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %141 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_49 = arith.constant 3 : i64
    %142 = llvm.load %4 : !llvm.ptr -> i64
    %143 = arith.cmpi ult, %142, %c3_i64_49 : i64
    scf.if %143 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %142, %c3_i64_49 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %144 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_50 = arith.constant 1 : i64
    %145 = llvm.load %4 : !llvm.ptr -> i64
    %146 = arith.cmpi ult, %145, %c1_i64_50 : i64
    scf.if %146 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %145, %c1_i64_50 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_51 = arith.constant 3 : i64
    %147 = llvm.load %4 : !llvm.ptr -> i64
    %148 = arith.cmpi ult, %147, %c3_i64_51 : i64
    scf.if %148 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %147, %c3_i64_51 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %149 = arith.addi %144, %c8_i32 : i32
    %c1_i64_52 = arith.constant 1 : i64
    %150 = llvm.load %4 : !llvm.ptr -> i64
    %151 = arith.cmpi ult, %150, %c1_i64_52 : i64
    scf.if %151 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %150, %c1_i64_52 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c1048924_i32 = arith.constant 1048924 : i32
    %c6_i64 = arith.constant 6 : i64
    %152 = llvm.load %4 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c6_i64 : i64
    scf.if %153 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %152, %c6_i64 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    call @f63(%arg0, %149, %c1048924_i32) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64 = arith.constant 0 : i64
    %154 = llvm.load %4 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c0_i64 : i64
    scf.if %155 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %156 = arith.subi %154, %c0_i64 : i64
      llvm.store %156, %4 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f38(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_2 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %3, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %10 = llvm.load %4 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c3_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %10, %c3_i64 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %12 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %13 = llvm.load %4 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c1_i64 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %13, %c1_i64 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_3 = arith.constant 3 : i64
    %15 = llvm.load %4 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c3_i64_3 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %15, %c3_i64_3 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %17 = arith.subi %12, %c32_i32 : i32
    %c3_i64_4 = arith.constant 3 : i64
    %18 = llvm.load %4 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_4 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %18, %c3_i64_4 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    llvm.store %17, %1 : i32, !llvm.ptr
    %c3_i64_5 = arith.constant 3 : i64
    %20 = llvm.load %4 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_5 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %20, %c3_i64_5 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    llvm.store %17, %6 : i32, !llvm.ptr
    %c3_i64_6 = arith.constant 3 : i64
    %22 = llvm.load %4 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c3_i64_6 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %22, %c3_i64_6 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_7 = arith.constant 3 : i64
    %25 = llvm.load %4 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c3_i64_7 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %25, %c3_i64_7 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %27 = arith.extui %24 : i32 to i64
    %28 = arith.addi %27, %c24_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_8 = arith.constant 3 : i64
    %31 = llvm.load %4 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_8 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %31, %c3_i64_8 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    llvm.store %30, %2 : i32, !llvm.ptr
    %c3_i64_9 = arith.constant 3 : i64
    %33 = llvm.load %4 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c3_i64_9 : i64
    scf.if %34 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %33, %c3_i64_9 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_10 = arith.constant 1 : i64
    %36 = llvm.load %4 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c1_i64_10 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %36, %c1_i64_10 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_11 = arith.constant 3 : i64
    %38 = llvm.load %4 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_11 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %38, %c3_i64_11 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %40 = arith.addi %35, %c16_i32 : i32
    %c3_i64_12 = arith.constant 3 : i64
    %41 = llvm.load %4 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c3_i64_12 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %41, %c3_i64_12 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_13 = arith.constant 1 : i64
    %44 = llvm.load %4 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c1_i64_13 : i64
    scf.if %45 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %44, %c1_i64_13 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c16_i32_14 = arith.constant 16 : i32
    %c3_i64_15 = arith.constant 3 : i64
    %46 = llvm.load %4 : !llvm.ptr -> i64
    %47 = arith.cmpi ult, %46, %c3_i64_15 : i64
    scf.if %47 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %46, %c3_i64_15 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %48 = arith.addi %43, %c16_i32_14 : i32
    %c3_i64_16 = arith.constant 3 : i64
    %49 = llvm.load %4 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c3_i64_16 : i64
    scf.if %50 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %49, %c3_i64_16 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %51 = arith.extui %48 : i32 to i64
    %52 = arith.addi %51, %c0_i64 : i64
    %53 = llvm.getelementptr %9[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_17 = arith.constant 3 : i64
    %55 = llvm.load %4 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c3_i64_17 : i64
    scf.if %56 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %55, %c3_i64_17 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c0_i64_18 = arith.constant 0 : i64
    %57 = arith.extui %40 : i32 to i64
    %58 = arith.addi %57, %c0_i64_18 : i64
    %59 = llvm.getelementptr %9[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %59 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_19 = arith.constant 3 : i64
    %60 = llvm.load %4 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_19 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %60, %c3_i64_19 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_20 = arith.constant 1 : i64
    %63 = llvm.load %4 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c1_i64_20 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %63, %c1_i64_20 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_21 = arith.constant 3 : i64
    %65 = llvm.load %4 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c3_i64_21 : i64
    scf.if %66 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %65, %c3_i64_21 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %67 = arith.addi %62, %c8_i32 : i32
    %c3_i64_22 = arith.constant 3 : i64
    %68 = llvm.load %4 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c3_i64_22 : i64
    scf.if %69 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %68, %c3_i64_22 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %70 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_23 = arith.constant 1 : i64
    %71 = llvm.load %4 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c1_i64_23 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %71, %c1_i64_23 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c8_i32_24 = arith.constant 8 : i32
    %c3_i64_25 = arith.constant 3 : i64
    %73 = llvm.load %4 : !llvm.ptr -> i64
    %74 = arith.cmpi ult, %73, %c3_i64_25 : i64
    scf.if %74 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %73, %c3_i64_25 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %75 = arith.addi %70, %c8_i32_24 : i32
    %c3_i64_26 = arith.constant 3 : i64
    %76 = llvm.load %4 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c3_i64_26 : i64
    scf.if %77 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %76, %c3_i64_26 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c0_i64_27 = arith.constant 0 : i64
    %78 = arith.extui %75 : i32 to i64
    %79 = arith.addi %78, %c0_i64_27 : i64
    %80 = llvm.getelementptr %9[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_28 = arith.constant 3 : i64
    %82 = llvm.load %4 : !llvm.ptr -> i64
    %83 = arith.cmpi ult, %82, %c3_i64_28 : i64
    scf.if %83 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %82, %c3_i64_28 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c0_i64_29 = arith.constant 0 : i64
    %84 = arith.extui %67 : i32 to i64
    %85 = arith.addi %84, %c0_i64_29 : i64
    %86 = llvm.getelementptr %9[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %81, %86 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_30 = arith.constant 3 : i64
    %87 = llvm.load %4 : !llvm.ptr -> i64
    %88 = arith.cmpi ult, %87, %c3_i64_30 : i64
    scf.if %88 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %87, %c3_i64_30 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %89 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_31 = arith.constant 3 : i64
    %90 = llvm.load %4 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c3_i64_31 : i64
    scf.if %91 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %90, %c3_i64_31 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %92 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_32 = arith.constant 3 : i64
    %93 = llvm.load %4 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c3_i64_32 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %93, %c3_i64_32 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %95 = arith.extui %89 : i32 to i64
    %96 = arith.addi %95, %c28_i64 : i64
    %97 = llvm.getelementptr %9[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_33 = arith.constant 3 : i64
    %98 = llvm.load %4 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_33 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %98, %c3_i64_33 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_34 = arith.constant 3 : i64
    %101 = llvm.load %4 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c3_i64_34 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %101, %c3_i64_34 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_35 = arith.constant 3 : i64
    %104 = llvm.load %4 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c3_i64_35 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %104, %c3_i64_35 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c24_i64_36 = arith.constant 24 : i64
    %106 = arith.extui %100 : i32 to i64
    %107 = arith.addi %106, %c24_i64_36 : i64
    %108 = llvm.getelementptr %9[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %103, %108 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_37 = arith.constant 3 : i64
    %109 = llvm.load %4 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c3_i64_37 : i64
    scf.if %110 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %109, %c3_i64_37 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %111 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_38 = arith.constant 3 : i64
    %112 = llvm.load %4 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c3_i64_38 : i64
    scf.if %113 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %112, %c3_i64_38 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %114 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_39 = arith.constant 3 : i64
    %115 = llvm.load %4 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c3_i64_39 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %115, %c3_i64_39 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c0_i64_40 = arith.constant 0 : i64
    %117 = arith.extui %114 : i32 to i64
    %118 = arith.addi %117, %c0_i64_40 : i64
    %119 = llvm.getelementptr %9[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %120 = llvm.load volatile %119 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_41 = arith.constant 3 : i64
    %121 = llvm.load %4 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %c3_i64_41 : i64
    scf.if %122 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %121, %c3_i64_41 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c0_i64_42 = arith.constant 0 : i64
    %123 = arith.extui %111 : i32 to i64
    %124 = arith.addi %123, %c0_i64_42 : i64
    %125 = llvm.getelementptr %9[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %120, %125 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_43 = arith.constant 3 : i64
    %126 = llvm.load %4 : !llvm.ptr -> i64
    %127 = arith.cmpi ult, %126, %c3_i64_43 : i64
    scf.if %127 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %126, %c3_i64_43 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %128 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %129 = llvm.load %4 : !llvm.ptr -> i64
    %130 = arith.cmpi ult, %129, %c6_i64 : i64
    scf.if %130 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %129, %c6_i64 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    call @f35(%arg0, %128) : (!llvm.ptr, i32) -> ()
    %c0_i64_44 = arith.constant 0 : i64
    %131 = llvm.load %4 : !llvm.ptr -> i64
    %132 = arith.cmpi ult, %131, %c0_i64_44 : i64
    scf.if %132 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %133 = arith.subi %131, %c0_i64_44 : i64
      llvm.store %133, %4 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f39(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_5 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %13 = llvm.load %7 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %13, %c3_i64 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %15 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %16 = llvm.load %7 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c1_i64 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %16, %c1_i64 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c64_i32 = arith.constant 64 : i32
    %c3_i64_6 = arith.constant 3 : i64
    %18 = llvm.load %7 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_6 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %18, %c3_i64_6 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %20 = arith.subi %15, %c64_i32 : i32
    %c3_i64_7 = arith.constant 3 : i64
    %21 = llvm.load %7 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_7 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %21, %c3_i64_7 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %2 : i32, !llvm.ptr
    %c3_i64_8 = arith.constant 3 : i64
    %23 = llvm.load %7 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_8 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %23, %c3_i64_8 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %25 = llvm.load %7 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_9 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %25, %c1_i64_9 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c3_i64_10 = arith.constant 3 : i64
    %27 = llvm.load %7 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c3_i64_10 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %27, %c3_i64_10 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %30 = llvm.load %7 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c3_i64_11 : i64
    scf.if %31 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %30, %c3_i64_11 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_12 = arith.constant 0 : i64
    %32 = arith.extui %29 : i32 to i64
    %33 = arith.addi %32, %c0_i64_12 : i64
    %34 = llvm.getelementptr %12[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_13 = arith.constant 1 : i64
    %36 = llvm.load %7 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c1_i64_13 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %36, %c1_i64_13 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c3_i64_14 = arith.constant 3 : i64
    %38 = llvm.load %7 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_14 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %38, %c3_i64_14 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %40 = arith.cmpi eq, %35, %c-2147483648_i32 : i32
    %41 = arith.extui %40 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %42 = arith.cmpi eq, %41, %c0_i32_15 : i32
    %43 = arith.extui %42 : i1 to i32
    %c1_i64_16 = arith.constant 1 : i64
    %44 = llvm.load %7 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c1_i64_16 : i64
    scf.if %45 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %44, %c1_i64_16 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i32_17 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %43, %c0_i32_17 : i32
    cf.cond_br %46, ^bb3, ^bb4
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c3_i64_18 = arith.constant 3 : i64
    %47 = llvm.load %7 : !llvm.ptr -> i64
    %48 = arith.cmpi ult, %47, %c3_i64_18 : i64
    scf.if %48 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %47, %c3_i64_18 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_19 = arith.constant 3 : i64
    %50 = llvm.load %7 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c3_i64_19 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %50, %c3_i64_19 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_20 = arith.constant 0 : i64
    %52 = arith.extui %49 : i32 to i64
    %53 = arith.addi %52, %c0_i64_20 : i64
    %54 = llvm.getelementptr %12[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_21 = arith.constant 3 : i64
    %56 = llvm.load %7 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c3_i64_21 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %56, %c3_i64_21 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    llvm.store %55, %5 : i64, !llvm.ptr
    %c3_i64_22 = arith.constant 3 : i64
    %58 = llvm.load %7 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c3_i64_22 : i64
    scf.if %59 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %58, %c3_i64_22 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %60 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_23 = arith.constant 1 : i64
    %61 = llvm.load %7 : !llvm.ptr -> i64
    %62 = arith.cmpi ult, %61, %c1_i64_23 : i64
    scf.if %62 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %61, %c1_i64_23 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c3_i64_24 = arith.constant 3 : i64
    %63 = llvm.load %7 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c3_i64_24 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %63, %c3_i64_24 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_25 = arith.constant 0 : i64
    %65 = arith.extui %60 : i32 to i64
    %66 = arith.addi %65, %c0_i64_25 : i64
    %67 = llvm.getelementptr %12[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %67 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_26 = arith.constant 3 : i64
    %68 = llvm.load %7 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c3_i64_26 : i64
    scf.if %69 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %68, %c3_i64_26 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_27 = arith.constant 1 : i64
    %71 = llvm.load %7 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c1_i64_27 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %71, %c1_i64_27 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_28 = arith.constant 3 : i64
    %73 = llvm.load %7 : !llvm.ptr -> i64
    %74 = arith.cmpi ult, %73, %c3_i64_28 : i64
    scf.if %74 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %73, %c3_i64_28 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %75 = arith.addi %70, %c8_i32 : i32
    %c3_i64_29 = arith.constant 3 : i64
    %76 = llvm.load %7 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c3_i64_29 : i64
    scf.if %77 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %76, %c3_i64_29 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    llvm.store %75, %3 : i32, !llvm.ptr
    %c3_i64_30 = arith.constant 3 : i64
    %78 = llvm.load %7 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c3_i64_30 : i64
    scf.if %79 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %78, %c3_i64_30 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %80 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_31 = arith.constant 1 : i64
    %81 = llvm.load %7 : !llvm.ptr -> i64
    %82 = arith.cmpi ult, %81, %c1_i64_31 : i64
    scf.if %82 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %81, %c1_i64_31 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c8_i32_32 = arith.constant 8 : i32
    %c3_i64_33 = arith.constant 3 : i64
    %83 = llvm.load %7 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_33 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %83, %c3_i64_33 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %85 = arith.addi %80, %c8_i32_32 : i32
    %c3_i64_34 = arith.constant 3 : i64
    %86 = llvm.load %7 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %c3_i64_34 : i64
    scf.if %87 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %86, %c3_i64_34 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    llvm.store %85, %1 : i32, !llvm.ptr
    %c3_i64_35 = arith.constant 3 : i64
    %88 = llvm.load %7 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c3_i64_35 : i64
    scf.if %89 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %88, %c3_i64_35 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_36 = arith.constant 0 : i64
    %90 = arith.extui %85 : i32 to i64
    %91 = arith.addi %90, %c0_i64_36 : i64
    %92 = llvm.getelementptr %12[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_37 = arith.constant 3 : i64
    %94 = llvm.load %7 : !llvm.ptr -> i64
    %95 = arith.cmpi ult, %94, %c3_i64_37 : i64
    scf.if %95 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %94, %c3_i64_37 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_38 = arith.constant 0 : i64
    %96 = arith.extui %75 : i32 to i64
    %97 = arith.addi %96, %c0_i64_38 : i64
    %98 = llvm.getelementptr %12[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_39 = arith.constant 3 : i64
    %99 = llvm.load %7 : !llvm.ptr -> i64
    %100 = arith.cmpi ult, %99, %c3_i64_39 : i64
    scf.if %100 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %99, %c3_i64_39 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %101 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_40 = arith.constant 1 : i64
    %102 = llvm.load %7 : !llvm.ptr -> i64
    %103 = arith.cmpi ult, %102, %c1_i64_40 : i64
    scf.if %103 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %102, %c1_i64_40 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i32_41 = arith.constant 0 : i32
    %c3_i64_42 = arith.constant 3 : i64
    %104 = llvm.load %7 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c3_i64_42 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %104, %c3_i64_42 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_43 = arith.constant 0 : i64
    %106 = arith.extui %101 : i32 to i64
    %107 = arith.addi %106, %c0_i64_43 : i64
    %108 = llvm.getelementptr %12[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_41, %108 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_44 = arith.constant 1 : i64
    %109 = llvm.load %7 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c1_i64_44 : i64
    scf.if %110 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %109, %c1_i64_44 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i32_45 = arith.constant 0 : i32
    %c3_i64_46 = arith.constant 3 : i64
    %111 = llvm.load %7 : !llvm.ptr -> i64
    %112 = arith.cmpi ult, %111, %c3_i64_46 : i64
    scf.if %112 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %111, %c3_i64_46 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c1049497_i64 = arith.constant 1049497 : i64
    %113 = arith.extui %c0_i32_45 : i32 to i64
    %114 = arith.addi %113, %c1049497_i64 : i64
    %115 = llvm.getelementptr %12[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %116 = llvm.load volatile %115 {alignment = 1 : i64} : !llvm.ptr -> i8
    %117 = arith.extui %116 : i8 to i32
    %c1_i64_47 = arith.constant 1 : i64
    %118 = llvm.load %7 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c1_i64_47 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %118, %c1_i64_47 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c3_i64_48 = arith.constant 3 : i64
    %120 = llvm.load %7 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c3_i64_48 : i64
    scf.if %121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %120, %c3_i64_48 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %122 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_49 = arith.constant 3 : i64
    %123 = llvm.load %7 : !llvm.ptr -> i64
    %124 = arith.cmpi ult, %123, %c3_i64_49 : i64
    scf.if %124 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %123, %c3_i64_49 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %125 = llvm.load %5 : !llvm.ptr -> i64
    %c3_i64_50 = arith.constant 3 : i64
    %126 = llvm.load %7 : !llvm.ptr -> i64
    %127 = arith.cmpi ult, %126, %c3_i64_50 : i64
    scf.if %127 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %126, %c3_i64_50 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_51 = arith.constant 0 : i64
    %128 = arith.extui %122 : i32 to i64
    %129 = arith.addi %128, %c0_i64_51 : i64
    %130 = llvm.getelementptr %12[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %125, %130 {alignment = 1 : i64} : i64, !llvm.ptr
    %c1_i64_52 = arith.constant 1 : i64
    %131 = llvm.load %7 : !llvm.ptr -> i64
    %132 = arith.cmpi ult, %131, %c1_i64_52 : i64
    scf.if %132 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %131, %c1_i64_52 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c1_i64_53 = arith.constant 1 : i64
    %133 = llvm.load %7 : !llvm.ptr -> i64
    %134 = arith.cmpi ult, %133, %c1_i64_53 : i64
    scf.if %134 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %133, %c1_i64_53 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c12_i32 = arith.constant 12 : i32
    %c1_i64_54 = arith.constant 1 : i64
    %135 = llvm.load %7 : !llvm.ptr -> i64
    %136 = arith.cmpi ult, %135, %c1_i64_54 : i64
    scf.if %136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %135, %c1_i64_54 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c6_i64 = arith.constant 6 : i64
    %137 = llvm.load %7 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c6_i64 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %137, %c6_i64 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %139 = call @f9(%arg0, %c12_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    %c3_i64_55 = arith.constant 3 : i64
    %140 = llvm.load %7 : !llvm.ptr -> i64
    %141 = arith.cmpi ult, %140, %c3_i64_55 : i64
    scf.if %141 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %140, %c3_i64_55 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    llvm.store %139, %1 : i32, !llvm.ptr
    %c3_i64_56 = arith.constant 3 : i64
    %142 = llvm.load %7 : !llvm.ptr -> i64
    %143 = arith.cmpi ult, %142, %c3_i64_56 : i64
    scf.if %143 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %142, %c3_i64_56 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i32_57 = arith.constant 0 : i32
    %144 = arith.cmpi eq, %139, %c0_i32_57 : i32
    %145 = arith.extui %144 : i1 to i32
    %c1_i64_58 = arith.constant 1 : i64
    %146 = llvm.load %7 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c1_i64_58 : i64
    scf.if %147 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %146, %c1_i64_58 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i32_59 = arith.constant 0 : i32
    %148 = arith.cmpi ne, %145, %c0_i32_59 : i32
    cf.cond_br %148, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c3_i64_60 = arith.constant 3 : i64
    %149 = llvm.load %7 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c3_i64_60 : i64
    scf.if %150 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %149, %c3_i64_60 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %151 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_61 = arith.constant 3 : i64
    %152 = llvm.load %7 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c3_i64_61 : i64
    scf.if %153 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %152, %c3_i64_61 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %154 = arith.extui %151 : i32 to i64
    %155 = arith.addi %154, %c12_i64 : i64
    %156 = llvm.getelementptr %12[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load volatile %156 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_62 = arith.constant 3 : i64
    %158 = llvm.load %7 : !llvm.ptr -> i64
    %159 = arith.cmpi ult, %158, %c3_i64_62 : i64
    scf.if %159 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %158, %c3_i64_62 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    llvm.store %157, %3 : i32, !llvm.ptr
    %c3_i64_63 = arith.constant 3 : i64
    %160 = llvm.load %7 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_63 : i64
    scf.if %161 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %160, %c3_i64_63 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %162 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_64 = arith.constant 1 : i64
    %163 = llvm.load %7 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c1_i64_64 : i64
    scf.if %164 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %163, %c1_i64_64 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c28_i32 = arith.constant 28 : i32
    %c3_i64_65 = arith.constant 3 : i64
    %165 = llvm.load %7 : !llvm.ptr -> i64
    %166 = arith.cmpi ult, %165, %c3_i64_65 : i64
    scf.if %166 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %165, %c3_i64_65 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %167 = arith.addi %162, %c28_i32 : i32
    %c1_i64_66 = arith.constant 1 : i64
    %168 = llvm.load %7 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c1_i64_66 : i64
    scf.if %169 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %168, %c1_i64_66 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c8_i32_67 = arith.constant 8 : i32
    %c3_i64_68 = arith.constant 3 : i64
    %170 = llvm.load %7 : !llvm.ptr -> i64
    %171 = arith.cmpi ult, %170, %c3_i64_68 : i64
    scf.if %171 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %170, %c3_i64_68 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %172 = arith.addi %167, %c8_i32_67 : i32
    %c3_i64_69 = arith.constant 3 : i64
    %173 = llvm.load %7 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c3_i64_69 : i64
    scf.if %174 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %173, %c3_i64_69 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    llvm.store %172, %4 : i32, !llvm.ptr
    %c1_i64_70 = arith.constant 1 : i64
    %175 = llvm.load %7 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c1_i64_70 : i64
    scf.if %176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %175, %c1_i64_70 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i32_71 = arith.constant 0 : i32
    %c3_i64_72 = arith.constant 3 : i64
    %177 = llvm.load %7 : !llvm.ptr -> i64
    %178 = arith.cmpi ult, %177, %c3_i64_72 : i64
    scf.if %178 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %177, %c3_i64_72 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_73 = arith.constant 0 : i64
    %179 = arith.extui %172 : i32 to i64
    %180 = arith.addi %179, %c0_i64_73 : i64
    %181 = llvm.getelementptr %12[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_71, %181 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_74 = arith.constant 3 : i64
    %182 = llvm.load %7 : !llvm.ptr -> i64
    %183 = arith.cmpi ult, %182, %c3_i64_74 : i64
    scf.if %183 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %182, %c3_i64_74 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %184 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_75 = arith.constant 1 : i64
    %185 = llvm.load %7 : !llvm.ptr -> i64
    %186 = arith.cmpi ult, %185, %c1_i64_75 : i64
    scf.if %186 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %185, %c1_i64_75 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c4294967296_i64_76 = arith.constant 4294967296 : i64
    %c3_i64_77 = arith.constant 3 : i64
    %187 = llvm.load %7 : !llvm.ptr -> i64
    %188 = arith.cmpi ult, %187, %c3_i64_77 : i64
    scf.if %188 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %187, %c3_i64_77 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %189 = arith.extui %184 : i32 to i64
    %190 = arith.addi %189, %c28_i64 : i64
    %191 = llvm.getelementptr %12[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_76, %191 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_78 = arith.constant 3 : i64
    %192 = llvm.load %7 : !llvm.ptr -> i64
    %193 = arith.cmpi ult, %192, %c3_i64_78 : i64
    scf.if %193 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %192, %c3_i64_78 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %194 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_79 = arith.constant 1 : i64
    %195 = llvm.load %7 : !llvm.ptr -> i64
    %196 = arith.cmpi ult, %195, %c1_i64_79 : i64
    scf.if %196 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %195, %c1_i64_79 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c40_i32 = arith.constant 40 : i32
    %c3_i64_80 = arith.constant 3 : i64
    %197 = llvm.load %7 : !llvm.ptr -> i64
    %198 = arith.cmpi ult, %197, %c3_i64_80 : i64
    scf.if %198 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %197, %c3_i64_80 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %199 = arith.addi %194, %c40_i32 : i32
    %c1_i64_81 = arith.constant 1 : i64
    %200 = llvm.load %7 : !llvm.ptr -> i64
    %201 = arith.cmpi ult, %200, %c1_i64_81 : i64
    scf.if %201 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %200, %c1_i64_81 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_82 = arith.constant 3 : i64
    %202 = llvm.load %7 : !llvm.ptr -> i64
    %203 = arith.cmpi ult, %202, %c3_i64_82 : i64
    scf.if %203 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %202, %c3_i64_82 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %204 = arith.addi %199, %c16_i32 : i32
    %c3_i64_83 = arith.constant 3 : i64
    %205 = llvm.load %7 : !llvm.ptr -> i64
    %206 = arith.cmpi ult, %205, %c3_i64_83 : i64
    scf.if %206 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %205, %c3_i64_83 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %207 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_84 = arith.constant 1 : i64
    %208 = llvm.load %7 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c1_i64_84 : i64
    scf.if %209 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %208, %c1_i64_84 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c16_i32_85 = arith.constant 16 : i32
    %c3_i64_86 = arith.constant 3 : i64
    %210 = llvm.load %7 : !llvm.ptr -> i64
    %211 = arith.cmpi ult, %210, %c3_i64_86 : i64
    scf.if %211 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %210, %c3_i64_86 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %212 = arith.addi %207, %c16_i32_85 : i32
    %c3_i64_87 = arith.constant 3 : i64
    %213 = llvm.load %7 : !llvm.ptr -> i64
    %214 = arith.cmpi ult, %213, %c3_i64_87 : i64
    scf.if %214 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %213, %c3_i64_87 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_88 = arith.constant 0 : i64
    %215 = arith.extui %212 : i32 to i64
    %216 = arith.addi %215, %c0_i64_88 : i64
    %217 = llvm.getelementptr %12[%216] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %218 = llvm.load volatile %217 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_89 = arith.constant 3 : i64
    %219 = llvm.load %7 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c3_i64_89 : i64
    scf.if %220 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %219, %c3_i64_89 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_90 = arith.constant 0 : i64
    %221 = arith.extui %204 : i32 to i64
    %222 = arith.addi %221, %c0_i64_90 : i64
    %223 = llvm.getelementptr %12[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %218, %223 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_91 = arith.constant 3 : i64
    %224 = llvm.load %7 : !llvm.ptr -> i64
    %225 = arith.cmpi ult, %224, %c3_i64_91 : i64
    scf.if %225 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %224, %c3_i64_91 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %226 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_92 = arith.constant 1 : i64
    %227 = llvm.load %7 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %c1_i64_92 : i64
    scf.if %228 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %227, %c1_i64_92 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c40_i32_93 = arith.constant 40 : i32
    %c3_i64_94 = arith.constant 3 : i64
    %229 = llvm.load %7 : !llvm.ptr -> i64
    %230 = arith.cmpi ult, %229, %c3_i64_94 : i64
    scf.if %230 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %229, %c3_i64_94 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %231 = arith.addi %226, %c40_i32_93 : i32
    %c1_i64_95 = arith.constant 1 : i64
    %232 = llvm.load %7 : !llvm.ptr -> i64
    %233 = arith.cmpi ult, %232, %c1_i64_95 : i64
    scf.if %233 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %232, %c1_i64_95 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c8_i32_96 = arith.constant 8 : i32
    %c3_i64_97 = arith.constant 3 : i64
    %234 = llvm.load %7 : !llvm.ptr -> i64
    %235 = arith.cmpi ult, %234, %c3_i64_97 : i64
    scf.if %235 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %234, %c3_i64_97 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %236 = arith.addi %231, %c8_i32_96 : i32
    %c3_i64_98 = arith.constant 3 : i64
    %237 = llvm.load %7 : !llvm.ptr -> i64
    %238 = arith.cmpi ult, %237, %c3_i64_98 : i64
    scf.if %238 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %237, %c3_i64_98 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %239 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_99 = arith.constant 1 : i64
    %240 = llvm.load %7 : !llvm.ptr -> i64
    %241 = arith.cmpi ult, %240, %c1_i64_99 : i64
    scf.if %241 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %240, %c1_i64_99 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c8_i32_100 = arith.constant 8 : i32
    %c3_i64_101 = arith.constant 3 : i64
    %242 = llvm.load %7 : !llvm.ptr -> i64
    %243 = arith.cmpi ult, %242, %c3_i64_101 : i64
    scf.if %243 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %242, %c3_i64_101 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %244 = arith.addi %239, %c8_i32_100 : i32
    %c3_i64_102 = arith.constant 3 : i64
    %245 = llvm.load %7 : !llvm.ptr -> i64
    %246 = arith.cmpi ult, %245, %c3_i64_102 : i64
    scf.if %246 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %245, %c3_i64_102 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_103 = arith.constant 0 : i64
    %247 = arith.extui %244 : i32 to i64
    %248 = arith.addi %247, %c0_i64_103 : i64
    %249 = llvm.getelementptr %12[%248] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %250 = llvm.load volatile %249 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_104 = arith.constant 3 : i64
    %251 = llvm.load %7 : !llvm.ptr -> i64
    %252 = arith.cmpi ult, %251, %c3_i64_104 : i64
    scf.if %252 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %251, %c3_i64_104 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_105 = arith.constant 0 : i64
    %253 = arith.extui %236 : i32 to i64
    %254 = arith.addi %253, %c0_i64_105 : i64
    %255 = llvm.getelementptr %12[%254] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %250, %255 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_106 = arith.constant 3 : i64
    %256 = llvm.load %7 : !llvm.ptr -> i64
    %257 = arith.cmpi ult, %256, %c3_i64_106 : i64
    scf.if %257 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %256, %c3_i64_106 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %258 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_107 = arith.constant 3 : i64
    %259 = llvm.load %7 : !llvm.ptr -> i64
    %260 = arith.cmpi ult, %259, %c3_i64_107 : i64
    scf.if %260 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %259, %c3_i64_107 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %261 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_108 = arith.constant 3 : i64
    %262 = llvm.load %7 : !llvm.ptr -> i64
    %263 = arith.cmpi ult, %262, %c3_i64_108 : i64
    scf.if %263 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %262, %c3_i64_108 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_109 = arith.constant 0 : i64
    %264 = arith.extui %261 : i32 to i64
    %265 = arith.addi %264, %c0_i64_109 : i64
    %266 = llvm.getelementptr %12[%265] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %267 = llvm.load volatile %266 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_110 = arith.constant 3 : i64
    %268 = llvm.load %7 : !llvm.ptr -> i64
    %269 = arith.cmpi ult, %268, %c3_i64_110 : i64
    scf.if %269 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %268, %c3_i64_110 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c40_i64 = arith.constant 40 : i64
    %270 = arith.extui %258 : i32 to i64
    %271 = arith.addi %270, %c40_i64 : i64
    %272 = llvm.getelementptr %12[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %267, %272 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_111 = arith.constant 3 : i64
    %273 = llvm.load %7 : !llvm.ptr -> i64
    %274 = arith.cmpi ult, %273, %c3_i64_111 : i64
    scf.if %274 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %273, %c3_i64_111 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %275 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_112 = arith.constant 1 : i64
    %276 = llvm.load %7 : !llvm.ptr -> i64
    %277 = arith.cmpi ult, %276, %c1_i64_112 : i64
    scf.if %277 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %276, %c1_i64_112 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c28_i32_113 = arith.constant 28 : i32
    %c3_i64_114 = arith.constant 3 : i64
    %278 = llvm.load %7 : !llvm.ptr -> i64
    %279 = arith.cmpi ult, %278, %c3_i64_114 : i64
    scf.if %279 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %278, %c3_i64_114 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %280 = arith.addi %275, %c28_i32_113 : i32
    %c1_i64_115 = arith.constant 1 : i64
    %281 = llvm.load %7 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c1_i64_115 : i64
    scf.if %282 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %281, %c1_i64_115 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c1048824_i32 = arith.constant 1048824 : i32
    %c3_i64_116 = arith.constant 3 : i64
    %283 = llvm.load %7 : !llvm.ptr -> i64
    %284 = arith.cmpi ult, %283, %c3_i64_116 : i64
    scf.if %284 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %283, %c3_i64_116 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %285 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_117 = arith.constant 1 : i64
    %286 = llvm.load %7 : !llvm.ptr -> i64
    %287 = arith.cmpi ult, %286, %c1_i64_117 : i64
    scf.if %287 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %286, %c1_i64_117 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c40_i32_118 = arith.constant 40 : i32
    %c3_i64_119 = arith.constant 3 : i64
    %288 = llvm.load %7 : !llvm.ptr -> i64
    %289 = arith.cmpi ult, %288, %c3_i64_119 : i64
    scf.if %289 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %288, %c3_i64_119 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %290 = arith.addi %285, %c40_i32_118 : i32
    %c6_i64_120 = arith.constant 6 : i64
    %291 = llvm.load %7 : !llvm.ptr -> i64
    %292 = arith.cmpi ult, %291, %c6_i64_120 : i64
    scf.if %292 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %291, %c6_i64_120 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %293 = call @f66(%arg0, %280, %c1048824_i32, %290) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_121 = arith.constant 1 : i64
    %294 = llvm.load %7 : !llvm.ptr -> i64
    %295 = arith.cmpi ult, %294, %c1_i64_121 : i64
    scf.if %295 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %294, %c1_i64_121 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c3_i64_122 = arith.constant 3 : i64
    %296 = llvm.load %7 : !llvm.ptr -> i64
    %297 = arith.cmpi ult, %296, %c3_i64_122 : i64
    scf.if %297 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %296, %c3_i64_122 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %298 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_123 = arith.constant 1 : i64
    %299 = llvm.load %7 : !llvm.ptr -> i64
    %300 = arith.cmpi ult, %299, %c1_i64_123 : i64
    scf.if %300 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %299, %c1_i64_123 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c16_i32_124 = arith.constant 16 : i32
    %c3_i64_125 = arith.constant 3 : i64
    %301 = llvm.load %7 : !llvm.ptr -> i64
    %302 = arith.cmpi ult, %301, %c3_i64_125 : i64
    scf.if %302 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %301, %c3_i64_125 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %303 = arith.addi %298, %c16_i32_124 : i32
    %c1_i64_126 = arith.constant 1 : i64
    %304 = llvm.load %7 : !llvm.ptr -> i64
    %305 = arith.cmpi ult, %304, %c1_i64_126 : i64
    scf.if %305 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %304, %c1_i64_126 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c8_i32_127 = arith.constant 8 : i32
    %c3_i64_128 = arith.constant 3 : i64
    %306 = llvm.load %7 : !llvm.ptr -> i64
    %307 = arith.cmpi ult, %306, %c3_i64_128 : i64
    scf.if %307 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %306, %c3_i64_128 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %308 = arith.addi %303, %c8_i32_127 : i32
    %c3_i64_129 = arith.constant 3 : i64
    %309 = llvm.load %7 : !llvm.ptr -> i64
    %310 = arith.cmpi ult, %309, %c3_i64_129 : i64
    scf.if %310 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %309, %c3_i64_129 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %311 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_130 = arith.constant 3 : i64
    %312 = llvm.load %7 : !llvm.ptr -> i64
    %313 = arith.cmpi ult, %312, %c3_i64_130 : i64
    scf.if %313 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %312, %c3_i64_130 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_131 = arith.constant 0 : i64
    %314 = arith.extui %311 : i32 to i64
    %315 = arith.addi %314, %c0_i64_131 : i64
    %316 = llvm.getelementptr %12[%315] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %317 = llvm.load volatile %316 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_132 = arith.constant 3 : i64
    %318 = llvm.load %7 : !llvm.ptr -> i64
    %319 = arith.cmpi ult, %318, %c3_i64_132 : i64
    scf.if %319 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %318, %c3_i64_132 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    llvm.store %317, %3 : i32, !llvm.ptr
    %c3_i64_133 = arith.constant 3 : i64
    %320 = llvm.load %7 : !llvm.ptr -> i64
    %321 = arith.cmpi ult, %320, %c3_i64_133 : i64
    scf.if %321 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %320, %c3_i64_133 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_134 = arith.constant 0 : i64
    %322 = arith.extui %308 : i32 to i64
    %323 = arith.addi %322, %c0_i64_134 : i64
    %324 = llvm.getelementptr %12[%323] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %317, %324 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_135 = arith.constant 3 : i64
    %325 = llvm.load %7 : !llvm.ptr -> i64
    %326 = arith.cmpi ult, %325, %c3_i64_135 : i64
    scf.if %326 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %325, %c3_i64_135 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %327 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_136 = arith.constant 3 : i64
    %328 = llvm.load %7 : !llvm.ptr -> i64
    %329 = arith.cmpi ult, %328, %c3_i64_136 : i64
    scf.if %329 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %328, %c3_i64_136 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %330 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_137 = arith.constant 3 : i64
    %331 = llvm.load %7 : !llvm.ptr -> i64
    %332 = arith.cmpi ult, %331, %c3_i64_137 : i64
    scf.if %332 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %331, %c3_i64_137 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c28_i64_138 = arith.constant 28 : i64
    %333 = arith.extui %330 : i32 to i64
    %334 = arith.addi %333, %c28_i64_138 : i64
    %335 = llvm.getelementptr %12[%334] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %336 = llvm.load volatile %335 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_139 = arith.constant 3 : i64
    %337 = llvm.load %7 : !llvm.ptr -> i64
    %338 = arith.cmpi ult, %337, %c3_i64_139 : i64
    scf.if %338 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %337, %c3_i64_139 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    llvm.store %336, %5 : i64, !llvm.ptr
    %c3_i64_140 = arith.constant 3 : i64
    %339 = llvm.load %7 : !llvm.ptr -> i64
    %340 = arith.cmpi ult, %339, %c3_i64_140 : i64
    scf.if %340 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %339, %c3_i64_140 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %341 = arith.extui %327 : i32 to i64
    %342 = arith.addi %341, %c16_i64 : i64
    %343 = llvm.getelementptr %12[%342] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %336, %343 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_141 = arith.constant 3 : i64
    %344 = llvm.load %7 : !llvm.ptr -> i64
    %345 = arith.cmpi ult, %344, %c3_i64_141 : i64
    scf.if %345 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %344, %c3_i64_141 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %346 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_142 = arith.constant 1 : i64
    %347 = llvm.load %7 : !llvm.ptr -> i64
    %348 = arith.cmpi ult, %347, %c1_i64_142 : i64
    scf.if %348 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %347, %c1_i64_142 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c8_i32_143 = arith.constant 8 : i32
    %c3_i64_144 = arith.constant 3 : i64
    %349 = llvm.load %7 : !llvm.ptr -> i64
    %350 = arith.cmpi ult, %349, %c3_i64_144 : i64
    scf.if %350 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %349, %c3_i64_144 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %351 = arith.addi %346, %c8_i32_143 : i32
    %c3_i64_145 = arith.constant 3 : i64
    %352 = llvm.load %7 : !llvm.ptr -> i64
    %353 = arith.cmpi ult, %352, %c3_i64_145 : i64
    scf.if %353 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %352, %c3_i64_145 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %354 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_146 = arith.constant 3 : i64
    %355 = llvm.load %7 : !llvm.ptr -> i64
    %356 = arith.cmpi ult, %355, %c3_i64_146 : i64
    scf.if %356 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %355, %c3_i64_146 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_147 = arith.constant 0 : i64
    %357 = arith.extui %351 : i32 to i64
    %358 = arith.addi %357, %c0_i64_147 : i64
    %359 = llvm.getelementptr %12[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %354, %359 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_148 = arith.constant 3 : i64
    %360 = llvm.load %7 : !llvm.ptr -> i64
    %361 = arith.cmpi ult, %360, %c3_i64_148 : i64
    scf.if %361 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %360, %c3_i64_148 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %362 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_149 = arith.constant 3 : i64
    %363 = llvm.load %7 : !llvm.ptr -> i64
    %364 = arith.cmpi ult, %363, %c3_i64_149 : i64
    scf.if %364 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %363, %c3_i64_149 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %365 = llvm.load %5 : !llvm.ptr -> i64
    %c3_i64_150 = arith.constant 3 : i64
    %366 = llvm.load %7 : !llvm.ptr -> i64
    %367 = arith.cmpi ult, %366, %c3_i64_150 : i64
    scf.if %367 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %366, %c3_i64_150 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_151 = arith.constant 0 : i64
    %368 = arith.extui %362 : i32 to i64
    %369 = arith.addi %368, %c0_i64_151 : i64
    %370 = llvm.getelementptr %12[%369] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %365, %370 {alignment = 1 : i64} : i64, !llvm.ptr
    %c1_i64_152 = arith.constant 1 : i64
    %371 = llvm.load %7 : !llvm.ptr -> i64
    %372 = arith.cmpi ult, %371, %c1_i64_152 : i64
    scf.if %372 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %371, %c1_i64_152 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb5:  // pred: ^bb3
    %c1_i64_153 = arith.constant 1 : i64
    %373 = llvm.load %7 : !llvm.ptr -> i64
    %374 = arith.cmpi ult, %373, %c1_i64_153 : i64
    scf.if %374 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %373, %c1_i64_153 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c4_i32_154 = arith.constant 4 : i32
    %c1_i64_155 = arith.constant 1 : i64
    %375 = llvm.load %7 : !llvm.ptr -> i64
    %376 = arith.cmpi ult, %375, %c1_i64_155 : i64
    scf.if %376 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %375, %c1_i64_155 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c12_i32_156 = arith.constant 12 : i32
    %c6_i64_157 = arith.constant 6 : i64
    %377 = llvm.load %7 : !llvm.ptr -> i64
    %378 = arith.cmpi ult, %377, %c6_i64_157 : i64
    scf.if %378 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %377, %c6_i64_157 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    call @f58(%arg0, %c4_i32_154, %c12_i32_156) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_158 = arith.constant 0 : i64
    %379 = llvm.load %7 : !llvm.ptr -> i64
    %380 = arith.cmpi ult, %379, %c0_i64_158 : i64
    scf.if %380 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %379, %c0_i64_158 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb6:  // pred: ^bb3
    %c3_i64_159 = arith.constant 3 : i64
    %381 = llvm.load %7 : !llvm.ptr -> i64
    %382 = arith.cmpi ult, %381, %c3_i64_159 : i64
    scf.if %382 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %381, %c3_i64_159 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %383 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_160 = arith.constant 3 : i64
    %384 = llvm.load %7 : !llvm.ptr -> i64
    %385 = arith.cmpi ult, %384, %c3_i64_160 : i64
    scf.if %385 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %384, %c3_i64_160 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %386 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_161 = arith.constant 3 : i64
    %387 = llvm.load %7 : !llvm.ptr -> i64
    %388 = arith.cmpi ult, %387, %c3_i64_161 : i64
    scf.if %388 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %387, %c3_i64_161 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_162 = arith.constant 0 : i64
    %389 = arith.extui %386 : i32 to i64
    %390 = arith.addi %389, %c0_i64_162 : i64
    %391 = llvm.getelementptr %12[%390] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %392 = llvm.load volatile %391 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_163 = arith.constant 3 : i64
    %393 = llvm.load %7 : !llvm.ptr -> i64
    %394 = arith.cmpi ult, %393, %c3_i64_163 : i64
    scf.if %394 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %393, %c3_i64_163 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_164 = arith.constant 0 : i64
    %395 = arith.extui %383 : i32 to i64
    %396 = arith.addi %395, %c0_i64_164 : i64
    %397 = llvm.getelementptr %12[%396] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %392, %397 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_165 = arith.constant 3 : i64
    %398 = llvm.load %7 : !llvm.ptr -> i64
    %399 = arith.cmpi ult, %398, %c3_i64_165 : i64
    scf.if %399 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %398, %c3_i64_165 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %400 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_166 = arith.constant 1 : i64
    %401 = llvm.load %7 : !llvm.ptr -> i64
    %402 = arith.cmpi ult, %401, %c1_i64_166 : i64
    scf.if %402 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %401, %c1_i64_166 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c8_i32_167 = arith.constant 8 : i32
    %c3_i64_168 = arith.constant 3 : i64
    %403 = llvm.load %7 : !llvm.ptr -> i64
    %404 = arith.cmpi ult, %403, %c3_i64_168 : i64
    scf.if %404 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %403, %c3_i64_168 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %405 = arith.addi %400, %c8_i32_167 : i32
    %c3_i64_169 = arith.constant 3 : i64
    %406 = llvm.load %7 : !llvm.ptr -> i64
    %407 = arith.cmpi ult, %406, %c3_i64_169 : i64
    scf.if %407 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %406, %c3_i64_169 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %408 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_170 = arith.constant 3 : i64
    %409 = llvm.load %7 : !llvm.ptr -> i64
    %410 = arith.cmpi ult, %409, %c3_i64_170 : i64
    scf.if %410 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %409, %c3_i64_170 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_171 = arith.constant 0 : i64
    %411 = arith.extui %408 : i32 to i64
    %412 = arith.addi %411, %c0_i64_171 : i64
    %413 = llvm.getelementptr %12[%412] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %414 = llvm.load volatile %413 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_172 = arith.constant 3 : i64
    %415 = llvm.load %7 : !llvm.ptr -> i64
    %416 = arith.cmpi ult, %415, %c3_i64_172 : i64
    scf.if %416 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %415, %c3_i64_172 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_173 = arith.constant 0 : i64
    %417 = arith.extui %405 : i32 to i64
    %418 = arith.addi %417, %c0_i64_173 : i64
    %419 = llvm.getelementptr %12[%418] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %414, %419 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_174 = arith.constant 3 : i64
    %420 = llvm.load %7 : !llvm.ptr -> i64
    %421 = arith.cmpi ult, %420, %c3_i64_174 : i64
    scf.if %421 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %420, %c3_i64_174 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %422 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_175 = arith.constant 1 : i64
    %423 = llvm.load %7 : !llvm.ptr -> i64
    %424 = arith.cmpi ult, %423, %c1_i64_175 : i64
    scf.if %424 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %423, %c1_i64_175 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c1048940_i32 = arith.constant 1048940 : i32
    %c3_i64_176 = arith.constant 3 : i64
    %425 = llvm.load %7 : !llvm.ptr -> i64
    %426 = arith.cmpi ult, %425, %c3_i64_176 : i64
    scf.if %426 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %425, %c3_i64_176 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %427 = arith.extui %422 : i32 to i64
    %428 = arith.addi %427, %c4_i64 : i64
    %429 = llvm.getelementptr %12[%428] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048940_i32, %429 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_177 = arith.constant 3 : i64
    %430 = llvm.load %7 : !llvm.ptr -> i64
    %431 = arith.cmpi ult, %430, %c3_i64_177 : i64
    scf.if %431 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %430, %c3_i64_177 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %432 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_178 = arith.constant 3 : i64
    %433 = llvm.load %7 : !llvm.ptr -> i64
    %434 = arith.cmpi ult, %433, %c3_i64_178 : i64
    scf.if %434 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %433, %c3_i64_178 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %435 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_179 = arith.constant 3 : i64
    %436 = llvm.load %7 : !llvm.ptr -> i64
    %437 = arith.cmpi ult, %436, %c3_i64_179 : i64
    scf.if %437 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %436, %c3_i64_179 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c0_i64_180 = arith.constant 0 : i64
    %438 = arith.extui %432 : i32 to i64
    %439 = arith.addi %438, %c0_i64_180 : i64
    %440 = llvm.getelementptr %12[%439] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %435, %440 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_181 = arith.constant 3 : i64
    %441 = llvm.load %7 : !llvm.ptr -> i64
    %442 = arith.cmpi ult, %441, %c3_i64_181 : i64
    scf.if %442 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %441, %c3_i64_181 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %443 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_182 = arith.constant 1 : i64
    %444 = llvm.load %7 : !llvm.ptr -> i64
    %445 = arith.cmpi ult, %444, %c1_i64_182 : i64
    scf.if %445 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %444, %c1_i64_182 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %c64_i32_183 = arith.constant 64 : i32
    %c3_i64_184 = arith.constant 3 : i64
    %446 = llvm.load %7 : !llvm.ptr -> i64
    %447 = arith.cmpi ult, %446, %c3_i64_184 : i64
    scf.if %447 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %446, %c3_i64_184 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    %448 = arith.addi %443, %c64_i32_183 : i32
    %c3_i64_185 = arith.constant 3 : i64
    %449 = llvm.load %7 : !llvm.ptr -> i64
    %450 = arith.cmpi ult, %449, %c3_i64_185 : i64
    scf.if %450 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %449, %c3_i64_185 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    llvm.store %448, %9 : i32, !llvm.ptr
    %c1_i64_186 = arith.constant 1 : i64
    %451 = llvm.load %7 : !llvm.ptr -> i64
    %452 = arith.cmpi ult, %451, %c1_i64_186 : i64
    scf.if %452 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %453 = arith.subi %451, %c1_i64_186 : i64
      llvm.store %453, %7 : i64, !llvm.ptr
    }
    cf.br ^bb2
  }
  func.func @f40(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_5 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %13 = llvm.load %7 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %13, %c3_i64 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %15 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %16 = llvm.load %7 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c1_i64 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %16, %c1_i64 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c48_i32 = arith.constant 48 : i32
    %c3_i64_6 = arith.constant 3 : i64
    %18 = llvm.load %7 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_6 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %18, %c3_i64_6 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %20 = arith.subi %15, %c48_i32 : i32
    %c3_i64_7 = arith.constant 3 : i64
    %21 = llvm.load %7 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_7 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %21, %c3_i64_7 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %2 : i32, !llvm.ptr
    %c3_i64_8 = arith.constant 3 : i64
    %23 = llvm.load %7 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_8 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %23, %c3_i64_8 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %25 = llvm.load %7 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_9 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %25, %c1_i64_9 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c3_i64_10 = arith.constant 3 : i64
    %27 = llvm.load %7 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c3_i64_10 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %27, %c3_i64_10 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %30 = llvm.load %7 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c3_i64_11 : i64
    scf.if %31 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %30, %c3_i64_11 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_12 = arith.constant 0 : i64
    %32 = arith.extui %29 : i32 to i64
    %33 = arith.addi %32, %c0_i64_12 : i64
    %34 = llvm.getelementptr %12[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_13 = arith.constant 1 : i64
    %36 = llvm.load %7 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c1_i64_13 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %36, %c1_i64_13 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c3_i64_14 = arith.constant 3 : i64
    %38 = llvm.load %7 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_14 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %38, %c3_i64_14 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %40 = arith.cmpi eq, %35, %c-2147483648_i32 : i32
    %41 = arith.extui %40 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %42 = arith.cmpi eq, %41, %c0_i32_15 : i32
    %43 = arith.extui %42 : i1 to i32
    %c1_i64_16 = arith.constant 1 : i64
    %44 = llvm.load %7 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c1_i64_16 : i64
    scf.if %45 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %44, %c1_i64_16 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i32_17 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %43, %c0_i32_17 : i32
    cf.cond_br %46, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c3_i64_18 = arith.constant 3 : i64
    %47 = llvm.load %7 : !llvm.ptr -> i64
    %48 = arith.cmpi ult, %47, %c3_i64_18 : i64
    scf.if %48 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %47, %c3_i64_18 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_19 = arith.constant 1 : i64
    %50 = llvm.load %7 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c1_i64_19 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %50, %c1_i64_19 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c1048940_i32 = arith.constant 1048940 : i32
    %c3_i64_20 = arith.constant 3 : i64
    %52 = llvm.load %7 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c3_i64_20 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %52, %c3_i64_20 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %54 = arith.extui %49 : i32 to i64
    %55 = arith.addi %54, %c4_i64 : i64
    %56 = llvm.getelementptr %12[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048940_i32, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_21 = arith.constant 3 : i64
    %57 = llvm.load %7 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_21 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %57, %c3_i64_21 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %59 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_22 = arith.constant 3 : i64
    %60 = llvm.load %7 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_22 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %60, %c3_i64_22 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_23 = arith.constant 3 : i64
    %63 = llvm.load %7 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c3_i64_23 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %63, %c3_i64_23 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_24 = arith.constant 0 : i64
    %65 = arith.extui %59 : i32 to i64
    %66 = arith.addi %65, %c0_i64_24 : i64
    %67 = llvm.getelementptr %12[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %62, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_25 = arith.constant 3 : i64
    %68 = llvm.load %7 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c3_i64_25 : i64
    scf.if %69 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %68, %c3_i64_25 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_26 = arith.constant 1 : i64
    %71 = llvm.load %7 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c1_i64_26 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %71, %c1_i64_26 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c48_i32_27 = arith.constant 48 : i32
    %c3_i64_28 = arith.constant 3 : i64
    %73 = llvm.load %7 : !llvm.ptr -> i64
    %74 = arith.cmpi ult, %73, %c3_i64_28 : i64
    scf.if %74 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %73, %c3_i64_28 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %75 = arith.addi %70, %c48_i32_27 : i32
    %c3_i64_29 = arith.constant 3 : i64
    %76 = llvm.load %7 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c3_i64_29 : i64
    scf.if %77 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %76, %c3_i64_29 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    llvm.store %75, %9 : i32, !llvm.ptr
    %c1_i64_30 = arith.constant 1 : i64
    %78 = llvm.load %7 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c1_i64_30 : i64
    scf.if %79 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %78, %c1_i64_30 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c3_i64_31 = arith.constant 3 : i64
    %80 = llvm.load %7 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_31 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %80, %c3_i64_31 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_32 = arith.constant 3 : i64
    %83 = llvm.load %7 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_32 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %83, %c3_i64_32 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %85 = arith.extui %82 : i32 to i64
    %86 = arith.addi %85, %c12_i64 : i64
    %87 = llvm.getelementptr %12[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_33 = arith.constant 3 : i64
    %89 = llvm.load %7 : !llvm.ptr -> i64
    %90 = arith.cmpi ult, %89, %c3_i64_33 : i64
    scf.if %90 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %89, %c3_i64_33 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    llvm.store %88, %3 : i32, !llvm.ptr
    %c3_i64_34 = arith.constant 3 : i64
    %91 = llvm.load %7 : !llvm.ptr -> i64
    %92 = arith.cmpi ult, %91, %c3_i64_34 : i64
    scf.if %92 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %91, %c3_i64_34 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %93 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_35 = arith.constant 1 : i64
    %94 = llvm.load %7 : !llvm.ptr -> i64
    %95 = arith.cmpi ult, %94, %c1_i64_35 : i64
    scf.if %95 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %94, %c1_i64_35 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c12_i32 = arith.constant 12 : i32
    %c3_i64_36 = arith.constant 3 : i64
    %96 = llvm.load %7 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c3_i64_36 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %96, %c3_i64_36 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %98 = arith.addi %93, %c12_i32 : i32
    %c1_i64_37 = arith.constant 1 : i64
    %99 = llvm.load %7 : !llvm.ptr -> i64
    %100 = arith.cmpi ult, %99, %c1_i64_37 : i64
    scf.if %100 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %99, %c1_i64_37 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_38 = arith.constant 3 : i64
    %101 = llvm.load %7 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c3_i64_38 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %101, %c3_i64_38 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %103 = arith.addi %98, %c8_i32 : i32
    %c3_i64_39 = arith.constant 3 : i64
    %104 = llvm.load %7 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c3_i64_39 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %104, %c3_i64_39 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    llvm.store %103, %4 : i32, !llvm.ptr
    %c1_i64_40 = arith.constant 1 : i64
    %106 = llvm.load %7 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c1_i64_40 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %106, %c1_i64_40 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i32_41 = arith.constant 0 : i32
    %c3_i64_42 = arith.constant 3 : i64
    %108 = llvm.load %7 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %108, %c3_i64_42 : i64
    scf.if %109 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %108, %c3_i64_42 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_43 = arith.constant 0 : i64
    %110 = arith.extui %103 : i32 to i64
    %111 = arith.addi %110, %c0_i64_43 : i64
    %112 = llvm.getelementptr %12[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_41, %112 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_44 = arith.constant 3 : i64
    %113 = llvm.load %7 : !llvm.ptr -> i64
    %114 = arith.cmpi ult, %113, %c3_i64_44 : i64
    scf.if %114 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %113, %c3_i64_44 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_45 = arith.constant 1 : i64
    %116 = llvm.load %7 : !llvm.ptr -> i64
    %117 = arith.cmpi ult, %116, %c1_i64_45 : i64
    scf.if %117 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %116, %c1_i64_45 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c3_i64_46 = arith.constant 3 : i64
    %118 = llvm.load %7 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_46 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %118, %c3_i64_46 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c12_i64_47 = arith.constant 12 : i64
    %120 = arith.extui %115 : i32 to i64
    %121 = arith.addi %120, %c12_i64_47 : i64
    %122 = llvm.getelementptr %12[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %122 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_48 = arith.constant 3 : i64
    %123 = llvm.load %7 : !llvm.ptr -> i64
    %124 = arith.cmpi ult, %123, %c3_i64_48 : i64
    scf.if %124 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %123, %c3_i64_48 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_49 = arith.constant 1 : i64
    %126 = llvm.load %7 : !llvm.ptr -> i64
    %127 = arith.cmpi ult, %126, %c1_i64_49 : i64
    scf.if %127 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %126, %c1_i64_49 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c24_i32 = arith.constant 24 : i32
    %c3_i64_50 = arith.constant 3 : i64
    %128 = llvm.load %7 : !llvm.ptr -> i64
    %129 = arith.cmpi ult, %128, %c3_i64_50 : i64
    scf.if %129 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %128, %c3_i64_50 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %130 = arith.addi %125, %c24_i32 : i32
    %c1_i64_51 = arith.constant 1 : i64
    %131 = llvm.load %7 : !llvm.ptr -> i64
    %132 = arith.cmpi ult, %131, %c1_i64_51 : i64
    scf.if %132 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %131, %c1_i64_51 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_52 = arith.constant 3 : i64
    %133 = llvm.load %7 : !llvm.ptr -> i64
    %134 = arith.cmpi ult, %133, %c3_i64_52 : i64
    scf.if %134 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %133, %c3_i64_52 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %135 = arith.addi %130, %c16_i32 : i32
    %c3_i64_53 = arith.constant 3 : i64
    %136 = llvm.load %7 : !llvm.ptr -> i64
    %137 = arith.cmpi ult, %136, %c3_i64_53 : i64
    scf.if %137 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %136, %c3_i64_53 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %138 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_54 = arith.constant 1 : i64
    %139 = llvm.load %7 : !llvm.ptr -> i64
    %140 = arith.cmpi ult, %139, %c1_i64_54 : i64
    scf.if %140 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %139, %c1_i64_54 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c16_i32_55 = arith.constant 16 : i32
    %c3_i64_56 = arith.constant 3 : i64
    %141 = llvm.load %7 : !llvm.ptr -> i64
    %142 = arith.cmpi ult, %141, %c3_i64_56 : i64
    scf.if %142 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %141, %c3_i64_56 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %143 = arith.addi %138, %c16_i32_55 : i32
    %c3_i64_57 = arith.constant 3 : i64
    %144 = llvm.load %7 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c3_i64_57 : i64
    scf.if %145 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %144, %c3_i64_57 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_58 = arith.constant 0 : i64
    %146 = arith.extui %143 : i32 to i64
    %147 = arith.addi %146, %c0_i64_58 : i64
    %148 = llvm.getelementptr %12[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %149 = llvm.load volatile %148 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_59 = arith.constant 3 : i64
    %150 = llvm.load %7 : !llvm.ptr -> i64
    %151 = arith.cmpi ult, %150, %c3_i64_59 : i64
    scf.if %151 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %150, %c3_i64_59 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_60 = arith.constant 0 : i64
    %152 = arith.extui %135 : i32 to i64
    %153 = arith.addi %152, %c0_i64_60 : i64
    %154 = llvm.getelementptr %12[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %149, %154 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_61 = arith.constant 3 : i64
    %155 = llvm.load %7 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %c3_i64_61 : i64
    scf.if %156 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %155, %c3_i64_61 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %157 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_62 = arith.constant 1 : i64
    %158 = llvm.load %7 : !llvm.ptr -> i64
    %159 = arith.cmpi ult, %158, %c1_i64_62 : i64
    scf.if %159 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %158, %c1_i64_62 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c24_i32_63 = arith.constant 24 : i32
    %c3_i64_64 = arith.constant 3 : i64
    %160 = llvm.load %7 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_64 : i64
    scf.if %161 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %160, %c3_i64_64 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %162 = arith.addi %157, %c24_i32_63 : i32
    %c1_i64_65 = arith.constant 1 : i64
    %163 = llvm.load %7 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c1_i64_65 : i64
    scf.if %164 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %163, %c1_i64_65 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c8_i32_66 = arith.constant 8 : i32
    %c3_i64_67 = arith.constant 3 : i64
    %165 = llvm.load %7 : !llvm.ptr -> i64
    %166 = arith.cmpi ult, %165, %c3_i64_67 : i64
    scf.if %166 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %165, %c3_i64_67 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %167 = arith.addi %162, %c8_i32_66 : i32
    %c3_i64_68 = arith.constant 3 : i64
    %168 = llvm.load %7 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c3_i64_68 : i64
    scf.if %169 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %168, %c3_i64_68 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %170 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_69 = arith.constant 1 : i64
    %171 = llvm.load %7 : !llvm.ptr -> i64
    %172 = arith.cmpi ult, %171, %c1_i64_69 : i64
    scf.if %172 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %171, %c1_i64_69 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c8_i32_70 = arith.constant 8 : i32
    %c3_i64_71 = arith.constant 3 : i64
    %173 = llvm.load %7 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c3_i64_71 : i64
    scf.if %174 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %173, %c3_i64_71 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %175 = arith.addi %170, %c8_i32_70 : i32
    %c3_i64_72 = arith.constant 3 : i64
    %176 = llvm.load %7 : !llvm.ptr -> i64
    %177 = arith.cmpi ult, %176, %c3_i64_72 : i64
    scf.if %177 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %176, %c3_i64_72 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_73 = arith.constant 0 : i64
    %178 = arith.extui %175 : i32 to i64
    %179 = arith.addi %178, %c0_i64_73 : i64
    %180 = llvm.getelementptr %12[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %181 = llvm.load volatile %180 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_74 = arith.constant 3 : i64
    %182 = llvm.load %7 : !llvm.ptr -> i64
    %183 = arith.cmpi ult, %182, %c3_i64_74 : i64
    scf.if %183 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %182, %c3_i64_74 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_75 = arith.constant 0 : i64
    %184 = arith.extui %167 : i32 to i64
    %185 = arith.addi %184, %c0_i64_75 : i64
    %186 = llvm.getelementptr %12[%185] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %181, %186 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_76 = arith.constant 3 : i64
    %187 = llvm.load %7 : !llvm.ptr -> i64
    %188 = arith.cmpi ult, %187, %c3_i64_76 : i64
    scf.if %188 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %187, %c3_i64_76 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %189 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_77 = arith.constant 3 : i64
    %190 = llvm.load %7 : !llvm.ptr -> i64
    %191 = arith.cmpi ult, %190, %c3_i64_77 : i64
    scf.if %191 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %190, %c3_i64_77 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %192 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_78 = arith.constant 3 : i64
    %193 = llvm.load %7 : !llvm.ptr -> i64
    %194 = arith.cmpi ult, %193, %c3_i64_78 : i64
    scf.if %194 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %193, %c3_i64_78 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_79 = arith.constant 0 : i64
    %195 = arith.extui %192 : i32 to i64
    %196 = arith.addi %195, %c0_i64_79 : i64
    %197 = llvm.getelementptr %12[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = llvm.load volatile %197 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_80 = arith.constant 3 : i64
    %199 = llvm.load %7 : !llvm.ptr -> i64
    %200 = arith.cmpi ult, %199, %c3_i64_80 : i64
    scf.if %200 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %199, %c3_i64_80 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %201 = arith.extui %189 : i32 to i64
    %202 = arith.addi %201, %c24_i64 : i64
    %203 = llvm.getelementptr %12[%202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %198, %203 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_81 = arith.constant 3 : i64
    %204 = llvm.load %7 : !llvm.ptr -> i64
    %205 = arith.cmpi ult, %204, %c3_i64_81 : i64
    scf.if %205 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %204, %c3_i64_81 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %206 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_82 = arith.constant 1 : i64
    %207 = llvm.load %7 : !llvm.ptr -> i64
    %208 = arith.cmpi ult, %207, %c1_i64_82 : i64
    scf.if %208 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %207, %c1_i64_82 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c12_i32_83 = arith.constant 12 : i32
    %c3_i64_84 = arith.constant 3 : i64
    %209 = llvm.load %7 : !llvm.ptr -> i64
    %210 = arith.cmpi ult, %209, %c3_i64_84 : i64
    scf.if %210 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %209, %c3_i64_84 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %211 = arith.addi %206, %c12_i32_83 : i32
    %c1_i64_85 = arith.constant 1 : i64
    %212 = llvm.load %7 : !llvm.ptr -> i64
    %213 = arith.cmpi ult, %212, %c1_i64_85 : i64
    scf.if %213 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %212, %c1_i64_85 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c1048824_i32 = arith.constant 1048824 : i32
    %c3_i64_86 = arith.constant 3 : i64
    %214 = llvm.load %7 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c3_i64_86 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %214, %c3_i64_86 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %216 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_87 = arith.constant 1 : i64
    %217 = llvm.load %7 : !llvm.ptr -> i64
    %218 = arith.cmpi ult, %217, %c1_i64_87 : i64
    scf.if %218 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %217, %c1_i64_87 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c24_i32_88 = arith.constant 24 : i32
    %c3_i64_89 = arith.constant 3 : i64
    %219 = llvm.load %7 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c3_i64_89 : i64
    scf.if %220 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %219, %c3_i64_89 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %221 = arith.addi %216, %c24_i32_88 : i32
    %c6_i64 = arith.constant 6 : i64
    %222 = llvm.load %7 : !llvm.ptr -> i64
    %223 = arith.cmpi ult, %222, %c6_i64 : i64
    scf.if %223 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %222, %c6_i64 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %224 = call @f66(%arg0, %211, %c1048824_i32, %221) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_90 = arith.constant 1 : i64
    %225 = llvm.load %7 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c1_i64_90 : i64
    scf.if %226 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %225, %c1_i64_90 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c3_i64_91 = arith.constant 3 : i64
    %227 = llvm.load %7 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %c3_i64_91 : i64
    scf.if %228 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %227, %c3_i64_91 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %229 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_92 = arith.constant 1 : i64
    %230 = llvm.load %7 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c1_i64_92 : i64
    scf.if %231 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %230, %c1_i64_92 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c8_i32_93 = arith.constant 8 : i32
    %c3_i64_94 = arith.constant 3 : i64
    %232 = llvm.load %7 : !llvm.ptr -> i64
    %233 = arith.cmpi ult, %232, %c3_i64_94 : i64
    scf.if %233 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %232, %c3_i64_94 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %234 = arith.addi %229, %c8_i32_93 : i32
    %c3_i64_95 = arith.constant 3 : i64
    %235 = llvm.load %7 : !llvm.ptr -> i64
    %236 = arith.cmpi ult, %235, %c3_i64_95 : i64
    scf.if %236 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %235, %c3_i64_95 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %237 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_96 = arith.constant 3 : i64
    %238 = llvm.load %7 : !llvm.ptr -> i64
    %239 = arith.cmpi ult, %238, %c3_i64_96 : i64
    scf.if %239 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %238, %c3_i64_96 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_97 = arith.constant 0 : i64
    %240 = arith.extui %237 : i32 to i64
    %241 = arith.addi %240, %c0_i64_97 : i64
    %242 = llvm.getelementptr %12[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %243 = llvm.load volatile %242 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_98 = arith.constant 3 : i64
    %244 = llvm.load %7 : !llvm.ptr -> i64
    %245 = arith.cmpi ult, %244, %c3_i64_98 : i64
    scf.if %245 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %244, %c3_i64_98 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    llvm.store %243, %3 : i32, !llvm.ptr
    %c3_i64_99 = arith.constant 3 : i64
    %246 = llvm.load %7 : !llvm.ptr -> i64
    %247 = arith.cmpi ult, %246, %c3_i64_99 : i64
    scf.if %247 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %246, %c3_i64_99 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_100 = arith.constant 0 : i64
    %248 = arith.extui %234 : i32 to i64
    %249 = arith.addi %248, %c0_i64_100 : i64
    %250 = llvm.getelementptr %12[%249] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %243, %250 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_101 = arith.constant 3 : i64
    %251 = llvm.load %7 : !llvm.ptr -> i64
    %252 = arith.cmpi ult, %251, %c3_i64_101 : i64
    scf.if %252 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %251, %c3_i64_101 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %253 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_102 = arith.constant 3 : i64
    %254 = llvm.load %7 : !llvm.ptr -> i64
    %255 = arith.cmpi ult, %254, %c3_i64_102 : i64
    scf.if %255 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %254, %c3_i64_102 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %256 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_103 = arith.constant 3 : i64
    %257 = llvm.load %7 : !llvm.ptr -> i64
    %258 = arith.cmpi ult, %257, %c3_i64_103 : i64
    scf.if %258 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %257, %c3_i64_103 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c12_i64_104 = arith.constant 12 : i64
    %259 = arith.extui %256 : i32 to i64
    %260 = arith.addi %259, %c12_i64_104 : i64
    %261 = llvm.getelementptr %12[%260] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %262 = llvm.load volatile %261 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_105 = arith.constant 3 : i64
    %263 = llvm.load %7 : !llvm.ptr -> i64
    %264 = arith.cmpi ult, %263, %c3_i64_105 : i64
    scf.if %264 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %263, %c3_i64_105 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    llvm.store %262, %5 : i64, !llvm.ptr
    %c3_i64_106 = arith.constant 3 : i64
    %265 = llvm.load %7 : !llvm.ptr -> i64
    %266 = arith.cmpi ult, %265, %c3_i64_106 : i64
    scf.if %266 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %265, %c3_i64_106 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_107 = arith.constant 0 : i64
    %267 = arith.extui %253 : i32 to i64
    %268 = arith.addi %267, %c0_i64_107 : i64
    %269 = llvm.getelementptr %12[%268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %262, %269 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_108 = arith.constant 3 : i64
    %270 = llvm.load %7 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %270, %c3_i64_108 : i64
    scf.if %271 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %270, %c3_i64_108 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %272 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_109 = arith.constant 1 : i64
    %273 = llvm.load %7 : !llvm.ptr -> i64
    %274 = arith.cmpi ult, %273, %c1_i64_109 : i64
    scf.if %274 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %273, %c1_i64_109 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c8_i32_110 = arith.constant 8 : i32
    %c3_i64_111 = arith.constant 3 : i64
    %275 = llvm.load %7 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_111 : i64
    scf.if %276 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %275, %c3_i64_111 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %277 = arith.addi %272, %c8_i32_110 : i32
    %c3_i64_112 = arith.constant 3 : i64
    %278 = llvm.load %7 : !llvm.ptr -> i64
    %279 = arith.cmpi ult, %278, %c3_i64_112 : i64
    scf.if %279 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %278, %c3_i64_112 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %280 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_113 = arith.constant 3 : i64
    %281 = llvm.load %7 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c3_i64_113 : i64
    scf.if %282 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %281, %c3_i64_113 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_114 = arith.constant 0 : i64
    %283 = arith.extui %277 : i32 to i64
    %284 = arith.addi %283, %c0_i64_114 : i64
    %285 = llvm.getelementptr %12[%284] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %280, %285 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_115 = arith.constant 3 : i64
    %286 = llvm.load %7 : !llvm.ptr -> i64
    %287 = arith.cmpi ult, %286, %c3_i64_115 : i64
    scf.if %287 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %286, %c3_i64_115 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %288 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_116 = arith.constant 3 : i64
    %289 = llvm.load %7 : !llvm.ptr -> i64
    %290 = arith.cmpi ult, %289, %c3_i64_116 : i64
    scf.if %290 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %289, %c3_i64_116 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %291 = llvm.load %5 : !llvm.ptr -> i64
    %c3_i64_117 = arith.constant 3 : i64
    %292 = llvm.load %7 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c3_i64_117 : i64
    scf.if %293 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %292, %c3_i64_117 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    %c0_i64_118 = arith.constant 0 : i64
    %294 = arith.extui %288 : i32 to i64
    %295 = arith.addi %294, %c0_i64_118 : i64
    %296 = llvm.getelementptr %12[%295] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %291, %296 {alignment = 1 : i64} : i64, !llvm.ptr
    %c1_i64_119 = arith.constant 1 : i64
    %297 = llvm.load %7 : !llvm.ptr -> i64
    %298 = arith.cmpi ult, %297, %c1_i64_119 : i64
    scf.if %298 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %299 = arith.subi %297, %c1_i64_119 : i64
      llvm.store %299, %7 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f41(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_2 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %3, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %10 = llvm.load %4 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c3_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %10, %c3_i64 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %12 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %13 = llvm.load %4 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c1_i64 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %13, %c1_i64 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_3 = arith.constant 3 : i64
    %15 = llvm.load %4 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c3_i64_3 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %15, %c3_i64_3 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %17 = arith.subi %12, %c32_i32 : i32
    %c3_i64_4 = arith.constant 3 : i64
    %18 = llvm.load %4 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_4 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %18, %c3_i64_4 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    llvm.store %17, %2 : i32, !llvm.ptr
    %c3_i64_5 = arith.constant 3 : i64
    %20 = llvm.load %4 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_5 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %20, %c3_i64_5 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    llvm.store %17, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %22 = llvm.load %4 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c1_i64_6 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %22, %c1_i64_6 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c1_i64_7 = arith.constant 1 : i64
    %24 = llvm.load %4 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c1_i64_7 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %24, %c1_i64_7 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c3_i64_8 = arith.constant 3 : i64
    %26 = llvm.load %4 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c3_i64_8 : i64
    scf.if %27 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %26, %c3_i64_8 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_9 = arith.constant 3 : i64
    %29 = llvm.load %4 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_9 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %29, %c3_i64_9 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %31 = arith.extui %28 : i32 to i64
    %32 = arith.addi %31, %c0_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_10 = arith.constant 1 : i64
    %35 = llvm.load %4 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %c1_i64_10 : i64
    scf.if %36 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %35, %c1_i64_10 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c3_i64_11 = arith.constant 3 : i64
    %37 = llvm.load %4 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c3_i64_11 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %37, %c3_i64_11 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %39 = arith.cmpi eq, %34, %c-2147483648_i32 : i32
    %40 = arith.extui %39 : i1 to i32
    %c1_i64_12 = arith.constant 1 : i64
    %41 = llvm.load %4 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c1_i64_12 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %41, %c1_i64_12 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c0_i32_13 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %40, %c0_i32_13 : i32
    cf.cond_br %43, ^bb4, ^bb5
  ^bb2(%44: i32):  // pred: ^bb3
    return %44 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %c3_i64_14 = arith.constant 3 : i64
    %45 = llvm.load %4 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_14 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %45, %c3_i64_14 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_15 = arith.constant 1 : i64
    %48 = llvm.load %4 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c1_i64_15 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %48, %c1_i64_15 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c32_i32_16 = arith.constant 32 : i32
    %c3_i64_17 = arith.constant 3 : i64
    %50 = llvm.load %4 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c3_i64_17 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %50, %c3_i64_17 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %52 = arith.addi %47, %c32_i32_16 : i32
    %c3_i64_18 = arith.constant 3 : i64
    %53 = llvm.load %4 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c3_i64_18 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %53, %c3_i64_18 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    llvm.store %52, %6 : i32, !llvm.ptr
    %c3_i64_19 = arith.constant 3 : i64
    %55 = llvm.load %4 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c3_i64_19 : i64
    scf.if %56 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %55, %c3_i64_19 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_20 = arith.constant 1 : i64
    %58 = llvm.load %4 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c1_i64_20 : i64
    scf.if %59 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %58, %c1_i64_20 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    cf.br ^bb2(%57 : i32)
  ^bb4:  // pred: ^bb1
    %c3_i64_21 = arith.constant 3 : i64
    %60 = llvm.load %4 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_21 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %60, %c3_i64_21 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %62 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_22 = arith.constant 1 : i64
    %63 = llvm.load %4 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c1_i64_22 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %63, %c1_i64_22 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_23 = arith.constant 3 : i64
    %65 = llvm.load %4 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c3_i64_23 : i64
    scf.if %66 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %65, %c3_i64_23 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %67 = arith.addi %62, %c8_i32 : i32
    %c1_i64_24 = arith.constant 1 : i64
    %68 = llvm.load %4 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c1_i64_24 : i64
    scf.if %69 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %68, %c1_i64_24 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_25 = arith.constant 3 : i64
    %70 = llvm.load %4 : !llvm.ptr -> i64
    %71 = arith.cmpi ult, %70, %c3_i64_25 : i64
    scf.if %71 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %70, %c3_i64_25 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %72 = arith.addi %67, %c16_i32 : i32
    %c3_i64_26 = arith.constant 3 : i64
    %73 = llvm.load %4 : !llvm.ptr -> i64
    %74 = arith.cmpi ult, %73, %c3_i64_26 : i64
    scf.if %74 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %73, %c3_i64_26 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %75 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_27 = arith.constant 3 : i64
    %76 = llvm.load %4 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c3_i64_27 : i64
    scf.if %77 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %76, %c3_i64_27 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %75 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %9[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_28 = arith.constant 3 : i64
    %82 = llvm.load %4 : !llvm.ptr -> i64
    %83 = arith.cmpi ult, %82, %c3_i64_28 : i64
    scf.if %83 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %82, %c3_i64_28 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    llvm.store %81, %0 : i32, !llvm.ptr
    %c1_i64_29 = arith.constant 1 : i64
    %84 = llvm.load %4 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c1_i64_29 : i64
    scf.if %85 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %84, %c1_i64_29 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c16_i32_30 = arith.constant 16 : i32
    %c3_i64_31 = arith.constant 3 : i64
    %86 = llvm.load %4 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %c3_i64_31 : i64
    scf.if %87 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %86, %c3_i64_31 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %88 = arith.addi %81, %c16_i32_30 : i32
    %c3_i64_32 = arith.constant 3 : i64
    %89 = llvm.load %4 : !llvm.ptr -> i64
    %90 = arith.cmpi ult, %89, %c3_i64_32 : i64
    scf.if %90 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %89, %c3_i64_32 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c0_i64_33 = arith.constant 0 : i64
    %91 = arith.extui %88 : i32 to i64
    %92 = arith.addi %91, %c0_i64_33 : i64
    %93 = llvm.getelementptr %9[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_34 = arith.constant 3 : i64
    %95 = llvm.load %4 : !llvm.ptr -> i64
    %96 = arith.cmpi ult, %95, %c3_i64_34 : i64
    scf.if %96 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %95, %c3_i64_34 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c0_i64_35 = arith.constant 0 : i64
    %97 = arith.extui %72 : i32 to i64
    %98 = arith.addi %97, %c0_i64_35 : i64
    %99 = llvm.getelementptr %9[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %94, %99 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_36 = arith.constant 3 : i64
    %100 = llvm.load %4 : !llvm.ptr -> i64
    %101 = arith.cmpi ult, %100, %c3_i64_36 : i64
    scf.if %101 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %100, %c3_i64_36 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_37 = arith.constant 1 : i64
    %103 = llvm.load %4 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %c1_i64_37 : i64
    scf.if %104 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %103, %c1_i64_37 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c8_i32_38 = arith.constant 8 : i32
    %c3_i64_39 = arith.constant 3 : i64
    %105 = llvm.load %4 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %c3_i64_39 : i64
    scf.if %106 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %105, %c3_i64_39 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %107 = arith.addi %102, %c8_i32_38 : i32
    %c1_i64_40 = arith.constant 1 : i64
    %108 = llvm.load %4 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %108, %c1_i64_40 : i64
    scf.if %109 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %108, %c1_i64_40 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c8_i32_41 = arith.constant 8 : i32
    %c3_i64_42 = arith.constant 3 : i64
    %110 = llvm.load %4 : !llvm.ptr -> i64
    %111 = arith.cmpi ult, %110, %c3_i64_42 : i64
    scf.if %111 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %110, %c3_i64_42 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %112 = arith.addi %107, %c8_i32_41 : i32
    %c3_i64_43 = arith.constant 3 : i64
    %113 = llvm.load %4 : !llvm.ptr -> i64
    %114 = arith.cmpi ult, %113, %c3_i64_43 : i64
    scf.if %114 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %113, %c3_i64_43 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %115 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_44 = arith.constant 1 : i64
    %116 = llvm.load %4 : !llvm.ptr -> i64
    %117 = arith.cmpi ult, %116, %c1_i64_44 : i64
    scf.if %117 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %116, %c1_i64_44 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c8_i32_45 = arith.constant 8 : i32
    %c3_i64_46 = arith.constant 3 : i64
    %118 = llvm.load %4 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_46 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %118, %c3_i64_46 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %120 = arith.addi %115, %c8_i32_45 : i32
    %c3_i64_47 = arith.constant 3 : i64
    %121 = llvm.load %4 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %c3_i64_47 : i64
    scf.if %122 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %121, %c3_i64_47 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c0_i64_48 = arith.constant 0 : i64
    %123 = arith.extui %120 : i32 to i64
    %124 = arith.addi %123, %c0_i64_48 : i64
    %125 = llvm.getelementptr %9[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_49 = arith.constant 3 : i64
    %127 = llvm.load %4 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c3_i64_49 : i64
    scf.if %128 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %127, %c3_i64_49 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c0_i64_50 = arith.constant 0 : i64
    %129 = arith.extui %112 : i32 to i64
    %130 = arith.addi %129, %c0_i64_50 : i64
    %131 = llvm.getelementptr %9[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %131 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_51 = arith.constant 3 : i64
    %132 = llvm.load %4 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c3_i64_51 : i64
    scf.if %133 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %132, %c3_i64_51 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %134 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_52 = arith.constant 3 : i64
    %135 = llvm.load %4 : !llvm.ptr -> i64
    %136 = arith.cmpi ult, %135, %c3_i64_52 : i64
    scf.if %136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %135, %c3_i64_52 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %137 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_53 = arith.constant 3 : i64
    %138 = llvm.load %4 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %c3_i64_53 : i64
    scf.if %139 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %138, %c3_i64_53 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c0_i64_54 = arith.constant 0 : i64
    %140 = arith.extui %137 : i32 to i64
    %141 = arith.addi %140, %c0_i64_54 : i64
    %142 = llvm.getelementptr %9[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_55 = arith.constant 3 : i64
    %144 = llvm.load %4 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c3_i64_55 : i64
    scf.if %145 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %144, %c3_i64_55 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %146 = arith.extui %134 : i32 to i64
    %147 = arith.addi %146, %c8_i64 : i64
    %148 = llvm.getelementptr %9[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %148 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_56 = arith.constant 3 : i64
    %149 = llvm.load %4 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c3_i64_56 : i64
    scf.if %150 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %149, %c3_i64_56 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %151 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_57 = arith.constant 3 : i64
    %152 = llvm.load %4 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c3_i64_57 : i64
    scf.if %153 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %152, %c3_i64_57 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %154 = arith.extui %151 : i32 to i64
    %155 = arith.addi %154, %c20_i64 : i64
    %156 = llvm.getelementptr %9[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load volatile %156 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_58 = arith.constant 3 : i64
    %158 = llvm.load %4 : !llvm.ptr -> i64
    %159 = arith.cmpi ult, %158, %c3_i64_58 : i64
    scf.if %159 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %158, %c3_i64_58 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %160 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_59 = arith.constant 3 : i64
    %161 = llvm.load %4 : !llvm.ptr -> i64
    %162 = arith.cmpi ult, %161, %c3_i64_59 : i64
    scf.if %162 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %161, %c3_i64_59 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %163 = arith.extui %160 : i32 to i64
    %164 = arith.addi %163, %c24_i64 : i64
    %165 = llvm.getelementptr %9[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %166 = llvm.load volatile %165 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_60 = arith.constant 3 : i64
    %167 = llvm.load %4 : !llvm.ptr -> i64
    %168 = arith.cmpi ult, %167, %c3_i64_60 : i64
    scf.if %168 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %167, %c3_i64_60 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %169 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_61 = arith.constant 1 : i64
    %170 = llvm.load %4 : !llvm.ptr -> i64
    %171 = arith.cmpi ult, %170, %c1_i64_61 : i64
    scf.if %171 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %170, %c1_i64_61 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c8_i32_62 = arith.constant 8 : i32
    %c3_i64_63 = arith.constant 3 : i64
    %172 = llvm.load %4 : !llvm.ptr -> i64
    %173 = arith.cmpi ult, %172, %c3_i64_63 : i64
    scf.if %173 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %172, %c3_i64_63 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %174 = arith.addi %169, %c8_i32_62 : i32
    %c6_i64 = arith.constant 6 : i64
    %175 = llvm.load %4 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c6_i64 : i64
    scf.if %176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %175, %c6_i64 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %177 = call @f66(%arg0, %157, %166, %174) : (!llvm.ptr, i32, i32, i32) -> i32
    %c3_i64_64 = arith.constant 3 : i64
    %178 = llvm.load %4 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c3_i64_64 : i64
    scf.if %179 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %178, %c3_i64_64 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    llvm.store %177, %0 : i32, !llvm.ptr
    %c1_i64_65 = arith.constant 1 : i64
    %180 = llvm.load %4 : !llvm.ptr -> i64
    %181 = arith.cmpi ult, %180, %c1_i64_65 : i64
    scf.if %181 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %180, %c1_i64_65 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %c3_i64_66 = arith.constant 3 : i64
    %182 = llvm.load %4 : !llvm.ptr -> i64
    %183 = arith.cmpi ult, %182, %c3_i64_66 : i64
    scf.if %183 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %182, %c3_i64_66 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %184 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_67 = arith.constant 3 : i64
    %185 = llvm.load %4 : !llvm.ptr -> i64
    %186 = arith.cmpi ult, %185, %c3_i64_67 : i64
    scf.if %186 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %185, %c3_i64_67 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %187 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_68 = arith.constant 3 : i64
    %188 = llvm.load %4 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c3_i64_68 : i64
    scf.if %189 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %188, %c3_i64_68 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %190 = arith.extui %187 : i32 to i64
    %191 = arith.addi %190, %c4_i64 : i64
    %192 = llvm.getelementptr %9[%191] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %193 = llvm.load volatile %192 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_69 = arith.constant 3 : i64
    %194 = llvm.load %4 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c3_i64_69 : i64
    scf.if %195 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %194, %c3_i64_69 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %196 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_70 = arith.constant 3 : i64
    %197 = llvm.load %4 : !llvm.ptr -> i64
    %198 = arith.cmpi ult, %197, %c3_i64_70 : i64
    scf.if %198 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %197, %c3_i64_70 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %c8_i64_71 = arith.constant 8 : i64
    %199 = arith.extui %196 : i32 to i64
    %200 = arith.addi %199, %c8_i64_71 : i64
    %201 = llvm.getelementptr %9[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %202 = llvm.load volatile %201 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c6_i64_72 = arith.constant 6 : i64
    %203 = llvm.load %4 : !llvm.ptr -> i64
    %204 = arith.cmpi ult, %203, %c6_i64_72 : i64
    scf.if %204 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %203, %c6_i64_72 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    %205 = call @f73(%arg0, %184, %193, %202) : (!llvm.ptr, i32, i32, i32) -> i32
    %c3_i64_73 = arith.constant 3 : i64
    %206 = llvm.load %4 : !llvm.ptr -> i64
    %207 = arith.cmpi ult, %206, %c3_i64_73 : i64
    scf.if %207 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %206, %c3_i64_73 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    llvm.store %205, %0 : i32, !llvm.ptr
    %c1_i64_74 = arith.constant 1 : i64
    %208 = llvm.load %4 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c1_i64_74 : i64
    scf.if %209 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %210 = arith.subi %208, %c1_i64_74 : i64
      llvm.store %210, %4 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f42(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_3 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %4, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %9 = llvm.load %5 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c1_i64 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %9, %c1_i64 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c0_i32_4 = arith.constant 0 : i32
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %5 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %11, %c3_i64 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c1049497_i64 = arith.constant 1049497 : i64
    %13 = arith.extui %c0_i32_4 : i32 to i64
    %14 = arith.addi %13, %c1049497_i64 : i64
    %15 = llvm.getelementptr %8[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i8
    %17 = arith.extui %16 : i8 to i32
    %c1_i64_5 = arith.constant 1 : i64
    %18 = llvm.load %5 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c1_i64_5 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %18, %c1_i64_5 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c3_i64_6 = arith.constant 3 : i64
    %20 = llvm.load %5 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_6 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %20, %c3_i64_6 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_7 = arith.constant 3 : i64
    %23 = llvm.load %5 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_7 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %23, %c3_i64_7 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %25 = arith.extui %22 : i32 to i64
    %26 = arith.addi %25, %c4_i64 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_8 = arith.constant 3 : i64
    %29 = llvm.load %5 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_8 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %29, %c3_i64_8 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    llvm.store %28, %2 : i32, !llvm.ptr
    %c3_i64_9 = arith.constant 3 : i64
    %31 = llvm.load %5 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_9 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %31, %c3_i64_9 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_10 = arith.constant 3 : i64
    %34 = llvm.load %5 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c3_i64_10 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %34, %c3_i64_10 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %36 = arith.extui %33 : i32 to i64
    %37 = arith.addi %36, %c0_i64 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %40 = llvm.load %5 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c3_i64_11 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %40, %c3_i64_11 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    llvm.store %39, %3 : i32, !llvm.ptr
    %c1_i64_12 = arith.constant 1 : i64
    %42 = llvm.load %5 : !llvm.ptr -> i64
    %43 = arith.cmpi ult, %42, %c1_i64_12 : i64
    scf.if %43 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %42, %c1_i64_12 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c1_i64_13 = arith.constant 1 : i64
    %44 = llvm.load %5 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c1_i64_13 : i64
    scf.if %45 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %44, %c1_i64_13 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c1_i64_14 = arith.constant 1 : i64
    %46 = llvm.load %5 : !llvm.ptr -> i64
    %47 = arith.cmpi ult, %46, %c1_i64_14 : i64
    scf.if %47 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %46, %c1_i64_14 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c6_i64 = arith.constant 6 : i64
    %48 = llvm.load %5 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c6_i64 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %48, %c6_i64 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %50 = call @f9(%arg0, %c8_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %51 = llvm.load %5 : !llvm.ptr -> i64
    %52 = arith.cmpi ult, %51, %c3_i64_15 : i64
    scf.if %52 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %51, %c3_i64_15 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    llvm.store %50, %1 : i32, !llvm.ptr
    %c3_i64_16 = arith.constant 3 : i64
    %53 = llvm.load %5 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c3_i64_16 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %53, %c3_i64_16 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c0_i32_17 = arith.constant 0 : i32
    %55 = arith.cmpi eq, %50, %c0_i32_17 : i32
    %56 = arith.extui %55 : i1 to i32
    %c1_i64_18 = arith.constant 1 : i64
    %57 = llvm.load %5 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c1_i64_18 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %57, %c1_i64_18 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c0_i32_19 = arith.constant 0 : i32
    %59 = arith.cmpi ne, %56, %c0_i32_19 : i32
    cf.cond_br %59, ^bb3, ^bb4
  ^bb2:  // pred: ^bb4
    return
  ^bb3:  // pred: ^bb1
    %c1_i64_20 = arith.constant 1 : i64
    %60 = llvm.load %5 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c1_i64_20 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %60, %c1_i64_20 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c4_i32_21 = arith.constant 4 : i32
    %c1_i64_22 = arith.constant 1 : i64
    %62 = llvm.load %5 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c1_i64_22 : i64
    scf.if %63 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %62, %c1_i64_22 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c8_i32_23 = arith.constant 8 : i32
    %c6_i64_24 = arith.constant 6 : i64
    %64 = llvm.load %5 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c6_i64_24 : i64
    scf.if %65 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %64, %c6_i64_24 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    call @f58(%arg0, %c4_i32_21, %c8_i32_23) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_25 = arith.constant 0 : i64
    %66 = llvm.load %5 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c0_i64_25 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %66, %c0_i64_25 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c3_i64_26 = arith.constant 3 : i64
    %68 = llvm.load %5 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c3_i64_26 : i64
    scf.if %69 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %68, %c3_i64_26 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %70 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_27 = arith.constant 3 : i64
    %71 = llvm.load %5 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c3_i64_27 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %71, %c3_i64_27 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_28 = arith.constant 3 : i64
    %74 = llvm.load %5 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c3_i64_28 : i64
    scf.if %75 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %74, %c3_i64_28 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c4_i64_29 = arith.constant 4 : i64
    %76 = arith.extui %70 : i32 to i64
    %77 = arith.addi %76, %c4_i64_29 : i64
    %78 = llvm.getelementptr %8[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %78 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_30 = arith.constant 3 : i64
    %79 = llvm.load %5 : !llvm.ptr -> i64
    %80 = arith.cmpi ult, %79, %c3_i64_30 : i64
    scf.if %80 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %79, %c3_i64_30 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %81 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_31 = arith.constant 3 : i64
    %82 = llvm.load %5 : !llvm.ptr -> i64
    %83 = arith.cmpi ult, %82, %c3_i64_31 : i64
    scf.if %83 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %82, %c3_i64_31 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %84 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_32 = arith.constant 3 : i64
    %85 = llvm.load %5 : !llvm.ptr -> i64
    %86 = arith.cmpi ult, %85, %c3_i64_32 : i64
    scf.if %86 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %85, %c3_i64_32 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c0_i64_33 = arith.constant 0 : i64
    %87 = arith.extui %81 : i32 to i64
    %88 = arith.addi %87, %c0_i64_33 : i64
    %89 = llvm.getelementptr %8[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %84, %89 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_34 = arith.constant 3 : i64
    %90 = llvm.load %5 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c3_i64_34 : i64
    scf.if %91 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %90, %c3_i64_34 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %92 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_35 = arith.constant 1 : i64
    %93 = llvm.load %5 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c1_i64_35 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %93, %c1_i64_35 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c1048956_i32 = arith.constant 1048956 : i32
    %c3_i64_36 = arith.constant 3 : i64
    %95 = llvm.load %5 : !llvm.ptr -> i64
    %96 = arith.cmpi ult, %95, %c3_i64_36 : i64
    scf.if %96 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %95, %c3_i64_36 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c4_i64_37 = arith.constant 4 : i64
    %97 = arith.extui %92 : i32 to i64
    %98 = arith.addi %97, %c4_i64_37 : i64
    %99 = llvm.getelementptr %8[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048956_i32, %99 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_38 = arith.constant 3 : i64
    %100 = llvm.load %5 : !llvm.ptr -> i64
    %101 = arith.cmpi ult, %100, %c3_i64_38 : i64
    scf.if %101 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %100, %c3_i64_38 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %102 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_39 = arith.constant 3 : i64
    %103 = llvm.load %5 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %c3_i64_39 : i64
    scf.if %104 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %103, %c3_i64_39 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %105 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_40 = arith.constant 3 : i64
    %106 = llvm.load %5 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c3_i64_40 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %106, %c3_i64_40 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    %c0_i64_41 = arith.constant 0 : i64
    %108 = arith.extui %102 : i32 to i64
    %109 = arith.addi %108, %c0_i64_41 : i64
    %110 = llvm.getelementptr %8[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %110 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_42 = arith.constant 1 : i64
    %111 = llvm.load %5 : !llvm.ptr -> i64
    %112 = arith.cmpi ult, %111, %c1_i64_42 : i64
    scf.if %112 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %113 = arith.subi %111, %c1_i64_42 : i64
      llvm.store %113, %5 : i64, !llvm.ptr
    }
    cf.br ^bb2
  }
  func.func @f43(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %30 = arith.subi %7, %c3_i64 : i64
      llvm.store %30, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c1_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %30 = arith.subi %10, %c1_i64 : i64
      llvm.store %30, %3 : i64, !llvm.ptr
    }
    %c1048956_i32 = arith.constant 1048956 : i32
    %c3_i64_2 = arith.constant 3 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c3_i64_2 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %30 = arith.subi %12, %c3_i64_2 : i64
      llvm.store %30, %3 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %9 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048956_i32, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_3 = arith.constant 3 : i64
    %17 = llvm.load %3 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c3_i64_3 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %30 = arith.subi %17, %c3_i64_3 : i64
      llvm.store %30, %3 : i64, !llvm.ptr
    }
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %20 = llvm.load %3 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_4 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %30 = arith.subi %20, %c3_i64_4 : i64
      llvm.store %30, %3 : i64, !llvm.ptr
    }
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_5 = arith.constant 3 : i64
    %23 = llvm.load %3 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_5 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %30 = arith.subi %23, %c3_i64_5 : i64
      llvm.store %30, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %25 = arith.extui %19 : i32 to i64
    %26 = arith.addi %25, %c0_i64 : i64
    %27 = llvm.getelementptr %6[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %28 = llvm.load %3 : !llvm.ptr -> i64
    %29 = arith.cmpi ult, %28, %c1_i64_6 : i64
    scf.if %29 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %30 = arith.subi %28, %c1_i64_6 : i64
      llvm.store %30, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f44(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %7, %c3_i64 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c3_i64_2 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %10, %c3_i64_2 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %13 = llvm.load %3 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64_3 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %13, %c3_i64_3 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %12 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %17 = llvm.getelementptr %6[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_4 = arith.constant 3 : i64
    %19 = llvm.load %3 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_4 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %19, %c3_i64_4 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    %c0_i64_5 = arith.constant 0 : i64
    %21 = arith.extui %9 : i32 to i64
    %22 = arith.addi %21, %c0_i64_5 : i64
    %23 = llvm.getelementptr %6[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %c1_i64 = arith.constant 1 : i64
    %24 = llvm.load %3 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c1_i64 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %24, %c1_i64 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f45(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %7, %c3_i64 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c3_i64_2 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %10, %c3_i64_2 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %13 = llvm.load %3 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64_3 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %13, %c3_i64_3 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %12 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %17 = llvm.getelementptr %6[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %19 = llvm.load %3 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_4 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %19, %c3_i64_4 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_5 = arith.constant 3 : i64
    %22 = llvm.load %3 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c3_i64_5 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %22, %c3_i64_5 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %21 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %28 = llvm.load %3 : !llvm.ptr -> i64
    %29 = arith.cmpi ult, %28, %c6_i64 : i64
    scf.if %29 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %28, %c6_i64 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %30 = call @f73(%arg0, %9, %18, %27) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64 = arith.constant 1 : i64
    %31 = llvm.load %3 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c1_i64 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %31, %c1_i64 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%30 : i32)
  ^bb2(%33: i32):  // pred: ^bb1
    return %33 : i32
  }
  func.func @f46(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_6 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %7, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> i32
    %16 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> i64
    %20 = arith.trunci %19 : i64 to i32
    %21 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %17 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    %24 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %17 : !llvm.ptr -> i64
    %26 = arith.trunci %25 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %27 = llvm.load %8 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c3_i64 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %27, %c3_i64 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %29 = llvm.load %10 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %30 = llvm.load %8 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c1_i64 : i64
    scf.if %31 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %30, %c1_i64 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_7 = arith.constant 3 : i64
    %32 = llvm.load %8 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c3_i64_7 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %32, %c3_i64_7 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %34 = arith.subi %29, %c32_i32 : i32
    %c3_i64_8 = arith.constant 3 : i64
    %35 = llvm.load %8 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %c3_i64_8 : i64
    scf.if %36 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %35, %c3_i64_8 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    llvm.store %34, %5 : i32, !llvm.ptr
    %c3_i64_9 = arith.constant 3 : i64
    %37 = llvm.load %8 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c3_i64_9 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %37, %c3_i64_9 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    llvm.store %34, %10 : i32, !llvm.ptr
    %c1_i64_10 = arith.constant 1 : i64
    %39 = llvm.load %8 : !llvm.ptr -> i64
    %40 = arith.cmpi ult, %39, %c1_i64_10 : i64
    scf.if %40 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %39, %c1_i64_10 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_11 = arith.constant 0 : i32
    %c1_i64_12 = arith.constant 1 : i64
    %41 = llvm.load %8 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c1_i64_12 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %41, %c1_i64_12 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_13 = arith.constant 0 : i32
    %c3_i64_14 = arith.constant 3 : i64
    %43 = llvm.load %8 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c3_i64_14 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %43, %c3_i64_14 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049524_i64 = arith.constant 1049524 : i64
    %45 = arith.extui %c0_i32_13 : i32 to i64
    %46 = arith.addi %45, %c1049524_i64 : i64
    %47 = llvm.getelementptr %13[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %49 = llvm.load %8 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c3_i64_15 : i64
    scf.if %50 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %49, %c3_i64_15 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    llvm.store %48, %6 : i32, !llvm.ptr
    %c1_i64_16 = arith.constant 1 : i64
    %51 = llvm.load %8 : !llvm.ptr -> i64
    %52 = arith.cmpi ult, %51, %c1_i64_16 : i64
    scf.if %52 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %51, %c1_i64_16 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1_i32_17 = arith.constant 1 : i32
    %c3_i64_18 = arith.constant 3 : i64
    %53 = llvm.load %8 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c3_i64_18 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %53, %c3_i64_18 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %55 = arith.addi %48, %c1_i32_17 : i32
    %c3_i64_19 = arith.constant 3 : i64
    %56 = llvm.load %8 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c3_i64_19 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %56, %c3_i64_19 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049524_i64_20 = arith.constant 1049524 : i64
    %58 = arith.extui %c0_i32_11 : i32 to i64
    %59 = arith.addi %58, %c1049524_i64_20 : i64
    %60 = llvm.getelementptr %13[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %60 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_21 = arith.constant 1 : i64
    %61 = llvm.load %8 : !llvm.ptr -> i64
    %62 = arith.cmpi ult, %61, %c1_i64_21 : i64
    scf.if %62 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %61, %c1_i64_21 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c3_i64_22 = arith.constant 3 : i64
    %63 = llvm.load %8 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c3_i64_22 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %63, %c3_i64_22 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %65 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_23 = arith.constant 1 : i64
    %66 = llvm.load %8 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c1_i64_23 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %66, %c1_i64_23 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_24 = arith.constant 0 : i32
    %c3_i64_25 = arith.constant 3 : i64
    %68 = llvm.load %8 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c3_i64_25 : i64
    scf.if %69 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %68, %c3_i64_25 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %70 = arith.cmpi slt, %65, %c0_i32_24 : i32
    %71 = arith.extui %70 : i1 to i32
    %c1_i64_26 = arith.constant 1 : i64
    %72 = llvm.load %8 : !llvm.ptr -> i64
    %73 = arith.cmpi ult, %72, %c1_i64_26 : i64
    scf.if %73 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %72, %c1_i64_26 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_27 = arith.constant 0 : i32
    %74 = arith.cmpi ne, %71, %c0_i32_27 : i32
    cf.cond_br %74, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 4 preds: ^bb1, ^bb6, ^bb8, ^bb33
    %c0_i64 = arith.constant 0 : i64
    %75 = llvm.load %8 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c0_i64 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %75, %c0_i64 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c1_i64_28 = arith.constant 1 : i64
    %77 = llvm.load %8 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c1_i64_28 : i64
    scf.if %78 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %77, %c1_i64_28 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1_i64_29 = arith.constant 1 : i64
    %79 = llvm.load %8 : !llvm.ptr -> i64
    %80 = arith.cmpi ult, %79, %c1_i64_29 : i64
    scf.if %80 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %79, %c1_i64_29 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_30 = arith.constant 0 : i32
    %c3_i64_31 = arith.constant 3 : i64
    %81 = llvm.load %8 : !llvm.ptr -> i64
    %82 = arith.cmpi ult, %81, %c3_i64_31 : i64
    scf.if %82 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %81, %c3_i64_31 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049532_i64 = arith.constant 1049532 : i64
    %83 = arith.extui %c0_i32_30 : i32 to i64
    %84 = arith.addi %83, %c1049532_i64 : i64
    %85 = llvm.getelementptr %13[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i8
    %87 = arith.extui %86 : i8 to i32
    %c1_i64_32 = arith.constant 1 : i64
    %88 = llvm.load %8 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c1_i64_32 : i64
    scf.if %89 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %88, %c1_i64_32 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_33 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %87, %c0_i32_33 : i32
    cf.cond_br %90, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %c3_i64_34 = arith.constant 3 : i64
    %91 = llvm.load %8 : !llvm.ptr -> i64
    %92 = arith.cmpi ult, %91, %c3_i64_34 : i64
    scf.if %92 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %91, %c3_i64_34 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %93 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_35 = arith.constant 1 : i64
    %94 = llvm.load %8 : !llvm.ptr -> i64
    %95 = arith.cmpi ult, %94, %c1_i64_35 : i64
    scf.if %95 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %94, %c1_i64_35 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_36 = arith.constant 3 : i64
    %96 = llvm.load %8 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c3_i64_36 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %96, %c3_i64_36 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %98 = arith.addi %93, %c8_i32 : i32
    %c3_i64_37 = arith.constant 3 : i64
    %99 = llvm.load %8 : !llvm.ptr -> i64
    %100 = arith.cmpi ult, %99, %c3_i64_37 : i64
    scf.if %100 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %99, %c3_i64_37 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %101 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_38 = arith.constant 3 : i64
    %102 = llvm.load %8 : !llvm.ptr -> i64
    %103 = arith.cmpi ult, %102, %c3_i64_38 : i64
    scf.if %103 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %102, %c3_i64_38 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %104 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_39 = arith.constant 3 : i64
    %105 = llvm.load %8 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %c3_i64_39 : i64
    scf.if %106 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %105, %c3_i64_39 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %107 = arith.extui %104 : i32 to i64
    %108 = arith.addi %107, %c24_i64 : i64
    %109 = llvm.getelementptr %13[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64 = arith.constant 7 : i64
    %111 = llvm.load %8 : !llvm.ptr -> i64
    %112 = arith.cmpi ult, %111, %c7_i64 : i64
    scf.if %112 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %111, %c7_i64 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %113 = arith.cmpi ult, %110, %26 : i32
    cf.cond_br %113, ^bb27, ^bb28
  ^bb6:  // pred: ^bb4
    %c1_i64_40 = arith.constant 1 : i64
    %114 = llvm.load %8 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %c1_i64_40 : i64
    scf.if %115 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %114, %c1_i64_40 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_41 = arith.constant 0 : i32
    %c1_i64_42 = arith.constant 1 : i64
    %116 = llvm.load %8 : !llvm.ptr -> i64
    %117 = arith.cmpi ult, %116, %c1_i64_42 : i64
    scf.if %117 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %116, %c1_i64_42 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1_i32_43 = arith.constant 1 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %118 = llvm.load %8 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_44 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %118, %c3_i64_44 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049532_i64_45 = arith.constant 1049532 : i64
    %120 = arith.extui %c0_i32_41 : i32 to i64
    %121 = arith.addi %120, %c1049532_i64_45 : i64
    %122 = llvm.getelementptr %13[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = arith.trunci %c1_i32_43 : i32 to i8
    llvm.store volatile %123, %122 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_46 = arith.constant 1 : i64
    %124 = llvm.load %8 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c1_i64_46 : i64
    scf.if %125 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %124, %c1_i64_46 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_47 = arith.constant 0 : i32
    %c1_i64_48 = arith.constant 1 : i64
    %126 = llvm.load %8 : !llvm.ptr -> i64
    %127 = arith.cmpi ult, %126, %c1_i64_48 : i64
    scf.if %127 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %126, %c1_i64_48 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_49 = arith.constant 0 : i32
    %c3_i64_50 = arith.constant 3 : i64
    %128 = llvm.load %8 : !llvm.ptr -> i64
    %129 = arith.cmpi ult, %128, %c3_i64_50 : i64
    scf.if %129 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %128, %c3_i64_50 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049528_i64 = arith.constant 1049528 : i64
    %130 = arith.extui %c0_i32_49 : i32 to i64
    %131 = arith.addi %130, %c1049528_i64 : i64
    %132 = llvm.getelementptr %13[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %133 = llvm.load volatile %132 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_51 = arith.constant 1 : i64
    %134 = llvm.load %8 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c1_i64_51 : i64
    scf.if %135 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %134, %c1_i64_51 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1_i32_52 = arith.constant 1 : i32
    %c3_i64_53 = arith.constant 3 : i64
    %136 = llvm.load %8 : !llvm.ptr -> i64
    %137 = arith.cmpi ult, %136, %c3_i64_53 : i64
    scf.if %137 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %136, %c3_i64_53 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %138 = arith.addi %133, %c1_i32_52 : i32
    %c3_i64_54 = arith.constant 3 : i64
    %139 = llvm.load %8 : !llvm.ptr -> i64
    %140 = arith.cmpi ult, %139, %c3_i64_54 : i64
    scf.if %140 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %139, %c3_i64_54 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049528_i64_55 = arith.constant 1049528 : i64
    %141 = arith.extui %c0_i32_47 : i32 to i64
    %142 = arith.addi %141, %c1049528_i64_55 : i64
    %143 = llvm.getelementptr %13[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %143 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_56 = arith.constant 1 : i64
    %144 = llvm.load %8 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c1_i64_56 : i64
    scf.if %145 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %144, %c1_i64_56 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_57 = arith.constant 0 : i32
    %c3_i64_58 = arith.constant 3 : i64
    %146 = llvm.load %8 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c3_i64_58 : i64
    scf.if %147 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %146, %c3_i64_58 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049512_i64 = arith.constant 1049512 : i64
    %148 = arith.extui %c0_i32_57 : i32 to i64
    %149 = arith.addi %148, %c1049512_i64 : i64
    %150 = llvm.getelementptr %13[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_59 = arith.constant 3 : i64
    %152 = llvm.load %8 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c3_i64_59 : i64
    scf.if %153 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %152, %c3_i64_59 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    llvm.store %151, %6 : i32, !llvm.ptr
    %c1_i64_60 = arith.constant 1 : i64
    %154 = llvm.load %8 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c1_i64_60 : i64
    scf.if %155 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %154, %c1_i64_60 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_61 = arith.constant 3 : i64
    %156 = llvm.load %8 : !llvm.ptr -> i64
    %157 = arith.cmpi ult, %156, %c3_i64_61 : i64
    scf.if %157 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %156, %c3_i64_61 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %158 = arith.cmpi sle, %151, %c-1_i32 : i32
    %159 = arith.extui %158 : i1 to i32
    %c1_i64_62 = arith.constant 1 : i64
    %160 = llvm.load %8 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c1_i64_62 : i64
    scf.if %161 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %160, %c1_i64_62 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_63 = arith.constant 0 : i32
    %162 = arith.cmpi ne, %159, %c0_i32_63 : i32
    cf.cond_br %162, ^bb3, ^bb7
  ^bb7:  // pred: ^bb6
    %c1_i64_64 = arith.constant 1 : i64
    %163 = llvm.load %8 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c1_i64_64 : i64
    scf.if %164 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %163, %c1_i64_64 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_65 = arith.constant 0 : i32
    %c3_i64_66 = arith.constant 3 : i64
    %165 = llvm.load %8 : !llvm.ptr -> i64
    %166 = arith.cmpi ult, %165, %c3_i64_66 : i64
    scf.if %166 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %165, %c3_i64_66 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %167 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_67 = arith.constant 1 : i64
    %168 = llvm.load %8 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c1_i64_67 : i64
    scf.if %169 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %168, %c1_i64_67 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1_i32_68 = arith.constant 1 : i32
    %c3_i64_69 = arith.constant 3 : i64
    %170 = llvm.load %8 : !llvm.ptr -> i64
    %171 = arith.cmpi ult, %170, %c3_i64_69 : i64
    scf.if %171 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %170, %c3_i64_69 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %172 = arith.addi %167, %c1_i32_68 : i32
    %c3_i64_70 = arith.constant 3 : i64
    %173 = llvm.load %8 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c3_i64_70 : i64
    scf.if %174 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %173, %c3_i64_70 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049512_i64_71 = arith.constant 1049512 : i64
    %175 = arith.extui %c0_i32_65 : i32 to i64
    %176 = arith.addi %175, %c1049512_i64_71 : i64
    %177 = llvm.getelementptr %13[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %172, %177 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_72 = arith.constant 1 : i64
    %178 = llvm.load %8 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c1_i64_72 : i64
    scf.if %179 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %178, %c1_i64_72 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1_i64_73 = arith.constant 1 : i64
    %180 = llvm.load %8 : !llvm.ptr -> i64
    %181 = arith.cmpi ult, %180, %c1_i64_73 : i64
    scf.if %181 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %180, %c1_i64_73 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_74 = arith.constant 0 : i32
    %c3_i64_75 = arith.constant 3 : i64
    %182 = llvm.load %8 : !llvm.ptr -> i64
    %183 = arith.cmpi ult, %182, %c3_i64_75 : i64
    scf.if %183 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %182, %c3_i64_75 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049516_i64 = arith.constant 1049516 : i64
    %184 = arith.extui %c0_i32_74 : i32 to i64
    %185 = arith.addi %184, %c1049516_i64 : i64
    %186 = llvm.getelementptr %13[%185] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %187 = llvm.load volatile %186 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_76 = arith.constant 3 : i64
    %188 = llvm.load %8 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c3_i64_76 : i64
    scf.if %189 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %188, %c3_i64_76 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_77 = arith.constant 0 : i32
    %190 = arith.cmpi eq, %187, %c0_i32_77 : i32
    %191 = arith.extui %190 : i1 to i32
    %c1_i64_78 = arith.constant 1 : i64
    %192 = llvm.load %8 : !llvm.ptr -> i64
    %193 = arith.cmpi ult, %192, %c1_i64_78 : i64
    scf.if %193 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %192, %c1_i64_78 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_79 = arith.constant 0 : i32
    %194 = arith.cmpi ne, %191, %c0_i32_79 : i32
    cf.cond_br %194, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb24
    %c1_i64_80 = arith.constant 1 : i64
    %195 = llvm.load %8 : !llvm.ptr -> i64
    %196 = arith.cmpi ult, %195, %c1_i64_80 : i64
    scf.if %196 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %195, %c1_i64_80 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_81 = arith.constant 0 : i32
    %c3_i64_82 = arith.constant 3 : i64
    %197 = llvm.load %8 : !llvm.ptr -> i64
    %198 = arith.cmpi ult, %197, %c3_i64_82 : i64
    scf.if %198 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %197, %c3_i64_82 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %199 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_83 = arith.constant 3 : i64
    %200 = llvm.load %8 : !llvm.ptr -> i64
    %201 = arith.cmpi ult, %200, %c3_i64_83 : i64
    scf.if %201 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %200, %c3_i64_83 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049512_i64_84 = arith.constant 1049512 : i64
    %202 = arith.extui %c0_i32_81 : i32 to i64
    %203 = arith.addi %202, %c1049512_i64_84 : i64
    %204 = llvm.getelementptr %13[%203] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %199, %204 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_85 = arith.constant 1 : i64
    %205 = llvm.load %8 : !llvm.ptr -> i64
    %206 = arith.cmpi ult, %205, %c1_i64_85 : i64
    scf.if %206 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %205, %c1_i64_85 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_86 = arith.constant 0 : i32
    %c1_i64_87 = arith.constant 1 : i64
    %207 = llvm.load %8 : !llvm.ptr -> i64
    %208 = arith.cmpi ult, %207, %c1_i64_87 : i64
    scf.if %208 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %207, %c1_i64_87 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_88 = arith.constant 0 : i32
    %c3_i64_89 = arith.constant 3 : i64
    %209 = llvm.load %8 : !llvm.ptr -> i64
    %210 = arith.cmpi ult, %209, %c3_i64_89 : i64
    scf.if %210 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %209, %c3_i64_89 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049532_i64_90 = arith.constant 1049532 : i64
    %211 = arith.extui %c0_i32_86 : i32 to i64
    %212 = arith.addi %211, %c1049532_i64_90 : i64
    %213 = llvm.getelementptr %13[%212] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %214 = arith.trunci %c0_i32_88 : i32 to i8
    llvm.store volatile %214, %213 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_91 = arith.constant 3 : i64
    %215 = llvm.load %8 : !llvm.ptr -> i64
    %216 = arith.cmpi ult, %215, %c3_i64_91 : i64
    scf.if %216 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %215, %c3_i64_91 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %217 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_92 = arith.constant 3 : i64
    %218 = llvm.load %8 : !llvm.ptr -> i64
    %219 = arith.cmpi ult, %218, %c3_i64_92 : i64
    scf.if %219 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %218, %c3_i64_92 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_93 = arith.constant 0 : i32
    %220 = arith.cmpi eq, %217, %c0_i32_93 : i32
    %221 = arith.extui %220 : i1 to i32
    %c1_i64_94 = arith.constant 1 : i64
    %222 = llvm.load %8 : !llvm.ptr -> i64
    %223 = arith.cmpi ult, %222, %c1_i64_94 : i64
    scf.if %223 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %222, %c1_i64_94 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_95 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %221, %c0_i32_95 : i32
    cf.cond_br %224, ^bb3, ^bb26
  ^bb9:  // pred: ^bb7
    %c3_i64_96 = arith.constant 3 : i64
    %225 = llvm.load %8 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c3_i64_96 : i64
    scf.if %226 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %225, %c3_i64_96 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %227 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_97 = arith.constant 3 : i64
    %228 = llvm.load %8 : !llvm.ptr -> i64
    %229 = arith.cmpi ult, %228, %c3_i64_97 : i64
    scf.if %229 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %228, %c3_i64_97 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %230 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_98 = arith.constant 3 : i64
    %231 = llvm.load %8 : !llvm.ptr -> i64
    %232 = arith.cmpi ult, %231, %c3_i64_98 : i64
    scf.if %232 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %231, %c3_i64_98 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %233 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_99 = arith.constant 3 : i64
    %234 = llvm.load %8 : !llvm.ptr -> i64
    %235 = arith.cmpi ult, %234, %c3_i64_99 : i64
    scf.if %235 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %234, %c3_i64_99 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %236 = arith.extui %233 : i32 to i64
    %237 = arith.addi %236, %c20_i64 : i64
    %238 = llvm.getelementptr %13[%237] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %239 = llvm.load volatile %238 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_100 = arith.constant 7 : i64
    %240 = llvm.load %8 : !llvm.ptr -> i64
    %241 = arith.cmpi ult, %240, %c7_i64_100 : i64
    scf.if %241 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %240, %c7_i64_100 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %242 = arith.cmpi ult, %239, %20 : i32
    cf.cond_br %242, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %243 = llvm.getelementptr inbounds %18[%239] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %244 = llvm.load %243 : !llvm.ptr -> !llvm.ptr
    %245 = llvm.ptrtoint %244 : !llvm.ptr to i64
    %c0_i64_101 = arith.constant 0 : i64
    %246 = arith.cmpi eq, %245, %c0_i64_101 : i64
    cf.cond_br %246, ^bb13, ^bb12
  ^bb11:  // pred: ^bb9
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %247 = llvm.getelementptr %244[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %248 = llvm.getelementptr %244[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %249 = llvm.getelementptr %244[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %250 = llvm.load %247 : !llvm.ptr -> !llvm.ptr
    %251 = llvm.load %249 : !llvm.ptr -> !llvm.ptr
    %252 = llvm.ptrtoint %250 : !llvm.ptr to i64
    %c0_i64_102 = arith.constant 0 : i64
    %253 = arith.cmpi eq, %252, %c0_i64_102 : i64
    cf.cond_br %253, ^bb15, ^bb14
  ^bb13:  // pred: ^bb10
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %254 = llvm.load %248 : !llvm.ptr -> i32
    %255 = arith.cmpi ne, %15, %254 : i32
    cf.cond_br %255, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c3_i32_103 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_103) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %256 = llvm.call %250(%251, %227, %230) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c3_i64_104 = arith.constant 3 : i64
    %257 = llvm.load %8 : !llvm.ptr -> i64
    %258 = arith.cmpi ult, %257, %c3_i64_104 : i64
    scf.if %258 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %257, %c3_i64_104 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %259 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_105 = arith.constant 3 : i64
    %260 = llvm.load %8 : !llvm.ptr -> i64
    %261 = arith.cmpi ult, %260, %c3_i64_105 : i64
    scf.if %261 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %260, %c3_i64_105 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %262 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_106 = arith.constant 3 : i64
    %263 = llvm.load %8 : !llvm.ptr -> i64
    %264 = arith.cmpi ult, %263, %c3_i64_106 : i64
    scf.if %264 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %263, %c3_i64_106 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c29_i64 = arith.constant 29 : i64
    %265 = arith.extui %259 : i32 to i64
    %266 = arith.addi %265, %c29_i64 : i64
    %267 = llvm.getelementptr %13[%266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %268 = arith.trunci %262 : i32 to i8
    llvm.store volatile %268, %267 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_107 = arith.constant 3 : i64
    %269 = llvm.load %8 : !llvm.ptr -> i64
    %270 = arith.cmpi ult, %269, %c3_i64_107 : i64
    scf.if %270 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %269, %c3_i64_107 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %271 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_108 = arith.constant 3 : i64
    %272 = llvm.load %8 : !llvm.ptr -> i64
    %273 = arith.cmpi ult, %272, %c3_i64_108 : i64
    scf.if %273 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %272, %c3_i64_108 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %274 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_109 = arith.constant 3 : i64
    %275 = llvm.load %8 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_109 : i64
    scf.if %276 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %275, %c3_i64_109 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %277 = arith.extui %271 : i32 to i64
    %278 = arith.addi %277, %c28_i64 : i64
    %279 = llvm.getelementptr %13[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = arith.trunci %274 : i32 to i8
    llvm.store volatile %280, %279 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_110 = arith.constant 3 : i64
    %281 = llvm.load %8 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c3_i64_110 : i64
    scf.if %282 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %281, %c3_i64_110 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %283 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_111 = arith.constant 3 : i64
    %284 = llvm.load %8 : !llvm.ptr -> i64
    %285 = arith.cmpi ult, %284, %c3_i64_111 : i64
    scf.if %285 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %284, %c3_i64_111 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %286 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_112 = arith.constant 3 : i64
    %287 = llvm.load %8 : !llvm.ptr -> i64
    %288 = arith.cmpi ult, %287, %c3_i64_112 : i64
    scf.if %288 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %287, %c3_i64_112 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c24_i64_113 = arith.constant 24 : i64
    %289 = arith.extui %283 : i32 to i64
    %290 = arith.addi %289, %c24_i64_113 : i64
    %291 = llvm.getelementptr %13[%290] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %286, %291 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_114 = arith.constant 3 : i64
    %292 = llvm.load %8 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c3_i64_114 : i64
    scf.if %293 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %292, %c3_i64_114 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %294 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_115 = arith.constant 3 : i64
    %295 = llvm.load %8 : !llvm.ptr -> i64
    %296 = arith.cmpi ult, %295, %c3_i64_115 : i64
    scf.if %296 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %295, %c3_i64_115 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %297 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_116 = arith.constant 3 : i64
    %298 = llvm.load %8 : !llvm.ptr -> i64
    %299 = arith.cmpi ult, %298, %c3_i64_116 : i64
    scf.if %299 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %298, %c3_i64_116 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i64_117 = arith.constant 0 : i64
    %300 = arith.extui %297 : i32 to i64
    %301 = arith.addi %300, %c0_i64_117 : i64
    %302 = llvm.getelementptr %13[%301] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %303 = llvm.load volatile %302 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_118 = arith.constant 3 : i64
    %304 = llvm.load %8 : !llvm.ptr -> i64
    %305 = arith.cmpi ult, %304, %c3_i64_118 : i64
    scf.if %305 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %304, %c3_i64_118 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %306 = arith.extui %294 : i32 to i64
    %307 = arith.addi %306, %c16_i64 : i64
    %308 = llvm.getelementptr %13[%307] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %303, %308 {alignment = 1 : i64} : i64, !llvm.ptr
    %c1_i64_119 = arith.constant 1 : i64
    %309 = llvm.load %8 : !llvm.ptr -> i64
    %310 = arith.cmpi ult, %309, %c1_i64_119 : i64
    scf.if %310 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %309, %c1_i64_119 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_120 = arith.constant 0 : i32
    %c3_i64_121 = arith.constant 3 : i64
    %311 = llvm.load %8 : !llvm.ptr -> i64
    %312 = arith.cmpi ult, %311, %c3_i64_121 : i64
    scf.if %312 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %311, %c3_i64_121 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049516_i64_122 = arith.constant 1049516 : i64
    %313 = arith.extui %c0_i32_120 : i32 to i64
    %314 = arith.addi %313, %c1049516_i64_122 : i64
    %315 = llvm.getelementptr %13[%314] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %316 = llvm.load volatile %315 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_123 = arith.constant 3 : i64
    %317 = llvm.load %8 : !llvm.ptr -> i64
    %318 = arith.cmpi ult, %317, %c3_i64_123 : i64
    scf.if %318 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %317, %c3_i64_123 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %319 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_124 = arith.constant 1 : i64
    %320 = llvm.load %8 : !llvm.ptr -> i64
    %321 = arith.cmpi ult, %320, %c1_i64_124 : i64
    scf.if %321 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %320, %c1_i64_124 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_125 = arith.constant 3 : i64
    %322 = llvm.load %8 : !llvm.ptr -> i64
    %323 = arith.cmpi ult, %322, %c3_i64_125 : i64
    scf.if %323 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %322, %c3_i64_125 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %324 = arith.addi %319, %c16_i32 : i32
    %c1_i64_126 = arith.constant 1 : i64
    %325 = llvm.load %8 : !llvm.ptr -> i64
    %326 = arith.cmpi ult, %325, %c1_i64_126 : i64
    scf.if %326 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %325, %c1_i64_126 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_127 = arith.constant 0 : i32
    %c3_i64_128 = arith.constant 3 : i64
    %327 = llvm.load %8 : !llvm.ptr -> i64
    %328 = arith.cmpi ult, %327, %c3_i64_128 : i64
    scf.if %328 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %327, %c3_i64_128 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049520_i64 = arith.constant 1049520 : i64
    %329 = arith.extui %c0_i32_127 : i32 to i64
    %330 = arith.addi %329, %c1049520_i64 : i64
    %331 = llvm.getelementptr %13[%330] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %332 = llvm.load volatile %331 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_129 = arith.constant 3 : i64
    %333 = llvm.load %8 : !llvm.ptr -> i64
    %334 = arith.cmpi ult, %333, %c3_i64_129 : i64
    scf.if %334 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %333, %c3_i64_129 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c20_i64_130 = arith.constant 20 : i64
    %335 = arith.extui %332 : i32 to i64
    %336 = arith.addi %335, %c20_i64_130 : i64
    %337 = llvm.getelementptr %13[%336] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %338 = llvm.load volatile %337 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_131 = arith.constant 7 : i64
    %339 = llvm.load %8 : !llvm.ptr -> i64
    %340 = arith.cmpi ult, %339, %c7_i64_131 : i64
    scf.if %340 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %339, %c7_i64_131 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %341 = arith.cmpi ult, %338, %23 : i32
    cf.cond_br %341, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %342 = llvm.getelementptr inbounds %21[%338] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %343 = llvm.load %342 : !llvm.ptr -> !llvm.ptr
    %344 = llvm.ptrtoint %343 : !llvm.ptr to i64
    %c0_i64_132 = arith.constant 0 : i64
    %345 = arith.cmpi eq, %344, %c0_i64_132 : i64
    cf.cond_br %345, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_133 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_133) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %346 = llvm.getelementptr %343[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %347 = llvm.getelementptr %343[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %348 = llvm.getelementptr %343[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %349 = llvm.load %346 : !llvm.ptr -> !llvm.ptr
    %350 = llvm.load %348 : !llvm.ptr -> !llvm.ptr
    %351 = llvm.ptrtoint %349 : !llvm.ptr to i64
    %c0_i64_134 = arith.constant 0 : i64
    %352 = arith.cmpi eq, %351, %c0_i64_134 : i64
    cf.cond_br %352, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c4_i32_135 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_135) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %353 = llvm.load %347 : !llvm.ptr -> i32
    %354 = arith.cmpi ne, %15, %353 : i32
    cf.cond_br %354, ^bb25, ^bb24
  ^bb23:  // pred: ^bb20
    %c3_i32_136 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_136) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %355 = llvm.call %349(%350, %316, %324) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c1_i64_137 = arith.constant 1 : i64
    %356 = llvm.load %8 : !llvm.ptr -> i64
    %357 = arith.cmpi ult, %356, %c1_i64_137 : i64
    scf.if %357 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %356, %c1_i64_137 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c0_i32_138 = arith.constant 0 : i32
    %c3_i64_139 = arith.constant 3 : i64
    %358 = llvm.load %8 : !llvm.ptr -> i64
    %359 = arith.cmpi ult, %358, %c3_i64_139 : i64
    scf.if %359 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %358, %c3_i64_139 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c1049512_i64_140 = arith.constant 1049512 : i64
    %360 = arith.extui %c0_i32_138 : i32 to i64
    %361 = arith.addi %360, %c1049512_i64_140 : i64
    %362 = llvm.getelementptr %13[%361] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %363 = llvm.load volatile %362 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_141 = arith.constant 1 : i64
    %364 = llvm.load %8 : !llvm.ptr -> i64
    %365 = arith.cmpi ult, %364, %c1_i64_141 : i64
    scf.if %365 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %364, %c1_i64_141 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c-1_i32_142 = arith.constant -1 : i32
    %c3_i64_143 = arith.constant 3 : i64
    %366 = llvm.load %8 : !llvm.ptr -> i64
    %367 = arith.cmpi ult, %366, %c3_i64_143 : i64
    scf.if %367 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %366, %c3_i64_143 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %368 = arith.addi %363, %c-1_i32_142 : i32
    %c3_i64_144 = arith.constant 3 : i64
    %369 = llvm.load %8 : !llvm.ptr -> i64
    %370 = arith.cmpi ult, %369, %c3_i64_144 : i64
    scf.if %370 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %369, %c3_i64_144 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    llvm.store %368, %6 : i32, !llvm.ptr
    %c1_i64_145 = arith.constant 1 : i64
    %371 = llvm.load %8 : !llvm.ptr -> i64
    %372 = arith.cmpi ult, %371, %c1_i64_145 : i64
    scf.if %372 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %371, %c1_i64_145 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    cf.br ^bb8
  ^bb25:  // pred: ^bb22
    %c5_i32_146 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_146) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // pred: ^bb8
    %c3_i64_147 = arith.constant 3 : i64
    %373 = llvm.load %8 : !llvm.ptr -> i64
    %374 = arith.cmpi ult, %373, %c3_i64_147 : i64
    scf.if %374 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %373, %c3_i64_147 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %375 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_148 = arith.constant 3 : i64
    %376 = llvm.load %8 : !llvm.ptr -> i64
    %377 = arith.cmpi ult, %376, %c3_i64_148 : i64
    scf.if %377 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %376, %c3_i64_148 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %378 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %379 = llvm.load %8 : !llvm.ptr -> i64
    %380 = arith.cmpi ult, %379, %c6_i64 : i64
    scf.if %380 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %379, %c6_i64 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    call @f47(%arg0, %375, %378) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_149 = arith.constant 0 : i64
    %381 = llvm.load %8 : !llvm.ptr -> i64
    %382 = arith.cmpi ult, %381, %c0_i64_149 : i64
    scf.if %382 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %381, %c0_i64_149 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    %c9_i32_150 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_150) : (i32) -> ()
    llvm.unreachable
  ^bb27:  // 2 preds: ^bb5, ^bb28
    %383 = llvm.getelementptr inbounds %24[%110] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %384 = llvm.load %383 : !llvm.ptr -> !llvm.ptr
    %385 = llvm.ptrtoint %384 : !llvm.ptr to i64
    %c0_i64_151 = arith.constant 0 : i64
    %386 = arith.cmpi eq, %385, %c0_i64_151 : i64
    cf.cond_br %386, ^bb30, ^bb29
  ^bb28:  // pred: ^bb5
    %c3_i32_152 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_152) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %387 = llvm.getelementptr %384[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %388 = llvm.getelementptr %384[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %389 = llvm.getelementptr %384[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %390 = llvm.load %387 : !llvm.ptr -> !llvm.ptr
    %391 = llvm.load %389 : !llvm.ptr -> !llvm.ptr
    %392 = llvm.ptrtoint %390 : !llvm.ptr to i64
    %c0_i64_153 = arith.constant 0 : i64
    %393 = arith.cmpi eq, %392, %c0_i64_153 : i64
    cf.cond_br %393, ^bb32, ^bb31
  ^bb30:  // pred: ^bb27
    %c4_i32_154 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_154) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %394 = llvm.load %388 : !llvm.ptr -> i32
    %395 = arith.cmpi ne, %15, %394 : i32
    cf.cond_br %395, ^bb34, ^bb33
  ^bb32:  // pred: ^bb29
    %c3_i32_155 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_155) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %396 = llvm.call %390(%391, %98, %101) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c1_i64_156 = arith.constant 1 : i64
    %397 = llvm.load %8 : !llvm.ptr -> i64
    %398 = arith.cmpi ult, %397, %c1_i64_156 : i64
    scf.if %398 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %399 = arith.subi %397, %c1_i64_156 : i64
      llvm.store %399, %8 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb34:  // pred: ^bb31
    %c5_i32_157 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_157) : (i32) -> ()
    cf.br ^bb33
  }
  func.func @f47(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c3_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %4, %c3_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64_2 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %7, %c3_i64_2 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c6_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %10, %c6_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %12 = call @f49(%arg0, %6, %9) : (!llvm.ptr, i32, i32) -> i32
    %c1_i64 = arith.constant 1 : i64
    %13 = llvm.load %3 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c1_i64 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %13, %c1_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %15 = llvm.load %3 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c0_i64 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %15, %c0_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f48(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_2 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %3, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %10 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %11 : !llvm.ptr -> i64
    %14 = arith.trunci %13 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %15 = llvm.load %4 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c3_i64 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %59 = arith.subi %15, %c3_i64 : i64
      llvm.store %59, %4 : i64, !llvm.ptr
    }
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %18 = llvm.load %4 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_3 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %59 = arith.subi %18, %c3_i64_3 : i64
      llvm.store %59, %4 : i64, !llvm.ptr
    }
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %21 = llvm.load %4 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c1_i64 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %59 = arith.subi %21, %c1_i64 : i64
      llvm.store %59, %4 : i64, !llvm.ptr
    }
    %c0_i32_4 = arith.constant 0 : i32
    %c3_i64_5 = arith.constant 3 : i64
    %23 = llvm.load %4 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_5 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %59 = arith.subi %23, %c3_i64_5 : i64
      llvm.store %59, %4 : i64, !llvm.ptr
    }
    %c1049508_i64 = arith.constant 1049508 : i64
    %25 = arith.extui %c0_i32_4 : i32 to i64
    %26 = arith.addi %25, %c1049508_i64 : i64
    %27 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_6 = arith.constant 3 : i64
    %29 = llvm.load %4 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_6 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %59 = arith.subi %29, %c3_i64_6 : i64
      llvm.store %59, %4 : i64, !llvm.ptr
    }
    llvm.store %28, %2 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %31 = llvm.load %4 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c1_i64_7 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %59 = arith.subi %31, %c1_i64_7 : i64
      llvm.store %59, %4 : i64, !llvm.ptr
    }
    %c11_i32 = arith.constant 11 : i32
    %c3_i64_8 = arith.constant 3 : i64
    %33 = llvm.load %4 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c3_i64_8 : i64
    scf.if %34 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %59 = arith.subi %33, %c3_i64_8 : i64
      llvm.store %59, %4 : i64, !llvm.ptr
    }
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_9 = arith.constant 1 : i64
    %36 = llvm.load %4 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c1_i64_9 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %59 = arith.subi %36, %c1_i64_9 : i64
      llvm.store %59, %4 : i64, !llvm.ptr
    }
    %c0_i32_10 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %35, %c0_i32_10 : i32
    %39 = arith.select %38, %28, %c11_i32 : i32
    %c7_i64 = arith.constant 7 : i64
    %40 = llvm.load %4 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c7_i64 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %59 = arith.subi %40, %c7_i64 : i64
      llvm.store %59, %4 : i64, !llvm.ptr
    }
    %42 = arith.cmpi ult, %39, %14 : i32
    cf.cond_br %42, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %43 = llvm.getelementptr inbounds %12[%39] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %44 = llvm.load %43 : !llvm.ptr -> !llvm.ptr
    %45 = llvm.ptrtoint %44 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %46 = arith.cmpi eq, %45, %c0_i64 : i64
    cf.cond_br %46, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %47 = llvm.getelementptr %44[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %48 = llvm.getelementptr %44[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %49 = llvm.getelementptr %44[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %50 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    %51 = llvm.load %49 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.ptrtoint %50 : !llvm.ptr to i64
    %c0_i64_11 = arith.constant 0 : i64
    %53 = arith.cmpi eq, %52, %c0_i64_11 : i64
    cf.cond_br %53, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %54 = llvm.load %48 : !llvm.ptr -> i32
    %55 = arith.cmpi ne, %9, %54 : i32
    cf.cond_br %55, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_12 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_12) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %56 = llvm.call %50(%51, %17, %20) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c0_i64_13 = arith.constant 0 : i64
    %57 = llvm.load %4 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c0_i64_13 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %59 = arith.subi %57, %c0_i64_13 : i64
      llvm.store %59, %4 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f49(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i64 = arith.constant 0 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c0_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %7 = arith.subi %4, %c0_i64 : i64
      llvm.store %7, %3 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2(%6: i32):  // no predecessors
    return %6 : i32
  }
  func.func @f50(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c3_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %4, %c3_i64 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c1_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %7, %c1_i64 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %c1049036_i32 = arith.constant 1049036 : i32
    %c3_i64_2 = arith.constant 3 : i64
    %9 = llvm.load %3 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c3_i64_2 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %9, %c3_i64_2 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c6_i64 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %12, %c6_i64 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    %14 = call @f66(%arg0, %6, %c1049036_i32, %11) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_3 = arith.constant 1 : i64
    %15 = llvm.load %3 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c1_i64_3 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %18 = arith.subi %15, %c1_i64_3 : i64
      llvm.store %18, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%14 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f51(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c1_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %7, %c1_i64 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %9 = llvm.load %3 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c3_i64 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %9, %c3_i64 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c3_i64_2 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %12, %c3_i64_2 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %11 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %18 = llvm.load %3 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_3 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %18, %c3_i64_3 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    llvm.store %17, %1 : i32, !llvm.ptr
    %c3_i64_4 = arith.constant 3 : i64
    %20 = llvm.load %3 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_4 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %20, %c3_i64_4 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c0_i32_5 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %17, %c0_i32_5 : i32
    %23 = arith.extui %22 : i1 to i32
    %c1_i64_6 = arith.constant 1 : i64
    %24 = llvm.load %3 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c1_i64_6 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %24, %c1_i64_6 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c0_i32_7 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %23, %c0_i32_7 : i32
    cf.cond_br %26, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c1_i64_8 = arith.constant 1 : i64
    %27 = llvm.load %3 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c1_i64_8 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %27, %c1_i64_8 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c3_i64_9 = arith.constant 3 : i64
    %29 = llvm.load %3 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_9 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %29, %c3_i64_9 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_10 = arith.constant 3 : i64
    %32 = llvm.load %3 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c3_i64_10 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %32, %c3_i64_10 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %34 = arith.extui %31 : i32 to i64
    %35 = arith.addi %34, %c4_i64 : i64
    %36 = llvm.getelementptr %6[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %38 = llvm.load %3 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_11 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %38, %c3_i64_11 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_12 = arith.constant 1 : i64
    %41 = llvm.load %3 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c1_i64_12 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %41, %c1_i64_12 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    %c1_i32_13 = arith.constant 1 : i32
    %c6_i64 = arith.constant 6 : i64
    %43 = llvm.load %3 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c6_i64 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %43, %c6_i64 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    call @f10(%arg0, %37, %40, %c1_i32_13) : (!llvm.ptr, i32, i32, i32) -> ()
    %c1_i64_14 = arith.constant 1 : i64
    %45 = llvm.load %3 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c1_i64_14 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %47 = arith.subi %45, %c1_i64_14 : i64
      llvm.store %47, %3 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f52(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c3_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %4, %c3_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c1_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %7, %c1_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %c1049028_i32 = arith.constant 1049028 : i32
    %c1_i64_2 = arith.constant 1 : i64
    %9 = llvm.load %3 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c1_i64_2 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %9, %c1_i64_2 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %c5_i32 = arith.constant 5 : i32
    %c6_i64 = arith.constant 6 : i64
    %11 = llvm.load %3 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c6_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %11, %c6_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %13 = call @f73(%arg0, %6, %c1049028_i32, %c5_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_3 = arith.constant 1 : i64
    %14 = llvm.load %3 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c1_i64_3 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %14, %c1_i64_3 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%13 : i32)
  ^bb2(%16: i32):  // pred: ^bb1
    return %16 : i32
  }
  func.func @f53(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_0 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %1, %2 : i64, !llvm.ptr
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %8 = llvm.load %2 : !llvm.ptr -> i64
    %9 = arith.cmpi ult, %8, %c3_i64 : i64
    scf.if %9 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %8, %c3_i64 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %10 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %11 = llvm.load %2 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c1_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %11, %c1_i64 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_1 = arith.constant 3 : i64
    %13 = llvm.load %2 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64_1 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %13, %c3_i64_1 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %15 = arith.subi %10, %c32_i32 : i32
    %c3_i64_2 = arith.constant 3 : i64
    %16 = llvm.load %2 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64_2 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %16, %c3_i64_2 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    llvm.store %15, %0 : i32, !llvm.ptr
    %c3_i64_3 = arith.constant 3 : i64
    %18 = llvm.load %2 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_3 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %18, %c3_i64_3 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    llvm.store %15, %4 : i32, !llvm.ptr
    %c3_i64_4 = arith.constant 3 : i64
    %20 = llvm.load %2 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_4 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %20, %c3_i64_4 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_5 = arith.constant 1 : i64
    %23 = llvm.load %2 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c1_i64_5 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %23, %c1_i64_5 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %c0_i32_6 = arith.constant 0 : i32
    %c3_i64_7 = arith.constant 3 : i64
    %25 = llvm.load %2 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c3_i64_7 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %25, %c3_i64_7 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %27 = arith.extui %22 : i32 to i64
    %28 = arith.addi %27, %c24_i64 : i64
    %29 = llvm.getelementptr %7[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_6, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_8 = arith.constant 3 : i64
    %30 = llvm.load %2 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c3_i64_8 : i64
    scf.if %31 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %30, %c3_i64_8 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_9 = arith.constant 1 : i64
    %33 = llvm.load %2 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c1_i64_9 : i64
    scf.if %34 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %33, %c1_i64_9 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %c1_i32_10 = arith.constant 1 : i32
    %c3_i64_11 = arith.constant 3 : i64
    %35 = llvm.load %2 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %c3_i64_11 : i64
    scf.if %36 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %35, %c3_i64_11 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %37 = arith.extui %32 : i32 to i64
    %38 = arith.addi %37, %c12_i64 : i64
    %39 = llvm.getelementptr %7[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_10, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_12 = arith.constant 3 : i64
    %40 = llvm.load %2 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c3_i64_12 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %40, %c3_i64_12 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_13 = arith.constant 1 : i64
    %43 = llvm.load %2 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c1_i64_13 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %43, %c1_i64_13 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %c1049080_i32 = arith.constant 1049080 : i32
    %c3_i64_14 = arith.constant 3 : i64
    %45 = llvm.load %2 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_14 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %45, %c3_i64_14 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %47 = arith.extui %42 : i32 to i64
    %48 = arith.addi %47, %c8_i64 : i64
    %49 = llvm.getelementptr %7[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049080_i32, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_15 = arith.constant 3 : i64
    %50 = llvm.load %2 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c3_i64_15 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %50, %c3_i64_15 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %52 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_16 = arith.constant 1 : i64
    %53 = llvm.load %2 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c1_i64_16 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %53, %c1_i64_16 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %c3_i64_17 = arith.constant 3 : i64
    %55 = llvm.load %2 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c3_i64_17 : i64
    scf.if %56 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %55, %c3_i64_17 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %57 = arith.extui %52 : i32 to i64
    %58 = arith.addi %57, %c16_i64 : i64
    %59 = llvm.getelementptr %7[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64, %59 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_18 = arith.constant 3 : i64
    %60 = llvm.load %2 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_18 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %60, %c3_i64_18 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_19 = arith.constant 1 : i64
    %63 = llvm.load %2 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c1_i64_19 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %63, %c1_i64_19 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_20 = arith.constant 3 : i64
    %65 = llvm.load %2 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c3_i64_20 : i64
    scf.if %66 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %65, %c3_i64_20 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %67 = arith.addi %62, %c8_i32 : i32
    %c1_i64_21 = arith.constant 1 : i64
    %68 = llvm.load %2 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c1_i64_21 : i64
    scf.if %69 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %68, %c1_i64_21 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %c1049116_i32 = arith.constant 1049116 : i32
    %c6_i64 = arith.constant 6 : i64
    %70 = llvm.load %2 : !llvm.ptr -> i64
    %71 = arith.cmpi ult, %70, %c6_i64 : i64
    scf.if %71 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %70, %c6_i64 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    call @f63(%arg0, %67, %c1049116_i32) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64 = arith.constant 0 : i64
    %72 = llvm.load %2 : !llvm.ptr -> i64
    %73 = arith.cmpi ult, %72, %c0_i64 : i64
    scf.if %73 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %74 = arith.subi %72, %c0_i64 : i64
      llvm.store %74, %2 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f54(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_5 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %13 = llvm.load %7 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64 : i64
    scf.if %14 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %13, %c3_i64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %15 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %16 = llvm.load %7 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c1_i64 : i64
    scf.if %17 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %16, %c1_i64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_6 = arith.constant 3 : i64
    %18 = llvm.load %7 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_6 : i64
    scf.if %19 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %18, %c3_i64_6 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %20 = arith.subi %15, %c32_i32 : i32
    %c3_i64_7 = arith.constant 3 : i64
    %21 = llvm.load %7 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_7 : i64
    scf.if %22 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %21, %c3_i64_7 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %3 : i32, !llvm.ptr
    %c3_i64_8 = arith.constant 3 : i64
    %23 = llvm.load %7 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_8 : i64
    scf.if %24 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %23, %c3_i64_8 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %25 = llvm.load %7 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_9 : i64
    scf.if %26 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %25, %c1_i64_9 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c3_i64_10 = arith.constant 3 : i64
    %27 = llvm.load %7 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c3_i64_10 : i64
    scf.if %28 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %27, %c3_i64_10 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %30 = llvm.load %7 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c3_i64_11 : i64
    scf.if %31 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %30, %c3_i64_11 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_12 = arith.constant 3 : i64
    %33 = llvm.load %7 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c3_i64_12 : i64
    scf.if %34 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %33, %c3_i64_12 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %35 = arith.addi %29, %32 : i32
    %c3_i64_13 = arith.constant 3 : i64
    %36 = llvm.load %7 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_13 : i64
    scf.if %37 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %36, %c3_i64_13 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %35, %2 : i32, !llvm.ptr
    %c3_i64_14 = arith.constant 3 : i64
    %38 = llvm.load %7 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_14 : i64
    scf.if %39 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %38, %c3_i64_14 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %41 = llvm.load %7 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c3_i64_15 : i64
    scf.if %42 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %41, %c3_i64_15 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %43 = arith.cmpi uge, %35, %40 : i32
    %44 = arith.extui %43 : i1 to i32
    %c1_i64_16 = arith.constant 1 : i64
    %45 = llvm.load %7 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c1_i64_16 : i64
    scf.if %46 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %45, %c1_i64_16 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_17 = arith.constant 0 : i32
    %47 = arith.cmpi ne, %44, %c0_i32_17 : i32
    cf.cond_br %47, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i64_18 = arith.constant 1 : i64
    %48 = llvm.load %7 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c1_i64_18 : i64
    scf.if %49 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %48, %c1_i64_18 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i32_19 = arith.constant 1 : i32
    %c3_i64_20 = arith.constant 3 : i64
    %50 = llvm.load %7 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c3_i64_20 : i64
    scf.if %51 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %50, %c3_i64_20 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_19, %4 : i32, !llvm.ptr
    %c3_i64_21 = arith.constant 3 : i64
    %52 = llvm.load %7 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c3_i64_21 : i64
    scf.if %53 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %52, %c3_i64_21 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_22 = arith.constant 3 : i64
    %55 = llvm.load %7 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c3_i64_22 : i64
    scf.if %56 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %55, %c3_i64_22 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %57 = arith.extui %54 : i32 to i64
    %58 = arith.addi %57, %c0_i64 : i64
    %59 = llvm.getelementptr %12[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_23 = arith.constant 3 : i64
    %61 = llvm.load %7 : !llvm.ptr -> i64
    %62 = arith.cmpi ult, %61, %c3_i64_23 : i64
    scf.if %62 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %61, %c3_i64_23 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %60, %5 : i32, !llvm.ptr
    %c1_i64_24 = arith.constant 1 : i64
    %63 = llvm.load %7 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c1_i64_24 : i64
    scf.if %64 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %63, %c1_i64_24 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i32_25 = arith.constant 1 : i32
    %c3_i64_26 = arith.constant 3 : i64
    %65 = llvm.load %7 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c3_i64_26 : i64
    scf.if %66 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %65, %c3_i64_26 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %67 = arith.cmpi ule, %c1_i32_25, %c31_i32 : i32
    %68 = scf.if %67 -> (i32) {
      %294 = arith.shli %60, %c1_i32_25 : i32
      scf.yield %294 : i32
    } else {
      %c0_i32_117 = arith.constant 0 : i32
      scf.yield %c0_i32_117 : i32
    }
    %c3_i64_27 = arith.constant 3 : i64
    %69 = llvm.load %7 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c3_i64_27 : i64
    scf.if %70 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %69, %c3_i64_27 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %68, %1 : i32, !llvm.ptr
    %c3_i64_28 = arith.constant 3 : i64
    %71 = llvm.load %7 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c3_i64_28 : i64
    scf.if %72 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %71, %c3_i64_28 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_29 = arith.constant 3 : i64
    %74 = llvm.load %7 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c3_i64_29 : i64
    scf.if %75 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %74, %c3_i64_29 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %76 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_30 = arith.constant 3 : i64
    %77 = llvm.load %7 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c3_i64_30 : i64
    scf.if %78 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %77, %c3_i64_30 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_31 = arith.constant 3 : i64
    %80 = llvm.load %7 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_31 : i64
    scf.if %81 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %80, %c3_i64_31 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %82 = arith.cmpi ugt, %76, %79 : i32
    %83 = arith.extui %82 : i1 to i32
    %c1_i64_32 = arith.constant 1 : i64
    %84 = llvm.load %7 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c1_i64_32 : i64
    scf.if %85 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %84, %c1_i64_32 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_33 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %83, %c0_i32_33 : i32
    %87 = arith.select %86, %68, %73 : i32
    %c3_i64_34 = arith.constant 3 : i64
    %88 = llvm.load %7 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c3_i64_34 : i64
    scf.if %89 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %88, %c3_i64_34 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %87, %1 : i32, !llvm.ptr
    %c1_i64_35 = arith.constant 1 : i64
    %90 = llvm.load %7 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c1_i64_35 : i64
    scf.if %91 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %90, %c1_i64_35 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_36 = arith.constant 3 : i64
    %92 = llvm.load %7 : !llvm.ptr -> i64
    %93 = arith.cmpi ult, %92, %c3_i64_36 : i64
    scf.if %93 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %92, %c3_i64_36 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_37 = arith.constant 1 : i64
    %95 = llvm.load %7 : !llvm.ptr -> i64
    %96 = arith.cmpi ult, %95, %c1_i64_37 : i64
    scf.if %96 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %95, %c1_i64_37 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i32_38 = arith.constant 8 : i32
    %c3_i64_39 = arith.constant 3 : i64
    %97 = llvm.load %7 : !llvm.ptr -> i64
    %98 = arith.cmpi ult, %97, %c3_i64_39 : i64
    scf.if %98 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %97, %c3_i64_39 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %99 = arith.cmpi ugt, %94, %c8_i32_38 : i32
    %100 = arith.extui %99 : i1 to i32
    %c1_i64_40 = arith.constant 1 : i64
    %101 = llvm.load %7 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c1_i64_40 : i64
    scf.if %102 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %101, %c1_i64_40 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_41 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %100, %c0_i32_41 : i32
    %104 = arith.select %103, %87, %c8_i32 : i32
    %c3_i64_42 = arith.constant 3 : i64
    %105 = llvm.load %7 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %c3_i64_42 : i64
    scf.if %106 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %105, %c3_i64_42 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %104, %1 : i32, !llvm.ptr
    %c1_i64_43 = arith.constant 1 : i64
    %107 = llvm.load %7 : !llvm.ptr -> i64
    %108 = arith.cmpi ult, %107, %c1_i64_43 : i64
    scf.if %108 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %107, %c1_i64_43 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %109 = llvm.load %7 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c3_i64_44 : i64
    scf.if %110 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %109, %c3_i64_44 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %111 = arith.xori %104, %c-1_i32 : i32
    %c1_i64_45 = arith.constant 1 : i64
    %112 = llvm.load %7 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c1_i64_45 : i64
    scf.if %113 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %112, %c1_i64_45 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c31_i32_46 = arith.constant 31 : i32
    %c3_i64_47 = arith.constant 3 : i64
    %114 = llvm.load %7 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %c3_i64_47 : i64
    scf.if %115 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %114, %c3_i64_47 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c31_i32_48 = arith.constant 31 : i32
    %116 = arith.cmpi ule, %c31_i32_46, %c31_i32_48 : i32
    %117 = scf.if %116 -> (i32) {
      %294 = arith.shrui %111, %c31_i32_46 : i32
      scf.yield %294 : i32
    } else {
      %c0_i32_117 = arith.constant 0 : i32
      scf.yield %c0_i32_117 : i32
    }
    %c3_i64_49 = arith.constant 3 : i64
    %118 = llvm.load %7 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_49 : i64
    scf.if %119 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %118, %c3_i64_49 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %117, %2 : i32, !llvm.ptr
    %c1_i64_50 = arith.constant 1 : i64
    %120 = llvm.load %7 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c1_i64_50 : i64
    scf.if %121 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %120, %c1_i64_50 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i64_51 = arith.constant 1 : i64
    %122 = llvm.load %7 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %c1_i64_51 : i64
    scf.if %123 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %122, %c1_i64_51 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c3_i64_52 = arith.constant 3 : i64
    %124 = llvm.load %7 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c3_i64_52 : i64
    scf.if %125 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %124, %c3_i64_52 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %126 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_53 = arith.constant 1 : i64
    %127 = llvm.load %7 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c1_i64_53 : i64
    scf.if %128 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %127, %c1_i64_53 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_54 = arith.constant 0 : i32
    %129 = arith.cmpi ne, %126, %c0_i32_54 : i32
    cf.cond_br %129, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i64_55 = arith.constant 1 : i64
    %130 = llvm.load %7 : !llvm.ptr -> i64
    %131 = arith.cmpi ult, %130, %c1_i64_55 : i64
    scf.if %131 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %130, %c1_i64_55 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_56 = arith.constant 0 : i32
    %c1_i64_57 = arith.constant 1 : i64
    %132 = llvm.load %7 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c1_i64_57 : i64
    scf.if %133 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %132, %c1_i64_57 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_58 = arith.constant 0 : i32
    %c6_i64 = arith.constant 6 : i64
    %134 = llvm.load %7 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c6_i64 : i64
    scf.if %135 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %134, %c6_i64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    call @f55(%arg0, %c0_i32_56, %c0_i32_58) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_59 = arith.constant 0 : i64
    %136 = llvm.load %7 : !llvm.ptr -> i64
    %137 = arith.cmpi ult, %136, %c0_i64_59 : i64
    scf.if %137 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %136, %c0_i64_59 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %c3_i64_60 = arith.constant 3 : i64
    %138 = llvm.load %7 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %c3_i64_60 : i64
    scf.if %139 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %138, %c3_i64_60 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %140 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_61 = arith.constant 3 : i64
    %141 = llvm.load %7 : !llvm.ptr -> i64
    %142 = arith.cmpi ult, %141, %c3_i64_61 : i64
    scf.if %142 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %141, %c3_i64_61 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %143 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_62 = arith.constant 3 : i64
    %144 = llvm.load %7 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c3_i64_62 : i64
    scf.if %145 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %144, %c3_i64_62 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %146 = arith.extui %140 : i32 to i64
    %147 = arith.addi %146, %c24_i64 : i64
    %148 = llvm.getelementptr %12[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %148 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_63 = arith.constant 3 : i64
    %149 = llvm.load %7 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c3_i64_63 : i64
    scf.if %150 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %149, %c3_i64_63 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %151 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_64 = arith.constant 1 : i64
    %152 = llvm.load %7 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c1_i64_64 : i64
    scf.if %153 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %152, %c1_i64_64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i32_65 = arith.constant 8 : i32
    %c3_i64_66 = arith.constant 3 : i64
    %154 = llvm.load %7 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c3_i64_66 : i64
    scf.if %155 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %154, %c3_i64_66 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %156 = arith.addi %151, %c8_i32_65 : i32
    %c3_i64_67 = arith.constant 3 : i64
    %157 = llvm.load %7 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c3_i64_67 : i64
    scf.if %158 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %157, %c3_i64_67 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %159 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_68 = arith.constant 3 : i64
    %160 = llvm.load %7 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_68 : i64
    scf.if %161 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %160, %c3_i64_68 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %162 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_69 = arith.constant 3 : i64
    %163 = llvm.load %7 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c3_i64_69 : i64
    scf.if %164 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %163, %c3_i64_69 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %165 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_70 = arith.constant 1 : i64
    %166 = llvm.load %7 : !llvm.ptr -> i64
    %167 = arith.cmpi ult, %166, %c1_i64_70 : i64
    scf.if %167 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %166, %c1_i64_70 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c20_i32 = arith.constant 20 : i32
    %c3_i64_71 = arith.constant 3 : i64
    %168 = llvm.load %7 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c3_i64_71 : i64
    scf.if %169 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %168, %c3_i64_71 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %170 = arith.addi %165, %c20_i32 : i32
    %c6_i64_72 = arith.constant 6 : i64
    %171 = llvm.load %7 : !llvm.ptr -> i64
    %172 = arith.cmpi ult, %171, %c6_i64_72 : i64
    scf.if %172 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %171, %c6_i64_72 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    call @f56(%arg0, %156, %159, %162, %170) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %c1_i64_73 = arith.constant 1 : i64
    %173 = llvm.load %7 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c1_i64_73 : i64
    scf.if %174 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %173, %c1_i64_73 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c3_i64_74 = arith.constant 3 : i64
    %175 = llvm.load %7 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c3_i64_74 : i64
    scf.if %176 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %175, %c3_i64_74 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %177 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_75 = arith.constant 3 : i64
    %178 = llvm.load %7 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c3_i64_75 : i64
    scf.if %179 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %178, %c3_i64_75 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %180 = arith.extui %177 : i32 to i64
    %181 = arith.addi %180, %c8_i64 : i64
    %182 = llvm.getelementptr %12[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %183 = llvm.load volatile %182 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_76 = arith.constant 3 : i64
    %184 = llvm.load %7 : !llvm.ptr -> i64
    %185 = arith.cmpi ult, %184, %c3_i64_76 : i64
    scf.if %185 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %184, %c3_i64_76 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_77 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %183, %c0_i32_77 : i32
    %187 = arith.extui %186 : i1 to i32
    %c1_i64_78 = arith.constant 1 : i64
    %188 = llvm.load %7 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c1_i64_78 : i64
    scf.if %189 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %188, %c1_i64_78 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_79 = arith.constant 0 : i32
    %190 = arith.cmpi ne, %187, %c0_i32_79 : i32
    cf.cond_br %190, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %c3_i64_80 = arith.constant 3 : i64
    %191 = llvm.load %7 : !llvm.ptr -> i64
    %192 = arith.cmpi ult, %191, %c3_i64_80 : i64
    scf.if %192 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %191, %c3_i64_80 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %193 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_81 = arith.constant 3 : i64
    %194 = llvm.load %7 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c3_i64_81 : i64
    scf.if %195 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %194, %c3_i64_81 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %196 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_82 = arith.constant 3 : i64
    %197 = llvm.load %7 : !llvm.ptr -> i64
    %198 = arith.cmpi ult, %197, %c3_i64_82 : i64
    scf.if %198 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %197, %c3_i64_82 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %199 = arith.extui %193 : i32 to i64
    %200 = arith.addi %199, %c28_i64 : i64
    %201 = llvm.getelementptr %12[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %196, %201 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_83 = arith.constant 3 : i64
    %202 = llvm.load %7 : !llvm.ptr -> i64
    %203 = arith.cmpi ult, %202, %c3_i64_83 : i64
    scf.if %203 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %202, %c3_i64_83 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %204 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_84 = arith.constant 3 : i64
    %205 = llvm.load %7 : !llvm.ptr -> i64
    %206 = arith.cmpi ult, %205, %c3_i64_84 : i64
    scf.if %206 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %205, %c3_i64_84 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %207 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_85 = arith.constant 3 : i64
    %208 = llvm.load %7 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c3_i64_85 : i64
    scf.if %209 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %208, %c3_i64_85 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %210 = arith.extui %207 : i32 to i64
    %211 = arith.addi %210, %c4_i64 : i64
    %212 = llvm.getelementptr %12[%211] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %213 = llvm.load volatile %212 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_86 = arith.constant 3 : i64
    %214 = llvm.load %7 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c3_i64_86 : i64
    scf.if %215 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %214, %c3_i64_86 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %216 = arith.extui %204 : i32 to i64
    %217 = arith.addi %216, %c20_i64 : i64
    %218 = llvm.getelementptr %12[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %213, %218 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_87 = arith.constant 1 : i64
    %219 = llvm.load %7 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c1_i64_87 : i64
    scf.if %220 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %219, %c1_i64_87 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c1_i64_88 = arith.constant 1 : i64
    %221 = llvm.load %7 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c1_i64_88 : i64
    scf.if %222 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %221, %c1_i64_88 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_89 = arith.constant 0 : i32
    %c3_i64_90 = arith.constant 3 : i64
    %223 = llvm.load %7 : !llvm.ptr -> i64
    %224 = arith.cmpi ult, %223, %c3_i64_90 : i64
    scf.if %224 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %223, %c3_i64_90 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_89, %4 : i32, !llvm.ptr
    %c1_i64_91 = arith.constant 1 : i64
    %225 = llvm.load %7 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c1_i64_91 : i64
    scf.if %226 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %225, %c1_i64_91 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %c3_i64_92 = arith.constant 3 : i64
    %227 = llvm.load %7 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %c3_i64_92 : i64
    scf.if %228 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %227, %c3_i64_92 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %229 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_93 = arith.constant 3 : i64
    %230 = llvm.load %7 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c3_i64_93 : i64
    scf.if %231 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %230, %c3_i64_93 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %232 = arith.extui %229 : i32 to i64
    %233 = arith.addi %232, %c12_i64 : i64
    %234 = llvm.getelementptr %12[%233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %235 = llvm.load volatile %234 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_94 = arith.constant 3 : i64
    %236 = llvm.load %7 : !llvm.ptr -> i64
    %237 = arith.cmpi ult, %236, %c3_i64_94 : i64
    scf.if %237 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %236, %c3_i64_94 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %235, %2 : i32, !llvm.ptr
    %c3_i64_95 = arith.constant 3 : i64
    %238 = llvm.load %7 : !llvm.ptr -> i64
    %239 = arith.cmpi ult, %238, %c3_i64_95 : i64
    scf.if %239 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %238, %c3_i64_95 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %240 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_96 = arith.constant 3 : i64
    %241 = llvm.load %7 : !llvm.ptr -> i64
    %242 = arith.cmpi ult, %241, %c3_i64_96 : i64
    scf.if %242 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %241, %c3_i64_96 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %243 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_97 = arith.constant 3 : i64
    %244 = llvm.load %7 : !llvm.ptr -> i64
    %245 = arith.cmpi ult, %244, %c3_i64_97 : i64
    scf.if %245 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %244, %c3_i64_97 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i64_98 = arith.constant 0 : i64
    %246 = arith.extui %240 : i32 to i64
    %247 = arith.addi %246, %c0_i64_98 : i64
    %248 = llvm.getelementptr %12[%247] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %243, %248 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_99 = arith.constant 3 : i64
    %249 = llvm.load %7 : !llvm.ptr -> i64
    %250 = arith.cmpi ult, %249, %c3_i64_99 : i64
    scf.if %250 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %249, %c3_i64_99 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %251 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_100 = arith.constant 3 : i64
    %252 = llvm.load %7 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c3_i64_100 : i64
    scf.if %253 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %252, %c3_i64_100 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %254 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_101 = arith.constant 3 : i64
    %255 = llvm.load %7 : !llvm.ptr -> i64
    %256 = arith.cmpi ult, %255, %c3_i64_101 : i64
    scf.if %256 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %255, %c3_i64_101 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c4_i64_102 = arith.constant 4 : i64
    %257 = arith.extui %251 : i32 to i64
    %258 = arith.addi %257, %c4_i64_102 : i64
    %259 = llvm.getelementptr %12[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %254, %259 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_103 = arith.constant 3 : i64
    %260 = llvm.load %7 : !llvm.ptr -> i64
    %261 = arith.cmpi ult, %260, %c3_i64_103 : i64
    scf.if %261 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %260, %c3_i64_103 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %262 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_104 = arith.constant 1 : i64
    %263 = llvm.load %7 : !llvm.ptr -> i64
    %264 = arith.cmpi ult, %263, %c1_i64_104 : i64
    scf.if %264 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %263, %c1_i64_104 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c32_i32_105 = arith.constant 32 : i32
    %c3_i64_106 = arith.constant 3 : i64
    %265 = llvm.load %7 : !llvm.ptr -> i64
    %266 = arith.cmpi ult, %265, %c3_i64_106 : i64
    scf.if %266 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %265, %c3_i64_106 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %267 = arith.addi %262, %c32_i32_105 : i32
    %c3_i64_107 = arith.constant 3 : i64
    %268 = llvm.load %7 : !llvm.ptr -> i64
    %269 = arith.cmpi ult, %268, %c3_i64_107 : i64
    scf.if %269 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %268, %c3_i64_107 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %267, %9 : i32, !llvm.ptr
    %c1_i64_108 = arith.constant 1 : i64
    %270 = llvm.load %7 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %270, %c1_i64_108 : i64
    scf.if %271 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %270, %c1_i64_108 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %c3_i64_109 = arith.constant 3 : i64
    %272 = llvm.load %7 : !llvm.ptr -> i64
    %273 = arith.cmpi ult, %272, %c3_i64_109 : i64
    scf.if %273 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %272, %c3_i64_109 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %274 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_110 = arith.constant 3 : i64
    %275 = llvm.load %7 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_110 : i64
    scf.if %276 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %275, %c3_i64_110 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c12_i64_111 = arith.constant 12 : i64
    %277 = arith.extui %274 : i32 to i64
    %278 = arith.addi %277, %c12_i64_111 : i64
    %279 = llvm.getelementptr %12[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_112 = arith.constant 3 : i64
    %281 = llvm.load %7 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c3_i64_112 : i64
    scf.if %282 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %281, %c3_i64_112 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %283 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_113 = arith.constant 3 : i64
    %284 = llvm.load %7 : !llvm.ptr -> i64
    %285 = arith.cmpi ult, %284, %c3_i64_113 : i64
    scf.if %285 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %284, %c3_i64_113 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %286 = arith.extui %283 : i32 to i64
    %287 = arith.addi %286, %c16_i64 : i64
    %288 = llvm.getelementptr %12[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %289 = llvm.load volatile %288 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c6_i64_114 = arith.constant 6 : i64
    %290 = llvm.load %7 : !llvm.ptr -> i64
    %291 = arith.cmpi ult, %290, %c6_i64_114 : i64
    scf.if %291 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %290, %c6_i64_114 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    call @f55(%arg0, %280, %289) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_115 = arith.constant 0 : i64
    %292 = llvm.load %7 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c0_i64_115 : i64
    scf.if %293 {
      %c20_i32_117 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_117) : (i32) -> ()
    } else {
      %294 = arith.subi %292, %c0_i64_115 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c9_i32_116 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_116) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f55(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c1_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %4, %c1_i64 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %6 = llvm.load %3 : !llvm.ptr -> i64
    %7 = arith.cmpi ult, %6, %c3_i64 : i64
    scf.if %7 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %6, %c3_i64 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_2 = arith.constant 1 : i64
    %9 = llvm.load %3 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c1_i64_2 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %9, %c1_i64_2 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %8, %c0_i32 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // pred: ^bb1
    %c3_i64_3 = arith.constant 3 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c3_i64_3 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %12, %c3_i64_3 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %15 = llvm.load %3 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c3_i64_4 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %15, %c3_i64_4 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %18 = llvm.load %3 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c6_i64 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %18, %c6_i64 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    call @f58(%arg0, %14, %17) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64 = arith.constant 0 : i64
    %20 = llvm.load %3 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c0_i64 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %20, %c0_i64 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c6_i64_5 = arith.constant 6 : i64
    %22 = llvm.load %3 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c6_i64_5 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %22, %c6_i64_5 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    call @f53(%arg0) : (!llvm.ptr) -> ()
    %c0_i64_6 = arith.constant 0 : i64
    %24 = llvm.load %3 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c0_i64_6 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %26 = arith.subi %24, %c0_i64_6 : i64
      llvm.store %26, %3 : i64, !llvm.ptr
    }
    %c9_i32_7 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_7) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f56(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_6 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %7, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %12 = llvm.load %8 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c1_i64 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %12, %c1_i64 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1_i32_7 = arith.constant 1 : i32
    %c3_i64 = arith.constant 3 : i64
    %14 = llvm.load %8 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c3_i64 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %14, %c3_i64 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_7, %4 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %16 = llvm.load %8 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c1_i64_8 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %16, %c1_i64_8 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_9 = arith.constant 0 : i32
    %c3_i64_10 = arith.constant 3 : i64
    %18 = llvm.load %8 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_10 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %18, %c3_i64_10 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_9, %5 : i32, !llvm.ptr
    %c1_i64_11 = arith.constant 1 : i64
    %20 = llvm.load %8 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c1_i64_11 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %20, %c1_i64_11 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c3_i64_12 = arith.constant 3 : i64
    %22 = llvm.load %8 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c3_i64_12 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %22, %c3_i64_12 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %c4_i32, %6 : i32, !llvm.ptr
    %c1_i64_13 = arith.constant 1 : i64
    %24 = llvm.load %8 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c1_i64_13 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %24, %c1_i64_13 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c3_i64_14 = arith.constant 3 : i64
    %26 = llvm.load %8 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c3_i64_14 : i64
    scf.if %27 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %26, %c3_i64_14 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %29 = llvm.load %8 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_15 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %29, %c3_i64_15 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_16 = arith.constant 0 : i32
    %31 = arith.cmpi eq, %28, %c0_i32_16 : i32
    %32 = arith.extui %31 : i1 to i32
    %c1_i64_17 = arith.constant 1 : i64
    %33 = llvm.load %8 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c1_i64_17 : i64
    scf.if %34 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %33, %c1_i64_17 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_18 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %32, %c0_i32_18 : i32
    cf.cond_br %35, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb1, ^bb4, ^bb6
    %c3_i64_19 = arith.constant 3 : i64
    %36 = llvm.load %8 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_19 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %36, %c3_i64_19 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_20 = arith.constant 3 : i64
    %39 = llvm.load %8 : !llvm.ptr -> i64
    %40 = arith.cmpi ult, %39, %c3_i64_20 : i64
    scf.if %40 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %39, %c3_i64_20 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %41 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_21 = arith.constant 3 : i64
    %42 = llvm.load %8 : !llvm.ptr -> i64
    %43 = arith.cmpi ult, %42, %c3_i64_21 : i64
    scf.if %43 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %42, %c3_i64_21 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %44 = arith.addi %38, %41 : i32
    %c3_i64_22 = arith.constant 3 : i64
    %45 = llvm.load %8 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_22 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %45, %c3_i64_22 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %47 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_23 = arith.constant 3 : i64
    %48 = llvm.load %8 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c3_i64_23 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %48, %c3_i64_23 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %50 = arith.extui %44 : i32 to i64
    %51 = arith.addi %50, %c0_i64 : i64
    %52 = llvm.getelementptr %11[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %52 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_24 = arith.constant 3 : i64
    %53 = llvm.load %8 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c3_i64_24 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %53, %c3_i64_24 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_25 = arith.constant 3 : i64
    %56 = llvm.load %8 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c3_i64_25 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %56, %c3_i64_25 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %58 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_26 = arith.constant 3 : i64
    %59 = llvm.load %8 : !llvm.ptr -> i64
    %60 = arith.cmpi ult, %59, %c3_i64_26 : i64
    scf.if %60 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %59, %c3_i64_26 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i64_27 = arith.constant 0 : i64
    %61 = arith.extui %55 : i32 to i64
    %62 = arith.addi %61, %c0_i64_27 : i64
    %63 = llvm.getelementptr %11[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %63 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_28 = arith.constant 1 : i64
    %64 = llvm.load %8 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c1_i64_28 : i64
    scf.if %65 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %64, %c1_i64_28 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c3_i64_29 = arith.constant 3 : i64
    %66 = llvm.load %8 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c3_i64_29 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %66, %c3_i64_29 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %68 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_30 = arith.constant 1 : i64
    %69 = llvm.load %8 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c1_i64_30 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %69, %c1_i64_30 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_31 = arith.constant 0 : i32
    %c3_i64_32 = arith.constant 3 : i64
    %71 = llvm.load %8 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c3_i64_32 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %71, %c3_i64_32 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %73 = arith.cmpi slt, %68, %c0_i32_31 : i32
    %74 = arith.extui %73 : i1 to i32
    %c1_i64_33 = arith.constant 1 : i64
    %75 = llvm.load %8 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c1_i64_33 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %75, %c1_i64_33 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_34 = arith.constant 0 : i32
    %77 = arith.cmpi ne, %74, %c0_i32_34 : i32
    cf.cond_br %77, ^bb3, ^bb5
  ^bb5:  // pred: ^bb4
    %c1_i64_35 = arith.constant 1 : i64
    %78 = llvm.load %8 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c1_i64_35 : i64
    scf.if %79 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %78, %c1_i64_35 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1_i64_36 = arith.constant 1 : i64
    %80 = llvm.load %8 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c1_i64_36 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %80, %c1_i64_36 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1_i64_37 = arith.constant 1 : i64
    %82 = llvm.load %8 : !llvm.ptr -> i64
    %83 = arith.cmpi ult, %82, %c1_i64_37 : i64
    scf.if %83 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %82, %c1_i64_37 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1_i64_38 = arith.constant 1 : i64
    %84 = llvm.load %8 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c1_i64_38 : i64
    scf.if %85 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %84, %c1_i64_38 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1_i64_39 = arith.constant 1 : i64
    %86 = llvm.load %8 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %c1_i64_39 : i64
    scf.if %87 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %86, %c1_i64_39 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c3_i64_40 = arith.constant 3 : i64
    %88 = llvm.load %8 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c3_i64_40 : i64
    scf.if %89 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %88, %c3_i64_40 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_41 = arith.constant 3 : i64
    %91 = llvm.load %8 : !llvm.ptr -> i64
    %92 = arith.cmpi ult, %91, %c3_i64_41 : i64
    scf.if %92 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %91, %c3_i64_41 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %93 = arith.extui %90 : i32 to i64
    %94 = arith.addi %93, %c4_i64 : i64
    %95 = llvm.getelementptr %11[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_42 = arith.constant 3 : i64
    %97 = llvm.load %8 : !llvm.ptr -> i64
    %98 = arith.cmpi ult, %97, %c3_i64_42 : i64
    scf.if %98 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %97, %c3_i64_42 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_43 = arith.constant 0 : i32
    %99 = arith.cmpi eq, %96, %c0_i32_43 : i32
    %100 = arith.extui %99 : i1 to i32
    %c1_i64_44 = arith.constant 1 : i64
    %101 = llvm.load %8 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c1_i64_44 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %101, %c1_i64_44 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_45 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %100, %c0_i32_45 : i32
    cf.cond_br %103, ^bb10, ^bb11
  ^bb6:  // 2 preds: ^bb7, ^bb8
    %c1_i64_46 = arith.constant 1 : i64
    %104 = llvm.load %8 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c1_i64_46 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %104, %c1_i64_46 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_47 = arith.constant 3 : i64
    %106 = llvm.load %8 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c3_i64_47 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %106, %c3_i64_47 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %c8_i32, %6 : i32, !llvm.ptr
    %c3_i64_48 = arith.constant 3 : i64
    %108 = llvm.load %8 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %108, %c3_i64_48 : i64
    scf.if %109 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %108, %c3_i64_48 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %110 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_49 = arith.constant 3 : i64
    %111 = llvm.load %8 : !llvm.ptr -> i64
    %112 = arith.cmpi ult, %111, %c3_i64_49 : i64
    scf.if %112 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %111, %c3_i64_49 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %110, %5 : i32, !llvm.ptr
    %c1_i64_50 = arith.constant 1 : i64
    %113 = llvm.load %8 : !llvm.ptr -> i64
    %114 = arith.cmpi ult, %113, %c1_i64_50 : i64
    scf.if %114 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %113, %c1_i64_50 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb7:  // pred: ^bb9
    %c1_i64_51 = arith.constant 1 : i64
    %115 = llvm.load %8 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c1_i64_51 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %115, %c1_i64_51 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1_i32_52 = arith.constant 1 : i32
    %c3_i64_53 = arith.constant 3 : i64
    %117 = llvm.load %8 : !llvm.ptr -> i64
    %118 = arith.cmpi ult, %117, %c3_i64_53 : i64
    scf.if %118 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %117, %c3_i64_53 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_52, %4 : i32, !llvm.ptr
    %c3_i64_54 = arith.constant 3 : i64
    %119 = llvm.load %8 : !llvm.ptr -> i64
    %120 = arith.cmpi ult, %119, %c3_i64_54 : i64
    scf.if %120 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %119, %c3_i64_54 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %121 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_55 = arith.constant 1 : i64
    %122 = llvm.load %8 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %c1_i64_55 : i64
    scf.if %123 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %122, %c1_i64_55 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1_i32_56 = arith.constant 1 : i32
    %c3_i64_57 = arith.constant 3 : i64
    %124 = llvm.load %8 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c3_i64_57 : i64
    scf.if %125 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %124, %c3_i64_57 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c4_i64_58 = arith.constant 4 : i64
    %126 = arith.extui %121 : i32 to i64
    %127 = arith.addi %126, %c4_i64_58 : i64
    %128 = llvm.getelementptr %11[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_56, %128 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_59 = arith.constant 1 : i64
    %129 = llvm.load %8 : !llvm.ptr -> i64
    %130 = arith.cmpi ult, %129, %c1_i64_59 : i64
    scf.if %130 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %129, %c1_i64_59 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb15, ^bb17, ^bb18
    %c3_i64_60 = arith.constant 3 : i64
    %131 = llvm.load %8 : !llvm.ptr -> i64
    %132 = arith.cmpi ult, %131, %c3_i64_60 : i64
    scf.if %132 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %131, %c3_i64_60 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %133 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_61 = arith.constant 3 : i64
    %134 = llvm.load %8 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c3_i64_61 : i64
    scf.if %135 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %134, %c3_i64_61 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %136 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_62 = arith.constant 3 : i64
    %137 = llvm.load %8 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c3_i64_62 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %137, %c3_i64_62 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c4_i64_63 = arith.constant 4 : i64
    %139 = arith.extui %133 : i32 to i64
    %140 = arith.addi %139, %c4_i64_63 : i64
    %141 = llvm.getelementptr %11[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %141 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_64 = arith.constant 1 : i64
    %142 = llvm.load %8 : !llvm.ptr -> i64
    %143 = arith.cmpi ult, %142, %c1_i64_64 : i64
    scf.if %143 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %142, %c1_i64_64 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_65 = arith.constant 0 : i32
    %c3_i64_66 = arith.constant 3 : i64
    %144 = llvm.load %8 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c3_i64_66 : i64
    scf.if %145 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %144, %c3_i64_66 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_65, %4 : i32, !llvm.ptr
    %c1_i64_67 = arith.constant 1 : i64
    %146 = llvm.load %8 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c1_i64_67 : i64
    scf.if %147 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %146, %c1_i64_67 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    cf.br ^bb6
  ^bb9:  // 3 preds: ^bb12, ^bb14, ^bb16
    %c3_i64_68 = arith.constant 3 : i64
    %148 = llvm.load %8 : !llvm.ptr -> i64
    %149 = arith.cmpi ult, %148, %c3_i64_68 : i64
    scf.if %149 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %148, %c3_i64_68 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %150 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_69 = arith.constant 3 : i64
    %151 = llvm.load %8 : !llvm.ptr -> i64
    %152 = arith.cmpi ult, %151, %c3_i64_69 : i64
    scf.if %152 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %151, %c3_i64_69 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_70 = arith.constant 0 : i32
    %153 = arith.cmpi eq, %150, %c0_i32_70 : i32
    %154 = arith.extui %153 : i1 to i32
    %c1_i64_71 = arith.constant 1 : i64
    %155 = llvm.load %8 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %c1_i64_71 : i64
    scf.if %156 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %155, %c1_i64_71 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_72 = arith.constant 0 : i32
    %157 = arith.cmpi ne, %154, %c0_i32_72 : i32
    cf.cond_br %157, ^bb7, ^bb18
  ^bb10:  // pred: ^bb5
    %c1_i64_73 = arith.constant 1 : i64
    %158 = llvm.load %8 : !llvm.ptr -> i64
    %159 = arith.cmpi ult, %158, %c1_i64_73 : i64
    scf.if %159 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %158, %c1_i64_73 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c3_i64_74 = arith.constant 3 : i64
    %160 = llvm.load %8 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_74 : i64
    scf.if %161 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %160, %c3_i64_74 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %162 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_75 = arith.constant 1 : i64
    %163 = llvm.load %8 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c1_i64_75 : i64
    scf.if %164 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %163, %c1_i64_75 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_76 = arith.constant 0 : i32
    %165 = arith.cmpi ne, %162, %c0_i32_76 : i32
    cf.cond_br %165, ^bb16, ^bb17
  ^bb11:  // pred: ^bb5
    %c1_i64_77 = arith.constant 1 : i64
    %166 = llvm.load %8 : !llvm.ptr -> i64
    %167 = arith.cmpi ult, %166, %c1_i64_77 : i64
    scf.if %167 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %166, %c1_i64_77 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c3_i64_78 = arith.constant 3 : i64
    %168 = llvm.load %8 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c3_i64_78 : i64
    scf.if %169 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %168, %c3_i64_78 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %170 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_79 = arith.constant 3 : i64
    %171 = llvm.load %8 : !llvm.ptr -> i64
    %172 = arith.cmpi ult, %171, %c3_i64_79 : i64
    scf.if %172 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %171, %c3_i64_79 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %173 = arith.extui %170 : i32 to i64
    %174 = arith.addi %173, %c8_i64 : i64
    %175 = llvm.getelementptr %11[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = llvm.load volatile %175 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_80 = arith.constant 3 : i64
    %177 = llvm.load %8 : !llvm.ptr -> i64
    %178 = arith.cmpi ult, %177, %c3_i64_80 : i64
    scf.if %178 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %177, %c3_i64_80 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %176, %4 : i32, !llvm.ptr
    %c1_i64_81 = arith.constant 1 : i64
    %179 = llvm.load %8 : !llvm.ptr -> i64
    %180 = arith.cmpi ult, %179, %c1_i64_81 : i64
    scf.if %180 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %179, %c1_i64_81 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_82 = arith.constant 0 : i32
    %181 = arith.cmpi ne, %176, %c0_i32_82 : i32
    cf.cond_br %181, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %c3_i64_83 = arith.constant 3 : i64
    %182 = llvm.load %8 : !llvm.ptr -> i64
    %183 = arith.cmpi ult, %182, %c3_i64_83 : i64
    scf.if %183 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %182, %c3_i64_83 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %184 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_84 = arith.constant 3 : i64
    %185 = llvm.load %8 : !llvm.ptr -> i64
    %186 = arith.cmpi ult, %185, %c3_i64_84 : i64
    scf.if %186 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %185, %c3_i64_84 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i64_85 = arith.constant 0 : i64
    %187 = arith.extui %184 : i32 to i64
    %188 = arith.addi %187, %c0_i64_85 : i64
    %189 = llvm.getelementptr %11[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %190 = llvm.load volatile %189 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_86 = arith.constant 3 : i64
    %191 = llvm.load %8 : !llvm.ptr -> i64
    %192 = arith.cmpi ult, %191, %c3_i64_86 : i64
    scf.if %192 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %191, %c3_i64_86 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %193 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_87 = arith.constant 1 : i64
    %194 = llvm.load %8 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c1_i64_87 : i64
    scf.if %195 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %194, %c1_i64_87 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1_i32_88 = arith.constant 1 : i32
    %c3_i64_89 = arith.constant 3 : i64
    %196 = llvm.load %8 : !llvm.ptr -> i64
    %197 = arith.cmpi ult, %196, %c3_i64_89 : i64
    scf.if %197 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %196, %c3_i64_89 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %198 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %199 = llvm.load %8 : !llvm.ptr -> i64
    %200 = arith.cmpi ult, %199, %c6_i64 : i64
    scf.if %200 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %199, %c6_i64 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %201 = call @f11(%arg0, %190, %193, %c1_i32_88, %198) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    %c3_i64_90 = arith.constant 3 : i64
    %202 = llvm.load %8 : !llvm.ptr -> i64
    %203 = arith.cmpi ult, %202, %c3_i64_90 : i64
    scf.if %203 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %202, %c3_i64_90 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %201, %4 : i32, !llvm.ptr
    %c1_i64_91 = arith.constant 1 : i64
    %204 = llvm.load %8 : !llvm.ptr -> i64
    %205 = arith.cmpi ult, %204, %c1_i64_91 : i64
    scf.if %205 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %204, %c1_i64_91 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb13:  // pred: ^bb11
    %c1_i64_92 = arith.constant 1 : i64
    %206 = llvm.load %8 : !llvm.ptr -> i64
    %207 = arith.cmpi ult, %206, %c1_i64_92 : i64
    scf.if %207 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %206, %c1_i64_92 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c3_i64_93 = arith.constant 3 : i64
    %208 = llvm.load %8 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c3_i64_93 : i64
    scf.if %209 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %208, %c3_i64_93 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %210 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_94 = arith.constant 1 : i64
    %211 = llvm.load %8 : !llvm.ptr -> i64
    %212 = arith.cmpi ult, %211, %c1_i64_94 : i64
    scf.if %212 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %211, %c1_i64_94 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_95 = arith.constant 0 : i32
    %213 = arith.cmpi ne, %210, %c0_i32_95 : i32
    cf.cond_br %213, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %c1_i64_96 = arith.constant 1 : i64
    %214 = llvm.load %8 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c1_i64_96 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %214, %c1_i64_96 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_97 = arith.constant 0 : i32
    %c3_i64_98 = arith.constant 3 : i64
    %216 = llvm.load %8 : !llvm.ptr -> i64
    %217 = arith.cmpi ult, %216, %c3_i64_98 : i64
    scf.if %217 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %216, %c3_i64_98 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1049497_i64 = arith.constant 1049497 : i64
    %218 = arith.extui %c0_i32_97 : i32 to i64
    %219 = arith.addi %218, %c1049497_i64 : i64
    %220 = llvm.getelementptr %11[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %221 = llvm.load volatile %220 {alignment = 1 : i64} : !llvm.ptr -> i8
    %222 = arith.extui %221 : i8 to i32
    %c1_i64_99 = arith.constant 1 : i64
    %223 = llvm.load %8 : !llvm.ptr -> i64
    %224 = arith.cmpi ult, %223, %c1_i64_99 : i64
    scf.if %224 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %223, %c1_i64_99 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c3_i64_100 = arith.constant 3 : i64
    %225 = llvm.load %8 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c3_i64_100 : i64
    scf.if %226 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %225, %c3_i64_100 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %227 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_101 = arith.constant 1 : i64
    %228 = llvm.load %8 : !llvm.ptr -> i64
    %229 = arith.cmpi ult, %228, %c1_i64_101 : i64
    scf.if %229 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %228, %c1_i64_101 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1_i32_102 = arith.constant 1 : i32
    %c6_i64_103 = arith.constant 6 : i64
    %230 = llvm.load %8 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c6_i64_103 : i64
    scf.if %231 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %230, %c6_i64_103 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %232 = call @f9(%arg0, %227, %c1_i32_102) : (!llvm.ptr, i32, i32) -> i32
    %c3_i64_104 = arith.constant 3 : i64
    %233 = llvm.load %8 : !llvm.ptr -> i64
    %234 = arith.cmpi ult, %233, %c3_i64_104 : i64
    scf.if %234 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %233, %c3_i64_104 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %232, %4 : i32, !llvm.ptr
    %c1_i64_105 = arith.constant 1 : i64
    %235 = llvm.load %8 : !llvm.ptr -> i64
    %236 = arith.cmpi ult, %235, %c1_i64_105 : i64
    scf.if %236 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %235, %c1_i64_105 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb15:  // pred: ^bb13
    %c1_i64_106 = arith.constant 1 : i64
    %237 = llvm.load %8 : !llvm.ptr -> i64
    %238 = arith.cmpi ult, %237, %c1_i64_106 : i64
    scf.if %238 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %237, %c1_i64_106 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1_i32_107 = arith.constant 1 : i32
    %c3_i64_108 = arith.constant 3 : i64
    %239 = llvm.load %8 : !llvm.ptr -> i64
    %240 = arith.cmpi ult, %239, %c3_i64_108 : i64
    scf.if %240 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %239, %c3_i64_108 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_107, %4 : i32, !llvm.ptr
    %c1_i64_109 = arith.constant 1 : i64
    %241 = llvm.load %8 : !llvm.ptr -> i64
    %242 = arith.cmpi ult, %241, %c1_i64_109 : i64
    scf.if %242 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %241, %c1_i64_109 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    cf.br ^bb8
  ^bb16:  // pred: ^bb10
    %c1_i64_110 = arith.constant 1 : i64
    %243 = llvm.load %8 : !llvm.ptr -> i64
    %244 = arith.cmpi ult, %243, %c1_i64_110 : i64
    scf.if %244 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %243, %c1_i64_110 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c0_i32_111 = arith.constant 0 : i32
    %c3_i64_112 = arith.constant 3 : i64
    %245 = llvm.load %8 : !llvm.ptr -> i64
    %246 = arith.cmpi ult, %245, %c3_i64_112 : i64
    scf.if %246 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %245, %c3_i64_112 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1049497_i64_113 = arith.constant 1049497 : i64
    %247 = arith.extui %c0_i32_111 : i32 to i64
    %248 = arith.addi %247, %c1049497_i64_113 : i64
    %249 = llvm.getelementptr %11[%248] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %250 = llvm.load volatile %249 {alignment = 1 : i64} : !llvm.ptr -> i8
    %251 = arith.extui %250 : i8 to i32
    %c1_i64_114 = arith.constant 1 : i64
    %252 = llvm.load %8 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c1_i64_114 : i64
    scf.if %253 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %252, %c1_i64_114 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c3_i64_115 = arith.constant 3 : i64
    %254 = llvm.load %8 : !llvm.ptr -> i64
    %255 = arith.cmpi ult, %254, %c3_i64_115 : i64
    scf.if %255 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %254, %c3_i64_115 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %256 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_116 = arith.constant 1 : i64
    %257 = llvm.load %8 : !llvm.ptr -> i64
    %258 = arith.cmpi ult, %257, %c1_i64_116 : i64
    scf.if %258 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %257, %c1_i64_116 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1_i32_117 = arith.constant 1 : i32
    %c6_i64_118 = arith.constant 6 : i64
    %259 = llvm.load %8 : !llvm.ptr -> i64
    %260 = arith.cmpi ult, %259, %c6_i64_118 : i64
    scf.if %260 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %259, %c6_i64_118 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %261 = call @f9(%arg0, %256, %c1_i32_117) : (!llvm.ptr, i32, i32) -> i32
    %c3_i64_119 = arith.constant 3 : i64
    %262 = llvm.load %8 : !llvm.ptr -> i64
    %263 = arith.cmpi ult, %262, %c3_i64_119 : i64
    scf.if %263 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %262, %c3_i64_119 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %261, %4 : i32, !llvm.ptr
    %c1_i64_120 = arith.constant 1 : i64
    %264 = llvm.load %8 : !llvm.ptr -> i64
    %265 = arith.cmpi ult, %264, %c1_i64_120 : i64
    scf.if %265 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %264, %c1_i64_120 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb17:  // pred: ^bb10
    %c1_i64_121 = arith.constant 1 : i64
    %266 = llvm.load %8 : !llvm.ptr -> i64
    %267 = arith.cmpi ult, %266, %c1_i64_121 : i64
    scf.if %267 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %266, %c1_i64_121 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    %c1_i32_122 = arith.constant 1 : i32
    %c3_i64_123 = arith.constant 3 : i64
    %268 = llvm.load %8 : !llvm.ptr -> i64
    %269 = arith.cmpi ult, %268, %c3_i64_123 : i64
    scf.if %269 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %268, %c3_i64_123 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_122, %4 : i32, !llvm.ptr
    %c1_i64_124 = arith.constant 1 : i64
    %270 = llvm.load %8 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %270, %c1_i64_124 : i64
    scf.if %271 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %270, %c1_i64_124 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    cf.br ^bb8
  ^bb18:  // pred: ^bb9
    %c1_i64_125 = arith.constant 1 : i64
    %272 = llvm.load %8 : !llvm.ptr -> i64
    %273 = arith.cmpi ult, %272, %c1_i64_125 : i64
    scf.if %273 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %274 = arith.subi %272, %c1_i64_125 : i64
      llvm.store %274, %8 : i64, !llvm.ptr
    }
    cf.br ^bb8
  }
  func.func @f57(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_5 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %13 = llvm.load %7 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64 : i64
    scf.if %14 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %13, %c3_i64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %15 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %16 = llvm.load %7 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c1_i64 : i64
    scf.if %17 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %16, %c1_i64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_6 = arith.constant 3 : i64
    %18 = llvm.load %7 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_6 : i64
    scf.if %19 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %18, %c3_i64_6 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %20 = arith.subi %15, %c32_i32 : i32
    %c3_i64_7 = arith.constant 3 : i64
    %21 = llvm.load %7 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_7 : i64
    scf.if %22 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %21, %c3_i64_7 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %1 : i32, !llvm.ptr
    %c3_i64_8 = arith.constant 3 : i64
    %23 = llvm.load %7 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_8 : i64
    scf.if %24 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %23, %c3_i64_8 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %25 = llvm.load %7 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_9 : i64
    scf.if %26 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %25, %c1_i64_9 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c3_i64_10 = arith.constant 3 : i64
    %27 = llvm.load %7 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c3_i64_10 : i64
    scf.if %28 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %27, %c3_i64_10 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %30 = llvm.load %7 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c3_i64_11 : i64
    scf.if %31 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %30, %c3_i64_11 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %32 = arith.extui %29 : i32 to i64
    %33 = arith.addi %32, %c0_i64 : i64
    %34 = llvm.getelementptr %12[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_12 = arith.constant 3 : i64
    %36 = llvm.load %7 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_12 : i64
    scf.if %37 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %36, %c3_i64_12 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %35, %2 : i32, !llvm.ptr
    %c1_i64_13 = arith.constant 1 : i64
    %38 = llvm.load %7 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c1_i64_13 : i64
    scf.if %39 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %38, %c1_i64_13 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_14 = arith.constant 3 : i64
    %40 = llvm.load %7 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c3_i64_14 : i64
    scf.if %41 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %40, %c3_i64_14 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %42 = arith.cmpi eq, %35, %c-1_i32 : i32
    %43 = arith.extui %42 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %44 = arith.cmpi eq, %43, %c0_i32_15 : i32
    %45 = arith.extui %44 : i1 to i32
    %c1_i64_16 = arith.constant 1 : i64
    %46 = llvm.load %7 : !llvm.ptr -> i64
    %47 = arith.cmpi ult, %46, %c1_i64_16 : i64
    scf.if %47 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %46, %c1_i64_16 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_17 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %45, %c0_i32_17 : i32
    cf.cond_br %48, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i64_18 = arith.constant 1 : i64
    %49 = llvm.load %7 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c1_i64_18 : i64
    scf.if %50 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %49, %c1_i64_18 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i32_19 = arith.constant 1 : i32
    %c3_i64_20 = arith.constant 3 : i64
    %51 = llvm.load %7 : !llvm.ptr -> i64
    %52 = arith.cmpi ult, %51, %c3_i64_20 : i64
    scf.if %52 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %51, %c3_i64_20 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_19, %3 : i32, !llvm.ptr
    %c3_i64_21 = arith.constant 3 : i64
    %53 = llvm.load %7 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c3_i64_21 : i64
    scf.if %54 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %53, %c3_i64_21 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_22 = arith.constant 1 : i64
    %56 = llvm.load %7 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c1_i64_22 : i64
    scf.if %57 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %56, %c1_i64_22 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i32_23 = arith.constant 1 : i32
    %c3_i64_24 = arith.constant 3 : i64
    %58 = llvm.load %7 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c3_i64_24 : i64
    scf.if %59 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %58, %c3_i64_24 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %60 = arith.cmpi ule, %c1_i32_23, %c31_i32 : i32
    %61 = scf.if %60 -> (i32) {
      %294 = arith.shli %55, %c1_i32_23 : i32
      scf.yield %294 : i32
    } else {
      %c0_i32_120 = arith.constant 0 : i32
      scf.yield %c0_i32_120 : i32
    }
    %c3_i64_25 = arith.constant 3 : i64
    %62 = llvm.load %7 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c3_i64_25 : i64
    scf.if %63 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %62, %c3_i64_25 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %61, %4 : i32, !llvm.ptr
    %c3_i64_26 = arith.constant 3 : i64
    %64 = llvm.load %7 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c3_i64_26 : i64
    scf.if %65 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %64, %c3_i64_26 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_27 = arith.constant 1 : i64
    %67 = llvm.load %7 : !llvm.ptr -> i64
    %68 = arith.cmpi ult, %67, %c1_i64_27 : i64
    scf.if %68 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %67, %c1_i64_27 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i32_28 = arith.constant 1 : i32
    %c3_i64_29 = arith.constant 3 : i64
    %69 = llvm.load %7 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c3_i64_29 : i64
    scf.if %70 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %69, %c3_i64_29 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %71 = arith.addi %66, %c1_i32_28 : i32
    %c3_i64_30 = arith.constant 3 : i64
    %72 = llvm.load %7 : !llvm.ptr -> i64
    %73 = arith.cmpi ult, %72, %c3_i64_30 : i64
    scf.if %73 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %72, %c3_i64_30 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %71, %5 : i32, !llvm.ptr
    %c3_i64_31 = arith.constant 3 : i64
    %74 = llvm.load %7 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c3_i64_31 : i64
    scf.if %75 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %74, %c3_i64_31 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %76 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_32 = arith.constant 3 : i64
    %77 = llvm.load %7 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c3_i64_32 : i64
    scf.if %78 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %77, %c3_i64_32 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %79 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_33 = arith.constant 3 : i64
    %80 = llvm.load %7 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_33 : i64
    scf.if %81 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %80, %c3_i64_33 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %82 = arith.cmpi ugt, %76, %79 : i32
    %83 = arith.extui %82 : i1 to i32
    %c1_i64_34 = arith.constant 1 : i64
    %84 = llvm.load %7 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c1_i64_34 : i64
    scf.if %85 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %84, %c1_i64_34 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_35 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %83, %c0_i32_35 : i32
    %87 = arith.select %86, %61, %71 : i32
    %c3_i64_36 = arith.constant 3 : i64
    %88 = llvm.load %7 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c3_i64_36 : i64
    scf.if %89 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %88, %c3_i64_36 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %87, %4 : i32, !llvm.ptr
    %c1_i64_37 = arith.constant 1 : i64
    %90 = llvm.load %7 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c1_i64_37 : i64
    scf.if %91 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %90, %c1_i64_37 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_38 = arith.constant 3 : i64
    %92 = llvm.load %7 : !llvm.ptr -> i64
    %93 = arith.cmpi ult, %92, %c3_i64_38 : i64
    scf.if %93 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %92, %c3_i64_38 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %94 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_39 = arith.constant 1 : i64
    %95 = llvm.load %7 : !llvm.ptr -> i64
    %96 = arith.cmpi ult, %95, %c1_i64_39 : i64
    scf.if %96 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %95, %c1_i64_39 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i32_40 = arith.constant 8 : i32
    %c3_i64_41 = arith.constant 3 : i64
    %97 = llvm.load %7 : !llvm.ptr -> i64
    %98 = arith.cmpi ult, %97, %c3_i64_41 : i64
    scf.if %98 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %97, %c3_i64_41 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %99 = arith.cmpi ugt, %94, %c8_i32_40 : i32
    %100 = arith.extui %99 : i1 to i32
    %c1_i64_42 = arith.constant 1 : i64
    %101 = llvm.load %7 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c1_i64_42 : i64
    scf.if %102 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %101, %c1_i64_42 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_43 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %100, %c0_i32_43 : i32
    %104 = arith.select %103, %87, %c8_i32 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %105 = llvm.load %7 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %c3_i64_44 : i64
    scf.if %106 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %105, %c3_i64_44 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %104, %4 : i32, !llvm.ptr
    %c1_i64_45 = arith.constant 1 : i64
    %107 = llvm.load %7 : !llvm.ptr -> i64
    %108 = arith.cmpi ult, %107, %c1_i64_45 : i64
    scf.if %108 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %107, %c1_i64_45 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c-1_i32_46 = arith.constant -1 : i32
    %c3_i64_47 = arith.constant 3 : i64
    %109 = llvm.load %7 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c3_i64_47 : i64
    scf.if %110 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %109, %c3_i64_47 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %111 = arith.xori %104, %c-1_i32_46 : i32
    %c1_i64_48 = arith.constant 1 : i64
    %112 = llvm.load %7 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c1_i64_48 : i64
    scf.if %113 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %112, %c1_i64_48 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c31_i32_49 = arith.constant 31 : i32
    %c3_i64_50 = arith.constant 3 : i64
    %114 = llvm.load %7 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %c3_i64_50 : i64
    scf.if %115 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %114, %c3_i64_50 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c31_i32_51 = arith.constant 31 : i32
    %116 = arith.cmpi ule, %c31_i32_49, %c31_i32_51 : i32
    %117 = scf.if %116 -> (i32) {
      %294 = arith.shrui %111, %c31_i32_49 : i32
      scf.yield %294 : i32
    } else {
      %c0_i32_120 = arith.constant 0 : i32
      scf.yield %c0_i32_120 : i32
    }
    %c3_i64_52 = arith.constant 3 : i64
    %118 = llvm.load %7 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_52 : i64
    scf.if %119 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %118, %c3_i64_52 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %117, %5 : i32, !llvm.ptr
    %c1_i64_53 = arith.constant 1 : i64
    %120 = llvm.load %7 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c1_i64_53 : i64
    scf.if %121 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %120, %c1_i64_53 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c1_i64_54 = arith.constant 1 : i64
    %122 = llvm.load %7 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %c1_i64_54 : i64
    scf.if %123 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %122, %c1_i64_54 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c3_i64_55 = arith.constant 3 : i64
    %124 = llvm.load %7 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c3_i64_55 : i64
    scf.if %125 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %124, %c3_i64_55 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %126 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_56 = arith.constant 1 : i64
    %127 = llvm.load %7 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c1_i64_56 : i64
    scf.if %128 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %127, %c1_i64_56 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_57 = arith.constant 0 : i32
    %129 = arith.cmpi ne, %126, %c0_i32_57 : i32
    cf.cond_br %129, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c1_i64_58 = arith.constant 1 : i64
    %130 = llvm.load %7 : !llvm.ptr -> i64
    %131 = arith.cmpi ult, %130, %c1_i64_58 : i64
    scf.if %131 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %130, %c1_i64_58 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_59 = arith.constant 0 : i32
    %c1_i64_60 = arith.constant 1 : i64
    %132 = llvm.load %7 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c1_i64_60 : i64
    scf.if %133 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %132, %c1_i64_60 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_61 = arith.constant 0 : i32
    %c6_i64 = arith.constant 6 : i64
    %134 = llvm.load %7 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c6_i64 : i64
    scf.if %135 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %134, %c6_i64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    call @f55(%arg0, %c0_i32_59, %c0_i32_61) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_62 = arith.constant 0 : i64
    %136 = llvm.load %7 : !llvm.ptr -> i64
    %137 = arith.cmpi ult, %136, %c0_i64_62 : i64
    scf.if %137 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %136, %c0_i64_62 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %c3_i64_63 = arith.constant 3 : i64
    %138 = llvm.load %7 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %c3_i64_63 : i64
    scf.if %139 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %138, %c3_i64_63 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_64 = arith.constant 3 : i64
    %141 = llvm.load %7 : !llvm.ptr -> i64
    %142 = arith.cmpi ult, %141, %c3_i64_64 : i64
    scf.if %142 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %141, %c3_i64_64 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %143 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_65 = arith.constant 3 : i64
    %144 = llvm.load %7 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c3_i64_65 : i64
    scf.if %145 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %144, %c3_i64_65 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %146 = arith.extui %140 : i32 to i64
    %147 = arith.addi %146, %c24_i64 : i64
    %148 = llvm.getelementptr %12[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %148 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_66 = arith.constant 3 : i64
    %149 = llvm.load %7 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c3_i64_66 : i64
    scf.if %150 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %149, %c3_i64_66 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %151 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_67 = arith.constant 1 : i64
    %152 = llvm.load %7 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c1_i64_67 : i64
    scf.if %153 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %152, %c1_i64_67 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i32_68 = arith.constant 8 : i32
    %c3_i64_69 = arith.constant 3 : i64
    %154 = llvm.load %7 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c3_i64_69 : i64
    scf.if %155 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %154, %c3_i64_69 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %156 = arith.addi %151, %c8_i32_68 : i32
    %c3_i64_70 = arith.constant 3 : i64
    %157 = llvm.load %7 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c3_i64_70 : i64
    scf.if %158 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %157, %c3_i64_70 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %159 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_71 = arith.constant 3 : i64
    %160 = llvm.load %7 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_71 : i64
    scf.if %161 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %160, %c3_i64_71 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %162 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_72 = arith.constant 3 : i64
    %163 = llvm.load %7 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c3_i64_72 : i64
    scf.if %164 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %163, %c3_i64_72 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %165 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_73 = arith.constant 1 : i64
    %166 = llvm.load %7 : !llvm.ptr -> i64
    %167 = arith.cmpi ult, %166, %c1_i64_73 : i64
    scf.if %167 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %166, %c1_i64_73 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c20_i32 = arith.constant 20 : i32
    %c3_i64_74 = arith.constant 3 : i64
    %168 = llvm.load %7 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c3_i64_74 : i64
    scf.if %169 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %168, %c3_i64_74 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %170 = arith.addi %165, %c20_i32 : i32
    %c6_i64_75 = arith.constant 6 : i64
    %171 = llvm.load %7 : !llvm.ptr -> i64
    %172 = arith.cmpi ult, %171, %c6_i64_75 : i64
    scf.if %172 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %171, %c6_i64_75 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    call @f56(%arg0, %156, %159, %162, %170) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %c1_i64_76 = arith.constant 1 : i64
    %173 = llvm.load %7 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c1_i64_76 : i64
    scf.if %174 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %173, %c1_i64_76 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c3_i64_77 = arith.constant 3 : i64
    %175 = llvm.load %7 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c3_i64_77 : i64
    scf.if %176 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %175, %c3_i64_77 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %177 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_78 = arith.constant 3 : i64
    %178 = llvm.load %7 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c3_i64_78 : i64
    scf.if %179 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %178, %c3_i64_78 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %180 = arith.extui %177 : i32 to i64
    %181 = arith.addi %180, %c8_i64 : i64
    %182 = llvm.getelementptr %12[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %183 = llvm.load volatile %182 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_79 = arith.constant 3 : i64
    %184 = llvm.load %7 : !llvm.ptr -> i64
    %185 = arith.cmpi ult, %184, %c3_i64_79 : i64
    scf.if %185 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %184, %c3_i64_79 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_80 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %183, %c0_i32_80 : i32
    %187 = arith.extui %186 : i1 to i32
    %c1_i64_81 = arith.constant 1 : i64
    %188 = llvm.load %7 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c1_i64_81 : i64
    scf.if %189 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %188, %c1_i64_81 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_82 = arith.constant 0 : i32
    %190 = arith.cmpi ne, %187, %c0_i32_82 : i32
    cf.cond_br %190, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %c3_i64_83 = arith.constant 3 : i64
    %191 = llvm.load %7 : !llvm.ptr -> i64
    %192 = arith.cmpi ult, %191, %c3_i64_83 : i64
    scf.if %192 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %191, %c3_i64_83 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %193 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_84 = arith.constant 3 : i64
    %194 = llvm.load %7 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c3_i64_84 : i64
    scf.if %195 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %194, %c3_i64_84 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %196 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_85 = arith.constant 3 : i64
    %197 = llvm.load %7 : !llvm.ptr -> i64
    %198 = arith.cmpi ult, %197, %c3_i64_85 : i64
    scf.if %198 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %197, %c3_i64_85 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %199 = arith.extui %193 : i32 to i64
    %200 = arith.addi %199, %c28_i64 : i64
    %201 = llvm.getelementptr %12[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %196, %201 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_86 = arith.constant 3 : i64
    %202 = llvm.load %7 : !llvm.ptr -> i64
    %203 = arith.cmpi ult, %202, %c3_i64_86 : i64
    scf.if %203 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %202, %c3_i64_86 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %204 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_87 = arith.constant 3 : i64
    %205 = llvm.load %7 : !llvm.ptr -> i64
    %206 = arith.cmpi ult, %205, %c3_i64_87 : i64
    scf.if %206 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %205, %c3_i64_87 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %207 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_88 = arith.constant 3 : i64
    %208 = llvm.load %7 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c3_i64_88 : i64
    scf.if %209 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %208, %c3_i64_88 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %210 = arith.extui %207 : i32 to i64
    %211 = arith.addi %210, %c4_i64 : i64
    %212 = llvm.getelementptr %12[%211] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %213 = llvm.load volatile %212 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_89 = arith.constant 3 : i64
    %214 = llvm.load %7 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c3_i64_89 : i64
    scf.if %215 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %214, %c3_i64_89 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %216 = arith.extui %204 : i32 to i64
    %217 = arith.addi %216, %c20_i64 : i64
    %218 = llvm.getelementptr %12[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %213, %218 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_90 = arith.constant 1 : i64
    %219 = llvm.load %7 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c1_i64_90 : i64
    scf.if %220 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %219, %c1_i64_90 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c1_i64_91 = arith.constant 1 : i64
    %221 = llvm.load %7 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c1_i64_91 : i64
    scf.if %222 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %221, %c1_i64_91 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i32_92 = arith.constant 0 : i32
    %c3_i64_93 = arith.constant 3 : i64
    %223 = llvm.load %7 : !llvm.ptr -> i64
    %224 = arith.cmpi ult, %223, %c3_i64_93 : i64
    scf.if %224 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %223, %c3_i64_93 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_92, %3 : i32, !llvm.ptr
    %c1_i64_94 = arith.constant 1 : i64
    %225 = llvm.load %7 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c1_i64_94 : i64
    scf.if %226 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %225, %c1_i64_94 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %c3_i64_95 = arith.constant 3 : i64
    %227 = llvm.load %7 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %c3_i64_95 : i64
    scf.if %228 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %227, %c3_i64_95 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %229 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_96 = arith.constant 3 : i64
    %230 = llvm.load %7 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c3_i64_96 : i64
    scf.if %231 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %230, %c3_i64_96 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %232 = arith.extui %229 : i32 to i64
    %233 = arith.addi %232, %c12_i64 : i64
    %234 = llvm.getelementptr %12[%233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %235 = llvm.load volatile %234 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_97 = arith.constant 3 : i64
    %236 = llvm.load %7 : !llvm.ptr -> i64
    %237 = arith.cmpi ult, %236, %c3_i64_97 : i64
    scf.if %237 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %236, %c3_i64_97 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %235, %2 : i32, !llvm.ptr
    %c3_i64_98 = arith.constant 3 : i64
    %238 = llvm.load %7 : !llvm.ptr -> i64
    %239 = arith.cmpi ult, %238, %c3_i64_98 : i64
    scf.if %239 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %238, %c3_i64_98 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %240 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_99 = arith.constant 3 : i64
    %241 = llvm.load %7 : !llvm.ptr -> i64
    %242 = arith.cmpi ult, %241, %c3_i64_99 : i64
    scf.if %242 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %241, %c3_i64_99 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %243 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_100 = arith.constant 3 : i64
    %244 = llvm.load %7 : !llvm.ptr -> i64
    %245 = arith.cmpi ult, %244, %c3_i64_100 : i64
    scf.if %245 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %244, %c3_i64_100 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c0_i64_101 = arith.constant 0 : i64
    %246 = arith.extui %240 : i32 to i64
    %247 = arith.addi %246, %c0_i64_101 : i64
    %248 = llvm.getelementptr %12[%247] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %243, %248 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_102 = arith.constant 3 : i64
    %249 = llvm.load %7 : !llvm.ptr -> i64
    %250 = arith.cmpi ult, %249, %c3_i64_102 : i64
    scf.if %250 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %249, %c3_i64_102 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %251 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_103 = arith.constant 3 : i64
    %252 = llvm.load %7 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c3_i64_103 : i64
    scf.if %253 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %252, %c3_i64_103 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %254 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_104 = arith.constant 3 : i64
    %255 = llvm.load %7 : !llvm.ptr -> i64
    %256 = arith.cmpi ult, %255, %c3_i64_104 : i64
    scf.if %256 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %255, %c3_i64_104 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c4_i64_105 = arith.constant 4 : i64
    %257 = arith.extui %251 : i32 to i64
    %258 = arith.addi %257, %c4_i64_105 : i64
    %259 = llvm.getelementptr %12[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %254, %259 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_106 = arith.constant 3 : i64
    %260 = llvm.load %7 : !llvm.ptr -> i64
    %261 = arith.cmpi ult, %260, %c3_i64_106 : i64
    scf.if %261 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %260, %c3_i64_106 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %262 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_107 = arith.constant 1 : i64
    %263 = llvm.load %7 : !llvm.ptr -> i64
    %264 = arith.cmpi ult, %263, %c1_i64_107 : i64
    scf.if %264 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %263, %c1_i64_107 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c32_i32_108 = arith.constant 32 : i32
    %c3_i64_109 = arith.constant 3 : i64
    %265 = llvm.load %7 : !llvm.ptr -> i64
    %266 = arith.cmpi ult, %265, %c3_i64_109 : i64
    scf.if %266 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %265, %c3_i64_109 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %267 = arith.addi %262, %c32_i32_108 : i32
    %c3_i64_110 = arith.constant 3 : i64
    %268 = llvm.load %7 : !llvm.ptr -> i64
    %269 = arith.cmpi ult, %268, %c3_i64_110 : i64
    scf.if %269 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %268, %c3_i64_110 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    llvm.store %267, %9 : i32, !llvm.ptr
    %c1_i64_111 = arith.constant 1 : i64
    %270 = llvm.load %7 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %270, %c1_i64_111 : i64
    scf.if %271 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %270, %c1_i64_111 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %c3_i64_112 = arith.constant 3 : i64
    %272 = llvm.load %7 : !llvm.ptr -> i64
    %273 = arith.cmpi ult, %272, %c3_i64_112 : i64
    scf.if %273 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %272, %c3_i64_112 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %274 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_113 = arith.constant 3 : i64
    %275 = llvm.load %7 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_113 : i64
    scf.if %276 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %275, %c3_i64_113 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c12_i64_114 = arith.constant 12 : i64
    %277 = arith.extui %274 : i32 to i64
    %278 = arith.addi %277, %c12_i64_114 : i64
    %279 = llvm.getelementptr %12[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_115 = arith.constant 3 : i64
    %281 = llvm.load %7 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c3_i64_115 : i64
    scf.if %282 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %281, %c3_i64_115 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %283 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_116 = arith.constant 3 : i64
    %284 = llvm.load %7 : !llvm.ptr -> i64
    %285 = arith.cmpi ult, %284, %c3_i64_116 : i64
    scf.if %285 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %284, %c3_i64_116 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %286 = arith.extui %283 : i32 to i64
    %287 = arith.addi %286, %c16_i64 : i64
    %288 = llvm.getelementptr %12[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %289 = llvm.load volatile %288 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c6_i64_117 = arith.constant 6 : i64
    %290 = llvm.load %7 : !llvm.ptr -> i64
    %291 = arith.cmpi ult, %290, %c6_i64_117 : i64
    scf.if %291 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %290, %c6_i64_117 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    call @f55(%arg0, %280, %289) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_118 = arith.constant 0 : i64
    %292 = llvm.load %7 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c0_i64_118 : i64
    scf.if %293 {
      %c20_i32_120 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_120) : (i32) -> ()
    } else {
      %294 = arith.subi %292, %c0_i64_118 : i64
      llvm.store %294, %7 : i64, !llvm.ptr
    }
    %c9_i32_119 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_119) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f58(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c3_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %14 = arith.subi %4, %c3_i64 : i64
      llvm.store %14, %3 : i64, !llvm.ptr
    }
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64_2 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %14 = arith.subi %7, %c3_i64_2 : i64
      llvm.store %14, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c6_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %14 = arith.subi %10, %c6_i64 : i64
      llvm.store %14, %3 : i64, !llvm.ptr
    }
    call @f7(%arg0, %6, %9) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64 = arith.constant 0 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c0_i64 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %14 = arith.subi %12, %c0_i64 : i64
      llvm.store %14, %3 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f59(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_8 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %9, %10 : i64, !llvm.ptr
    %11 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %16 = llvm.load %10 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %16, %c3_i64 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %18 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %19 = llvm.load %10 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c1_i64 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %19, %c1_i64 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_9 = arith.constant 3 : i64
    %21 = llvm.load %10 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_9 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %21, %c3_i64_9 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %23 = arith.subi %18, %c16_i32 : i32
    %c3_i64_10 = arith.constant 3 : i64
    %24 = llvm.load %10 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c3_i64_10 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %24, %c3_i64_10 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %23, %2 : i32, !llvm.ptr
    %c3_i64_11 = arith.constant 3 : i64
    %26 = llvm.load %10 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c3_i64_11 : i64
    scf.if %27 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %26, %c3_i64_11 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %23, %12 : i32, !llvm.ptr
    %c1_i64_12 = arith.constant 1 : i64
    %28 = llvm.load %10 : !llvm.ptr -> i64
    %29 = arith.cmpi ult, %28, %c1_i64_12 : i64
    scf.if %29 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %28, %c1_i64_12 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1_i64_13 = arith.constant 1 : i64
    %30 = llvm.load %10 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c1_i64_13 : i64
    scf.if %31 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %30, %c1_i64_13 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1_i64_14 = arith.constant 1 : i64
    %32 = llvm.load %10 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c1_i64_14 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %32, %c1_i64_14 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1_i64_15 = arith.constant 1 : i64
    %34 = llvm.load %10 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c1_i64_15 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %34, %c1_i64_15 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1_i64_16 = arith.constant 1 : i64
    %36 = llvm.load %10 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c1_i64_16 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %36, %c1_i64_16 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c3_i64_17 = arith.constant 3 : i64
    %38 = llvm.load %10 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_17 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %38, %c3_i64_17 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_18 = arith.constant 3 : i64
    %41 = llvm.load %10 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c3_i64_18 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %41, %c3_i64_18 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %43 = arith.extui %40 : i32 to i64
    %44 = arith.addi %43, %c4_i64 : i64
    %45 = llvm.getelementptr %15[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_19 = arith.constant 3 : i64
    %47 = llvm.load %10 : !llvm.ptr -> i64
    %48 = arith.cmpi ult, %47, %c3_i64_19 : i64
    scf.if %48 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %47, %c3_i64_19 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %46, %3 : i32, !llvm.ptr
    %c3_i64_20 = arith.constant 3 : i64
    %49 = llvm.load %10 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c3_i64_20 : i64
    scf.if %50 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %49, %c3_i64_20 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_21 = arith.constant 0 : i32
    %51 = arith.cmpi eq, %46, %c0_i32_21 : i32
    %52 = arith.extui %51 : i1 to i32
    %c1_i64_22 = arith.constant 1 : i64
    %53 = llvm.load %10 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c1_i64_22 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %53, %c1_i64_22 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_23 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %52, %c0_i32_23 : i32
    cf.cond_br %55, ^bb7, ^bb8
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %c3_i64_24 = arith.constant 3 : i64
    %56 = llvm.load %10 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c3_i64_24 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %56, %c3_i64_24 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_25 = arith.constant 3 : i64
    %59 = llvm.load %10 : !llvm.ptr -> i64
    %60 = arith.cmpi ult, %59, %c3_i64_25 : i64
    scf.if %60 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %59, %c3_i64_25 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_26 = arith.constant 3 : i64
    %62 = llvm.load %10 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c3_i64_26 : i64
    scf.if %63 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %62, %c3_i64_26 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %64 = arith.extui %61 : i32 to i64
    %65 = arith.addi %64, %c0_i64 : i64
    %66 = llvm.getelementptr %15[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_27 = arith.constant 3 : i64
    %68 = llvm.load %10 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c3_i64_27 : i64
    scf.if %69 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %68, %c3_i64_27 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i64_28 = arith.constant 0 : i64
    %70 = arith.extui %58 : i32 to i64
    %71 = arith.addi %70, %c0_i64_28 : i64
    %72 = llvm.getelementptr %15[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %67, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_29 = arith.constant 3 : i64
    %73 = llvm.load %10 : !llvm.ptr -> i64
    %74 = arith.cmpi ult, %73, %c3_i64_29 : i64
    scf.if %74 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %73, %c3_i64_29 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %75 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_30 = arith.constant 1 : i64
    %76 = llvm.load %10 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c1_i64_30 : i64
    scf.if %77 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %76, %c1_i64_30 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_31 = arith.constant 3 : i64
    %78 = llvm.load %10 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c3_i64_31 : i64
    scf.if %79 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %78, %c3_i64_31 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %80 = arith.addi %75, %c8_i32 : i32
    %c3_i64_32 = arith.constant 3 : i64
    %81 = llvm.load %10 : !llvm.ptr -> i64
    %82 = arith.cmpi ult, %81, %c3_i64_32 : i64
    scf.if %82 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %81, %c3_i64_32 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_33 = arith.constant 1 : i64
    %84 = llvm.load %10 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c1_i64_33 : i64
    scf.if %85 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %84, %c1_i64_33 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c8_i32_34 = arith.constant 8 : i32
    %c3_i64_35 = arith.constant 3 : i64
    %86 = llvm.load %10 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %c3_i64_35 : i64
    scf.if %87 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %86, %c3_i64_35 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %88 = arith.addi %83, %c8_i32_34 : i32
    %c3_i64_36 = arith.constant 3 : i64
    %89 = llvm.load %10 : !llvm.ptr -> i64
    %90 = arith.cmpi ult, %89, %c3_i64_36 : i64
    scf.if %90 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %89, %c3_i64_36 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i64_37 = arith.constant 0 : i64
    %91 = arith.extui %88 : i32 to i64
    %92 = arith.addi %91, %c0_i64_37 : i64
    %93 = llvm.getelementptr %15[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_38 = arith.constant 3 : i64
    %95 = llvm.load %10 : !llvm.ptr -> i64
    %96 = arith.cmpi ult, %95, %c3_i64_38 : i64
    scf.if %96 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %95, %c3_i64_38 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i64_39 = arith.constant 0 : i64
    %97 = arith.extui %80 : i32 to i64
    %98 = arith.addi %97, %c0_i64_39 : i64
    %99 = llvm.getelementptr %15[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %94, %99 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_40 = arith.constant 3 : i64
    %100 = llvm.load %10 : !llvm.ptr -> i64
    %101 = arith.cmpi ult, %100, %c3_i64_40 : i64
    scf.if %101 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %100, %c3_i64_40 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_41 = arith.constant 1 : i64
    %103 = llvm.load %10 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %c1_i64_41 : i64
    scf.if %104 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %103, %c1_i64_41 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c16_i32_42 = arith.constant 16 : i32
    %c3_i64_43 = arith.constant 3 : i64
    %105 = llvm.load %10 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %c3_i64_43 : i64
    scf.if %106 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %105, %c3_i64_43 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %107 = arith.addi %102, %c16_i32_42 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %108 = llvm.load %10 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %108, %c3_i64_44 : i64
    scf.if %109 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %108, %c3_i64_44 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %107, %12 : i32, !llvm.ptr
    %c1_i64_45 = arith.constant 1 : i64
    %110 = llvm.load %10 : !llvm.ptr -> i64
    %111 = arith.cmpi ult, %110, %c1_i64_45 : i64
    scf.if %111 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %110, %c1_i64_45 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb6, ^bb25
    %c3_i64_46 = arith.constant 3 : i64
    %112 = llvm.load %10 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c3_i64_46 : i64
    scf.if %113 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %112, %c3_i64_46 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %114 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_47 = arith.constant 3 : i64
    %115 = llvm.load %10 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c3_i64_47 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %115, %c3_i64_47 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %117 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %118 = llvm.load %10 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c6_i64 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %118, %c6_i64 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    call @f55(%arg0, %114, %117) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64_48 = arith.constant 0 : i64
    %120 = llvm.load %10 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c0_i64_48 : i64
    scf.if %121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %120, %c0_i64_48 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb7, ^bb26
    %c3_i64_49 = arith.constant 3 : i64
    %122 = llvm.load %10 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %c3_i64_49 : i64
    scf.if %123 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %122, %c3_i64_49 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %124 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_50 = arith.constant 1 : i64
    %125 = llvm.load %10 : !llvm.ptr -> i64
    %126 = arith.cmpi ult, %125, %c1_i64_50 : i64
    scf.if %126 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %125, %c1_i64_50 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_51 = arith.constant 0 : i32
    %c3_i64_52 = arith.constant 3 : i64
    %127 = llvm.load %10 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c3_i64_52 : i64
    scf.if %128 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %127, %c3_i64_52 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %129 = arith.extui %124 : i32 to i64
    %130 = arith.addi %129, %c8_i64 : i64
    %131 = llvm.getelementptr %15[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_51, %131 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_53 = arith.constant 3 : i64
    %132 = llvm.load %10 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c3_i64_53 : i64
    scf.if %133 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %132, %c3_i64_53 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %134 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_54 = arith.constant 3 : i64
    %135 = llvm.load %10 : !llvm.ptr -> i64
    %136 = arith.cmpi ult, %135, %c3_i64_54 : i64
    scf.if %136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %135, %c3_i64_54 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %137 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_55 = arith.constant 3 : i64
    %138 = llvm.load %10 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %c3_i64_55 : i64
    scf.if %139 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %138, %c3_i64_55 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c4_i64_56 = arith.constant 4 : i64
    %140 = arith.extui %134 : i32 to i64
    %141 = arith.addi %140, %c4_i64_56 : i64
    %142 = llvm.getelementptr %15[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %137, %142 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_57 = arith.constant 3 : i64
    %143 = llvm.load %10 : !llvm.ptr -> i64
    %144 = arith.cmpi ult, %143, %c3_i64_57 : i64
    scf.if %144 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %143, %c3_i64_57 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %145 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_58 = arith.constant 3 : i64
    %146 = llvm.load %10 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c3_i64_58 : i64
    scf.if %147 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %146, %c3_i64_58 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %148 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_59 = arith.constant 3 : i64
    %149 = llvm.load %10 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c3_i64_59 : i64
    scf.if %150 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %149, %c3_i64_59 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i64_60 = arith.constant 0 : i64
    %151 = arith.extui %145 : i32 to i64
    %152 = arith.addi %151, %c0_i64_60 : i64
    %153 = llvm.getelementptr %15[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %148, %153 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_61 = arith.constant 3 : i64
    %154 = llvm.load %10 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c3_i64_61 : i64
    scf.if %155 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %154, %c3_i64_61 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_62 = arith.constant 1 : i64
    %157 = llvm.load %10 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c1_i64_62 : i64
    scf.if %158 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %157, %c1_i64_62 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1049036_i32 = arith.constant 1049036 : i32
    %c3_i64_63 = arith.constant 3 : i64
    %159 = llvm.load %10 : !llvm.ptr -> i64
    %160 = arith.cmpi ult, %159, %c3_i64_63 : i64
    scf.if %160 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %159, %c3_i64_63 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %161 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64_64 = arith.constant 6 : i64
    %162 = llvm.load %10 : !llvm.ptr -> i64
    %163 = arith.cmpi ult, %162, %c6_i64_64 : i64
    scf.if %163 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %162, %c6_i64_64 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %164 = call @f66(%arg0, %156, %c1049036_i32, %161) : (!llvm.ptr, i32, i32, i32) -> i32
    %c3_i64_65 = arith.constant 3 : i64
    %165 = llvm.load %10 : !llvm.ptr -> i64
    %166 = arith.cmpi ult, %165, %c3_i64_65 : i64
    scf.if %166 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %165, %c3_i64_65 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_66 = arith.constant 0 : i32
    %167 = arith.cmpi eq, %164, %c0_i32_66 : i32
    %168 = arith.extui %167 : i1 to i32
    %c1_i64_67 = arith.constant 1 : i64
    %169 = llvm.load %10 : !llvm.ptr -> i64
    %170 = arith.cmpi ult, %169, %c1_i64_67 : i64
    scf.if %170 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %169, %c1_i64_67 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_68 = arith.constant 0 : i32
    %171 = arith.cmpi ne, %168, %c0_i32_68 : i32
    cf.cond_br %171, ^bb3, ^bb27
  ^bb6:  // pred: ^bb20
    %c1_i64_69 = arith.constant 1 : i64
    %172 = llvm.load %10 : !llvm.ptr -> i64
    %173 = arith.cmpi ult, %172, %c1_i64_69 : i64
    scf.if %173 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %172, %c1_i64_69 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_70 = arith.constant 0 : i32
    %c3_i64_71 = arith.constant 3 : i64
    %174 = llvm.load %10 : !llvm.ptr -> i64
    %175 = arith.cmpi ult, %174, %c3_i64_71 : i64
    scf.if %175 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %174, %c3_i64_71 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_70, %5 : i32, !llvm.ptr
    %c3_i64_72 = arith.constant 3 : i64
    %176 = llvm.load %10 : !llvm.ptr -> i64
    %177 = arith.cmpi ult, %176, %c3_i64_72 : i64
    scf.if %177 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %176, %c3_i64_72 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %178 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_73 = arith.constant 1 : i64
    %179 = llvm.load %10 : !llvm.ptr -> i64
    %180 = arith.cmpi ult, %179, %c1_i64_73 : i64
    scf.if %180 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %179, %c1_i64_73 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_74 = arith.constant 0 : i32
    %c3_i64_75 = arith.constant 3 : i64
    %181 = llvm.load %10 : !llvm.ptr -> i64
    %182 = arith.cmpi ult, %181, %c3_i64_75 : i64
    scf.if %182 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %181, %c3_i64_75 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %183 = arith.cmpi slt, %178, %c0_i32_74 : i32
    %184 = arith.extui %183 : i1 to i32
    %c1_i64_76 = arith.constant 1 : i64
    %185 = llvm.load %10 : !llvm.ptr -> i64
    %186 = arith.cmpi ult, %185, %c1_i64_76 : i64
    scf.if %186 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %185, %c1_i64_76 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_77 = arith.constant 0 : i32
    %187 = arith.cmpi ne, %184, %c0_i32_77 : i32
    cf.cond_br %187, ^bb4, ^bb25
  ^bb7:  // 4 preds: ^bb1, ^bb21, ^bb22, ^bb24
    %c1_i64_78 = arith.constant 1 : i64
    %188 = llvm.load %10 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c1_i64_78 : i64
    scf.if %189 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %188, %c1_i64_78 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1_i32_79 = arith.constant 1 : i32
    %c3_i64_80 = arith.constant 3 : i64
    %190 = llvm.load %10 : !llvm.ptr -> i64
    %191 = arith.cmpi ult, %190, %c3_i64_80 : i64
    scf.if %191 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %190, %c3_i64_80 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_79, %7 : i32, !llvm.ptr
    %c1_i64_81 = arith.constant 1 : i64
    %192 = llvm.load %10 : !llvm.ptr -> i64
    %193 = arith.cmpi ult, %192, %c1_i64_81 : i64
    scf.if %193 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %192, %c1_i64_81 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_82 = arith.constant 0 : i32
    %c3_i64_83 = arith.constant 3 : i64
    %194 = llvm.load %10 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c3_i64_83 : i64
    scf.if %195 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %194, %c3_i64_83 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_82, %3 : i32, !llvm.ptr
    %c1_i64_84 = arith.constant 1 : i64
    %196 = llvm.load %10 : !llvm.ptr -> i64
    %197 = arith.cmpi ult, %196, %c1_i64_84 : i64
    scf.if %197 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %196, %c1_i64_84 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb8:  // pred: ^bb1
    %c3_i64_85 = arith.constant 3 : i64
    %198 = llvm.load %10 : !llvm.ptr -> i64
    %199 = arith.cmpi ult, %198, %c3_i64_85 : i64
    scf.if %199 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %198, %c3_i64_85 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %200 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_86 = arith.constant 3 : i64
    %201 = llvm.load %10 : !llvm.ptr -> i64
    %202 = arith.cmpi ult, %201, %c3_i64_86 : i64
    scf.if %202 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %201, %c3_i64_86 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i64_87 = arith.constant 0 : i64
    %203 = arith.extui %200 : i32 to i64
    %204 = arith.addi %203, %c0_i64_87 : i64
    %205 = llvm.getelementptr %15[%204] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %206 = llvm.load volatile %205 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_88 = arith.constant 3 : i64
    %207 = llvm.load %10 : !llvm.ptr -> i64
    %208 = arith.cmpi ult, %207, %c3_i64_88 : i64
    scf.if %208 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %207, %c3_i64_88 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %206, %4 : i32, !llvm.ptr
    %c3_i64_89 = arith.constant 3 : i64
    %209 = llvm.load %10 : !llvm.ptr -> i64
    %210 = arith.cmpi ult, %209, %c3_i64_89 : i64
    scf.if %210 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %209, %c3_i64_89 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %211 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_90 = arith.constant 1 : i64
    %212 = llvm.load %10 : !llvm.ptr -> i64
    %213 = arith.cmpi ult, %212, %c1_i64_90 : i64
    scf.if %213 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %212, %c1_i64_90 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c3_i32 = arith.constant 3 : i32
    %c3_i64_91 = arith.constant 3 : i64
    %214 = llvm.load %10 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c3_i64_91 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %214, %c3_i64_91 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %216 = arith.andi %211, %c3_i32 : i32
    %c3_i64_92 = arith.constant 3 : i64
    %217 = llvm.load %10 : !llvm.ptr -> i64
    %218 = arith.cmpi ult, %217, %c3_i64_92 : i64
    scf.if %218 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %217, %c3_i64_92 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %216, %5 : i32, !llvm.ptr
    %c1_i64_93 = arith.constant 1 : i64
    %219 = llvm.load %10 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c1_i64_93 : i64
    scf.if %220 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %219, %c1_i64_93 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1_i64_94 = arith.constant 1 : i64
    %221 = llvm.load %10 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c1_i64_94 : i64
    scf.if %222 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %221, %c1_i64_94 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c3_i64_95 = arith.constant 3 : i64
    %223 = llvm.load %10 : !llvm.ptr -> i64
    %224 = arith.cmpi ult, %223, %c3_i64_95 : i64
    scf.if %224 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %223, %c3_i64_95 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %225 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_96 = arith.constant 1 : i64
    %226 = llvm.load %10 : !llvm.ptr -> i64
    %227 = arith.cmpi ult, %226, %c1_i64_96 : i64
    scf.if %227 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %226, %c1_i64_96 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c3_i64_97 = arith.constant 3 : i64
    %228 = llvm.load %10 : !llvm.ptr -> i64
    %229 = arith.cmpi ult, %228, %c3_i64_97 : i64
    scf.if %229 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %228, %c3_i64_97 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %230 = arith.cmpi uge, %225, %c4_i32 : i32
    %231 = arith.extui %230 : i1 to i32
    %c1_i64_98 = arith.constant 1 : i64
    %232 = llvm.load %10 : !llvm.ptr -> i64
    %233 = arith.cmpi ult, %232, %c1_i64_98 : i64
    scf.if %233 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %232, %c1_i64_98 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_99 = arith.constant 0 : i32
    %234 = arith.cmpi ne, %231, %c0_i32_99 : i32
    cf.cond_br %234, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %c1_i64_100 = arith.constant 1 : i64
    %235 = llvm.load %10 : !llvm.ptr -> i64
    %236 = arith.cmpi ult, %235, %c1_i64_100 : i64
    scf.if %236 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %235, %c1_i64_100 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c3_i64_101 = arith.constant 3 : i64
    %237 = llvm.load %10 : !llvm.ptr -> i64
    %238 = arith.cmpi ult, %237, %c3_i64_101 : i64
    scf.if %238 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %237, %c3_i64_101 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %239 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_102 = arith.constant 3 : i64
    %240 = llvm.load %10 : !llvm.ptr -> i64
    %241 = arith.cmpi ult, %240, %c3_i64_102 : i64
    scf.if %241 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %240, %c3_i64_102 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_103 = arith.constant 0 : i32
    %242 = arith.cmpi eq, %239, %c0_i32_103 : i32
    %243 = arith.extui %242 : i1 to i32
    %c1_i64_104 = arith.constant 1 : i64
    %244 = llvm.load %10 : !llvm.ptr -> i64
    %245 = arith.cmpi ult, %244, %c1_i64_104 : i64
    scf.if %245 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %244, %c1_i64_104 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_105 = arith.constant 0 : i32
    %246 = arith.cmpi ne, %243, %c0_i32_105 : i32
    cf.cond_br %246, ^bb15, ^bb16
  ^bb10:  // pred: ^bb8
    %c3_i64_106 = arith.constant 3 : i64
    %247 = llvm.load %10 : !llvm.ptr -> i64
    %248 = arith.cmpi ult, %247, %c3_i64_106 : i64
    scf.if %248 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %247, %c3_i64_106 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %249 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_107 = arith.constant 1 : i64
    %250 = llvm.load %10 : !llvm.ptr -> i64
    %251 = arith.cmpi ult, %250, %c1_i64_107 : i64
    scf.if %251 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %250, %c1_i64_107 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c28_i32 = arith.constant 28 : i32
    %c3_i64_108 = arith.constant 3 : i64
    %252 = llvm.load %10 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c3_i64_108 : i64
    scf.if %253 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %252, %c3_i64_108 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %254 = arith.addi %249, %c28_i32 : i32
    %c3_i64_109 = arith.constant 3 : i64
    %255 = llvm.load %10 : !llvm.ptr -> i64
    %256 = arith.cmpi ult, %255, %c3_i64_109 : i64
    scf.if %256 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %255, %c3_i64_109 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %254, %7 : i32, !llvm.ptr
    %c3_i64_110 = arith.constant 3 : i64
    %257 = llvm.load %10 : !llvm.ptr -> i64
    %258 = arith.cmpi ult, %257, %c3_i64_110 : i64
    scf.if %258 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %257, %c3_i64_110 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %259 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_111 = arith.constant 1 : i64
    %260 = llvm.load %10 : !llvm.ptr -> i64
    %261 = arith.cmpi ult, %260, %c1_i64_111 : i64
    scf.if %261 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %260, %c1_i64_111 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c-4_i32 = arith.constant -4 : i32
    %c3_i64_112 = arith.constant 3 : i64
    %262 = llvm.load %10 : !llvm.ptr -> i64
    %263 = arith.cmpi ult, %262, %c3_i64_112 : i64
    scf.if %263 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %262, %c3_i64_112 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %264 = arith.andi %259, %c-4_i32 : i32
    %c3_i64_113 = arith.constant 3 : i64
    %265 = llvm.load %10 : !llvm.ptr -> i64
    %266 = arith.cmpi ult, %265, %c3_i64_113 : i64
    scf.if %266 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %265, %c3_i64_113 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %264, %8 : i32, !llvm.ptr
    %c1_i64_114 = arith.constant 1 : i64
    %267 = llvm.load %10 : !llvm.ptr -> i64
    %268 = arith.cmpi ult, %267, %c1_i64_114 : i64
    scf.if %268 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %267, %c1_i64_114 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_115 = arith.constant 0 : i32
    %c3_i64_116 = arith.constant 3 : i64
    %269 = llvm.load %10 : !llvm.ptr -> i64
    %270 = arith.cmpi ult, %269, %c3_i64_116 : i64
    scf.if %270 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %269, %c3_i64_116 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_115, %3 : i32, !llvm.ptr
    %c1_i64_117 = arith.constant 1 : i64
    %271 = llvm.load %10 : !llvm.ptr -> i64
    %272 = arith.cmpi ult, %271, %c1_i64_117 : i64
    scf.if %272 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %271, %c1_i64_117 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_118 = arith.constant 0 : i32
    %c3_i64_119 = arith.constant 3 : i64
    %273 = llvm.load %10 : !llvm.ptr -> i64
    %274 = arith.cmpi ult, %273, %c3_i64_119 : i64
    scf.if %274 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %273, %c3_i64_119 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_118, %6 : i32, !llvm.ptr
    %c1_i64_120 = arith.constant 1 : i64
    %275 = llvm.load %10 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c1_i64_120 : i64
    scf.if %276 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %275, %c1_i64_120 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c1_i64_121 = arith.constant 1 : i64
    %277 = llvm.load %10 : !llvm.ptr -> i64
    %278 = arith.cmpi ult, %277, %c1_i64_121 : i64
    scf.if %278 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %277, %c1_i64_121 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_122 = arith.constant 0 : i32
    %c3_i64_123 = arith.constant 3 : i64
    %279 = llvm.load %10 : !llvm.ptr -> i64
    %280 = arith.cmpi ult, %279, %c3_i64_123 : i64
    scf.if %280 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %279, %c3_i64_123 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_122, %3 : i32, !llvm.ptr
    %c1_i64_124 = arith.constant 1 : i64
    %281 = llvm.load %10 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c1_i64_124 : i64
    scf.if %282 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %281, %c1_i64_124 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_125 = arith.constant 0 : i32
    %c3_i64_126 = arith.constant 3 : i64
    %283 = llvm.load %10 : !llvm.ptr -> i64
    %284 = arith.cmpi ult, %283, %c3_i64_126 : i64
    scf.if %284 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %283, %c3_i64_126 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_125, %6 : i32, !llvm.ptr
    %c1_i64_127 = arith.constant 1 : i64
    %285 = llvm.load %10 : !llvm.ptr -> i64
    %286 = arith.cmpi ult, %285, %c1_i64_127 : i64
    scf.if %286 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %285, %c1_i64_127 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb12:  // pred: ^bb14
    %c1_i64_128 = arith.constant 1 : i64
    %287 = llvm.load %10 : !llvm.ptr -> i64
    %288 = arith.cmpi ult, %287, %c1_i64_128 : i64
    scf.if %288 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %287, %c1_i64_128 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb13
    %c3_i64_129 = arith.constant 3 : i64
    %289 = llvm.load %10 : !llvm.ptr -> i64
    %290 = arith.cmpi ult, %289, %c3_i64_129 : i64
    scf.if %290 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %289, %c3_i64_129 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %291 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_130 = arith.constant 3 : i64
    %292 = llvm.load %10 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c3_i64_130 : i64
    scf.if %293 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %292, %c3_i64_130 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i64_131 = arith.constant 0 : i64
    %294 = arith.extui %291 : i32 to i64
    %295 = arith.addi %294, %c0_i64_131 : i64
    %296 = llvm.getelementptr %15[%295] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %297 = llvm.load volatile %296 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_132 = arith.constant 3 : i64
    %298 = llvm.load %10 : !llvm.ptr -> i64
    %299 = arith.cmpi ult, %298, %c3_i64_132 : i64
    scf.if %299 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %298, %c3_i64_132 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %300 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_133 = arith.constant 1 : i64
    %301 = llvm.load %10 : !llvm.ptr -> i64
    %302 = arith.cmpi ult, %301, %c1_i64_133 : i64
    scf.if %302 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %301, %c1_i64_133 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c-8_i32 = arith.constant -8 : i32
    %c3_i64_134 = arith.constant 3 : i64
    %303 = llvm.load %10 : !llvm.ptr -> i64
    %304 = arith.cmpi ult, %303, %c3_i64_134 : i64
    scf.if %304 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %303, %c3_i64_134 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %305 = arith.addi %300, %c-8_i32 : i32
    %c3_i64_135 = arith.constant 3 : i64
    %306 = llvm.load %10 : !llvm.ptr -> i64
    %307 = arith.cmpi ult, %306, %c3_i64_135 : i64
    scf.if %307 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %306, %c3_i64_135 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i64_136 = arith.constant 0 : i64
    %308 = arith.extui %305 : i32 to i64
    %309 = arith.addi %308, %c0_i64_136 : i64
    %310 = llvm.getelementptr %15[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load volatile %310 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_137 = arith.constant 3 : i64
    %312 = llvm.load %10 : !llvm.ptr -> i64
    %313 = arith.cmpi ult, %312, %c3_i64_137 : i64
    scf.if %313 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %312, %c3_i64_137 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %314 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_138 = arith.constant 1 : i64
    %315 = llvm.load %10 : !llvm.ptr -> i64
    %316 = arith.cmpi ult, %315, %c1_i64_138 : i64
    scf.if %316 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %315, %c1_i64_138 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c-16_i32 = arith.constant -16 : i32
    %c3_i64_139 = arith.constant 3 : i64
    %317 = llvm.load %10 : !llvm.ptr -> i64
    %318 = arith.cmpi ult, %317, %c3_i64_139 : i64
    scf.if %318 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %317, %c3_i64_139 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %319 = arith.addi %314, %c-16_i32 : i32
    %c3_i64_140 = arith.constant 3 : i64
    %320 = llvm.load %10 : !llvm.ptr -> i64
    %321 = arith.cmpi ult, %320, %c3_i64_140 : i64
    scf.if %321 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %320, %c3_i64_140 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i64_141 = arith.constant 0 : i64
    %322 = arith.extui %319 : i32 to i64
    %323 = arith.addi %322, %c0_i64_141 : i64
    %324 = llvm.getelementptr %15[%323] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %325 = llvm.load volatile %324 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_142 = arith.constant 3 : i64
    %326 = llvm.load %10 : !llvm.ptr -> i64
    %327 = arith.cmpi ult, %326, %c3_i64_142 : i64
    scf.if %327 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %326, %c3_i64_142 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %328 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_143 = arith.constant 1 : i64
    %329 = llvm.load %10 : !llvm.ptr -> i64
    %330 = arith.cmpi ult, %329, %c1_i64_143 : i64
    scf.if %330 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %329, %c1_i64_143 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c-24_i32 = arith.constant -24 : i32
    %c3_i64_144 = arith.constant 3 : i64
    %331 = llvm.load %10 : !llvm.ptr -> i64
    %332 = arith.cmpi ult, %331, %c3_i64_144 : i64
    scf.if %332 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %331, %c3_i64_144 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %333 = arith.addi %328, %c-24_i32 : i32
    %c3_i64_145 = arith.constant 3 : i64
    %334 = llvm.load %10 : !llvm.ptr -> i64
    %335 = arith.cmpi ult, %334, %c3_i64_145 : i64
    scf.if %335 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %334, %c3_i64_145 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i64_146 = arith.constant 0 : i64
    %336 = arith.extui %333 : i32 to i64
    %337 = arith.addi %336, %c0_i64_146 : i64
    %338 = llvm.getelementptr %15[%337] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %339 = llvm.load volatile %338 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_147 = arith.constant 3 : i64
    %340 = llvm.load %10 : !llvm.ptr -> i64
    %341 = arith.cmpi ult, %340, %c3_i64_147 : i64
    scf.if %341 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %340, %c3_i64_147 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %342 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_148 = arith.constant 3 : i64
    %343 = llvm.load %10 : !llvm.ptr -> i64
    %344 = arith.cmpi ult, %343, %c3_i64_148 : i64
    scf.if %344 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %343, %c3_i64_148 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %345 = arith.addi %339, %342 : i32
    %c3_i64_149 = arith.constant 3 : i64
    %346 = llvm.load %10 : !llvm.ptr -> i64
    %347 = arith.cmpi ult, %346, %c3_i64_149 : i64
    scf.if %347 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %346, %c3_i64_149 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %348 = arith.addi %325, %345 : i32
    %c3_i64_150 = arith.constant 3 : i64
    %349 = llvm.load %10 : !llvm.ptr -> i64
    %350 = arith.cmpi ult, %349, %c3_i64_150 : i64
    scf.if %350 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %349, %c3_i64_150 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %351 = arith.addi %311, %348 : i32
    %c3_i64_151 = arith.constant 3 : i64
    %352 = llvm.load %10 : !llvm.ptr -> i64
    %353 = arith.cmpi ult, %352, %c3_i64_151 : i64
    scf.if %353 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %352, %c3_i64_151 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %354 = arith.addi %297, %351 : i32
    %c3_i64_152 = arith.constant 3 : i64
    %355 = llvm.load %10 : !llvm.ptr -> i64
    %356 = arith.cmpi ult, %355, %c3_i64_152 : i64
    scf.if %356 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %355, %c3_i64_152 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %354, %3 : i32, !llvm.ptr
    %c3_i64_153 = arith.constant 3 : i64
    %357 = llvm.load %10 : !llvm.ptr -> i64
    %358 = arith.cmpi ult, %357, %c3_i64_153 : i64
    scf.if %358 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %357, %c3_i64_153 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %359 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_154 = arith.constant 1 : i64
    %360 = llvm.load %10 : !llvm.ptr -> i64
    %361 = arith.cmpi ult, %360, %c1_i64_154 : i64
    scf.if %361 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %360, %c1_i64_154 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_155 = arith.constant 3 : i64
    %362 = llvm.load %10 : !llvm.ptr -> i64
    %363 = arith.cmpi ult, %362, %c3_i64_155 : i64
    scf.if %363 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %362, %c3_i64_155 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %364 = arith.addi %359, %c32_i32 : i32
    %c3_i64_156 = arith.constant 3 : i64
    %365 = llvm.load %10 : !llvm.ptr -> i64
    %366 = arith.cmpi ult, %365, %c3_i64_156 : i64
    scf.if %366 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %365, %c3_i64_156 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %364, %7 : i32, !llvm.ptr
    %c3_i64_157 = arith.constant 3 : i64
    %367 = llvm.load %10 : !llvm.ptr -> i64
    %368 = arith.cmpi ult, %367, %c3_i64_157 : i64
    scf.if %368 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %367, %c3_i64_157 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %369 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_158 = arith.constant 3 : i64
    %370 = llvm.load %10 : !llvm.ptr -> i64
    %371 = arith.cmpi ult, %370, %c3_i64_158 : i64
    scf.if %371 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %370, %c3_i64_158 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %372 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_159 = arith.constant 1 : i64
    %373 = llvm.load %10 : !llvm.ptr -> i64
    %374 = arith.cmpi ult, %373, %c1_i64_159 : i64
    scf.if %374 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %373, %c1_i64_159 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c4_i32_160 = arith.constant 4 : i32
    %c3_i64_161 = arith.constant 3 : i64
    %375 = llvm.load %10 : !llvm.ptr -> i64
    %376 = arith.cmpi ult, %375, %c3_i64_161 : i64
    scf.if %376 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %375, %c3_i64_161 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %377 = arith.addi %372, %c4_i32_160 : i32
    %c3_i64_162 = arith.constant 3 : i64
    %378 = llvm.load %10 : !llvm.ptr -> i64
    %379 = arith.cmpi ult, %378, %c3_i64_162 : i64
    scf.if %379 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %378, %c3_i64_162 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %377, %6 : i32, !llvm.ptr
    %c3_i64_163 = arith.constant 3 : i64
    %380 = llvm.load %10 : !llvm.ptr -> i64
    %381 = arith.cmpi ult, %380, %c3_i64_163 : i64
    scf.if %381 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %380, %c3_i64_163 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %382 = arith.cmpi eq, %369, %377 : i32
    %383 = arith.extui %382 : i1 to i32
    %c0_i32_164 = arith.constant 0 : i32
    %384 = arith.cmpi eq, %383, %c0_i32_164 : i32
    %385 = arith.extui %384 : i1 to i32
    %c1_i64_165 = arith.constant 1 : i64
    %386 = llvm.load %10 : !llvm.ptr -> i64
    %387 = arith.cmpi ult, %386, %c1_i64_165 : i64
    scf.if %387 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %386, %c1_i64_165 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_166 = arith.constant 0 : i32
    %388 = arith.cmpi ne, %385, %c0_i32_166 : i32
    cf.cond_br %388, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    %c1_i64_167 = arith.constant 1 : i64
    %389 = llvm.load %10 : !llvm.ptr -> i64
    %390 = arith.cmpi ult, %389, %c1_i64_167 : i64
    scf.if %390 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %389, %c1_i64_167 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    cf.br ^bb12
  ^bb15:  // 2 preds: ^bb9, ^bb17
    %c1_i64_168 = arith.constant 1 : i64
    %391 = llvm.load %10 : !llvm.ptr -> i64
    %392 = arith.cmpi ult, %391, %c1_i64_168 : i64
    scf.if %392 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %391, %c1_i64_168 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c3_i64_169 = arith.constant 3 : i64
    %393 = llvm.load %10 : !llvm.ptr -> i64
    %394 = arith.cmpi ult, %393, %c3_i64_169 : i64
    scf.if %394 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %393, %c3_i64_169 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %395 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_170 = arith.constant 3 : i64
    %396 = llvm.load %10 : !llvm.ptr -> i64
    %397 = arith.cmpi ult, %396, %c3_i64_170 : i64
    scf.if %397 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %396, %c3_i64_170 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %398 = arith.extui %395 : i32 to i64
    %399 = arith.addi %398, %c12_i64 : i64
    %400 = llvm.getelementptr %15[%399] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %401 = llvm.load volatile %400 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_171 = arith.constant 3 : i64
    %402 = llvm.load %10 : !llvm.ptr -> i64
    %403 = arith.cmpi ult, %402, %c3_i64_171 : i64
    scf.if %403 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %402, %c3_i64_171 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_172 = arith.constant 0 : i32
    %404 = arith.cmpi eq, %401, %c0_i32_172 : i32
    %405 = arith.extui %404 : i1 to i32
    %c1_i64_173 = arith.constant 1 : i64
    %406 = llvm.load %10 : !llvm.ptr -> i64
    %407 = arith.cmpi ult, %406, %c1_i64_173 : i64
    scf.if %407 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %406, %c1_i64_173 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_174 = arith.constant 0 : i32
    %408 = arith.cmpi ne, %405, %c0_i32_174 : i32
    cf.cond_br %408, ^bb20, ^bb21
  ^bb16:  // pred: ^bb9
    %c3_i64_175 = arith.constant 3 : i64
    %409 = llvm.load %10 : !llvm.ptr -> i64
    %410 = arith.cmpi ult, %409, %c3_i64_175 : i64
    scf.if %410 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %409, %c3_i64_175 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %411 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_176 = arith.constant 1 : i64
    %412 = llvm.load %10 : !llvm.ptr -> i64
    %413 = arith.cmpi ult, %412, %c1_i64_176 : i64
    scf.if %413 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %412, %c1_i64_176 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c3_i32_177 = arith.constant 3 : i32
    %c3_i64_178 = arith.constant 3 : i64
    %414 = llvm.load %10 : !llvm.ptr -> i64
    %415 = arith.cmpi ult, %414, %c3_i64_178 : i64
    scf.if %415 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %414, %c3_i64_178 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %416 = arith.cmpi ule, %c3_i32_177, %c31_i32 : i32
    %417 = scf.if %416 -> (i32) {
      %592 = arith.shli %411, %c3_i32_177 : i32
      scf.yield %592 : i32
    } else {
      %c0_i32_261 = arith.constant 0 : i32
      scf.yield %c0_i32_261 : i32
    }
    %c3_i64_179 = arith.constant 3 : i64
    %418 = llvm.load %10 : !llvm.ptr -> i64
    %419 = arith.cmpi ult, %418, %c3_i64_179 : i64
    scf.if %419 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %418, %c3_i64_179 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %420 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_180 = arith.constant 3 : i64
    %421 = llvm.load %10 : !llvm.ptr -> i64
    %422 = arith.cmpi ult, %421, %c3_i64_180 : i64
    scf.if %422 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %421, %c3_i64_180 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %423 = arith.addi %417, %420 : i32
    %c1_i64_181 = arith.constant 1 : i64
    %424 = llvm.load %10 : !llvm.ptr -> i64
    %425 = arith.cmpi ult, %424, %c1_i64_181 : i64
    scf.if %425 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %424, %c1_i64_181 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c4_i32_182 = arith.constant 4 : i32
    %c3_i64_183 = arith.constant 3 : i64
    %426 = llvm.load %10 : !llvm.ptr -> i64
    %427 = arith.cmpi ult, %426, %c3_i64_183 : i64
    scf.if %427 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %426, %c3_i64_183 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %428 = arith.addi %423, %c4_i32_182 : i32
    %c3_i64_184 = arith.constant 3 : i64
    %429 = llvm.load %10 : !llvm.ptr -> i64
    %430 = arith.cmpi ult, %429, %c3_i64_184 : i64
    scf.if %430 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %429, %c3_i64_184 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %428, %7 : i32, !llvm.ptr
    %c1_i64_185 = arith.constant 1 : i64
    %431 = llvm.load %10 : !llvm.ptr -> i64
    %432 = arith.cmpi ult, %431, %c1_i64_185 : i64
    scf.if %432 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %431, %c1_i64_185 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    cf.br ^bb18
  ^bb17:  // pred: ^bb19
    %c1_i64_186 = arith.constant 1 : i64
    %433 = llvm.load %10 : !llvm.ptr -> i64
    %434 = arith.cmpi ult, %433, %c1_i64_186 : i64
    scf.if %434 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %433, %c1_i64_186 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    cf.br ^bb15
  ^bb18:  // 2 preds: ^bb16, ^bb18
    %c3_i64_187 = arith.constant 3 : i64
    %435 = llvm.load %10 : !llvm.ptr -> i64
    %436 = arith.cmpi ult, %435, %c3_i64_187 : i64
    scf.if %436 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %435, %c3_i64_187 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %437 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_188 = arith.constant 3 : i64
    %438 = llvm.load %10 : !llvm.ptr -> i64
    %439 = arith.cmpi ult, %438, %c3_i64_188 : i64
    scf.if %439 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %438, %c3_i64_188 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i64_189 = arith.constant 0 : i64
    %440 = arith.extui %437 : i32 to i64
    %441 = arith.addi %440, %c0_i64_189 : i64
    %442 = llvm.getelementptr %15[%441] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %443 = llvm.load volatile %442 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_190 = arith.constant 3 : i64
    %444 = llvm.load %10 : !llvm.ptr -> i64
    %445 = arith.cmpi ult, %444, %c3_i64_190 : i64
    scf.if %445 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %444, %c3_i64_190 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %446 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_191 = arith.constant 3 : i64
    %447 = llvm.load %10 : !llvm.ptr -> i64
    %448 = arith.cmpi ult, %447, %c3_i64_191 : i64
    scf.if %448 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %447, %c3_i64_191 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %449 = arith.addi %443, %446 : i32
    %c3_i64_192 = arith.constant 3 : i64
    %450 = llvm.load %10 : !llvm.ptr -> i64
    %451 = arith.cmpi ult, %450, %c3_i64_192 : i64
    scf.if %451 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %450, %c3_i64_192 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %449, %3 : i32, !llvm.ptr
    %c3_i64_193 = arith.constant 3 : i64
    %452 = llvm.load %10 : !llvm.ptr -> i64
    %453 = arith.cmpi ult, %452, %c3_i64_193 : i64
    scf.if %453 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %452, %c3_i64_193 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %454 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_194 = arith.constant 1 : i64
    %455 = llvm.load %10 : !llvm.ptr -> i64
    %456 = arith.cmpi ult, %455, %c1_i64_194 : i64
    scf.if %456 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %455, %c1_i64_194 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c8_i32_195 = arith.constant 8 : i32
    %c3_i64_196 = arith.constant 3 : i64
    %457 = llvm.load %10 : !llvm.ptr -> i64
    %458 = arith.cmpi ult, %457, %c3_i64_196 : i64
    scf.if %458 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %457, %c3_i64_196 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %459 = arith.addi %454, %c8_i32_195 : i32
    %c3_i64_197 = arith.constant 3 : i64
    %460 = llvm.load %10 : !llvm.ptr -> i64
    %461 = arith.cmpi ult, %460, %c3_i64_197 : i64
    scf.if %461 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %460, %c3_i64_197 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %459, %7 : i32, !llvm.ptr
    %c3_i64_198 = arith.constant 3 : i64
    %462 = llvm.load %10 : !llvm.ptr -> i64
    %463 = arith.cmpi ult, %462, %c3_i64_198 : i64
    scf.if %463 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %462, %c3_i64_198 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %464 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_199 = arith.constant 1 : i64
    %465 = llvm.load %10 : !llvm.ptr -> i64
    %466 = arith.cmpi ult, %465, %c1_i64_199 : i64
    scf.if %466 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %465, %c1_i64_199 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_200 = arith.constant 3 : i64
    %467 = llvm.load %10 : !llvm.ptr -> i64
    %468 = arith.cmpi ult, %467, %c3_i64_200 : i64
    scf.if %468 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %467, %c3_i64_200 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %469 = arith.addi %464, %c-1_i32 : i32
    %c3_i64_201 = arith.constant 3 : i64
    %470 = llvm.load %10 : !llvm.ptr -> i64
    %471 = arith.cmpi ult, %470, %c3_i64_201 : i64
    scf.if %471 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %470, %c3_i64_201 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %469, %5 : i32, !llvm.ptr
    %c1_i64_202 = arith.constant 1 : i64
    %472 = llvm.load %10 : !llvm.ptr -> i64
    %473 = arith.cmpi ult, %472, %c1_i64_202 : i64
    scf.if %473 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %472, %c1_i64_202 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_203 = arith.constant 0 : i32
    %474 = arith.cmpi ne, %469, %c0_i32_203 : i32
    cf.cond_br %474, ^bb18, ^bb19
  ^bb19:  // pred: ^bb18
    %c1_i64_204 = arith.constant 1 : i64
    %475 = llvm.load %10 : !llvm.ptr -> i64
    %476 = arith.cmpi ult, %475, %c1_i64_204 : i64
    scf.if %476 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %475, %c1_i64_204 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    cf.br ^bb17
  ^bb20:  // 2 preds: ^bb15, ^bb23
    %c3_i64_205 = arith.constant 3 : i64
    %477 = llvm.load %10 : !llvm.ptr -> i64
    %478 = arith.cmpi ult, %477, %c3_i64_205 : i64
    scf.if %478 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %477, %c3_i64_205 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %479 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_206 = arith.constant 1 : i64
    %480 = llvm.load %10 : !llvm.ptr -> i64
    %481 = arith.cmpi ult, %480, %c1_i64_206 : i64
    scf.if %481 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %480, %c1_i64_206 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_207 = arith.constant 0 : i32
    %482 = arith.cmpi ne, %479, %c0_i32_207 : i32
    cf.cond_br %482, ^bb6, ^bb24
  ^bb21:  // pred: ^bb15
    %c3_i64_208 = arith.constant 3 : i64
    %483 = llvm.load %10 : !llvm.ptr -> i64
    %484 = arith.cmpi ult, %483, %c3_i64_208 : i64
    scf.if %484 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %483, %c3_i64_208 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %485 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_209 = arith.constant 1 : i64
    %486 = llvm.load %10 : !llvm.ptr -> i64
    %487 = arith.cmpi ult, %486, %c1_i64_209 : i64
    scf.if %487 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %486, %c1_i64_209 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_210 = arith.constant 0 : i32
    %c3_i64_211 = arith.constant 3 : i64
    %488 = llvm.load %10 : !llvm.ptr -> i64
    %489 = arith.cmpi ult, %488, %c3_i64_211 : i64
    scf.if %489 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %488, %c3_i64_211 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %490 = arith.cmpi slt, %485, %c0_i32_210 : i32
    %491 = arith.extui %490 : i1 to i32
    %c1_i64_212 = arith.constant 1 : i64
    %492 = llvm.load %10 : !llvm.ptr -> i64
    %493 = arith.cmpi ult, %492, %c1_i64_212 : i64
    scf.if %493 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %492, %c1_i64_212 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_213 = arith.constant 0 : i32
    %494 = arith.cmpi ne, %491, %c0_i32_213 : i32
    cf.cond_br %494, ^bb7, ^bb22
  ^bb22:  // pred: ^bb21
    %c3_i64_214 = arith.constant 3 : i64
    %495 = llvm.load %10 : !llvm.ptr -> i64
    %496 = arith.cmpi ult, %495, %c3_i64_214 : i64
    scf.if %496 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %495, %c3_i64_214 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %497 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_215 = arith.constant 1 : i64
    %498 = llvm.load %10 : !llvm.ptr -> i64
    %499 = arith.cmpi ult, %498, %c1_i64_215 : i64
    scf.if %499 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %498, %c1_i64_215 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c16_i32_216 = arith.constant 16 : i32
    %c3_i64_217 = arith.constant 3 : i64
    %500 = llvm.load %10 : !llvm.ptr -> i64
    %501 = arith.cmpi ult, %500, %c3_i64_217 : i64
    scf.if %501 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %500, %c3_i64_217 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %502 = arith.cmpi ult, %497, %c16_i32_216 : i32
    %503 = arith.extui %502 : i1 to i32
    %c3_i64_218 = arith.constant 3 : i64
    %504 = llvm.load %10 : !llvm.ptr -> i64
    %505 = arith.cmpi ult, %504, %c3_i64_218 : i64
    scf.if %505 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %504, %c3_i64_218 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %506 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_219 = arith.constant 3 : i64
    %507 = llvm.load %10 : !llvm.ptr -> i64
    %508 = arith.cmpi ult, %507, %c3_i64_219 : i64
    scf.if %508 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %507, %c3_i64_219 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c4_i64_220 = arith.constant 4 : i64
    %509 = arith.extui %506 : i32 to i64
    %510 = arith.addi %509, %c4_i64_220 : i64
    %511 = llvm.getelementptr %15[%510] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %512 = llvm.load volatile %511 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_221 = arith.constant 3 : i64
    %513 = llvm.load %10 : !llvm.ptr -> i64
    %514 = arith.cmpi ult, %513, %c3_i64_221 : i64
    scf.if %514 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %513, %c3_i64_221 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_222 = arith.constant 0 : i32
    %515 = arith.cmpi eq, %512, %c0_i32_222 : i32
    %516 = arith.extui %515 : i1 to i32
    %c3_i64_223 = arith.constant 3 : i64
    %517 = llvm.load %10 : !llvm.ptr -> i64
    %518 = arith.cmpi ult, %517, %c3_i64_223 : i64
    scf.if %518 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %517, %c3_i64_223 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %519 = arith.andi %503, %516 : i32
    %c1_i64_224 = arith.constant 1 : i64
    %520 = llvm.load %10 : !llvm.ptr -> i64
    %521 = arith.cmpi ult, %520, %c1_i64_224 : i64
    scf.if %521 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %520, %c1_i64_224 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_225 = arith.constant 0 : i32
    %522 = arith.cmpi ne, %519, %c0_i32_225 : i32
    cf.cond_br %522, ^bb7, ^bb23
  ^bb23:  // pred: ^bb22
    %c3_i64_226 = arith.constant 3 : i64
    %523 = llvm.load %10 : !llvm.ptr -> i64
    %524 = arith.cmpi ult, %523, %c3_i64_226 : i64
    scf.if %524 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %523, %c3_i64_226 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %525 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_227 = arith.constant 1 : i64
    %526 = llvm.load %10 : !llvm.ptr -> i64
    %527 = arith.cmpi ult, %526, %c1_i64_227 : i64
    scf.if %527 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %526, %c1_i64_227 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1_i32_228 = arith.constant 1 : i32
    %c3_i64_229 = arith.constant 3 : i64
    %528 = llvm.load %10 : !llvm.ptr -> i64
    %529 = arith.cmpi ult, %528, %c3_i64_229 : i64
    scf.if %529 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %528, %c3_i64_229 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c31_i32_230 = arith.constant 31 : i32
    %530 = arith.cmpi ule, %c1_i32_228, %c31_i32_230 : i32
    %531 = scf.if %530 -> (i32) {
      %592 = arith.shli %525, %c1_i32_228 : i32
      scf.yield %592 : i32
    } else {
      %c0_i32_261 = arith.constant 0 : i32
      scf.yield %c0_i32_261 : i32
    }
    %c3_i64_231 = arith.constant 3 : i64
    %532 = llvm.load %10 : !llvm.ptr -> i64
    %533 = arith.cmpi ult, %532, %c3_i64_231 : i64
    scf.if %533 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %532, %c3_i64_231 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %531, %3 : i32, !llvm.ptr
    %c1_i64_232 = arith.constant 1 : i64
    %534 = llvm.load %10 : !llvm.ptr -> i64
    %535 = arith.cmpi ult, %534, %c1_i64_232 : i64
    scf.if %535 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %534, %c1_i64_232 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    cf.br ^bb20
  ^bb24:  // pred: ^bb20
    %c1_i64_233 = arith.constant 1 : i64
    %536 = llvm.load %10 : !llvm.ptr -> i64
    %537 = arith.cmpi ult, %536, %c1_i64_233 : i64
    scf.if %537 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %536, %c1_i64_233 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    cf.br ^bb7
  ^bb25:  // pred: ^bb6
    %c1_i64_234 = arith.constant 1 : i64
    %538 = llvm.load %10 : !llvm.ptr -> i64
    %539 = arith.cmpi ult, %538, %c1_i64_234 : i64
    scf.if %539 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %538, %c1_i64_234 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_235 = arith.constant 0 : i32
    %c3_i64_236 = arith.constant 3 : i64
    %540 = llvm.load %10 : !llvm.ptr -> i64
    %541 = arith.cmpi ult, %540, %c3_i64_236 : i64
    scf.if %541 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %540, %c3_i64_236 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1049497_i64 = arith.constant 1049497 : i64
    %542 = arith.extui %c0_i32_235 : i32 to i64
    %543 = arith.addi %542, %c1049497_i64 : i64
    %544 = llvm.getelementptr %15[%543] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %545 = llvm.load volatile %544 {alignment = 1 : i64} : !llvm.ptr -> i8
    %546 = arith.extui %545 : i8 to i32
    %c1_i64_237 = arith.constant 1 : i64
    %547 = llvm.load %10 : !llvm.ptr -> i64
    %548 = arith.cmpi ult, %547, %c1_i64_237 : i64
    scf.if %548 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %547, %c1_i64_237 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1_i64_238 = arith.constant 1 : i64
    %549 = llvm.load %10 : !llvm.ptr -> i64
    %550 = arith.cmpi ult, %549, %c1_i64_238 : i64
    scf.if %550 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %549, %c1_i64_238 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1_i32_239 = arith.constant 1 : i32
    %c3_i64_240 = arith.constant 3 : i64
    %551 = llvm.load %10 : !llvm.ptr -> i64
    %552 = arith.cmpi ult, %551, %c3_i64_240 : i64
    scf.if %552 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %551, %c3_i64_240 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_239, %5 : i32, !llvm.ptr
    %c3_i64_241 = arith.constant 3 : i64
    %553 = llvm.load %10 : !llvm.ptr -> i64
    %554 = arith.cmpi ult, %553, %c3_i64_241 : i64
    scf.if %554 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %553, %c3_i64_241 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %555 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_242 = arith.constant 1 : i64
    %556 = llvm.load %10 : !llvm.ptr -> i64
    %557 = arith.cmpi ult, %556, %c1_i64_242 : i64
    scf.if %557 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %556, %c1_i64_242 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1_i32_243 = arith.constant 1 : i32
    %c6_i64_244 = arith.constant 6 : i64
    %558 = llvm.load %10 : !llvm.ptr -> i64
    %559 = arith.cmpi ult, %558, %c6_i64_244 : i64
    scf.if %559 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %558, %c6_i64_244 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %560 = call @f9(%arg0, %555, %c1_i32_243) : (!llvm.ptr, i32, i32) -> i32
    %c3_i64_245 = arith.constant 3 : i64
    %561 = llvm.load %10 : !llvm.ptr -> i64
    %562 = arith.cmpi ult, %561, %c3_i64_245 : i64
    scf.if %562 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %561, %c3_i64_245 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    llvm.store %560, %7 : i32, !llvm.ptr
    %c3_i64_246 = arith.constant 3 : i64
    %563 = llvm.load %10 : !llvm.ptr -> i64
    %564 = arith.cmpi ult, %563, %c3_i64_246 : i64
    scf.if %564 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %563, %c3_i64_246 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_247 = arith.constant 0 : i32
    %565 = arith.cmpi eq, %560, %c0_i32_247 : i32
    %566 = arith.extui %565 : i1 to i32
    %c1_i64_248 = arith.constant 1 : i64
    %567 = llvm.load %10 : !llvm.ptr -> i64
    %568 = arith.cmpi ult, %567, %c1_i64_248 : i64
    scf.if %568 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %567, %c1_i64_248 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c0_i32_249 = arith.constant 0 : i32
    %569 = arith.cmpi ne, %566, %c0_i32_249 : i32
    cf.cond_br %569, ^bb4, ^bb26
  ^bb26:  // pred: ^bb25
    %c1_i64_250 = arith.constant 1 : i64
    %570 = llvm.load %10 : !llvm.ptr -> i64
    %571 = arith.cmpi ult, %570, %c1_i64_250 : i64
    scf.if %571 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %570, %c1_i64_250 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb27:  // pred: ^bb5
    %c1_i64_251 = arith.constant 1 : i64
    %572 = llvm.load %10 : !llvm.ptr -> i64
    %573 = arith.cmpi ult, %572, %c1_i64_251 : i64
    scf.if %573 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %572, %c1_i64_251 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1049148_i32 = arith.constant 1049148 : i32
    %c1_i64_252 = arith.constant 1 : i64
    %574 = llvm.load %10 : !llvm.ptr -> i64
    %575 = arith.cmpi ult, %574, %c1_i64_252 : i64
    scf.if %575 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %574, %c1_i64_252 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c86_i32 = arith.constant 86 : i32
    %c3_i64_253 = arith.constant 3 : i64
    %576 = llvm.load %10 : !llvm.ptr -> i64
    %577 = arith.cmpi ult, %576, %c3_i64_253 : i64
    scf.if %577 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %576, %c3_i64_253 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %578 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_254 = arith.constant 1 : i64
    %579 = llvm.load %10 : !llvm.ptr -> i64
    %580 = arith.cmpi ult, %579, %c1_i64_254 : i64
    scf.if %580 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %579, %c1_i64_254 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c15_i32 = arith.constant 15 : i32
    %c3_i64_255 = arith.constant 3 : i64
    %581 = llvm.load %10 : !llvm.ptr -> i64
    %582 = arith.cmpi ult, %581, %c3_i64_255 : i64
    scf.if %582 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %581, %c3_i64_255 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %583 = arith.addi %578, %c15_i32 : i32
    %c1_i64_256 = arith.constant 1 : i64
    %584 = llvm.load %10 : !llvm.ptr -> i64
    %585 = arith.cmpi ult, %584, %c1_i64_256 : i64
    scf.if %585 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %584, %c1_i64_256 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1049132_i32 = arith.constant 1049132 : i32
    %c1_i64_257 = arith.constant 1 : i64
    %586 = llvm.load %10 : !llvm.ptr -> i64
    %587 = arith.cmpi ult, %586, %c1_i64_257 : i64
    scf.if %587 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %586, %c1_i64_257 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c1049260_i32 = arith.constant 1049260 : i32
    %c6_i64_258 = arith.constant 6 : i64
    %588 = llvm.load %10 : !llvm.ptr -> i64
    %589 = arith.cmpi ult, %588, %c6_i64_258 : i64
    scf.if %589 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %588, %c6_i64_258 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    call @f67(%arg0, %c1049148_i32, %c86_i32, %583, %c1049132_i32, %c1049260_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c0_i64_259 = arith.constant 0 : i64
    %590 = llvm.load %10 : !llvm.ptr -> i64
    %591 = arith.cmpi ult, %590, %c0_i64_259 : i64
    scf.if %591 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %592 = arith.subi %590, %c0_i64_259 : i64
      llvm.store %592, %10 : i64, !llvm.ptr
    }
    %c9_i32_260 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_260) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f60(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_3 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %4, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %5 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %11, %c3_i64 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %13 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %14 = llvm.load %5 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c1_i64 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %14, %c1_i64 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_4 = arith.constant 3 : i64
    %16 = llvm.load %5 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64_4 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %16, %c3_i64_4 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %18 = arith.subi %13, %c16_i32 : i32
    %c3_i64_5 = arith.constant 3 : i64
    %19 = llvm.load %5 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_5 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %19, %c3_i64_5 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %2 : i32, !llvm.ptr
    %c3_i64_6 = arith.constant 3 : i64
    %21 = llvm.load %5 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_6 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %21, %c3_i64_6 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    llvm.store %18, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %23 = llvm.load %5 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c1_i64_7 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %23, %c1_i64_7 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c1_i64_8 = arith.constant 1 : i64
    %25 = llvm.load %5 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_8 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %25, %c1_i64_8 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c1_i64_9 = arith.constant 1 : i64
    %27 = llvm.load %5 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c1_i64_9 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %27, %c1_i64_9 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c1_i64_10 = arith.constant 1 : i64
    %29 = llvm.load %5 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c1_i64_10 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %29, %c1_i64_10 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c3_i64_11 = arith.constant 3 : i64
    %31 = llvm.load %5 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_11 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %31, %c3_i64_11 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_12 = arith.constant 1 : i64
    %34 = llvm.load %5 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c1_i64_12 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %34, %c1_i64_12 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c128_i32 = arith.constant 128 : i32
    %c3_i64_13 = arith.constant 3 : i64
    %36 = llvm.load %5 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_13 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %36, %c3_i64_13 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %38 = arith.cmpi ult, %33, %c128_i32 : i32
    %39 = arith.extui %38 : i1 to i32
    %c1_i64_14 = arith.constant 1 : i64
    %40 = llvm.load %5 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c1_i64_14 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %40, %c1_i64_14 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c0_i32_15 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %39, %c0_i32_15 : i32
    cf.cond_br %42, ^bb6, ^bb7
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %c3_i64_16 = arith.constant 3 : i64
    %43 = llvm.load %5 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c3_i64_16 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %43, %c3_i64_16 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_17 = arith.constant 1 : i64
    %46 = llvm.load %5 : !llvm.ptr -> i64
    %47 = arith.cmpi ult, %46, %c1_i64_17 : i64
    scf.if %47 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %46, %c1_i64_17 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c16_i32_18 = arith.constant 16 : i32
    %c3_i64_19 = arith.constant 3 : i64
    %48 = llvm.load %5 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c3_i64_19 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %48, %c3_i64_19 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %50 = arith.addi %45, %c16_i32_18 : i32
    %c3_i64_20 = arith.constant 3 : i64
    %51 = llvm.load %5 : !llvm.ptr -> i64
    %52 = arith.cmpi ult, %51, %c3_i64_20 : i64
    scf.if %52 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %51, %c3_i64_20 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    llvm.store %50, %7 : i32, !llvm.ptr
    %c1_i64_21 = arith.constant 1 : i64
    %53 = llvm.load %5 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c1_i64_21 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %53, %c1_i64_21 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %c1_i64_22 = arith.constant 1 : i64
    %55 = llvm.load %5 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c1_i64_22 : i64
    scf.if %56 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %55, %c1_i64_22 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c3_i64_23 = arith.constant 3 : i64
    %57 = llvm.load %5 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_23 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %57, %c3_i64_23 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %59 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_24 = arith.constant 3 : i64
    %60 = llvm.load %5 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_24 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %60, %c3_i64_24 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %62 = arith.extui %59 : i32 to i64
    %63 = arith.addi %62, %c0_i64 : i64
    %64 = llvm.getelementptr %10[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_25 = arith.constant 3 : i64
    %66 = llvm.load %5 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c3_i64_25 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %66, %c3_i64_25 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_26 = arith.constant 3 : i64
    %69 = llvm.load %5 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c3_i64_26 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %69, %c3_i64_26 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %71 = arith.extui %68 : i32 to i64
    %72 = arith.addi %71, %c8_i64 : i64
    %73 = llvm.getelementptr %10[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %74 = llvm.load volatile %73 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_27 = arith.constant 3 : i64
    %75 = llvm.load %5 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c3_i64_27 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %75, %c3_i64_27 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    llvm.store %74, %3 : i32, !llvm.ptr
    %c3_i64_28 = arith.constant 3 : i64
    %77 = llvm.load %5 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c3_i64_28 : i64
    scf.if %78 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %77, %c3_i64_28 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %79 = arith.subi %65, %74 : i32
    %c3_i64_29 = arith.constant 3 : i64
    %80 = llvm.load %5 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_29 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %80, %c3_i64_29 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_30 = arith.constant 3 : i64
    %83 = llvm.load %5 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_30 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %83, %c3_i64_30 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %85 = arith.cmpi uge, %79, %82 : i32
    %86 = arith.extui %85 : i1 to i32
    %c1_i64_31 = arith.constant 1 : i64
    %87 = llvm.load %5 : !llvm.ptr -> i64
    %88 = arith.cmpi ult, %87, %c1_i64_31 : i64
    scf.if %88 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %87, %c1_i64_31 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c0_i32_32 = arith.constant 0 : i32
    %89 = arith.cmpi ne, %86, %c0_i32_32 : i32
    cf.cond_br %89, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %c3_i64_33 = arith.constant 3 : i64
    %90 = llvm.load %5 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c3_i64_33 : i64
    scf.if %91 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %90, %c3_i64_33 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %92 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_34 = arith.constant 3 : i64
    %93 = llvm.load %5 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c3_i64_34 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %93, %c3_i64_34 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_35 = arith.constant 1 : i64
    %96 = llvm.load %5 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c1_i64_35 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %96, %c1_i64_35 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c63_i32 = arith.constant 63 : i32
    %c3_i64_36 = arith.constant 3 : i64
    %98 = llvm.load %5 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_36 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %98, %c3_i64_36 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %100 = arith.andi %95, %c63_i32 : i32
    %c1_i64_37 = arith.constant 1 : i64
    %101 = llvm.load %5 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c1_i64_37 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %101, %c1_i64_37 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c128_i32_38 = arith.constant 128 : i32
    %c3_i64_39 = arith.constant 3 : i64
    %103 = llvm.load %5 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %c3_i64_39 : i64
    scf.if %104 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %103, %c3_i64_39 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %105 = arith.ori %100, %c128_i32_38 : i32
    %c3_i64_40 = arith.constant 3 : i64
    %106 = llvm.load %5 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c3_i64_40 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %106, %c3_i64_40 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c13_i64 = arith.constant 13 : i64
    %108 = arith.extui %92 : i32 to i64
    %109 = arith.addi %108, %c13_i64 : i64
    %110 = llvm.getelementptr %10[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = arith.trunci %105 : i32 to i8
    llvm.store volatile %111, %110 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_41 = arith.constant 3 : i64
    %112 = llvm.load %5 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c3_i64_41 : i64
    scf.if %113 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %112, %c3_i64_41 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_42 = arith.constant 3 : i64
    %115 = llvm.load %5 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c3_i64_42 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %115, %c3_i64_42 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_43 = arith.constant 1 : i64
    %118 = llvm.load %5 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c1_i64_43 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %118, %c1_i64_43 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c6_i32 = arith.constant 6 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %120 = llvm.load %5 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c3_i64_44 : i64
    scf.if %121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %120, %c3_i64_44 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %122 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %123 = scf.if %122 -> (i32) {
      %522 = arith.shrui %117, %c6_i32 : i32
      scf.yield %522 : i32
    } else {
      %c0_i32_210 = arith.constant 0 : i32
      scf.yield %c0_i32_210 : i32
    }
    %c1_i64_45 = arith.constant 1 : i64
    %124 = llvm.load %5 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c1_i64_45 : i64
    scf.if %125 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %124, %c1_i64_45 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c192_i32 = arith.constant 192 : i32
    %c3_i64_46 = arith.constant 3 : i64
    %126 = llvm.load %5 : !llvm.ptr -> i64
    %127 = arith.cmpi ult, %126, %c3_i64_46 : i64
    scf.if %127 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %126, %c3_i64_46 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %128 = arith.ori %123, %c192_i32 : i32
    %c3_i64_47 = arith.constant 3 : i64
    %129 = llvm.load %5 : !llvm.ptr -> i64
    %130 = arith.cmpi ult, %129, %c3_i64_47 : i64
    scf.if %130 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %129, %c3_i64_47 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %131 = arith.extui %114 : i32 to i64
    %132 = arith.addi %131, %c12_i64 : i64
    %133 = llvm.getelementptr %10[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = arith.trunci %128 : i32 to i8
    llvm.store volatile %134, %133 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_48 = arith.constant 1 : i64
    %135 = llvm.load %5 : !llvm.ptr -> i64
    %136 = arith.cmpi ult, %135, %c1_i64_48 : i64
    scf.if %136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %135, %c1_i64_48 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c2_i32 = arith.constant 2 : i32
    %c3_i64_49 = arith.constant 3 : i64
    %137 = llvm.load %5 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c3_i64_49 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %137, %c3_i64_49 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    %c1_i64_50 = arith.constant 1 : i64
    %139 = llvm.load %5 : !llvm.ptr -> i64
    %140 = arith.cmpi ult, %139, %c1_i64_50 : i64
    scf.if %140 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %139, %c1_i64_50 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %c1_i64_51 = arith.constant 1 : i64
    %141 = llvm.load %5 : !llvm.ptr -> i64
    %142 = arith.cmpi ult, %141, %c1_i64_51 : i64
    scf.if %142 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %141, %c1_i64_51 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c3_i64_52 = arith.constant 3 : i64
    %143 = llvm.load %5 : !llvm.ptr -> i64
    %144 = arith.cmpi ult, %143, %c3_i64_52 : i64
    scf.if %144 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %143, %c3_i64_52 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %145 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_53 = arith.constant 3 : i64
    %146 = llvm.load %5 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c3_i64_53 : i64
    scf.if %147 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %146, %c3_i64_53 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c8_i64_54 = arith.constant 8 : i64
    %148 = arith.extui %145 : i32 to i64
    %149 = arith.addi %148, %c8_i64_54 : i64
    %150 = llvm.getelementptr %10[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_55 = arith.constant 3 : i64
    %152 = llvm.load %5 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c3_i64_55 : i64
    scf.if %153 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %152, %c3_i64_55 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    llvm.store %151, %3 : i32, !llvm.ptr
    %c3_i64_56 = arith.constant 3 : i64
    %154 = llvm.load %5 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c3_i64_56 : i64
    scf.if %155 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %154, %c3_i64_56 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %156 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_57 = arith.constant 3 : i64
    %157 = llvm.load %5 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c3_i64_57 : i64
    scf.if %158 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %157, %c3_i64_57 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c0_i64_58 = arith.constant 0 : i64
    %159 = arith.extui %156 : i32 to i64
    %160 = arith.addi %159, %c0_i64_58 : i64
    %161 = llvm.getelementptr %10[%160] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %162 = llvm.load volatile %161 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_59 = arith.constant 3 : i64
    %163 = llvm.load %5 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c3_i64_59 : i64
    scf.if %164 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %163, %c3_i64_59 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %165 = arith.cmpi eq, %151, %162 : i32
    %166 = arith.extui %165 : i1 to i32
    %c0_i32_60 = arith.constant 0 : i32
    %167 = arith.cmpi eq, %166, %c0_i32_60 : i32
    %168 = arith.extui %167 : i1 to i32
    %c1_i64_61 = arith.constant 1 : i64
    %169 = llvm.load %5 : !llvm.ptr -> i64
    %170 = arith.cmpi ult, %169, %c1_i64_61 : i64
    scf.if %170 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %169, %c1_i64_61 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c0_i32_62 = arith.constant 0 : i32
    %171 = arith.cmpi ne, %168, %c0_i32_62 : i32
    cf.cond_br %171, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %c3_i64_63 = arith.constant 3 : i64
    %172 = llvm.load %5 : !llvm.ptr -> i64
    %173 = arith.cmpi ult, %172, %c3_i64_63 : i64
    scf.if %173 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %172, %c3_i64_63 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %174 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_64 = arith.constant 1 : i64
    %175 = llvm.load %5 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c1_i64_64 : i64
    scf.if %176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %175, %c1_i64_64 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c0_i32_65 = arith.constant 0 : i32
    %c3_i64_66 = arith.constant 3 : i64
    %177 = llvm.load %5 : !llvm.ptr -> i64
    %178 = arith.cmpi ult, %177, %c3_i64_66 : i64
    scf.if %178 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %177, %c3_i64_66 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c12_i64_67 = arith.constant 12 : i64
    %179 = arith.extui %174 : i32 to i64
    %180 = arith.addi %179, %c12_i64_67 : i64
    %181 = llvm.getelementptr %10[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_65, %181 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_68 = arith.constant 3 : i64
    %182 = llvm.load %5 : !llvm.ptr -> i64
    %183 = arith.cmpi ult, %182, %c3_i64_68 : i64
    scf.if %183 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %182, %c3_i64_68 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %184 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_69 = arith.constant 1 : i64
    %185 = llvm.load %5 : !llvm.ptr -> i64
    %186 = arith.cmpi ult, %185, %c1_i64_69 : i64
    scf.if %186 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %185, %c1_i64_69 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c2048_i32 = arith.constant 2048 : i32
    %c3_i64_70 = arith.constant 3 : i64
    %187 = llvm.load %5 : !llvm.ptr -> i64
    %188 = arith.cmpi ult, %187, %c3_i64_70 : i64
    scf.if %188 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %187, %c3_i64_70 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %189 = arith.cmpi ult, %184, %c2048_i32 : i32
    %190 = arith.extui %189 : i1 to i32
    %c1_i64_71 = arith.constant 1 : i64
    %191 = llvm.load %5 : !llvm.ptr -> i64
    %192 = arith.cmpi ult, %191, %c1_i64_71 : i64
    scf.if %192 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %191, %c1_i64_71 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c0_i32_72 = arith.constant 0 : i32
    %193 = arith.cmpi ne, %190, %c0_i32_72 : i32
    cf.cond_br %193, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %c1_i64_73 = arith.constant 1 : i64
    %194 = llvm.load %5 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c1_i64_73 : i64
    scf.if %195 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %194, %c1_i64_73 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c3_i64_74 = arith.constant 3 : i64
    %196 = llvm.load %5 : !llvm.ptr -> i64
    %197 = arith.cmpi ult, %196, %c3_i64_74 : i64
    scf.if %197 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %196, %c3_i64_74 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %198 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_75 = arith.constant 1 : i64
    %199 = llvm.load %5 : !llvm.ptr -> i64
    %200 = arith.cmpi ult, %199, %c1_i64_75 : i64
    scf.if %200 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %199, %c1_i64_75 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c65536_i32 = arith.constant 65536 : i32
    %c3_i64_76 = arith.constant 3 : i64
    %201 = llvm.load %5 : !llvm.ptr -> i64
    %202 = arith.cmpi ult, %201, %c3_i64_76 : i64
    scf.if %202 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %201, %c3_i64_76 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %203 = arith.cmpi uge, %198, %c65536_i32 : i32
    %204 = arith.extui %203 : i1 to i32
    %c1_i64_77 = arith.constant 1 : i64
    %205 = llvm.load %5 : !llvm.ptr -> i64
    %206 = arith.cmpi ult, %205, %c1_i64_77 : i64
    scf.if %206 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %205, %c1_i64_77 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c0_i32_78 = arith.constant 0 : i32
    %207 = arith.cmpi ne, %204, %c0_i32_78 : i32
    cf.cond_br %207, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %c3_i64_79 = arith.constant 3 : i64
    %208 = llvm.load %5 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c3_i64_79 : i64
    scf.if %209 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %208, %c3_i64_79 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %210 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_80 = arith.constant 3 : i64
    %211 = llvm.load %5 : !llvm.ptr -> i64
    %212 = arith.cmpi ult, %211, %c3_i64_80 : i64
    scf.if %212 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %211, %c3_i64_80 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %213 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_81 = arith.constant 1 : i64
    %214 = llvm.load %5 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c1_i64_81 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %214, %c1_i64_81 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c63_i32_82 = arith.constant 63 : i32
    %c3_i64_83 = arith.constant 3 : i64
    %216 = llvm.load %5 : !llvm.ptr -> i64
    %217 = arith.cmpi ult, %216, %c3_i64_83 : i64
    scf.if %217 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %216, %c3_i64_83 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %218 = arith.andi %213, %c63_i32_82 : i32
    %c1_i64_84 = arith.constant 1 : i64
    %219 = llvm.load %5 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c1_i64_84 : i64
    scf.if %220 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %219, %c1_i64_84 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c128_i32_85 = arith.constant 128 : i32
    %c3_i64_86 = arith.constant 3 : i64
    %221 = llvm.load %5 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c3_i64_86 : i64
    scf.if %222 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %221, %c3_i64_86 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %223 = arith.ori %218, %c128_i32_85 : i32
    %c3_i64_87 = arith.constant 3 : i64
    %224 = llvm.load %5 : !llvm.ptr -> i64
    %225 = arith.cmpi ult, %224, %c3_i64_87 : i64
    scf.if %225 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %224, %c3_i64_87 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c15_i64 = arith.constant 15 : i64
    %226 = arith.extui %210 : i32 to i64
    %227 = arith.addi %226, %c15_i64 : i64
    %228 = llvm.getelementptr %10[%227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %229 = arith.trunci %223 : i32 to i8
    llvm.store volatile %229, %228 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_88 = arith.constant 3 : i64
    %230 = llvm.load %5 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c3_i64_88 : i64
    scf.if %231 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %230, %c3_i64_88 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %232 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_89 = arith.constant 3 : i64
    %233 = llvm.load %5 : !llvm.ptr -> i64
    %234 = arith.cmpi ult, %233, %c3_i64_89 : i64
    scf.if %234 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %233, %c3_i64_89 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %235 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_90 = arith.constant 1 : i64
    %236 = llvm.load %5 : !llvm.ptr -> i64
    %237 = arith.cmpi ult, %236, %c1_i64_90 : i64
    scf.if %237 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %236, %c1_i64_90 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c6_i32_91 = arith.constant 6 : i32
    %c3_i64_92 = arith.constant 3 : i64
    %238 = llvm.load %5 : !llvm.ptr -> i64
    %239 = arith.cmpi ult, %238, %c3_i64_92 : i64
    scf.if %239 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %238, %c3_i64_92 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c31_i32_93 = arith.constant 31 : i32
    %240 = arith.cmpi ule, %c6_i32_91, %c31_i32_93 : i32
    %241 = scf.if %240 -> (i32) {
      %522 = arith.shrui %235, %c6_i32_91 : i32
      scf.yield %522 : i32
    } else {
      %c0_i32_210 = arith.constant 0 : i32
      scf.yield %c0_i32_210 : i32
    }
    %c1_i64_94 = arith.constant 1 : i64
    %242 = llvm.load %5 : !llvm.ptr -> i64
    %243 = arith.cmpi ult, %242, %c1_i64_94 : i64
    scf.if %243 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %242, %c1_i64_94 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c63_i32_95 = arith.constant 63 : i32
    %c3_i64_96 = arith.constant 3 : i64
    %244 = llvm.load %5 : !llvm.ptr -> i64
    %245 = arith.cmpi ult, %244, %c3_i64_96 : i64
    scf.if %245 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %244, %c3_i64_96 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %246 = arith.andi %241, %c63_i32_95 : i32
    %c1_i64_97 = arith.constant 1 : i64
    %247 = llvm.load %5 : !llvm.ptr -> i64
    %248 = arith.cmpi ult, %247, %c1_i64_97 : i64
    scf.if %248 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %247, %c1_i64_97 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c128_i32_98 = arith.constant 128 : i32
    %c3_i64_99 = arith.constant 3 : i64
    %249 = llvm.load %5 : !llvm.ptr -> i64
    %250 = arith.cmpi ult, %249, %c3_i64_99 : i64
    scf.if %250 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %249, %c3_i64_99 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %251 = arith.ori %246, %c128_i32_98 : i32
    %c3_i64_100 = arith.constant 3 : i64
    %252 = llvm.load %5 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c3_i64_100 : i64
    scf.if %253 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %252, %c3_i64_100 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c14_i64 = arith.constant 14 : i64
    %254 = arith.extui %232 : i32 to i64
    %255 = arith.addi %254, %c14_i64 : i64
    %256 = llvm.getelementptr %10[%255] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %257 = arith.trunci %251 : i32 to i8
    llvm.store volatile %257, %256 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_101 = arith.constant 3 : i64
    %258 = llvm.load %5 : !llvm.ptr -> i64
    %259 = arith.cmpi ult, %258, %c3_i64_101 : i64
    scf.if %259 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %258, %c3_i64_101 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %260 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_102 = arith.constant 3 : i64
    %261 = llvm.load %5 : !llvm.ptr -> i64
    %262 = arith.cmpi ult, %261, %c3_i64_102 : i64
    scf.if %262 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %261, %c3_i64_102 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %263 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_103 = arith.constant 1 : i64
    %264 = llvm.load %5 : !llvm.ptr -> i64
    %265 = arith.cmpi ult, %264, %c1_i64_103 : i64
    scf.if %265 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %264, %c1_i64_103 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c12_i32 = arith.constant 12 : i32
    %c3_i64_104 = arith.constant 3 : i64
    %266 = llvm.load %5 : !llvm.ptr -> i64
    %267 = arith.cmpi ult, %266, %c3_i64_104 : i64
    scf.if %267 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %266, %c3_i64_104 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c31_i32_105 = arith.constant 31 : i32
    %268 = arith.cmpi ule, %c12_i32, %c31_i32_105 : i32
    %269 = scf.if %268 -> (i32) {
      %522 = arith.shrui %263, %c12_i32 : i32
      scf.yield %522 : i32
    } else {
      %c0_i32_210 = arith.constant 0 : i32
      scf.yield %c0_i32_210 : i32
    }
    %c1_i64_106 = arith.constant 1 : i64
    %270 = llvm.load %5 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %270, %c1_i64_106 : i64
    scf.if %271 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %270, %c1_i64_106 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c63_i32_107 = arith.constant 63 : i32
    %c3_i64_108 = arith.constant 3 : i64
    %272 = llvm.load %5 : !llvm.ptr -> i64
    %273 = arith.cmpi ult, %272, %c3_i64_108 : i64
    scf.if %273 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %272, %c3_i64_108 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %274 = arith.andi %269, %c63_i32_107 : i32
    %c1_i64_109 = arith.constant 1 : i64
    %275 = llvm.load %5 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c1_i64_109 : i64
    scf.if %276 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %275, %c1_i64_109 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c128_i32_110 = arith.constant 128 : i32
    %c3_i64_111 = arith.constant 3 : i64
    %277 = llvm.load %5 : !llvm.ptr -> i64
    %278 = arith.cmpi ult, %277, %c3_i64_111 : i64
    scf.if %278 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %277, %c3_i64_111 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %279 = arith.ori %274, %c128_i32_110 : i32
    %c3_i64_112 = arith.constant 3 : i64
    %280 = llvm.load %5 : !llvm.ptr -> i64
    %281 = arith.cmpi ult, %280, %c3_i64_112 : i64
    scf.if %281 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %280, %c3_i64_112 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c13_i64_113 = arith.constant 13 : i64
    %282 = arith.extui %260 : i32 to i64
    %283 = arith.addi %282, %c13_i64_113 : i64
    %284 = llvm.getelementptr %10[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %285 = arith.trunci %279 : i32 to i8
    llvm.store volatile %285, %284 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_114 = arith.constant 3 : i64
    %286 = llvm.load %5 : !llvm.ptr -> i64
    %287 = arith.cmpi ult, %286, %c3_i64_114 : i64
    scf.if %287 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %286, %c3_i64_114 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %288 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_115 = arith.constant 3 : i64
    %289 = llvm.load %5 : !llvm.ptr -> i64
    %290 = arith.cmpi ult, %289, %c3_i64_115 : i64
    scf.if %290 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %289, %c3_i64_115 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %291 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_116 = arith.constant 1 : i64
    %292 = llvm.load %5 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c1_i64_116 : i64
    scf.if %293 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %292, %c1_i64_116 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c18_i32 = arith.constant 18 : i32
    %c3_i64_117 = arith.constant 3 : i64
    %294 = llvm.load %5 : !llvm.ptr -> i64
    %295 = arith.cmpi ult, %294, %c3_i64_117 : i64
    scf.if %295 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %294, %c3_i64_117 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c31_i32_118 = arith.constant 31 : i32
    %296 = arith.cmpi ule, %c18_i32, %c31_i32_118 : i32
    %297 = scf.if %296 -> (i32) {
      %522 = arith.shrui %291, %c18_i32 : i32
      scf.yield %522 : i32
    } else {
      %c0_i32_210 = arith.constant 0 : i32
      scf.yield %c0_i32_210 : i32
    }
    %c1_i64_119 = arith.constant 1 : i64
    %298 = llvm.load %5 : !llvm.ptr -> i64
    %299 = arith.cmpi ult, %298, %c1_i64_119 : i64
    scf.if %299 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %298, %c1_i64_119 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c7_i32 = arith.constant 7 : i32
    %c3_i64_120 = arith.constant 3 : i64
    %300 = llvm.load %5 : !llvm.ptr -> i64
    %301 = arith.cmpi ult, %300, %c3_i64_120 : i64
    scf.if %301 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %300, %c3_i64_120 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %302 = arith.andi %297, %c7_i32 : i32
    %c1_i64_121 = arith.constant 1 : i64
    %303 = llvm.load %5 : !llvm.ptr -> i64
    %304 = arith.cmpi ult, %303, %c1_i64_121 : i64
    scf.if %304 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %303, %c1_i64_121 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c240_i32 = arith.constant 240 : i32
    %c3_i64_122 = arith.constant 3 : i64
    %305 = llvm.load %5 : !llvm.ptr -> i64
    %306 = arith.cmpi ult, %305, %c3_i64_122 : i64
    scf.if %306 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %305, %c3_i64_122 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %307 = arith.ori %302, %c240_i32 : i32
    %c3_i64_123 = arith.constant 3 : i64
    %308 = llvm.load %5 : !llvm.ptr -> i64
    %309 = arith.cmpi ult, %308, %c3_i64_123 : i64
    scf.if %309 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %308, %c3_i64_123 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c12_i64_124 = arith.constant 12 : i64
    %310 = arith.extui %288 : i32 to i64
    %311 = arith.addi %310, %c12_i64_124 : i64
    %312 = llvm.getelementptr %10[%311] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %313 = arith.trunci %307 : i32 to i8
    llvm.store volatile %313, %312 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_125 = arith.constant 1 : i64
    %314 = llvm.load %5 : !llvm.ptr -> i64
    %315 = arith.cmpi ult, %314, %c1_i64_125 : i64
    scf.if %315 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %314, %c1_i64_125 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c3_i64_126 = arith.constant 3 : i64
    %316 = llvm.load %5 : !llvm.ptr -> i64
    %317 = arith.cmpi ult, %316, %c3_i64_126 : i64
    scf.if %317 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %316, %c3_i64_126 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    %c1_i64_127 = arith.constant 1 : i64
    %318 = llvm.load %5 : !llvm.ptr -> i64
    %319 = arith.cmpi ult, %318, %c1_i64_127 : i64
    scf.if %319 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %318, %c1_i64_127 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %c3_i64_128 = arith.constant 3 : i64
    %320 = llvm.load %5 : !llvm.ptr -> i64
    %321 = arith.cmpi ult, %320, %c3_i64_128 : i64
    scf.if %321 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %320, %c3_i64_128 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %322 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_129 = arith.constant 3 : i64
    %323 = llvm.load %5 : !llvm.ptr -> i64
    %324 = arith.cmpi ult, %323, %c3_i64_129 : i64
    scf.if %324 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %323, %c3_i64_129 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %325 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_130 = arith.constant 1 : i64
    %326 = llvm.load %5 : !llvm.ptr -> i64
    %327 = arith.cmpi ult, %326, %c1_i64_130 : i64
    scf.if %327 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %326, %c1_i64_130 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c63_i32_131 = arith.constant 63 : i32
    %c3_i64_132 = arith.constant 3 : i64
    %328 = llvm.load %5 : !llvm.ptr -> i64
    %329 = arith.cmpi ult, %328, %c3_i64_132 : i64
    scf.if %329 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %328, %c3_i64_132 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %330 = arith.andi %325, %c63_i32_131 : i32
    %c1_i64_133 = arith.constant 1 : i64
    %331 = llvm.load %5 : !llvm.ptr -> i64
    %332 = arith.cmpi ult, %331, %c1_i64_133 : i64
    scf.if %332 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %331, %c1_i64_133 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c128_i32_134 = arith.constant 128 : i32
    %c3_i64_135 = arith.constant 3 : i64
    %333 = llvm.load %5 : !llvm.ptr -> i64
    %334 = arith.cmpi ult, %333, %c3_i64_135 : i64
    scf.if %334 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %333, %c3_i64_135 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %335 = arith.ori %330, %c128_i32_134 : i32
    %c3_i64_136 = arith.constant 3 : i64
    %336 = llvm.load %5 : !llvm.ptr -> i64
    %337 = arith.cmpi ult, %336, %c3_i64_136 : i64
    scf.if %337 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %336, %c3_i64_136 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c14_i64_137 = arith.constant 14 : i64
    %338 = arith.extui %322 : i32 to i64
    %339 = arith.addi %338, %c14_i64_137 : i64
    %340 = llvm.getelementptr %10[%339] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %341 = arith.trunci %335 : i32 to i8
    llvm.store volatile %341, %340 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_138 = arith.constant 3 : i64
    %342 = llvm.load %5 : !llvm.ptr -> i64
    %343 = arith.cmpi ult, %342, %c3_i64_138 : i64
    scf.if %343 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %342, %c3_i64_138 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %344 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_139 = arith.constant 3 : i64
    %345 = llvm.load %5 : !llvm.ptr -> i64
    %346 = arith.cmpi ult, %345, %c3_i64_139 : i64
    scf.if %346 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %345, %c3_i64_139 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %347 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_140 = arith.constant 1 : i64
    %348 = llvm.load %5 : !llvm.ptr -> i64
    %349 = arith.cmpi ult, %348, %c1_i64_140 : i64
    scf.if %349 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %348, %c1_i64_140 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c12_i32_141 = arith.constant 12 : i32
    %c3_i64_142 = arith.constant 3 : i64
    %350 = llvm.load %5 : !llvm.ptr -> i64
    %351 = arith.cmpi ult, %350, %c3_i64_142 : i64
    scf.if %351 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %350, %c3_i64_142 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c31_i32_143 = arith.constant 31 : i32
    %352 = arith.cmpi ule, %c12_i32_141, %c31_i32_143 : i32
    %353 = scf.if %352 -> (i32) {
      %522 = arith.shrui %347, %c12_i32_141 : i32
      scf.yield %522 : i32
    } else {
      %c0_i32_210 = arith.constant 0 : i32
      scf.yield %c0_i32_210 : i32
    }
    %c1_i64_144 = arith.constant 1 : i64
    %354 = llvm.load %5 : !llvm.ptr -> i64
    %355 = arith.cmpi ult, %354, %c1_i64_144 : i64
    scf.if %355 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %354, %c1_i64_144 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c224_i32 = arith.constant 224 : i32
    %c3_i64_145 = arith.constant 3 : i64
    %356 = llvm.load %5 : !llvm.ptr -> i64
    %357 = arith.cmpi ult, %356, %c3_i64_145 : i64
    scf.if %357 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %356, %c3_i64_145 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %358 = arith.ori %353, %c224_i32 : i32
    %c3_i64_146 = arith.constant 3 : i64
    %359 = llvm.load %5 : !llvm.ptr -> i64
    %360 = arith.cmpi ult, %359, %c3_i64_146 : i64
    scf.if %360 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %359, %c3_i64_146 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c12_i64_147 = arith.constant 12 : i64
    %361 = arith.extui %344 : i32 to i64
    %362 = arith.addi %361, %c12_i64_147 : i64
    %363 = llvm.getelementptr %10[%362] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %364 = arith.trunci %358 : i32 to i8
    llvm.store volatile %364, %363 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_148 = arith.constant 3 : i64
    %365 = llvm.load %5 : !llvm.ptr -> i64
    %366 = arith.cmpi ult, %365, %c3_i64_148 : i64
    scf.if %366 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %365, %c3_i64_148 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %367 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_149 = arith.constant 3 : i64
    %368 = llvm.load %5 : !llvm.ptr -> i64
    %369 = arith.cmpi ult, %368, %c3_i64_149 : i64
    scf.if %369 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %368, %c3_i64_149 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %370 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_150 = arith.constant 1 : i64
    %371 = llvm.load %5 : !llvm.ptr -> i64
    %372 = arith.cmpi ult, %371, %c1_i64_150 : i64
    scf.if %372 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %371, %c1_i64_150 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c6_i32_151 = arith.constant 6 : i32
    %c3_i64_152 = arith.constant 3 : i64
    %373 = llvm.load %5 : !llvm.ptr -> i64
    %374 = arith.cmpi ult, %373, %c3_i64_152 : i64
    scf.if %374 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %373, %c3_i64_152 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c31_i32_153 = arith.constant 31 : i32
    %375 = arith.cmpi ule, %c6_i32_151, %c31_i32_153 : i32
    %376 = scf.if %375 -> (i32) {
      %522 = arith.shrui %370, %c6_i32_151 : i32
      scf.yield %522 : i32
    } else {
      %c0_i32_210 = arith.constant 0 : i32
      scf.yield %c0_i32_210 : i32
    }
    %c1_i64_154 = arith.constant 1 : i64
    %377 = llvm.load %5 : !llvm.ptr -> i64
    %378 = arith.cmpi ult, %377, %c1_i64_154 : i64
    scf.if %378 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %377, %c1_i64_154 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c63_i32_155 = arith.constant 63 : i32
    %c3_i64_156 = arith.constant 3 : i64
    %379 = llvm.load %5 : !llvm.ptr -> i64
    %380 = arith.cmpi ult, %379, %c3_i64_156 : i64
    scf.if %380 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %379, %c3_i64_156 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %381 = arith.andi %376, %c63_i32_155 : i32
    %c1_i64_157 = arith.constant 1 : i64
    %382 = llvm.load %5 : !llvm.ptr -> i64
    %383 = arith.cmpi ult, %382, %c1_i64_157 : i64
    scf.if %383 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %382, %c1_i64_157 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c128_i32_158 = arith.constant 128 : i32
    %c3_i64_159 = arith.constant 3 : i64
    %384 = llvm.load %5 : !llvm.ptr -> i64
    %385 = arith.cmpi ult, %384, %c3_i64_159 : i64
    scf.if %385 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %384, %c3_i64_159 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %386 = arith.ori %381, %c128_i32_158 : i32
    %c3_i64_160 = arith.constant 3 : i64
    %387 = llvm.load %5 : !llvm.ptr -> i64
    %388 = arith.cmpi ult, %387, %c3_i64_160 : i64
    scf.if %388 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %387, %c3_i64_160 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c13_i64_161 = arith.constant 13 : i64
    %389 = arith.extui %367 : i32 to i64
    %390 = arith.addi %389, %c13_i64_161 : i64
    %391 = llvm.getelementptr %10[%390] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %392 = arith.trunci %386 : i32 to i8
    llvm.store volatile %392, %391 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_162 = arith.constant 1 : i64
    %393 = llvm.load %5 : !llvm.ptr -> i64
    %394 = arith.cmpi ult, %393, %c1_i64_162 : i64
    scf.if %394 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %393, %c1_i64_162 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c3_i32 = arith.constant 3 : i32
    %c3_i64_163 = arith.constant 3 : i64
    %395 = llvm.load %5 : !llvm.ptr -> i64
    %396 = arith.cmpi ult, %395, %c3_i64_163 : i64
    scf.if %396 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %395, %c3_i64_163 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    %c1_i64_164 = arith.constant 1 : i64
    %397 = llvm.load %5 : !llvm.ptr -> i64
    %398 = arith.cmpi ult, %397, %c1_i64_164 : i64
    scf.if %398 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %397, %c1_i64_164 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %c3_i64_165 = arith.constant 3 : i64
    %399 = llvm.load %5 : !llvm.ptr -> i64
    %400 = arith.cmpi ult, %399, %c3_i64_165 : i64
    scf.if %400 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %399, %c3_i64_165 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %401 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_166 = arith.constant 3 : i64
    %402 = llvm.load %5 : !llvm.ptr -> i64
    %403 = arith.cmpi ult, %402, %c3_i64_166 : i64
    scf.if %403 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %402, %c3_i64_166 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %404 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_167 = arith.constant 1 : i64
    %405 = llvm.load %5 : !llvm.ptr -> i64
    %406 = arith.cmpi ult, %405, %c1_i64_167 : i64
    scf.if %406 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %405, %c1_i64_167 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c1_i32_168 = arith.constant 1 : i32
    %c3_i64_169 = arith.constant 3 : i64
    %407 = llvm.load %5 : !llvm.ptr -> i64
    %408 = arith.cmpi ult, %407, %c3_i64_169 : i64
    scf.if %408 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %407, %c3_i64_169 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %409 = arith.addi %404, %c1_i32_168 : i32
    %c3_i64_170 = arith.constant 3 : i64
    %410 = llvm.load %5 : !llvm.ptr -> i64
    %411 = arith.cmpi ult, %410, %c3_i64_170 : i64
    scf.if %411 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %410, %c3_i64_170 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c8_i64_171 = arith.constant 8 : i64
    %412 = arith.extui %401 : i32 to i64
    %413 = arith.addi %412, %c8_i64_171 : i64
    %414 = llvm.getelementptr %10[%413] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %409, %414 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_172 = arith.constant 3 : i64
    %415 = llvm.load %5 : !llvm.ptr -> i64
    %416 = arith.cmpi ult, %415, %c3_i64_172 : i64
    scf.if %416 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %415, %c3_i64_172 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %417 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_173 = arith.constant 3 : i64
    %418 = llvm.load %5 : !llvm.ptr -> i64
    %419 = arith.cmpi ult, %418, %c3_i64_173 : i64
    scf.if %419 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %418, %c3_i64_173 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %420 = arith.extui %417 : i32 to i64
    %421 = arith.addi %420, %c4_i64 : i64
    %422 = llvm.getelementptr %10[%421] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %423 = llvm.load volatile %422 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_174 = arith.constant 3 : i64
    %424 = llvm.load %5 : !llvm.ptr -> i64
    %425 = arith.cmpi ult, %424, %c3_i64_174 : i64
    scf.if %425 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %424, %c3_i64_174 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %426 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_175 = arith.constant 3 : i64
    %427 = llvm.load %5 : !llvm.ptr -> i64
    %428 = arith.cmpi ult, %427, %c3_i64_175 : i64
    scf.if %428 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %427, %c3_i64_175 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %429 = arith.addi %423, %426 : i32
    %c3_i64_176 = arith.constant 3 : i64
    %430 = llvm.load %5 : !llvm.ptr -> i64
    %431 = arith.cmpi ult, %430, %c3_i64_176 : i64
    scf.if %431 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %430, %c3_i64_176 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %432 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_177 = arith.constant 3 : i64
    %433 = llvm.load %5 : !llvm.ptr -> i64
    %434 = arith.cmpi ult, %433, %c3_i64_177 : i64
    scf.if %434 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %433, %c3_i64_177 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c0_i64_178 = arith.constant 0 : i64
    %435 = arith.extui %429 : i32 to i64
    %436 = arith.addi %435, %c0_i64_178 : i64
    %437 = llvm.getelementptr %10[%436] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %438 = arith.trunci %432 : i32 to i8
    llvm.store volatile %438, %437 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_179 = arith.constant 1 : i64
    %439 = llvm.load %5 : !llvm.ptr -> i64
    %440 = arith.cmpi ult, %439, %c1_i64_179 : i64
    scf.if %440 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %439, %c1_i64_179 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %c3_i64_180 = arith.constant 3 : i64
    %441 = llvm.load %5 : !llvm.ptr -> i64
    %442 = arith.cmpi ult, %441, %c3_i64_180 : i64
    scf.if %442 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %441, %c3_i64_180 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %443 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %444 = llvm.load %5 : !llvm.ptr -> i64
    %445 = arith.cmpi ult, %444, %c6_i64 : i64
    scf.if %445 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %444, %c6_i64 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    call @f57(%arg0, %443) : (!llvm.ptr, i32) -> ()
    %c1_i64_181 = arith.constant 1 : i64
    %446 = llvm.load %5 : !llvm.ptr -> i64
    %447 = arith.cmpi ult, %446, %c1_i64_181 : i64
    scf.if %447 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %446, %c1_i64_181 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %c3_i64_182 = arith.constant 3 : i64
    %448 = llvm.load %5 : !llvm.ptr -> i64
    %449 = arith.cmpi ult, %448, %c3_i64_182 : i64
    scf.if %449 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %448, %c3_i64_182 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %450 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_183 = arith.constant 3 : i64
    %451 = llvm.load %5 : !llvm.ptr -> i64
    %452 = arith.cmpi ult, %451, %c3_i64_183 : i64
    scf.if %452 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %451, %c3_i64_183 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c4_i64_184 = arith.constant 4 : i64
    %453 = arith.extui %450 : i32 to i64
    %454 = arith.addi %453, %c4_i64_184 : i64
    %455 = llvm.getelementptr %10[%454] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %456 = llvm.load volatile %455 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_185 = arith.constant 3 : i64
    %457 = llvm.load %5 : !llvm.ptr -> i64
    %458 = arith.cmpi ult, %457, %c3_i64_185 : i64
    scf.if %458 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %457, %c3_i64_185 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %459 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_186 = arith.constant 3 : i64
    %460 = llvm.load %5 : !llvm.ptr -> i64
    %461 = arith.cmpi ult, %460, %c3_i64_186 : i64
    scf.if %461 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %460, %c3_i64_186 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %462 = arith.addi %456, %459 : i32
    %c3_i64_187 = arith.constant 3 : i64
    %463 = llvm.load %5 : !llvm.ptr -> i64
    %464 = arith.cmpi ult, %463, %c3_i64_187 : i64
    scf.if %464 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %463, %c3_i64_187 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %465 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_188 = arith.constant 1 : i64
    %466 = llvm.load %5 : !llvm.ptr -> i64
    %467 = arith.cmpi ult, %466, %c1_i64_188 : i64
    scf.if %467 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %466, %c1_i64_188 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c12_i32_189 = arith.constant 12 : i32
    %c3_i64_190 = arith.constant 3 : i64
    %468 = llvm.load %5 : !llvm.ptr -> i64
    %469 = arith.cmpi ult, %468, %c3_i64_190 : i64
    scf.if %469 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %468, %c3_i64_190 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %470 = arith.addi %465, %c12_i32_189 : i32
    %c3_i64_191 = arith.constant 3 : i64
    %471 = llvm.load %5 : !llvm.ptr -> i64
    %472 = arith.cmpi ult, %471, %c3_i64_191 : i64
    scf.if %472 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %471, %c3_i64_191 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %473 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64_192 = arith.constant 6 : i64
    %474 = llvm.load %5 : !llvm.ptr -> i64
    %475 = arith.cmpi ult, %474, %c6_i64_192 : i64
    scf.if %475 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %474, %c6_i64_192 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %476 = call @f77(%arg0, %462, %470, %473) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_193 = arith.constant 1 : i64
    %477 = llvm.load %5 : !llvm.ptr -> i64
    %478 = arith.cmpi ult, %477, %c1_i64_193 : i64
    scf.if %478 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %477, %c1_i64_193 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c3_i64_194 = arith.constant 3 : i64
    %479 = llvm.load %5 : !llvm.ptr -> i64
    %480 = arith.cmpi ult, %479, %c3_i64_194 : i64
    scf.if %480 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %479, %c3_i64_194 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %481 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_195 = arith.constant 3 : i64
    %482 = llvm.load %5 : !llvm.ptr -> i64
    %483 = arith.cmpi ult, %482, %c3_i64_195 : i64
    scf.if %483 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %482, %c3_i64_195 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %484 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_196 = arith.constant 3 : i64
    %485 = llvm.load %5 : !llvm.ptr -> i64
    %486 = arith.cmpi ult, %485, %c3_i64_196 : i64
    scf.if %486 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %485, %c3_i64_196 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %487 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_197 = arith.constant 3 : i64
    %488 = llvm.load %5 : !llvm.ptr -> i64
    %489 = arith.cmpi ult, %488, %c3_i64_197 : i64
    scf.if %489 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %488, %c3_i64_197 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %490 = arith.addi %484, %487 : i32
    %c3_i64_198 = arith.constant 3 : i64
    %491 = llvm.load %5 : !llvm.ptr -> i64
    %492 = arith.cmpi ult, %491, %c3_i64_198 : i64
    scf.if %492 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %491, %c3_i64_198 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c8_i64_199 = arith.constant 8 : i64
    %493 = arith.extui %481 : i32 to i64
    %494 = arith.addi %493, %c8_i64_199 : i64
    %495 = llvm.getelementptr %10[%494] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %490, %495 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_200 = arith.constant 1 : i64
    %496 = llvm.load %5 : !llvm.ptr -> i64
    %497 = arith.cmpi ult, %496, %c1_i64_200 : i64
    scf.if %497 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %496, %c1_i64_200 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %c3_i64_201 = arith.constant 3 : i64
    %498 = llvm.load %5 : !llvm.ptr -> i64
    %499 = arith.cmpi ult, %498, %c3_i64_201 : i64
    scf.if %499 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %498, %c3_i64_201 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %500 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_202 = arith.constant 3 : i64
    %501 = llvm.load %5 : !llvm.ptr -> i64
    %502 = arith.cmpi ult, %501, %c3_i64_202 : i64
    scf.if %502 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %501, %c3_i64_202 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %503 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_203 = arith.constant 3 : i64
    %504 = llvm.load %5 : !llvm.ptr -> i64
    %505 = arith.cmpi ult, %504, %c3_i64_203 : i64
    scf.if %505 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %504, %c3_i64_203 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %506 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64_204 = arith.constant 6 : i64
    %507 = llvm.load %5 : !llvm.ptr -> i64
    %508 = arith.cmpi ult, %507, %c6_i64_204 : i64
    scf.if %508 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %507, %c6_i64_204 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    call @f54(%arg0, %500, %503, %506) : (!llvm.ptr, i32, i32, i32) -> ()
    %c3_i64_205 = arith.constant 3 : i64
    %509 = llvm.load %5 : !llvm.ptr -> i64
    %510 = arith.cmpi ult, %509, %c3_i64_205 : i64
    scf.if %510 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %509, %c3_i64_205 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %511 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_206 = arith.constant 3 : i64
    %512 = llvm.load %5 : !llvm.ptr -> i64
    %513 = arith.cmpi ult, %512, %c3_i64_206 : i64
    scf.if %513 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %512, %c3_i64_206 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    %c8_i64_207 = arith.constant 8 : i64
    %514 = arith.extui %511 : i32 to i64
    %515 = arith.addi %514, %c8_i64_207 : i64
    %516 = llvm.getelementptr %10[%515] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %517 = llvm.load volatile %516 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_208 = arith.constant 3 : i64
    %518 = llvm.load %5 : !llvm.ptr -> i64
    %519 = arith.cmpi ult, %518, %c3_i64_208 : i64
    scf.if %519 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %518, %c3_i64_208 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    llvm.store %517, %3 : i32, !llvm.ptr
    %c1_i64_209 = arith.constant 1 : i64
    %520 = llvm.load %5 : !llvm.ptr -> i64
    %521 = arith.cmpi ult, %520, %c1_i64_209 : i64
    scf.if %521 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %522 = arith.subi %520, %c1_i64_209 : i64
      llvm.store %522, %5 : i64, !llvm.ptr
    }
    cf.br ^bb13
  }
  func.func @f61(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_3 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %4, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %9 = llvm.load %5 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c1_i64 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %9, %c1_i64 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %11 = llvm.load %5 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %11, %c3_i64 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %14 = llvm.load %5 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c3_i64_4 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %14, %c3_i64_4 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %16 = arith.extui %13 : i32 to i64
    %17 = arith.addi %16, %c0_i64 : i64
    %18 = llvm.getelementptr %8[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_5 = arith.constant 3 : i64
    %20 = llvm.load %5 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_5 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %20, %c3_i64_5 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_6 = arith.constant 3 : i64
    %23 = llvm.load %5 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_6 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %23, %c3_i64_6 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %22 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_7 = arith.constant 3 : i64
    %29 = llvm.load %5 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_7 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %29, %c3_i64_7 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    llvm.store %28, %3 : i32, !llvm.ptr
    %c3_i64_8 = arith.constant 3 : i64
    %31 = llvm.load %5 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_8 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %31, %c3_i64_8 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %33 = arith.subi %19, %28 : i32
    %c3_i64_9 = arith.constant 3 : i64
    %34 = llvm.load %5 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c3_i64_9 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %34, %c3_i64_9 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_10 = arith.constant 3 : i64
    %37 = llvm.load %5 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c3_i64_10 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %37, %c3_i64_10 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %39 = arith.cmpi uge, %33, %36 : i32
    %40 = arith.extui %39 : i1 to i32
    %c1_i64_11 = arith.constant 1 : i64
    %41 = llvm.load %5 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c1_i64_11 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %41, %c1_i64_11 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c0_i32_12 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %40, %c0_i32_12 : i32
    cf.cond_br %43, ^bb3, ^bb4
  ^bb2(%44: i32):  // pred: ^bb3
    return %44 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %c3_i64_13 = arith.constant 3 : i64
    %45 = llvm.load %5 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_13 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %45, %c3_i64_13 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_14 = arith.constant 3 : i64
    %48 = llvm.load %5 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c3_i64_14 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %48, %c3_i64_14 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %50 = arith.extui %47 : i32 to i64
    %51 = arith.addi %50, %c4_i64 : i64
    %52 = llvm.getelementptr %8[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %54 = llvm.load %5 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %c3_i64_15 : i64
    scf.if %55 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %54, %c3_i64_15 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_16 = arith.constant 3 : i64
    %57 = llvm.load %5 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_16 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %57, %c3_i64_16 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %59 = arith.addi %53, %56 : i32
    %c3_i64_17 = arith.constant 3 : i64
    %60 = llvm.load %5 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_17 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %60, %c3_i64_17 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_18 = arith.constant 3 : i64
    %63 = llvm.load %5 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c3_i64_18 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %63, %c3_i64_18 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %66 = llvm.load %5 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c6_i64 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %66, %c6_i64 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %68 = call @f77(%arg0, %59, %62, %65) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_19 = arith.constant 1 : i64
    %69 = llvm.load %5 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c1_i64_19 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %69, %c1_i64_19 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c3_i64_20 = arith.constant 3 : i64
    %71 = llvm.load %5 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c3_i64_20 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %71, %c3_i64_20 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_21 = arith.constant 3 : i64
    %74 = llvm.load %5 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c3_i64_21 : i64
    scf.if %75 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %74, %c3_i64_21 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %76 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_22 = arith.constant 3 : i64
    %77 = llvm.load %5 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c3_i64_22 : i64
    scf.if %78 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %77, %c3_i64_22 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_23 = arith.constant 3 : i64
    %80 = llvm.load %5 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_23 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %80, %c3_i64_23 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %82 = arith.addi %76, %79 : i32
    %c3_i64_24 = arith.constant 3 : i64
    %83 = llvm.load %5 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_24 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %83, %c3_i64_24 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c8_i64_25 = arith.constant 8 : i64
    %85 = arith.extui %73 : i32 to i64
    %86 = arith.addi %85, %c8_i64_25 : i64
    %87 = llvm.getelementptr %8[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %87 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_26 = arith.constant 1 : i64
    %88 = llvm.load %5 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c1_i64_26 : i64
    scf.if %89 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %88, %c1_i64_26 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c0_i32_27 = arith.constant 0 : i32
    %c1_i64_28 = arith.constant 1 : i64
    %90 = llvm.load %5 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c1_i64_28 : i64
    scf.if %91 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %90, %c1_i64_28 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c0_i32_27 : i32)
  ^bb4:  // pred: ^bb1
    %c3_i64_29 = arith.constant 3 : i64
    %92 = llvm.load %5 : !llvm.ptr -> i64
    %93 = arith.cmpi ult, %92, %c3_i64_29 : i64
    scf.if %93 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %92, %c3_i64_29 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %94 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_30 = arith.constant 3 : i64
    %95 = llvm.load %5 : !llvm.ptr -> i64
    %96 = arith.cmpi ult, %95, %c3_i64_30 : i64
    scf.if %96 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %95, %c3_i64_30 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %97 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_31 = arith.constant 3 : i64
    %98 = llvm.load %5 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_31 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %98, %c3_i64_31 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64_32 = arith.constant 6 : i64
    %101 = llvm.load %5 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c6_i64_32 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %101, %c6_i64_32 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    call @f54(%arg0, %94, %97, %100) : (!llvm.ptr, i32, i32, i32) -> ()
    %c3_i64_33 = arith.constant 3 : i64
    %103 = llvm.load %5 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %c3_i64_33 : i64
    scf.if %104 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %103, %c3_i64_33 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_34 = arith.constant 3 : i64
    %106 = llvm.load %5 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c3_i64_34 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %106, %c3_i64_34 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    %c8_i64_35 = arith.constant 8 : i64
    %108 = arith.extui %105 : i32 to i64
    %109 = arith.addi %108, %c8_i64_35 : i64
    %110 = llvm.getelementptr %8[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_36 = arith.constant 3 : i64
    %112 = llvm.load %5 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c3_i64_36 : i64
    scf.if %113 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %112, %c3_i64_36 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    llvm.store %111, %3 : i32, !llvm.ptr
    %c1_i64_37 = arith.constant 1 : i64
    %114 = llvm.load %5 : !llvm.ptr -> i64
    %115 = arith.cmpi ult, %114, %c1_i64_37 : i64
    scf.if %115 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %116 = arith.subi %114, %c1_i64_37 : i64
      llvm.store %116, %5 : i64, !llvm.ptr
    }
    cf.br ^bb3
  }
  func.func @f62(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %4 = llvm.load %3 : !llvm.ptr -> i64
    %5 = arith.cmpi ult, %4, %c3_i64 : i64
    scf.if %5 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %4, %c3_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64_2 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %7, %c3_i64_2 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c6_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %10, %c6_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    call @f60(%arg0, %6, %9) : (!llvm.ptr, i32, i32) -> ()
    %c1_i64 = arith.constant 1 : i64
    %12 = llvm.load %3 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c1_i64 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %12, %c1_i64 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_3 = arith.constant 1 : i64
    %14 = llvm.load %3 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c1_i64_3 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %17 = arith.subi %14, %c1_i64_3 : i64
      llvm.store %17, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%16: i32):  // pred: ^bb1
    return %16 : i32
  }
  func.func @f63(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_2 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %3, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %10 = llvm.load %4 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c3_i64 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %10, %c3_i64 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %12 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %13 = llvm.load %4 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c1_i64 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %13, %c1_i64 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_3 = arith.constant 3 : i64
    %15 = llvm.load %4 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c3_i64_3 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %15, %c3_i64_3 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %17 = arith.subi %12, %c32_i32 : i32
    %c3_i64_4 = arith.constant 3 : i64
    %18 = llvm.load %4 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_4 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %18, %c3_i64_4 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    llvm.store %17, %2 : i32, !llvm.ptr
    %c3_i64_5 = arith.constant 3 : i64
    %20 = llvm.load %4 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64_5 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %20, %c3_i64_5 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    llvm.store %17, %6 : i32, !llvm.ptr
    %c3_i64_6 = arith.constant 3 : i64
    %22 = llvm.load %4 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c3_i64_6 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %22, %c3_i64_6 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_7 = arith.constant 1 : i64
    %25 = llvm.load %4 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_7 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %25, %c1_i64_7 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_8 = arith.constant 3 : i64
    %27 = llvm.load %4 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c3_i64_8 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %27, %c3_i64_8 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %29 = arith.addi %24, %c16_i32 : i32
    %c3_i64_9 = arith.constant 3 : i64
    %30 = llvm.load %4 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c3_i64_9 : i64
    scf.if %31 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %30, %c3_i64_9 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_10 = arith.constant 1 : i64
    %33 = llvm.load %4 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c1_i64_10 : i64
    scf.if %34 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %33, %c1_i64_10 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c16_i32_11 = arith.constant 16 : i32
    %c3_i64_12 = arith.constant 3 : i64
    %35 = llvm.load %4 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %c3_i64_12 : i64
    scf.if %36 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %35, %c3_i64_12 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %37 = arith.addi %32, %c16_i32_11 : i32
    %c3_i64_13 = arith.constant 3 : i64
    %38 = llvm.load %4 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_13 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %38, %c3_i64_13 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %40 = arith.extui %37 : i32 to i64
    %41 = arith.addi %40, %c0_i64 : i64
    %42 = llvm.getelementptr %9[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_14 = arith.constant 3 : i64
    %44 = llvm.load %4 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c3_i64_14 : i64
    scf.if %45 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %44, %c3_i64_14 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c0_i64_15 = arith.constant 0 : i64
    %46 = arith.extui %29 : i32 to i64
    %47 = arith.addi %46, %c0_i64_15 : i64
    %48 = llvm.getelementptr %9[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %43, %48 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_16 = arith.constant 3 : i64
    %49 = llvm.load %4 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c3_i64_16 : i64
    scf.if %50 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %49, %c3_i64_16 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %51 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_17 = arith.constant 1 : i64
    %52 = llvm.load %4 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c1_i64_17 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %52, %c1_i64_17 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_18 = arith.constant 3 : i64
    %54 = llvm.load %4 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %c3_i64_18 : i64
    scf.if %55 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %54, %c3_i64_18 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %56 = arith.addi %51, %c8_i32 : i32
    %c3_i64_19 = arith.constant 3 : i64
    %57 = llvm.load %4 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c3_i64_19 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %57, %c3_i64_19 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %59 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_20 = arith.constant 1 : i64
    %60 = llvm.load %4 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c1_i64_20 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %60, %c1_i64_20 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c8_i32_21 = arith.constant 8 : i32
    %c3_i64_22 = arith.constant 3 : i64
    %62 = llvm.load %4 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c3_i64_22 : i64
    scf.if %63 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %62, %c3_i64_22 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %64 = arith.addi %59, %c8_i32_21 : i32
    %c3_i64_23 = arith.constant 3 : i64
    %65 = llvm.load %4 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c3_i64_23 : i64
    scf.if %66 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %65, %c3_i64_23 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c0_i64_24 = arith.constant 0 : i64
    %67 = arith.extui %64 : i32 to i64
    %68 = arith.addi %67, %c0_i64_24 : i64
    %69 = llvm.getelementptr %9[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_25 = arith.constant 3 : i64
    %71 = llvm.load %4 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c3_i64_25 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %71, %c3_i64_25 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c0_i64_26 = arith.constant 0 : i64
    %73 = arith.extui %56 : i32 to i64
    %74 = arith.addi %73, %c0_i64_26 : i64
    %75 = llvm.getelementptr %9[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %70, %75 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_27 = arith.constant 3 : i64
    %76 = llvm.load %4 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c3_i64_27 : i64
    scf.if %77 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %76, %c3_i64_27 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_28 = arith.constant 1 : i64
    %79 = llvm.load %4 : !llvm.ptr -> i64
    %80 = arith.cmpi ult, %79, %c1_i64_28 : i64
    scf.if %80 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %79, %c1_i64_28 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c1_i32_29 = arith.constant 1 : i32
    %c3_i64_30 = arith.constant 3 : i64
    %81 = llvm.load %4 : !llvm.ptr -> i64
    %82 = arith.cmpi ult, %81, %c3_i64_30 : i64
    scf.if %82 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %81, %c3_i64_30 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %83 = arith.extui %78 : i32 to i64
    %84 = arith.addi %83, %c28_i64 : i64
    %85 = llvm.getelementptr %9[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = arith.trunci %c1_i32_29 : i32 to i16
    llvm.store volatile %86, %85 {alignment = 1 : i64} : i16, !llvm.ptr
    %c3_i64_31 = arith.constant 3 : i64
    %87 = llvm.load %4 : !llvm.ptr -> i64
    %88 = arith.cmpi ult, %87, %c3_i64_31 : i64
    scf.if %88 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %87, %c3_i64_31 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_32 = arith.constant 3 : i64
    %90 = llvm.load %4 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c3_i64_32 : i64
    scf.if %91 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %90, %c3_i64_32 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %92 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_33 = arith.constant 3 : i64
    %93 = llvm.load %4 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c3_i64_33 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %93, %c3_i64_33 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %95 = arith.extui %89 : i32 to i64
    %96 = arith.addi %95, %c24_i64 : i64
    %97 = llvm.getelementptr %9[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_34 = arith.constant 3 : i64
    %98 = llvm.load %4 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_34 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %98, %c3_i64_34 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_35 = arith.constant 3 : i64
    %101 = llvm.load %4 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c3_i64_35 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %101, %c3_i64_35 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %103 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_36 = arith.constant 3 : i64
    %104 = llvm.load %4 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c3_i64_36 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %104, %c3_i64_36 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c0_i64_37 = arith.constant 0 : i64
    %106 = arith.extui %103 : i32 to i64
    %107 = arith.addi %106, %c0_i64_37 : i64
    %108 = llvm.getelementptr %9[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %109 = llvm.load volatile %108 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c3_i64_38 = arith.constant 3 : i64
    %110 = llvm.load %4 : !llvm.ptr -> i64
    %111 = arith.cmpi ult, %110, %c3_i64_38 : i64
    scf.if %111 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %110, %c3_i64_38 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c0_i64_39 = arith.constant 0 : i64
    %112 = arith.extui %100 : i32 to i64
    %113 = arith.addi %112, %c0_i64_39 : i64
    %114 = llvm.getelementptr %9[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %114 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_40 = arith.constant 3 : i64
    %115 = llvm.load %4 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c3_i64_40 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %115, %c3_i64_40 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %117 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %118 = llvm.load %4 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c6_i64 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %118, %c6_i64 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    call @f38(%arg0, %117) : (!llvm.ptr, i32) -> ()
    %c0_i64_41 = arith.constant 0 : i64
    %120 = llvm.load %4 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c0_i64_41 : i64
    scf.if %121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %122 = arith.subi %120, %c0_i64_41 : i64
      llvm.store %122, %4 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f64(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_8 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %9, %10 : i64, !llvm.ptr
    %11 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> i32
    %16 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> i64
    %20 = arith.trunci %19 : i64 to i32
    %21 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %21 : !llvm.ptr -> i32
    %23 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %17 : !llvm.ptr -> i64
    %25 = arith.trunci %24 : i64 to i32
    %26 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %17 : !llvm.ptr -> i64
    %28 = arith.trunci %27 : i64 to i32
    %29 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.load %17 : !llvm.ptr -> i64
    %31 = arith.trunci %30 : i64 to i32
    %32 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.load %17 : !llvm.ptr -> i64
    %34 = arith.trunci %33 : i64 to i32
    %35 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.load %17 : !llvm.ptr -> i64
    %37 = arith.trunci %36 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %38 = llvm.load %10 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c1_i64 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %38, %c1_i64 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %40 = llvm.load %10 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c3_i64 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %40, %c3_i64 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_9 = arith.constant 3 : i64
    %43 = llvm.load %10 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c3_i64_9 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %43, %c3_i64_9 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %45 = arith.extui %42 : i32 to i64
    %46 = arith.addi %45, %c0_i64 : i64
    %47 = llvm.getelementptr %13[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_10 = arith.constant 3 : i64
    %49 = llvm.load %10 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c3_i64_10 : i64
    scf.if %50 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %49, %c3_i64_10 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %48, %3 : i32, !llvm.ptr
    %c3_i64_11 = arith.constant 3 : i64
    %51 = llvm.load %10 : !llvm.ptr -> i64
    %52 = arith.cmpi ult, %51, %c3_i64_11 : i64
    scf.if %52 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %51, %c3_i64_11 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_12 = arith.constant 3 : i64
    %54 = llvm.load %10 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %c3_i64_12 : i64
    scf.if %55 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %54, %c3_i64_12 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %13[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_13 = arith.constant 3 : i64
    %60 = llvm.load %10 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_13 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %60, %c3_i64_13 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %59, %4 : i32, !llvm.ptr
    %c3_i64_14 = arith.constant 3 : i64
    %62 = llvm.load %10 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c3_i64_14 : i64
    scf.if %63 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %62, %c3_i64_14 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %64 = arith.ori %48, %59 : i32
    %c3_i64_15 = arith.constant 3 : i64
    %65 = llvm.load %10 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c3_i64_15 : i64
    scf.if %66 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %65, %c3_i64_15 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_16 = arith.constant 0 : i32
    %67 = arith.cmpi eq, %64, %c0_i32_16 : i32
    %68 = arith.extui %67 : i1 to i32
    %c1_i64_17 = arith.constant 1 : i64
    %69 = llvm.load %10 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c1_i64_17 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %69, %c1_i64_17 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_18 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %68, %c0_i32_18 : i32
    cf.cond_br %71, ^bb3, ^bb4
  ^bb2(%72: i32):  // 5 preds: ^bb39, ^bb62, ^bb80, ^bb82, ^bb112
    return %72 : i32
  ^bb3:  // pred: ^bb1
    %c3_i64_19 = arith.constant 3 : i64
    %73 = llvm.load %10 : !llvm.ptr -> i64
    %74 = arith.cmpi ult, %73, %c3_i64_19 : i64
    scf.if %74 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %73, %c3_i64_19 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %75 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_20 = arith.constant 3 : i64
    %76 = llvm.load %10 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c3_i64_20 : i64
    scf.if %77 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %76, %c3_i64_20 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %78 = arith.extui %75 : i32 to i64
    %79 = arith.addi %78, %c20_i64 : i64
    %80 = llvm.getelementptr %13[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_21 = arith.constant 3 : i64
    %82 = llvm.load %10 : !llvm.ptr -> i64
    %83 = arith.cmpi ult, %82, %c3_i64_21 : i64
    scf.if %83 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %82, %c3_i64_21 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %84 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_22 = arith.constant 3 : i64
    %85 = llvm.load %10 : !llvm.ptr -> i64
    %86 = arith.cmpi ult, %85, %c3_i64_22 : i64
    scf.if %86 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %85, %c3_i64_22 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %87 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_23 = arith.constant 3 : i64
    %88 = llvm.load %10 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c3_i64_23 : i64
    scf.if %89 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %88, %c3_i64_23 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %90 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_24 = arith.constant 3 : i64
    %91 = llvm.load %10 : !llvm.ptr -> i64
    %92 = arith.cmpi ult, %91, %c3_i64_24 : i64
    scf.if %92 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %91, %c3_i64_24 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %93 = arith.extui %90 : i32 to i64
    %94 = arith.addi %93, %c24_i64 : i64
    %95 = llvm.getelementptr %13[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_25 = arith.constant 3 : i64
    %97 = llvm.load %10 : !llvm.ptr -> i64
    %98 = arith.cmpi ult, %97, %c3_i64_25 : i64
    scf.if %98 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %97, %c3_i64_25 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %99 = arith.extui %96 : i32 to i64
    %100 = arith.addi %99, %c12_i64 : i64
    %101 = llvm.getelementptr %13[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64 = arith.constant 7 : i64
    %103 = llvm.load %10 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %c7_i64 : i64
    scf.if %104 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %103, %c7_i64 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %105 = arith.cmpi ult, %102, %37 : i32
    cf.cond_br %105, ^bb106, ^bb107
  ^bb4:  // pred: ^bb1
    %c1_i64_26 = arith.constant 1 : i64
    %106 = llvm.load %10 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c1_i64_26 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %106, %c1_i64_26 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_27 = arith.constant 3 : i64
    %108 = llvm.load %10 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %108, %c3_i64_27 : i64
    scf.if %109 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %108, %c3_i64_27 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %110 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_28 = arith.constant 3 : i64
    %111 = llvm.load %10 : !llvm.ptr -> i64
    %112 = arith.cmpi ult, %111, %c3_i64_28 : i64
    scf.if %112 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %111, %c3_i64_28 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_29 = arith.constant 0 : i32
    %113 = arith.cmpi eq, %110, %c0_i32_29 : i32
    %114 = arith.extui %113 : i1 to i32
    %c1_i64_30 = arith.constant 1 : i64
    %115 = llvm.load %10 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c1_i64_30 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %115, %c1_i64_30 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_31 = arith.constant 0 : i32
    %117 = arith.cmpi ne, %114, %c0_i32_31 : i32
    cf.cond_br %117, ^bb5, ^bb6
  ^bb5:  // 4 preds: ^bb4, ^bb7, ^bb11, ^bb24
    %c1_i64_32 = arith.constant 1 : i64
    %118 = llvm.load %10 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c1_i64_32 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %118, %c1_i64_32 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_33 = arith.constant 3 : i64
    %120 = llvm.load %10 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c3_i64_33 : i64
    scf.if %121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %120, %c3_i64_33 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %122 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_34 = arith.constant 1 : i64
    %123 = llvm.load %10 : !llvm.ptr -> i64
    %124 = arith.cmpi ult, %123, %c1_i64_34 : i64
    scf.if %124 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %123, %c1_i64_34 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_35 = arith.constant 0 : i32
    %125 = arith.cmpi ne, %122, %c0_i32_35 : i32
    cf.cond_br %125, ^bb31, ^bb32
  ^bb6:  // pred: ^bb4
    %c3_i64_36 = arith.constant 3 : i64
    %126 = llvm.load %10 : !llvm.ptr -> i64
    %127 = arith.cmpi ult, %126, %c3_i64_36 : i64
    scf.if %127 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %126, %c3_i64_36 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %128 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_37 = arith.constant 3 : i64
    %129 = llvm.load %10 : !llvm.ptr -> i64
    %130 = arith.cmpi ult, %129, %c3_i64_37 : i64
    scf.if %130 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %129, %c3_i64_37 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_38 = arith.constant 3 : i64
    %132 = llvm.load %10 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c3_i64_38 : i64
    scf.if %133 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %132, %c3_i64_38 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %134 = arith.addi %128, %131 : i32
    %c3_i64_39 = arith.constant 3 : i64
    %135 = llvm.load %10 : !llvm.ptr -> i64
    %136 = arith.cmpi ult, %135, %c3_i64_39 : i64
    scf.if %136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %135, %c3_i64_39 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %134, %5 : i32, !llvm.ptr
    %c1_i64_40 = arith.constant 1 : i64
    %137 = llvm.load %10 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c1_i64_40 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %137, %c1_i64_40 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i64_41 = arith.constant 1 : i64
    %139 = llvm.load %10 : !llvm.ptr -> i64
    %140 = arith.cmpi ult, %139, %c1_i64_41 : i64
    scf.if %140 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %139, %c1_i64_41 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_42 = arith.constant 3 : i64
    %141 = llvm.load %10 : !llvm.ptr -> i64
    %142 = arith.cmpi ult, %141, %c3_i64_42 : i64
    scf.if %142 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %141, %c3_i64_42 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %143 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_43 = arith.constant 3 : i64
    %144 = llvm.load %10 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c3_i64_43 : i64
    scf.if %145 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %144, %c3_i64_43 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c12_i64_44 = arith.constant 12 : i64
    %146 = arith.extui %143 : i32 to i64
    %147 = arith.addi %146, %c12_i64_44 : i64
    %148 = llvm.getelementptr %13[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %149 = llvm.load volatile %148 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_45 = arith.constant 3 : i64
    %150 = llvm.load %10 : !llvm.ptr -> i64
    %151 = arith.cmpi ult, %150, %c3_i64_45 : i64
    scf.if %151 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %150, %c3_i64_45 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %149, %6 : i32, !llvm.ptr
    %c1_i64_46 = arith.constant 1 : i64
    %152 = llvm.load %10 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c1_i64_46 : i64
    scf.if %153 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %152, %c1_i64_46 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_47 = arith.constant 0 : i32
    %154 = arith.cmpi ne, %149, %c0_i32_47 : i32
    cf.cond_br %154, ^bb8, ^bb9
  ^bb7:  // 2 preds: ^bb9, ^bb10
    %c3_i64_48 = arith.constant 3 : i64
    %155 = llvm.load %10 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %c3_i64_48 : i64
    scf.if %156 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %155, %c3_i64_48 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %157 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_49 = arith.constant 3 : i64
    %158 = llvm.load %10 : !llvm.ptr -> i64
    %159 = arith.cmpi ult, %158, %c3_i64_49 : i64
    scf.if %159 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %158, %c3_i64_49 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %160 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_50 = arith.constant 3 : i64
    %161 = llvm.load %10 : !llvm.ptr -> i64
    %162 = arith.cmpi ult, %161, %c3_i64_50 : i64
    scf.if %162 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %161, %c3_i64_50 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %163 = arith.cmpi eq, %157, %160 : i32
    %164 = arith.extui %163 : i1 to i32
    %c1_i64_51 = arith.constant 1 : i64
    %165 = llvm.load %10 : !llvm.ptr -> i64
    %166 = arith.cmpi ult, %165, %c1_i64_51 : i64
    scf.if %166 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %165, %c1_i64_51 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_52 = arith.constant 0 : i32
    %167 = arith.cmpi ne, %164, %c0_i32_52 : i32
    cf.cond_br %167, ^bb5, ^bb21
  ^bb8:  // pred: ^bb6
    %c1_i64_53 = arith.constant 1 : i64
    %168 = llvm.load %10 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c1_i64_53 : i64
    scf.if %169 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %168, %c1_i64_53 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_54 = arith.constant 0 : i32
    %c3_i64_55 = arith.constant 3 : i64
    %170 = llvm.load %10 : !llvm.ptr -> i64
    %171 = arith.cmpi ult, %170, %c3_i64_55 : i64
    scf.if %171 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %170, %c3_i64_55 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_54, %7 : i32, !llvm.ptr
    %c3_i64_56 = arith.constant 3 : i64
    %172 = llvm.load %10 : !llvm.ptr -> i64
    %173 = arith.cmpi ult, %172, %c3_i64_56 : i64
    scf.if %173 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %172, %c3_i64_56 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %174 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_57 = arith.constant 3 : i64
    %175 = llvm.load %10 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c3_i64_57 : i64
    scf.if %176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %175, %c3_i64_57 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %174, %8 : i32, !llvm.ptr
    %c1_i64_58 = arith.constant 1 : i64
    %177 = llvm.load %10 : !llvm.ptr -> i64
    %178 = arith.cmpi ult, %177, %c1_i64_58 : i64
    scf.if %178 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %177, %c1_i64_58 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb11
  ^bb9:  // pred: ^bb6
    %c1_i64_59 = arith.constant 1 : i64
    %179 = llvm.load %10 : !llvm.ptr -> i64
    %180 = arith.cmpi ult, %179, %c1_i64_59 : i64
    scf.if %180 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %179, %c1_i64_59 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_60 = arith.constant 0 : i32
    %c3_i64_61 = arith.constant 3 : i64
    %181 = llvm.load %10 : !llvm.ptr -> i64
    %182 = arith.cmpi ult, %181, %c3_i64_61 : i64
    scf.if %182 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %181, %c3_i64_61 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_60, %7 : i32, !llvm.ptr
    %c3_i64_62 = arith.constant 3 : i64
    %183 = llvm.load %10 : !llvm.ptr -> i64
    %184 = arith.cmpi ult, %183, %c3_i64_62 : i64
    scf.if %184 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %183, %c3_i64_62 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %185 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_63 = arith.constant 3 : i64
    %186 = llvm.load %10 : !llvm.ptr -> i64
    %187 = arith.cmpi ult, %186, %c3_i64_63 : i64
    scf.if %187 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %186, %c3_i64_63 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %185, %8 : i32, !llvm.ptr
    %c1_i64_64 = arith.constant 1 : i64
    %188 = llvm.load %10 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c1_i64_64 : i64
    scf.if %189 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %188, %c1_i64_64 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb7
  ^bb10:  // pred: ^bb20
    %c1_i64_65 = arith.constant 1 : i64
    %190 = llvm.load %10 : !llvm.ptr -> i64
    %191 = arith.cmpi ult, %190, %c1_i64_65 : i64
    scf.if %191 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %190, %c1_i64_65 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb8, ^bb13
    %c3_i64_66 = arith.constant 3 : i64
    %192 = llvm.load %10 : !llvm.ptr -> i64
    %193 = arith.cmpi ult, %192, %c3_i64_66 : i64
    scf.if %193 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %192, %c3_i64_66 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %194 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_67 = arith.constant 3 : i64
    %195 = llvm.load %10 : !llvm.ptr -> i64
    %196 = arith.cmpi ult, %195, %c3_i64_67 : i64
    scf.if %196 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %195, %c3_i64_67 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %194, %4 : i32, !llvm.ptr
    %c3_i64_68 = arith.constant 3 : i64
    %197 = llvm.load %10 : !llvm.ptr -> i64
    %198 = arith.cmpi ult, %197, %c3_i64_68 : i64
    scf.if %198 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %197, %c3_i64_68 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %199 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_69 = arith.constant 3 : i64
    %200 = llvm.load %10 : !llvm.ptr -> i64
    %201 = arith.cmpi ult, %200, %c3_i64_69 : i64
    scf.if %201 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %200, %c3_i64_69 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %202 = arith.cmpi eq, %194, %199 : i32
    %203 = arith.extui %202 : i1 to i32
    %c1_i64_70 = arith.constant 1 : i64
    %204 = llvm.load %10 : !llvm.ptr -> i64
    %205 = arith.cmpi ult, %204, %c1_i64_70 : i64
    scf.if %205 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %204, %c1_i64_70 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_71 = arith.constant 0 : i32
    %206 = arith.cmpi ne, %203, %c0_i32_71 : i32
    cf.cond_br %206, ^bb5, ^bb12
  ^bb12:  // pred: ^bb11
    %c1_i64_72 = arith.constant 1 : i64
    %207 = llvm.load %10 : !llvm.ptr -> i64
    %208 = arith.cmpi ult, %207, %c1_i64_72 : i64
    scf.if %208 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %207, %c1_i64_72 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i64_73 = arith.constant 1 : i64
    %209 = llvm.load %10 : !llvm.ptr -> i64
    %210 = arith.cmpi ult, %209, %c1_i64_73 : i64
    scf.if %210 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %209, %c1_i64_73 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_74 = arith.constant 3 : i64
    %211 = llvm.load %10 : !llvm.ptr -> i64
    %212 = arith.cmpi ult, %211, %c3_i64_74 : i64
    scf.if %212 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %211, %c3_i64_74 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %213 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_75 = arith.constant 3 : i64
    %214 = llvm.load %10 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c3_i64_75 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %214, %c3_i64_75 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i64_76 = arith.constant 0 : i64
    %216 = arith.extui %213 : i32 to i64
    %217 = arith.addi %216, %c0_i64_76 : i64
    %218 = llvm.getelementptr %13[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %219 = llvm.load volatile %218 {alignment = 1 : i64} : !llvm.ptr -> i8
    %220 = arith.extsi %219 : i8 to i32
    %c3_i64_77 = arith.constant 3 : i64
    %221 = llvm.load %10 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c3_i64_77 : i64
    scf.if %222 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %221, %c3_i64_77 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %220, %8 : i32, !llvm.ptr
    %c1_i64_78 = arith.constant 1 : i64
    %223 = llvm.load %10 : !llvm.ptr -> i64
    %224 = arith.cmpi ult, %223, %c1_i64_78 : i64
    scf.if %224 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %223, %c1_i64_78 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_79 = arith.constant 3 : i64
    %225 = llvm.load %10 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c3_i64_79 : i64
    scf.if %226 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %225, %c3_i64_79 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %227 = arith.cmpi sle, %220, %c-1_i32 : i32
    %228 = arith.extui %227 : i1 to i32
    %c1_i64_80 = arith.constant 1 : i64
    %229 = llvm.load %10 : !llvm.ptr -> i64
    %230 = arith.cmpi ult, %229, %c1_i64_80 : i64
    scf.if %230 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %229, %c1_i64_80 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_81 = arith.constant 0 : i32
    %231 = arith.cmpi ne, %228, %c0_i32_81 : i32
    cf.cond_br %231, ^bb14, ^bb15
  ^bb13:  // 4 preds: ^bb15, ^bb17, ^bb18, ^bb19
    %c3_i64_82 = arith.constant 3 : i64
    %232 = llvm.load %10 : !llvm.ptr -> i64
    %233 = arith.cmpi ult, %232, %c3_i64_82 : i64
    scf.if %233 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %232, %c3_i64_82 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %234 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_83 = arith.constant 3 : i64
    %235 = llvm.load %10 : !llvm.ptr -> i64
    %236 = arith.cmpi ult, %235, %c3_i64_83 : i64
    scf.if %236 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %235, %c3_i64_83 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %237 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_84 = arith.constant 3 : i64
    %238 = llvm.load %10 : !llvm.ptr -> i64
    %239 = arith.cmpi ult, %238, %c3_i64_84 : i64
    scf.if %239 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %238, %c3_i64_84 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %240 = arith.subi %234, %237 : i32
    %c3_i64_85 = arith.constant 3 : i64
    %241 = llvm.load %10 : !llvm.ptr -> i64
    %242 = arith.cmpi ult, %241, %c3_i64_85 : i64
    scf.if %242 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %241, %c3_i64_85 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %243 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_86 = arith.constant 3 : i64
    %244 = llvm.load %10 : !llvm.ptr -> i64
    %245 = arith.cmpi ult, %244, %c3_i64_86 : i64
    scf.if %245 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %244, %c3_i64_86 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %246 = arith.addi %240, %243 : i32
    %c3_i64_87 = arith.constant 3 : i64
    %247 = llvm.load %10 : !llvm.ptr -> i64
    %248 = arith.cmpi ult, %247, %c3_i64_87 : i64
    scf.if %248 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %247, %c3_i64_87 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %246, %7 : i32, !llvm.ptr
    %c3_i64_88 = arith.constant 3 : i64
    %249 = llvm.load %10 : !llvm.ptr -> i64
    %250 = arith.cmpi ult, %249, %c3_i64_88 : i64
    scf.if %250 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %249, %c3_i64_88 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %251 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_89 = arith.constant 1 : i64
    %252 = llvm.load %10 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c1_i64_89 : i64
    scf.if %253 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %252, %c1_i64_89 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-1_i32_90 = arith.constant -1 : i32
    %c3_i64_91 = arith.constant 3 : i64
    %254 = llvm.load %10 : !llvm.ptr -> i64
    %255 = arith.cmpi ult, %254, %c3_i64_91 : i64
    scf.if %255 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %254, %c3_i64_91 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %256 = arith.addi %251, %c-1_i32_90 : i32
    %c3_i64_92 = arith.constant 3 : i64
    %257 = llvm.load %10 : !llvm.ptr -> i64
    %258 = arith.cmpi ult, %257, %c3_i64_92 : i64
    scf.if %258 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %257, %c3_i64_92 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %256, %6 : i32, !llvm.ptr
    %c1_i64_93 = arith.constant 1 : i64
    %259 = llvm.load %10 : !llvm.ptr -> i64
    %260 = arith.cmpi ult, %259, %c1_i64_93 : i64
    scf.if %260 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %259, %c1_i64_93 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_94 = arith.constant 0 : i32
    %261 = arith.cmpi ne, %256, %c0_i32_94 : i32
    cf.cond_br %261, ^bb11, ^bb20
  ^bb14:  // pred: ^bb12
    %c1_i64_95 = arith.constant 1 : i64
    %262 = llvm.load %10 : !llvm.ptr -> i64
    %263 = arith.cmpi ult, %262, %c1_i64_95 : i64
    scf.if %263 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %262, %c1_i64_95 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_96 = arith.constant 3 : i64
    %264 = llvm.load %10 : !llvm.ptr -> i64
    %265 = arith.cmpi ult, %264, %c3_i64_96 : i64
    scf.if %265 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %264, %c3_i64_96 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %266 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i64_97 = arith.constant 1 : i64
    %267 = llvm.load %10 : !llvm.ptr -> i64
    %268 = arith.cmpi ult, %267, %c1_i64_97 : i64
    scf.if %268 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %267, %c1_i64_97 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-32_i32 = arith.constant -32 : i32
    %c3_i64_98 = arith.constant 3 : i64
    %269 = llvm.load %10 : !llvm.ptr -> i64
    %270 = arith.cmpi ult, %269, %c3_i64_98 : i64
    scf.if %270 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %269, %c3_i64_98 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %271 = arith.cmpi uge, %266, %c-32_i32 : i32
    %272 = arith.extui %271 : i1 to i32
    %c1_i64_99 = arith.constant 1 : i64
    %273 = llvm.load %10 : !llvm.ptr -> i64
    %274 = arith.cmpi ult, %273, %c1_i64_99 : i64
    scf.if %274 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %273, %c1_i64_99 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_100 = arith.constant 0 : i32
    %275 = arith.cmpi ne, %272, %c0_i32_100 : i32
    cf.cond_br %275, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %c3_i64_101 = arith.constant 3 : i64
    %276 = llvm.load %10 : !llvm.ptr -> i64
    %277 = arith.cmpi ult, %276, %c3_i64_101 : i64
    scf.if %277 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %276, %c3_i64_101 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %278 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_102 = arith.constant 1 : i64
    %279 = llvm.load %10 : !llvm.ptr -> i64
    %280 = arith.cmpi ult, %279, %c1_i64_102 : i64
    scf.if %280 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %279, %c1_i64_102 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i32_103 = arith.constant 1 : i32
    %c3_i64_104 = arith.constant 3 : i64
    %281 = llvm.load %10 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c3_i64_104 : i64
    scf.if %282 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %281, %c3_i64_104 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %283 = arith.addi %278, %c1_i32_103 : i32
    %c3_i64_105 = arith.constant 3 : i64
    %284 = llvm.load %10 : !llvm.ptr -> i64
    %285 = arith.cmpi ult, %284, %c3_i64_105 : i64
    scf.if %285 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %284, %c3_i64_105 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %283, %8 : i32, !llvm.ptr
    %c1_i64_106 = arith.constant 1 : i64
    %286 = llvm.load %10 : !llvm.ptr -> i64
    %287 = arith.cmpi ult, %286, %c1_i64_106 : i64
    scf.if %287 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %286, %c1_i64_106 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb13
  ^bb16:  // pred: ^bb14
    %c1_i64_107 = arith.constant 1 : i64
    %288 = llvm.load %10 : !llvm.ptr -> i64
    %289 = arith.cmpi ult, %288, %c1_i64_107 : i64
    scf.if %289 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %288, %c1_i64_107 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_108 = arith.constant 3 : i64
    %290 = llvm.load %10 : !llvm.ptr -> i64
    %291 = arith.cmpi ult, %290, %c3_i64_108 : i64
    scf.if %291 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %290, %c3_i64_108 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %292 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i64_109 = arith.constant 1 : i64
    %293 = llvm.load %10 : !llvm.ptr -> i64
    %294 = arith.cmpi ult, %293, %c1_i64_109 : i64
    scf.if %294 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %293, %c1_i64_109 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-16_i32 = arith.constant -16 : i32
    %c3_i64_110 = arith.constant 3 : i64
    %295 = llvm.load %10 : !llvm.ptr -> i64
    %296 = arith.cmpi ult, %295, %c3_i64_110 : i64
    scf.if %296 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %295, %c3_i64_110 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %297 = arith.cmpi uge, %292, %c-16_i32 : i32
    %298 = arith.extui %297 : i1 to i32
    %c1_i64_111 = arith.constant 1 : i64
    %299 = llvm.load %10 : !llvm.ptr -> i64
    %300 = arith.cmpi ult, %299, %c1_i64_111 : i64
    scf.if %300 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %299, %c1_i64_111 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_112 = arith.constant 0 : i32
    %301 = arith.cmpi ne, %298, %c0_i32_112 : i32
    cf.cond_br %301, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c3_i64_113 = arith.constant 3 : i64
    %302 = llvm.load %10 : !llvm.ptr -> i64
    %303 = arith.cmpi ult, %302, %c3_i64_113 : i64
    scf.if %303 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %302, %c3_i64_113 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %304 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_114 = arith.constant 1 : i64
    %305 = llvm.load %10 : !llvm.ptr -> i64
    %306 = arith.cmpi ult, %305, %c1_i64_114 : i64
    scf.if %306 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %305, %c1_i64_114 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c2_i32 = arith.constant 2 : i32
    %c3_i64_115 = arith.constant 3 : i64
    %307 = llvm.load %10 : !llvm.ptr -> i64
    %308 = arith.cmpi ult, %307, %c3_i64_115 : i64
    scf.if %308 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %307, %c3_i64_115 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %309 = arith.addi %304, %c2_i32 : i32
    %c3_i64_116 = arith.constant 3 : i64
    %310 = llvm.load %10 : !llvm.ptr -> i64
    %311 = arith.cmpi ult, %310, %c3_i64_116 : i64
    scf.if %311 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %310, %c3_i64_116 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %309, %8 : i32, !llvm.ptr
    %c1_i64_117 = arith.constant 1 : i64
    %312 = llvm.load %10 : !llvm.ptr -> i64
    %313 = arith.cmpi ult, %312, %c1_i64_117 : i64
    scf.if %313 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %312, %c1_i64_117 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb13
  ^bb18:  // pred: ^bb16
    %c3_i64_118 = arith.constant 3 : i64
    %314 = llvm.load %10 : !llvm.ptr -> i64
    %315 = arith.cmpi ult, %314, %c3_i64_118 : i64
    scf.if %315 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %314, %c3_i64_118 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %316 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_119 = arith.constant 1 : i64
    %317 = llvm.load %10 : !llvm.ptr -> i64
    %318 = arith.cmpi ult, %317, %c1_i64_119 : i64
    scf.if %318 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %317, %c1_i64_119 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c3_i64_120 = arith.constant 3 : i64
    %319 = llvm.load %10 : !llvm.ptr -> i64
    %320 = arith.cmpi ult, %319, %c3_i64_120 : i64
    scf.if %320 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %319, %c3_i64_120 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %321 = arith.addi %316, %c4_i32 : i32
    %c3_i64_121 = arith.constant 3 : i64
    %322 = llvm.load %10 : !llvm.ptr -> i64
    %323 = arith.cmpi ult, %322, %c3_i64_121 : i64
    scf.if %323 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %322, %c3_i64_121 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %321, %8 : i32, !llvm.ptr
    %c1_i64_122 = arith.constant 1 : i64
    %324 = llvm.load %10 : !llvm.ptr -> i64
    %325 = arith.cmpi ult, %324, %c1_i64_122 : i64
    scf.if %325 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %324, %c1_i64_122 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb13
  ^bb19:  // pred: ^bb16
    %c3_i64_123 = arith.constant 3 : i64
    %326 = llvm.load %10 : !llvm.ptr -> i64
    %327 = arith.cmpi ult, %326, %c3_i64_123 : i64
    scf.if %327 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %326, %c3_i64_123 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %328 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_124 = arith.constant 1 : i64
    %329 = llvm.load %10 : !llvm.ptr -> i64
    %330 = arith.cmpi ult, %329, %c1_i64_124 : i64
    scf.if %330 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %329, %c1_i64_124 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i32 = arith.constant 3 : i32
    %c3_i64_125 = arith.constant 3 : i64
    %331 = llvm.load %10 : !llvm.ptr -> i64
    %332 = arith.cmpi ult, %331, %c3_i64_125 : i64
    scf.if %332 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %331, %c3_i64_125 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %333 = arith.addi %328, %c3_i32 : i32
    %c3_i64_126 = arith.constant 3 : i64
    %334 = llvm.load %10 : !llvm.ptr -> i64
    %335 = arith.cmpi ult, %334, %c3_i64_126 : i64
    scf.if %335 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %334, %c3_i64_126 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %333, %8 : i32, !llvm.ptr
    %c1_i64_127 = arith.constant 1 : i64
    %336 = llvm.load %10 : !llvm.ptr -> i64
    %337 = arith.cmpi ult, %336, %c1_i64_127 : i64
    scf.if %337 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %336, %c1_i64_127 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb13
  ^bb20:  // pred: ^bb13
    %c1_i64_128 = arith.constant 1 : i64
    %338 = llvm.load %10 : !llvm.ptr -> i64
    %339 = arith.cmpi ult, %338, %c1_i64_128 : i64
    scf.if %339 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %338, %c1_i64_128 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb10
  ^bb21:  // pred: ^bb7
    %c1_i64_129 = arith.constant 1 : i64
    %340 = llvm.load %10 : !llvm.ptr -> i64
    %341 = arith.cmpi ult, %340, %c1_i64_129 : i64
    scf.if %341 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %340, %c1_i64_129 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_130 = arith.constant 3 : i64
    %342 = llvm.load %10 : !llvm.ptr -> i64
    %343 = arith.cmpi ult, %342, %c3_i64_130 : i64
    scf.if %343 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %342, %c3_i64_130 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %344 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_131 = arith.constant 3 : i64
    %345 = llvm.load %10 : !llvm.ptr -> i64
    %346 = arith.cmpi ult, %345, %c3_i64_131 : i64
    scf.if %346 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %345, %c3_i64_131 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i64_132 = arith.constant 0 : i64
    %347 = arith.extui %344 : i32 to i64
    %348 = arith.addi %347, %c0_i64_132 : i64
    %349 = llvm.getelementptr %13[%348] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %350 = llvm.load volatile %349 {alignment = 1 : i64} : !llvm.ptr -> i8
    %351 = arith.extsi %350 : i8 to i32
    %c3_i64_133 = arith.constant 3 : i64
    %352 = llvm.load %10 : !llvm.ptr -> i64
    %353 = arith.cmpi ult, %352, %c3_i64_133 : i64
    scf.if %353 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %352, %c3_i64_133 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %351, %4 : i32, !llvm.ptr
    %c1_i64_134 = arith.constant 1 : i64
    %354 = llvm.load %10 : !llvm.ptr -> i64
    %355 = arith.cmpi ult, %354, %c1_i64_134 : i64
    scf.if %355 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %354, %c1_i64_134 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-1_i32_135 = arith.constant -1 : i32
    %c3_i64_136 = arith.constant 3 : i64
    %356 = llvm.load %10 : !llvm.ptr -> i64
    %357 = arith.cmpi ult, %356, %c3_i64_136 : i64
    scf.if %357 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %356, %c3_i64_136 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %358 = arith.cmpi sgt, %351, %c-1_i32_135 : i32
    %359 = arith.extui %358 : i1 to i32
    %c1_i64_137 = arith.constant 1 : i64
    %360 = llvm.load %10 : !llvm.ptr -> i64
    %361 = arith.cmpi ult, %360, %c1_i64_137 : i64
    scf.if %361 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %360, %c1_i64_137 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_138 = arith.constant 0 : i32
    %362 = arith.cmpi ne, %359, %c0_i32_138 : i32
    cf.cond_br %362, ^bb22, ^bb23
  ^bb22:  // 2 preds: ^bb21, ^bb23
    %c1_i64_139 = arith.constant 1 : i64
    %363 = llvm.load %10 : !llvm.ptr -> i64
    %364 = arith.cmpi ult, %363, %c1_i64_139 : i64
    scf.if %364 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %363, %c1_i64_139 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i64_140 = arith.constant 1 : i64
    %365 = llvm.load %10 : !llvm.ptr -> i64
    %366 = arith.cmpi ult, %365, %c1_i64_140 : i64
    scf.if %366 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %365, %c1_i64_140 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_141 = arith.constant 3 : i64
    %367 = llvm.load %10 : !llvm.ptr -> i64
    %368 = arith.cmpi ult, %367, %c3_i64_141 : i64
    scf.if %368 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %367, %c3_i64_141 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %369 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_142 = arith.constant 3 : i64
    %370 = llvm.load %10 : !llvm.ptr -> i64
    %371 = arith.cmpi ult, %370, %c3_i64_142 : i64
    scf.if %371 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %370, %c3_i64_142 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_143 = arith.constant 0 : i32
    %372 = arith.cmpi eq, %369, %c0_i32_143 : i32
    %373 = arith.extui %372 : i1 to i32
    %c1_i64_144 = arith.constant 1 : i64
    %374 = llvm.load %10 : !llvm.ptr -> i64
    %375 = arith.cmpi ult, %374, %c1_i64_144 : i64
    scf.if %375 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %374, %c1_i64_144 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_145 = arith.constant 0 : i32
    %376 = arith.cmpi ne, %373, %c0_i32_145 : i32
    cf.cond_br %376, ^bb25, ^bb26
  ^bb23:  // pred: ^bb21
    %c3_i64_146 = arith.constant 3 : i64
    %377 = llvm.load %10 : !llvm.ptr -> i64
    %378 = arith.cmpi ult, %377, %c3_i64_146 : i64
    scf.if %378 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %377, %c3_i64_146 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %379 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_147 = arith.constant 1 : i64
    %380 = llvm.load %10 : !llvm.ptr -> i64
    %381 = arith.cmpi ult, %380, %c1_i64_147 : i64
    scf.if %381 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %380, %c1_i64_147 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-32_i32_148 = arith.constant -32 : i32
    %c3_i64_149 = arith.constant 3 : i64
    %382 = llvm.load %10 : !llvm.ptr -> i64
    %383 = arith.cmpi ult, %382, %c3_i64_149 : i64
    scf.if %383 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %382, %c3_i64_149 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %384 = arith.cmpi ult, %379, %c-32_i32_148 : i32
    %385 = arith.extui %384 : i1 to i32
    %c1_i64_150 = arith.constant 1 : i64
    %386 = llvm.load %10 : !llvm.ptr -> i64
    %387 = arith.cmpi ult, %386, %c1_i64_150 : i64
    scf.if %387 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %386, %c1_i64_150 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i64_151 = arith.constant 1 : i64
    %388 = llvm.load %10 : !llvm.ptr -> i64
    %389 = arith.cmpi ult, %388, %c1_i64_151 : i64
    scf.if %389 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %388, %c1_i64_151 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb22
  ^bb24:  // 3 preds: ^bb25, ^bb27, ^bb29
    %c3_i64_152 = arith.constant 3 : i64
    %390 = llvm.load %10 : !llvm.ptr -> i64
    %391 = arith.cmpi ult, %390, %c3_i64_152 : i64
    scf.if %391 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %390, %c3_i64_152 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %392 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_153 = arith.constant 3 : i64
    %393 = llvm.load %10 : !llvm.ptr -> i64
    %394 = arith.cmpi ult, %393, %c3_i64_153 : i64
    scf.if %394 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %393, %c3_i64_153 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %395 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_154 = arith.constant 3 : i64
    %396 = llvm.load %10 : !llvm.ptr -> i64
    %397 = arith.cmpi ult, %396, %c3_i64_154 : i64
    scf.if %397 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %396, %c3_i64_154 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %398 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_155 = arith.constant 1 : i64
    %399 = llvm.load %10 : !llvm.ptr -> i64
    %400 = arith.cmpi ult, %399, %c1_i64_155 : i64
    scf.if %400 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %399, %c1_i64_155 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_156 = arith.constant 0 : i32
    %401 = arith.cmpi ne, %398, %c0_i32_156 : i32
    %402 = arith.select %401, %392, %395 : i32
    %c3_i64_157 = arith.constant 3 : i64
    %403 = llvm.load %10 : !llvm.ptr -> i64
    %404 = arith.cmpi ult, %403, %c3_i64_157 : i64
    scf.if %404 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %403, %c3_i64_157 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %402, %2 : i32, !llvm.ptr
    %c3_i64_158 = arith.constant 3 : i64
    %405 = llvm.load %10 : !llvm.ptr -> i64
    %406 = arith.cmpi ult, %405, %c3_i64_158 : i64
    scf.if %406 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %405, %c3_i64_158 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %407 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_159 = arith.constant 3 : i64
    %408 = llvm.load %10 : !llvm.ptr -> i64
    %409 = arith.cmpi ult, %408, %c3_i64_159 : i64
    scf.if %409 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %408, %c3_i64_159 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %410 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_160 = arith.constant 3 : i64
    %411 = llvm.load %10 : !llvm.ptr -> i64
    %412 = arith.cmpi ult, %411, %c3_i64_160 : i64
    scf.if %412 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %411, %c3_i64_160 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %413 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_161 = arith.constant 1 : i64
    %414 = llvm.load %10 : !llvm.ptr -> i64
    %415 = arith.cmpi ult, %414, %c1_i64_161 : i64
    scf.if %415 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %414, %c1_i64_161 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_162 = arith.constant 0 : i32
    %416 = arith.cmpi ne, %413, %c0_i32_162 : i32
    %417 = arith.select %416, %407, %410 : i32
    %c3_i64_163 = arith.constant 3 : i64
    %418 = llvm.load %10 : !llvm.ptr -> i64
    %419 = arith.cmpi ult, %418, %c3_i64_163 : i64
    scf.if %419 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %418, %c3_i64_163 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %417, %1 : i32, !llvm.ptr
    %c1_i64_164 = arith.constant 1 : i64
    %420 = llvm.load %10 : !llvm.ptr -> i64
    %421 = arith.cmpi ult, %420, %c1_i64_164 : i64
    scf.if %421 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %420, %c1_i64_164 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb25:  // 3 preds: ^bb22, ^bb28, ^bb30
    %c3_i64_165 = arith.constant 3 : i64
    %422 = llvm.load %10 : !llvm.ptr -> i64
    %423 = arith.cmpi ult, %422, %c3_i64_165 : i64
    scf.if %423 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %422, %c3_i64_165 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %424 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_166 = arith.constant 3 : i64
    %425 = llvm.load %10 : !llvm.ptr -> i64
    %426 = arith.cmpi ult, %425, %c3_i64_166 : i64
    scf.if %426 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %425, %c3_i64_166 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %424, %4 : i32, !llvm.ptr
    %c1_i64_167 = arith.constant 1 : i64
    %427 = llvm.load %10 : !llvm.ptr -> i64
    %428 = arith.cmpi ult, %427, %c1_i64_167 : i64
    scf.if %428 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %427, %c1_i64_167 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb24
  ^bb26:  // pred: ^bb22
    %c1_i64_168 = arith.constant 1 : i64
    %429 = llvm.load %10 : !llvm.ptr -> i64
    %430 = arith.cmpi ult, %429, %c1_i64_168 : i64
    scf.if %430 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %429, %c1_i64_168 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_169 = arith.constant 3 : i64
    %431 = llvm.load %10 : !llvm.ptr -> i64
    %432 = arith.cmpi ult, %431, %c3_i64_169 : i64
    scf.if %432 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %431, %c3_i64_169 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %433 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_170 = arith.constant 3 : i64
    %434 = llvm.load %10 : !llvm.ptr -> i64
    %435 = arith.cmpi ult, %434, %c3_i64_170 : i64
    scf.if %435 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %434, %c3_i64_170 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %436 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_171 = arith.constant 3 : i64
    %437 = llvm.load %10 : !llvm.ptr -> i64
    %438 = arith.cmpi ult, %437, %c3_i64_171 : i64
    scf.if %438 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %437, %c3_i64_171 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %439 = arith.cmpi uge, %433, %436 : i32
    %440 = arith.extui %439 : i1 to i32
    %c1_i64_172 = arith.constant 1 : i64
    %441 = llvm.load %10 : !llvm.ptr -> i64
    %442 = arith.cmpi ult, %441, %c1_i64_172 : i64
    scf.if %442 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %441, %c1_i64_172 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_173 = arith.constant 0 : i32
    %443 = arith.cmpi ne, %440, %c0_i32_173 : i32
    cf.cond_br %443, ^bb27, ^bb28
  ^bb27:  // pred: ^bb26
    %c1_i64_174 = arith.constant 1 : i64
    %444 = llvm.load %10 : !llvm.ptr -> i64
    %445 = arith.cmpi ult, %444, %c1_i64_174 : i64
    scf.if %445 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %444, %c1_i64_174 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_175 = arith.constant 0 : i32
    %c3_i64_176 = arith.constant 3 : i64
    %446 = llvm.load %10 : !llvm.ptr -> i64
    %447 = arith.cmpi ult, %446, %c3_i64_176 : i64
    scf.if %447 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %446, %c3_i64_176 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_175, %4 : i32, !llvm.ptr
    %c3_i64_177 = arith.constant 3 : i64
    %448 = llvm.load %10 : !llvm.ptr -> i64
    %449 = arith.cmpi ult, %448, %c3_i64_177 : i64
    scf.if %449 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %448, %c3_i64_177 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %450 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_178 = arith.constant 3 : i64
    %451 = llvm.load %10 : !llvm.ptr -> i64
    %452 = arith.cmpi ult, %451, %c3_i64_178 : i64
    scf.if %452 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %451, %c3_i64_178 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %453 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_179 = arith.constant 3 : i64
    %454 = llvm.load %10 : !llvm.ptr -> i64
    %455 = arith.cmpi ult, %454, %c3_i64_179 : i64
    scf.if %455 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %454, %c3_i64_179 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %456 = arith.cmpi eq, %450, %453 : i32
    %457 = arith.extui %456 : i1 to i32
    %c0_i32_180 = arith.constant 0 : i32
    %458 = arith.cmpi eq, %457, %c0_i32_180 : i32
    %459 = arith.extui %458 : i1 to i32
    %c1_i64_181 = arith.constant 1 : i64
    %460 = llvm.load %10 : !llvm.ptr -> i64
    %461 = arith.cmpi ult, %460, %c1_i64_181 : i64
    scf.if %461 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %460, %c1_i64_181 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_182 = arith.constant 0 : i32
    %462 = arith.cmpi ne, %459, %c0_i32_182 : i32
    cf.cond_br %462, ^bb24, ^bb30
  ^bb28:  // pred: ^bb26
    %c1_i64_183 = arith.constant 1 : i64
    %463 = llvm.load %10 : !llvm.ptr -> i64
    %464 = arith.cmpi ult, %463, %c1_i64_183 : i64
    scf.if %464 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %463, %c1_i64_183 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_184 = arith.constant 0 : i32
    %c3_i64_185 = arith.constant 3 : i64
    %465 = llvm.load %10 : !llvm.ptr -> i64
    %466 = arith.cmpi ult, %465, %c3_i64_185 : i64
    scf.if %466 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %465, %c3_i64_185 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_184, %4 : i32, !llvm.ptr
    %c3_i64_186 = arith.constant 3 : i64
    %467 = llvm.load %10 : !llvm.ptr -> i64
    %468 = arith.cmpi ult, %467, %c3_i64_186 : i64
    scf.if %468 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %467, %c3_i64_186 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %469 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_187 = arith.constant 3 : i64
    %470 = llvm.load %10 : !llvm.ptr -> i64
    %471 = arith.cmpi ult, %470, %c3_i64_187 : i64
    scf.if %471 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %470, %c3_i64_187 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %472 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_188 = arith.constant 3 : i64
    %473 = llvm.load %10 : !llvm.ptr -> i64
    %474 = arith.cmpi ult, %473, %c3_i64_188 : i64
    scf.if %474 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %473, %c3_i64_188 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %475 = arith.addi %469, %472 : i32
    %c3_i64_189 = arith.constant 3 : i64
    %476 = llvm.load %10 : !llvm.ptr -> i64
    %477 = arith.cmpi ult, %476, %c3_i64_189 : i64
    scf.if %477 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %476, %c3_i64_189 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i64_190 = arith.constant 0 : i64
    %478 = arith.extui %475 : i32 to i64
    %479 = arith.addi %478, %c0_i64_190 : i64
    %480 = llvm.getelementptr %13[%479] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %481 = llvm.load volatile %480 {alignment = 1 : i64} : !llvm.ptr -> i8
    %482 = arith.extsi %481 : i8 to i32
    %c1_i64_191 = arith.constant 1 : i64
    %483 = llvm.load %10 : !llvm.ptr -> i64
    %484 = arith.cmpi ult, %483, %c1_i64_191 : i64
    scf.if %484 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %483, %c1_i64_191 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-65_i32 = arith.constant -65 : i32
    %c3_i64_192 = arith.constant 3 : i64
    %485 = llvm.load %10 : !llvm.ptr -> i64
    %486 = arith.cmpi ult, %485, %c3_i64_192 : i64
    scf.if %486 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %485, %c3_i64_192 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %487 = arith.cmpi sgt, %482, %c-65_i32 : i32
    %488 = arith.extui %487 : i1 to i32
    %c1_i64_193 = arith.constant 1 : i64
    %489 = llvm.load %10 : !llvm.ptr -> i64
    %490 = arith.cmpi ult, %489, %c1_i64_193 : i64
    scf.if %490 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %489, %c1_i64_193 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_194 = arith.constant 0 : i32
    %491 = arith.cmpi ne, %488, %c0_i32_194 : i32
    cf.cond_br %491, ^bb25, ^bb29
  ^bb29:  // pred: ^bb28
    %c1_i64_195 = arith.constant 1 : i64
    %492 = llvm.load %10 : !llvm.ptr -> i64
    %493 = arith.cmpi ult, %492, %c1_i64_195 : i64
    scf.if %493 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %492, %c1_i64_195 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb24
  ^bb30:  // pred: ^bb27
    %c1_i64_196 = arith.constant 1 : i64
    %494 = llvm.load %10 : !llvm.ptr -> i64
    %495 = arith.cmpi ult, %494, %c1_i64_196 : i64
    scf.if %495 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %494, %c1_i64_196 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb25
  ^bb31:  // pred: ^bb5
    %c3_i64_197 = arith.constant 3 : i64
    %496 = llvm.load %10 : !llvm.ptr -> i64
    %497 = arith.cmpi ult, %496, %c3_i64_197 : i64
    scf.if %497 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %496, %c3_i64_197 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %498 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_198 = arith.constant 3 : i64
    %499 = llvm.load %10 : !llvm.ptr -> i64
    %500 = arith.cmpi ult, %499, %c3_i64_198 : i64
    scf.if %500 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %499, %c3_i64_198 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %501 = arith.extui %498 : i32 to i64
    %502 = arith.addi %501, %c4_i64 : i64
    %503 = llvm.getelementptr %13[%502] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %504 = llvm.load volatile %503 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_199 = arith.constant 3 : i64
    %505 = llvm.load %10 : !llvm.ptr -> i64
    %506 = arith.cmpi ult, %505, %c3_i64_199 : i64
    scf.if %506 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %505, %c3_i64_199 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %504, %3 : i32, !llvm.ptr
    %c1_i64_200 = arith.constant 1 : i64
    %507 = llvm.load %10 : !llvm.ptr -> i64
    %508 = arith.cmpi ult, %507, %c1_i64_200 : i64
    scf.if %508 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %507, %c1_i64_200 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i64_201 = arith.constant 1 : i64
    %509 = llvm.load %10 : !llvm.ptr -> i64
    %510 = arith.cmpi ult, %509, %c1_i64_201 : i64
    scf.if %510 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %509, %c1_i64_201 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_202 = arith.constant 3 : i64
    %511 = llvm.load %10 : !llvm.ptr -> i64
    %512 = arith.cmpi ult, %511, %c3_i64_202 : i64
    scf.if %512 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %511, %c3_i64_202 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %513 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_203 = arith.constant 1 : i64
    %514 = llvm.load %10 : !llvm.ptr -> i64
    %515 = arith.cmpi ult, %514, %c1_i64_203 : i64
    scf.if %515 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %514, %c1_i64_203 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_204 = arith.constant 3 : i64
    %516 = llvm.load %10 : !llvm.ptr -> i64
    %517 = arith.cmpi ult, %516, %c3_i64_204 : i64
    scf.if %517 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %516, %c3_i64_204 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %518 = arith.cmpi ult, %513, %c16_i32 : i32
    %519 = arith.extui %518 : i1 to i32
    %c1_i64_205 = arith.constant 1 : i64
    %520 = llvm.load %10 : !llvm.ptr -> i64
    %521 = arith.cmpi ult, %520, %c1_i64_205 : i64
    scf.if %521 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %520, %c1_i64_205 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_206 = arith.constant 0 : i32
    %522 = arith.cmpi ne, %519, %c0_i32_206 : i32
    cf.cond_br %522, ^bb42, ^bb43
  ^bb32:  // pred: ^bb5
    %c3_i64_207 = arith.constant 3 : i64
    %523 = llvm.load %10 : !llvm.ptr -> i64
    %524 = arith.cmpi ult, %523, %c3_i64_207 : i64
    scf.if %524 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %523, %c3_i64_207 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %525 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_208 = arith.constant 3 : i64
    %526 = llvm.load %10 : !llvm.ptr -> i64
    %527 = arith.cmpi ult, %526, %c3_i64_208 : i64
    scf.if %527 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %526, %c3_i64_208 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c20_i64_209 = arith.constant 20 : i64
    %528 = arith.extui %525 : i32 to i64
    %529 = arith.addi %528, %c20_i64_209 : i64
    %530 = llvm.getelementptr %13[%529] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %531 = llvm.load volatile %530 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_210 = arith.constant 3 : i64
    %532 = llvm.load %10 : !llvm.ptr -> i64
    %533 = arith.cmpi ult, %532, %c3_i64_210 : i64
    scf.if %533 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %532, %c3_i64_210 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %534 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_211 = arith.constant 3 : i64
    %535 = llvm.load %10 : !llvm.ptr -> i64
    %536 = arith.cmpi ult, %535, %c3_i64_211 : i64
    scf.if %536 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %535, %c3_i64_211 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %537 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_212 = arith.constant 3 : i64
    %538 = llvm.load %10 : !llvm.ptr -> i64
    %539 = arith.cmpi ult, %538, %c3_i64_212 : i64
    scf.if %539 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %538, %c3_i64_212 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %540 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_213 = arith.constant 3 : i64
    %541 = llvm.load %10 : !llvm.ptr -> i64
    %542 = arith.cmpi ult, %541, %c3_i64_213 : i64
    scf.if %542 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %541, %c3_i64_213 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c24_i64_214 = arith.constant 24 : i64
    %543 = arith.extui %540 : i32 to i64
    %544 = arith.addi %543, %c24_i64_214 : i64
    %545 = llvm.getelementptr %13[%544] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %546 = llvm.load volatile %545 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_215 = arith.constant 3 : i64
    %547 = llvm.load %10 : !llvm.ptr -> i64
    %548 = arith.cmpi ult, %547, %c3_i64_215 : i64
    scf.if %548 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %547, %c3_i64_215 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c12_i64_216 = arith.constant 12 : i64
    %549 = arith.extui %546 : i32 to i64
    %550 = arith.addi %549, %c12_i64_216 : i64
    %551 = llvm.getelementptr %13[%550] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %552 = llvm.load volatile %551 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_217 = arith.constant 7 : i64
    %553 = llvm.load %10 : !llvm.ptr -> i64
    %554 = arith.cmpi ult, %553, %c7_i64_217 : i64
    scf.if %554 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %553, %c7_i64_217 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %555 = arith.cmpi ult, %552, %20 : i32
    cf.cond_br %555, ^bb33, ^bb34
  ^bb33:  // 2 preds: ^bb32, ^bb34
    %556 = llvm.getelementptr inbounds %18[%552] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %557 = llvm.load %556 : !llvm.ptr -> !llvm.ptr
    %558 = llvm.ptrtoint %557 : !llvm.ptr to i64
    %c0_i64_218 = arith.constant 0 : i64
    %559 = arith.cmpi eq, %558, %c0_i64_218 : i64
    cf.cond_br %559, ^bb36, ^bb35
  ^bb34:  // pred: ^bb32
    %c3_i32_219 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_219) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %560 = llvm.getelementptr %557[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %561 = llvm.getelementptr %557[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %562 = llvm.getelementptr %557[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %563 = llvm.load %560 : !llvm.ptr -> !llvm.ptr
    %564 = llvm.load %562 : !llvm.ptr -> !llvm.ptr
    %565 = llvm.ptrtoint %563 : !llvm.ptr to i64
    %c0_i64_220 = arith.constant 0 : i64
    %566 = arith.cmpi eq, %565, %c0_i64_220 : i64
    cf.cond_br %566, ^bb38, ^bb37
  ^bb36:  // pred: ^bb33
    %c4_i32_221 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_221) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %567 = llvm.load %561 : !llvm.ptr -> i32
    %568 = arith.cmpi ne, %15, %567 : i32
    cf.cond_br %568, ^bb40, ^bb39
  ^bb38:  // pred: ^bb35
    %c3_i32_222 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_222) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %569 = llvm.call %563(%564, %531, %534, %537) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_223 = arith.constant 1 : i64
    %570 = llvm.load %10 : !llvm.ptr -> i64
    %571 = arith.cmpi ult, %570, %c1_i64_223 : i64
    scf.if %571 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %570, %c1_i64_223 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb2(%569 : i32)
  ^bb40:  // pred: ^bb37
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 4 preds: ^bb43, ^bb45, ^bb46, ^bb53
    %c1_i64_224 = arith.constant 1 : i64
    %572 = llvm.load %10 : !llvm.ptr -> i64
    %573 = arith.cmpi ult, %572, %c1_i64_224 : i64
    scf.if %573 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %572, %c1_i64_224 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i64_225 = arith.constant 1 : i64
    %574 = llvm.load %10 : !llvm.ptr -> i64
    %575 = arith.cmpi ult, %574, %c1_i64_225 : i64
    scf.if %575 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %574, %c1_i64_225 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_226 = arith.constant 3 : i64
    %576 = llvm.load %10 : !llvm.ptr -> i64
    %577 = arith.cmpi ult, %576, %c3_i64_226 : i64
    scf.if %577 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %576, %c3_i64_226 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %578 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_227 = arith.constant 3 : i64
    %579 = llvm.load %10 : !llvm.ptr -> i64
    %580 = arith.cmpi ult, %579, %c3_i64_227 : i64
    scf.if %580 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %579, %c3_i64_227 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %581 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_228 = arith.constant 3 : i64
    %582 = llvm.load %10 : !llvm.ptr -> i64
    %583 = arith.cmpi ult, %582, %c3_i64_228 : i64
    scf.if %583 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %582, %c3_i64_228 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %584 = arith.cmpi ule, %578, %581 : i32
    %585 = arith.extui %584 : i1 to i32
    %c1_i64_229 = arith.constant 1 : i64
    %586 = llvm.load %10 : !llvm.ptr -> i64
    %587 = arith.cmpi ult, %586, %c1_i64_229 : i64
    scf.if %587 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %586, %c1_i64_229 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_230 = arith.constant 0 : i32
    %588 = arith.cmpi ne, %585, %c0_i32_230 : i32
    cf.cond_br %588, ^bb57, ^bb58
  ^bb42:  // pred: ^bb31
    %c1_i64_231 = arith.constant 1 : i64
    %589 = llvm.load %10 : !llvm.ptr -> i64
    %590 = arith.cmpi ult, %589, %c1_i64_231 : i64
    scf.if %590 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %589, %c1_i64_231 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_232 = arith.constant 3 : i64
    %591 = llvm.load %10 : !llvm.ptr -> i64
    %592 = arith.cmpi ult, %591, %c3_i64_232 : i64
    scf.if %592 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %591, %c3_i64_232 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %593 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_233 = arith.constant 1 : i64
    %594 = llvm.load %10 : !llvm.ptr -> i64
    %595 = arith.cmpi ult, %594, %c1_i64_233 : i64
    scf.if %595 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %594, %c1_i64_233 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_234 = arith.constant 0 : i32
    %596 = arith.cmpi ne, %593, %c0_i32_234 : i32
    cf.cond_br %596, ^bb44, ^bb45
  ^bb43:  // pred: ^bb31
    %c3_i64_235 = arith.constant 3 : i64
    %597 = llvm.load %10 : !llvm.ptr -> i64
    %598 = arith.cmpi ult, %597, %c3_i64_235 : i64
    scf.if %598 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %597, %c3_i64_235 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %599 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_236 = arith.constant 3 : i64
    %600 = llvm.load %10 : !llvm.ptr -> i64
    %601 = arith.cmpi ult, %600, %c3_i64_236 : i64
    scf.if %601 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %600, %c3_i64_236 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %602 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %603 = llvm.load %10 : !llvm.ptr -> i64
    %604 = arith.cmpi ult, %603, %c6_i64 : i64
    scf.if %604 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %603, %c6_i64 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %605 = call @f71(%arg0, %599, %602) : (!llvm.ptr, i32, i32) -> i32
    %c3_i64_237 = arith.constant 3 : i64
    %606 = llvm.load %10 : !llvm.ptr -> i64
    %607 = arith.cmpi ult, %606, %c3_i64_237 : i64
    scf.if %607 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %606, %c3_i64_237 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %605, %4 : i32, !llvm.ptr
    %c1_i64_238 = arith.constant 1 : i64
    %608 = llvm.load %10 : !llvm.ptr -> i64
    %609 = arith.cmpi ult, %608, %c1_i64_238 : i64
    scf.if %609 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %608, %c1_i64_238 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb41
  ^bb44:  // pred: ^bb42
    %c3_i64_239 = arith.constant 3 : i64
    %610 = llvm.load %10 : !llvm.ptr -> i64
    %611 = arith.cmpi ult, %610, %c3_i64_239 : i64
    scf.if %611 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %610, %c3_i64_239 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %612 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_240 = arith.constant 1 : i64
    %613 = llvm.load %10 : !llvm.ptr -> i64
    %614 = arith.cmpi ult, %613, %c1_i64_240 : i64
    scf.if %614 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %613, %c1_i64_240 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i32_241 = arith.constant 3 : i32
    %c3_i64_242 = arith.constant 3 : i64
    %615 = llvm.load %10 : !llvm.ptr -> i64
    %616 = arith.cmpi ult, %615, %c3_i64_242 : i64
    scf.if %616 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %615, %c3_i64_242 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %617 = arith.andi %612, %c3_i32_241 : i32
    %c3_i64_243 = arith.constant 3 : i64
    %618 = llvm.load %10 : !llvm.ptr -> i64
    %619 = arith.cmpi ult, %618, %c3_i64_243 : i64
    scf.if %619 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %618, %c3_i64_243 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %617, %6 : i32, !llvm.ptr
    %c1_i64_244 = arith.constant 1 : i64
    %620 = llvm.load %10 : !llvm.ptr -> i64
    %621 = arith.cmpi ult, %620, %c1_i64_244 : i64
    scf.if %621 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %620, %c1_i64_244 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i64_245 = arith.constant 1 : i64
    %622 = llvm.load %10 : !llvm.ptr -> i64
    %623 = arith.cmpi ult, %622, %c1_i64_245 : i64
    scf.if %623 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %622, %c1_i64_245 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_246 = arith.constant 3 : i64
    %624 = llvm.load %10 : !llvm.ptr -> i64
    %625 = arith.cmpi ult, %624, %c3_i64_246 : i64
    scf.if %625 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %624, %c3_i64_246 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %626 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_247 = arith.constant 1 : i64
    %627 = llvm.load %10 : !llvm.ptr -> i64
    %628 = arith.cmpi ult, %627, %c1_i64_247 : i64
    scf.if %628 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %627, %c1_i64_247 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c4_i32_248 = arith.constant 4 : i32
    %c3_i64_249 = arith.constant 3 : i64
    %629 = llvm.load %10 : !llvm.ptr -> i64
    %630 = arith.cmpi ult, %629, %c3_i64_249 : i64
    scf.if %630 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %629, %c3_i64_249 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %631 = arith.cmpi uge, %626, %c4_i32_248 : i32
    %632 = arith.extui %631 : i1 to i32
    %c1_i64_250 = arith.constant 1 : i64
    %633 = llvm.load %10 : !llvm.ptr -> i64
    %634 = arith.cmpi ult, %633, %c1_i64_250 : i64
    scf.if %634 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %633, %c1_i64_250 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_251 = arith.constant 0 : i32
    %635 = arith.cmpi ne, %632, %c0_i32_251 : i32
    cf.cond_br %635, ^bb47, ^bb48
  ^bb45:  // pred: ^bb42
    %c1_i64_252 = arith.constant 1 : i64
    %636 = llvm.load %10 : !llvm.ptr -> i64
    %637 = arith.cmpi ult, %636, %c1_i64_252 : i64
    scf.if %637 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %636, %c1_i64_252 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_253 = arith.constant 0 : i32
    %c3_i64_254 = arith.constant 3 : i64
    %638 = llvm.load %10 : !llvm.ptr -> i64
    %639 = arith.cmpi ult, %638, %c3_i64_254 : i64
    scf.if %639 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %638, %c3_i64_254 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_253, %4 : i32, !llvm.ptr
    %c1_i64_255 = arith.constant 1 : i64
    %640 = llvm.load %10 : !llvm.ptr -> i64
    %641 = arith.cmpi ult, %640, %c1_i64_255 : i64
    scf.if %641 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %640, %c1_i64_255 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb41
  ^bb46:  // 2 preds: ^bb48, ^bb49
    %c3_i64_256 = arith.constant 3 : i64
    %642 = llvm.load %10 : !llvm.ptr -> i64
    %643 = arith.cmpi ult, %642, %c3_i64_256 : i64
    scf.if %643 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %642, %c3_i64_256 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %644 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_257 = arith.constant 3 : i64
    %645 = llvm.load %10 : !llvm.ptr -> i64
    %646 = arith.cmpi ult, %645, %c3_i64_257 : i64
    scf.if %646 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %645, %c3_i64_257 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_258 = arith.constant 0 : i32
    %647 = arith.cmpi eq, %644, %c0_i32_258 : i32
    %648 = arith.extui %647 : i1 to i32
    %c1_i64_259 = arith.constant 1 : i64
    %649 = llvm.load %10 : !llvm.ptr -> i64
    %650 = arith.cmpi ult, %649, %c1_i64_259 : i64
    scf.if %650 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %649, %c1_i64_259 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_260 = arith.constant 0 : i32
    %651 = arith.cmpi ne, %648, %c0_i32_260 : i32
    cf.cond_br %651, ^bb41, ^bb52
  ^bb47:  // pred: ^bb44
    %c3_i64_261 = arith.constant 3 : i64
    %652 = llvm.load %10 : !llvm.ptr -> i64
    %653 = arith.cmpi ult, %652, %c3_i64_261 : i64
    scf.if %653 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %652, %c3_i64_261 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %654 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_262 = arith.constant 1 : i64
    %655 = llvm.load %10 : !llvm.ptr -> i64
    %656 = arith.cmpi ult, %655, %c1_i64_262 : i64
    scf.if %656 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %655, %c1_i64_262 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c12_i32 = arith.constant 12 : i32
    %c3_i64_263 = arith.constant 3 : i64
    %657 = llvm.load %10 : !llvm.ptr -> i64
    %658 = arith.cmpi ult, %657, %c3_i64_263 : i64
    scf.if %658 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %657, %c3_i64_263 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %659 = arith.andi %654, %c12_i32 : i32
    %c3_i64_264 = arith.constant 3 : i64
    %660 = llvm.load %10 : !llvm.ptr -> i64
    %661 = arith.cmpi ult, %660, %c3_i64_264 : i64
    scf.if %661 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %660, %c3_i64_264 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %659, %5 : i32, !llvm.ptr
    %c1_i64_265 = arith.constant 1 : i64
    %662 = llvm.load %10 : !llvm.ptr -> i64
    %663 = arith.cmpi ult, %662, %c1_i64_265 : i64
    scf.if %663 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %662, %c1_i64_265 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_266 = arith.constant 0 : i32
    %c3_i64_267 = arith.constant 3 : i64
    %664 = llvm.load %10 : !llvm.ptr -> i64
    %665 = arith.cmpi ult, %664, %c3_i64_267 : i64
    scf.if %665 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %664, %c3_i64_267 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_266, %4 : i32, !llvm.ptr
    %c1_i64_268 = arith.constant 1 : i64
    %666 = llvm.load %10 : !llvm.ptr -> i64
    %667 = arith.cmpi ult, %666, %c1_i64_268 : i64
    scf.if %667 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %666, %c1_i64_268 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_269 = arith.constant 0 : i32
    %c3_i64_270 = arith.constant 3 : i64
    %668 = llvm.load %10 : !llvm.ptr -> i64
    %669 = arith.cmpi ult, %668, %c3_i64_270 : i64
    scf.if %669 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %668, %c3_i64_270 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_269, %7 : i32, !llvm.ptr
    %c1_i64_271 = arith.constant 1 : i64
    %670 = llvm.load %10 : !llvm.ptr -> i64
    %671 = arith.cmpi ult, %670, %c1_i64_271 : i64
    scf.if %671 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %670, %c1_i64_271 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb50
  ^bb48:  // pred: ^bb44
    %c1_i64_272 = arith.constant 1 : i64
    %672 = llvm.load %10 : !llvm.ptr -> i64
    %673 = arith.cmpi ult, %672, %c1_i64_272 : i64
    scf.if %673 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %672, %c1_i64_272 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_273 = arith.constant 0 : i32
    %c3_i64_274 = arith.constant 3 : i64
    %674 = llvm.load %10 : !llvm.ptr -> i64
    %675 = arith.cmpi ult, %674, %c3_i64_274 : i64
    scf.if %675 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %674, %c3_i64_274 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_273, %4 : i32, !llvm.ptr
    %c1_i64_275 = arith.constant 1 : i64
    %676 = llvm.load %10 : !llvm.ptr -> i64
    %677 = arith.cmpi ult, %676, %c1_i64_275 : i64
    scf.if %677 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %676, %c1_i64_275 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_276 = arith.constant 0 : i32
    %c3_i64_277 = arith.constant 3 : i64
    %678 = llvm.load %10 : !llvm.ptr -> i64
    %679 = arith.cmpi ult, %678, %c3_i64_277 : i64
    scf.if %679 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %678, %c3_i64_277 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_276, %7 : i32, !llvm.ptr
    %c1_i64_278 = arith.constant 1 : i64
    %680 = llvm.load %10 : !llvm.ptr -> i64
    %681 = arith.cmpi ult, %680, %c1_i64_278 : i64
    scf.if %681 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %680, %c1_i64_278 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb46
  ^bb49:  // pred: ^bb51
    %c1_i64_279 = arith.constant 1 : i64
    %682 = llvm.load %10 : !llvm.ptr -> i64
    %683 = arith.cmpi ult, %682, %c1_i64_279 : i64
    scf.if %683 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %682, %c1_i64_279 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb46
  ^bb50:  // 2 preds: ^bb47, ^bb50
    %c3_i64_280 = arith.constant 3 : i64
    %684 = llvm.load %10 : !llvm.ptr -> i64
    %685 = arith.cmpi ult, %684, %c3_i64_280 : i64
    scf.if %685 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %684, %c3_i64_280 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %686 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_281 = arith.constant 3 : i64
    %687 = llvm.load %10 : !llvm.ptr -> i64
    %688 = arith.cmpi ult, %687, %c3_i64_281 : i64
    scf.if %688 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %687, %c3_i64_281 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %689 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_282 = arith.constant 3 : i64
    %690 = llvm.load %10 : !llvm.ptr -> i64
    %691 = arith.cmpi ult, %690, %c3_i64_282 : i64
    scf.if %691 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %690, %c3_i64_282 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %692 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_283 = arith.constant 3 : i64
    %693 = llvm.load %10 : !llvm.ptr -> i64
    %694 = arith.cmpi ult, %693, %c3_i64_283 : i64
    scf.if %694 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %693, %c3_i64_283 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %695 = arith.addi %689, %692 : i32
    %c3_i64_284 = arith.constant 3 : i64
    %696 = llvm.load %10 : !llvm.ptr -> i64
    %697 = arith.cmpi ult, %696, %c3_i64_284 : i64
    scf.if %697 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %696, %c3_i64_284 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %695, %8 : i32, !llvm.ptr
    %c3_i64_285 = arith.constant 3 : i64
    %698 = llvm.load %10 : !llvm.ptr -> i64
    %699 = arith.cmpi ult, %698, %c3_i64_285 : i64
    scf.if %699 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %698, %c3_i64_285 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i64_286 = arith.constant 0 : i64
    %700 = arith.extui %695 : i32 to i64
    %701 = arith.addi %700, %c0_i64_286 : i64
    %702 = llvm.getelementptr %13[%701] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %703 = llvm.load volatile %702 {alignment = 1 : i64} : !llvm.ptr -> i8
    %704 = arith.extsi %703 : i8 to i32
    %c1_i64_287 = arith.constant 1 : i64
    %705 = llvm.load %10 : !llvm.ptr -> i64
    %706 = arith.cmpi ult, %705, %c1_i64_287 : i64
    scf.if %706 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %705, %c1_i64_287 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-65_i32_288 = arith.constant -65 : i32
    %c3_i64_289 = arith.constant 3 : i64
    %707 = llvm.load %10 : !llvm.ptr -> i64
    %708 = arith.cmpi ult, %707, %c3_i64_289 : i64
    scf.if %708 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %707, %c3_i64_289 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %709 = arith.cmpi sgt, %704, %c-65_i32_288 : i32
    %710 = arith.extui %709 : i1 to i32
    %c3_i64_290 = arith.constant 3 : i64
    %711 = llvm.load %10 : !llvm.ptr -> i64
    %712 = arith.cmpi ult, %711, %c3_i64_290 : i64
    scf.if %712 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %711, %c3_i64_290 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %713 = arith.addi %686, %710 : i32
    %c3_i64_291 = arith.constant 3 : i64
    %714 = llvm.load %10 : !llvm.ptr -> i64
    %715 = arith.cmpi ult, %714, %c3_i64_291 : i64
    scf.if %715 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %714, %c3_i64_291 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %716 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i64_292 = arith.constant 1 : i64
    %717 = llvm.load %10 : !llvm.ptr -> i64
    %718 = arith.cmpi ult, %717, %c1_i64_292 : i64
    scf.if %718 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %717, %c1_i64_292 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i32_293 = arith.constant 1 : i32
    %c3_i64_294 = arith.constant 3 : i64
    %719 = llvm.load %10 : !llvm.ptr -> i64
    %720 = arith.cmpi ult, %719, %c3_i64_294 : i64
    scf.if %720 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %719, %c3_i64_294 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %721 = arith.addi %716, %c1_i32_293 : i32
    %c3_i64_295 = arith.constant 3 : i64
    %722 = llvm.load %10 : !llvm.ptr -> i64
    %723 = arith.cmpi ult, %722, %c3_i64_295 : i64
    scf.if %723 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %722, %c3_i64_295 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i64_296 = arith.constant 0 : i64
    %724 = arith.extui %721 : i32 to i64
    %725 = arith.addi %724, %c0_i64_296 : i64
    %726 = llvm.getelementptr %13[%725] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %727 = llvm.load volatile %726 {alignment = 1 : i64} : !llvm.ptr -> i8
    %728 = arith.extsi %727 : i8 to i32
    %c1_i64_297 = arith.constant 1 : i64
    %729 = llvm.load %10 : !llvm.ptr -> i64
    %730 = arith.cmpi ult, %729, %c1_i64_297 : i64
    scf.if %730 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %729, %c1_i64_297 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-65_i32_298 = arith.constant -65 : i32
    %c3_i64_299 = arith.constant 3 : i64
    %731 = llvm.load %10 : !llvm.ptr -> i64
    %732 = arith.cmpi ult, %731, %c3_i64_299 : i64
    scf.if %732 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %731, %c3_i64_299 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %733 = arith.cmpi sgt, %728, %c-65_i32_298 : i32
    %734 = arith.extui %733 : i1 to i32
    %c3_i64_300 = arith.constant 3 : i64
    %735 = llvm.load %10 : !llvm.ptr -> i64
    %736 = arith.cmpi ult, %735, %c3_i64_300 : i64
    scf.if %736 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %735, %c3_i64_300 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %737 = arith.addi %713, %734 : i32
    %c3_i64_301 = arith.constant 3 : i64
    %738 = llvm.load %10 : !llvm.ptr -> i64
    %739 = arith.cmpi ult, %738, %c3_i64_301 : i64
    scf.if %739 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %738, %c3_i64_301 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %740 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i64_302 = arith.constant 1 : i64
    %741 = llvm.load %10 : !llvm.ptr -> i64
    %742 = arith.cmpi ult, %741, %c1_i64_302 : i64
    scf.if %742 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %741, %c1_i64_302 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c2_i32_303 = arith.constant 2 : i32
    %c3_i64_304 = arith.constant 3 : i64
    %743 = llvm.load %10 : !llvm.ptr -> i64
    %744 = arith.cmpi ult, %743, %c3_i64_304 : i64
    scf.if %744 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %743, %c3_i64_304 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %745 = arith.addi %740, %c2_i32_303 : i32
    %c3_i64_305 = arith.constant 3 : i64
    %746 = llvm.load %10 : !llvm.ptr -> i64
    %747 = arith.cmpi ult, %746, %c3_i64_305 : i64
    scf.if %747 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %746, %c3_i64_305 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i64_306 = arith.constant 0 : i64
    %748 = arith.extui %745 : i32 to i64
    %749 = arith.addi %748, %c0_i64_306 : i64
    %750 = llvm.getelementptr %13[%749] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %751 = llvm.load volatile %750 {alignment = 1 : i64} : !llvm.ptr -> i8
    %752 = arith.extsi %751 : i8 to i32
    %c1_i64_307 = arith.constant 1 : i64
    %753 = llvm.load %10 : !llvm.ptr -> i64
    %754 = arith.cmpi ult, %753, %c1_i64_307 : i64
    scf.if %754 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %753, %c1_i64_307 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-65_i32_308 = arith.constant -65 : i32
    %c3_i64_309 = arith.constant 3 : i64
    %755 = llvm.load %10 : !llvm.ptr -> i64
    %756 = arith.cmpi ult, %755, %c3_i64_309 : i64
    scf.if %756 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %755, %c3_i64_309 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %757 = arith.cmpi sgt, %752, %c-65_i32_308 : i32
    %758 = arith.extui %757 : i1 to i32
    %c3_i64_310 = arith.constant 3 : i64
    %759 = llvm.load %10 : !llvm.ptr -> i64
    %760 = arith.cmpi ult, %759, %c3_i64_310 : i64
    scf.if %760 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %759, %c3_i64_310 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %761 = arith.addi %737, %758 : i32
    %c3_i64_311 = arith.constant 3 : i64
    %762 = llvm.load %10 : !llvm.ptr -> i64
    %763 = arith.cmpi ult, %762, %c3_i64_311 : i64
    scf.if %763 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %762, %c3_i64_311 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %764 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i64_312 = arith.constant 1 : i64
    %765 = llvm.load %10 : !llvm.ptr -> i64
    %766 = arith.cmpi ult, %765, %c1_i64_312 : i64
    scf.if %766 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %765, %c1_i64_312 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i32_313 = arith.constant 3 : i32
    %c3_i64_314 = arith.constant 3 : i64
    %767 = llvm.load %10 : !llvm.ptr -> i64
    %768 = arith.cmpi ult, %767, %c3_i64_314 : i64
    scf.if %768 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %767, %c3_i64_314 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %769 = arith.addi %764, %c3_i32_313 : i32
    %c3_i64_315 = arith.constant 3 : i64
    %770 = llvm.load %10 : !llvm.ptr -> i64
    %771 = arith.cmpi ult, %770, %c3_i64_315 : i64
    scf.if %771 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %770, %c3_i64_315 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i64_316 = arith.constant 0 : i64
    %772 = arith.extui %769 : i32 to i64
    %773 = arith.addi %772, %c0_i64_316 : i64
    %774 = llvm.getelementptr %13[%773] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %775 = llvm.load volatile %774 {alignment = 1 : i64} : !llvm.ptr -> i8
    %776 = arith.extsi %775 : i8 to i32
    %c1_i64_317 = arith.constant 1 : i64
    %777 = llvm.load %10 : !llvm.ptr -> i64
    %778 = arith.cmpi ult, %777, %c1_i64_317 : i64
    scf.if %778 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %777, %c1_i64_317 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-65_i32_318 = arith.constant -65 : i32
    %c3_i64_319 = arith.constant 3 : i64
    %779 = llvm.load %10 : !llvm.ptr -> i64
    %780 = arith.cmpi ult, %779, %c3_i64_319 : i64
    scf.if %780 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %779, %c3_i64_319 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %781 = arith.cmpi sgt, %776, %c-65_i32_318 : i32
    %782 = arith.extui %781 : i1 to i32
    %c3_i64_320 = arith.constant 3 : i64
    %783 = llvm.load %10 : !llvm.ptr -> i64
    %784 = arith.cmpi ult, %783, %c3_i64_320 : i64
    scf.if %784 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %783, %c3_i64_320 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %785 = arith.addi %761, %782 : i32
    %c3_i64_321 = arith.constant 3 : i64
    %786 = llvm.load %10 : !llvm.ptr -> i64
    %787 = arith.cmpi ult, %786, %c3_i64_321 : i64
    scf.if %787 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %786, %c3_i64_321 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %785, %4 : i32, !llvm.ptr
    %c3_i64_322 = arith.constant 3 : i64
    %788 = llvm.load %10 : !llvm.ptr -> i64
    %789 = arith.cmpi ult, %788, %c3_i64_322 : i64
    scf.if %789 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %788, %c3_i64_322 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %790 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_323 = arith.constant 3 : i64
    %791 = llvm.load %10 : !llvm.ptr -> i64
    %792 = arith.cmpi ult, %791, %c3_i64_323 : i64
    scf.if %792 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %791, %c3_i64_323 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %793 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_324 = arith.constant 1 : i64
    %794 = llvm.load %10 : !llvm.ptr -> i64
    %795 = arith.cmpi ult, %794, %c1_i64_324 : i64
    scf.if %795 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %794, %c1_i64_324 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c4_i32_325 = arith.constant 4 : i32
    %c3_i64_326 = arith.constant 3 : i64
    %796 = llvm.load %10 : !llvm.ptr -> i64
    %797 = arith.cmpi ult, %796, %c3_i64_326 : i64
    scf.if %797 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %796, %c3_i64_326 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %798 = arith.addi %793, %c4_i32_325 : i32
    %c3_i64_327 = arith.constant 3 : i64
    %799 = llvm.load %10 : !llvm.ptr -> i64
    %800 = arith.cmpi ult, %799, %c3_i64_327 : i64
    scf.if %800 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %799, %c3_i64_327 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %798, %7 : i32, !llvm.ptr
    %c3_i64_328 = arith.constant 3 : i64
    %801 = llvm.load %10 : !llvm.ptr -> i64
    %802 = arith.cmpi ult, %801, %c3_i64_328 : i64
    scf.if %802 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %801, %c3_i64_328 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %803 = arith.cmpi eq, %790, %798 : i32
    %804 = arith.extui %803 : i1 to i32
    %c0_i32_329 = arith.constant 0 : i32
    %805 = arith.cmpi eq, %804, %c0_i32_329 : i32
    %806 = arith.extui %805 : i1 to i32
    %c1_i64_330 = arith.constant 1 : i64
    %807 = llvm.load %10 : !llvm.ptr -> i64
    %808 = arith.cmpi ult, %807, %c1_i64_330 : i64
    scf.if %808 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %807, %c1_i64_330 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_331 = arith.constant 0 : i32
    %809 = arith.cmpi ne, %806, %c0_i32_331 : i32
    cf.cond_br %809, ^bb50, ^bb51
  ^bb51:  // pred: ^bb50
    %c1_i64_332 = arith.constant 1 : i64
    %810 = llvm.load %10 : !llvm.ptr -> i64
    %811 = arith.cmpi ult, %810, %c1_i64_332 : i64
    scf.if %811 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %810, %c1_i64_332 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb49
  ^bb52:  // pred: ^bb46
    %c3_i64_333 = arith.constant 3 : i64
    %812 = llvm.load %10 : !llvm.ptr -> i64
    %813 = arith.cmpi ult, %812, %c3_i64_333 : i64
    scf.if %813 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %812, %c3_i64_333 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %814 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_334 = arith.constant 3 : i64
    %815 = llvm.load %10 : !llvm.ptr -> i64
    %816 = arith.cmpi ult, %815, %c3_i64_334 : i64
    scf.if %816 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %815, %c3_i64_334 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %817 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_335 = arith.constant 3 : i64
    %818 = llvm.load %10 : !llvm.ptr -> i64
    %819 = arith.cmpi ult, %818, %c3_i64_335 : i64
    scf.if %819 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %818, %c3_i64_335 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %820 = arith.addi %814, %817 : i32
    %c3_i64_336 = arith.constant 3 : i64
    %821 = llvm.load %10 : !llvm.ptr -> i64
    %822 = arith.cmpi ult, %821, %c3_i64_336 : i64
    scf.if %822 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %821, %c3_i64_336 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %820, %8 : i32, !llvm.ptr
    %c1_i64_337 = arith.constant 1 : i64
    %823 = llvm.load %10 : !llvm.ptr -> i64
    %824 = arith.cmpi ult, %823, %c1_i64_337 : i64
    scf.if %824 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %823, %c1_i64_337 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb54
  ^bb53:  // pred: ^bb55
    %c1_i64_338 = arith.constant 1 : i64
    %825 = llvm.load %10 : !llvm.ptr -> i64
    %826 = arith.cmpi ult, %825, %c1_i64_338 : i64
    scf.if %826 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %825, %c1_i64_338 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb41
  ^bb54:  // 2 preds: ^bb52, ^bb54
    %c3_i64_339 = arith.constant 3 : i64
    %827 = llvm.load %10 : !llvm.ptr -> i64
    %828 = arith.cmpi ult, %827, %c3_i64_339 : i64
    scf.if %828 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %827, %c3_i64_339 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %829 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_340 = arith.constant 3 : i64
    %830 = llvm.load %10 : !llvm.ptr -> i64
    %831 = arith.cmpi ult, %830, %c3_i64_340 : i64
    scf.if %831 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %830, %c3_i64_340 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %832 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_341 = arith.constant 3 : i64
    %833 = llvm.load %10 : !llvm.ptr -> i64
    %834 = arith.cmpi ult, %833, %c3_i64_341 : i64
    scf.if %834 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %833, %c3_i64_341 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i64_342 = arith.constant 0 : i64
    %835 = arith.extui %832 : i32 to i64
    %836 = arith.addi %835, %c0_i64_342 : i64
    %837 = llvm.getelementptr %13[%836] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %838 = llvm.load volatile %837 {alignment = 1 : i64} : !llvm.ptr -> i8
    %839 = arith.extsi %838 : i8 to i32
    %c1_i64_343 = arith.constant 1 : i64
    %840 = llvm.load %10 : !llvm.ptr -> i64
    %841 = arith.cmpi ult, %840, %c1_i64_343 : i64
    scf.if %841 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %840, %c1_i64_343 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-65_i32_344 = arith.constant -65 : i32
    %c3_i64_345 = arith.constant 3 : i64
    %842 = llvm.load %10 : !llvm.ptr -> i64
    %843 = arith.cmpi ult, %842, %c3_i64_345 : i64
    scf.if %843 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %842, %c3_i64_345 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %844 = arith.cmpi sgt, %839, %c-65_i32_344 : i32
    %845 = arith.extui %844 : i1 to i32
    %c3_i64_346 = arith.constant 3 : i64
    %846 = llvm.load %10 : !llvm.ptr -> i64
    %847 = arith.cmpi ult, %846, %c3_i64_346 : i64
    scf.if %847 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %846, %c3_i64_346 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %848 = arith.addi %829, %845 : i32
    %c3_i64_347 = arith.constant 3 : i64
    %849 = llvm.load %10 : !llvm.ptr -> i64
    %850 = arith.cmpi ult, %849, %c3_i64_347 : i64
    scf.if %850 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %849, %c3_i64_347 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %848, %4 : i32, !llvm.ptr
    %c3_i64_348 = arith.constant 3 : i64
    %851 = llvm.load %10 : !llvm.ptr -> i64
    %852 = arith.cmpi ult, %851, %c3_i64_348 : i64
    scf.if %852 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %851, %c3_i64_348 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %853 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i64_349 = arith.constant 1 : i64
    %854 = llvm.load %10 : !llvm.ptr -> i64
    %855 = arith.cmpi ult, %854, %c1_i64_349 : i64
    scf.if %855 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %854, %c1_i64_349 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i32_350 = arith.constant 1 : i32
    %c3_i64_351 = arith.constant 3 : i64
    %856 = llvm.load %10 : !llvm.ptr -> i64
    %857 = arith.cmpi ult, %856, %c3_i64_351 : i64
    scf.if %857 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %856, %c3_i64_351 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %858 = arith.addi %853, %c1_i32_350 : i32
    %c3_i64_352 = arith.constant 3 : i64
    %859 = llvm.load %10 : !llvm.ptr -> i64
    %860 = arith.cmpi ult, %859, %c3_i64_352 : i64
    scf.if %860 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %859, %c3_i64_352 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %858, %8 : i32, !llvm.ptr
    %c3_i64_353 = arith.constant 3 : i64
    %861 = llvm.load %10 : !llvm.ptr -> i64
    %862 = arith.cmpi ult, %861, %c3_i64_353 : i64
    scf.if %862 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %861, %c3_i64_353 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %863 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_354 = arith.constant 1 : i64
    %864 = llvm.load %10 : !llvm.ptr -> i64
    %865 = arith.cmpi ult, %864, %c1_i64_354 : i64
    scf.if %865 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %864, %c1_i64_354 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-1_i32_355 = arith.constant -1 : i32
    %c3_i64_356 = arith.constant 3 : i64
    %866 = llvm.load %10 : !llvm.ptr -> i64
    %867 = arith.cmpi ult, %866, %c3_i64_356 : i64
    scf.if %867 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %866, %c3_i64_356 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %868 = arith.addi %863, %c-1_i32_355 : i32
    %c3_i64_357 = arith.constant 3 : i64
    %869 = llvm.load %10 : !llvm.ptr -> i64
    %870 = arith.cmpi ult, %869, %c3_i64_357 : i64
    scf.if %870 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %869, %c3_i64_357 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %868, %6 : i32, !llvm.ptr
    %c1_i64_358 = arith.constant 1 : i64
    %871 = llvm.load %10 : !llvm.ptr -> i64
    %872 = arith.cmpi ult, %871, %c1_i64_358 : i64
    scf.if %872 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %871, %c1_i64_358 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_359 = arith.constant 0 : i32
    %873 = arith.cmpi ne, %868, %c0_i32_359 : i32
    cf.cond_br %873, ^bb54, ^bb55
  ^bb55:  // pred: ^bb54
    %c1_i64_360 = arith.constant 1 : i64
    %874 = llvm.load %10 : !llvm.ptr -> i64
    %875 = arith.cmpi ult, %874, %c1_i64_360 : i64
    scf.if %875 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %874, %c1_i64_360 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb53
  ^bb56:  // pred: ^bb63
    %c1_i64_361 = arith.constant 1 : i64
    %876 = llvm.load %10 : !llvm.ptr -> i64
    %877 = arith.cmpi ult, %876, %c1_i64_361 : i64
    scf.if %877 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %876, %c1_i64_361 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i32_362 = arith.constant 1 : i32
    %c3_i64_363 = arith.constant 3 : i64
    %878 = llvm.load %10 : !llvm.ptr -> i64
    %879 = arith.cmpi ult, %878, %c3_i64_363 : i64
    scf.if %879 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %878, %c3_i64_363 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_362, %4 : i32, !llvm.ptr
    %c1_i64_364 = arith.constant 1 : i64
    %880 = llvm.load %10 : !llvm.ptr -> i64
    %881 = arith.cmpi ult, %880, %c1_i64_364 : i64
    scf.if %881 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %880, %c1_i64_364 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_365 = arith.constant 3 : i64
    %882 = llvm.load %10 : !llvm.ptr -> i64
    %883 = arith.cmpi ult, %882, %c3_i64_365 : i64
    scf.if %883 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %882, %c3_i64_365 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %884 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_366 = arith.constant 3 : i64
    %885 = llvm.load %10 : !llvm.ptr -> i64
    %886 = arith.cmpi ult, %885, %c3_i64_366 : i64
    scf.if %886 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %885, %c3_i64_366 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %887 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_367 = arith.constant 3 : i64
    %888 = llvm.load %10 : !llvm.ptr -> i64
    %889 = arith.cmpi ult, %888, %c3_i64_367 : i64
    scf.if %889 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %888, %c3_i64_367 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %890 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_368 = arith.constant 3 : i64
    %891 = llvm.load %10 : !llvm.ptr -> i64
    %892 = arith.cmpi ult, %891, %c3_i64_368 : i64
    scf.if %892 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %891, %c3_i64_368 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %893 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_369 = arith.constant 3 : i64
    %894 = llvm.load %10 : !llvm.ptr -> i64
    %895 = arith.cmpi ult, %894, %c3_i64_369 : i64
    scf.if %895 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %894, %c3_i64_369 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c12_i64_370 = arith.constant 12 : i64
    %896 = arith.extui %893 : i32 to i64
    %897 = arith.addi %896, %c12_i64_370 : i64
    %898 = llvm.getelementptr %13[%897] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %899 = llvm.load volatile %898 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_371 = arith.constant 7 : i64
    %900 = llvm.load %10 : !llvm.ptr -> i64
    %901 = arith.cmpi ult, %900, %c7_i64_371 : i64
    scf.if %901 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %900, %c7_i64_371 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %902 = arith.cmpi ult, %899, %31 : i32
    cf.cond_br %902, ^bb83, ^bb84
  ^bb57:  // pred: ^bb41
    %c3_i64_372 = arith.constant 3 : i64
    %903 = llvm.load %10 : !llvm.ptr -> i64
    %904 = arith.cmpi ult, %903, %c3_i64_372 : i64
    scf.if %904 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %903, %c3_i64_372 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %905 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_373 = arith.constant 3 : i64
    %906 = llvm.load %10 : !llvm.ptr -> i64
    %907 = arith.cmpi ult, %906, %c3_i64_373 : i64
    scf.if %907 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %906, %c3_i64_373 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c20_i64_374 = arith.constant 20 : i64
    %908 = arith.extui %905 : i32 to i64
    %909 = arith.addi %908, %c20_i64_374 : i64
    %910 = llvm.getelementptr %13[%909] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %911 = llvm.load volatile %910 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_375 = arith.constant 3 : i64
    %912 = llvm.load %10 : !llvm.ptr -> i64
    %913 = arith.cmpi ult, %912, %c3_i64_375 : i64
    scf.if %913 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %912, %c3_i64_375 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %914 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_376 = arith.constant 3 : i64
    %915 = llvm.load %10 : !llvm.ptr -> i64
    %916 = arith.cmpi ult, %915, %c3_i64_376 : i64
    scf.if %916 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %915, %c3_i64_376 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %917 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_377 = arith.constant 3 : i64
    %918 = llvm.load %10 : !llvm.ptr -> i64
    %919 = arith.cmpi ult, %918, %c3_i64_377 : i64
    scf.if %919 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %918, %c3_i64_377 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %920 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_378 = arith.constant 3 : i64
    %921 = llvm.load %10 : !llvm.ptr -> i64
    %922 = arith.cmpi ult, %921, %c3_i64_378 : i64
    scf.if %922 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %921, %c3_i64_378 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c24_i64_379 = arith.constant 24 : i64
    %923 = arith.extui %920 : i32 to i64
    %924 = arith.addi %923, %c24_i64_379 : i64
    %925 = llvm.getelementptr %13[%924] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %926 = llvm.load volatile %925 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_380 = arith.constant 3 : i64
    %927 = llvm.load %10 : !llvm.ptr -> i64
    %928 = arith.cmpi ult, %927, %c3_i64_380 : i64
    scf.if %928 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %927, %c3_i64_380 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c12_i64_381 = arith.constant 12 : i64
    %929 = arith.extui %926 : i32 to i64
    %930 = arith.addi %929, %c12_i64_381 : i64
    %931 = llvm.getelementptr %13[%930] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %932 = llvm.load volatile %931 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_382 = arith.constant 7 : i64
    %933 = llvm.load %10 : !llvm.ptr -> i64
    %934 = arith.cmpi ult, %933, %c7_i64_382 : i64
    scf.if %934 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %933, %c7_i64_382 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %935 = arith.cmpi ult, %932, %28 : i32
    cf.cond_br %935, ^bb74, ^bb75
  ^bb58:  // pred: ^bb41
    %c3_i64_383 = arith.constant 3 : i64
    %936 = llvm.load %10 : !llvm.ptr -> i64
    %937 = arith.cmpi ult, %936, %c3_i64_383 : i64
    scf.if %937 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %936, %c3_i64_383 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %938 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_384 = arith.constant 3 : i64
    %939 = llvm.load %10 : !llvm.ptr -> i64
    %940 = arith.cmpi ult, %939, %c3_i64_384 : i64
    scf.if %940 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %939, %c3_i64_384 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %941 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_385 = arith.constant 3 : i64
    %942 = llvm.load %10 : !llvm.ptr -> i64
    %943 = arith.cmpi ult, %942, %c3_i64_385 : i64
    scf.if %943 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %942, %c3_i64_385 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %944 = arith.subi %938, %941 : i32
    %c3_i64_386 = arith.constant 3 : i64
    %945 = llvm.load %10 : !llvm.ptr -> i64
    %946 = arith.cmpi ult, %945, %c3_i64_386 : i64
    scf.if %946 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %945, %c3_i64_386 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %944, %5 : i32, !llvm.ptr
    %c1_i64_387 = arith.constant 1 : i64
    %947 = llvm.load %10 : !llvm.ptr -> i64
    %948 = arith.cmpi ult, %947, %c1_i64_387 : i64
    scf.if %948 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %947, %c1_i64_387 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_388 = arith.constant 0 : i32
    %c3_i64_389 = arith.constant 3 : i64
    %949 = llvm.load %10 : !llvm.ptr -> i64
    %950 = arith.cmpi ult, %949, %c3_i64_389 : i64
    scf.if %950 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %949, %c3_i64_389 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_388, %4 : i32, !llvm.ptr
    %c1_i64_390 = arith.constant 1 : i64
    %951 = llvm.load %10 : !llvm.ptr -> i64
    %952 = arith.cmpi ult, %951, %c1_i64_390 : i64
    scf.if %952 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %951, %c1_i64_390 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i64_391 = arith.constant 1 : i64
    %953 = llvm.load %10 : !llvm.ptr -> i64
    %954 = arith.cmpi ult, %953, %c1_i64_391 : i64
    scf.if %954 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %953, %c1_i64_391 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i64_392 = arith.constant 1 : i64
    %955 = llvm.load %10 : !llvm.ptr -> i64
    %956 = arith.cmpi ult, %955, %c1_i64_392 : i64
    scf.if %956 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %955, %c1_i64_392 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_393 = arith.constant 3 : i64
    %957 = llvm.load %10 : !llvm.ptr -> i64
    %958 = arith.cmpi ult, %957, %c3_i64_393 : i64
    scf.if %958 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %957, %c3_i64_393 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %959 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_394 = arith.constant 3 : i64
    %960 = llvm.load %10 : !llvm.ptr -> i64
    %961 = arith.cmpi ult, %960, %c3_i64_394 : i64
    scf.if %961 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %960, %c3_i64_394 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c32_i64 = arith.constant 32 : i64
    %962 = arith.extui %959 : i32 to i64
    %963 = arith.addi %962, %c32_i64 : i64
    %964 = llvm.getelementptr %13[%963] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %965 = llvm.load volatile %964 {alignment = 1 : i64} : !llvm.ptr -> i8
    %966 = arith.extui %965 : i8 to i32
    %c1_i64_395 = arith.constant 1 : i64
    %967 = llvm.load %10 : !llvm.ptr -> i64
    %968 = arith.cmpi ult, %967, %c1_i64_395 : i64
    scf.if %968 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %967, %c1_i64_395 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.switch %966 : i32, [
      default: ^bb59,
      0: ^bb59,
      1: ^bb61,
      2: ^bb60,
      3: ^bb59
    ]
  ^bb59:  // 5 preds: ^bb58, ^bb58, ^bb58, ^bb60, ^bb61
    %c3_i64_396 = arith.constant 3 : i64
    %969 = llvm.load %10 : !llvm.ptr -> i64
    %970 = arith.cmpi ult, %969, %c3_i64_396 : i64
    scf.if %970 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %969, %c3_i64_396 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %971 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_397 = arith.constant 1 : i64
    %972 = llvm.load %10 : !llvm.ptr -> i64
    %973 = arith.cmpi ult, %972, %c1_i64_397 : i64
    scf.if %973 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %972, %c1_i64_397 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i32_398 = arith.constant 1 : i32
    %c3_i64_399 = arith.constant 3 : i64
    %974 = llvm.load %10 : !llvm.ptr -> i64
    %975 = arith.cmpi ult, %974, %c3_i64_399 : i64
    scf.if %975 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %974, %c3_i64_399 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %976 = arith.addi %971, %c1_i32_398 : i32
    %c3_i64_400 = arith.constant 3 : i64
    %977 = llvm.load %10 : !llvm.ptr -> i64
    %978 = arith.cmpi ult, %977, %c3_i64_400 : i64
    scf.if %978 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %977, %c3_i64_400 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %976, %4 : i32, !llvm.ptr
    %c3_i64_401 = arith.constant 3 : i64
    %979 = llvm.load %10 : !llvm.ptr -> i64
    %980 = arith.cmpi ult, %979, %c3_i64_401 : i64
    scf.if %980 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %979, %c3_i64_401 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %981 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_402 = arith.constant 3 : i64
    %982 = llvm.load %10 : !llvm.ptr -> i64
    %983 = arith.cmpi ult, %982, %c3_i64_402 : i64
    scf.if %983 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %982, %c3_i64_402 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %984 = arith.extui %981 : i32 to i64
    %985 = arith.addi %984, %c16_i64 : i64
    %986 = llvm.getelementptr %13[%985] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %987 = llvm.load volatile %986 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_403 = arith.constant 3 : i64
    %988 = llvm.load %10 : !llvm.ptr -> i64
    %989 = arith.cmpi ult, %988, %c3_i64_403 : i64
    scf.if %989 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %988, %c3_i64_403 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %987, %6 : i32, !llvm.ptr
    %c3_i64_404 = arith.constant 3 : i64
    %990 = llvm.load %10 : !llvm.ptr -> i64
    %991 = arith.cmpi ult, %990, %c3_i64_404 : i64
    scf.if %991 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %990, %c3_i64_404 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %992 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_405 = arith.constant 3 : i64
    %993 = llvm.load %10 : !llvm.ptr -> i64
    %994 = arith.cmpi ult, %993, %c3_i64_405 : i64
    scf.if %994 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %993, %c3_i64_405 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c24_i64_406 = arith.constant 24 : i64
    %995 = arith.extui %992 : i32 to i64
    %996 = arith.addi %995, %c24_i64_406 : i64
    %997 = llvm.getelementptr %13[%996] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %998 = llvm.load volatile %997 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_407 = arith.constant 3 : i64
    %999 = llvm.load %10 : !llvm.ptr -> i64
    %1000 = arith.cmpi ult, %999, %c3_i64_407 : i64
    scf.if %1000 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %999, %c3_i64_407 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %998, %8 : i32, !llvm.ptr
    %c3_i64_408 = arith.constant 3 : i64
    %1001 = llvm.load %10 : !llvm.ptr -> i64
    %1002 = arith.cmpi ult, %1001, %c3_i64_408 : i64
    scf.if %1002 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1001, %c3_i64_408 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1003 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_409 = arith.constant 3 : i64
    %1004 = llvm.load %10 : !llvm.ptr -> i64
    %1005 = arith.cmpi ult, %1004, %c3_i64_409 : i64
    scf.if %1005 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1004, %c3_i64_409 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c20_i64_410 = arith.constant 20 : i64
    %1006 = arith.extui %1003 : i32 to i64
    %1007 = arith.addi %1006, %c20_i64_410 : i64
    %1008 = llvm.getelementptr %13[%1007] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1009 = llvm.load volatile %1008 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_411 = arith.constant 3 : i64
    %1010 = llvm.load %10 : !llvm.ptr -> i64
    %1011 = arith.cmpi ult, %1010, %c3_i64_411 : i64
    scf.if %1011 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1010, %c3_i64_411 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %1009, %7 : i32, !llvm.ptr
    %c1_i64_412 = arith.constant 1 : i64
    %1012 = llvm.load %10 : !llvm.ptr -> i64
    %1013 = arith.cmpi ult, %1012, %c1_i64_412 : i64
    scf.if %1013 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1012, %c1_i64_412 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb63
  ^bb60:  // pred: ^bb58
    %c3_i64_413 = arith.constant 3 : i64
    %1014 = llvm.load %10 : !llvm.ptr -> i64
    %1015 = arith.cmpi ult, %1014, %c3_i64_413 : i64
    scf.if %1015 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1014, %c3_i64_413 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1016 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_414 = arith.constant 1 : i64
    %1017 = llvm.load %10 : !llvm.ptr -> i64
    %1018 = arith.cmpi ult, %1017, %c1_i64_414 : i64
    scf.if %1018 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1017, %c1_i64_414 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i32_415 = arith.constant 1 : i32
    %c3_i64_416 = arith.constant 3 : i64
    %1019 = llvm.load %10 : !llvm.ptr -> i64
    %1020 = arith.cmpi ult, %1019, %c3_i64_416 : i64
    scf.if %1020 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1019, %c3_i64_416 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %1021 = arith.cmpi ule, %c1_i32_415, %c31_i32 : i32
    %1022 = scf.if %1021 -> (i32) {
      %1279 = arith.shrui %1016, %c1_i32_415 : i32
      scf.yield %1279 : i32
    } else {
      %c0_i32_535 = arith.constant 0 : i32
      scf.yield %c0_i32_535 : i32
    }
    %c3_i64_417 = arith.constant 3 : i64
    %1023 = llvm.load %10 : !llvm.ptr -> i64
    %1024 = arith.cmpi ult, %1023, %c3_i64_417 : i64
    scf.if %1024 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1023, %c3_i64_417 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %1022, %4 : i32, !llvm.ptr
    %c3_i64_418 = arith.constant 3 : i64
    %1025 = llvm.load %10 : !llvm.ptr -> i64
    %1026 = arith.cmpi ult, %1025, %c3_i64_418 : i64
    scf.if %1026 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1025, %c3_i64_418 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1027 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_419 = arith.constant 1 : i64
    %1028 = llvm.load %10 : !llvm.ptr -> i64
    %1029 = arith.cmpi ult, %1028, %c1_i64_419 : i64
    scf.if %1029 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1028, %c1_i64_419 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i32_420 = arith.constant 1 : i32
    %c3_i64_421 = arith.constant 3 : i64
    %1030 = llvm.load %10 : !llvm.ptr -> i64
    %1031 = arith.cmpi ult, %1030, %c3_i64_421 : i64
    scf.if %1031 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1030, %c3_i64_421 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1032 = arith.addi %1027, %c1_i32_420 : i32
    %c1_i64_422 = arith.constant 1 : i64
    %1033 = llvm.load %10 : !llvm.ptr -> i64
    %1034 = arith.cmpi ult, %1033, %c1_i64_422 : i64
    scf.if %1034 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1033, %c1_i64_422 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i32_423 = arith.constant 1 : i32
    %c3_i64_424 = arith.constant 3 : i64
    %1035 = llvm.load %10 : !llvm.ptr -> i64
    %1036 = arith.cmpi ult, %1035, %c3_i64_424 : i64
    scf.if %1036 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1035, %c3_i64_424 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c31_i32_425 = arith.constant 31 : i32
    %1037 = arith.cmpi ule, %c1_i32_423, %c31_i32_425 : i32
    %1038 = scf.if %1037 -> (i32) {
      %1279 = arith.shrui %1032, %c1_i32_423 : i32
      scf.yield %1279 : i32
    } else {
      %c0_i32_535 = arith.constant 0 : i32
      scf.yield %c0_i32_535 : i32
    }
    %c3_i64_426 = arith.constant 3 : i64
    %1039 = llvm.load %10 : !llvm.ptr -> i64
    %1040 = arith.cmpi ult, %1039, %c3_i64_426 : i64
    scf.if %1040 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1039, %c3_i64_426 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %1038, %5 : i32, !llvm.ptr
    %c1_i64_427 = arith.constant 1 : i64
    %1041 = llvm.load %10 : !llvm.ptr -> i64
    %1042 = arith.cmpi ult, %1041, %c1_i64_427 : i64
    scf.if %1042 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1041, %c1_i64_427 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb59
  ^bb61:  // pred: ^bb58
    %c3_i64_428 = arith.constant 3 : i64
    %1043 = llvm.load %10 : !llvm.ptr -> i64
    %1044 = arith.cmpi ult, %1043, %c3_i64_428 : i64
    scf.if %1044 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1043, %c3_i64_428 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1045 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_429 = arith.constant 3 : i64
    %1046 = llvm.load %10 : !llvm.ptr -> i64
    %1047 = arith.cmpi ult, %1046, %c3_i64_429 : i64
    scf.if %1047 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1046, %c3_i64_429 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %1045, %4 : i32, !llvm.ptr
    %c1_i64_430 = arith.constant 1 : i64
    %1048 = llvm.load %10 : !llvm.ptr -> i64
    %1049 = arith.cmpi ult, %1048, %c1_i64_430 : i64
    scf.if %1049 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1048, %c1_i64_430 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_431 = arith.constant 0 : i32
    %c3_i64_432 = arith.constant 3 : i64
    %1050 = llvm.load %10 : !llvm.ptr -> i64
    %1051 = arith.cmpi ult, %1050, %c3_i64_432 : i64
    scf.if %1051 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1050, %c3_i64_432 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_431, %5 : i32, !llvm.ptr
    %c1_i64_433 = arith.constant 1 : i64
    %1052 = llvm.load %10 : !llvm.ptr -> i64
    %1053 = arith.cmpi ult, %1052, %c1_i64_433 : i64
    scf.if %1053 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1052, %c1_i64_433 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb59
  ^bb62:  // pred: ^bb73
    %c1_i64_434 = arith.constant 1 : i64
    %1054 = llvm.load %10 : !llvm.ptr -> i64
    %1055 = arith.cmpi ult, %1054, %c1_i64_434 : i64
    scf.if %1055 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1054, %c1_i64_434 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i32_435 = arith.constant 1 : i32
    %c1_i64_436 = arith.constant 1 : i64
    %1056 = llvm.load %10 : !llvm.ptr -> i64
    %1057 = arith.cmpi ult, %1056, %c1_i64_436 : i64
    scf.if %1057 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1056, %c1_i64_436 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c1_i32_435 : i32)
  ^bb63:  // 2 preds: ^bb59, ^bb71
    %c3_i64_437 = arith.constant 3 : i64
    %1058 = llvm.load %10 : !llvm.ptr -> i64
    %1059 = arith.cmpi ult, %1058, %c3_i64_437 : i64
    scf.if %1059 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1058, %c3_i64_437 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1060 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_438 = arith.constant 1 : i64
    %1061 = llvm.load %10 : !llvm.ptr -> i64
    %1062 = arith.cmpi ult, %1061, %c1_i64_438 : i64
    scf.if %1062 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1061, %c1_i64_438 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-1_i32_439 = arith.constant -1 : i32
    %c3_i64_440 = arith.constant 3 : i64
    %1063 = llvm.load %10 : !llvm.ptr -> i64
    %1064 = arith.cmpi ult, %1063, %c3_i64_440 : i64
    scf.if %1064 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1063, %c3_i64_440 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1065 = arith.addi %1060, %c-1_i32_439 : i32
    %c3_i64_441 = arith.constant 3 : i64
    %1066 = llvm.load %10 : !llvm.ptr -> i64
    %1067 = arith.cmpi ult, %1066, %c3_i64_441 : i64
    scf.if %1067 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1066, %c3_i64_441 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %1065, %4 : i32, !llvm.ptr
    %c3_i64_442 = arith.constant 3 : i64
    %1068 = llvm.load %10 : !llvm.ptr -> i64
    %1069 = arith.cmpi ult, %1068, %c3_i64_442 : i64
    scf.if %1069 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1068, %c3_i64_442 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_443 = arith.constant 0 : i32
    %1070 = arith.cmpi eq, %1065, %c0_i32_443 : i32
    %1071 = arith.extui %1070 : i1 to i32
    %c1_i64_444 = arith.constant 1 : i64
    %1072 = llvm.load %10 : !llvm.ptr -> i64
    %1073 = arith.cmpi ult, %1072, %c1_i64_444 : i64
    scf.if %1073 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1072, %c1_i64_444 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_445 = arith.constant 0 : i32
    %1074 = arith.cmpi ne, %1071, %c0_i32_445 : i32
    cf.cond_br %1074, ^bb56, ^bb64
  ^bb64:  // pred: ^bb63
    %c3_i64_446 = arith.constant 3 : i64
    %1075 = llvm.load %10 : !llvm.ptr -> i64
    %1076 = arith.cmpi ult, %1075, %c3_i64_446 : i64
    scf.if %1076 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1075, %c3_i64_446 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1077 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_447 = arith.constant 3 : i64
    %1078 = llvm.load %10 : !llvm.ptr -> i64
    %1079 = arith.cmpi ult, %1078, %c3_i64_447 : i64
    scf.if %1079 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1078, %c3_i64_447 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1080 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_448 = arith.constant 3 : i64
    %1081 = llvm.load %10 : !llvm.ptr -> i64
    %1082 = arith.cmpi ult, %1081, %c3_i64_448 : i64
    scf.if %1082 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1081, %c3_i64_448 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1083 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_449 = arith.constant 3 : i64
    %1084 = llvm.load %10 : !llvm.ptr -> i64
    %1085 = arith.cmpi ult, %1084, %c3_i64_449 : i64
    scf.if %1085 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1084, %c3_i64_449 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c16_i64_450 = arith.constant 16 : i64
    %1086 = arith.extui %1083 : i32 to i64
    %1087 = arith.addi %1086, %c16_i64_450 : i64
    %1088 = llvm.getelementptr %13[%1087] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1089 = llvm.load volatile %1088 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_451 = arith.constant 7 : i64
    %1090 = llvm.load %10 : !llvm.ptr -> i64
    %1091 = arith.cmpi ult, %1090, %c7_i64_451 : i64
    scf.if %1091 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1090, %c7_i64_451 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1092 = arith.cmpi ult, %1089, %25 : i32
    cf.cond_br %1092, ^bb65, ^bb66
  ^bb65:  // 2 preds: ^bb64, ^bb66
    %1093 = llvm.getelementptr inbounds %23[%1089] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %1094 = llvm.load %1093 : !llvm.ptr -> !llvm.ptr
    %1095 = llvm.ptrtoint %1094 : !llvm.ptr to i64
    %c0_i64_452 = arith.constant 0 : i64
    %1096 = arith.cmpi eq, %1095, %c0_i64_452 : i64
    cf.cond_br %1096, ^bb68, ^bb67
  ^bb66:  // pred: ^bb64
    %c3_i32_453 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_453) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %1097 = llvm.getelementptr %1094[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1098 = llvm.getelementptr %1094[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1099 = llvm.getelementptr %1094[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1100 = llvm.load %1097 : !llvm.ptr -> !llvm.ptr
    %1101 = llvm.load %1099 : !llvm.ptr -> !llvm.ptr
    %1102 = llvm.ptrtoint %1100 : !llvm.ptr to i64
    %c0_i64_454 = arith.constant 0 : i64
    %1103 = arith.cmpi eq, %1102, %c0_i64_454 : i64
    cf.cond_br %1103, ^bb70, ^bb69
  ^bb68:  // pred: ^bb65
    %c4_i32_455 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_455) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %1104 = llvm.load %1098 : !llvm.ptr -> i32
    %1105 = arith.cmpi ne, %22, %1104 : i32
    cf.cond_br %1105, ^bb72, ^bb71
  ^bb70:  // pred: ^bb67
    %c3_i32_456 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_456) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %1106 = llvm.call %1100(%1101, %1077, %1080) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c3_i64_457 = arith.constant 3 : i64
    %1107 = llvm.load %10 : !llvm.ptr -> i64
    %1108 = arith.cmpi ult, %1107, %c3_i64_457 : i64
    scf.if %1108 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1107, %c3_i64_457 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_458 = arith.constant 0 : i32
    %1109 = arith.cmpi eq, %1106, %c0_i32_458 : i32
    %1110 = arith.extui %1109 : i1 to i32
    %c1_i64_459 = arith.constant 1 : i64
    %1111 = llvm.load %10 : !llvm.ptr -> i64
    %1112 = arith.cmpi ult, %1111, %c1_i64_459 : i64
    scf.if %1112 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1111, %c1_i64_459 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_460 = arith.constant 0 : i32
    %1113 = arith.cmpi ne, %1110, %c0_i32_460 : i32
    cf.cond_br %1113, ^bb63, ^bb73
  ^bb72:  // pred: ^bb69
    %c5_i32_461 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_461) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // pred: ^bb71
    %c1_i64_462 = arith.constant 1 : i64
    %1114 = llvm.load %10 : !llvm.ptr -> i64
    %1115 = arith.cmpi ult, %1114, %c1_i64_462 : i64
    scf.if %1115 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1114, %c1_i64_462 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb62
  ^bb74:  // 2 preds: ^bb57, ^bb75
    %1116 = llvm.getelementptr inbounds %26[%932] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %1117 = llvm.load %1116 : !llvm.ptr -> !llvm.ptr
    %1118 = llvm.ptrtoint %1117 : !llvm.ptr to i64
    %c0_i64_463 = arith.constant 0 : i64
    %1119 = arith.cmpi eq, %1118, %c0_i64_463 : i64
    cf.cond_br %1119, ^bb77, ^bb76
  ^bb75:  // pred: ^bb57
    %c3_i32_464 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_464) : (i32) -> ()
    cf.br ^bb74
  ^bb76:  // 2 preds: ^bb74, ^bb77
    %1120 = llvm.getelementptr %1117[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1121 = llvm.getelementptr %1117[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1122 = llvm.getelementptr %1117[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1123 = llvm.load %1120 : !llvm.ptr -> !llvm.ptr
    %1124 = llvm.load %1122 : !llvm.ptr -> !llvm.ptr
    %1125 = llvm.ptrtoint %1123 : !llvm.ptr to i64
    %c0_i64_465 = arith.constant 0 : i64
    %1126 = arith.cmpi eq, %1125, %c0_i64_465 : i64
    cf.cond_br %1126, ^bb79, ^bb78
  ^bb77:  // pred: ^bb74
    %c4_i32_466 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_466) : (i32) -> ()
    cf.br ^bb76
  ^bb78:  // 2 preds: ^bb76, ^bb79
    %1127 = llvm.load %1121 : !llvm.ptr -> i32
    %1128 = arith.cmpi ne, %15, %1127 : i32
    cf.cond_br %1128, ^bb81, ^bb80
  ^bb79:  // pred: ^bb76
    %c3_i32_467 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_467) : (i32) -> ()
    cf.br ^bb78
  ^bb80:  // 2 preds: ^bb78, ^bb81
    %1129 = llvm.call %1123(%1124, %911, %914, %917) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_468 = arith.constant 1 : i64
    %1130 = llvm.load %10 : !llvm.ptr -> i64
    %1131 = arith.cmpi ult, %1130, %c1_i64_468 : i64
    scf.if %1131 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1130, %c1_i64_468 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb2(%1129 : i32)
  ^bb81:  // pred: ^bb78
    %c5_i32_469 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_469) : (i32) -> ()
    cf.br ^bb80
  ^bb82:  // 2 preds: ^bb89, ^bb92
    %c3_i64_470 = arith.constant 3 : i64
    %1132 = llvm.load %10 : !llvm.ptr -> i64
    %1133 = arith.cmpi ult, %1132, %c3_i64_470 : i64
    scf.if %1133 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1132, %c3_i64_470 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1134 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_471 = arith.constant 1 : i64
    %1135 = llvm.load %10 : !llvm.ptr -> i64
    %1136 = arith.cmpi ult, %1135, %c1_i64_471 : i64
    scf.if %1136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1135, %c1_i64_471 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb2(%1134 : i32)
  ^bb83:  // 2 preds: ^bb56, ^bb84
    %1137 = llvm.getelementptr inbounds %29[%899] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %1138 = llvm.load %1137 : !llvm.ptr -> !llvm.ptr
    %1139 = llvm.ptrtoint %1138 : !llvm.ptr to i64
    %c0_i64_472 = arith.constant 0 : i64
    %1140 = arith.cmpi eq, %1139, %c0_i64_472 : i64
    cf.cond_br %1140, ^bb86, ^bb85
  ^bb84:  // pred: ^bb56
    %c3_i32_473 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_473) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %1141 = llvm.getelementptr %1138[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1142 = llvm.getelementptr %1138[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1143 = llvm.getelementptr %1138[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1144 = llvm.load %1141 : !llvm.ptr -> !llvm.ptr
    %1145 = llvm.load %1143 : !llvm.ptr -> !llvm.ptr
    %1146 = llvm.ptrtoint %1144 : !llvm.ptr to i64
    %c0_i64_474 = arith.constant 0 : i64
    %1147 = arith.cmpi eq, %1146, %c0_i64_474 : i64
    cf.cond_br %1147, ^bb88, ^bb87
  ^bb86:  // pred: ^bb83
    %c4_i32_475 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_475) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %1148 = llvm.load %1142 : !llvm.ptr -> i32
    %1149 = arith.cmpi ne, %15, %1148 : i32
    cf.cond_br %1149, ^bb90, ^bb89
  ^bb88:  // pred: ^bb85
    %c3_i32_476 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_476) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %1150 = llvm.call %1144(%1145, %884, %887, %890) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_477 = arith.constant 1 : i64
    %1151 = llvm.load %10 : !llvm.ptr -> i64
    %1152 = arith.cmpi ult, %1151, %c1_i64_477 : i64
    scf.if %1152 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1151, %c1_i64_477 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_478 = arith.constant 0 : i32
    %1153 = arith.cmpi ne, %1150, %c0_i32_478 : i32
    cf.cond_br %1153, ^bb82, ^bb91
  ^bb90:  // pred: ^bb87
    %c5_i32_479 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_479) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // pred: ^bb89
    %c1_i64_480 = arith.constant 1 : i64
    %1154 = llvm.load %10 : !llvm.ptr -> i64
    %1155 = arith.cmpi ult, %1154, %c1_i64_480 : i64
    scf.if %1155 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1154, %c1_i64_480 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_481 = arith.constant 0 : i32
    %c3_i64_482 = arith.constant 3 : i64
    %1156 = llvm.load %10 : !llvm.ptr -> i64
    %1157 = arith.cmpi ult, %1156, %c3_i64_482 : i64
    scf.if %1157 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1156, %c3_i64_482 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_481, %4 : i32, !llvm.ptr
    %c1_i64_483 = arith.constant 1 : i64
    %1158 = llvm.load %10 : !llvm.ptr -> i64
    %1159 = arith.cmpi ult, %1158, %c1_i64_483 : i64
    scf.if %1159 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1158, %c1_i64_483 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i64_484 = arith.constant 1 : i64
    %1160 = llvm.load %10 : !llvm.ptr -> i64
    %1161 = arith.cmpi ult, %1160, %c1_i64_484 : i64
    scf.if %1161 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1160, %c1_i64_484 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb94
  ^bb92:  // 2 preds: ^bb93, ^bb96
    %c3_i64_485 = arith.constant 3 : i64
    %1162 = llvm.load %10 : !llvm.ptr -> i64
    %1163 = arith.cmpi ult, %1162, %c3_i64_485 : i64
    scf.if %1163 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1162, %c3_i64_485 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1164 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_486 = arith.constant 3 : i64
    %1165 = llvm.load %10 : !llvm.ptr -> i64
    %1166 = arith.cmpi ult, %1165, %c3_i64_486 : i64
    scf.if %1166 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1165, %c3_i64_486 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1167 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_487 = arith.constant 3 : i64
    %1168 = llvm.load %10 : !llvm.ptr -> i64
    %1169 = arith.cmpi ult, %1168, %c3_i64_487 : i64
    scf.if %1169 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1168, %c3_i64_487 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1170 = arith.cmpi ult, %1164, %1167 : i32
    %1171 = arith.extui %1170 : i1 to i32
    %c3_i64_488 = arith.constant 3 : i64
    %1172 = llvm.load %10 : !llvm.ptr -> i64
    %1173 = arith.cmpi ult, %1172, %c3_i64_488 : i64
    scf.if %1173 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1172, %c3_i64_488 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %1171, %4 : i32, !llvm.ptr
    %c1_i64_489 = arith.constant 1 : i64
    %1174 = llvm.load %10 : !llvm.ptr -> i64
    %1175 = arith.cmpi ult, %1174, %c1_i64_489 : i64
    scf.if %1175 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1174, %c1_i64_489 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb82
  ^bb93:  // pred: ^bb105
    %c3_i64_490 = arith.constant 3 : i64
    %1176 = llvm.load %10 : !llvm.ptr -> i64
    %1177 = arith.cmpi ult, %1176, %c3_i64_490 : i64
    scf.if %1177 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1176, %c3_i64_490 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1178 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_491 = arith.constant 1 : i64
    %1179 = llvm.load %10 : !llvm.ptr -> i64
    %1180 = arith.cmpi ult, %1179, %c1_i64_491 : i64
    scf.if %1180 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1179, %c1_i64_491 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c-1_i32_492 = arith.constant -1 : i32
    %c3_i64_493 = arith.constant 3 : i64
    %1181 = llvm.load %10 : !llvm.ptr -> i64
    %1182 = arith.cmpi ult, %1181, %c3_i64_493 : i64
    scf.if %1182 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1181, %c3_i64_493 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1183 = arith.addi %1178, %c-1_i32_492 : i32
    %c3_i64_494 = arith.constant 3 : i64
    %1184 = llvm.load %10 : !llvm.ptr -> i64
    %1185 = arith.cmpi ult, %1184, %c3_i64_494 : i64
    scf.if %1185 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1184, %c3_i64_494 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %1183, %4 : i32, !llvm.ptr
    %c1_i64_495 = arith.constant 1 : i64
    %1186 = llvm.load %10 : !llvm.ptr -> i64
    %1187 = arith.cmpi ult, %1186, %c1_i64_495 : i64
    scf.if %1187 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1186, %c1_i64_495 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb91, ^bb103
    %c1_i64_496 = arith.constant 1 : i64
    %1188 = llvm.load %10 : !llvm.ptr -> i64
    %1189 = arith.cmpi ult, %1188, %c1_i64_496 : i64
    scf.if %1189 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1188, %c1_i64_496 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c3_i64_497 = arith.constant 3 : i64
    %1190 = llvm.load %10 : !llvm.ptr -> i64
    %1191 = arith.cmpi ult, %1190, %c3_i64_497 : i64
    scf.if %1191 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1190, %c3_i64_497 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1192 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_498 = arith.constant 3 : i64
    %1193 = llvm.load %10 : !llvm.ptr -> i64
    %1194 = arith.cmpi ult, %1193, %c3_i64_498 : i64
    scf.if %1194 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1193, %c3_i64_498 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1195 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_499 = arith.constant 3 : i64
    %1196 = llvm.load %10 : !llvm.ptr -> i64
    %1197 = arith.cmpi ult, %1196, %c3_i64_499 : i64
    scf.if %1197 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1196, %c3_i64_499 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1198 = arith.cmpi eq, %1192, %1195 : i32
    %1199 = arith.extui %1198 : i1 to i32
    %c0_i32_500 = arith.constant 0 : i32
    %1200 = arith.cmpi eq, %1199, %c0_i32_500 : i32
    %1201 = arith.extui %1200 : i1 to i32
    %c1_i64_501 = arith.constant 1 : i64
    %1202 = llvm.load %10 : !llvm.ptr -> i64
    %1203 = arith.cmpi ult, %1202, %c1_i64_501 : i64
    scf.if %1203 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1202, %c1_i64_501 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_502 = arith.constant 0 : i32
    %1204 = arith.cmpi ne, %1201, %c0_i32_502 : i32
    cf.cond_br %1204, ^bb95, ^bb96
  ^bb95:  // pred: ^bb94
    %c3_i64_503 = arith.constant 3 : i64
    %1205 = llvm.load %10 : !llvm.ptr -> i64
    %1206 = arith.cmpi ult, %1205, %c3_i64_503 : i64
    scf.if %1206 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1205, %c3_i64_503 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1207 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_504 = arith.constant 1 : i64
    %1208 = llvm.load %10 : !llvm.ptr -> i64
    %1209 = arith.cmpi ult, %1208, %c1_i64_504 : i64
    scf.if %1209 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1208, %c1_i64_504 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c1_i32_505 = arith.constant 1 : i32
    %c3_i64_506 = arith.constant 3 : i64
    %1210 = llvm.load %10 : !llvm.ptr -> i64
    %1211 = arith.cmpi ult, %1210, %c3_i64_506 : i64
    scf.if %1211 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1210, %c3_i64_506 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1212 = arith.addi %1207, %c1_i32_505 : i32
    %c3_i64_507 = arith.constant 3 : i64
    %1213 = llvm.load %10 : !llvm.ptr -> i64
    %1214 = arith.cmpi ult, %1213, %c3_i64_507 : i64
    scf.if %1214 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1213, %c3_i64_507 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %1212, %4 : i32, !llvm.ptr
    %c3_i64_508 = arith.constant 3 : i64
    %1215 = llvm.load %10 : !llvm.ptr -> i64
    %1216 = arith.cmpi ult, %1215, %c3_i64_508 : i64
    scf.if %1216 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1215, %c3_i64_508 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1217 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_509 = arith.constant 3 : i64
    %1218 = llvm.load %10 : !llvm.ptr -> i64
    %1219 = arith.cmpi ult, %1218, %c3_i64_509 : i64
    scf.if %1219 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1218, %c3_i64_509 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1220 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_510 = arith.constant 3 : i64
    %1221 = llvm.load %10 : !llvm.ptr -> i64
    %1222 = arith.cmpi ult, %1221, %c3_i64_510 : i64
    scf.if %1222 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1221, %c3_i64_510 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1223 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_511 = arith.constant 3 : i64
    %1224 = llvm.load %10 : !llvm.ptr -> i64
    %1225 = arith.cmpi ult, %1224, %c3_i64_511 : i64
    scf.if %1225 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1224, %c3_i64_511 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c16_i64_512 = arith.constant 16 : i64
    %1226 = arith.extui %1223 : i32 to i64
    %1227 = arith.addi %1226, %c16_i64_512 : i64
    %1228 = llvm.getelementptr %13[%1227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1229 = llvm.load volatile %1228 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_513 = arith.constant 7 : i64
    %1230 = llvm.load %10 : !llvm.ptr -> i64
    %1231 = arith.cmpi ult, %1230, %c7_i64_513 : i64
    scf.if %1231 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1230, %c7_i64_513 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1232 = arith.cmpi ult, %1229, %34 : i32
    cf.cond_br %1232, ^bb97, ^bb98
  ^bb96:  // pred: ^bb94
    %c3_i64_514 = arith.constant 3 : i64
    %1233 = llvm.load %10 : !llvm.ptr -> i64
    %1234 = arith.cmpi ult, %1233, %c3_i64_514 : i64
    scf.if %1234 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1233, %c3_i64_514 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %1235 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_515 = arith.constant 3 : i64
    %1236 = llvm.load %10 : !llvm.ptr -> i64
    %1237 = arith.cmpi ult, %1236, %c3_i64_515 : i64
    scf.if %1237 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1236, %c3_i64_515 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    llvm.store %1235, %4 : i32, !llvm.ptr
    %c1_i64_516 = arith.constant 1 : i64
    %1238 = llvm.load %10 : !llvm.ptr -> i64
    %1239 = arith.cmpi ult, %1238, %c1_i64_516 : i64
    scf.if %1239 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1238, %c1_i64_516 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb92
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %1240 = llvm.getelementptr inbounds %32[%1229] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %1241 = llvm.load %1240 : !llvm.ptr -> !llvm.ptr
    %1242 = llvm.ptrtoint %1241 : !llvm.ptr to i64
    %c0_i64_517 = arith.constant 0 : i64
    %1243 = arith.cmpi eq, %1242, %c0_i64_517 : i64
    cf.cond_br %1243, ^bb100, ^bb99
  ^bb98:  // pred: ^bb95
    %c3_i32_518 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_518) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %1244 = llvm.getelementptr %1241[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1245 = llvm.getelementptr %1241[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1246 = llvm.getelementptr %1241[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1247 = llvm.load %1244 : !llvm.ptr -> !llvm.ptr
    %1248 = llvm.load %1246 : !llvm.ptr -> !llvm.ptr
    %1249 = llvm.ptrtoint %1247 : !llvm.ptr to i64
    %c0_i64_519 = arith.constant 0 : i64
    %1250 = arith.cmpi eq, %1249, %c0_i64_519 : i64
    cf.cond_br %1250, ^bb102, ^bb101
  ^bb100:  // pred: ^bb97
    %c4_i32_520 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_520) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb99, ^bb102
    %1251 = llvm.load %1245 : !llvm.ptr -> i32
    %1252 = arith.cmpi ne, %22, %1251 : i32
    cf.cond_br %1252, ^bb104, ^bb103
  ^bb102:  // pred: ^bb99
    %c3_i32_521 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_521) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %1253 = llvm.call %1247(%1248, %1217, %1220) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c3_i64_522 = arith.constant 3 : i64
    %1254 = llvm.load %10 : !llvm.ptr -> i64
    %1255 = arith.cmpi ult, %1254, %c3_i64_522 : i64
    scf.if %1255 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1254, %c3_i64_522 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_523 = arith.constant 0 : i32
    %1256 = arith.cmpi eq, %1253, %c0_i32_523 : i32
    %1257 = arith.extui %1256 : i1 to i32
    %c1_i64_524 = arith.constant 1 : i64
    %1258 = llvm.load %10 : !llvm.ptr -> i64
    %1259 = arith.cmpi ult, %1258, %c1_i64_524 : i64
    scf.if %1259 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1258, %c1_i64_524 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    %c0_i32_525 = arith.constant 0 : i32
    %1260 = arith.cmpi ne, %1257, %c0_i32_525 : i32
    cf.cond_br %1260, ^bb94, ^bb105
  ^bb104:  // pred: ^bb101
    %c5_i32_526 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_526) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // pred: ^bb103
    %c1_i64_527 = arith.constant 1 : i64
    %1261 = llvm.load %10 : !llvm.ptr -> i64
    %1262 = arith.cmpi ult, %1261, %c1_i64_527 : i64
    scf.if %1262 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1261, %c1_i64_527 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb93
  ^bb106:  // 2 preds: ^bb3, ^bb107
    %1263 = llvm.getelementptr inbounds %35[%102] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %1264 = llvm.load %1263 : !llvm.ptr -> !llvm.ptr
    %1265 = llvm.ptrtoint %1264 : !llvm.ptr to i64
    %c0_i64_528 = arith.constant 0 : i64
    %1266 = arith.cmpi eq, %1265, %c0_i64_528 : i64
    cf.cond_br %1266, ^bb109, ^bb108
  ^bb107:  // pred: ^bb3
    %c3_i32_529 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_529) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %1267 = llvm.getelementptr %1264[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1268 = llvm.getelementptr %1264[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1269 = llvm.getelementptr %1264[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1270 = llvm.load %1267 : !llvm.ptr -> !llvm.ptr
    %1271 = llvm.load %1269 : !llvm.ptr -> !llvm.ptr
    %1272 = llvm.ptrtoint %1270 : !llvm.ptr to i64
    %c0_i64_530 = arith.constant 0 : i64
    %1273 = arith.cmpi eq, %1272, %c0_i64_530 : i64
    cf.cond_br %1273, ^bb111, ^bb110
  ^bb109:  // pred: ^bb106
    %c4_i32_531 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_531) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // 2 preds: ^bb108, ^bb111
    %1274 = llvm.load %1268 : !llvm.ptr -> i32
    %1275 = arith.cmpi ne, %15, %1274 : i32
    cf.cond_br %1275, ^bb113, ^bb112
  ^bb111:  // pred: ^bb108
    %c3_i32_532 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_532) : (i32) -> ()
    cf.br ^bb110
  ^bb112:  // 2 preds: ^bb110, ^bb113
    %1276 = llvm.call %1270(%1271, %81, %84, %87) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_533 = arith.constant 1 : i64
    %1277 = llvm.load %10 : !llvm.ptr -> i64
    %1278 = arith.cmpi ult, %1277, %c1_i64_533 : i64
    scf.if %1278 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1279 = arith.subi %1277, %c1_i64_533 : i64
      llvm.store %1279, %10 : i64, !llvm.ptr
    }
    cf.br ^bb2(%1276 : i32)
  ^bb113:  // pred: ^bb110
    %c5_i32_534 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_534) : (i32) -> ()
    cf.br ^bb112
  }
  func.func @f65(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %28 = arith.subi %7, %c3_i64 : i64
      llvm.store %28, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c3_i64_2 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %28 = arith.subi %10, %c3_i64_2 : i64
      llvm.store %28, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %9 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %6[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %16 = arith.extui %15 : i32 to i64
    %c1_i64 = arith.constant 1 : i64
    %17 = llvm.load %3 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c1_i64 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %28 = arith.subi %17, %c1_i64 : i64
      llvm.store %28, %3 : i64, !llvm.ptr
    }
    %c1_i32_3 = arith.constant 1 : i32
    %c3_i64_4 = arith.constant 3 : i64
    %19 = llvm.load %3 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_4 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %28 = arith.subi %19, %c3_i64_4 : i64
      llvm.store %28, %3 : i64, !llvm.ptr
    }
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %22 = llvm.load %3 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c6_i64 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %28 = arith.subi %22, %c6_i64 : i64
      llvm.store %28, %3 : i64, !llvm.ptr
    }
    %24 = call @f75(%arg0, %16, %c1_i32_3, %21) : (!llvm.ptr, i64, i32, i32) -> i32
    %c1_i64_5 = arith.constant 1 : i64
    %25 = llvm.load %3 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_5 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %28 = arith.subi %25, %c1_i64_5 : i64
      llvm.store %28, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%24 : i32)
  ^bb2(%27: i32):  // pred: ^bb1
    return %27 : i32
  }
  func.func @f66(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_12 = arith.constant 1 : i32
    %14 = llvm.alloca %c1_i32_12 x i64 : (i32) -> !llvm.ptr
    llvm.store %13, %14 : i64, !llvm.ptr
    %15 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %17[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %20 : !llvm.ptr -> i32
    %22 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %23 : !llvm.ptr -> i64
    %26 = arith.trunci %25 : i64 to i32
    %27 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.load %27 : !llvm.ptr -> i32
    %29 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.load %23 : !llvm.ptr -> i64
    %31 = arith.trunci %30 : i64 to i32
    %32 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.load %23 : !llvm.ptr -> i64
    %34 = arith.trunci %33 : i64 to i32
    %35 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.load %23 : !llvm.ptr -> i64
    %37 = arith.trunci %36 : i64 to i32
    %38 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    %39 = llvm.load %23 : !llvm.ptr -> i64
    %40 = arith.trunci %39 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %41 = llvm.load %14 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c3_i64 : i64
    scf.if %42 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %41, %c3_i64 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %43 = llvm.load %16 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %44 = llvm.load %14 : !llvm.ptr -> i64
    %45 = arith.cmpi ult, %44, %c1_i64 : i64
    scf.if %45 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %44, %c1_i64 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c48_i32 = arith.constant 48 : i32
    %c3_i64_13 = arith.constant 3 : i64
    %46 = llvm.load %14 : !llvm.ptr -> i64
    %47 = arith.cmpi ult, %46, %c3_i64_13 : i64
    scf.if %47 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %46, %c3_i64_13 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %48 = arith.subi %43, %c48_i32 : i32
    %c3_i64_14 = arith.constant 3 : i64
    %49 = llvm.load %14 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c3_i64_14 : i64
    scf.if %50 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %49, %c3_i64_14 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %48, %3 : i32, !llvm.ptr
    %c3_i64_15 = arith.constant 3 : i64
    %51 = llvm.load %14 : !llvm.ptr -> i64
    %52 = arith.cmpi ult, %51, %c3_i64_15 : i64
    scf.if %52 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %51, %c3_i64_15 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %48, %16 : i32, !llvm.ptr
    %c3_i64_16 = arith.constant 3 : i64
    %53 = llvm.load %14 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c3_i64_16 : i64
    scf.if %54 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %53, %c3_i64_16 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_17 = arith.constant 1 : i64
    %56 = llvm.load %14 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c1_i64_17 : i64
    scf.if %57 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %56, %c1_i64_17 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c3_i32 = arith.constant 3 : i32
    %c3_i64_18 = arith.constant 3 : i64
    %58 = llvm.load %14 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c3_i64_18 : i64
    scf.if %59 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %58, %c3_i64_18 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c44_i64 = arith.constant 44 : i64
    %60 = arith.extui %55 : i32 to i64
    %61 = arith.addi %60, %c44_i64 : i64
    %62 = llvm.getelementptr %19[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %63, %62 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_19 = arith.constant 3 : i64
    %64 = llvm.load %14 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c3_i64_19 : i64
    scf.if %65 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %64, %c3_i64_19 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %66 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_20 = arith.constant 1 : i64
    %67 = llvm.load %14 : !llvm.ptr -> i64
    %68 = arith.cmpi ult, %67, %c1_i64_20 : i64
    scf.if %68 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %67, %c1_i64_20 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c3_i64_21 = arith.constant 3 : i64
    %69 = llvm.load %14 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c3_i64_21 : i64
    scf.if %70 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %69, %c3_i64_21 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %71 = arith.extui %66 : i32 to i64
    %72 = arith.addi %71, %c28_i64 : i64
    %73 = llvm.getelementptr %19[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %73 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_22 = arith.constant 1 : i64
    %74 = llvm.load %14 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c1_i64_22 : i64
    scf.if %75 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %74, %c1_i64_22 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_23 = arith.constant 0 : i32
    %c3_i64_24 = arith.constant 3 : i64
    %76 = llvm.load %14 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c3_i64_24 : i64
    scf.if %77 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %76, %c3_i64_24 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_23, %4 : i32, !llvm.ptr
    %c3_i64_25 = arith.constant 3 : i64
    %78 = llvm.load %14 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c3_i64_25 : i64
    scf.if %79 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %78, %c3_i64_25 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_26 = arith.constant 1 : i64
    %81 = llvm.load %14 : !llvm.ptr -> i64
    %82 = arith.cmpi ult, %81, %c1_i64_26 : i64
    scf.if %82 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %81, %c1_i64_26 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_27 = arith.constant 0 : i32
    %c3_i64_28 = arith.constant 3 : i64
    %83 = llvm.load %14 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_28 : i64
    scf.if %84 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %83, %c3_i64_28 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c40_i64 = arith.constant 40 : i64
    %85 = arith.extui %80 : i32 to i64
    %86 = arith.addi %85, %c40_i64 : i64
    %87 = llvm.getelementptr %19[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_27, %87 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_29 = arith.constant 3 : i64
    %88 = llvm.load %14 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c3_i64_29 : i64
    scf.if %89 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %88, %c3_i64_29 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_30 = arith.constant 3 : i64
    %91 = llvm.load %14 : !llvm.ptr -> i64
    %92 = arith.cmpi ult, %91, %c3_i64_30 : i64
    scf.if %92 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %91, %c3_i64_30 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %93 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_31 = arith.constant 3 : i64
    %94 = llvm.load %14 : !llvm.ptr -> i64
    %95 = arith.cmpi ult, %94, %c3_i64_31 : i64
    scf.if %95 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %94, %c3_i64_31 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c36_i64 = arith.constant 36 : i64
    %96 = arith.extui %90 : i32 to i64
    %97 = arith.addi %96, %c36_i64 : i64
    %98 = llvm.getelementptr %19[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_32 = arith.constant 3 : i64
    %99 = llvm.load %14 : !llvm.ptr -> i64
    %100 = arith.cmpi ult, %99, %c3_i64_32 : i64
    scf.if %100 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %99, %c3_i64_32 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %101 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_33 = arith.constant 3 : i64
    %102 = llvm.load %14 : !llvm.ptr -> i64
    %103 = arith.cmpi ult, %102, %c3_i64_33 : i64
    scf.if %103 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %102, %c3_i64_33 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %104 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_34 = arith.constant 3 : i64
    %105 = llvm.load %14 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %c3_i64_34 : i64
    scf.if %106 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %105, %c3_i64_34 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c32_i64 = arith.constant 32 : i64
    %107 = arith.extui %101 : i32 to i64
    %108 = arith.addi %107, %c32_i64 : i64
    %109 = llvm.getelementptr %19[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %104, %109 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_35 = arith.constant 3 : i64
    %110 = llvm.load %14 : !llvm.ptr -> i64
    %111 = arith.cmpi ult, %110, %c3_i64_35 : i64
    scf.if %111 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %110, %c3_i64_35 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %112 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_36 = arith.constant 1 : i64
    %113 = llvm.load %14 : !llvm.ptr -> i64
    %114 = arith.cmpi ult, %113, %c1_i64_36 : i64
    scf.if %114 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %113, %c1_i64_36 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_37 = arith.constant 0 : i32
    %c3_i64_38 = arith.constant 3 : i64
    %115 = llvm.load %14 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c3_i64_38 : i64
    scf.if %116 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %115, %c3_i64_38 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %117 = arith.extui %112 : i32 to i64
    %118 = arith.addi %117, %c20_i64 : i64
    %119 = llvm.getelementptr %19[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_37, %119 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_39 = arith.constant 3 : i64
    %120 = llvm.load %14 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c3_i64_39 : i64
    scf.if %121 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %120, %c3_i64_39 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %122 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_40 = arith.constant 1 : i64
    %123 = llvm.load %14 : !llvm.ptr -> i64
    %124 = arith.cmpi ult, %123, %c1_i64_40 : i64
    scf.if %124 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %123, %c1_i64_40 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_41 = arith.constant 0 : i32
    %c3_i64_42 = arith.constant 3 : i64
    %125 = llvm.load %14 : !llvm.ptr -> i64
    %126 = arith.cmpi ult, %125, %c3_i64_42 : i64
    scf.if %126 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %125, %c3_i64_42 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %127 = arith.extui %122 : i32 to i64
    %128 = arith.addi %127, %c12_i64 : i64
    %129 = llvm.getelementptr %19[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_41, %129 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_43 = arith.constant 1 : i64
    %130 = llvm.load %14 : !llvm.ptr -> i64
    %131 = arith.cmpi ult, %130, %c1_i64_43 : i64
    scf.if %131 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %130, %c1_i64_43 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i64_44 = arith.constant 1 : i64
    %132 = llvm.load %14 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c1_i64_44 : i64
    scf.if %133 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %132, %c1_i64_44 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i64_45 = arith.constant 1 : i64
    %134 = llvm.load %14 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c1_i64_45 : i64
    scf.if %135 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %134, %c1_i64_45 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i64_46 = arith.constant 1 : i64
    %136 = llvm.load %14 : !llvm.ptr -> i64
    %137 = arith.cmpi ult, %136, %c1_i64_46 : i64
    scf.if %137 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %136, %c1_i64_46 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i64_47 = arith.constant 1 : i64
    %138 = llvm.load %14 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %c1_i64_47 : i64
    scf.if %139 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %138, %c1_i64_47 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c3_i64_48 = arith.constant 3 : i64
    %140 = llvm.load %14 : !llvm.ptr -> i64
    %141 = arith.cmpi ult, %140, %c3_i64_48 : i64
    scf.if %141 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %140, %c3_i64_48 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %142 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_49 = arith.constant 3 : i64
    %143 = llvm.load %14 : !llvm.ptr -> i64
    %144 = arith.cmpi ult, %143, %c3_i64_49 : i64
    scf.if %144 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %143, %c3_i64_49 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %145 = arith.extui %142 : i32 to i64
    %146 = arith.addi %145, %c16_i64 : i64
    %147 = llvm.getelementptr %19[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_50 = arith.constant 3 : i64
    %149 = llvm.load %14 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c3_i64_50 : i64
    scf.if %150 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %149, %c3_i64_50 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %148, %5 : i32, !llvm.ptr
    %c1_i64_51 = arith.constant 1 : i64
    %151 = llvm.load %14 : !llvm.ptr -> i64
    %152 = arith.cmpi ult, %151, %c1_i64_51 : i64
    scf.if %152 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %151, %c1_i64_51 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_52 = arith.constant 0 : i32
    %153 = arith.cmpi ne, %148, %c0_i32_52 : i32
    cf.cond_br %153, ^bb7, ^bb8
  ^bb2(%154: i32):  // pred: ^bb3
    return %154 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %c3_i64_53 = arith.constant 3 : i64
    %155 = llvm.load %14 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %c3_i64_53 : i64
    scf.if %156 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %155, %c3_i64_53 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %157 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_54 = arith.constant 1 : i64
    %158 = llvm.load %14 : !llvm.ptr -> i64
    %159 = arith.cmpi ult, %158, %c1_i64_54 : i64
    scf.if %159 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %158, %c1_i64_54 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c48_i32_55 = arith.constant 48 : i32
    %c3_i64_56 = arith.constant 3 : i64
    %160 = llvm.load %14 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_56 : i64
    scf.if %161 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %160, %c3_i64_56 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %162 = arith.addi %157, %c48_i32_55 : i32
    %c3_i64_57 = arith.constant 3 : i64
    %163 = llvm.load %14 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c3_i64_57 : i64
    scf.if %164 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %163, %c3_i64_57 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %162, %16 : i32, !llvm.ptr
    %c3_i64_58 = arith.constant 3 : i64
    %165 = llvm.load %14 : !llvm.ptr -> i64
    %166 = arith.cmpi ult, %165, %c3_i64_58 : i64
    scf.if %166 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %165, %c3_i64_58 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %167 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_59 = arith.constant 1 : i64
    %168 = llvm.load %14 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c1_i64_59 : i64
    scf.if %169 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %168, %c1_i64_59 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb2(%167 : i32)
  ^bb4:  // 2 preds: ^bb6, ^bb72
    %c1_i64_60 = arith.constant 1 : i64
    %170 = llvm.load %14 : !llvm.ptr -> i64
    %171 = arith.cmpi ult, %170, %c1_i64_60 : i64
    scf.if %171 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %170, %c1_i64_60 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_61 = arith.constant 0 : i32
    %c3_i64_62 = arith.constant 3 : i64
    %172 = llvm.load %14 : !llvm.ptr -> i64
    %173 = arith.cmpi ult, %172, %c3_i64_62 : i64
    scf.if %173 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %172, %c3_i64_62 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_61, %1 : i32, !llvm.ptr
    %c1_i64_63 = arith.constant 1 : i64
    %174 = llvm.load %14 : !llvm.ptr -> i64
    %175 = arith.cmpi ult, %174, %c1_i64_63 : i64
    scf.if %175 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %174, %c1_i64_63 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb5:  // 5 preds: ^bb20, ^bb29, ^bb44, ^bb61, ^bb74
    %c1_i64_64 = arith.constant 1 : i64
    %176 = llvm.load %14 : !llvm.ptr -> i64
    %177 = arith.cmpi ult, %176, %c1_i64_64 : i64
    scf.if %177 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %176, %c1_i64_64 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i32_65 = arith.constant 1 : i32
    %c3_i64_66 = arith.constant 3 : i64
    %178 = llvm.load %14 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c3_i64_66 : i64
    scf.if %179 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %178, %c3_i64_66 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_65, %1 : i32, !llvm.ptr
    %c1_i64_67 = arith.constant 1 : i64
    %180 = llvm.load %14 : !llvm.ptr -> i64
    %181 = arith.cmpi ult, %180, %c1_i64_67 : i64
    scf.if %181 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %180, %c1_i64_67 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb6:  // 4 preds: ^bb7, ^bb8, ^bb32, ^bb34
    %c3_i64_68 = arith.constant 3 : i64
    %182 = llvm.load %14 : !llvm.ptr -> i64
    %183 = arith.cmpi ult, %182, %c3_i64_68 : i64
    scf.if %183 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %182, %c3_i64_68 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %184 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_69 = arith.constant 3 : i64
    %185 = llvm.load %14 : !llvm.ptr -> i64
    %186 = arith.cmpi ult, %185, %c3_i64_69 : i64
    scf.if %186 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %185, %c3_i64_69 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %187 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_70 = arith.constant 3 : i64
    %188 = llvm.load %14 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c3_i64_70 : i64
    scf.if %189 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %188, %c3_i64_70 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %190 = arith.extui %187 : i32 to i64
    %191 = arith.addi %190, %c4_i64 : i64
    %192 = llvm.getelementptr %19[%191] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %193 = llvm.load volatile %192 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_71 = arith.constant 3 : i64
    %194 = llvm.load %14 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c3_i64_71 : i64
    scf.if %195 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %194, %c3_i64_71 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %196 = arith.cmpi uge, %184, %193 : i32
    %197 = arith.extui %196 : i1 to i32
    %c1_i64_72 = arith.constant 1 : i64
    %198 = llvm.load %14 : !llvm.ptr -> i64
    %199 = arith.cmpi ult, %198, %c1_i64_72 : i64
    scf.if %199 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %198, %c1_i64_72 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_73 = arith.constant 0 : i32
    %200 = arith.cmpi ne, %197, %c0_i32_73 : i32
    cf.cond_br %200, ^bb4, ^bb65
  ^bb7:  // 2 preds: ^bb1, ^bb10
    %c3_i64_74 = arith.constant 3 : i64
    %201 = llvm.load %14 : !llvm.ptr -> i64
    %202 = arith.cmpi ult, %201, %c3_i64_74 : i64
    scf.if %202 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %201, %c3_i64_74 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %203 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_75 = arith.constant 3 : i64
    %204 = llvm.load %14 : !llvm.ptr -> i64
    %205 = arith.cmpi ult, %204, %c3_i64_75 : i64
    scf.if %205 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %204, %c3_i64_75 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c20_i64_76 = arith.constant 20 : i64
    %206 = arith.extui %203 : i32 to i64
    %207 = arith.addi %206, %c20_i64_76 : i64
    %208 = llvm.getelementptr %19[%207] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %209 = llvm.load volatile %208 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_77 = arith.constant 3 : i64
    %210 = llvm.load %14 : !llvm.ptr -> i64
    %211 = arith.cmpi ult, %210, %c3_i64_77 : i64
    scf.if %211 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %210, %c3_i64_77 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %209, %1 : i32, !llvm.ptr
    %c3_i64_78 = arith.constant 3 : i64
    %212 = llvm.load %14 : !llvm.ptr -> i64
    %213 = arith.cmpi ult, %212, %c3_i64_78 : i64
    scf.if %213 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %212, %c3_i64_78 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_79 = arith.constant 0 : i32
    %214 = arith.cmpi eq, %209, %c0_i32_79 : i32
    %215 = arith.extui %214 : i1 to i32
    %c1_i64_80 = arith.constant 1 : i64
    %216 = llvm.load %14 : !llvm.ptr -> i64
    %217 = arith.cmpi ult, %216, %c1_i64_80 : i64
    scf.if %217 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %216, %c1_i64_80 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_81 = arith.constant 0 : i32
    %218 = arith.cmpi ne, %215, %c0_i32_81 : i32
    cf.cond_br %218, ^bb6, ^bb33
  ^bb8:  // pred: ^bb1
    %c3_i64_82 = arith.constant 3 : i64
    %219 = llvm.load %14 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c3_i64_82 : i64
    scf.if %220 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %219, %c3_i64_82 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %221 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_83 = arith.constant 3 : i64
    %222 = llvm.load %14 : !llvm.ptr -> i64
    %223 = arith.cmpi ult, %222, %c3_i64_83 : i64
    scf.if %223 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %222, %c3_i64_83 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c12_i64_84 = arith.constant 12 : i64
    %224 = arith.extui %221 : i32 to i64
    %225 = arith.addi %224, %c12_i64_84 : i64
    %226 = llvm.getelementptr %19[%225] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %227 = llvm.load volatile %226 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_85 = arith.constant 3 : i64
    %228 = llvm.load %14 : !llvm.ptr -> i64
    %229 = arith.cmpi ult, %228, %c3_i64_85 : i64
    scf.if %229 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %228, %c3_i64_85 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %227, %0 : i32, !llvm.ptr
    %c3_i64_86 = arith.constant 3 : i64
    %230 = llvm.load %14 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c3_i64_86 : i64
    scf.if %231 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %230, %c3_i64_86 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_87 = arith.constant 0 : i32
    %232 = arith.cmpi eq, %227, %c0_i32_87 : i32
    %233 = arith.extui %232 : i1 to i32
    %c1_i64_88 = arith.constant 1 : i64
    %234 = llvm.load %14 : !llvm.ptr -> i64
    %235 = arith.cmpi ult, %234, %c1_i64_88 : i64
    scf.if %235 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %234, %c1_i64_88 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_89 = arith.constant 0 : i32
    %236 = arith.cmpi ne, %233, %c0_i32_89 : i32
    cf.cond_br %236, ^bb6, ^bb9
  ^bb9:  // pred: ^bb8
    %c3_i64_90 = arith.constant 3 : i64
    %237 = llvm.load %14 : !llvm.ptr -> i64
    %238 = arith.cmpi ult, %237, %c3_i64_90 : i64
    scf.if %238 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %237, %c3_i64_90 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %239 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_91 = arith.constant 3 : i64
    %240 = llvm.load %14 : !llvm.ptr -> i64
    %241 = arith.cmpi ult, %240, %c3_i64_91 : i64
    scf.if %241 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %240, %c3_i64_91 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %242 = arith.extui %239 : i32 to i64
    %243 = arith.addi %242, %c8_i64 : i64
    %244 = llvm.getelementptr %19[%243] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %245 = llvm.load volatile %244 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_92 = arith.constant 3 : i64
    %246 = llvm.load %14 : !llvm.ptr -> i64
    %247 = arith.cmpi ult, %246, %c3_i64_92 : i64
    scf.if %247 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %246, %c3_i64_92 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %245, %1 : i32, !llvm.ptr
    %c3_i64_93 = arith.constant 3 : i64
    %248 = llvm.load %14 : !llvm.ptr -> i64
    %249 = arith.cmpi ult, %248, %c3_i64_93 : i64
    scf.if %249 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %248, %c3_i64_93 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %250 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_94 = arith.constant 1 : i64
    %251 = llvm.load %14 : !llvm.ptr -> i64
    %252 = arith.cmpi ult, %251, %c1_i64_94 : i64
    scf.if %252 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %251, %c1_i64_94 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c3_i32_95 = arith.constant 3 : i32
    %c3_i64_96 = arith.constant 3 : i64
    %253 = llvm.load %14 : !llvm.ptr -> i64
    %254 = arith.cmpi ult, %253, %c3_i64_96 : i64
    scf.if %254 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %253, %c3_i64_96 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %255 = arith.cmpi ule, %c3_i32_95, %c31_i32 : i32
    %256 = scf.if %255 -> (i32) {
      %1098 = arith.shli %250, %c3_i32_95 : i32
      scf.yield %1098 : i32
    } else {
      %c0_i32_449 = arith.constant 0 : i32
      scf.yield %c0_i32_449 : i32
    }
    %c3_i64_97 = arith.constant 3 : i64
    %257 = llvm.load %14 : !llvm.ptr -> i64
    %258 = arith.cmpi ult, %257, %c3_i64_97 : i64
    scf.if %258 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %257, %c3_i64_97 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %256, %6 : i32, !llvm.ptr
    %c3_i64_98 = arith.constant 3 : i64
    %259 = llvm.load %14 : !llvm.ptr -> i64
    %260 = arith.cmpi ult, %259, %c3_i64_98 : i64
    scf.if %260 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %259, %c3_i64_98 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %261 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_99 = arith.constant 1 : i64
    %262 = llvm.load %14 : !llvm.ptr -> i64
    %263 = arith.cmpi ult, %262, %c1_i64_99 : i64
    scf.if %263 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %262, %c1_i64_99 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_100 = arith.constant 3 : i64
    %264 = llvm.load %14 : !llvm.ptr -> i64
    %265 = arith.cmpi ult, %264, %c3_i64_100 : i64
    scf.if %265 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %264, %c3_i64_100 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %266 = arith.addi %261, %c-1_i32 : i32
    %c1_i64_101 = arith.constant 1 : i64
    %267 = llvm.load %14 : !llvm.ptr -> i64
    %268 = arith.cmpi ult, %267, %c1_i64_101 : i64
    scf.if %268 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %267, %c1_i64_101 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c536870911_i32 = arith.constant 536870911 : i32
    %c3_i64_102 = arith.constant 3 : i64
    %269 = llvm.load %14 : !llvm.ptr -> i64
    %270 = arith.cmpi ult, %269, %c3_i64_102 : i64
    scf.if %270 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %269, %c3_i64_102 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %271 = arith.andi %266, %c536870911_i32 : i32
    %c1_i64_103 = arith.constant 1 : i64
    %272 = llvm.load %14 : !llvm.ptr -> i64
    %273 = arith.cmpi ult, %272, %c1_i64_103 : i64
    scf.if %273 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %272, %c1_i64_103 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i32_104 = arith.constant 1 : i32
    %c3_i64_105 = arith.constant 3 : i64
    %274 = llvm.load %14 : !llvm.ptr -> i64
    %275 = arith.cmpi ult, %274, %c3_i64_105 : i64
    scf.if %275 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %274, %c3_i64_105 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %276 = arith.addi %271, %c1_i32_104 : i32
    %c3_i64_106 = arith.constant 3 : i64
    %277 = llvm.load %14 : !llvm.ptr -> i64
    %278 = arith.cmpi ult, %277, %c3_i64_106 : i64
    scf.if %278 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %277, %c3_i64_106 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %276, %4 : i32, !llvm.ptr
    %c3_i64_107 = arith.constant 3 : i64
    %279 = llvm.load %14 : !llvm.ptr -> i64
    %280 = arith.cmpi ult, %279, %c3_i64_107 : i64
    scf.if %280 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %279, %c3_i64_107 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %281 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_108 = arith.constant 3 : i64
    %282 = llvm.load %14 : !llvm.ptr -> i64
    %283 = arith.cmpi ult, %282, %c3_i64_108 : i64
    scf.if %283 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %282, %c3_i64_108 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %284 = arith.extui %281 : i32 to i64
    %285 = arith.addi %284, %c0_i64 : i64
    %286 = llvm.getelementptr %19[%285] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %287 = llvm.load volatile %286 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_109 = arith.constant 3 : i64
    %288 = llvm.load %14 : !llvm.ptr -> i64
    %289 = arith.cmpi ult, %288, %c3_i64_109 : i64
    scf.if %289 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %288, %c3_i64_109 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %287, %0 : i32, !llvm.ptr
    %c1_i64_110 = arith.constant 1 : i64
    %290 = llvm.load %14 : !llvm.ptr -> i64
    %291 = arith.cmpi ult, %290, %c1_i64_110 : i64
    scf.if %291 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %290, %c1_i64_110 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb11
  ^bb10:  // no predecessors
    %c1_i64_111 = arith.constant 1 : i64
    %292 = llvm.load %14 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c1_i64_111 : i64
    scf.if %293 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %292, %c1_i64_111 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb9, ^bb31
    %c1_i64_112 = arith.constant 1 : i64
    %294 = llvm.load %14 : !llvm.ptr -> i64
    %295 = arith.cmpi ult, %294, %c1_i64_112 : i64
    scf.if %295 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %294, %c1_i64_112 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c3_i64_113 = arith.constant 3 : i64
    %296 = llvm.load %14 : !llvm.ptr -> i64
    %297 = arith.cmpi ult, %296, %c3_i64_113 : i64
    scf.if %297 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %296, %c3_i64_113 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %298 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_114 = arith.constant 1 : i64
    %299 = llvm.load %14 : !llvm.ptr -> i64
    %300 = arith.cmpi ult, %299, %c1_i64_114 : i64
    scf.if %300 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %299, %c1_i64_114 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c3_i64_115 = arith.constant 3 : i64
    %301 = llvm.load %14 : !llvm.ptr -> i64
    %302 = arith.cmpi ult, %301, %c3_i64_115 : i64
    scf.if %302 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %301, %c3_i64_115 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %303 = arith.addi %298, %c4_i32 : i32
    %c3_i64_116 = arith.constant 3 : i64
    %304 = llvm.load %14 : !llvm.ptr -> i64
    %305 = arith.cmpi ult, %304, %c3_i64_116 : i64
    scf.if %305 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %304, %c3_i64_116 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_117 = arith.constant 0 : i64
    %306 = arith.extui %303 : i32 to i64
    %307 = arith.addi %306, %c0_i64_117 : i64
    %308 = llvm.getelementptr %19[%307] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %309 = llvm.load volatile %308 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_118 = arith.constant 3 : i64
    %310 = llvm.load %14 : !llvm.ptr -> i64
    %311 = arith.cmpi ult, %310, %c3_i64_118 : i64
    scf.if %311 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %310, %c3_i64_118 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %309, %7 : i32, !llvm.ptr
    %c3_i64_119 = arith.constant 3 : i64
    %312 = llvm.load %14 : !llvm.ptr -> i64
    %313 = arith.cmpi ult, %312, %c3_i64_119 : i64
    scf.if %313 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %312, %c3_i64_119 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_120 = arith.constant 0 : i32
    %314 = arith.cmpi eq, %309, %c0_i32_120 : i32
    %315 = arith.extui %314 : i1 to i32
    %c1_i64_121 = arith.constant 1 : i64
    %316 = llvm.load %14 : !llvm.ptr -> i64
    %317 = arith.cmpi ult, %316, %c1_i64_121 : i64
    scf.if %317 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %316, %c1_i64_121 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_122 = arith.constant 0 : i32
    %318 = arith.cmpi ne, %315, %c0_i32_122 : i32
    cf.cond_br %318, ^bb12, ^bb13
  ^bb12:  // 2 preds: ^bb11, ^bb22
    %c3_i64_123 = arith.constant 3 : i64
    %319 = llvm.load %14 : !llvm.ptr -> i64
    %320 = arith.cmpi ult, %319, %c3_i64_123 : i64
    scf.if %320 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %319, %c3_i64_123 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %321 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_124 = arith.constant 3 : i64
    %322 = llvm.load %14 : !llvm.ptr -> i64
    %323 = arith.cmpi ult, %322, %c3_i64_124 : i64
    scf.if %323 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %322, %c3_i64_124 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_125 = arith.constant 0 : i64
    %324 = arith.extui %321 : i32 to i64
    %325 = arith.addi %324, %c0_i64_125 : i64
    %326 = llvm.getelementptr %19[%325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %327 = llvm.load volatile %326 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_126 = arith.constant 3 : i64
    %328 = llvm.load %14 : !llvm.ptr -> i64
    %329 = arith.cmpi ult, %328, %c3_i64_126 : i64
    scf.if %329 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %328, %c3_i64_126 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %330 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_127 = arith.constant 1 : i64
    %331 = llvm.load %14 : !llvm.ptr -> i64
    %332 = arith.cmpi ult, %331, %c1_i64_127 : i64
    scf.if %332 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %331, %c1_i64_127 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c12_i32 = arith.constant 12 : i32
    %c3_i64_128 = arith.constant 3 : i64
    %333 = llvm.load %14 : !llvm.ptr -> i64
    %334 = arith.cmpi ult, %333, %c3_i64_128 : i64
    scf.if %334 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %333, %c3_i64_128 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %335 = arith.addi %330, %c12_i32 : i32
    %c3_i64_129 = arith.constant 3 : i64
    %336 = llvm.load %14 : !llvm.ptr -> i64
    %337 = arith.cmpi ult, %336, %c3_i64_129 : i64
    scf.if %337 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %336, %c3_i64_129 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %338 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_130 = arith.constant 3 : i64
    %339 = llvm.load %14 : !llvm.ptr -> i64
    %340 = arith.cmpi ult, %339, %c3_i64_130 : i64
    scf.if %340 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %339, %c3_i64_130 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c4_i64_131 = arith.constant 4 : i64
    %341 = arith.extui %338 : i32 to i64
    %342 = arith.addi %341, %c4_i64_131 : i64
    %343 = llvm.getelementptr %19[%342] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %344 = llvm.load volatile %343 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64 = arith.constant 7 : i64
    %345 = llvm.load %14 : !llvm.ptr -> i64
    %346 = arith.cmpi ult, %345, %c7_i64 : i64
    scf.if %346 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %345, %c7_i64 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %347 = arith.cmpi ult, %344, %31 : i32
    cf.cond_br %347, ^bb23, ^bb24
  ^bb13:  // pred: ^bb11
    %c3_i64_132 = arith.constant 3 : i64
    %348 = llvm.load %14 : !llvm.ptr -> i64
    %349 = arith.cmpi ult, %348, %c3_i64_132 : i64
    scf.if %349 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %348, %c3_i64_132 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %350 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_133 = arith.constant 3 : i64
    %351 = llvm.load %14 : !llvm.ptr -> i64
    %352 = arith.cmpi ult, %351, %c3_i64_133 : i64
    scf.if %352 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %351, %c3_i64_133 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c32_i64_134 = arith.constant 32 : i64
    %353 = arith.extui %350 : i32 to i64
    %354 = arith.addi %353, %c32_i64_134 : i64
    %355 = llvm.getelementptr %19[%354] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %356 = llvm.load volatile %355 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_135 = arith.constant 3 : i64
    %357 = llvm.load %14 : !llvm.ptr -> i64
    %358 = arith.cmpi ult, %357, %c3_i64_135 : i64
    scf.if %358 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %357, %c3_i64_135 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %359 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_136 = arith.constant 3 : i64
    %360 = llvm.load %14 : !llvm.ptr -> i64
    %361 = arith.cmpi ult, %360, %c3_i64_136 : i64
    scf.if %361 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %360, %c3_i64_136 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_137 = arith.constant 0 : i64
    %362 = arith.extui %359 : i32 to i64
    %363 = arith.addi %362, %c0_i64_137 : i64
    %364 = llvm.getelementptr %19[%363] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %365 = llvm.load volatile %364 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_138 = arith.constant 3 : i64
    %366 = llvm.load %14 : !llvm.ptr -> i64
    %367 = arith.cmpi ult, %366, %c3_i64_138 : i64
    scf.if %367 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %366, %c3_i64_138 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %368 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_139 = arith.constant 3 : i64
    %369 = llvm.load %14 : !llvm.ptr -> i64
    %370 = arith.cmpi ult, %369, %c3_i64_139 : i64
    scf.if %370 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %369, %c3_i64_139 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %371 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_140 = arith.constant 3 : i64
    %372 = llvm.load %14 : !llvm.ptr -> i64
    %373 = arith.cmpi ult, %372, %c3_i64_140 : i64
    scf.if %373 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %372, %c3_i64_140 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c36_i64_141 = arith.constant 36 : i64
    %374 = arith.extui %371 : i32 to i64
    %375 = arith.addi %374, %c36_i64_141 : i64
    %376 = llvm.getelementptr %19[%375] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %377 = llvm.load volatile %376 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_142 = arith.constant 3 : i64
    %378 = llvm.load %14 : !llvm.ptr -> i64
    %379 = arith.cmpi ult, %378, %c3_i64_142 : i64
    scf.if %379 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %378, %c3_i64_142 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c12_i64_143 = arith.constant 12 : i64
    %380 = arith.extui %377 : i32 to i64
    %381 = arith.addi %380, %c12_i64_143 : i64
    %382 = llvm.getelementptr %19[%381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %383 = llvm.load volatile %382 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_144 = arith.constant 7 : i64
    %384 = llvm.load %14 : !llvm.ptr -> i64
    %385 = arith.cmpi ult, %384, %c7_i64_144 : i64
    scf.if %385 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %384, %c7_i64_144 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %386 = arith.cmpi ult, %383, %26 : i32
    cf.cond_br %386, ^bb14, ^bb15
  ^bb14:  // 2 preds: ^bb13, ^bb15
    %387 = llvm.getelementptr inbounds %24[%383] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %388 = llvm.load %387 : !llvm.ptr -> !llvm.ptr
    %389 = llvm.ptrtoint %388 : !llvm.ptr to i64
    %c0_i64_145 = arith.constant 0 : i64
    %390 = arith.cmpi eq, %389, %c0_i64_145 : i64
    cf.cond_br %390, ^bb17, ^bb16
  ^bb15:  // pred: ^bb13
    %c3_i32_146 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_146) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %391 = llvm.getelementptr %388[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %392 = llvm.getelementptr %388[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %393 = llvm.getelementptr %388[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %394 = llvm.load %391 : !llvm.ptr -> !llvm.ptr
    %395 = llvm.load %393 : !llvm.ptr -> !llvm.ptr
    %396 = llvm.ptrtoint %394 : !llvm.ptr to i64
    %c0_i64_147 = arith.constant 0 : i64
    %397 = arith.cmpi eq, %396, %c0_i64_147 : i64
    cf.cond_br %397, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_148 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_148) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %398 = llvm.load %392 : !llvm.ptr -> i32
    %399 = arith.cmpi ne, %21, %398 : i32
    cf.cond_br %399, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_149 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_149) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %400 = llvm.call %394(%395, %356, %365, %368) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_150 = arith.constant 1 : i64
    %401 = llvm.load %14 : !llvm.ptr -> i64
    %402 = arith.cmpi ult, %401, %c1_i64_150 : i64
    scf.if %402 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %401, %c1_i64_150 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_151 = arith.constant 0 : i32
    %403 = arith.cmpi ne, %400, %c0_i32_151 : i32
    cf.cond_br %403, ^bb5, ^bb22
  ^bb21:  // pred: ^bb18
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    %c1_i64_152 = arith.constant 1 : i64
    %404 = llvm.load %14 : !llvm.ptr -> i64
    %405 = arith.cmpi ult, %404, %c1_i64_152 : i64
    scf.if %405 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %404, %c1_i64_152 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb12
  ^bb23:  // 2 preds: ^bb12, ^bb24
    %406 = llvm.getelementptr inbounds %29[%344] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %407 = llvm.load %406 : !llvm.ptr -> !llvm.ptr
    %408 = llvm.ptrtoint %407 : !llvm.ptr to i64
    %c0_i64_153 = arith.constant 0 : i64
    %409 = arith.cmpi eq, %408, %c0_i64_153 : i64
    cf.cond_br %409, ^bb26, ^bb25
  ^bb24:  // pred: ^bb12
    %c3_i32_154 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_154) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %410 = llvm.getelementptr %407[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %411 = llvm.getelementptr %407[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %412 = llvm.getelementptr %407[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %413 = llvm.load %410 : !llvm.ptr -> !llvm.ptr
    %414 = llvm.load %412 : !llvm.ptr -> !llvm.ptr
    %415 = llvm.ptrtoint %413 : !llvm.ptr to i64
    %c0_i64_155 = arith.constant 0 : i64
    %416 = arith.cmpi eq, %415, %c0_i64_155 : i64
    cf.cond_br %416, ^bb28, ^bb27
  ^bb26:  // pred: ^bb23
    %c4_i32_156 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_156) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %417 = llvm.load %411 : !llvm.ptr -> i32
    %418 = arith.cmpi ne, %28, %417 : i32
    cf.cond_br %418, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c3_i32_157 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_157) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %419 = llvm.call %413(%414, %327, %335) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c1_i64_158 = arith.constant 1 : i64
    %420 = llvm.load %14 : !llvm.ptr -> i64
    %421 = arith.cmpi ult, %420, %c1_i64_158 : i64
    scf.if %421 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %420, %c1_i64_158 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_159 = arith.constant 0 : i32
    %422 = arith.cmpi ne, %419, %c0_i32_159 : i32
    cf.cond_br %422, ^bb5, ^bb31
  ^bb30:  // pred: ^bb27
    %c5_i32_160 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_160) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    %c3_i64_161 = arith.constant 3 : i64
    %423 = llvm.load %14 : !llvm.ptr -> i64
    %424 = arith.cmpi ult, %423, %c3_i64_161 : i64
    scf.if %424 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %423, %c3_i64_161 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %425 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_162 = arith.constant 1 : i64
    %426 = llvm.load %14 : !llvm.ptr -> i64
    %427 = arith.cmpi ult, %426, %c1_i64_162 : i64
    scf.if %427 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %426, %c1_i64_162 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_163 = arith.constant 3 : i64
    %428 = llvm.load %14 : !llvm.ptr -> i64
    %429 = arith.cmpi ult, %428, %c3_i64_163 : i64
    scf.if %429 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %428, %c3_i64_163 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %430 = arith.addi %425, %c8_i32 : i32
    %c3_i64_164 = arith.constant 3 : i64
    %431 = llvm.load %14 : !llvm.ptr -> i64
    %432 = arith.cmpi ult, %431, %c3_i64_164 : i64
    scf.if %432 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %431, %c3_i64_164 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %430, %1 : i32, !llvm.ptr
    %c3_i64_165 = arith.constant 3 : i64
    %433 = llvm.load %14 : !llvm.ptr -> i64
    %434 = arith.cmpi ult, %433, %c3_i64_165 : i64
    scf.if %434 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %433, %c3_i64_165 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %435 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_166 = arith.constant 1 : i64
    %436 = llvm.load %14 : !llvm.ptr -> i64
    %437 = arith.cmpi ult, %436, %c1_i64_166 : i64
    scf.if %437 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %436, %c1_i64_166 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c8_i32_167 = arith.constant 8 : i32
    %c3_i64_168 = arith.constant 3 : i64
    %438 = llvm.load %14 : !llvm.ptr -> i64
    %439 = arith.cmpi ult, %438, %c3_i64_168 : i64
    scf.if %439 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %438, %c3_i64_168 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %440 = arith.addi %435, %c8_i32_167 : i32
    %c3_i64_169 = arith.constant 3 : i64
    %441 = llvm.load %14 : !llvm.ptr -> i64
    %442 = arith.cmpi ult, %441, %c3_i64_169 : i64
    scf.if %442 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %441, %c3_i64_169 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %440, %0 : i32, !llvm.ptr
    %c3_i64_170 = arith.constant 3 : i64
    %443 = llvm.load %14 : !llvm.ptr -> i64
    %444 = arith.cmpi ult, %443, %c3_i64_170 : i64
    scf.if %444 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %443, %c3_i64_170 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %445 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_171 = arith.constant 1 : i64
    %446 = llvm.load %14 : !llvm.ptr -> i64
    %447 = arith.cmpi ult, %446, %c1_i64_171 : i64
    scf.if %447 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %446, %c1_i64_171 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c-8_i32 = arith.constant -8 : i32
    %c3_i64_172 = arith.constant 3 : i64
    %448 = llvm.load %14 : !llvm.ptr -> i64
    %449 = arith.cmpi ult, %448, %c3_i64_172 : i64
    scf.if %449 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %448, %c3_i64_172 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %450 = arith.addi %445, %c-8_i32 : i32
    %c3_i64_173 = arith.constant 3 : i64
    %451 = llvm.load %14 : !llvm.ptr -> i64
    %452 = arith.cmpi ult, %451, %c3_i64_173 : i64
    scf.if %452 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %451, %c3_i64_173 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %450, %6 : i32, !llvm.ptr
    %c1_i64_174 = arith.constant 1 : i64
    %453 = llvm.load %14 : !llvm.ptr -> i64
    %454 = arith.cmpi ult, %453, %c1_i64_174 : i64
    scf.if %454 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %453, %c1_i64_174 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_175 = arith.constant 0 : i32
    %455 = arith.cmpi ne, %450, %c0_i32_175 : i32
    cf.cond_br %455, ^bb11, ^bb32
  ^bb32:  // pred: ^bb31
    %c1_i64_176 = arith.constant 1 : i64
    %456 = llvm.load %14 : !llvm.ptr -> i64
    %457 = arith.cmpi ult, %456, %c1_i64_176 : i64
    scf.if %457 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %456, %c1_i64_176 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb6
  ^bb33:  // pred: ^bb7
    %c3_i64_177 = arith.constant 3 : i64
    %458 = llvm.load %14 : !llvm.ptr -> i64
    %459 = arith.cmpi ult, %458, %c3_i64_177 : i64
    scf.if %459 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %458, %c3_i64_177 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %460 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_178 = arith.constant 1 : i64
    %461 = llvm.load %14 : !llvm.ptr -> i64
    %462 = arith.cmpi ult, %461, %c1_i64_178 : i64
    scf.if %462 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %461, %c1_i64_178 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c5_i32_179 = arith.constant 5 : i32
    %c3_i64_180 = arith.constant 3 : i64
    %463 = llvm.load %14 : !llvm.ptr -> i64
    %464 = arith.cmpi ult, %463, %c3_i64_180 : i64
    scf.if %464 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %463, %c3_i64_180 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c31_i32_181 = arith.constant 31 : i32
    %465 = arith.cmpi ule, %c5_i32_179, %c31_i32_181 : i32
    %466 = scf.if %465 -> (i32) {
      %1098 = arith.shli %460, %c5_i32_179 : i32
      scf.yield %1098 : i32
    } else {
      %c0_i32_449 = arith.constant 0 : i32
      scf.yield %c0_i32_449 : i32
    }
    %c3_i64_182 = arith.constant 3 : i64
    %467 = llvm.load %14 : !llvm.ptr -> i64
    %468 = arith.cmpi ult, %467, %c3_i64_182 : i64
    scf.if %468 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %467, %c3_i64_182 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %466, %8 : i32, !llvm.ptr
    %c3_i64_183 = arith.constant 3 : i64
    %469 = llvm.load %14 : !llvm.ptr -> i64
    %470 = arith.cmpi ult, %469, %c3_i64_183 : i64
    scf.if %470 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %469, %c3_i64_183 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %471 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_184 = arith.constant 1 : i64
    %472 = llvm.load %14 : !llvm.ptr -> i64
    %473 = arith.cmpi ult, %472, %c1_i64_184 : i64
    scf.if %473 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %472, %c1_i64_184 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c-1_i32_185 = arith.constant -1 : i32
    %c3_i64_186 = arith.constant 3 : i64
    %474 = llvm.load %14 : !llvm.ptr -> i64
    %475 = arith.cmpi ult, %474, %c3_i64_186 : i64
    scf.if %475 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %474, %c3_i64_186 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %476 = arith.addi %471, %c-1_i32_185 : i32
    %c1_i64_187 = arith.constant 1 : i64
    %477 = llvm.load %14 : !llvm.ptr -> i64
    %478 = arith.cmpi ult, %477, %c1_i64_187 : i64
    scf.if %478 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %477, %c1_i64_187 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c134217727_i32 = arith.constant 134217727 : i32
    %c3_i64_188 = arith.constant 3 : i64
    %479 = llvm.load %14 : !llvm.ptr -> i64
    %480 = arith.cmpi ult, %479, %c3_i64_188 : i64
    scf.if %480 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %479, %c3_i64_188 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %481 = arith.andi %476, %c134217727_i32 : i32
    %c1_i64_189 = arith.constant 1 : i64
    %482 = llvm.load %14 : !llvm.ptr -> i64
    %483 = arith.cmpi ult, %482, %c1_i64_189 : i64
    scf.if %483 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %482, %c1_i64_189 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i32_190 = arith.constant 1 : i32
    %c3_i64_191 = arith.constant 3 : i64
    %484 = llvm.load %14 : !llvm.ptr -> i64
    %485 = arith.cmpi ult, %484, %c3_i64_191 : i64
    scf.if %485 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %484, %c3_i64_191 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %486 = arith.addi %481, %c1_i32_190 : i32
    %c3_i64_192 = arith.constant 3 : i64
    %487 = llvm.load %14 : !llvm.ptr -> i64
    %488 = arith.cmpi ult, %487, %c3_i64_192 : i64
    scf.if %488 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %487, %c3_i64_192 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %486, %4 : i32, !llvm.ptr
    %c3_i64_193 = arith.constant 3 : i64
    %489 = llvm.load %14 : !llvm.ptr -> i64
    %490 = arith.cmpi ult, %489, %c3_i64_193 : i64
    scf.if %490 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %489, %c3_i64_193 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %491 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_194 = arith.constant 3 : i64
    %492 = llvm.load %14 : !llvm.ptr -> i64
    %493 = arith.cmpi ult, %492, %c3_i64_194 : i64
    scf.if %493 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %492, %c3_i64_194 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c8_i64_195 = arith.constant 8 : i64
    %494 = arith.extui %491 : i32 to i64
    %495 = arith.addi %494, %c8_i64_195 : i64
    %496 = llvm.getelementptr %19[%495] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %497 = llvm.load volatile %496 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_196 = arith.constant 3 : i64
    %498 = llvm.load %14 : !llvm.ptr -> i64
    %499 = arith.cmpi ult, %498, %c3_i64_196 : i64
    scf.if %499 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %498, %c3_i64_196 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %497, %9 : i32, !llvm.ptr
    %c3_i64_197 = arith.constant 3 : i64
    %500 = llvm.load %14 : !llvm.ptr -> i64
    %501 = arith.cmpi ult, %500, %c3_i64_197 : i64
    scf.if %501 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %500, %c3_i64_197 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %502 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_198 = arith.constant 3 : i64
    %503 = llvm.load %14 : !llvm.ptr -> i64
    %504 = arith.cmpi ult, %503, %c3_i64_198 : i64
    scf.if %504 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %503, %c3_i64_198 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_199 = arith.constant 0 : i64
    %505 = arith.extui %502 : i32 to i64
    %506 = arith.addi %505, %c0_i64_199 : i64
    %507 = llvm.getelementptr %19[%506] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %508 = llvm.load volatile %507 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_200 = arith.constant 3 : i64
    %509 = llvm.load %14 : !llvm.ptr -> i64
    %510 = arith.cmpi ult, %509, %c3_i64_200 : i64
    scf.if %510 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %509, %c3_i64_200 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %508, %0 : i32, !llvm.ptr
    %c1_i64_201 = arith.constant 1 : i64
    %511 = llvm.load %14 : !llvm.ptr -> i64
    %512 = arith.cmpi ult, %511, %c1_i64_201 : i64
    scf.if %512 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %511, %c1_i64_201 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_202 = arith.constant 0 : i32
    %c3_i64_203 = arith.constant 3 : i64
    %513 = llvm.load %14 : !llvm.ptr -> i64
    %514 = arith.cmpi ult, %513, %c3_i64_203 : i64
    scf.if %514 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %513, %c3_i64_203 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_202, %6 : i32, !llvm.ptr
    %c1_i64_204 = arith.constant 1 : i64
    %515 = llvm.load %14 : !llvm.ptr -> i64
    %516 = arith.cmpi ult, %515, %c1_i64_204 : i64
    scf.if %516 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %515, %c1_i64_204 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb35
  ^bb34:  // pred: ^bb64
    %c1_i64_205 = arith.constant 1 : i64
    %517 = llvm.load %14 : !llvm.ptr -> i64
    %518 = arith.cmpi ult, %517, %c1_i64_205 : i64
    scf.if %518 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %517, %c1_i64_205 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb6
  ^bb35:  // 2 preds: ^bb33, ^bb63
    %c1_i64_206 = arith.constant 1 : i64
    %519 = llvm.load %14 : !llvm.ptr -> i64
    %520 = arith.cmpi ult, %519, %c1_i64_206 : i64
    scf.if %520 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %519, %c1_i64_206 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c3_i64_207 = arith.constant 3 : i64
    %521 = llvm.load %14 : !llvm.ptr -> i64
    %522 = arith.cmpi ult, %521, %c3_i64_207 : i64
    scf.if %522 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %521, %c3_i64_207 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %523 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_208 = arith.constant 1 : i64
    %524 = llvm.load %14 : !llvm.ptr -> i64
    %525 = arith.cmpi ult, %524, %c1_i64_208 : i64
    scf.if %525 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %524, %c1_i64_208 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c4_i32_209 = arith.constant 4 : i32
    %c3_i64_210 = arith.constant 3 : i64
    %526 = llvm.load %14 : !llvm.ptr -> i64
    %527 = arith.cmpi ult, %526, %c3_i64_210 : i64
    scf.if %527 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %526, %c3_i64_210 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %528 = arith.addi %523, %c4_i32_209 : i32
    %c3_i64_211 = arith.constant 3 : i64
    %529 = llvm.load %14 : !llvm.ptr -> i64
    %530 = arith.cmpi ult, %529, %c3_i64_211 : i64
    scf.if %530 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %529, %c3_i64_211 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_212 = arith.constant 0 : i64
    %531 = arith.extui %528 : i32 to i64
    %532 = arith.addi %531, %c0_i64_212 : i64
    %533 = llvm.getelementptr %19[%532] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %534 = llvm.load volatile %533 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_213 = arith.constant 3 : i64
    %535 = llvm.load %14 : !llvm.ptr -> i64
    %536 = arith.cmpi ult, %535, %c3_i64_213 : i64
    scf.if %536 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %535, %c3_i64_213 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %534, %1 : i32, !llvm.ptr
    %c3_i64_214 = arith.constant 3 : i64
    %537 = llvm.load %14 : !llvm.ptr -> i64
    %538 = arith.cmpi ult, %537, %c3_i64_214 : i64
    scf.if %538 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %537, %c3_i64_214 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_215 = arith.constant 0 : i32
    %539 = arith.cmpi eq, %534, %c0_i32_215 : i32
    %540 = arith.extui %539 : i1 to i32
    %c1_i64_216 = arith.constant 1 : i64
    %541 = llvm.load %14 : !llvm.ptr -> i64
    %542 = arith.cmpi ult, %541, %c1_i64_216 : i64
    scf.if %542 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %541, %c1_i64_216 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_217 = arith.constant 0 : i32
    %543 = arith.cmpi ne, %540, %c0_i32_217 : i32
    cf.cond_br %543, ^bb36, ^bb37
  ^bb36:  // 2 preds: ^bb35, ^bb46
    %c3_i64_218 = arith.constant 3 : i64
    %544 = llvm.load %14 : !llvm.ptr -> i64
    %545 = arith.cmpi ult, %544, %c3_i64_218 : i64
    scf.if %545 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %544, %c3_i64_218 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %546 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_219 = arith.constant 3 : i64
    %547 = llvm.load %14 : !llvm.ptr -> i64
    %548 = arith.cmpi ult, %547, %c3_i64_219 : i64
    scf.if %548 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %547, %c3_i64_219 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %549 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_220 = arith.constant 3 : i64
    %550 = llvm.load %14 : !llvm.ptr -> i64
    %551 = arith.cmpi ult, %550, %c3_i64_220 : i64
    scf.if %551 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %550, %c3_i64_220 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %552 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_221 = arith.constant 3 : i64
    %553 = llvm.load %14 : !llvm.ptr -> i64
    %554 = arith.cmpi ult, %553, %c3_i64_221 : i64
    scf.if %554 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %553, %c3_i64_221 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %555 = arith.addi %549, %552 : i32
    %c3_i64_222 = arith.constant 3 : i64
    %556 = llvm.load %14 : !llvm.ptr -> i64
    %557 = arith.cmpi ult, %556, %c3_i64_222 : i64
    scf.if %557 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %556, %c3_i64_222 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %555, %1 : i32, !llvm.ptr
    %c1_i64_223 = arith.constant 1 : i64
    %558 = llvm.load %14 : !llvm.ptr -> i64
    %559 = arith.cmpi ult, %558, %c1_i64_223 : i64
    scf.if %559 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %558, %c1_i64_223 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_224 = arith.constant 3 : i64
    %560 = llvm.load %14 : !llvm.ptr -> i64
    %561 = arith.cmpi ult, %560, %c3_i64_224 : i64
    scf.if %561 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %560, %c3_i64_224 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %562 = arith.addi %555, %c16_i32 : i32
    %c3_i64_225 = arith.constant 3 : i64
    %563 = llvm.load %14 : !llvm.ptr -> i64
    %564 = arith.cmpi ult, %563, %c3_i64_225 : i64
    scf.if %564 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %563, %c3_i64_225 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_226 = arith.constant 0 : i64
    %565 = arith.extui %562 : i32 to i64
    %566 = arith.addi %565, %c0_i64_226 : i64
    %567 = llvm.getelementptr %19[%566] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %568 = llvm.load volatile %567 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_227 = arith.constant 3 : i64
    %569 = llvm.load %14 : !llvm.ptr -> i64
    %570 = arith.cmpi ult, %569, %c3_i64_227 : i64
    scf.if %570 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %569, %c3_i64_227 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c28_i64_228 = arith.constant 28 : i64
    %571 = arith.extui %546 : i32 to i64
    %572 = arith.addi %571, %c28_i64_228 : i64
    %573 = llvm.getelementptr %19[%572] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %568, %573 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_229 = arith.constant 3 : i64
    %574 = llvm.load %14 : !llvm.ptr -> i64
    %575 = arith.cmpi ult, %574, %c3_i64_229 : i64
    scf.if %575 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %574, %c3_i64_229 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %576 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_230 = arith.constant 3 : i64
    %577 = llvm.load %14 : !llvm.ptr -> i64
    %578 = arith.cmpi ult, %577, %c3_i64_230 : i64
    scf.if %578 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %577, %c3_i64_230 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %579 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_231 = arith.constant 1 : i64
    %580 = llvm.load %14 : !llvm.ptr -> i64
    %581 = arith.cmpi ult, %580, %c1_i64_231 : i64
    scf.if %581 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %580, %c1_i64_231 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c28_i32 = arith.constant 28 : i32
    %c3_i64_232 = arith.constant 3 : i64
    %582 = llvm.load %14 : !llvm.ptr -> i64
    %583 = arith.cmpi ult, %582, %c3_i64_232 : i64
    scf.if %583 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %582, %c3_i64_232 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %584 = arith.addi %579, %c28_i32 : i32
    %c3_i64_233 = arith.constant 3 : i64
    %585 = llvm.load %14 : !llvm.ptr -> i64
    %586 = arith.cmpi ult, %585, %c3_i64_233 : i64
    scf.if %586 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %585, %c3_i64_233 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_234 = arith.constant 0 : i64
    %587 = arith.extui %584 : i32 to i64
    %588 = arith.addi %587, %c0_i64_234 : i64
    %589 = llvm.getelementptr %19[%588] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %590 = llvm.load volatile %589 {alignment = 1 : i64} : !llvm.ptr -> i8
    %591 = arith.extui %590 : i8 to i32
    %c3_i64_235 = arith.constant 3 : i64
    %592 = llvm.load %14 : !llvm.ptr -> i64
    %593 = arith.cmpi ult, %592, %c3_i64_235 : i64
    scf.if %593 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %592, %c3_i64_235 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c44_i64_236 = arith.constant 44 : i64
    %594 = arith.extui %576 : i32 to i64
    %595 = arith.addi %594, %c44_i64_236 : i64
    %596 = llvm.getelementptr %19[%595] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %597 = arith.trunci %591 : i32 to i8
    llvm.store volatile %597, %596 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_237 = arith.constant 3 : i64
    %598 = llvm.load %14 : !llvm.ptr -> i64
    %599 = arith.cmpi ult, %598, %c3_i64_237 : i64
    scf.if %599 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %598, %c3_i64_237 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %600 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_238 = arith.constant 3 : i64
    %601 = llvm.load %14 : !llvm.ptr -> i64
    %602 = arith.cmpi ult, %601, %c3_i64_238 : i64
    scf.if %602 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %601, %c3_i64_238 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %603 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_239 = arith.constant 1 : i64
    %604 = llvm.load %14 : !llvm.ptr -> i64
    %605 = arith.cmpi ult, %604, %c1_i64_239 : i64
    scf.if %605 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %604, %c1_i64_239 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c24_i32 = arith.constant 24 : i32
    %c3_i64_240 = arith.constant 3 : i64
    %606 = llvm.load %14 : !llvm.ptr -> i64
    %607 = arith.cmpi ult, %606, %c3_i64_240 : i64
    scf.if %607 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %606, %c3_i64_240 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %608 = arith.addi %603, %c24_i32 : i32
    %c3_i64_241 = arith.constant 3 : i64
    %609 = llvm.load %14 : !llvm.ptr -> i64
    %610 = arith.cmpi ult, %609, %c3_i64_241 : i64
    scf.if %610 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %609, %c3_i64_241 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_242 = arith.constant 0 : i64
    %611 = arith.extui %608 : i32 to i64
    %612 = arith.addi %611, %c0_i64_242 : i64
    %613 = llvm.getelementptr %19[%612] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %614 = llvm.load volatile %613 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_243 = arith.constant 3 : i64
    %615 = llvm.load %14 : !llvm.ptr -> i64
    %616 = arith.cmpi ult, %615, %c3_i64_243 : i64
    scf.if %616 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %615, %c3_i64_243 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c40_i64_244 = arith.constant 40 : i64
    %617 = arith.extui %600 : i32 to i64
    %618 = arith.addi %617, %c40_i64_244 : i64
    %619 = llvm.getelementptr %19[%618] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %614, %619 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_245 = arith.constant 3 : i64
    %620 = llvm.load %14 : !llvm.ptr -> i64
    %621 = arith.cmpi ult, %620, %c3_i64_245 : i64
    scf.if %621 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %620, %c3_i64_245 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %622 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_246 = arith.constant 1 : i64
    %623 = llvm.load %14 : !llvm.ptr -> i64
    %624 = arith.cmpi ult, %623, %c1_i64_246 : i64
    scf.if %624 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %623, %c1_i64_246 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c12_i32_247 = arith.constant 12 : i32
    %c3_i64_248 = arith.constant 3 : i64
    %625 = llvm.load %14 : !llvm.ptr -> i64
    %626 = arith.cmpi ult, %625, %c3_i64_248 : i64
    scf.if %626 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %625, %c3_i64_248 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %627 = arith.addi %622, %c12_i32_247 : i32
    %c3_i64_249 = arith.constant 3 : i64
    %628 = llvm.load %14 : !llvm.ptr -> i64
    %629 = arith.cmpi ult, %628, %c3_i64_249 : i64
    scf.if %629 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %628, %c3_i64_249 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_250 = arith.constant 0 : i64
    %630 = arith.extui %627 : i32 to i64
    %631 = arith.addi %630, %c0_i64_250 : i64
    %632 = llvm.getelementptr %19[%631] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %633 = llvm.load volatile %632 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_251 = arith.constant 3 : i64
    %634 = llvm.load %14 : !llvm.ptr -> i64
    %635 = arith.cmpi ult, %634, %c3_i64_251 : i64
    scf.if %635 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %634, %c3_i64_251 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %633, %7 : i32, !llvm.ptr
    %c1_i64_252 = arith.constant 1 : i64
    %636 = llvm.load %14 : !llvm.ptr -> i64
    %637 = arith.cmpi ult, %636, %c1_i64_252 : i64
    scf.if %637 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %636, %c1_i64_252 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_253 = arith.constant 0 : i32
    %c3_i64_254 = arith.constant 3 : i64
    %638 = llvm.load %14 : !llvm.ptr -> i64
    %639 = arith.cmpi ult, %638, %c3_i64_254 : i64
    scf.if %639 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %638, %c3_i64_254 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_253, %10 : i32, !llvm.ptr
    %c1_i64_255 = arith.constant 1 : i64
    %640 = llvm.load %14 : !llvm.ptr -> i64
    %641 = arith.cmpi ult, %640, %c1_i64_255 : i64
    scf.if %641 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %640, %c1_i64_255 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_256 = arith.constant 0 : i32
    %c3_i64_257 = arith.constant 3 : i64
    %642 = llvm.load %14 : !llvm.ptr -> i64
    %643 = arith.cmpi ult, %642, %c3_i64_257 : i64
    scf.if %643 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %642, %c3_i64_257 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_256, %11 : i32, !llvm.ptr
    %c1_i64_258 = arith.constant 1 : i64
    %644 = llvm.load %14 : !llvm.ptr -> i64
    %645 = arith.cmpi ult, %644, %c1_i64_258 : i64
    scf.if %645 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %644, %c1_i64_258 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i64_259 = arith.constant 1 : i64
    %646 = llvm.load %14 : !llvm.ptr -> i64
    %647 = arith.cmpi ult, %646, %c1_i64_259 : i64
    scf.if %647 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %646, %c1_i64_259 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i64_260 = arith.constant 1 : i64
    %648 = llvm.load %14 : !llvm.ptr -> i64
    %649 = arith.cmpi ult, %648, %c1_i64_260 : i64
    scf.if %649 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %648, %c1_i64_260 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c3_i64_261 = arith.constant 3 : i64
    %650 = llvm.load %14 : !llvm.ptr -> i64
    %651 = arith.cmpi ult, %650, %c3_i64_261 : i64
    scf.if %651 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %650, %c3_i64_261 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %652 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_262 = arith.constant 1 : i64
    %653 = llvm.load %14 : !llvm.ptr -> i64
    %654 = arith.cmpi ult, %653, %c1_i64_262 : i64
    scf.if %654 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %653, %c1_i64_262 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c8_i32_263 = arith.constant 8 : i32
    %c3_i64_264 = arith.constant 3 : i64
    %655 = llvm.load %14 : !llvm.ptr -> i64
    %656 = arith.cmpi ult, %655, %c3_i64_264 : i64
    scf.if %656 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %655, %c3_i64_264 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %657 = arith.addi %652, %c8_i32_263 : i32
    %c3_i64_265 = arith.constant 3 : i64
    %658 = llvm.load %14 : !llvm.ptr -> i64
    %659 = arith.cmpi ult, %658, %c3_i64_265 : i64
    scf.if %659 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %658, %c3_i64_265 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_266 = arith.constant 0 : i64
    %660 = arith.extui %657 : i32 to i64
    %661 = arith.addi %660, %c0_i64_266 : i64
    %662 = llvm.getelementptr %19[%661] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %663 = llvm.load volatile %662 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_267 = arith.constant 1 : i64
    %664 = llvm.load %14 : !llvm.ptr -> i64
    %665 = arith.cmpi ult, %664, %c1_i64_267 : i64
    scf.if %665 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %664, %c1_i64_267 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.switch %663 : i32, [
      default: ^bb48,
      0: ^bb48,
      1: ^bb49,
      2: ^bb47
    ]
  ^bb37:  // pred: ^bb35
    %c3_i64_268 = arith.constant 3 : i64
    %666 = llvm.load %14 : !llvm.ptr -> i64
    %667 = arith.cmpi ult, %666, %c3_i64_268 : i64
    scf.if %667 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %666, %c3_i64_268 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %668 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_269 = arith.constant 3 : i64
    %669 = llvm.load %14 : !llvm.ptr -> i64
    %670 = arith.cmpi ult, %669, %c3_i64_269 : i64
    scf.if %670 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %669, %c3_i64_269 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c32_i64_270 = arith.constant 32 : i64
    %671 = arith.extui %668 : i32 to i64
    %672 = arith.addi %671, %c32_i64_270 : i64
    %673 = llvm.getelementptr %19[%672] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %674 = llvm.load volatile %673 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_271 = arith.constant 3 : i64
    %675 = llvm.load %14 : !llvm.ptr -> i64
    %676 = arith.cmpi ult, %675, %c3_i64_271 : i64
    scf.if %676 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %675, %c3_i64_271 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %677 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_272 = arith.constant 3 : i64
    %678 = llvm.load %14 : !llvm.ptr -> i64
    %679 = arith.cmpi ult, %678, %c3_i64_272 : i64
    scf.if %679 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %678, %c3_i64_272 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_273 = arith.constant 0 : i64
    %680 = arith.extui %677 : i32 to i64
    %681 = arith.addi %680, %c0_i64_273 : i64
    %682 = llvm.getelementptr %19[%681] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %683 = llvm.load volatile %682 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_274 = arith.constant 3 : i64
    %684 = llvm.load %14 : !llvm.ptr -> i64
    %685 = arith.cmpi ult, %684, %c3_i64_274 : i64
    scf.if %685 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %684, %c3_i64_274 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %686 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_275 = arith.constant 3 : i64
    %687 = llvm.load %14 : !llvm.ptr -> i64
    %688 = arith.cmpi ult, %687, %c3_i64_275 : i64
    scf.if %688 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %687, %c3_i64_275 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %689 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_276 = arith.constant 3 : i64
    %690 = llvm.load %14 : !llvm.ptr -> i64
    %691 = arith.cmpi ult, %690, %c3_i64_276 : i64
    scf.if %691 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %690, %c3_i64_276 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c36_i64_277 = arith.constant 36 : i64
    %692 = arith.extui %689 : i32 to i64
    %693 = arith.addi %692, %c36_i64_277 : i64
    %694 = llvm.getelementptr %19[%693] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %695 = llvm.load volatile %694 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_278 = arith.constant 3 : i64
    %696 = llvm.load %14 : !llvm.ptr -> i64
    %697 = arith.cmpi ult, %696, %c3_i64_278 : i64
    scf.if %697 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %696, %c3_i64_278 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c12_i64_279 = arith.constant 12 : i64
    %698 = arith.extui %695 : i32 to i64
    %699 = arith.addi %698, %c12_i64_279 : i64
    %700 = llvm.getelementptr %19[%699] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %701 = llvm.load volatile %700 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_280 = arith.constant 7 : i64
    %702 = llvm.load %14 : !llvm.ptr -> i64
    %703 = arith.cmpi ult, %702, %c7_i64_280 : i64
    scf.if %703 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %702, %c7_i64_280 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %704 = arith.cmpi ult, %701, %34 : i32
    cf.cond_br %704, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %705 = llvm.getelementptr inbounds %32[%701] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %706 = llvm.load %705 : !llvm.ptr -> !llvm.ptr
    %707 = llvm.ptrtoint %706 : !llvm.ptr to i64
    %c0_i64_281 = arith.constant 0 : i64
    %708 = arith.cmpi eq, %707, %c0_i64_281 : i64
    cf.cond_br %708, ^bb41, ^bb40
  ^bb39:  // pred: ^bb37
    %c3_i32_282 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_282) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %709 = llvm.getelementptr %706[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %710 = llvm.getelementptr %706[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %711 = llvm.getelementptr %706[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %712 = llvm.load %709 : !llvm.ptr -> !llvm.ptr
    %713 = llvm.load %711 : !llvm.ptr -> !llvm.ptr
    %714 = llvm.ptrtoint %712 : !llvm.ptr to i64
    %c0_i64_283 = arith.constant 0 : i64
    %715 = arith.cmpi eq, %714, %c0_i64_283 : i64
    cf.cond_br %715, ^bb43, ^bb42
  ^bb41:  // pred: ^bb38
    %c4_i32_284 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_284) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %716 = llvm.load %710 : !llvm.ptr -> i32
    %717 = arith.cmpi ne, %21, %716 : i32
    cf.cond_br %717, ^bb45, ^bb44
  ^bb43:  // pred: ^bb40
    %c3_i32_285 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_285) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %718 = llvm.call %712(%713, %674, %683, %686) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_286 = arith.constant 1 : i64
    %719 = llvm.load %14 : !llvm.ptr -> i64
    %720 = arith.cmpi ult, %719, %c1_i64_286 : i64
    scf.if %720 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %719, %c1_i64_286 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_287 = arith.constant 0 : i32
    %721 = arith.cmpi ne, %718, %c0_i32_287 : i32
    cf.cond_br %721, ^bb5, ^bb46
  ^bb45:  // pred: ^bb42
    %c5_i32_288 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_288) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    %c1_i64_289 = arith.constant 1 : i64
    %722 = llvm.load %14 : !llvm.ptr -> i64
    %723 = arith.cmpi ult, %722, %c1_i64_289 : i64
    scf.if %723 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %722, %c1_i64_289 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb36
  ^bb47:  // 3 preds: ^bb36, ^bb48, ^bb49
    %c3_i64_290 = arith.constant 3 : i64
    %724 = llvm.load %14 : !llvm.ptr -> i64
    %725 = arith.cmpi ult, %724, %c3_i64_290 : i64
    scf.if %725 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %724, %c3_i64_290 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %726 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_291 = arith.constant 3 : i64
    %727 = llvm.load %14 : !llvm.ptr -> i64
    %728 = arith.cmpi ult, %727, %c3_i64_291 : i64
    scf.if %728 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %727, %c3_i64_291 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %729 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_292 = arith.constant 3 : i64
    %730 = llvm.load %14 : !llvm.ptr -> i64
    %731 = arith.cmpi ult, %730, %c3_i64_292 : i64
    scf.if %731 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %730, %c3_i64_292 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c16_i64_293 = arith.constant 16 : i64
    %732 = arith.extui %726 : i32 to i64
    %733 = arith.addi %732, %c16_i64_293 : i64
    %734 = llvm.getelementptr %19[%733] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %729, %734 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_294 = arith.constant 3 : i64
    %735 = llvm.load %14 : !llvm.ptr -> i64
    %736 = arith.cmpi ult, %735, %c3_i64_294 : i64
    scf.if %736 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %735, %c3_i64_294 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %737 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_295 = arith.constant 3 : i64
    %738 = llvm.load %14 : !llvm.ptr -> i64
    %739 = arith.cmpi ult, %738, %c3_i64_295 : i64
    scf.if %739 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %738, %c3_i64_295 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %740 = llvm.load %11 : !llvm.ptr -> i32
    %c3_i64_296 = arith.constant 3 : i64
    %741 = llvm.load %14 : !llvm.ptr -> i64
    %742 = arith.cmpi ult, %741, %c3_i64_296 : i64
    scf.if %742 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %741, %c3_i64_296 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c12_i64_297 = arith.constant 12 : i64
    %743 = arith.extui %737 : i32 to i64
    %744 = arith.addi %743, %c12_i64_297 : i64
    %745 = llvm.getelementptr %19[%744] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %740, %745 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_298 = arith.constant 3 : i64
    %746 = llvm.load %14 : !llvm.ptr -> i64
    %747 = arith.cmpi ult, %746, %c3_i64_298 : i64
    scf.if %747 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %746, %c3_i64_298 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %748 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_299 = arith.constant 1 : i64
    %749 = llvm.load %14 : !llvm.ptr -> i64
    %750 = arith.cmpi ult, %749, %c1_i64_299 : i64
    scf.if %750 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %749, %c1_i64_299 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c4_i32_300 = arith.constant 4 : i32
    %c3_i64_301 = arith.constant 3 : i64
    %751 = llvm.load %14 : !llvm.ptr -> i64
    %752 = arith.cmpi ult, %751, %c3_i64_301 : i64
    scf.if %752 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %751, %c3_i64_301 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %753 = arith.addi %748, %c4_i32_300 : i32
    %c3_i64_302 = arith.constant 3 : i64
    %754 = llvm.load %14 : !llvm.ptr -> i64
    %755 = arith.cmpi ult, %754, %c3_i64_302 : i64
    scf.if %755 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %754, %c3_i64_302 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_303 = arith.constant 0 : i64
    %756 = arith.extui %753 : i32 to i64
    %757 = arith.addi %756, %c0_i64_303 : i64
    %758 = llvm.getelementptr %19[%757] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %759 = llvm.load volatile %758 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_304 = arith.constant 3 : i64
    %760 = llvm.load %14 : !llvm.ptr -> i64
    %761 = arith.cmpi ult, %760, %c3_i64_304 : i64
    scf.if %761 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %760, %c3_i64_304 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %759, %7 : i32, !llvm.ptr
    %c1_i64_305 = arith.constant 1 : i64
    %762 = llvm.load %14 : !llvm.ptr -> i64
    %763 = arith.cmpi ult, %762, %c1_i64_305 : i64
    scf.if %763 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %762, %c1_i64_305 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i64_306 = arith.constant 1 : i64
    %764 = llvm.load %14 : !llvm.ptr -> i64
    %765 = arith.cmpi ult, %764, %c1_i64_306 : i64
    scf.if %765 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %764, %c1_i64_306 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i64_307 = arith.constant 1 : i64
    %766 = llvm.load %14 : !llvm.ptr -> i64
    %767 = arith.cmpi ult, %766, %c1_i64_307 : i64
    scf.if %767 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %766, %c1_i64_307 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c3_i64_308 = arith.constant 3 : i64
    %768 = llvm.load %14 : !llvm.ptr -> i64
    %769 = arith.cmpi ult, %768, %c3_i64_308 : i64
    scf.if %769 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %768, %c3_i64_308 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %770 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_309 = arith.constant 3 : i64
    %771 = llvm.load %14 : !llvm.ptr -> i64
    %772 = arith.cmpi ult, %771, %c3_i64_309 : i64
    scf.if %772 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %771, %c3_i64_309 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_310 = arith.constant 0 : i64
    %773 = arith.extui %770 : i32 to i64
    %774 = arith.addi %773, %c0_i64_310 : i64
    %775 = llvm.getelementptr %19[%774] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %776 = llvm.load volatile %775 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_311 = arith.constant 1 : i64
    %777 = llvm.load %14 : !llvm.ptr -> i64
    %778 = arith.cmpi ult, %777, %c1_i64_311 : i64
    scf.if %778 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %777, %c1_i64_311 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.switch %776 : i32, [
      default: ^bb52,
      0: ^bb52,
      1: ^bb53,
      2: ^bb51
    ]
  ^bb48:  // 3 preds: ^bb36, ^bb36, ^bb50
    %c1_i64_312 = arith.constant 1 : i64
    %779 = llvm.load %14 : !llvm.ptr -> i64
    %780 = arith.cmpi ult, %779, %c1_i64_312 : i64
    scf.if %780 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %779, %c1_i64_312 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i32_313 = arith.constant 1 : i32
    %c3_i64_314 = arith.constant 3 : i64
    %781 = llvm.load %14 : !llvm.ptr -> i64
    %782 = arith.cmpi ult, %781, %c3_i64_314 : i64
    scf.if %782 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %781, %c3_i64_314 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_313, %11 : i32, !llvm.ptr
    %c1_i64_315 = arith.constant 1 : i64
    %783 = llvm.load %14 : !llvm.ptr -> i64
    %784 = arith.cmpi ult, %783, %c1_i64_315 : i64
    scf.if %784 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %783, %c1_i64_315 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb47
  ^bb49:  // pred: ^bb36
    %c3_i64_316 = arith.constant 3 : i64
    %785 = llvm.load %14 : !llvm.ptr -> i64
    %786 = arith.cmpi ult, %785, %c3_i64_316 : i64
    scf.if %786 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %785, %c3_i64_316 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %787 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_317 = arith.constant 1 : i64
    %788 = llvm.load %14 : !llvm.ptr -> i64
    %789 = arith.cmpi ult, %788, %c1_i64_317 : i64
    scf.if %789 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %788, %c1_i64_317 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c3_i32_318 = arith.constant 3 : i32
    %c3_i64_319 = arith.constant 3 : i64
    %790 = llvm.load %14 : !llvm.ptr -> i64
    %791 = arith.cmpi ult, %790, %c3_i64_319 : i64
    scf.if %791 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %790, %c3_i64_319 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c31_i32_320 = arith.constant 31 : i32
    %792 = arith.cmpi ule, %c3_i32_318, %c31_i32_320 : i32
    %793 = scf.if %792 -> (i32) {
      %1098 = arith.shli %787, %c3_i32_318 : i32
      scf.yield %1098 : i32
    } else {
      %c0_i32_449 = arith.constant 0 : i32
      scf.yield %c0_i32_449 : i32
    }
    %c3_i64_321 = arith.constant 3 : i64
    %794 = llvm.load %14 : !llvm.ptr -> i64
    %795 = arith.cmpi ult, %794, %c3_i64_321 : i64
    scf.if %795 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %794, %c3_i64_321 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %793, %12 : i32, !llvm.ptr
    %c1_i64_322 = arith.constant 1 : i64
    %796 = llvm.load %14 : !llvm.ptr -> i64
    %797 = arith.cmpi ult, %796, %c1_i64_322 : i64
    scf.if %797 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %796, %c1_i64_322 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_323 = arith.constant 0 : i32
    %c3_i64_324 = arith.constant 3 : i64
    %798 = llvm.load %14 : !llvm.ptr -> i64
    %799 = arith.cmpi ult, %798, %c3_i64_324 : i64
    scf.if %799 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %798, %c3_i64_324 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_323, %11 : i32, !llvm.ptr
    %c3_i64_325 = arith.constant 3 : i64
    %800 = llvm.load %14 : !llvm.ptr -> i64
    %801 = arith.cmpi ult, %800, %c3_i64_325 : i64
    scf.if %801 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %800, %c3_i64_325 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %802 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_326 = arith.constant 3 : i64
    %803 = llvm.load %14 : !llvm.ptr -> i64
    %804 = arith.cmpi ult, %803, %c3_i64_326 : i64
    scf.if %804 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %803, %c3_i64_326 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %805 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i64_327 = arith.constant 3 : i64
    %806 = llvm.load %14 : !llvm.ptr -> i64
    %807 = arith.cmpi ult, %806, %c3_i64_327 : i64
    scf.if %807 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %806, %c3_i64_327 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %808 = arith.addi %802, %805 : i32
    %c3_i64_328 = arith.constant 3 : i64
    %809 = llvm.load %14 : !llvm.ptr -> i64
    %810 = arith.cmpi ult, %809, %c3_i64_328 : i64
    scf.if %810 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %809, %c3_i64_328 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %808, %12 : i32, !llvm.ptr
    %c3_i64_329 = arith.constant 3 : i64
    %811 = llvm.load %14 : !llvm.ptr -> i64
    %812 = arith.cmpi ult, %811, %c3_i64_329 : i64
    scf.if %812 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %811, %c3_i64_329 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c4_i64_330 = arith.constant 4 : i64
    %813 = arith.extui %808 : i32 to i64
    %814 = arith.addi %813, %c4_i64_330 : i64
    %815 = llvm.getelementptr %19[%814] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %816 = llvm.load volatile %815 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_331 = arith.constant 1 : i64
    %817 = llvm.load %14 : !llvm.ptr -> i64
    %818 = arith.cmpi ult, %817, %c1_i64_331 : i64
    scf.if %818 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %817, %c1_i64_331 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_332 = arith.constant 0 : i32
    %819 = arith.cmpi ne, %816, %c0_i32_332 : i32
    cf.cond_br %819, ^bb47, ^bb50
  ^bb50:  // pred: ^bb49
    %c3_i64_333 = arith.constant 3 : i64
    %820 = llvm.load %14 : !llvm.ptr -> i64
    %821 = arith.cmpi ult, %820, %c3_i64_333 : i64
    scf.if %821 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %820, %c3_i64_333 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %822 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i64_334 = arith.constant 3 : i64
    %823 = llvm.load %14 : !llvm.ptr -> i64
    %824 = arith.cmpi ult, %823, %c3_i64_334 : i64
    scf.if %824 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %823, %c3_i64_334 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_335 = arith.constant 0 : i64
    %825 = arith.extui %822 : i32 to i64
    %826 = arith.addi %825, %c0_i64_335 : i64
    %827 = llvm.getelementptr %19[%826] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %828 = llvm.load volatile %827 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_336 = arith.constant 3 : i64
    %829 = llvm.load %14 : !llvm.ptr -> i64
    %830 = arith.cmpi ult, %829, %c3_i64_336 : i64
    scf.if %830 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %829, %c3_i64_336 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %828, %7 : i32, !llvm.ptr
    %c1_i64_337 = arith.constant 1 : i64
    %831 = llvm.load %14 : !llvm.ptr -> i64
    %832 = arith.cmpi ult, %831, %c1_i64_337 : i64
    scf.if %832 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %831, %c1_i64_337 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb48
  ^bb51:  // 3 preds: ^bb47, ^bb52, ^bb53
    %c3_i64_338 = arith.constant 3 : i64
    %833 = llvm.load %14 : !llvm.ptr -> i64
    %834 = arith.cmpi ult, %833, %c3_i64_338 : i64
    scf.if %834 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %833, %c3_i64_338 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %835 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_339 = arith.constant 3 : i64
    %836 = llvm.load %14 : !llvm.ptr -> i64
    %837 = arith.cmpi ult, %836, %c3_i64_339 : i64
    scf.if %837 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %836, %c3_i64_339 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %838 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_340 = arith.constant 3 : i64
    %839 = llvm.load %14 : !llvm.ptr -> i64
    %840 = arith.cmpi ult, %839, %c3_i64_340 : i64
    scf.if %840 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %839, %c3_i64_340 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %841 = arith.extui %835 : i32 to i64
    %842 = arith.addi %841, %c24_i64 : i64
    %843 = llvm.getelementptr %19[%842] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %838, %843 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_341 = arith.constant 3 : i64
    %844 = llvm.load %14 : !llvm.ptr -> i64
    %845 = arith.cmpi ult, %844, %c3_i64_341 : i64
    scf.if %845 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %844, %c3_i64_341 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %846 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_342 = arith.constant 3 : i64
    %847 = llvm.load %14 : !llvm.ptr -> i64
    %848 = arith.cmpi ult, %847, %c3_i64_342 : i64
    scf.if %848 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %847, %c3_i64_342 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %849 = llvm.load %10 : !llvm.ptr -> i32
    %c3_i64_343 = arith.constant 3 : i64
    %850 = llvm.load %14 : !llvm.ptr -> i64
    %851 = arith.cmpi ult, %850, %c3_i64_343 : i64
    scf.if %851 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %850, %c3_i64_343 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c20_i64_344 = arith.constant 20 : i64
    %852 = arith.extui %846 : i32 to i64
    %853 = arith.addi %852, %c20_i64_344 : i64
    %854 = llvm.getelementptr %19[%853] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %849, %854 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_345 = arith.constant 3 : i64
    %855 = llvm.load %14 : !llvm.ptr -> i64
    %856 = arith.cmpi ult, %855, %c3_i64_345 : i64
    scf.if %856 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %855, %c3_i64_345 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %857 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_346 = arith.constant 3 : i64
    %858 = llvm.load %14 : !llvm.ptr -> i64
    %859 = arith.cmpi ult, %858, %c3_i64_346 : i64
    scf.if %859 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %858, %c3_i64_346 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %860 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_347 = arith.constant 1 : i64
    %861 = llvm.load %14 : !llvm.ptr -> i64
    %862 = arith.cmpi ult, %861, %c1_i64_347 : i64
    scf.if %862 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %861, %c1_i64_347 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c20_i32 = arith.constant 20 : i32
    %c3_i64_348 = arith.constant 3 : i64
    %863 = llvm.load %14 : !llvm.ptr -> i64
    %864 = arith.cmpi ult, %863, %c3_i64_348 : i64
    scf.if %864 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %863, %c3_i64_348 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %865 = arith.addi %860, %c20_i32 : i32
    %c3_i64_349 = arith.constant 3 : i64
    %866 = llvm.load %14 : !llvm.ptr -> i64
    %867 = arith.cmpi ult, %866, %c3_i64_349 : i64
    scf.if %867 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %866, %c3_i64_349 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_350 = arith.constant 0 : i64
    %868 = arith.extui %865 : i32 to i64
    %869 = arith.addi %868, %c0_i64_350 : i64
    %870 = llvm.getelementptr %19[%869] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %871 = llvm.load volatile %870 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_351 = arith.constant 1 : i64
    %872 = llvm.load %14 : !llvm.ptr -> i64
    %873 = arith.cmpi ult, %872, %c1_i64_351 : i64
    scf.if %873 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %872, %c1_i64_351 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c3_i32_352 = arith.constant 3 : i32
    %c3_i64_353 = arith.constant 3 : i64
    %874 = llvm.load %14 : !llvm.ptr -> i64
    %875 = arith.cmpi ult, %874, %c3_i64_353 : i64
    scf.if %875 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %874, %c3_i64_353 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c31_i32_354 = arith.constant 31 : i32
    %876 = arith.cmpi ule, %c3_i32_352, %c31_i32_354 : i32
    %877 = scf.if %876 -> (i32) {
      %1098 = arith.shli %871, %c3_i32_352 : i32
      scf.yield %1098 : i32
    } else {
      %c0_i32_449 = arith.constant 0 : i32
      scf.yield %c0_i32_449 : i32
    }
    %c3_i64_355 = arith.constant 3 : i64
    %878 = llvm.load %14 : !llvm.ptr -> i64
    %879 = arith.cmpi ult, %878, %c3_i64_355 : i64
    scf.if %879 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %878, %c3_i64_355 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %880 = arith.addi %857, %877 : i32
    %c3_i64_356 = arith.constant 3 : i64
    %881 = llvm.load %14 : !llvm.ptr -> i64
    %882 = arith.cmpi ult, %881, %c3_i64_356 : i64
    scf.if %882 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %881, %c3_i64_356 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %880, %1 : i32, !llvm.ptr
    %c3_i64_357 = arith.constant 3 : i64
    %883 = llvm.load %14 : !llvm.ptr -> i64
    %884 = arith.cmpi ult, %883, %c3_i64_357 : i64
    scf.if %884 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %883, %c3_i64_357 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_358 = arith.constant 0 : i64
    %885 = arith.extui %880 : i32 to i64
    %886 = arith.addi %885, %c0_i64_358 : i64
    %887 = llvm.getelementptr %19[%886] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %888 = llvm.load volatile %887 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_359 = arith.constant 3 : i64
    %889 = llvm.load %14 : !llvm.ptr -> i64
    %890 = arith.cmpi ult, %889, %c3_i64_359 : i64
    scf.if %890 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %889, %c3_i64_359 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %891 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_360 = arith.constant 1 : i64
    %892 = llvm.load %14 : !llvm.ptr -> i64
    %893 = arith.cmpi ult, %892, %c1_i64_360 : i64
    scf.if %893 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %892, %c1_i64_360 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c12_i32_361 = arith.constant 12 : i32
    %c3_i64_362 = arith.constant 3 : i64
    %894 = llvm.load %14 : !llvm.ptr -> i64
    %895 = arith.cmpi ult, %894, %c3_i64_362 : i64
    scf.if %895 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %894, %c3_i64_362 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %896 = arith.addi %891, %c12_i32_361 : i32
    %c3_i64_363 = arith.constant 3 : i64
    %897 = llvm.load %14 : !llvm.ptr -> i64
    %898 = arith.cmpi ult, %897, %c3_i64_363 : i64
    scf.if %898 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %897, %c3_i64_363 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %899 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_364 = arith.constant 3 : i64
    %900 = llvm.load %14 : !llvm.ptr -> i64
    %901 = arith.cmpi ult, %900, %c3_i64_364 : i64
    scf.if %901 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %900, %c3_i64_364 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c4_i64_365 = arith.constant 4 : i64
    %902 = arith.extui %899 : i32 to i64
    %903 = arith.addi %902, %c4_i64_365 : i64
    %904 = llvm.getelementptr %19[%903] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %905 = llvm.load volatile %904 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_366 = arith.constant 7 : i64
    %906 = llvm.load %14 : !llvm.ptr -> i64
    %907 = arith.cmpi ult, %906, %c7_i64_366 : i64
    scf.if %907 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %906, %c7_i64_366 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %908 = arith.cmpi ult, %905, %37 : i32
    cf.cond_br %908, ^bb55, ^bb56
  ^bb52:  // 3 preds: ^bb47, ^bb47, ^bb54
    %c1_i64_367 = arith.constant 1 : i64
    %909 = llvm.load %14 : !llvm.ptr -> i64
    %910 = arith.cmpi ult, %909, %c1_i64_367 : i64
    scf.if %910 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %909, %c1_i64_367 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c1_i32_368 = arith.constant 1 : i32
    %c3_i64_369 = arith.constant 3 : i64
    %911 = llvm.load %14 : !llvm.ptr -> i64
    %912 = arith.cmpi ult, %911, %c3_i64_369 : i64
    scf.if %912 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %911, %c3_i64_369 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_368, %10 : i32, !llvm.ptr
    %c1_i64_370 = arith.constant 1 : i64
    %913 = llvm.load %14 : !llvm.ptr -> i64
    %914 = arith.cmpi ult, %913, %c1_i64_370 : i64
    scf.if %914 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %913, %c1_i64_370 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb51
  ^bb53:  // pred: ^bb47
    %c3_i64_371 = arith.constant 3 : i64
    %915 = llvm.load %14 : !llvm.ptr -> i64
    %916 = arith.cmpi ult, %915, %c3_i64_371 : i64
    scf.if %916 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %915, %c3_i64_371 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %917 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_372 = arith.constant 1 : i64
    %918 = llvm.load %14 : !llvm.ptr -> i64
    %919 = arith.cmpi ult, %918, %c1_i64_372 : i64
    scf.if %919 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %918, %c1_i64_372 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c3_i32_373 = arith.constant 3 : i32
    %c3_i64_374 = arith.constant 3 : i64
    %920 = llvm.load %14 : !llvm.ptr -> i64
    %921 = arith.cmpi ult, %920, %c3_i64_374 : i64
    scf.if %921 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %920, %c3_i64_374 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c31_i32_375 = arith.constant 31 : i32
    %922 = arith.cmpi ule, %c3_i32_373, %c31_i32_375 : i32
    %923 = scf.if %922 -> (i32) {
      %1098 = arith.shli %917, %c3_i32_373 : i32
      scf.yield %1098 : i32
    } else {
      %c0_i32_449 = arith.constant 0 : i32
      scf.yield %c0_i32_449 : i32
    }
    %c3_i64_376 = arith.constant 3 : i64
    %924 = llvm.load %14 : !llvm.ptr -> i64
    %925 = arith.cmpi ult, %924, %c3_i64_376 : i64
    scf.if %925 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %924, %c3_i64_376 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %923, %11 : i32, !llvm.ptr
    %c3_i64_377 = arith.constant 3 : i64
    %926 = llvm.load %14 : !llvm.ptr -> i64
    %927 = arith.cmpi ult, %926, %c3_i64_377 : i64
    scf.if %927 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %926, %c3_i64_377 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %928 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_378 = arith.constant 3 : i64
    %929 = llvm.load %14 : !llvm.ptr -> i64
    %930 = arith.cmpi ult, %929, %c3_i64_378 : i64
    scf.if %930 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %929, %c3_i64_378 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %931 = llvm.load %11 : !llvm.ptr -> i32
    %c3_i64_379 = arith.constant 3 : i64
    %932 = llvm.load %14 : !llvm.ptr -> i64
    %933 = arith.cmpi ult, %932, %c3_i64_379 : i64
    scf.if %933 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %932, %c3_i64_379 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %934 = arith.addi %928, %931 : i32
    %c3_i64_380 = arith.constant 3 : i64
    %935 = llvm.load %14 : !llvm.ptr -> i64
    %936 = arith.cmpi ult, %935, %c3_i64_380 : i64
    scf.if %936 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %935, %c3_i64_380 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %934, %11 : i32, !llvm.ptr
    %c3_i64_381 = arith.constant 3 : i64
    %937 = llvm.load %14 : !llvm.ptr -> i64
    %938 = arith.cmpi ult, %937, %c3_i64_381 : i64
    scf.if %938 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %937, %c3_i64_381 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c4_i64_382 = arith.constant 4 : i64
    %939 = arith.extui %934 : i32 to i64
    %940 = arith.addi %939, %c4_i64_382 : i64
    %941 = llvm.getelementptr %19[%940] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %942 = llvm.load volatile %941 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_383 = arith.constant 1 : i64
    %943 = llvm.load %14 : !llvm.ptr -> i64
    %944 = arith.cmpi ult, %943, %c1_i64_383 : i64
    scf.if %944 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %943, %c1_i64_383 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_384 = arith.constant 0 : i32
    %945 = arith.cmpi ne, %942, %c0_i32_384 : i32
    cf.cond_br %945, ^bb51, ^bb54
  ^bb54:  // pred: ^bb53
    %c3_i64_385 = arith.constant 3 : i64
    %946 = llvm.load %14 : !llvm.ptr -> i64
    %947 = arith.cmpi ult, %946, %c3_i64_385 : i64
    scf.if %947 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %946, %c3_i64_385 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %948 = llvm.load %11 : !llvm.ptr -> i32
    %c3_i64_386 = arith.constant 3 : i64
    %949 = llvm.load %14 : !llvm.ptr -> i64
    %950 = arith.cmpi ult, %949, %c3_i64_386 : i64
    scf.if %950 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %949, %c3_i64_386 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_387 = arith.constant 0 : i64
    %951 = arith.extui %948 : i32 to i64
    %952 = arith.addi %951, %c0_i64_387 : i64
    %953 = llvm.getelementptr %19[%952] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %954 = llvm.load volatile %953 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_388 = arith.constant 3 : i64
    %955 = llvm.load %14 : !llvm.ptr -> i64
    %956 = arith.cmpi ult, %955, %c3_i64_388 : i64
    scf.if %956 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %955, %c3_i64_388 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %954, %7 : i32, !llvm.ptr
    %c1_i64_389 = arith.constant 1 : i64
    %957 = llvm.load %14 : !llvm.ptr -> i64
    %958 = arith.cmpi ult, %957, %c1_i64_389 : i64
    scf.if %958 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %957, %c1_i64_389 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb52
  ^bb55:  // 2 preds: ^bb51, ^bb56
    %959 = llvm.getelementptr inbounds %35[%905] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %960 = llvm.load %959 : !llvm.ptr -> !llvm.ptr
    %961 = llvm.ptrtoint %960 : !llvm.ptr to i64
    %c0_i64_390 = arith.constant 0 : i64
    %962 = arith.cmpi eq, %961, %c0_i64_390 : i64
    cf.cond_br %962, ^bb58, ^bb57
  ^bb56:  // pred: ^bb51
    %c3_i32_391 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_391) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %963 = llvm.getelementptr %960[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %964 = llvm.getelementptr %960[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %965 = llvm.getelementptr %960[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %966 = llvm.load %963 : !llvm.ptr -> !llvm.ptr
    %967 = llvm.load %965 : !llvm.ptr -> !llvm.ptr
    %968 = llvm.ptrtoint %966 : !llvm.ptr to i64
    %c0_i64_392 = arith.constant 0 : i64
    %969 = arith.cmpi eq, %968, %c0_i64_392 : i64
    cf.cond_br %969, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c4_i32_393 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_393) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %970 = llvm.load %964 : !llvm.ptr -> i32
    %971 = arith.cmpi ne, %28, %970 : i32
    cf.cond_br %971, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_394 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_394) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %972 = llvm.call %966(%967, %888, %896) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c1_i64_395 = arith.constant 1 : i64
    %973 = llvm.load %14 : !llvm.ptr -> i64
    %974 = arith.cmpi ult, %973, %c1_i64_395 : i64
    scf.if %974 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %973, %c1_i64_395 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_396 = arith.constant 0 : i32
    %975 = arith.cmpi ne, %972, %c0_i32_396 : i32
    cf.cond_br %975, ^bb5, ^bb63
  ^bb62:  // pred: ^bb59
    %c5_i32_397 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_397) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // pred: ^bb61
    %c3_i64_398 = arith.constant 3 : i64
    %976 = llvm.load %14 : !llvm.ptr -> i64
    %977 = arith.cmpi ult, %976, %c3_i64_398 : i64
    scf.if %977 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %976, %c3_i64_398 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %978 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_399 = arith.constant 1 : i64
    %979 = llvm.load %14 : !llvm.ptr -> i64
    %980 = arith.cmpi ult, %979, %c1_i64_399 : i64
    scf.if %980 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %979, %c1_i64_399 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c8_i32_400 = arith.constant 8 : i32
    %c3_i64_401 = arith.constant 3 : i64
    %981 = llvm.load %14 : !llvm.ptr -> i64
    %982 = arith.cmpi ult, %981, %c3_i64_401 : i64
    scf.if %982 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %981, %c3_i64_401 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %983 = arith.addi %978, %c8_i32_400 : i32
    %c3_i64_402 = arith.constant 3 : i64
    %984 = llvm.load %14 : !llvm.ptr -> i64
    %985 = arith.cmpi ult, %984, %c3_i64_402 : i64
    scf.if %985 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %984, %c3_i64_402 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %983, %0 : i32, !llvm.ptr
    %c3_i64_403 = arith.constant 3 : i64
    %986 = llvm.load %14 : !llvm.ptr -> i64
    %987 = arith.cmpi ult, %986, %c3_i64_403 : i64
    scf.if %987 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %986, %c3_i64_403 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %988 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_404 = arith.constant 3 : i64
    %989 = llvm.load %14 : !llvm.ptr -> i64
    %990 = arith.cmpi ult, %989, %c3_i64_404 : i64
    scf.if %990 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %989, %c3_i64_404 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %991 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_405 = arith.constant 1 : i64
    %992 = llvm.load %14 : !llvm.ptr -> i64
    %993 = arith.cmpi ult, %992, %c1_i64_405 : i64
    scf.if %993 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %992, %c1_i64_405 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c32_i32_406 = arith.constant 32 : i32
    %c3_i64_407 = arith.constant 3 : i64
    %994 = llvm.load %14 : !llvm.ptr -> i64
    %995 = arith.cmpi ult, %994, %c3_i64_407 : i64
    scf.if %995 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %994, %c3_i64_407 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %996 = arith.addi %991, %c32_i32_406 : i32
    %c3_i64_408 = arith.constant 3 : i64
    %997 = llvm.load %14 : !llvm.ptr -> i64
    %998 = arith.cmpi ult, %997, %c3_i64_408 : i64
    scf.if %998 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %997, %c3_i64_408 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %996, %6 : i32, !llvm.ptr
    %c3_i64_409 = arith.constant 3 : i64
    %999 = llvm.load %14 : !llvm.ptr -> i64
    %1000 = arith.cmpi ult, %999, %c3_i64_409 : i64
    scf.if %1000 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %999, %c3_i64_409 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %1001 = arith.cmpi eq, %988, %996 : i32
    %1002 = arith.extui %1001 : i1 to i32
    %c0_i32_410 = arith.constant 0 : i32
    %1003 = arith.cmpi eq, %1002, %c0_i32_410 : i32
    %1004 = arith.extui %1003 : i1 to i32
    %c1_i64_411 = arith.constant 1 : i64
    %1005 = llvm.load %14 : !llvm.ptr -> i64
    %1006 = arith.cmpi ult, %1005, %c1_i64_411 : i64
    scf.if %1006 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1005, %c1_i64_411 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_412 = arith.constant 0 : i32
    %1007 = arith.cmpi ne, %1004, %c0_i32_412 : i32
    cf.cond_br %1007, ^bb35, ^bb64
  ^bb64:  // pred: ^bb63
    %c1_i64_413 = arith.constant 1 : i64
    %1008 = llvm.load %14 : !llvm.ptr -> i64
    %1009 = arith.cmpi ult, %1008, %c1_i64_413 : i64
    scf.if %1009 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1008, %c1_i64_413 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb34
  ^bb65:  // pred: ^bb6
    %c3_i64_414 = arith.constant 3 : i64
    %1010 = llvm.load %14 : !llvm.ptr -> i64
    %1011 = arith.cmpi ult, %1010, %c3_i64_414 : i64
    scf.if %1011 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1010, %c3_i64_414 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %1012 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_415 = arith.constant 3 : i64
    %1013 = llvm.load %14 : !llvm.ptr -> i64
    %1014 = arith.cmpi ult, %1013, %c3_i64_415 : i64
    scf.if %1014 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1013, %c3_i64_415 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c32_i64_416 = arith.constant 32 : i64
    %1015 = arith.extui %1012 : i32 to i64
    %1016 = arith.addi %1015, %c32_i64_416 : i64
    %1017 = llvm.getelementptr %19[%1016] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1018 = llvm.load volatile %1017 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_417 = arith.constant 3 : i64
    %1019 = llvm.load %14 : !llvm.ptr -> i64
    %1020 = arith.cmpi ult, %1019, %c3_i64_417 : i64
    scf.if %1020 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1019, %c3_i64_417 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %1021 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_418 = arith.constant 3 : i64
    %1022 = llvm.load %14 : !llvm.ptr -> i64
    %1023 = arith.cmpi ult, %1022, %c3_i64_418 : i64
    scf.if %1023 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1022, %c3_i64_418 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_419 = arith.constant 0 : i64
    %1024 = arith.extui %1021 : i32 to i64
    %1025 = arith.addi %1024, %c0_i64_419 : i64
    %1026 = llvm.getelementptr %19[%1025] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1027 = llvm.load volatile %1026 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_420 = arith.constant 3 : i64
    %1028 = llvm.load %14 : !llvm.ptr -> i64
    %1029 = arith.cmpi ult, %1028, %c3_i64_420 : i64
    scf.if %1029 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1028, %c3_i64_420 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %1030 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_421 = arith.constant 1 : i64
    %1031 = llvm.load %14 : !llvm.ptr -> i64
    %1032 = arith.cmpi ult, %1031, %c1_i64_421 : i64
    scf.if %1032 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1031, %c1_i64_421 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c3_i32_422 = arith.constant 3 : i32
    %c3_i64_423 = arith.constant 3 : i64
    %1033 = llvm.load %14 : !llvm.ptr -> i64
    %1034 = arith.cmpi ult, %1033, %c3_i64_423 : i64
    scf.if %1034 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1033, %c3_i64_423 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c31_i32_424 = arith.constant 31 : i32
    %1035 = arith.cmpi ule, %c3_i32_422, %c31_i32_424 : i32
    %1036 = scf.if %1035 -> (i32) {
      %1098 = arith.shli %1030, %c3_i32_422 : i32
      scf.yield %1098 : i32
    } else {
      %c0_i32_449 = arith.constant 0 : i32
      scf.yield %c0_i32_449 : i32
    }
    %c3_i64_425 = arith.constant 3 : i64
    %1037 = llvm.load %14 : !llvm.ptr -> i64
    %1038 = arith.cmpi ult, %1037, %c3_i64_425 : i64
    scf.if %1038 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1037, %c3_i64_425 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %1039 = arith.addi %1027, %1036 : i32
    %c3_i64_426 = arith.constant 3 : i64
    %1040 = llvm.load %14 : !llvm.ptr -> i64
    %1041 = arith.cmpi ult, %1040, %c3_i64_426 : i64
    scf.if %1041 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1040, %c3_i64_426 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    llvm.store %1039, %1 : i32, !llvm.ptr
    %c3_i64_427 = arith.constant 3 : i64
    %1042 = llvm.load %14 : !llvm.ptr -> i64
    %1043 = arith.cmpi ult, %1042, %c3_i64_427 : i64
    scf.if %1043 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1042, %c3_i64_427 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i64_428 = arith.constant 0 : i64
    %1044 = arith.extui %1039 : i32 to i64
    %1045 = arith.addi %1044, %c0_i64_428 : i64
    %1046 = llvm.getelementptr %19[%1045] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1047 = llvm.load volatile %1046 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_429 = arith.constant 3 : i64
    %1048 = llvm.load %14 : !llvm.ptr -> i64
    %1049 = arith.cmpi ult, %1048, %c3_i64_429 : i64
    scf.if %1049 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1048, %c3_i64_429 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %1050 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_430 = arith.constant 3 : i64
    %1051 = llvm.load %14 : !llvm.ptr -> i64
    %1052 = arith.cmpi ult, %1051, %c3_i64_430 : i64
    scf.if %1052 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1051, %c3_i64_430 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c4_i64_431 = arith.constant 4 : i64
    %1053 = arith.extui %1050 : i32 to i64
    %1054 = arith.addi %1053, %c4_i64_431 : i64
    %1055 = llvm.getelementptr %19[%1054] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1056 = llvm.load volatile %1055 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_432 = arith.constant 3 : i64
    %1057 = llvm.load %14 : !llvm.ptr -> i64
    %1058 = arith.cmpi ult, %1057, %c3_i64_432 : i64
    scf.if %1058 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1057, %c3_i64_432 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %1059 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_433 = arith.constant 3 : i64
    %1060 = llvm.load %14 : !llvm.ptr -> i64
    %1061 = arith.cmpi ult, %1060, %c3_i64_433 : i64
    scf.if %1061 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1060, %c3_i64_433 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c36_i64_434 = arith.constant 36 : i64
    %1062 = arith.extui %1059 : i32 to i64
    %1063 = arith.addi %1062, %c36_i64_434 : i64
    %1064 = llvm.getelementptr %19[%1063] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1065 = llvm.load volatile %1064 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_435 = arith.constant 3 : i64
    %1066 = llvm.load %14 : !llvm.ptr -> i64
    %1067 = arith.cmpi ult, %1066, %c3_i64_435 : i64
    scf.if %1067 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1066, %c3_i64_435 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c12_i64_436 = arith.constant 12 : i64
    %1068 = arith.extui %1065 : i32 to i64
    %1069 = arith.addi %1068, %c12_i64_436 : i64
    %1070 = llvm.getelementptr %19[%1069] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1071 = llvm.load volatile %1070 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_437 = arith.constant 7 : i64
    %1072 = llvm.load %14 : !llvm.ptr -> i64
    %1073 = arith.cmpi ult, %1072, %c7_i64_437 : i64
    scf.if %1073 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1072, %c7_i64_437 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %1074 = arith.cmpi ult, %1071, %40 : i32
    cf.cond_br %1074, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %1075 = llvm.getelementptr inbounds %38[%1071] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %1076 = llvm.load %1075 : !llvm.ptr -> !llvm.ptr
    %1077 = llvm.ptrtoint %1076 : !llvm.ptr to i64
    %c0_i64_438 = arith.constant 0 : i64
    %1078 = arith.cmpi eq, %1077, %c0_i64_438 : i64
    cf.cond_br %1078, ^bb69, ^bb68
  ^bb67:  // pred: ^bb65
    %c3_i32_439 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_439) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %1079 = llvm.getelementptr %1076[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1080 = llvm.getelementptr %1076[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1081 = llvm.getelementptr %1076[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1082 = llvm.load %1079 : !llvm.ptr -> !llvm.ptr
    %1083 = llvm.load %1081 : !llvm.ptr -> !llvm.ptr
    %1084 = llvm.ptrtoint %1082 : !llvm.ptr to i64
    %c0_i64_440 = arith.constant 0 : i64
    %1085 = arith.cmpi eq, %1084, %c0_i64_440 : i64
    cf.cond_br %1085, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c4_i32_441 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_441) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %1086 = llvm.load %1080 : !llvm.ptr -> i32
    %1087 = arith.cmpi ne, %21, %1086 : i32
    cf.cond_br %1087, ^bb73, ^bb72
  ^bb71:  // pred: ^bb68
    %c3_i32_442 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_442) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %1088 = llvm.call %1082(%1083, %1018, %1047, %1056) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c3_i64_443 = arith.constant 3 : i64
    %1089 = llvm.load %14 : !llvm.ptr -> i64
    %1090 = arith.cmpi ult, %1089, %c3_i64_443 : i64
    scf.if %1090 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1089, %c3_i64_443 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_444 = arith.constant 0 : i32
    %1091 = arith.cmpi eq, %1088, %c0_i32_444 : i32
    %1092 = arith.extui %1091 : i1 to i32
    %c1_i64_445 = arith.constant 1 : i64
    %1093 = llvm.load %14 : !llvm.ptr -> i64
    %1094 = arith.cmpi ult, %1093, %c1_i64_445 : i64
    scf.if %1094 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1093, %c1_i64_445 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    %c0_i32_446 = arith.constant 0 : i32
    %1095 = arith.cmpi ne, %1092, %c0_i32_446 : i32
    cf.cond_br %1095, ^bb4, ^bb74
  ^bb73:  // pred: ^bb70
    %c5_i32_447 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_447) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // pred: ^bb72
    %c1_i64_448 = arith.constant 1 : i64
    %1096 = llvm.load %14 : !llvm.ptr -> i64
    %1097 = arith.cmpi ult, %1096, %c1_i64_448 : i64
    scf.if %1097 {
      %c20_i32_449 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32_449) : (i32) -> ()
    } else {
      %1098 = arith.subi %1096, %c1_i64_448 : i64
      llvm.store %1098, %14 : i64, !llvm.ptr
    }
    cf.br ^bb5
  }
  func.func @f67(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_5 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %13 = llvm.load %7 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %13, %c3_i64 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %15 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %16 = llvm.load %7 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c1_i64 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %16, %c1_i64 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c64_i32 = arith.constant 64 : i32
    %c3_i64_6 = arith.constant 3 : i64
    %18 = llvm.load %7 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_6 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %18, %c3_i64_6 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %20 = arith.subi %15, %c64_i32 : i32
    %c3_i64_7 = arith.constant 3 : i64
    %21 = llvm.load %7 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_7 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %21, %c3_i64_7 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %5 : i32, !llvm.ptr
    %c3_i64_8 = arith.constant 3 : i64
    %23 = llvm.load %7 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_8 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %23, %c3_i64_8 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    llvm.store %20, %9 : i32, !llvm.ptr
    %c3_i64_9 = arith.constant 3 : i64
    %25 = llvm.load %7 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c3_i64_9 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %25, %c3_i64_9 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %27 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_10 = arith.constant 3 : i64
    %28 = llvm.load %7 : !llvm.ptr -> i64
    %29 = arith.cmpi ult, %28, %c3_i64_10 : i64
    scf.if %29 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %28, %c3_i64_10 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %31 = llvm.load %7 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c3_i64_11 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %31, %c3_i64_11 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %33 = arith.extui %27 : i32 to i64
    %34 = arith.addi %33, %c12_i64 : i64
    %35 = llvm.getelementptr %12[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %30, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_12 = arith.constant 3 : i64
    %36 = llvm.load %7 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_12 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %36, %c3_i64_12 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %38 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_13 = arith.constant 3 : i64
    %39 = llvm.load %7 : !llvm.ptr -> i64
    %40 = arith.cmpi ult, %39, %c3_i64_13 : i64
    scf.if %40 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %39, %c3_i64_13 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_14 = arith.constant 3 : i64
    %42 = llvm.load %7 : !llvm.ptr -> i64
    %43 = arith.cmpi ult, %42, %c3_i64_14 : i64
    scf.if %43 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %42, %c3_i64_14 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %44 = arith.extui %38 : i32 to i64
    %45 = arith.addi %44, %c8_i64 : i64
    %46 = llvm.getelementptr %12[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %46 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_15 = arith.constant 3 : i64
    %47 = llvm.load %7 : !llvm.ptr -> i64
    %48 = arith.cmpi ult, %47, %c3_i64_15 : i64
    scf.if %48 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %47, %c3_i64_15 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %49 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_16 = arith.constant 3 : i64
    %50 = llvm.load %7 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c3_i64_16 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %50, %c3_i64_16 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %52 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_17 = arith.constant 3 : i64
    %53 = llvm.load %7 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c3_i64_17 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %53, %c3_i64_17 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %55 = arith.extui %49 : i32 to i64
    %56 = arith.addi %55, %c20_i64 : i64
    %57 = llvm.getelementptr %12[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %57 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_18 = arith.constant 3 : i64
    %58 = llvm.load %7 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c3_i64_18 : i64
    scf.if %59 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %58, %c3_i64_18 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %60 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_19 = arith.constant 3 : i64
    %61 = llvm.load %7 : !llvm.ptr -> i64
    %62 = arith.cmpi ult, %61, %c3_i64_19 : i64
    scf.if %62 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %61, %c3_i64_19 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %63 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_20 = arith.constant 3 : i64
    %64 = llvm.load %7 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c3_i64_20 : i64
    scf.if %65 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %64, %c3_i64_20 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %66 = arith.extui %60 : i32 to i64
    %67 = arith.addi %66, %c16_i64 : i64
    %68 = llvm.getelementptr %12[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %63, %68 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_21 = arith.constant 3 : i64
    %69 = llvm.load %7 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c3_i64_21 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %69, %c3_i64_21 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %71 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_22 = arith.constant 1 : i64
    %72 = llvm.load %7 : !llvm.ptr -> i64
    %73 = arith.cmpi ult, %72, %c1_i64_22 : i64
    scf.if %73 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %72, %c1_i64_22 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c2_i32 = arith.constant 2 : i32
    %c3_i64_23 = arith.constant 3 : i64
    %74 = llvm.load %7 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c3_i64_23 : i64
    scf.if %75 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %74, %c3_i64_23 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %76 = arith.extui %71 : i32 to i64
    %77 = arith.addi %76, %c28_i64 : i64
    %78 = llvm.getelementptr %12[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %78 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_24 = arith.constant 3 : i64
    %79 = llvm.load %7 : !llvm.ptr -> i64
    %80 = arith.cmpi ult, %79, %c3_i64_24 : i64
    scf.if %80 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %79, %c3_i64_24 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %81 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_25 = arith.constant 1 : i64
    %82 = llvm.load %7 : !llvm.ptr -> i64
    %83 = arith.cmpi ult, %82, %c1_i64_25 : i64
    scf.if %83 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %82, %c1_i64_25 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c1049280_i32 = arith.constant 1049280 : i32
    %c3_i64_26 = arith.constant 3 : i64
    %84 = llvm.load %7 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c3_i64_26 : i64
    scf.if %85 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %84, %c3_i64_26 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %86 = arith.extui %81 : i32 to i64
    %87 = arith.addi %86, %c24_i64 : i64
    %88 = llvm.getelementptr %12[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049280_i32, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_27 = arith.constant 3 : i64
    %89 = llvm.load %7 : !llvm.ptr -> i64
    %90 = arith.cmpi ult, %89, %c3_i64_27 : i64
    scf.if %90 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %89, %c3_i64_27 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %91 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_28 = arith.constant 1 : i64
    %92 = llvm.load %7 : !llvm.ptr -> i64
    %93 = arith.cmpi ult, %92, %c1_i64_28 : i64
    scf.if %93 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %92, %c1_i64_28 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c2_i64 = arith.constant 2 : i64
    %c3_i64_29 = arith.constant 3 : i64
    %94 = llvm.load %7 : !llvm.ptr -> i64
    %95 = arith.cmpi ult, %94, %c3_i64_29 : i64
    scf.if %95 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %94, %c3_i64_29 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c36_i64 = arith.constant 36 : i64
    %96 = arith.extui %91 : i32 to i64
    %97 = arith.addi %96, %c36_i64 : i64
    %98 = llvm.getelementptr %12[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %98 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_30 = arith.constant 3 : i64
    %99 = llvm.load %7 : !llvm.ptr -> i64
    %100 = arith.cmpi ult, %99, %c3_i64_30 : i64
    scf.if %100 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %99, %c3_i64_30 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %101 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_31 = arith.constant 1 : i64
    %102 = llvm.load %7 : !llvm.ptr -> i64
    %103 = arith.cmpi ult, %102, %c1_i64_31 : i64
    scf.if %103 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %102, %c1_i64_31 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c32_i32 = arith.constant 32 : i32
    %c4_i64 = arith.constant 4 : i64
    %104 = llvm.load %7 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c4_i64 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %104, %c4_i64 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %106 = arith.extui %c32_i32 : i32 to i64
    %c1_i64_32 = arith.constant 1 : i64
    %107 = llvm.load %7 : !llvm.ptr -> i64
    %108 = arith.cmpi ult, %107, %c1_i64_32 : i64
    scf.if %108 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %107, %c1_i64_32 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c32_i64 = arith.constant 32 : i64
    %c3_i64_33 = arith.constant 3 : i64
    %109 = llvm.load %7 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c3_i64_33 : i64
    scf.if %110 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %109, %c3_i64_33 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c63_i64 = arith.constant 63 : i64
    %111 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %112 = scf.if %111 -> (i64) {
      %196 = arith.shli %106, %c32_i64 : i64
      scf.yield %196 : i64
    } else {
      %c0_i64_63 = arith.constant 0 : i64
      scf.yield %c0_i64_63 : i64
    }
    %c3_i64_34 = arith.constant 3 : i64
    %113 = llvm.load %7 : !llvm.ptr -> i64
    %114 = arith.cmpi ult, %113, %c3_i64_34 : i64
    scf.if %114 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %113, %c3_i64_34 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %115 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_35 = arith.constant 1 : i64
    %116 = llvm.load %7 : !llvm.ptr -> i64
    %117 = arith.cmpi ult, %116, %c1_i64_35 : i64
    scf.if %117 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %116, %c1_i64_35 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_36 = arith.constant 3 : i64
    %118 = llvm.load %7 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_36 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %118, %c3_i64_36 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %120 = arith.addi %115, %c16_i32 : i32
    %c4_i64_37 = arith.constant 4 : i64
    %121 = llvm.load %7 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %c4_i64_37 : i64
    scf.if %122 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %121, %c4_i64_37 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %123 = arith.extui %120 : i32 to i64
    %c3_i64_38 = arith.constant 3 : i64
    %124 = llvm.load %7 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c3_i64_38 : i64
    scf.if %125 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %124, %c3_i64_38 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %126 = arith.ori %112, %123 : i64
    %c3_i64_39 = arith.constant 3 : i64
    %127 = llvm.load %7 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c3_i64_39 : i64
    scf.if %128 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %127, %c3_i64_39 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c56_i64 = arith.constant 56 : i64
    %129 = arith.extui %101 : i32 to i64
    %130 = arith.addi %129, %c56_i64 : i64
    %131 = llvm.getelementptr %12[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %131 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_40 = arith.constant 3 : i64
    %132 = llvm.load %7 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c3_i64_40 : i64
    scf.if %133 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %132, %c3_i64_40 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_41 = arith.constant 1 : i64
    %135 = llvm.load %7 : !llvm.ptr -> i64
    %136 = arith.cmpi ult, %135, %c1_i64_41 : i64
    scf.if %136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %135, %c1_i64_41 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c33_i32 = arith.constant 33 : i32
    %c4_i64_42 = arith.constant 4 : i64
    %137 = llvm.load %7 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c4_i64_42 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %137, %c4_i64_42 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %139 = arith.extui %c33_i32 : i32 to i64
    %c1_i64_43 = arith.constant 1 : i64
    %140 = llvm.load %7 : !llvm.ptr -> i64
    %141 = arith.cmpi ult, %140, %c1_i64_43 : i64
    scf.if %141 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %140, %c1_i64_43 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c32_i64_44 = arith.constant 32 : i64
    %c3_i64_45 = arith.constant 3 : i64
    %142 = llvm.load %7 : !llvm.ptr -> i64
    %143 = arith.cmpi ult, %142, %c3_i64_45 : i64
    scf.if %143 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %142, %c3_i64_45 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c63_i64_46 = arith.constant 63 : i64
    %144 = arith.cmpi ule, %c32_i64_44, %c63_i64_46 : i64
    %145 = scf.if %144 -> (i64) {
      %196 = arith.shli %139, %c32_i64_44 : i64
      scf.yield %196 : i64
    } else {
      %c0_i64_63 = arith.constant 0 : i64
      scf.yield %c0_i64_63 : i64
    }
    %c3_i64_47 = arith.constant 3 : i64
    %146 = llvm.load %7 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c3_i64_47 : i64
    scf.if %147 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %146, %c3_i64_47 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %148 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_48 = arith.constant 1 : i64
    %149 = llvm.load %7 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c1_i64_48 : i64
    scf.if %150 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %149, %c1_i64_48 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_49 = arith.constant 3 : i64
    %151 = llvm.load %7 : !llvm.ptr -> i64
    %152 = arith.cmpi ult, %151, %c3_i64_49 : i64
    scf.if %152 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %151, %c3_i64_49 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %153 = arith.addi %148, %c8_i32 : i32
    %c4_i64_50 = arith.constant 4 : i64
    %154 = llvm.load %7 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c4_i64_50 : i64
    scf.if %155 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %154, %c4_i64_50 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %156 = arith.extui %153 : i32 to i64
    %c3_i64_51 = arith.constant 3 : i64
    %157 = llvm.load %7 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c3_i64_51 : i64
    scf.if %158 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %157, %c3_i64_51 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %159 = arith.ori %145, %156 : i64
    %c3_i64_52 = arith.constant 3 : i64
    %160 = llvm.load %7 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_52 : i64
    scf.if %161 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %160, %c3_i64_52 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c48_i64 = arith.constant 48 : i64
    %162 = arith.extui %134 : i32 to i64
    %163 = arith.addi %162, %c48_i64 : i64
    %164 = llvm.getelementptr %12[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %159, %164 {alignment = 1 : i64} : i64, !llvm.ptr
    %c3_i64_53 = arith.constant 3 : i64
    %165 = llvm.load %7 : !llvm.ptr -> i64
    %166 = arith.cmpi ult, %165, %c3_i64_53 : i64
    scf.if %166 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %165, %c3_i64_53 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %167 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_54 = arith.constant 3 : i64
    %168 = llvm.load %7 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c3_i64_54 : i64
    scf.if %169 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %168, %c3_i64_54 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %170 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_55 = arith.constant 1 : i64
    %171 = llvm.load %7 : !llvm.ptr -> i64
    %172 = arith.cmpi ult, %171, %c1_i64_55 : i64
    scf.if %172 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %171, %c1_i64_55 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c48_i32 = arith.constant 48 : i32
    %c3_i64_56 = arith.constant 3 : i64
    %173 = llvm.load %7 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c3_i64_56 : i64
    scf.if %174 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %173, %c3_i64_56 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %175 = arith.addi %170, %c48_i32 : i32
    %c3_i64_57 = arith.constant 3 : i64
    %176 = llvm.load %7 : !llvm.ptr -> i64
    %177 = arith.cmpi ult, %176, %c3_i64_57 : i64
    scf.if %177 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %176, %c3_i64_57 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c32_i64_58 = arith.constant 32 : i64
    %178 = arith.extui %167 : i32 to i64
    %179 = arith.addi %178, %c32_i64_58 : i64
    %180 = llvm.getelementptr %12[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %175, %180 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_59 = arith.constant 3 : i64
    %181 = llvm.load %7 : !llvm.ptr -> i64
    %182 = arith.cmpi ult, %181, %c3_i64_59 : i64
    scf.if %182 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %181, %c3_i64_59 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %183 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_60 = arith.constant 1 : i64
    %184 = llvm.load %7 : !llvm.ptr -> i64
    %185 = arith.cmpi ult, %184, %c1_i64_60 : i64
    scf.if %185 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %184, %c1_i64_60 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c24_i32 = arith.constant 24 : i32
    %c3_i64_61 = arith.constant 3 : i64
    %186 = llvm.load %7 : !llvm.ptr -> i64
    %187 = arith.cmpi ult, %186, %c3_i64_61 : i64
    scf.if %187 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %186, %c3_i64_61 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %188 = arith.addi %183, %c24_i32 : i32
    %c3_i64_62 = arith.constant 3 : i64
    %189 = llvm.load %7 : !llvm.ptr -> i64
    %190 = arith.cmpi ult, %189, %c3_i64_62 : i64
    scf.if %190 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %189, %c3_i64_62 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %191 = llvm.load %4 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %192 = llvm.load %7 : !llvm.ptr -> i64
    %193 = arith.cmpi ult, %192, %c6_i64 : i64
    scf.if %193 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %192, %c6_i64 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    call @f63(%arg0, %188, %191) : (!llvm.ptr, i32, i32) -> ()
    %c0_i64 = arith.constant 0 : i64
    %194 = llvm.load %7 : !llvm.ptr -> i64
    %195 = arith.cmpi ult, %194, %c0_i64 : i64
    scf.if %195 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %196 = arith.subi %194, %c0_i64 : i64
      llvm.store %196, %7 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f68(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %7 = llvm.load %3 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c3_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %7, %c3_i64 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = arith.cmpi ult, %10, %c3_i64_2 : i64
    scf.if %11 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %10, %c3_i64_2 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %13 = llvm.load %3 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64_3 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %13, %c3_i64_3 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %12 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %17 = llvm.getelementptr %6[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %19 = llvm.load %3 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_4 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %19, %c3_i64_4 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_5 = arith.constant 3 : i64
    %22 = llvm.load %3 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c3_i64_5 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %22, %c3_i64_5 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %21 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %28 = llvm.load %3 : !llvm.ptr -> i64
    %29 = arith.cmpi ult, %28, %c6_i64 : i64
    scf.if %29 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %28, %c6_i64 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    %30 = call @f64(%arg0, %9, %18, %27) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64 = arith.constant 1 : i64
    %31 = llvm.load %3 : !llvm.ptr -> i64
    %32 = arith.cmpi ult, %31, %c1_i64 : i64
    scf.if %32 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %34 = arith.subi %31, %c1_i64 : i64
      llvm.store %34, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%30 : i32)
  ^bb2(%33: i32):  // pred: ^bb1
    return %33 : i32
  }
  func.func @f69(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_1 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %2, %3 : i64, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %10 : !llvm.ptr -> i64
    %13 = arith.trunci %12 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %14 = llvm.load %3 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c3_i64 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %61 = arith.subi %14, %c3_i64 : i64
      llvm.store %61, %3 : i64, !llvm.ptr
    }
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_2 = arith.constant 3 : i64
    %17 = llvm.load %3 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c3_i64_2 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %61 = arith.subi %17, %c3_i64_2 : i64
      llvm.store %61, %3 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %16 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %6[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %23 = llvm.load %3 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c3_i64_3 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %61 = arith.subi %23, %c3_i64_3 : i64
      llvm.store %61, %3 : i64, !llvm.ptr
    }
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %26 = llvm.load %3 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c3_i64_4 : i64
    scf.if %27 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %61 = arith.subi %26, %c3_i64_4 : i64
      llvm.store %61, %3 : i64, !llvm.ptr
    }
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_5 = arith.constant 3 : i64
    %29 = llvm.load %3 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64_5 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %61 = arith.subi %29, %c3_i64_5 : i64
      llvm.store %61, %3 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %31 = arith.extui %28 : i32 to i64
    %32 = arith.addi %31, %c4_i64 : i64
    %33 = llvm.getelementptr %6[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_6 = arith.constant 3 : i64
    %35 = llvm.load %3 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %c3_i64_6 : i64
    scf.if %36 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %61 = arith.subi %35, %c3_i64_6 : i64
      llvm.store %61, %3 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %37 = arith.extui %34 : i32 to i64
    %38 = arith.addi %37, %c12_i64 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64 = arith.constant 7 : i64
    %41 = llvm.load %3 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c7_i64 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %61 = arith.subi %41, %c7_i64 : i64
      llvm.store %61, %3 : i64, !llvm.ptr
    }
    %43 = arith.cmpi ult, %40, %13 : i32
    cf.cond_br %43, ^bb3, ^bb4
  ^bb2(%44: i32):  // pred: ^bb9
    return %44 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %45 = llvm.getelementptr inbounds %11[%40] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %46 = llvm.load %45 : !llvm.ptr -> !llvm.ptr
    %47 = llvm.ptrtoint %46 : !llvm.ptr to i64
    %c0_i64_7 = arith.constant 0 : i64
    %48 = arith.cmpi eq, %47, %c0_i64_7 : i64
    cf.cond_br %48, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %49 = llvm.getelementptr %46[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %50 = llvm.getelementptr %46[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %51 = llvm.getelementptr %46[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %52 = llvm.load %49 : !llvm.ptr -> !llvm.ptr
    %53 = llvm.load %51 : !llvm.ptr -> !llvm.ptr
    %54 = llvm.ptrtoint %52 : !llvm.ptr to i64
    %c0_i64_8 = arith.constant 0 : i64
    %55 = arith.cmpi eq, %54, %c0_i64_8 : i64
    cf.cond_br %55, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %56 = llvm.load %50 : !llvm.ptr -> i32
    %57 = arith.cmpi ne, %8, %56 : i32
    cf.cond_br %57, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_9 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_9) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %58 = llvm.call %52(%53, %22, %25) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c1_i64 = arith.constant 1 : i64
    %59 = llvm.load %3 : !llvm.ptr -> i64
    %60 = arith.cmpi ult, %59, %c1_i64 : i64
    scf.if %60 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %61 = arith.subi %59, %c1_i64 : i64
      llvm.store %61, %3 : i64, !llvm.ptr
    }
    cf.br ^bb2(%58 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f70(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_12 = arith.constant 1 : i32
    %14 = llvm.alloca %c1_i32_12 x i64 : (i32) -> !llvm.ptr
    llvm.store %13, %14 : i64, !llvm.ptr
    %15 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %20 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    %25 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.load %21 : !llvm.ptr -> i64
    %27 = arith.trunci %26 : i64 to i32
    %28 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.load %28 : !llvm.ptr -> i32
    %30 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %21 : !llvm.ptr -> i64
    %32 = arith.trunci %31 : i64 to i32
    %33 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.load %21 : !llvm.ptr -> i64
    %35 = arith.trunci %34 : i64 to i32
    %36 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %21 : !llvm.ptr -> i64
    %38 = arith.trunci %37 : i64 to i32
    %39 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %40 = llvm.load %21 : !llvm.ptr -> i64
    %41 = arith.trunci %40 : i64 to i32
    %42 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.load %21 : !llvm.ptr -> i64
    %44 = arith.trunci %43 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %45 = llvm.load %14 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c1_i64 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %45, %c1_i64 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i64_13 = arith.constant 1 : i64
    %47 = llvm.load %14 : !llvm.ptr -> i64
    %48 = arith.cmpi ult, %47, %c1_i64_13 : i64
    scf.if %48 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %47, %c1_i64_13 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %49 = llvm.load %14 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c3_i64 : i64
    scf.if %50 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %49, %c3_i64 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_14 = arith.constant 1 : i64
    %52 = llvm.load %14 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c1_i64_14 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %52, %c1_i64_14 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_15 = arith.constant 0 : i32
    %54 = arith.cmpi ne, %51, %c0_i32_15 : i32
    cf.cond_br %54, ^bb4, ^bb5
  ^bb2(%55: i32):  // 7 preds: ^bb24, ^bb34, ^bb45, ^bb51, ^bb76, ^bb98, ^bb101
    return %55 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %c1_i64_16 = arith.constant 1 : i64
    %56 = llvm.load %14 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c1_i64_16 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %56, %c1_i64_16 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i64_17 = arith.constant 1 : i64
    %58 = llvm.load %14 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c1_i64_17 : i64
    scf.if %59 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %58, %c1_i64_17 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c3_i64_18 = arith.constant 3 : i64
    %60 = llvm.load %14 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_18 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %60, %c3_i64_18 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %62 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_19 = arith.constant 1 : i64
    %63 = llvm.load %14 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c1_i64_19 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %63, %c1_i64_19 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c3_i64_20 = arith.constant 3 : i64
    %65 = llvm.load %14 : !llvm.ptr -> i64
    %66 = arith.cmpi ult, %65, %c3_i64_20 : i64
    scf.if %66 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %65, %c3_i64_20 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %67 = arith.andi %62, %c4_i32 : i32
    %c1_i64_21 = arith.constant 1 : i64
    %68 = llvm.load %14 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c1_i64_21 : i64
    scf.if %69 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %68, %c1_i64_21 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_22 = arith.constant 0 : i32
    %70 = arith.cmpi ne, %67, %c0_i32_22 : i32
    cf.cond_br %70, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c1_i64_23 = arith.constant 1 : i64
    %71 = llvm.load %14 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c1_i64_23 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %71, %c1_i64_23 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c43_i32 = arith.constant 43 : i32
    %c1_i64_24 = arith.constant 1 : i64
    %73 = llvm.load %14 : !llvm.ptr -> i64
    %74 = arith.cmpi ult, %73, %c1_i64_24 : i64
    scf.if %74 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %73, %c1_i64_24 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1114112_i32 = arith.constant 1114112 : i32
    %c3_i64_25 = arith.constant 3 : i64
    %75 = llvm.load %14 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c3_i64_25 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %75, %c3_i64_25 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_26 = arith.constant 3 : i64
    %78 = llvm.load %14 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c3_i64_26 : i64
    scf.if %79 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %78, %c3_i64_26 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c28_i64 = arith.constant 28 : i64
    %80 = arith.extui %77 : i32 to i64
    %81 = arith.addi %80, %c28_i64 : i64
    %82 = llvm.getelementptr %17[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %83 = llvm.load volatile %82 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_27 = arith.constant 3 : i64
    %84 = llvm.load %14 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c3_i64_27 : i64
    scf.if %85 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %84, %c3_i64_27 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %83, %7 : i32, !llvm.ptr
    %c1_i64_28 = arith.constant 1 : i64
    %86 = llvm.load %14 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %c1_i64_28 : i64
    scf.if %87 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %86, %c1_i64_28 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_29 = arith.constant 1 : i32
    %c3_i64_30 = arith.constant 3 : i64
    %88 = llvm.load %14 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c3_i64_30 : i64
    scf.if %89 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %88, %c3_i64_30 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %90 = arith.andi %83, %c1_i32_29 : i32
    %c3_i64_31 = arith.constant 3 : i64
    %91 = llvm.load %14 : !llvm.ptr -> i64
    %92 = arith.cmpi ult, %91, %c3_i64_31 : i64
    scf.if %92 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %91, %c3_i64_31 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %90, %1 : i32, !llvm.ptr
    %c1_i64_32 = arith.constant 1 : i64
    %93 = llvm.load %14 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c1_i64_32 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %93, %c1_i64_32 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_33 = arith.constant 0 : i32
    %95 = arith.cmpi ne, %90, %c0_i32_33 : i32
    %96 = arith.select %95, %c43_i32, %c1114112_i32 : i32
    %c3_i64_34 = arith.constant 3 : i64
    %97 = llvm.load %14 : !llvm.ptr -> i64
    %98 = arith.cmpi ult, %97, %c3_i64_34 : i64
    scf.if %98 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %97, %c3_i64_34 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %96, %8 : i32, !llvm.ptr
    %c3_i64_35 = arith.constant 3 : i64
    %99 = llvm.load %14 : !llvm.ptr -> i64
    %100 = arith.cmpi ult, %99, %c3_i64_35 : i64
    scf.if %100 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %99, %c3_i64_35 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %101 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_36 = arith.constant 3 : i64
    %102 = llvm.load %14 : !llvm.ptr -> i64
    %103 = arith.cmpi ult, %102, %c3_i64_36 : i64
    scf.if %103 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %102, %c3_i64_36 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %104 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_37 = arith.constant 3 : i64
    %105 = llvm.load %14 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %c3_i64_37 : i64
    scf.if %106 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %105, %c3_i64_37 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %107 = arith.addi %101, %104 : i32
    %c3_i64_38 = arith.constant 3 : i64
    %108 = llvm.load %14 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %108, %c3_i64_38 : i64
    scf.if %109 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %108, %c3_i64_38 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %107, %6 : i32, !llvm.ptr
    %c1_i64_39 = arith.constant 1 : i64
    %110 = llvm.load %14 : !llvm.ptr -> i64
    %111 = arith.cmpi ult, %110, %c1_i64_39 : i64
    scf.if %111 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %110, %c1_i64_39 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %c3_i64_40 = arith.constant 3 : i64
    %112 = llvm.load %14 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c3_i64_40 : i64
    scf.if %113 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %112, %c3_i64_40 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %114 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_41 = arith.constant 1 : i64
    %115 = llvm.load %14 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c1_i64_41 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %115, %c1_i64_41 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_42 = arith.constant 1 : i32
    %c3_i64_43 = arith.constant 3 : i64
    %117 = llvm.load %14 : !llvm.ptr -> i64
    %118 = arith.cmpi ult, %117, %c3_i64_43 : i64
    scf.if %118 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %117, %c3_i64_43 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %119 = arith.addi %114, %c1_i32_42 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %120 = llvm.load %14 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c3_i64_44 : i64
    scf.if %121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %120, %c3_i64_44 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %119, %6 : i32, !llvm.ptr
    %c3_i64_45 = arith.constant 3 : i64
    %122 = llvm.load %14 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %c3_i64_45 : i64
    scf.if %123 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %122, %c3_i64_45 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %124 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_46 = arith.constant 3 : i64
    %125 = llvm.load %14 : !llvm.ptr -> i64
    %126 = arith.cmpi ult, %125, %c3_i64_46 : i64
    scf.if %126 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %125, %c3_i64_46 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c28_i64_47 = arith.constant 28 : i64
    %127 = arith.extui %124 : i32 to i64
    %128 = arith.addi %127, %c28_i64_47 : i64
    %129 = llvm.getelementptr %17[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_48 = arith.constant 3 : i64
    %131 = llvm.load %14 : !llvm.ptr -> i64
    %132 = arith.cmpi ult, %131, %c3_i64_48 : i64
    scf.if %132 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %131, %c3_i64_48 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %130, %7 : i32, !llvm.ptr
    %c1_i64_49 = arith.constant 1 : i64
    %133 = llvm.load %14 : !llvm.ptr -> i64
    %134 = arith.cmpi ult, %133, %c1_i64_49 : i64
    scf.if %134 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %133, %c1_i64_49 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c45_i32 = arith.constant 45 : i32
    %c3_i64_50 = arith.constant 3 : i64
    %135 = llvm.load %14 : !llvm.ptr -> i64
    %136 = arith.cmpi ult, %135, %c3_i64_50 : i64
    scf.if %136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %135, %c3_i64_50 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c45_i32, %8 : i32, !llvm.ptr
    %c1_i64_51 = arith.constant 1 : i64
    %137 = llvm.load %14 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c1_i64_51 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %137, %c1_i64_51 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb8, ^bb9
    %c1_i64_52 = arith.constant 1 : i64
    %139 = llvm.load %14 : !llvm.ptr -> i64
    %140 = arith.cmpi ult, %139, %c1_i64_52 : i64
    scf.if %140 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %139, %c1_i64_52 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i64_53 = arith.constant 1 : i64
    %141 = llvm.load %14 : !llvm.ptr -> i64
    %142 = arith.cmpi ult, %141, %c1_i64_53 : i64
    scf.if %142 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %141, %c1_i64_53 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c3_i64_54 = arith.constant 3 : i64
    %143 = llvm.load %14 : !llvm.ptr -> i64
    %144 = arith.cmpi ult, %143, %c3_i64_54 : i64
    scf.if %144 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %143, %c3_i64_54 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %145 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_55 = arith.constant 3 : i64
    %146 = llvm.load %14 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c3_i64_55 : i64
    scf.if %147 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %146, %c3_i64_55 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %148 = arith.extui %145 : i32 to i64
    %149 = arith.addi %148, %c0_i64 : i64
    %150 = llvm.getelementptr %17[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i64_56 = arith.constant 1 : i64
    %152 = llvm.load %14 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c1_i64_56 : i64
    scf.if %153 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %152, %c1_i64_56 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_57 = arith.constant 0 : i32
    %154 = arith.cmpi ne, %151, %c0_i32_57 : i32
    cf.cond_br %154, ^bb25, ^bb26
  ^bb7:  // pred: ^bb3
    %c1_i64_58 = arith.constant 1 : i64
    %155 = llvm.load %14 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %c1_i64_58 : i64
    scf.if %156 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %155, %c1_i64_58 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i64_59 = arith.constant 1 : i64
    %157 = llvm.load %14 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c1_i64_59 : i64
    scf.if %158 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %157, %c1_i64_59 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c3_i64_60 = arith.constant 3 : i64
    %159 = llvm.load %14 : !llvm.ptr -> i64
    %160 = arith.cmpi ult, %159, %c3_i64_60 : i64
    scf.if %160 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %159, %c3_i64_60 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %161 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_61 = arith.constant 1 : i64
    %162 = llvm.load %14 : !llvm.ptr -> i64
    %163 = arith.cmpi ult, %162, %c1_i64_61 : i64
    scf.if %163 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %162, %c1_i64_61 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_62 = arith.constant 3 : i64
    %164 = llvm.load %14 : !llvm.ptr -> i64
    %165 = arith.cmpi ult, %164, %c3_i64_62 : i64
    scf.if %165 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %164, %c3_i64_62 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %166 = arith.cmpi ult, %161, %c16_i32 : i32
    %167 = arith.extui %166 : i1 to i32
    %c1_i64_63 = arith.constant 1 : i64
    %168 = llvm.load %14 : !llvm.ptr -> i64
    %169 = arith.cmpi ult, %168, %c1_i64_63 : i64
    scf.if %169 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %168, %c1_i64_63 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_64 = arith.constant 0 : i32
    %170 = arith.cmpi ne, %167, %c0_i32_64 : i32
    cf.cond_br %170, ^bb10, ^bb11
  ^bb8:  // pred: ^bb3
    %c1_i64_65 = arith.constant 1 : i64
    %171 = llvm.load %14 : !llvm.ptr -> i64
    %172 = arith.cmpi ult, %171, %c1_i64_65 : i64
    scf.if %172 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %171, %c1_i64_65 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_66 = arith.constant 0 : i32
    %c3_i64_67 = arith.constant 3 : i64
    %173 = llvm.load %14 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c3_i64_67 : i64
    scf.if %174 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %173, %c3_i64_67 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_66, %2 : i32, !llvm.ptr
    %c1_i64_68 = arith.constant 1 : i64
    %175 = llvm.load %14 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c1_i64_68 : i64
    scf.if %176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %175, %c1_i64_68 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb6
  ^bb9:  // 4 preds: ^bb11, ^bb13, ^bb14, ^bb21
    %c3_i64_69 = arith.constant 3 : i64
    %177 = llvm.load %14 : !llvm.ptr -> i64
    %178 = arith.cmpi ult, %177, %c3_i64_69 : i64
    scf.if %178 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %177, %c3_i64_69 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %179 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_70 = arith.constant 3 : i64
    %180 = llvm.load %14 : !llvm.ptr -> i64
    %181 = arith.cmpi ult, %180, %c3_i64_70 : i64
    scf.if %181 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %180, %c3_i64_70 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %182 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_71 = arith.constant 3 : i64
    %183 = llvm.load %14 : !llvm.ptr -> i64
    %184 = arith.cmpi ult, %183, %c3_i64_71 : i64
    scf.if %184 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %183, %c3_i64_71 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %185 = arith.addi %179, %182 : i32
    %c3_i64_72 = arith.constant 3 : i64
    %186 = llvm.load %14 : !llvm.ptr -> i64
    %187 = arith.cmpi ult, %186, %c3_i64_72 : i64
    scf.if %187 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %186, %c3_i64_72 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %185, %6 : i32, !llvm.ptr
    %c1_i64_73 = arith.constant 1 : i64
    %188 = llvm.load %14 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c1_i64_73 : i64
    scf.if %189 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %188, %c1_i64_73 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb6
  ^bb10:  // pred: ^bb7
    %c1_i64_74 = arith.constant 1 : i64
    %190 = llvm.load %14 : !llvm.ptr -> i64
    %191 = arith.cmpi ult, %190, %c1_i64_74 : i64
    scf.if %191 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %190, %c1_i64_74 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c3_i64_75 = arith.constant 3 : i64
    %192 = llvm.load %14 : !llvm.ptr -> i64
    %193 = arith.cmpi ult, %192, %c3_i64_75 : i64
    scf.if %193 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %192, %c3_i64_75 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %194 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_76 = arith.constant 1 : i64
    %195 = llvm.load %14 : !llvm.ptr -> i64
    %196 = arith.cmpi ult, %195, %c1_i64_76 : i64
    scf.if %196 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %195, %c1_i64_76 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_77 = arith.constant 0 : i32
    %197 = arith.cmpi ne, %194, %c0_i32_77 : i32
    cf.cond_br %197, ^bb12, ^bb13
  ^bb11:  // pred: ^bb7
    %c3_i64_78 = arith.constant 3 : i64
    %198 = llvm.load %14 : !llvm.ptr -> i64
    %199 = arith.cmpi ult, %198, %c3_i64_78 : i64
    scf.if %199 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %198, %c3_i64_78 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %200 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_79 = arith.constant 3 : i64
    %201 = llvm.load %14 : !llvm.ptr -> i64
    %202 = arith.cmpi ult, %201, %c3_i64_79 : i64
    scf.if %202 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %201, %c3_i64_79 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %203 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %204 = llvm.load %14 : !llvm.ptr -> i64
    %205 = arith.cmpi ult, %204, %c6_i64 : i64
    scf.if %205 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %204, %c6_i64 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %206 = call @f71(%arg0, %200, %203) : (!llvm.ptr, i32, i32) -> i32
    %c3_i64_80 = arith.constant 3 : i64
    %207 = llvm.load %14 : !llvm.ptr -> i64
    %208 = arith.cmpi ult, %207, %c3_i64_80 : i64
    scf.if %208 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %207, %c3_i64_80 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %206, %1 : i32, !llvm.ptr
    %c1_i64_81 = arith.constant 1 : i64
    %209 = llvm.load %14 : !llvm.ptr -> i64
    %210 = arith.cmpi ult, %209, %c1_i64_81 : i64
    scf.if %210 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %209, %c1_i64_81 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb12:  // pred: ^bb10
    %c3_i64_82 = arith.constant 3 : i64
    %211 = llvm.load %14 : !llvm.ptr -> i64
    %212 = arith.cmpi ult, %211, %c3_i64_82 : i64
    scf.if %212 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %211, %c3_i64_82 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %213 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_83 = arith.constant 1 : i64
    %214 = llvm.load %14 : !llvm.ptr -> i64
    %215 = arith.cmpi ult, %214, %c1_i64_83 : i64
    scf.if %215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %214, %c1_i64_83 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c3_i32 = arith.constant 3 : i32
    %c3_i64_84 = arith.constant 3 : i64
    %216 = llvm.load %14 : !llvm.ptr -> i64
    %217 = arith.cmpi ult, %216, %c3_i64_84 : i64
    scf.if %217 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %216, %c3_i64_84 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %218 = arith.andi %213, %c3_i32 : i32
    %c3_i64_85 = arith.constant 3 : i64
    %219 = llvm.load %14 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c3_i64_85 : i64
    scf.if %220 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %219, %c3_i64_85 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %218, %9 : i32, !llvm.ptr
    %c1_i64_86 = arith.constant 1 : i64
    %221 = llvm.load %14 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c1_i64_86 : i64
    scf.if %222 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %221, %c1_i64_86 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i64_87 = arith.constant 1 : i64
    %223 = llvm.load %14 : !llvm.ptr -> i64
    %224 = arith.cmpi ult, %223, %c1_i64_87 : i64
    scf.if %224 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %223, %c1_i64_87 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c3_i64_88 = arith.constant 3 : i64
    %225 = llvm.load %14 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c3_i64_88 : i64
    scf.if %226 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %225, %c3_i64_88 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %227 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_89 = arith.constant 1 : i64
    %228 = llvm.load %14 : !llvm.ptr -> i64
    %229 = arith.cmpi ult, %228, %c1_i64_89 : i64
    scf.if %229 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %228, %c1_i64_89 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c4_i32_90 = arith.constant 4 : i32
    %c3_i64_91 = arith.constant 3 : i64
    %230 = llvm.load %14 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c3_i64_91 : i64
    scf.if %231 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %230, %c3_i64_91 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %232 = arith.cmpi uge, %227, %c4_i32_90 : i32
    %233 = arith.extui %232 : i1 to i32
    %c1_i64_92 = arith.constant 1 : i64
    %234 = llvm.load %14 : !llvm.ptr -> i64
    %235 = arith.cmpi ult, %234, %c1_i64_92 : i64
    scf.if %235 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %234, %c1_i64_92 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_93 = arith.constant 0 : i32
    %236 = arith.cmpi ne, %233, %c0_i32_93 : i32
    cf.cond_br %236, ^bb15, ^bb16
  ^bb13:  // pred: ^bb10
    %c1_i64_94 = arith.constant 1 : i64
    %237 = llvm.load %14 : !llvm.ptr -> i64
    %238 = arith.cmpi ult, %237, %c1_i64_94 : i64
    scf.if %238 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %237, %c1_i64_94 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_95 = arith.constant 0 : i32
    %c3_i64_96 = arith.constant 3 : i64
    %239 = llvm.load %14 : !llvm.ptr -> i64
    %240 = arith.cmpi ult, %239, %c3_i64_96 : i64
    scf.if %240 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %239, %c3_i64_96 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_95, %1 : i32, !llvm.ptr
    %c1_i64_97 = arith.constant 1 : i64
    %241 = llvm.load %14 : !llvm.ptr -> i64
    %242 = arith.cmpi ult, %241, %c1_i64_97 : i64
    scf.if %242 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %241, %c1_i64_97 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb14:  // 2 preds: ^bb16, ^bb17
    %c3_i64_98 = arith.constant 3 : i64
    %243 = llvm.load %14 : !llvm.ptr -> i64
    %244 = arith.cmpi ult, %243, %c3_i64_98 : i64
    scf.if %244 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %243, %c3_i64_98 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %245 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_99 = arith.constant 3 : i64
    %246 = llvm.load %14 : !llvm.ptr -> i64
    %247 = arith.cmpi ult, %246, %c3_i64_99 : i64
    scf.if %247 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %246, %c3_i64_99 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_100 = arith.constant 0 : i32
    %248 = arith.cmpi eq, %245, %c0_i32_100 : i32
    %249 = arith.extui %248 : i1 to i32
    %c1_i64_101 = arith.constant 1 : i64
    %250 = llvm.load %14 : !llvm.ptr -> i64
    %251 = arith.cmpi ult, %250, %c1_i64_101 : i64
    scf.if %251 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %250, %c1_i64_101 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_102 = arith.constant 0 : i32
    %252 = arith.cmpi ne, %249, %c0_i32_102 : i32
    cf.cond_br %252, ^bb9, ^bb20
  ^bb15:  // pred: ^bb12
    %c3_i64_103 = arith.constant 3 : i64
    %253 = llvm.load %14 : !llvm.ptr -> i64
    %254 = arith.cmpi ult, %253, %c3_i64_103 : i64
    scf.if %254 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %253, %c3_i64_103 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %255 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_104 = arith.constant 1 : i64
    %256 = llvm.load %14 : !llvm.ptr -> i64
    %257 = arith.cmpi ult, %256, %c1_i64_104 : i64
    scf.if %257 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %256, %c1_i64_104 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c12_i32 = arith.constant 12 : i32
    %c3_i64_105 = arith.constant 3 : i64
    %258 = llvm.load %14 : !llvm.ptr -> i64
    %259 = arith.cmpi ult, %258, %c3_i64_105 : i64
    scf.if %259 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %258, %c3_i64_105 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %260 = arith.andi %255, %c12_i32 : i32
    %c3_i64_106 = arith.constant 3 : i64
    %261 = llvm.load %14 : !llvm.ptr -> i64
    %262 = arith.cmpi ult, %261, %c3_i64_106 : i64
    scf.if %262 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %261, %c3_i64_106 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %260, %11 : i32, !llvm.ptr
    %c1_i64_107 = arith.constant 1 : i64
    %263 = llvm.load %14 : !llvm.ptr -> i64
    %264 = arith.cmpi ult, %263, %c1_i64_107 : i64
    scf.if %264 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %263, %c1_i64_107 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_108 = arith.constant 0 : i32
    %c3_i64_109 = arith.constant 3 : i64
    %265 = llvm.load %14 : !llvm.ptr -> i64
    %266 = arith.cmpi ult, %265, %c3_i64_109 : i64
    scf.if %266 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %265, %c3_i64_109 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_108, %1 : i32, !llvm.ptr
    %c1_i64_110 = arith.constant 1 : i64
    %267 = llvm.load %14 : !llvm.ptr -> i64
    %268 = arith.cmpi ult, %267, %c1_i64_110 : i64
    scf.if %268 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %267, %c1_i64_110 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_111 = arith.constant 0 : i32
    %c3_i64_112 = arith.constant 3 : i64
    %269 = llvm.load %14 : !llvm.ptr -> i64
    %270 = arith.cmpi ult, %269, %c3_i64_112 : i64
    scf.if %270 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %269, %c3_i64_112 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_111, %10 : i32, !llvm.ptr
    %c1_i64_113 = arith.constant 1 : i64
    %271 = llvm.load %14 : !llvm.ptr -> i64
    %272 = arith.cmpi ult, %271, %c1_i64_113 : i64
    scf.if %272 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %271, %c1_i64_113 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb18
  ^bb16:  // pred: ^bb12
    %c1_i64_114 = arith.constant 1 : i64
    %273 = llvm.load %14 : !llvm.ptr -> i64
    %274 = arith.cmpi ult, %273, %c1_i64_114 : i64
    scf.if %274 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %273, %c1_i64_114 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_115 = arith.constant 0 : i32
    %c3_i64_116 = arith.constant 3 : i64
    %275 = llvm.load %14 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_116 : i64
    scf.if %276 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %275, %c3_i64_116 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_115, %1 : i32, !llvm.ptr
    %c1_i64_117 = arith.constant 1 : i64
    %277 = llvm.load %14 : !llvm.ptr -> i64
    %278 = arith.cmpi ult, %277, %c1_i64_117 : i64
    scf.if %278 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %277, %c1_i64_117 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_118 = arith.constant 0 : i32
    %c3_i64_119 = arith.constant 3 : i64
    %279 = llvm.load %14 : !llvm.ptr -> i64
    %280 = arith.cmpi ult, %279, %c3_i64_119 : i64
    scf.if %280 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %279, %c3_i64_119 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_118, %10 : i32, !llvm.ptr
    %c1_i64_120 = arith.constant 1 : i64
    %281 = llvm.load %14 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c1_i64_120 : i64
    scf.if %282 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %281, %c1_i64_120 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb14
  ^bb17:  // pred: ^bb19
    %c1_i64_121 = arith.constant 1 : i64
    %283 = llvm.load %14 : !llvm.ptr -> i64
    %284 = arith.cmpi ult, %283, %c1_i64_121 : i64
    scf.if %284 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %283, %c1_i64_121 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb14
  ^bb18:  // 2 preds: ^bb15, ^bb18
    %c3_i64_122 = arith.constant 3 : i64
    %285 = llvm.load %14 : !llvm.ptr -> i64
    %286 = arith.cmpi ult, %285, %c3_i64_122 : i64
    scf.if %286 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %285, %c3_i64_122 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %287 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_123 = arith.constant 3 : i64
    %288 = llvm.load %14 : !llvm.ptr -> i64
    %289 = arith.cmpi ult, %288, %c3_i64_123 : i64
    scf.if %289 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %288, %c3_i64_123 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %290 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_124 = arith.constant 3 : i64
    %291 = llvm.load %14 : !llvm.ptr -> i64
    %292 = arith.cmpi ult, %291, %c3_i64_124 : i64
    scf.if %292 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %291, %c3_i64_124 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %293 = llvm.load %10 : !llvm.ptr -> i32
    %c3_i64_125 = arith.constant 3 : i64
    %294 = llvm.load %14 : !llvm.ptr -> i64
    %295 = arith.cmpi ult, %294, %c3_i64_125 : i64
    scf.if %295 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %294, %c3_i64_125 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %296 = arith.addi %290, %293 : i32
    %c3_i64_126 = arith.constant 3 : i64
    %297 = llvm.load %14 : !llvm.ptr -> i64
    %298 = arith.cmpi ult, %297, %c3_i64_126 : i64
    scf.if %298 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %297, %c3_i64_126 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %296, %12 : i32, !llvm.ptr
    %c3_i64_127 = arith.constant 3 : i64
    %299 = llvm.load %14 : !llvm.ptr -> i64
    %300 = arith.cmpi ult, %299, %c3_i64_127 : i64
    scf.if %300 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %299, %c3_i64_127 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i64_128 = arith.constant 0 : i64
    %301 = arith.extui %296 : i32 to i64
    %302 = arith.addi %301, %c0_i64_128 : i64
    %303 = llvm.getelementptr %17[%302] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %304 = llvm.load volatile %303 {alignment = 1 : i64} : !llvm.ptr -> i8
    %305 = arith.extsi %304 : i8 to i32
    %c1_i64_129 = arith.constant 1 : i64
    %306 = llvm.load %14 : !llvm.ptr -> i64
    %307 = arith.cmpi ult, %306, %c1_i64_129 : i64
    scf.if %307 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %306, %c1_i64_129 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c-65_i32 = arith.constant -65 : i32
    %c3_i64_130 = arith.constant 3 : i64
    %308 = llvm.load %14 : !llvm.ptr -> i64
    %309 = arith.cmpi ult, %308, %c3_i64_130 : i64
    scf.if %309 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %308, %c3_i64_130 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %310 = arith.cmpi sgt, %305, %c-65_i32 : i32
    %311 = arith.extui %310 : i1 to i32
    %c3_i64_131 = arith.constant 3 : i64
    %312 = llvm.load %14 : !llvm.ptr -> i64
    %313 = arith.cmpi ult, %312, %c3_i64_131 : i64
    scf.if %313 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %312, %c3_i64_131 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %314 = arith.addi %287, %311 : i32
    %c3_i64_132 = arith.constant 3 : i64
    %315 = llvm.load %14 : !llvm.ptr -> i64
    %316 = arith.cmpi ult, %315, %c3_i64_132 : i64
    scf.if %316 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %315, %c3_i64_132 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %317 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i64_133 = arith.constant 1 : i64
    %318 = llvm.load %14 : !llvm.ptr -> i64
    %319 = arith.cmpi ult, %318, %c1_i64_133 : i64
    scf.if %319 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %318, %c1_i64_133 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_134 = arith.constant 1 : i32
    %c3_i64_135 = arith.constant 3 : i64
    %320 = llvm.load %14 : !llvm.ptr -> i64
    %321 = arith.cmpi ult, %320, %c3_i64_135 : i64
    scf.if %321 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %320, %c3_i64_135 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %322 = arith.addi %317, %c1_i32_134 : i32
    %c3_i64_136 = arith.constant 3 : i64
    %323 = llvm.load %14 : !llvm.ptr -> i64
    %324 = arith.cmpi ult, %323, %c3_i64_136 : i64
    scf.if %324 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %323, %c3_i64_136 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i64_137 = arith.constant 0 : i64
    %325 = arith.extui %322 : i32 to i64
    %326 = arith.addi %325, %c0_i64_137 : i64
    %327 = llvm.getelementptr %17[%326] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %328 = llvm.load volatile %327 {alignment = 1 : i64} : !llvm.ptr -> i8
    %329 = arith.extsi %328 : i8 to i32
    %c1_i64_138 = arith.constant 1 : i64
    %330 = llvm.load %14 : !llvm.ptr -> i64
    %331 = arith.cmpi ult, %330, %c1_i64_138 : i64
    scf.if %331 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %330, %c1_i64_138 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c-65_i32_139 = arith.constant -65 : i32
    %c3_i64_140 = arith.constant 3 : i64
    %332 = llvm.load %14 : !llvm.ptr -> i64
    %333 = arith.cmpi ult, %332, %c3_i64_140 : i64
    scf.if %333 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %332, %c3_i64_140 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %334 = arith.cmpi sgt, %329, %c-65_i32_139 : i32
    %335 = arith.extui %334 : i1 to i32
    %c3_i64_141 = arith.constant 3 : i64
    %336 = llvm.load %14 : !llvm.ptr -> i64
    %337 = arith.cmpi ult, %336, %c3_i64_141 : i64
    scf.if %337 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %336, %c3_i64_141 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %338 = arith.addi %314, %335 : i32
    %c3_i64_142 = arith.constant 3 : i64
    %339 = llvm.load %14 : !llvm.ptr -> i64
    %340 = arith.cmpi ult, %339, %c3_i64_142 : i64
    scf.if %340 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %339, %c3_i64_142 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %341 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i64_143 = arith.constant 1 : i64
    %342 = llvm.load %14 : !llvm.ptr -> i64
    %343 = arith.cmpi ult, %342, %c1_i64_143 : i64
    scf.if %343 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %342, %c1_i64_143 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c2_i32 = arith.constant 2 : i32
    %c3_i64_144 = arith.constant 3 : i64
    %344 = llvm.load %14 : !llvm.ptr -> i64
    %345 = arith.cmpi ult, %344, %c3_i64_144 : i64
    scf.if %345 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %344, %c3_i64_144 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %346 = arith.addi %341, %c2_i32 : i32
    %c3_i64_145 = arith.constant 3 : i64
    %347 = llvm.load %14 : !llvm.ptr -> i64
    %348 = arith.cmpi ult, %347, %c3_i64_145 : i64
    scf.if %348 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %347, %c3_i64_145 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i64_146 = arith.constant 0 : i64
    %349 = arith.extui %346 : i32 to i64
    %350 = arith.addi %349, %c0_i64_146 : i64
    %351 = llvm.getelementptr %17[%350] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %352 = llvm.load volatile %351 {alignment = 1 : i64} : !llvm.ptr -> i8
    %353 = arith.extsi %352 : i8 to i32
    %c1_i64_147 = arith.constant 1 : i64
    %354 = llvm.load %14 : !llvm.ptr -> i64
    %355 = arith.cmpi ult, %354, %c1_i64_147 : i64
    scf.if %355 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %354, %c1_i64_147 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c-65_i32_148 = arith.constant -65 : i32
    %c3_i64_149 = arith.constant 3 : i64
    %356 = llvm.load %14 : !llvm.ptr -> i64
    %357 = arith.cmpi ult, %356, %c3_i64_149 : i64
    scf.if %357 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %356, %c3_i64_149 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %358 = arith.cmpi sgt, %353, %c-65_i32_148 : i32
    %359 = arith.extui %358 : i1 to i32
    %c3_i64_150 = arith.constant 3 : i64
    %360 = llvm.load %14 : !llvm.ptr -> i64
    %361 = arith.cmpi ult, %360, %c3_i64_150 : i64
    scf.if %361 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %360, %c3_i64_150 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %362 = arith.addi %338, %359 : i32
    %c3_i64_151 = arith.constant 3 : i64
    %363 = llvm.load %14 : !llvm.ptr -> i64
    %364 = arith.cmpi ult, %363, %c3_i64_151 : i64
    scf.if %364 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %363, %c3_i64_151 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %365 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i64_152 = arith.constant 1 : i64
    %366 = llvm.load %14 : !llvm.ptr -> i64
    %367 = arith.cmpi ult, %366, %c1_i64_152 : i64
    scf.if %367 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %366, %c1_i64_152 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c3_i32_153 = arith.constant 3 : i32
    %c3_i64_154 = arith.constant 3 : i64
    %368 = llvm.load %14 : !llvm.ptr -> i64
    %369 = arith.cmpi ult, %368, %c3_i64_154 : i64
    scf.if %369 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %368, %c3_i64_154 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %370 = arith.addi %365, %c3_i32_153 : i32
    %c3_i64_155 = arith.constant 3 : i64
    %371 = llvm.load %14 : !llvm.ptr -> i64
    %372 = arith.cmpi ult, %371, %c3_i64_155 : i64
    scf.if %372 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %371, %c3_i64_155 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i64_156 = arith.constant 0 : i64
    %373 = arith.extui %370 : i32 to i64
    %374 = arith.addi %373, %c0_i64_156 : i64
    %375 = llvm.getelementptr %17[%374] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %376 = llvm.load volatile %375 {alignment = 1 : i64} : !llvm.ptr -> i8
    %377 = arith.extsi %376 : i8 to i32
    %c1_i64_157 = arith.constant 1 : i64
    %378 = llvm.load %14 : !llvm.ptr -> i64
    %379 = arith.cmpi ult, %378, %c1_i64_157 : i64
    scf.if %379 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %378, %c1_i64_157 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c-65_i32_158 = arith.constant -65 : i32
    %c3_i64_159 = arith.constant 3 : i64
    %380 = llvm.load %14 : !llvm.ptr -> i64
    %381 = arith.cmpi ult, %380, %c3_i64_159 : i64
    scf.if %381 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %380, %c3_i64_159 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %382 = arith.cmpi sgt, %377, %c-65_i32_158 : i32
    %383 = arith.extui %382 : i1 to i32
    %c3_i64_160 = arith.constant 3 : i64
    %384 = llvm.load %14 : !llvm.ptr -> i64
    %385 = arith.cmpi ult, %384, %c3_i64_160 : i64
    scf.if %385 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %384, %c3_i64_160 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %386 = arith.addi %362, %383 : i32
    %c3_i64_161 = arith.constant 3 : i64
    %387 = llvm.load %14 : !llvm.ptr -> i64
    %388 = arith.cmpi ult, %387, %c3_i64_161 : i64
    scf.if %388 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %387, %c3_i64_161 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %386, %1 : i32, !llvm.ptr
    %c3_i64_162 = arith.constant 3 : i64
    %389 = llvm.load %14 : !llvm.ptr -> i64
    %390 = arith.cmpi ult, %389, %c3_i64_162 : i64
    scf.if %390 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %389, %c3_i64_162 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %391 = llvm.load %11 : !llvm.ptr -> i32
    %c3_i64_163 = arith.constant 3 : i64
    %392 = llvm.load %14 : !llvm.ptr -> i64
    %393 = arith.cmpi ult, %392, %c3_i64_163 : i64
    scf.if %393 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %392, %c3_i64_163 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %394 = llvm.load %10 : !llvm.ptr -> i32
    %c1_i64_164 = arith.constant 1 : i64
    %395 = llvm.load %14 : !llvm.ptr -> i64
    %396 = arith.cmpi ult, %395, %c1_i64_164 : i64
    scf.if %396 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %395, %c1_i64_164 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c4_i32_165 = arith.constant 4 : i32
    %c3_i64_166 = arith.constant 3 : i64
    %397 = llvm.load %14 : !llvm.ptr -> i64
    %398 = arith.cmpi ult, %397, %c3_i64_166 : i64
    scf.if %398 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %397, %c3_i64_166 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %399 = arith.addi %394, %c4_i32_165 : i32
    %c3_i64_167 = arith.constant 3 : i64
    %400 = llvm.load %14 : !llvm.ptr -> i64
    %401 = arith.cmpi ult, %400, %c3_i64_167 : i64
    scf.if %401 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %400, %c3_i64_167 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %399, %10 : i32, !llvm.ptr
    %c3_i64_168 = arith.constant 3 : i64
    %402 = llvm.load %14 : !llvm.ptr -> i64
    %403 = arith.cmpi ult, %402, %c3_i64_168 : i64
    scf.if %403 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %402, %c3_i64_168 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %404 = arith.cmpi eq, %391, %399 : i32
    %405 = arith.extui %404 : i1 to i32
    %c0_i32_169 = arith.constant 0 : i32
    %406 = arith.cmpi eq, %405, %c0_i32_169 : i32
    %407 = arith.extui %406 : i1 to i32
    %c1_i64_170 = arith.constant 1 : i64
    %408 = llvm.load %14 : !llvm.ptr -> i64
    %409 = arith.cmpi ult, %408, %c1_i64_170 : i64
    scf.if %409 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %408, %c1_i64_170 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_171 = arith.constant 0 : i32
    %410 = arith.cmpi ne, %407, %c0_i32_171 : i32
    cf.cond_br %410, ^bb18, ^bb19
  ^bb19:  // pred: ^bb18
    %c1_i64_172 = arith.constant 1 : i64
    %411 = llvm.load %14 : !llvm.ptr -> i64
    %412 = arith.cmpi ult, %411, %c1_i64_172 : i64
    scf.if %412 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %411, %c1_i64_172 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb17
  ^bb20:  // pred: ^bb14
    %c3_i64_173 = arith.constant 3 : i64
    %413 = llvm.load %14 : !llvm.ptr -> i64
    %414 = arith.cmpi ult, %413, %c3_i64_173 : i64
    scf.if %414 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %413, %c3_i64_173 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %415 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_174 = arith.constant 3 : i64
    %416 = llvm.load %14 : !llvm.ptr -> i64
    %417 = arith.cmpi ult, %416, %c3_i64_174 : i64
    scf.if %417 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %416, %c3_i64_174 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %418 = llvm.load %10 : !llvm.ptr -> i32
    %c3_i64_175 = arith.constant 3 : i64
    %419 = llvm.load %14 : !llvm.ptr -> i64
    %420 = arith.cmpi ult, %419, %c3_i64_175 : i64
    scf.if %420 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %419, %c3_i64_175 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %421 = arith.addi %415, %418 : i32
    %c3_i64_176 = arith.constant 3 : i64
    %422 = llvm.load %14 : !llvm.ptr -> i64
    %423 = arith.cmpi ult, %422, %c3_i64_176 : i64
    scf.if %423 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %422, %c3_i64_176 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %421, %12 : i32, !llvm.ptr
    %c1_i64_177 = arith.constant 1 : i64
    %424 = llvm.load %14 : !llvm.ptr -> i64
    %425 = arith.cmpi ult, %424, %c1_i64_177 : i64
    scf.if %425 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %424, %c1_i64_177 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb22
  ^bb21:  // pred: ^bb23
    %c1_i64_178 = arith.constant 1 : i64
    %426 = llvm.load %14 : !llvm.ptr -> i64
    %427 = arith.cmpi ult, %426, %c1_i64_178 : i64
    scf.if %427 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %426, %c1_i64_178 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb22:  // 2 preds: ^bb20, ^bb22
    %c3_i64_179 = arith.constant 3 : i64
    %428 = llvm.load %14 : !llvm.ptr -> i64
    %429 = arith.cmpi ult, %428, %c3_i64_179 : i64
    scf.if %429 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %428, %c3_i64_179 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %430 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_180 = arith.constant 3 : i64
    %431 = llvm.load %14 : !llvm.ptr -> i64
    %432 = arith.cmpi ult, %431, %c3_i64_180 : i64
    scf.if %432 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %431, %c3_i64_180 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %433 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i64_181 = arith.constant 3 : i64
    %434 = llvm.load %14 : !llvm.ptr -> i64
    %435 = arith.cmpi ult, %434, %c3_i64_181 : i64
    scf.if %435 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %434, %c3_i64_181 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i64_182 = arith.constant 0 : i64
    %436 = arith.extui %433 : i32 to i64
    %437 = arith.addi %436, %c0_i64_182 : i64
    %438 = llvm.getelementptr %17[%437] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %439 = llvm.load volatile %438 {alignment = 1 : i64} : !llvm.ptr -> i8
    %440 = arith.extsi %439 : i8 to i32
    %c1_i64_183 = arith.constant 1 : i64
    %441 = llvm.load %14 : !llvm.ptr -> i64
    %442 = arith.cmpi ult, %441, %c1_i64_183 : i64
    scf.if %442 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %441, %c1_i64_183 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c-65_i32_184 = arith.constant -65 : i32
    %c3_i64_185 = arith.constant 3 : i64
    %443 = llvm.load %14 : !llvm.ptr -> i64
    %444 = arith.cmpi ult, %443, %c3_i64_185 : i64
    scf.if %444 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %443, %c3_i64_185 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %445 = arith.cmpi sgt, %440, %c-65_i32_184 : i32
    %446 = arith.extui %445 : i1 to i32
    %c3_i64_186 = arith.constant 3 : i64
    %447 = llvm.load %14 : !llvm.ptr -> i64
    %448 = arith.cmpi ult, %447, %c3_i64_186 : i64
    scf.if %448 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %447, %c3_i64_186 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %449 = arith.addi %430, %446 : i32
    %c3_i64_187 = arith.constant 3 : i64
    %450 = llvm.load %14 : !llvm.ptr -> i64
    %451 = arith.cmpi ult, %450, %c3_i64_187 : i64
    scf.if %451 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %450, %c3_i64_187 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %449, %1 : i32, !llvm.ptr
    %c3_i64_188 = arith.constant 3 : i64
    %452 = llvm.load %14 : !llvm.ptr -> i64
    %453 = arith.cmpi ult, %452, %c3_i64_188 : i64
    scf.if %453 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %452, %c3_i64_188 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %454 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i64_189 = arith.constant 1 : i64
    %455 = llvm.load %14 : !llvm.ptr -> i64
    %456 = arith.cmpi ult, %455, %c1_i64_189 : i64
    scf.if %456 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %455, %c1_i64_189 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_190 = arith.constant 1 : i32
    %c3_i64_191 = arith.constant 3 : i64
    %457 = llvm.load %14 : !llvm.ptr -> i64
    %458 = arith.cmpi ult, %457, %c3_i64_191 : i64
    scf.if %458 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %457, %c3_i64_191 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %459 = arith.addi %454, %c1_i32_190 : i32
    %c3_i64_192 = arith.constant 3 : i64
    %460 = llvm.load %14 : !llvm.ptr -> i64
    %461 = arith.cmpi ult, %460, %c3_i64_192 : i64
    scf.if %461 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %460, %c3_i64_192 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %459, %12 : i32, !llvm.ptr
    %c3_i64_193 = arith.constant 3 : i64
    %462 = llvm.load %14 : !llvm.ptr -> i64
    %463 = arith.cmpi ult, %462, %c3_i64_193 : i64
    scf.if %463 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %462, %c3_i64_193 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %464 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64_194 = arith.constant 1 : i64
    %465 = llvm.load %14 : !llvm.ptr -> i64
    %466 = arith.cmpi ult, %465, %c1_i64_194 : i64
    scf.if %466 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %465, %c1_i64_194 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_195 = arith.constant 3 : i64
    %467 = llvm.load %14 : !llvm.ptr -> i64
    %468 = arith.cmpi ult, %467, %c3_i64_195 : i64
    scf.if %468 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %467, %c3_i64_195 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %469 = arith.addi %464, %c-1_i32 : i32
    %c3_i64_196 = arith.constant 3 : i64
    %470 = llvm.load %14 : !llvm.ptr -> i64
    %471 = arith.cmpi ult, %470, %c3_i64_196 : i64
    scf.if %471 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %470, %c3_i64_196 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %469, %9 : i32, !llvm.ptr
    %c1_i64_197 = arith.constant 1 : i64
    %472 = llvm.load %14 : !llvm.ptr -> i64
    %473 = arith.cmpi ult, %472, %c1_i64_197 : i64
    scf.if %473 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %472, %c1_i64_197 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_198 = arith.constant 0 : i32
    %474 = arith.cmpi ne, %469, %c0_i32_198 : i32
    cf.cond_br %474, ^bb22, ^bb23
  ^bb23:  // pred: ^bb22
    %c1_i64_199 = arith.constant 1 : i64
    %475 = llvm.load %14 : !llvm.ptr -> i64
    %476 = arith.cmpi ult, %475, %c1_i64_199 : i64
    scf.if %476 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %475, %c1_i64_199 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb21
  ^bb24:  // 7 preds: ^bb26, ^bb37, ^bb48, ^bb69, ^bb71, ^bb75, ^bb95
    %c3_i64_200 = arith.constant 3 : i64
    %477 = llvm.load %14 : !llvm.ptr -> i64
    %478 = arith.cmpi ult, %477, %c3_i64_200 : i64
    scf.if %478 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %477, %c3_i64_200 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %479 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_201 = arith.constant 1 : i64
    %480 = llvm.load %14 : !llvm.ptr -> i64
    %481 = arith.cmpi ult, %480, %c1_i64_201 : i64
    scf.if %481 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %480, %c1_i64_201 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb2(%479 : i32)
  ^bb25:  // pred: ^bb6
    %c1_i64_202 = arith.constant 1 : i64
    %482 = llvm.load %14 : !llvm.ptr -> i64
    %483 = arith.cmpi ult, %482, %c1_i64_202 : i64
    scf.if %483 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %482, %c1_i64_202 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c3_i64_203 = arith.constant 3 : i64
    %484 = llvm.load %14 : !llvm.ptr -> i64
    %485 = arith.cmpi ult, %484, %c3_i64_203 : i64
    scf.if %485 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %484, %c3_i64_203 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %486 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_204 = arith.constant 3 : i64
    %487 = llvm.load %14 : !llvm.ptr -> i64
    %488 = arith.cmpi ult, %487, %c3_i64_204 : i64
    scf.if %488 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %487, %c3_i64_204 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %489 = arith.extui %486 : i32 to i64
    %490 = arith.addi %489, %c4_i64 : i64
    %491 = llvm.getelementptr %17[%490] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %492 = llvm.load volatile %491 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_205 = arith.constant 3 : i64
    %493 = llvm.load %14 : !llvm.ptr -> i64
    %494 = arith.cmpi ult, %493, %c3_i64_205 : i64
    scf.if %494 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %493, %c3_i64_205 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %492, %9 : i32, !llvm.ptr
    %c3_i64_206 = arith.constant 3 : i64
    %495 = llvm.load %14 : !llvm.ptr -> i64
    %496 = arith.cmpi ult, %495, %c3_i64_206 : i64
    scf.if %496 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %495, %c3_i64_206 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %497 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_207 = arith.constant 3 : i64
    %498 = llvm.load %14 : !llvm.ptr -> i64
    %499 = arith.cmpi ult, %498, %c3_i64_207 : i64
    scf.if %499 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %498, %c3_i64_207 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %500 = arith.cmpi ugt, %492, %497 : i32
    %501 = arith.extui %500 : i1 to i32
    %c1_i64_208 = arith.constant 1 : i64
    %502 = llvm.load %14 : !llvm.ptr -> i64
    %503 = arith.cmpi ult, %502, %c1_i64_208 : i64
    scf.if %503 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %502, %c1_i64_208 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_209 = arith.constant 0 : i32
    %504 = arith.cmpi ne, %501, %c0_i32_209 : i32
    cf.cond_br %504, ^bb36, ^bb37
  ^bb26:  // pred: ^bb6
    %c1_i64_210 = arith.constant 1 : i64
    %505 = llvm.load %14 : !llvm.ptr -> i64
    %506 = arith.cmpi ult, %505, %c1_i64_210 : i64
    scf.if %506 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %505, %c1_i64_210 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_211 = arith.constant 1 : i32
    %c3_i64_212 = arith.constant 3 : i64
    %507 = llvm.load %14 : !llvm.ptr -> i64
    %508 = arith.cmpi ult, %507, %c3_i64_212 : i64
    scf.if %508 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %507, %c3_i64_212 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_211, %1 : i32, !llvm.ptr
    %c3_i64_213 = arith.constant 3 : i64
    %509 = llvm.load %14 : !llvm.ptr -> i64
    %510 = arith.cmpi ult, %509, %c3_i64_213 : i64
    scf.if %510 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %509, %c3_i64_213 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %511 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_214 = arith.constant 3 : i64
    %512 = llvm.load %14 : !llvm.ptr -> i64
    %513 = arith.cmpi ult, %512, %c3_i64_214 : i64
    scf.if %513 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %512, %c3_i64_214 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %514 = arith.extui %511 : i32 to i64
    %515 = arith.addi %514, %c20_i64 : i64
    %516 = llvm.getelementptr %17[%515] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %517 = llvm.load volatile %516 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_215 = arith.constant 3 : i64
    %518 = llvm.load %14 : !llvm.ptr -> i64
    %519 = arith.cmpi ult, %518, %c3_i64_215 : i64
    scf.if %519 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %518, %c3_i64_215 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %517, %12 : i32, !llvm.ptr
    %c3_i64_216 = arith.constant 3 : i64
    %520 = llvm.load %14 : !llvm.ptr -> i64
    %521 = arith.cmpi ult, %520, %c3_i64_216 : i64
    scf.if %521 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %520, %c3_i64_216 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %522 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_217 = arith.constant 3 : i64
    %523 = llvm.load %14 : !llvm.ptr -> i64
    %524 = arith.cmpi ult, %523, %c3_i64_217 : i64
    scf.if %524 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %523, %c3_i64_217 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %525 = arith.extui %522 : i32 to i64
    %526 = arith.addi %525, %c24_i64 : i64
    %527 = llvm.getelementptr %17[%526] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %528 = llvm.load volatile %527 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_218 = arith.constant 3 : i64
    %529 = llvm.load %14 : !llvm.ptr -> i64
    %530 = arith.cmpi ult, %529, %c3_i64_218 : i64
    scf.if %530 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %529, %c3_i64_218 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %528, %10 : i32, !llvm.ptr
    %c3_i64_219 = arith.constant 3 : i64
    %531 = llvm.load %14 : !llvm.ptr -> i64
    %532 = arith.cmpi ult, %531, %c3_i64_219 : i64
    scf.if %532 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %531, %c3_i64_219 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %533 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_220 = arith.constant 3 : i64
    %534 = llvm.load %14 : !llvm.ptr -> i64
    %535 = arith.cmpi ult, %534, %c3_i64_220 : i64
    scf.if %535 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %534, %c3_i64_220 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %536 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_221 = arith.constant 3 : i64
    %537 = llvm.load %14 : !llvm.ptr -> i64
    %538 = arith.cmpi ult, %537, %c3_i64_221 : i64
    scf.if %538 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %537, %c3_i64_221 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %539 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i64_222 = arith.constant 6 : i64
    %540 = llvm.load %14 : !llvm.ptr -> i64
    %541 = arith.cmpi ult, %540, %c6_i64_222 : i64
    scf.if %541 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %540, %c6_i64_222 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %542 = call @f72(%arg0, %517, %528, %533, %536, %539) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c1_i64_223 = arith.constant 1 : i64
    %543 = llvm.load %14 : !llvm.ptr -> i64
    %544 = arith.cmpi ult, %543, %c1_i64_223 : i64
    scf.if %544 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %543, %c1_i64_223 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_224 = arith.constant 0 : i32
    %545 = arith.cmpi ne, %542, %c0_i32_224 : i32
    cf.cond_br %545, ^bb24, ^bb27
  ^bb27:  // pred: ^bb26
    %c3_i64_225 = arith.constant 3 : i64
    %546 = llvm.load %14 : !llvm.ptr -> i64
    %547 = arith.cmpi ult, %546, %c3_i64_225 : i64
    scf.if %547 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %546, %c3_i64_225 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %548 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i64_226 = arith.constant 3 : i64
    %549 = llvm.load %14 : !llvm.ptr -> i64
    %550 = arith.cmpi ult, %549, %c3_i64_226 : i64
    scf.if %550 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %549, %c3_i64_226 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %551 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_227 = arith.constant 3 : i64
    %552 = llvm.load %14 : !llvm.ptr -> i64
    %553 = arith.cmpi ult, %552, %c3_i64_227 : i64
    scf.if %553 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %552, %c3_i64_227 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %554 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_228 = arith.constant 3 : i64
    %555 = llvm.load %14 : !llvm.ptr -> i64
    %556 = arith.cmpi ult, %555, %c3_i64_228 : i64
    scf.if %556 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %555, %c3_i64_228 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %557 = llvm.load %10 : !llvm.ptr -> i32
    %c3_i64_229 = arith.constant 3 : i64
    %558 = llvm.load %14 : !llvm.ptr -> i64
    %559 = arith.cmpi ult, %558, %c3_i64_229 : i64
    scf.if %559 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %558, %c3_i64_229 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %560 = arith.extui %557 : i32 to i64
    %561 = arith.addi %560, %c12_i64 : i64
    %562 = llvm.getelementptr %17[%561] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %563 = llvm.load volatile %562 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64 = arith.constant 7 : i64
    %564 = llvm.load %14 : !llvm.ptr -> i64
    %565 = arith.cmpi ult, %564, %c7_i64 : i64
    scf.if %565 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %564, %c7_i64 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %566 = arith.cmpi ult, %563, %24 : i32
    cf.cond_br %566, ^bb28, ^bb29
  ^bb28:  // 2 preds: ^bb27, ^bb29
    %567 = llvm.getelementptr inbounds %22[%563] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %568 = llvm.load %567 : !llvm.ptr -> !llvm.ptr
    %569 = llvm.ptrtoint %568 : !llvm.ptr to i64
    %c0_i64_230 = arith.constant 0 : i64
    %570 = arith.cmpi eq, %569, %c0_i64_230 : i64
    cf.cond_br %570, ^bb31, ^bb30
  ^bb29:  // pred: ^bb27
    %c3_i32_231 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_231) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %571 = llvm.getelementptr %568[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %572 = llvm.getelementptr %568[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %573 = llvm.getelementptr %568[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %574 = llvm.load %571 : !llvm.ptr -> !llvm.ptr
    %575 = llvm.load %573 : !llvm.ptr -> !llvm.ptr
    %576 = llvm.ptrtoint %574 : !llvm.ptr to i64
    %c0_i64_232 = arith.constant 0 : i64
    %577 = arith.cmpi eq, %576, %c0_i64_232 : i64
    cf.cond_br %577, ^bb33, ^bb32
  ^bb31:  // pred: ^bb28
    %c4_i32_233 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_233) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %578 = llvm.load %572 : !llvm.ptr -> i32
    %579 = arith.cmpi ne, %19, %578 : i32
    cf.cond_br %579, ^bb35, ^bb34
  ^bb33:  // pred: ^bb30
    %c3_i32_234 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_234) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %580 = llvm.call %574(%575, %548, %551, %554) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_235 = arith.constant 1 : i64
    %581 = llvm.load %14 : !llvm.ptr -> i64
    %582 = arith.cmpi ult, %581, %c1_i64_235 : i64
    scf.if %582 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %581, %c1_i64_235 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb2(%580 : i32)
  ^bb35:  // pred: ^bb32
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // pred: ^bb25
    %c1_i64_236 = arith.constant 1 : i64
    %583 = llvm.load %14 : !llvm.ptr -> i64
    %584 = arith.cmpi ult, %583, %c1_i64_236 : i64
    scf.if %584 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %583, %c1_i64_236 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c3_i64_237 = arith.constant 3 : i64
    %585 = llvm.load %14 : !llvm.ptr -> i64
    %586 = arith.cmpi ult, %585, %c3_i64_237 : i64
    scf.if %586 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %585, %c3_i64_237 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %587 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_238 = arith.constant 1 : i64
    %588 = llvm.load %14 : !llvm.ptr -> i64
    %589 = arith.cmpi ult, %588, %c1_i64_238 : i64
    scf.if %589 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %588, %c1_i64_238 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_239 = arith.constant 3 : i64
    %590 = llvm.load %14 : !llvm.ptr -> i64
    %591 = arith.cmpi ult, %590, %c3_i64_239 : i64
    scf.if %591 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %590, %c3_i64_239 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %592 = arith.andi %587, %c8_i32 : i32
    %c3_i64_240 = arith.constant 3 : i64
    %593 = llvm.load %14 : !llvm.ptr -> i64
    %594 = arith.cmpi ult, %593, %c3_i64_240 : i64
    scf.if %594 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %593, %c3_i64_240 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_241 = arith.constant 0 : i32
    %595 = arith.cmpi eq, %592, %c0_i32_241 : i32
    %596 = arith.extui %595 : i1 to i32
    %c1_i64_242 = arith.constant 1 : i64
    %597 = llvm.load %14 : !llvm.ptr -> i64
    %598 = arith.cmpi ult, %597, %c1_i64_242 : i64
    scf.if %598 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %597, %c1_i64_242 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_243 = arith.constant 0 : i32
    %599 = arith.cmpi ne, %596, %c0_i32_243 : i32
    cf.cond_br %599, ^bb47, ^bb48
  ^bb37:  // pred: ^bb25
    %c1_i64_244 = arith.constant 1 : i64
    %600 = llvm.load %14 : !llvm.ptr -> i64
    %601 = arith.cmpi ult, %600, %c1_i64_244 : i64
    scf.if %601 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %600, %c1_i64_244 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_245 = arith.constant 1 : i32
    %c3_i64_246 = arith.constant 3 : i64
    %602 = llvm.load %14 : !llvm.ptr -> i64
    %603 = arith.cmpi ult, %602, %c3_i64_246 : i64
    scf.if %603 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %602, %c3_i64_246 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_245, %1 : i32, !llvm.ptr
    %c3_i64_247 = arith.constant 3 : i64
    %604 = llvm.load %14 : !llvm.ptr -> i64
    %605 = arith.cmpi ult, %604, %c3_i64_247 : i64
    scf.if %605 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %604, %c3_i64_247 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %606 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_248 = arith.constant 3 : i64
    %607 = llvm.load %14 : !llvm.ptr -> i64
    %608 = arith.cmpi ult, %607, %c3_i64_248 : i64
    scf.if %608 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %607, %c3_i64_248 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c20_i64_249 = arith.constant 20 : i64
    %609 = arith.extui %606 : i32 to i64
    %610 = arith.addi %609, %c20_i64_249 : i64
    %611 = llvm.getelementptr %17[%610] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %612 = llvm.load volatile %611 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_250 = arith.constant 3 : i64
    %613 = llvm.load %14 : !llvm.ptr -> i64
    %614 = arith.cmpi ult, %613, %c3_i64_250 : i64
    scf.if %614 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %613, %c3_i64_250 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %612, %12 : i32, !llvm.ptr
    %c3_i64_251 = arith.constant 3 : i64
    %615 = llvm.load %14 : !llvm.ptr -> i64
    %616 = arith.cmpi ult, %615, %c3_i64_251 : i64
    scf.if %616 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %615, %c3_i64_251 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %617 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_252 = arith.constant 3 : i64
    %618 = llvm.load %14 : !llvm.ptr -> i64
    %619 = arith.cmpi ult, %618, %c3_i64_252 : i64
    scf.if %619 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %618, %c3_i64_252 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c24_i64_253 = arith.constant 24 : i64
    %620 = arith.extui %617 : i32 to i64
    %621 = arith.addi %620, %c24_i64_253 : i64
    %622 = llvm.getelementptr %17[%621] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %623 = llvm.load volatile %622 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_254 = arith.constant 3 : i64
    %624 = llvm.load %14 : !llvm.ptr -> i64
    %625 = arith.cmpi ult, %624, %c3_i64_254 : i64
    scf.if %625 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %624, %c3_i64_254 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %623, %10 : i32, !llvm.ptr
    %c3_i64_255 = arith.constant 3 : i64
    %626 = llvm.load %14 : !llvm.ptr -> i64
    %627 = arith.cmpi ult, %626, %c3_i64_255 : i64
    scf.if %627 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %626, %c3_i64_255 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %628 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_256 = arith.constant 3 : i64
    %629 = llvm.load %14 : !llvm.ptr -> i64
    %630 = arith.cmpi ult, %629, %c3_i64_256 : i64
    scf.if %630 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %629, %c3_i64_256 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %631 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_257 = arith.constant 3 : i64
    %632 = llvm.load %14 : !llvm.ptr -> i64
    %633 = arith.cmpi ult, %632, %c3_i64_257 : i64
    scf.if %633 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %632, %c3_i64_257 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %634 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i64_258 = arith.constant 6 : i64
    %635 = llvm.load %14 : !llvm.ptr -> i64
    %636 = arith.cmpi ult, %635, %c6_i64_258 : i64
    scf.if %636 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %635, %c6_i64_258 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %637 = call @f72(%arg0, %612, %623, %628, %631, %634) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c1_i64_259 = arith.constant 1 : i64
    %638 = llvm.load %14 : !llvm.ptr -> i64
    %639 = arith.cmpi ult, %638, %c1_i64_259 : i64
    scf.if %639 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %638, %c1_i64_259 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_260 = arith.constant 0 : i32
    %640 = arith.cmpi ne, %637, %c0_i32_260 : i32
    cf.cond_br %640, ^bb24, ^bb38
  ^bb38:  // pred: ^bb37
    %c3_i64_261 = arith.constant 3 : i64
    %641 = llvm.load %14 : !llvm.ptr -> i64
    %642 = arith.cmpi ult, %641, %c3_i64_261 : i64
    scf.if %642 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %641, %c3_i64_261 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %643 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i64_262 = arith.constant 3 : i64
    %644 = llvm.load %14 : !llvm.ptr -> i64
    %645 = arith.cmpi ult, %644, %c3_i64_262 : i64
    scf.if %645 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %644, %c3_i64_262 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %646 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_263 = arith.constant 3 : i64
    %647 = llvm.load %14 : !llvm.ptr -> i64
    %648 = arith.cmpi ult, %647, %c3_i64_263 : i64
    scf.if %648 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %647, %c3_i64_263 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %649 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_264 = arith.constant 3 : i64
    %650 = llvm.load %14 : !llvm.ptr -> i64
    %651 = arith.cmpi ult, %650, %c3_i64_264 : i64
    scf.if %651 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %650, %c3_i64_264 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %652 = llvm.load %10 : !llvm.ptr -> i32
    %c3_i64_265 = arith.constant 3 : i64
    %653 = llvm.load %14 : !llvm.ptr -> i64
    %654 = arith.cmpi ult, %653, %c3_i64_265 : i64
    scf.if %654 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %653, %c3_i64_265 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c12_i64_266 = arith.constant 12 : i64
    %655 = arith.extui %652 : i32 to i64
    %656 = arith.addi %655, %c12_i64_266 : i64
    %657 = llvm.getelementptr %17[%656] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %658 = llvm.load volatile %657 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_267 = arith.constant 7 : i64
    %659 = llvm.load %14 : !llvm.ptr -> i64
    %660 = arith.cmpi ult, %659, %c7_i64_267 : i64
    scf.if %660 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %659, %c7_i64_267 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %661 = arith.cmpi ult, %658, %27 : i32
    cf.cond_br %661, ^bb39, ^bb40
  ^bb39:  // 2 preds: ^bb38, ^bb40
    %662 = llvm.getelementptr inbounds %25[%658] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %663 = llvm.load %662 : !llvm.ptr -> !llvm.ptr
    %664 = llvm.ptrtoint %663 : !llvm.ptr to i64
    %c0_i64_268 = arith.constant 0 : i64
    %665 = arith.cmpi eq, %664, %c0_i64_268 : i64
    cf.cond_br %665, ^bb42, ^bb41
  ^bb40:  // pred: ^bb38
    %c3_i32_269 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_269) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %666 = llvm.getelementptr %663[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %667 = llvm.getelementptr %663[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %668 = llvm.getelementptr %663[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %669 = llvm.load %666 : !llvm.ptr -> !llvm.ptr
    %670 = llvm.load %668 : !llvm.ptr -> !llvm.ptr
    %671 = llvm.ptrtoint %669 : !llvm.ptr to i64
    %c0_i64_270 = arith.constant 0 : i64
    %672 = arith.cmpi eq, %671, %c0_i64_270 : i64
    cf.cond_br %672, ^bb44, ^bb43
  ^bb42:  // pred: ^bb39
    %c4_i32_271 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_271) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %673 = llvm.load %667 : !llvm.ptr -> i32
    %674 = arith.cmpi ne, %19, %673 : i32
    cf.cond_br %674, ^bb46, ^bb45
  ^bb44:  // pred: ^bb41
    %c3_i32_272 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_272) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %675 = llvm.call %669(%670, %643, %646, %649) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_273 = arith.constant 1 : i64
    %676 = llvm.load %14 : !llvm.ptr -> i64
    %677 = arith.cmpi ult, %676, %c1_i64_273 : i64
    scf.if %677 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %676, %c1_i64_273 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb2(%675 : i32)
  ^bb46:  // pred: ^bb43
    %c5_i32_274 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_274) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // pred: ^bb36
    %c3_i64_275 = arith.constant 3 : i64
    %678 = llvm.load %14 : !llvm.ptr -> i64
    %679 = arith.cmpi ult, %678, %c3_i64_275 : i64
    scf.if %679 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %678, %c3_i64_275 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %680 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_276 = arith.constant 3 : i64
    %681 = llvm.load %14 : !llvm.ptr -> i64
    %682 = arith.cmpi ult, %681, %c3_i64_276 : i64
    scf.if %682 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %681, %c3_i64_276 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %683 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_277 = arith.constant 3 : i64
    %684 = llvm.load %14 : !llvm.ptr -> i64
    %685 = arith.cmpi ult, %684, %c3_i64_277 : i64
    scf.if %685 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %684, %c3_i64_277 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %686 = arith.subi %680, %683 : i32
    %c3_i64_278 = arith.constant 3 : i64
    %687 = llvm.load %14 : !llvm.ptr -> i64
    %688 = arith.cmpi ult, %687, %c3_i64_278 : i64
    scf.if %688 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %687, %c3_i64_278 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %686, %6 : i32, !llvm.ptr
    %c1_i64_279 = arith.constant 1 : i64
    %689 = llvm.load %14 : !llvm.ptr -> i64
    %690 = arith.cmpi ult, %689, %c1_i64_279 : i64
    scf.if %690 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %689, %c1_i64_279 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i64_280 = arith.constant 1 : i64
    %691 = llvm.load %14 : !llvm.ptr -> i64
    %692 = arith.cmpi ult, %691, %c1_i64_280 : i64
    scf.if %692 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %691, %c1_i64_280 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i64_281 = arith.constant 1 : i64
    %693 = llvm.load %14 : !llvm.ptr -> i64
    %694 = arith.cmpi ult, %693, %c1_i64_281 : i64
    scf.if %694 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %693, %c1_i64_281 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c3_i64_282 = arith.constant 3 : i64
    %695 = llvm.load %14 : !llvm.ptr -> i64
    %696 = arith.cmpi ult, %695, %c3_i64_282 : i64
    scf.if %696 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %695, %c3_i64_282 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %697 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_283 = arith.constant 3 : i64
    %698 = llvm.load %14 : !llvm.ptr -> i64
    %699 = arith.cmpi ult, %698, %c3_i64_283 : i64
    scf.if %699 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %698, %c3_i64_283 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c32_i64 = arith.constant 32 : i64
    %700 = arith.extui %697 : i32 to i64
    %701 = arith.addi %700, %c32_i64 : i64
    %702 = llvm.getelementptr %17[%701] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %703 = llvm.load volatile %702 {alignment = 1 : i64} : !llvm.ptr -> i8
    %704 = arith.extui %703 : i8 to i32
    %c3_i64_284 = arith.constant 3 : i64
    %705 = llvm.load %14 : !llvm.ptr -> i64
    %706 = arith.cmpi ult, %705, %c3_i64_284 : i64
    scf.if %706 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %705, %c3_i64_284 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %704, %1 : i32, !llvm.ptr
    %c1_i64_285 = arith.constant 1 : i64
    %707 = llvm.load %14 : !llvm.ptr -> i64
    %708 = arith.cmpi ult, %707, %c1_i64_285 : i64
    scf.if %708 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %707, %c1_i64_285 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.switch %704 : i32, [
      default: ^bb72,
      0: ^bb72,
      1: ^bb74,
      2: ^bb73,
      3: ^bb74
    ]
  ^bb48:  // pred: ^bb36
    %c3_i64_286 = arith.constant 3 : i64
    %709 = llvm.load %14 : !llvm.ptr -> i64
    %710 = arith.cmpi ult, %709, %c3_i64_286 : i64
    scf.if %710 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %709, %c3_i64_286 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %711 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_287 = arith.constant 3 : i64
    %712 = llvm.load %14 : !llvm.ptr -> i64
    %713 = arith.cmpi ult, %712, %c3_i64_287 : i64
    scf.if %713 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %712, %c3_i64_287 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %714 = arith.extui %711 : i32 to i64
    %715 = arith.addi %714, %c16_i64 : i64
    %716 = llvm.getelementptr %17[%715] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %717 = llvm.load volatile %716 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_288 = arith.constant 3 : i64
    %718 = llvm.load %14 : !llvm.ptr -> i64
    %719 = arith.cmpi ult, %718, %c3_i64_288 : i64
    scf.if %719 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %718, %c3_i64_288 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %717, %11 : i32, !llvm.ptr
    %c3_i64_289 = arith.constant 3 : i64
    %720 = llvm.load %14 : !llvm.ptr -> i64
    %721 = arith.cmpi ult, %720, %c3_i64_289 : i64
    scf.if %721 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %720, %c3_i64_289 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %722 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_290 = arith.constant 1 : i64
    %723 = llvm.load %14 : !llvm.ptr -> i64
    %724 = arith.cmpi ult, %723, %c1_i64_290 : i64
    scf.if %724 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %723, %c1_i64_290 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c48_i32 = arith.constant 48 : i32
    %c3_i64_291 = arith.constant 3 : i64
    %725 = llvm.load %14 : !llvm.ptr -> i64
    %726 = arith.cmpi ult, %725, %c3_i64_291 : i64
    scf.if %726 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %725, %c3_i64_291 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c16_i64_292 = arith.constant 16 : i64
    %727 = arith.extui %722 : i32 to i64
    %728 = arith.addi %727, %c16_i64_292 : i64
    %729 = llvm.getelementptr %17[%728] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c48_i32, %729 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_293 = arith.constant 3 : i64
    %730 = llvm.load %14 : !llvm.ptr -> i64
    %731 = arith.cmpi ult, %730, %c3_i64_293 : i64
    scf.if %731 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %730, %c3_i64_293 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %732 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_294 = arith.constant 3 : i64
    %733 = llvm.load %14 : !llvm.ptr -> i64
    %734 = arith.cmpi ult, %733, %c3_i64_294 : i64
    scf.if %734 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %733, %c3_i64_294 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c32_i64_295 = arith.constant 32 : i64
    %735 = arith.extui %732 : i32 to i64
    %736 = arith.addi %735, %c32_i64_295 : i64
    %737 = llvm.getelementptr %17[%736] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %738 = llvm.load volatile %737 {alignment = 1 : i64} : !llvm.ptr -> i8
    %739 = arith.extui %738 : i8 to i32
    %c3_i64_296 = arith.constant 3 : i64
    %740 = llvm.load %14 : !llvm.ptr -> i64
    %741 = arith.cmpi ult, %740, %c3_i64_296 : i64
    scf.if %741 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %740, %c3_i64_296 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %739, %7 : i32, !llvm.ptr
    %c1_i64_297 = arith.constant 1 : i64
    %742 = llvm.load %14 : !llvm.ptr -> i64
    %743 = arith.cmpi ult, %742, %c1_i64_297 : i64
    scf.if %743 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %742, %c1_i64_297 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_298 = arith.constant 1 : i32
    %c3_i64_299 = arith.constant 3 : i64
    %744 = llvm.load %14 : !llvm.ptr -> i64
    %745 = arith.cmpi ult, %744, %c3_i64_299 : i64
    scf.if %745 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %744, %c3_i64_299 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_298, %1 : i32, !llvm.ptr
    %c3_i64_300 = arith.constant 3 : i64
    %746 = llvm.load %14 : !llvm.ptr -> i64
    %747 = arith.cmpi ult, %746, %c3_i64_300 : i64
    scf.if %747 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %746, %c3_i64_300 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %748 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_301 = arith.constant 1 : i64
    %749 = llvm.load %14 : !llvm.ptr -> i64
    %750 = arith.cmpi ult, %749, %c1_i64_301 : i64
    scf.if %750 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %749, %c1_i64_301 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_302 = arith.constant 1 : i32
    %c3_i64_303 = arith.constant 3 : i64
    %751 = llvm.load %14 : !llvm.ptr -> i64
    %752 = arith.cmpi ult, %751, %c3_i64_303 : i64
    scf.if %752 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %751, %c3_i64_303 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c32_i64_304 = arith.constant 32 : i64
    %753 = arith.extui %748 : i32 to i64
    %754 = arith.addi %753, %c32_i64_304 : i64
    %755 = llvm.getelementptr %17[%754] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %756 = arith.trunci %c1_i32_302 : i32 to i8
    llvm.store volatile %756, %755 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_305 = arith.constant 3 : i64
    %757 = llvm.load %14 : !llvm.ptr -> i64
    %758 = arith.cmpi ult, %757, %c3_i64_305 : i64
    scf.if %758 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %757, %c3_i64_305 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %759 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_306 = arith.constant 3 : i64
    %760 = llvm.load %14 : !llvm.ptr -> i64
    %761 = arith.cmpi ult, %760, %c3_i64_306 : i64
    scf.if %761 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %760, %c3_i64_306 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c20_i64_307 = arith.constant 20 : i64
    %762 = arith.extui %759 : i32 to i64
    %763 = arith.addi %762, %c20_i64_307 : i64
    %764 = llvm.getelementptr %17[%763] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %765 = llvm.load volatile %764 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_308 = arith.constant 3 : i64
    %766 = llvm.load %14 : !llvm.ptr -> i64
    %767 = arith.cmpi ult, %766, %c3_i64_308 : i64
    scf.if %767 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %766, %c3_i64_308 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %765, %12 : i32, !llvm.ptr
    %c3_i64_309 = arith.constant 3 : i64
    %768 = llvm.load %14 : !llvm.ptr -> i64
    %769 = arith.cmpi ult, %768, %c3_i64_309 : i64
    scf.if %769 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %768, %c3_i64_309 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %770 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_310 = arith.constant 3 : i64
    %771 = llvm.load %14 : !llvm.ptr -> i64
    %772 = arith.cmpi ult, %771, %c3_i64_310 : i64
    scf.if %772 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %771, %c3_i64_310 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c24_i64_311 = arith.constant 24 : i64
    %773 = arith.extui %770 : i32 to i64
    %774 = arith.addi %773, %c24_i64_311 : i64
    %775 = llvm.getelementptr %17[%774] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %776 = llvm.load volatile %775 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_312 = arith.constant 3 : i64
    %777 = llvm.load %14 : !llvm.ptr -> i64
    %778 = arith.cmpi ult, %777, %c3_i64_312 : i64
    scf.if %778 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %777, %c3_i64_312 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %776, %10 : i32, !llvm.ptr
    %c3_i64_313 = arith.constant 3 : i64
    %779 = llvm.load %14 : !llvm.ptr -> i64
    %780 = arith.cmpi ult, %779, %c3_i64_313 : i64
    scf.if %780 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %779, %c3_i64_313 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %781 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_314 = arith.constant 3 : i64
    %782 = llvm.load %14 : !llvm.ptr -> i64
    %783 = arith.cmpi ult, %782, %c3_i64_314 : i64
    scf.if %783 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %782, %c3_i64_314 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %784 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_315 = arith.constant 3 : i64
    %785 = llvm.load %14 : !llvm.ptr -> i64
    %786 = arith.cmpi ult, %785, %c3_i64_315 : i64
    scf.if %786 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %785, %c3_i64_315 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %787 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i64_316 = arith.constant 6 : i64
    %788 = llvm.load %14 : !llvm.ptr -> i64
    %789 = arith.cmpi ult, %788, %c6_i64_316 : i64
    scf.if %789 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %788, %c6_i64_316 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %790 = call @f72(%arg0, %765, %776, %781, %784, %787) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c1_i64_317 = arith.constant 1 : i64
    %791 = llvm.load %14 : !llvm.ptr -> i64
    %792 = arith.cmpi ult, %791, %c1_i64_317 : i64
    scf.if %792 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %791, %c1_i64_317 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_318 = arith.constant 0 : i32
    %793 = arith.cmpi ne, %790, %c0_i32_318 : i32
    cf.cond_br %793, ^bb24, ^bb49
  ^bb49:  // pred: ^bb48
    %c3_i64_319 = arith.constant 3 : i64
    %794 = llvm.load %14 : !llvm.ptr -> i64
    %795 = arith.cmpi ult, %794, %c3_i64_319 : i64
    scf.if %795 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %794, %c3_i64_319 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %796 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_320 = arith.constant 3 : i64
    %797 = llvm.load %14 : !llvm.ptr -> i64
    %798 = arith.cmpi ult, %797, %c3_i64_320 : i64
    scf.if %798 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %797, %c3_i64_320 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %799 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_321 = arith.constant 3 : i64
    %800 = llvm.load %14 : !llvm.ptr -> i64
    %801 = arith.cmpi ult, %800, %c3_i64_321 : i64
    scf.if %801 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %800, %c3_i64_321 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %802 = arith.subi %796, %799 : i32
    %c1_i64_322 = arith.constant 1 : i64
    %803 = llvm.load %14 : !llvm.ptr -> i64
    %804 = arith.cmpi ult, %803, %c1_i64_322 : i64
    scf.if %804 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %803, %c1_i64_322 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_323 = arith.constant 1 : i32
    %c3_i64_324 = arith.constant 3 : i64
    %805 = llvm.load %14 : !llvm.ptr -> i64
    %806 = arith.cmpi ult, %805, %c3_i64_324 : i64
    scf.if %806 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %805, %c3_i64_324 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %807 = arith.addi %802, %c1_i32_323 : i32
    %c3_i64_325 = arith.constant 3 : i64
    %808 = llvm.load %14 : !llvm.ptr -> i64
    %809 = arith.cmpi ult, %808, %c3_i64_325 : i64
    scf.if %809 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %808, %c3_i64_325 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %807, %1 : i32, !llvm.ptr
    %c1_i64_326 = arith.constant 1 : i64
    %810 = llvm.load %14 : !llvm.ptr -> i64
    %811 = arith.cmpi ult, %810, %c1_i64_326 : i64
    scf.if %811 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %810, %c1_i64_326 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i64_327 = arith.constant 1 : i64
    %812 = llvm.load %14 : !llvm.ptr -> i64
    %813 = arith.cmpi ult, %812, %c1_i64_327 : i64
    scf.if %813 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %812, %c1_i64_327 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb52
  ^bb50:  // pred: ^bb52
    %c1_i64_328 = arith.constant 1 : i64
    %814 = llvm.load %14 : !llvm.ptr -> i64
    %815 = arith.cmpi ult, %814, %c1_i64_328 : i64
    scf.if %815 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %814, %c1_i64_328 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_329 = arith.constant 1 : i32
    %c3_i64_330 = arith.constant 3 : i64
    %816 = llvm.load %14 : !llvm.ptr -> i64
    %817 = arith.cmpi ult, %816, %c3_i64_330 : i64
    scf.if %817 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %816, %c3_i64_330 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_329, %1 : i32, !llvm.ptr
    %c3_i64_331 = arith.constant 3 : i64
    %818 = llvm.load %14 : !llvm.ptr -> i64
    %819 = arith.cmpi ult, %818, %c3_i64_331 : i64
    scf.if %819 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %818, %c3_i64_331 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %820 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i64_332 = arith.constant 3 : i64
    %821 = llvm.load %14 : !llvm.ptr -> i64
    %822 = arith.cmpi ult, %821, %c3_i64_332 : i64
    scf.if %822 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %821, %c3_i64_332 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %823 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_333 = arith.constant 3 : i64
    %824 = llvm.load %14 : !llvm.ptr -> i64
    %825 = arith.cmpi ult, %824, %c3_i64_333 : i64
    scf.if %825 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %824, %c3_i64_333 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %826 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_334 = arith.constant 3 : i64
    %827 = llvm.load %14 : !llvm.ptr -> i64
    %828 = arith.cmpi ult, %827, %c3_i64_334 : i64
    scf.if %828 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %827, %c3_i64_334 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %829 = llvm.load %10 : !llvm.ptr -> i32
    %c3_i64_335 = arith.constant 3 : i64
    %830 = llvm.load %14 : !llvm.ptr -> i64
    %831 = arith.cmpi ult, %830, %c3_i64_335 : i64
    scf.if %831 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %830, %c3_i64_335 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c12_i64_336 = arith.constant 12 : i64
    %832 = arith.extui %829 : i32 to i64
    %833 = arith.addi %832, %c12_i64_336 : i64
    %834 = llvm.getelementptr %17[%833] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %835 = llvm.load volatile %834 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_337 = arith.constant 7 : i64
    %836 = llvm.load %14 : !llvm.ptr -> i64
    %837 = arith.cmpi ult, %836, %c7_i64_337 : i64
    scf.if %837 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %836, %c7_i64_337 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %838 = arith.cmpi ult, %835, %35 : i32
    cf.cond_br %838, ^bb63, ^bb64
  ^bb51:  // pred: ^bb62
    %c1_i64_338 = arith.constant 1 : i64
    %839 = llvm.load %14 : !llvm.ptr -> i64
    %840 = arith.cmpi ult, %839, %c1_i64_338 : i64
    scf.if %840 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %839, %c1_i64_338 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_339 = arith.constant 1 : i32
    %c1_i64_340 = arith.constant 1 : i64
    %841 = llvm.load %14 : !llvm.ptr -> i64
    %842 = arith.cmpi ult, %841, %c1_i64_340 : i64
    scf.if %842 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %841, %c1_i64_340 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c1_i32_339 : i32)
  ^bb52:  // 2 preds: ^bb49, ^bb60
    %c3_i64_341 = arith.constant 3 : i64
    %843 = llvm.load %14 : !llvm.ptr -> i64
    %844 = arith.cmpi ult, %843, %c3_i64_341 : i64
    scf.if %844 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %843, %c3_i64_341 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %845 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_342 = arith.constant 1 : i64
    %846 = llvm.load %14 : !llvm.ptr -> i64
    %847 = arith.cmpi ult, %846, %c1_i64_342 : i64
    scf.if %847 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %846, %c1_i64_342 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c-1_i32_343 = arith.constant -1 : i32
    %c3_i64_344 = arith.constant 3 : i64
    %848 = llvm.load %14 : !llvm.ptr -> i64
    %849 = arith.cmpi ult, %848, %c3_i64_344 : i64
    scf.if %849 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %848, %c3_i64_344 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %850 = arith.addi %845, %c-1_i32_343 : i32
    %c3_i64_345 = arith.constant 3 : i64
    %851 = llvm.load %14 : !llvm.ptr -> i64
    %852 = arith.cmpi ult, %851, %c3_i64_345 : i64
    scf.if %852 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %851, %c3_i64_345 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %850, %1 : i32, !llvm.ptr
    %c3_i64_346 = arith.constant 3 : i64
    %853 = llvm.load %14 : !llvm.ptr -> i64
    %854 = arith.cmpi ult, %853, %c3_i64_346 : i64
    scf.if %854 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %853, %c3_i64_346 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_347 = arith.constant 0 : i32
    %855 = arith.cmpi eq, %850, %c0_i32_347 : i32
    %856 = arith.extui %855 : i1 to i32
    %c1_i64_348 = arith.constant 1 : i64
    %857 = llvm.load %14 : !llvm.ptr -> i64
    %858 = arith.cmpi ult, %857, %c1_i64_348 : i64
    scf.if %858 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %857, %c1_i64_348 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_349 = arith.constant 0 : i32
    %859 = arith.cmpi ne, %856, %c0_i32_349 : i32
    cf.cond_br %859, ^bb50, ^bb53
  ^bb53:  // pred: ^bb52
    %c3_i64_350 = arith.constant 3 : i64
    %860 = llvm.load %14 : !llvm.ptr -> i64
    %861 = arith.cmpi ult, %860, %c3_i64_350 : i64
    scf.if %861 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %860, %c3_i64_350 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %862 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i64_351 = arith.constant 1 : i64
    %863 = llvm.load %14 : !llvm.ptr -> i64
    %864 = arith.cmpi ult, %863, %c1_i64_351 : i64
    scf.if %864 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %863, %c1_i64_351 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c48_i32_352 = arith.constant 48 : i32
    %c3_i64_353 = arith.constant 3 : i64
    %865 = llvm.load %14 : !llvm.ptr -> i64
    %866 = arith.cmpi ult, %865, %c3_i64_353 : i64
    scf.if %866 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %865, %c3_i64_353 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %867 = llvm.load %10 : !llvm.ptr -> i32
    %c3_i64_354 = arith.constant 3 : i64
    %868 = llvm.load %14 : !llvm.ptr -> i64
    %869 = arith.cmpi ult, %868, %c3_i64_354 : i64
    scf.if %869 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %868, %c3_i64_354 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c16_i64_355 = arith.constant 16 : i64
    %870 = arith.extui %867 : i32 to i64
    %871 = arith.addi %870, %c16_i64_355 : i64
    %872 = llvm.getelementptr %17[%871] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %873 = llvm.load volatile %872 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_356 = arith.constant 7 : i64
    %874 = llvm.load %14 : !llvm.ptr -> i64
    %875 = arith.cmpi ult, %874, %c7_i64_356 : i64
    scf.if %875 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %874, %c7_i64_356 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %876 = arith.cmpi ult, %873, %32 : i32
    cf.cond_br %876, ^bb54, ^bb55
  ^bb54:  // 2 preds: ^bb53, ^bb55
    %877 = llvm.getelementptr inbounds %30[%873] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %878 = llvm.load %877 : !llvm.ptr -> !llvm.ptr
    %879 = llvm.ptrtoint %878 : !llvm.ptr to i64
    %c0_i64_357 = arith.constant 0 : i64
    %880 = arith.cmpi eq, %879, %c0_i64_357 : i64
    cf.cond_br %880, ^bb57, ^bb56
  ^bb55:  // pred: ^bb53
    %c3_i32_358 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_358) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %881 = llvm.getelementptr %878[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %882 = llvm.getelementptr %878[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %883 = llvm.getelementptr %878[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %884 = llvm.load %881 : !llvm.ptr -> !llvm.ptr
    %885 = llvm.load %883 : !llvm.ptr -> !llvm.ptr
    %886 = llvm.ptrtoint %884 : !llvm.ptr to i64
    %c0_i64_359 = arith.constant 0 : i64
    %887 = arith.cmpi eq, %886, %c0_i64_359 : i64
    cf.cond_br %887, ^bb59, ^bb58
  ^bb57:  // pred: ^bb54
    %c4_i32_360 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_360) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %888 = llvm.load %882 : !llvm.ptr -> i32
    %889 = arith.cmpi ne, %29, %888 : i32
    cf.cond_br %889, ^bb61, ^bb60
  ^bb59:  // pred: ^bb56
    %c3_i32_361 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_361) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %890 = llvm.call %884(%885, %862, %c48_i32_352) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c3_i64_362 = arith.constant 3 : i64
    %891 = llvm.load %14 : !llvm.ptr -> i64
    %892 = arith.cmpi ult, %891, %c3_i64_362 : i64
    scf.if %892 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %891, %c3_i64_362 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_363 = arith.constant 0 : i32
    %893 = arith.cmpi eq, %890, %c0_i32_363 : i32
    %894 = arith.extui %893 : i1 to i32
    %c1_i64_364 = arith.constant 1 : i64
    %895 = llvm.load %14 : !llvm.ptr -> i64
    %896 = arith.cmpi ult, %895, %c1_i64_364 : i64
    scf.if %896 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %895, %c1_i64_364 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_365 = arith.constant 0 : i32
    %897 = arith.cmpi ne, %894, %c0_i32_365 : i32
    cf.cond_br %897, ^bb52, ^bb62
  ^bb61:  // pred: ^bb58
    %c5_i32_366 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_366) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // pred: ^bb60
    %c1_i64_367 = arith.constant 1 : i64
    %898 = llvm.load %14 : !llvm.ptr -> i64
    %899 = arith.cmpi ult, %898, %c1_i64_367 : i64
    scf.if %899 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %898, %c1_i64_367 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb51
  ^bb63:  // 2 preds: ^bb50, ^bb64
    %900 = llvm.getelementptr inbounds %33[%835] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %901 = llvm.load %900 : !llvm.ptr -> !llvm.ptr
    %902 = llvm.ptrtoint %901 : !llvm.ptr to i64
    %c0_i64_368 = arith.constant 0 : i64
    %903 = arith.cmpi eq, %902, %c0_i64_368 : i64
    cf.cond_br %903, ^bb66, ^bb65
  ^bb64:  // pred: ^bb50
    %c3_i32_369 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_369) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %904 = llvm.getelementptr %901[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %905 = llvm.getelementptr %901[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %906 = llvm.getelementptr %901[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %907 = llvm.load %904 : !llvm.ptr -> !llvm.ptr
    %908 = llvm.load %906 : !llvm.ptr -> !llvm.ptr
    %909 = llvm.ptrtoint %907 : !llvm.ptr to i64
    %c0_i64_370 = arith.constant 0 : i64
    %910 = arith.cmpi eq, %909, %c0_i64_370 : i64
    cf.cond_br %910, ^bb68, ^bb67
  ^bb66:  // pred: ^bb63
    %c4_i32_371 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_371) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %911 = llvm.load %905 : !llvm.ptr -> i32
    %912 = arith.cmpi ne, %19, %911 : i32
    cf.cond_br %912, ^bb70, ^bb69
  ^bb68:  // pred: ^bb65
    %c3_i32_372 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_372) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %913 = llvm.call %907(%908, %820, %823, %826) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_373 = arith.constant 1 : i64
    %914 = llvm.load %14 : !llvm.ptr -> i64
    %915 = arith.cmpi ult, %914, %c1_i64_373 : i64
    scf.if %915 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %914, %c1_i64_373 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_374 = arith.constant 0 : i32
    %916 = arith.cmpi ne, %913, %c0_i32_374 : i32
    cf.cond_br %916, ^bb24, ^bb71
  ^bb70:  // pred: ^bb67
    %c5_i32_375 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_375) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // pred: ^bb69
    %c3_i64_376 = arith.constant 3 : i64
    %917 = llvm.load %14 : !llvm.ptr -> i64
    %918 = arith.cmpi ult, %917, %c3_i64_376 : i64
    scf.if %918 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %917, %c3_i64_376 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %919 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_377 = arith.constant 3 : i64
    %920 = llvm.load %14 : !llvm.ptr -> i64
    %921 = arith.cmpi ult, %920, %c3_i64_377 : i64
    scf.if %921 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %920, %c3_i64_377 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %922 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_378 = arith.constant 3 : i64
    %923 = llvm.load %14 : !llvm.ptr -> i64
    %924 = arith.cmpi ult, %923, %c3_i64_378 : i64
    scf.if %924 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %923, %c3_i64_378 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c32_i64_379 = arith.constant 32 : i64
    %925 = arith.extui %919 : i32 to i64
    %926 = arith.addi %925, %c32_i64_379 : i64
    %927 = llvm.getelementptr %17[%926] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %928 = arith.trunci %922 : i32 to i8
    llvm.store volatile %928, %927 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_380 = arith.constant 3 : i64
    %929 = llvm.load %14 : !llvm.ptr -> i64
    %930 = arith.cmpi ult, %929, %c3_i64_380 : i64
    scf.if %930 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %929, %c3_i64_380 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %931 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_381 = arith.constant 3 : i64
    %932 = llvm.load %14 : !llvm.ptr -> i64
    %933 = arith.cmpi ult, %932, %c3_i64_381 : i64
    scf.if %933 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %932, %c3_i64_381 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %934 = llvm.load %11 : !llvm.ptr -> i32
    %c3_i64_382 = arith.constant 3 : i64
    %935 = llvm.load %14 : !llvm.ptr -> i64
    %936 = arith.cmpi ult, %935, %c3_i64_382 : i64
    scf.if %936 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %935, %c3_i64_382 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c16_i64_383 = arith.constant 16 : i64
    %937 = arith.extui %931 : i32 to i64
    %938 = arith.addi %937, %c16_i64_383 : i64
    %939 = llvm.getelementptr %17[%938] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %934, %939 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i64_384 = arith.constant 1 : i64
    %940 = llvm.load %14 : !llvm.ptr -> i64
    %941 = arith.cmpi ult, %940, %c1_i64_384 : i64
    scf.if %941 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %940, %c1_i64_384 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_385 = arith.constant 0 : i32
    %c3_i64_386 = arith.constant 3 : i64
    %942 = llvm.load %14 : !llvm.ptr -> i64
    %943 = arith.cmpi ult, %942, %c3_i64_386 : i64
    scf.if %943 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %942, %c3_i64_386 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_385, %1 : i32, !llvm.ptr
    %c1_i64_387 = arith.constant 1 : i64
    %944 = llvm.load %14 : !llvm.ptr -> i64
    %945 = arith.cmpi ult, %944, %c1_i64_387 : i64
    scf.if %945 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %944, %c1_i64_387 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb24
  ^bb72:  // 4 preds: ^bb47, ^bb47, ^bb73, ^bb74
    %c3_i64_388 = arith.constant 3 : i64
    %946 = llvm.load %14 : !llvm.ptr -> i64
    %947 = arith.cmpi ult, %946, %c3_i64_388 : i64
    scf.if %947 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %946, %c3_i64_388 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %948 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_389 = arith.constant 1 : i64
    %949 = llvm.load %14 : !llvm.ptr -> i64
    %950 = arith.cmpi ult, %949, %c1_i64_389 : i64
    scf.if %950 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %949, %c1_i64_389 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_390 = arith.constant 1 : i32
    %c3_i64_391 = arith.constant 3 : i64
    %951 = llvm.load %14 : !llvm.ptr -> i64
    %952 = arith.cmpi ult, %951, %c3_i64_391 : i64
    scf.if %952 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %951, %c3_i64_391 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %953 = arith.addi %948, %c1_i32_390 : i32
    %c3_i64_392 = arith.constant 3 : i64
    %954 = llvm.load %14 : !llvm.ptr -> i64
    %955 = arith.cmpi ult, %954, %c3_i64_392 : i64
    scf.if %955 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %954, %c3_i64_392 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %953, %1 : i32, !llvm.ptr
    %c3_i64_393 = arith.constant 3 : i64
    %956 = llvm.load %14 : !llvm.ptr -> i64
    %957 = arith.cmpi ult, %956, %c3_i64_393 : i64
    scf.if %957 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %956, %c3_i64_393 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %958 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_394 = arith.constant 3 : i64
    %959 = llvm.load %14 : !llvm.ptr -> i64
    %960 = arith.cmpi ult, %959, %c3_i64_394 : i64
    scf.if %960 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %959, %c3_i64_394 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c16_i64_395 = arith.constant 16 : i64
    %961 = arith.extui %958 : i32 to i64
    %962 = arith.addi %961, %c16_i64_395 : i64
    %963 = llvm.getelementptr %17[%962] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %964 = llvm.load volatile %963 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_396 = arith.constant 3 : i64
    %965 = llvm.load %14 : !llvm.ptr -> i64
    %966 = arith.cmpi ult, %965, %c3_i64_396 : i64
    scf.if %966 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %965, %c3_i64_396 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %964, %9 : i32, !llvm.ptr
    %c3_i64_397 = arith.constant 3 : i64
    %967 = llvm.load %14 : !llvm.ptr -> i64
    %968 = arith.cmpi ult, %967, %c3_i64_397 : i64
    scf.if %968 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %967, %c3_i64_397 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %969 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_398 = arith.constant 3 : i64
    %970 = llvm.load %14 : !llvm.ptr -> i64
    %971 = arith.cmpi ult, %970, %c3_i64_398 : i64
    scf.if %971 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %970, %c3_i64_398 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c24_i64_399 = arith.constant 24 : i64
    %972 = arith.extui %969 : i32 to i64
    %973 = arith.addi %972, %c24_i64_399 : i64
    %974 = llvm.getelementptr %17[%973] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %975 = llvm.load volatile %974 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_400 = arith.constant 3 : i64
    %976 = llvm.load %14 : !llvm.ptr -> i64
    %977 = arith.cmpi ult, %976, %c3_i64_400 : i64
    scf.if %977 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %976, %c3_i64_400 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %975, %12 : i32, !llvm.ptr
    %c3_i64_401 = arith.constant 3 : i64
    %978 = llvm.load %14 : !llvm.ptr -> i64
    %979 = arith.cmpi ult, %978, %c3_i64_401 : i64
    scf.if %979 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %978, %c3_i64_401 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %980 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_402 = arith.constant 3 : i64
    %981 = llvm.load %14 : !llvm.ptr -> i64
    %982 = arith.cmpi ult, %981, %c3_i64_402 : i64
    scf.if %982 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %981, %c3_i64_402 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c20_i64_403 = arith.constant 20 : i64
    %983 = arith.extui %980 : i32 to i64
    %984 = arith.addi %983, %c20_i64_403 : i64
    %985 = llvm.getelementptr %17[%984] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %986 = llvm.load volatile %985 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_404 = arith.constant 3 : i64
    %987 = llvm.load %14 : !llvm.ptr -> i64
    %988 = arith.cmpi ult, %987, %c3_i64_404 : i64
    scf.if %988 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %987, %c3_i64_404 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %986, %10 : i32, !llvm.ptr
    %c1_i64_405 = arith.constant 1 : i64
    %989 = llvm.load %14 : !llvm.ptr -> i64
    %990 = arith.cmpi ult, %989, %c1_i64_405 : i64
    scf.if %990 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %989, %c1_i64_405 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i64_406 = arith.constant 1 : i64
    %991 = llvm.load %14 : !llvm.ptr -> i64
    %992 = arith.cmpi ult, %991, %c1_i64_406 : i64
    scf.if %992 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %991, %c1_i64_406 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb77
  ^bb73:  // pred: ^bb47
    %c3_i64_407 = arith.constant 3 : i64
    %993 = llvm.load %14 : !llvm.ptr -> i64
    %994 = arith.cmpi ult, %993, %c3_i64_407 : i64
    scf.if %994 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %993, %c3_i64_407 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %995 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_408 = arith.constant 1 : i64
    %996 = llvm.load %14 : !llvm.ptr -> i64
    %997 = arith.cmpi ult, %996, %c1_i64_408 : i64
    scf.if %997 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %996, %c1_i64_408 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_409 = arith.constant 1 : i32
    %c3_i64_410 = arith.constant 3 : i64
    %998 = llvm.load %14 : !llvm.ptr -> i64
    %999 = arith.cmpi ult, %998, %c3_i64_410 : i64
    scf.if %999 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %998, %c3_i64_410 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %1000 = arith.cmpi ule, %c1_i32_409, %c31_i32 : i32
    %1001 = scf.if %1000 -> (i32) {
      %1261 = arith.shrui %995, %c1_i32_409 : i32
      scf.yield %1261 : i32
    } else {
      %c0_i32_527 = arith.constant 0 : i32
      scf.yield %c0_i32_527 : i32
    }
    %c3_i64_411 = arith.constant 3 : i64
    %1002 = llvm.load %14 : !llvm.ptr -> i64
    %1003 = arith.cmpi ult, %1002, %c3_i64_411 : i64
    scf.if %1003 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1002, %c3_i64_411 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %1001, %1 : i32, !llvm.ptr
    %c3_i64_412 = arith.constant 3 : i64
    %1004 = llvm.load %14 : !llvm.ptr -> i64
    %1005 = arith.cmpi ult, %1004, %c3_i64_412 : i64
    scf.if %1005 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1004, %c3_i64_412 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1006 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_413 = arith.constant 1 : i64
    %1007 = llvm.load %14 : !llvm.ptr -> i64
    %1008 = arith.cmpi ult, %1007, %c1_i64_413 : i64
    scf.if %1008 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1007, %c1_i64_413 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_414 = arith.constant 1 : i32
    %c3_i64_415 = arith.constant 3 : i64
    %1009 = llvm.load %14 : !llvm.ptr -> i64
    %1010 = arith.cmpi ult, %1009, %c3_i64_415 : i64
    scf.if %1010 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1009, %c3_i64_415 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1011 = arith.addi %1006, %c1_i32_414 : i32
    %c1_i64_416 = arith.constant 1 : i64
    %1012 = llvm.load %14 : !llvm.ptr -> i64
    %1013 = arith.cmpi ult, %1012, %c1_i64_416 : i64
    scf.if %1013 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1012, %c1_i64_416 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_417 = arith.constant 1 : i32
    %c3_i64_418 = arith.constant 3 : i64
    %1014 = llvm.load %14 : !llvm.ptr -> i64
    %1015 = arith.cmpi ult, %1014, %c3_i64_418 : i64
    scf.if %1015 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1014, %c3_i64_418 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c31_i32_419 = arith.constant 31 : i32
    %1016 = arith.cmpi ule, %c1_i32_417, %c31_i32_419 : i32
    %1017 = scf.if %1016 -> (i32) {
      %1261 = arith.shrui %1011, %c1_i32_417 : i32
      scf.yield %1261 : i32
    } else {
      %c0_i32_527 = arith.constant 0 : i32
      scf.yield %c0_i32_527 : i32
    }
    %c3_i64_420 = arith.constant 3 : i64
    %1018 = llvm.load %14 : !llvm.ptr -> i64
    %1019 = arith.cmpi ult, %1018, %c3_i64_420 : i64
    scf.if %1019 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1018, %c3_i64_420 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %1017, %6 : i32, !llvm.ptr
    %c1_i64_421 = arith.constant 1 : i64
    %1020 = llvm.load %14 : !llvm.ptr -> i64
    %1021 = arith.cmpi ult, %1020, %c1_i64_421 : i64
    scf.if %1021 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1020, %c1_i64_421 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb72
  ^bb74:  // 2 preds: ^bb47, ^bb47
    %c3_i64_422 = arith.constant 3 : i64
    %1022 = llvm.load %14 : !llvm.ptr -> i64
    %1023 = arith.cmpi ult, %1022, %c3_i64_422 : i64
    scf.if %1023 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1022, %c3_i64_422 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1024 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_423 = arith.constant 3 : i64
    %1025 = llvm.load %14 : !llvm.ptr -> i64
    %1026 = arith.cmpi ult, %1025, %c3_i64_423 : i64
    scf.if %1026 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1025, %c3_i64_423 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %1024, %1 : i32, !llvm.ptr
    %c1_i64_424 = arith.constant 1 : i64
    %1027 = llvm.load %14 : !llvm.ptr -> i64
    %1028 = arith.cmpi ult, %1027, %c1_i64_424 : i64
    scf.if %1028 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1027, %c1_i64_424 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_425 = arith.constant 0 : i32
    %c3_i64_426 = arith.constant 3 : i64
    %1029 = llvm.load %14 : !llvm.ptr -> i64
    %1030 = arith.cmpi ult, %1029, %c3_i64_426 : i64
    scf.if %1030 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1029, %c3_i64_426 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_425, %6 : i32, !llvm.ptr
    %c1_i64_427 = arith.constant 1 : i64
    %1031 = llvm.load %14 : !llvm.ptr -> i64
    %1032 = arith.cmpi ult, %1031, %c1_i64_427 : i64
    scf.if %1032 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1031, %c1_i64_427 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb72
  ^bb75:  // pred: ^bb77
    %c1_i64_428 = arith.constant 1 : i64
    %1033 = llvm.load %14 : !llvm.ptr -> i64
    %1034 = arith.cmpi ult, %1033, %c1_i64_428 : i64
    scf.if %1034 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1033, %c1_i64_428 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_429 = arith.constant 1 : i32
    %c3_i64_430 = arith.constant 3 : i64
    %1035 = llvm.load %14 : !llvm.ptr -> i64
    %1036 = arith.cmpi ult, %1035, %c3_i64_430 : i64
    scf.if %1036 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1035, %c3_i64_430 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_429, %1 : i32, !llvm.ptr
    %c3_i64_431 = arith.constant 3 : i64
    %1037 = llvm.load %14 : !llvm.ptr -> i64
    %1038 = arith.cmpi ult, %1037, %c3_i64_431 : i64
    scf.if %1038 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1037, %c3_i64_431 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1039 = llvm.load %10 : !llvm.ptr -> i32
    %c3_i64_432 = arith.constant 3 : i64
    %1040 = llvm.load %14 : !llvm.ptr -> i64
    %1041 = arith.cmpi ult, %1040, %c3_i64_432 : i64
    scf.if %1041 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1040, %c3_i64_432 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1042 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i64_433 = arith.constant 3 : i64
    %1043 = llvm.load %14 : !llvm.ptr -> i64
    %1044 = arith.cmpi ult, %1043, %c3_i64_433 : i64
    scf.if %1044 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1043, %c3_i64_433 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1045 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_434 = arith.constant 3 : i64
    %1046 = llvm.load %14 : !llvm.ptr -> i64
    %1047 = arith.cmpi ult, %1046, %c3_i64_434 : i64
    scf.if %1047 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1046, %c3_i64_434 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1048 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_435 = arith.constant 3 : i64
    %1049 = llvm.load %14 : !llvm.ptr -> i64
    %1050 = arith.cmpi ult, %1049, %c3_i64_435 : i64
    scf.if %1050 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1049, %c3_i64_435 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1051 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i64_436 = arith.constant 6 : i64
    %1052 = llvm.load %14 : !llvm.ptr -> i64
    %1053 = arith.cmpi ult, %1052, %c6_i64_436 : i64
    scf.if %1053 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1052, %c6_i64_436 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1054 = call @f72(%arg0, %1039, %1042, %1045, %1048, %1051) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c1_i64_437 = arith.constant 1 : i64
    %1055 = llvm.load %14 : !llvm.ptr -> i64
    %1056 = arith.cmpi ult, %1055, %c1_i64_437 : i64
    scf.if %1056 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1055, %c1_i64_437 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_438 = arith.constant 0 : i32
    %1057 = arith.cmpi ne, %1054, %c0_i32_438 : i32
    cf.cond_br %1057, ^bb24, ^bb88
  ^bb76:  // pred: ^bb87
    %c1_i64_439 = arith.constant 1 : i64
    %1058 = llvm.load %14 : !llvm.ptr -> i64
    %1059 = arith.cmpi ult, %1058, %c1_i64_439 : i64
    scf.if %1059 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1058, %c1_i64_439 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_440 = arith.constant 1 : i32
    %c1_i64_441 = arith.constant 1 : i64
    %1060 = llvm.load %14 : !llvm.ptr -> i64
    %1061 = arith.cmpi ult, %1060, %c1_i64_441 : i64
    scf.if %1061 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1060, %c1_i64_441 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c1_i32_440 : i32)
  ^bb77:  // 2 preds: ^bb72, ^bb85
    %c3_i64_442 = arith.constant 3 : i64
    %1062 = llvm.load %14 : !llvm.ptr -> i64
    %1063 = arith.cmpi ult, %1062, %c3_i64_442 : i64
    scf.if %1063 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1062, %c3_i64_442 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1064 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_443 = arith.constant 1 : i64
    %1065 = llvm.load %14 : !llvm.ptr -> i64
    %1066 = arith.cmpi ult, %1065, %c1_i64_443 : i64
    scf.if %1066 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1065, %c1_i64_443 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c-1_i32_444 = arith.constant -1 : i32
    %c3_i64_445 = arith.constant 3 : i64
    %1067 = llvm.load %14 : !llvm.ptr -> i64
    %1068 = arith.cmpi ult, %1067, %c3_i64_445 : i64
    scf.if %1068 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1067, %c3_i64_445 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1069 = arith.addi %1064, %c-1_i32_444 : i32
    %c3_i64_446 = arith.constant 3 : i64
    %1070 = llvm.load %14 : !llvm.ptr -> i64
    %1071 = arith.cmpi ult, %1070, %c3_i64_446 : i64
    scf.if %1071 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1070, %c3_i64_446 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %1069, %1 : i32, !llvm.ptr
    %c3_i64_447 = arith.constant 3 : i64
    %1072 = llvm.load %14 : !llvm.ptr -> i64
    %1073 = arith.cmpi ult, %1072, %c3_i64_447 : i64
    scf.if %1073 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1072, %c3_i64_447 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_448 = arith.constant 0 : i32
    %1074 = arith.cmpi eq, %1069, %c0_i32_448 : i32
    %1075 = arith.extui %1074 : i1 to i32
    %c1_i64_449 = arith.constant 1 : i64
    %1076 = llvm.load %14 : !llvm.ptr -> i64
    %1077 = arith.cmpi ult, %1076, %c1_i64_449 : i64
    scf.if %1077 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1076, %c1_i64_449 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_450 = arith.constant 0 : i32
    %1078 = arith.cmpi ne, %1075, %c0_i32_450 : i32
    cf.cond_br %1078, ^bb75, ^bb78
  ^bb78:  // pred: ^bb77
    %c3_i64_451 = arith.constant 3 : i64
    %1079 = llvm.load %14 : !llvm.ptr -> i64
    %1080 = arith.cmpi ult, %1079, %c3_i64_451 : i64
    scf.if %1080 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1079, %c3_i64_451 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1081 = llvm.load %10 : !llvm.ptr -> i32
    %c3_i64_452 = arith.constant 3 : i64
    %1082 = llvm.load %14 : !llvm.ptr -> i64
    %1083 = arith.cmpi ult, %1082, %c3_i64_452 : i64
    scf.if %1083 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1082, %c3_i64_452 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1084 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_453 = arith.constant 3 : i64
    %1085 = llvm.load %14 : !llvm.ptr -> i64
    %1086 = arith.cmpi ult, %1085, %c3_i64_453 : i64
    scf.if %1086 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1085, %c3_i64_453 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1087 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i64_454 = arith.constant 3 : i64
    %1088 = llvm.load %14 : !llvm.ptr -> i64
    %1089 = arith.cmpi ult, %1088, %c3_i64_454 : i64
    scf.if %1089 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1088, %c3_i64_454 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c16_i64_455 = arith.constant 16 : i64
    %1090 = arith.extui %1087 : i32 to i64
    %1091 = arith.addi %1090, %c16_i64_455 : i64
    %1092 = llvm.getelementptr %17[%1091] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1093 = llvm.load volatile %1092 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_456 = arith.constant 7 : i64
    %1094 = llvm.load %14 : !llvm.ptr -> i64
    %1095 = arith.cmpi ult, %1094, %c7_i64_456 : i64
    scf.if %1095 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1094, %c7_i64_456 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1096 = arith.cmpi ult, %1093, %38 : i32
    cf.cond_br %1096, ^bb79, ^bb80
  ^bb79:  // 2 preds: ^bb78, ^bb80
    %1097 = llvm.getelementptr inbounds %36[%1093] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %1098 = llvm.load %1097 : !llvm.ptr -> !llvm.ptr
    %1099 = llvm.ptrtoint %1098 : !llvm.ptr to i64
    %c0_i64_457 = arith.constant 0 : i64
    %1100 = arith.cmpi eq, %1099, %c0_i64_457 : i64
    cf.cond_br %1100, ^bb82, ^bb81
  ^bb80:  // pred: ^bb78
    %c3_i32_458 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_458) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %1101 = llvm.getelementptr %1098[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1102 = llvm.getelementptr %1098[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1103 = llvm.getelementptr %1098[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1104 = llvm.load %1101 : !llvm.ptr -> !llvm.ptr
    %1105 = llvm.load %1103 : !llvm.ptr -> !llvm.ptr
    %1106 = llvm.ptrtoint %1104 : !llvm.ptr to i64
    %c0_i64_459 = arith.constant 0 : i64
    %1107 = arith.cmpi eq, %1106, %c0_i64_459 : i64
    cf.cond_br %1107, ^bb84, ^bb83
  ^bb82:  // pred: ^bb79
    %c4_i32_460 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_460) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %1108 = llvm.load %1102 : !llvm.ptr -> i32
    %1109 = arith.cmpi ne, %29, %1108 : i32
    cf.cond_br %1109, ^bb86, ^bb85
  ^bb84:  // pred: ^bb81
    %c3_i32_461 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_461) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %1110 = llvm.call %1104(%1105, %1081, %1084) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c3_i64_462 = arith.constant 3 : i64
    %1111 = llvm.load %14 : !llvm.ptr -> i64
    %1112 = arith.cmpi ult, %1111, %c3_i64_462 : i64
    scf.if %1112 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1111, %c3_i64_462 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_463 = arith.constant 0 : i32
    %1113 = arith.cmpi eq, %1110, %c0_i32_463 : i32
    %1114 = arith.extui %1113 : i1 to i32
    %c1_i64_464 = arith.constant 1 : i64
    %1115 = llvm.load %14 : !llvm.ptr -> i64
    %1116 = arith.cmpi ult, %1115, %c1_i64_464 : i64
    scf.if %1116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1115, %c1_i64_464 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_465 = arith.constant 0 : i32
    %1117 = arith.cmpi ne, %1114, %c0_i32_465 : i32
    cf.cond_br %1117, ^bb77, ^bb87
  ^bb86:  // pred: ^bb83
    %c5_i32_466 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_466) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // pred: ^bb85
    %c1_i64_467 = arith.constant 1 : i64
    %1118 = llvm.load %14 : !llvm.ptr -> i64
    %1119 = arith.cmpi ult, %1118, %c1_i64_467 : i64
    scf.if %1119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1118, %c1_i64_467 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb76
  ^bb88:  // pred: ^bb75
    %c3_i64_468 = arith.constant 3 : i64
    %1120 = llvm.load %14 : !llvm.ptr -> i64
    %1121 = arith.cmpi ult, %1120, %c3_i64_468 : i64
    scf.if %1121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1120, %c3_i64_468 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1122 = llvm.load %10 : !llvm.ptr -> i32
    %c3_i64_469 = arith.constant 3 : i64
    %1123 = llvm.load %14 : !llvm.ptr -> i64
    %1124 = arith.cmpi ult, %1123, %c3_i64_469 : i64
    scf.if %1124 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1123, %c3_i64_469 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1125 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_470 = arith.constant 3 : i64
    %1126 = llvm.load %14 : !llvm.ptr -> i64
    %1127 = arith.cmpi ult, %1126, %c3_i64_470 : i64
    scf.if %1127 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1126, %c3_i64_470 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1128 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_471 = arith.constant 3 : i64
    %1129 = llvm.load %14 : !llvm.ptr -> i64
    %1130 = arith.cmpi ult, %1129, %c3_i64_471 : i64
    scf.if %1130 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1129, %c3_i64_471 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1131 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i64_472 = arith.constant 3 : i64
    %1132 = llvm.load %14 : !llvm.ptr -> i64
    %1133 = arith.cmpi ult, %1132, %c3_i64_472 : i64
    scf.if %1133 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1132, %c3_i64_472 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c12_i64_473 = arith.constant 12 : i64
    %1134 = arith.extui %1131 : i32 to i64
    %1135 = arith.addi %1134, %c12_i64_473 : i64
    %1136 = llvm.getelementptr %17[%1135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1137 = llvm.load volatile %1136 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_474 = arith.constant 7 : i64
    %1138 = llvm.load %14 : !llvm.ptr -> i64
    %1139 = arith.cmpi ult, %1138, %c7_i64_474 : i64
    scf.if %1139 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1138, %c7_i64_474 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1140 = arith.cmpi ult, %1137, %41 : i32
    cf.cond_br %1140, ^bb89, ^bb90
  ^bb89:  // 2 preds: ^bb88, ^bb90
    %1141 = llvm.getelementptr inbounds %39[%1137] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %1142 = llvm.load %1141 : !llvm.ptr -> !llvm.ptr
    %1143 = llvm.ptrtoint %1142 : !llvm.ptr to i64
    %c0_i64_475 = arith.constant 0 : i64
    %1144 = arith.cmpi eq, %1143, %c0_i64_475 : i64
    cf.cond_br %1144, ^bb92, ^bb91
  ^bb90:  // pred: ^bb88
    %c3_i32_476 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_476) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %1145 = llvm.getelementptr %1142[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1146 = llvm.getelementptr %1142[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1147 = llvm.getelementptr %1142[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1148 = llvm.load %1145 : !llvm.ptr -> !llvm.ptr
    %1149 = llvm.load %1147 : !llvm.ptr -> !llvm.ptr
    %1150 = llvm.ptrtoint %1148 : !llvm.ptr to i64
    %c0_i64_477 = arith.constant 0 : i64
    %1151 = arith.cmpi eq, %1150, %c0_i64_477 : i64
    cf.cond_br %1151, ^bb94, ^bb93
  ^bb92:  // pred: ^bb89
    %c4_i32_478 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_478) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // 2 preds: ^bb91, ^bb94
    %1152 = llvm.load %1146 : !llvm.ptr -> i32
    %1153 = arith.cmpi ne, %19, %1152 : i32
    cf.cond_br %1153, ^bb96, ^bb95
  ^bb94:  // pred: ^bb91
    %c3_i32_479 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_479) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // 2 preds: ^bb93, ^bb96
    %1154 = llvm.call %1148(%1149, %1122, %1125, %1128) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_480 = arith.constant 1 : i64
    %1155 = llvm.load %14 : !llvm.ptr -> i64
    %1156 = arith.cmpi ult, %1155, %c1_i64_480 : i64
    scf.if %1156 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1155, %c1_i64_480 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_481 = arith.constant 0 : i32
    %1157 = arith.cmpi ne, %1154, %c0_i32_481 : i32
    cf.cond_br %1157, ^bb24, ^bb97
  ^bb96:  // pred: ^bb93
    %c5_i32_482 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_482) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // pred: ^bb95
    %c1_i64_483 = arith.constant 1 : i64
    %1158 = llvm.load %14 : !llvm.ptr -> i64
    %1159 = arith.cmpi ult, %1158, %c1_i64_483 : i64
    scf.if %1159 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1158, %c1_i64_483 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_484 = arith.constant 0 : i32
    %c3_i64_485 = arith.constant 3 : i64
    %1160 = llvm.load %14 : !llvm.ptr -> i64
    %1161 = arith.cmpi ult, %1160, %c3_i64_485 : i64
    scf.if %1161 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1160, %c3_i64_485 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_484, %1 : i32, !llvm.ptr
    %c1_i64_486 = arith.constant 1 : i64
    %1162 = llvm.load %14 : !llvm.ptr -> i64
    %1163 = arith.cmpi ult, %1162, %c1_i64_486 : i64
    scf.if %1163 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1162, %c1_i64_486 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb99
  ^bb98:  // pred: ^bb110
    %c3_i64_487 = arith.constant 3 : i64
    %1164 = llvm.load %14 : !llvm.ptr -> i64
    %1165 = arith.cmpi ult, %1164, %c3_i64_487 : i64
    scf.if %1165 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1164, %c3_i64_487 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1166 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_488 = arith.constant 1 : i64
    %1167 = llvm.load %14 : !llvm.ptr -> i64
    %1168 = arith.cmpi ult, %1167, %c1_i64_488 : i64
    scf.if %1168 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1167, %c1_i64_488 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c-1_i32_489 = arith.constant -1 : i32
    %c3_i64_490 = arith.constant 3 : i64
    %1169 = llvm.load %14 : !llvm.ptr -> i64
    %1170 = arith.cmpi ult, %1169, %c3_i64_490 : i64
    scf.if %1170 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1169, %c3_i64_490 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1171 = arith.addi %1166, %c-1_i32_489 : i32
    %c3_i64_491 = arith.constant 3 : i64
    %1172 = llvm.load %14 : !llvm.ptr -> i64
    %1173 = arith.cmpi ult, %1172, %c3_i64_491 : i64
    scf.if %1173 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1172, %c3_i64_491 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1174 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_492 = arith.constant 3 : i64
    %1175 = llvm.load %14 : !llvm.ptr -> i64
    %1176 = arith.cmpi ult, %1175, %c3_i64_492 : i64
    scf.if %1176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1175, %c3_i64_492 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1177 = arith.cmpi ult, %1171, %1174 : i32
    %1178 = arith.extui %1177 : i1 to i32
    %c1_i64_493 = arith.constant 1 : i64
    %1179 = llvm.load %14 : !llvm.ptr -> i64
    %1180 = arith.cmpi ult, %1179, %c1_i64_493 : i64
    scf.if %1180 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1179, %c1_i64_493 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb2(%1178 : i32)
  ^bb99:  // 2 preds: ^bb97, ^bb108
    %c1_i64_494 = arith.constant 1 : i64
    %1181 = llvm.load %14 : !llvm.ptr -> i64
    %1182 = arith.cmpi ult, %1181, %c1_i64_494 : i64
    scf.if %1182 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1181, %c1_i64_494 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c3_i64_495 = arith.constant 3 : i64
    %1183 = llvm.load %14 : !llvm.ptr -> i64
    %1184 = arith.cmpi ult, %1183, %c3_i64_495 : i64
    scf.if %1184 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1183, %c3_i64_495 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1185 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_496 = arith.constant 3 : i64
    %1186 = llvm.load %14 : !llvm.ptr -> i64
    %1187 = arith.cmpi ult, %1186, %c3_i64_496 : i64
    scf.if %1187 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1186, %c3_i64_496 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1188 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_497 = arith.constant 3 : i64
    %1189 = llvm.load %14 : !llvm.ptr -> i64
    %1190 = arith.cmpi ult, %1189, %c3_i64_497 : i64
    scf.if %1190 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1189, %c3_i64_497 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1191 = arith.cmpi eq, %1185, %1188 : i32
    %1192 = arith.extui %1191 : i1 to i32
    %c0_i32_498 = arith.constant 0 : i32
    %1193 = arith.cmpi eq, %1192, %c0_i32_498 : i32
    %1194 = arith.extui %1193 : i1 to i32
    %c1_i64_499 = arith.constant 1 : i64
    %1195 = llvm.load %14 : !llvm.ptr -> i64
    %1196 = arith.cmpi ult, %1195, %c1_i64_499 : i64
    scf.if %1196 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1195, %c1_i64_499 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_500 = arith.constant 0 : i32
    %1197 = arith.cmpi ne, %1194, %c0_i32_500 : i32
    cf.cond_br %1197, ^bb100, ^bb101
  ^bb100:  // pred: ^bb99
    %c3_i64_501 = arith.constant 3 : i64
    %1198 = llvm.load %14 : !llvm.ptr -> i64
    %1199 = arith.cmpi ult, %1198, %c3_i64_501 : i64
    scf.if %1199 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1198, %c3_i64_501 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1200 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_502 = arith.constant 1 : i64
    %1201 = llvm.load %14 : !llvm.ptr -> i64
    %1202 = arith.cmpi ult, %1201, %c1_i64_502 : i64
    scf.if %1202 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1201, %c1_i64_502 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c1_i32_503 = arith.constant 1 : i32
    %c3_i64_504 = arith.constant 3 : i64
    %1203 = llvm.load %14 : !llvm.ptr -> i64
    %1204 = arith.cmpi ult, %1203, %c3_i64_504 : i64
    scf.if %1204 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1203, %c3_i64_504 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1205 = arith.addi %1200, %c1_i32_503 : i32
    %c3_i64_505 = arith.constant 3 : i64
    %1206 = llvm.load %14 : !llvm.ptr -> i64
    %1207 = arith.cmpi ult, %1206, %c3_i64_505 : i64
    scf.if %1207 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1206, %c3_i64_505 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    llvm.store %1205, %1 : i32, !llvm.ptr
    %c3_i64_506 = arith.constant 3 : i64
    %1208 = llvm.load %14 : !llvm.ptr -> i64
    %1209 = arith.cmpi ult, %1208, %c3_i64_506 : i64
    scf.if %1209 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1208, %c3_i64_506 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1210 = llvm.load %10 : !llvm.ptr -> i32
    %c3_i64_507 = arith.constant 3 : i64
    %1211 = llvm.load %14 : !llvm.ptr -> i64
    %1212 = arith.cmpi ult, %1211, %c3_i64_507 : i64
    scf.if %1212 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1211, %c3_i64_507 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1213 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_508 = arith.constant 3 : i64
    %1214 = llvm.load %14 : !llvm.ptr -> i64
    %1215 = arith.cmpi ult, %1214, %c3_i64_508 : i64
    scf.if %1215 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1214, %c3_i64_508 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1216 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i64_509 = arith.constant 3 : i64
    %1217 = llvm.load %14 : !llvm.ptr -> i64
    %1218 = arith.cmpi ult, %1217, %c3_i64_509 : i64
    scf.if %1218 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1217, %c3_i64_509 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c16_i64_510 = arith.constant 16 : i64
    %1219 = arith.extui %1216 : i32 to i64
    %1220 = arith.addi %1219, %c16_i64_510 : i64
    %1221 = llvm.getelementptr %17[%1220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1222 = llvm.load volatile %1221 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_511 = arith.constant 7 : i64
    %1223 = llvm.load %14 : !llvm.ptr -> i64
    %1224 = arith.cmpi ult, %1223, %c7_i64_511 : i64
    scf.if %1224 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1223, %c7_i64_511 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1225 = arith.cmpi ult, %1222, %44 : i32
    cf.cond_br %1225, ^bb102, ^bb103
  ^bb101:  // pred: ^bb99
    %c3_i64_512 = arith.constant 3 : i64
    %1226 = llvm.load %14 : !llvm.ptr -> i64
    %1227 = arith.cmpi ult, %1226, %c3_i64_512 : i64
    scf.if %1227 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1226, %c3_i64_512 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1228 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_513 = arith.constant 3 : i64
    %1229 = llvm.load %14 : !llvm.ptr -> i64
    %1230 = arith.cmpi ult, %1229, %c3_i64_513 : i64
    scf.if %1230 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1229, %c3_i64_513 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1231 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_514 = arith.constant 3 : i64
    %1232 = llvm.load %14 : !llvm.ptr -> i64
    %1233 = arith.cmpi ult, %1232, %c3_i64_514 : i64
    scf.if %1233 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1232, %c3_i64_514 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %1234 = arith.cmpi ult, %1228, %1231 : i32
    %1235 = arith.extui %1234 : i1 to i32
    %c1_i64_515 = arith.constant 1 : i64
    %1236 = llvm.load %14 : !llvm.ptr -> i64
    %1237 = arith.cmpi ult, %1236, %c1_i64_515 : i64
    scf.if %1237 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1236, %c1_i64_515 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb2(%1235 : i32)
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %1238 = llvm.getelementptr inbounds %42[%1222] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %1239 = llvm.load %1238 : !llvm.ptr -> !llvm.ptr
    %1240 = llvm.ptrtoint %1239 : !llvm.ptr to i64
    %c0_i64_516 = arith.constant 0 : i64
    %1241 = arith.cmpi eq, %1240, %c0_i64_516 : i64
    cf.cond_br %1241, ^bb105, ^bb104
  ^bb103:  // pred: ^bb100
    %c3_i32_517 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_517) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %1242 = llvm.getelementptr %1239[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1243 = llvm.getelementptr %1239[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1244 = llvm.getelementptr %1239[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1245 = llvm.load %1242 : !llvm.ptr -> !llvm.ptr
    %1246 = llvm.load %1244 : !llvm.ptr -> !llvm.ptr
    %1247 = llvm.ptrtoint %1245 : !llvm.ptr to i64
    %c0_i64_518 = arith.constant 0 : i64
    %1248 = arith.cmpi eq, %1247, %c0_i64_518 : i64
    cf.cond_br %1248, ^bb107, ^bb106
  ^bb105:  // pred: ^bb102
    %c4_i32_519 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_519) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // 2 preds: ^bb104, ^bb107
    %1249 = llvm.load %1243 : !llvm.ptr -> i32
    %1250 = arith.cmpi ne, %29, %1249 : i32
    cf.cond_br %1250, ^bb109, ^bb108
  ^bb107:  // pred: ^bb104
    %c3_i32_520 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_520) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %1251 = llvm.call %1245(%1246, %1210, %1213) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c3_i64_521 = arith.constant 3 : i64
    %1252 = llvm.load %14 : !llvm.ptr -> i64
    %1253 = arith.cmpi ult, %1252, %c3_i64_521 : i64
    scf.if %1253 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1252, %c3_i64_521 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_522 = arith.constant 0 : i32
    %1254 = arith.cmpi eq, %1251, %c0_i32_522 : i32
    %1255 = arith.extui %1254 : i1 to i32
    %c1_i64_523 = arith.constant 1 : i64
    %1256 = llvm.load %14 : !llvm.ptr -> i64
    %1257 = arith.cmpi ult, %1256, %c1_i64_523 : i64
    scf.if %1257 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1256, %c1_i64_523 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    %c0_i32_524 = arith.constant 0 : i32
    %1258 = arith.cmpi ne, %1255, %c0_i32_524 : i32
    cf.cond_br %1258, ^bb99, ^bb110
  ^bb109:  // pred: ^bb106
    %c5_i32_525 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_525) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // pred: ^bb108
    %c1_i64_526 = arith.constant 1 : i64
    %1259 = llvm.load %14 : !llvm.ptr -> i64
    %1260 = arith.cmpi ult, %1259, %c1_i64_526 : i64
    scf.if %1260 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1261 = arith.subi %1259, %c1_i64_526 : i64
      llvm.store %1261, %14 : i64, !llvm.ptr
    }
    cf.br ^bb98
  }
  func.func @f71(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_9 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_9 x i64 : (i32) -> !llvm.ptr
    llvm.store %10, %11 : i64, !llvm.ptr
    %12 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %15 = llvm.load %11 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c1_i64 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %15, %c1_i64 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c1_i64_10 = arith.constant 1 : i64
    %17 = llvm.load %11 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c1_i64_10 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %17, %c1_i64_10 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %19 = llvm.load %11 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %19, %c3_i64 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_11 = arith.constant 3 : i64
    %22 = llvm.load %11 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c3_i64_11 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %22, %c3_i64_11 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_12 = arith.constant 1 : i64
    %25 = llvm.load %11 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_12 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %25, %c1_i64_12 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i32 = arith.constant 3 : i32
    %c3_i64_13 = arith.constant 3 : i64
    %27 = llvm.load %11 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c3_i64_13 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %27, %c3_i64_13 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %29 = arith.addi %24, %c3_i32 : i32
    %c1_i64_14 = arith.constant 1 : i64
    %30 = llvm.load %11 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c1_i64_14 : i64
    scf.if %31 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %30, %c1_i64_14 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-4_i32 = arith.constant -4 : i32
    %c3_i64_15 = arith.constant 3 : i64
    %32 = llvm.load %11 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c3_i64_15 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %32, %c3_i64_15 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %34 = arith.andi %29, %c-4_i32 : i32
    %c3_i64_16 = arith.constant 3 : i64
    %35 = llvm.load %11 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %c3_i64_16 : i64
    scf.if %36 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %35, %c3_i64_16 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %34, %2 : i32, !llvm.ptr
    %c3_i64_17 = arith.constant 3 : i64
    %37 = llvm.load %11 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c3_i64_17 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %37, %c3_i64_17 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_18 = arith.constant 3 : i64
    %40 = llvm.load %11 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c3_i64_18 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %40, %c3_i64_18 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %42 = arith.subi %34, %39 : i32
    %c3_i64_19 = arith.constant 3 : i64
    %43 = llvm.load %11 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c3_i64_19 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %43, %c3_i64_19 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %42, %3 : i32, !llvm.ptr
    %c3_i64_20 = arith.constant 3 : i64
    %45 = llvm.load %11 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_20 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %45, %c3_i64_20 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %47 = arith.cmpi ult, %21, %42 : i32
    %48 = arith.extui %47 : i1 to i32
    %c1_i64_21 = arith.constant 1 : i64
    %49 = llvm.load %11 : !llvm.ptr -> i64
    %50 = arith.cmpi ult, %49, %c1_i64_21 : i64
    scf.if %50 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %49, %c1_i64_21 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_22 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %48, %c0_i32_22 : i32
    cf.cond_br %51, ^bb4, ^bb5
  ^bb2(%52: i32):  // 3 preds: ^bb3, ^bb32, ^bb36
    return %52 : i32
  ^bb3:  // 3 preds: ^bb24, ^bb37, ^bb44
    %c3_i64_23 = arith.constant 3 : i64
    %53 = llvm.load %11 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c3_i64_23 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %53, %c3_i64_23 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %55 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i64_24 = arith.constant 1 : i64
    %56 = llvm.load %11 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c1_i64_24 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %56, %c1_i64_24 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb2(%55 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %c1_i64_25 = arith.constant 1 : i64
    %58 = llvm.load %11 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c1_i64_25 : i64
    scf.if %59 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %58, %c1_i64_25 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i64_26 = arith.constant 3 : i64
    %60 = llvm.load %11 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c3_i64_26 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %60, %c3_i64_26 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_27 = arith.constant 1 : i64
    %63 = llvm.load %11 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c1_i64_27 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %63, %c1_i64_27 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_28 = arith.constant 0 : i32
    %65 = arith.cmpi ne, %62, %c0_i32_28 : i32
    cf.cond_br %65, ^bb35, ^bb36
  ^bb5:  // pred: ^bb1
    %c3_i64_29 = arith.constant 3 : i64
    %66 = llvm.load %11 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c3_i64_29 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %66, %c3_i64_29 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_30 = arith.constant 3 : i64
    %69 = llvm.load %11 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c3_i64_30 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %69, %c3_i64_30 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %71 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_31 = arith.constant 3 : i64
    %72 = llvm.load %11 : !llvm.ptr -> i64
    %73 = arith.cmpi ult, %72, %c3_i64_31 : i64
    scf.if %73 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %72, %c3_i64_31 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %74 = arith.subi %68, %71 : i32
    %c3_i64_32 = arith.constant 3 : i64
    %75 = llvm.load %11 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c3_i64_32 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %75, %c3_i64_32 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %74, %4 : i32, !llvm.ptr
    %c1_i64_33 = arith.constant 1 : i64
    %77 = llvm.load %11 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c1_i64_33 : i64
    scf.if %78 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %77, %c1_i64_33 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c3_i64_34 = arith.constant 3 : i64
    %79 = llvm.load %11 : !llvm.ptr -> i64
    %80 = arith.cmpi ult, %79, %c3_i64_34 : i64
    scf.if %80 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %79, %c3_i64_34 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %81 = arith.cmpi ult, %74, %c4_i32 : i32
    %82 = arith.extui %81 : i1 to i32
    %c1_i64_35 = arith.constant 1 : i64
    %83 = llvm.load %11 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c1_i64_35 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %83, %c1_i64_35 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_36 = arith.constant 0 : i32
    %85 = arith.cmpi ne, %82, %c0_i32_36 : i32
    cf.cond_br %85, ^bb4, ^bb6
  ^bb6:  // pred: ^bb5
    %c3_i64_37 = arith.constant 3 : i64
    %86 = llvm.load %11 : !llvm.ptr -> i64
    %87 = arith.cmpi ult, %86, %c3_i64_37 : i64
    scf.if %87 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %86, %c3_i64_37 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %88 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_38 = arith.constant 1 : i64
    %89 = llvm.load %11 : !llvm.ptr -> i64
    %90 = arith.cmpi ult, %89, %c1_i64_38 : i64
    scf.if %90 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %89, %c1_i64_38 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i32_39 = arith.constant 3 : i32
    %c3_i64_40 = arith.constant 3 : i64
    %91 = llvm.load %11 : !llvm.ptr -> i64
    %92 = arith.cmpi ult, %91, %c3_i64_40 : i64
    scf.if %92 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %91, %c3_i64_40 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %93 = arith.andi %88, %c3_i32_39 : i32
    %c3_i64_41 = arith.constant 3 : i64
    %94 = llvm.load %11 : !llvm.ptr -> i64
    %95 = arith.cmpi ult, %94, %c3_i64_41 : i64
    scf.if %95 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %94, %c3_i64_41 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %93, %5 : i32, !llvm.ptr
    %c1_i64_42 = arith.constant 1 : i64
    %96 = llvm.load %11 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c1_i64_42 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %96, %c1_i64_42 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_43 = arith.constant 0 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %98 = llvm.load %11 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_44 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %98, %c3_i64_44 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_43, %6 : i32, !llvm.ptr
    %c1_i64_45 = arith.constant 1 : i64
    %100 = llvm.load %11 : !llvm.ptr -> i64
    %101 = arith.cmpi ult, %100, %c1_i64_45 : i64
    scf.if %101 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %100, %c1_i64_45 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_46 = arith.constant 0 : i32
    %c3_i64_47 = arith.constant 3 : i64
    %102 = llvm.load %11 : !llvm.ptr -> i64
    %103 = arith.cmpi ult, %102, %c3_i64_47 : i64
    scf.if %103 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %102, %c3_i64_47 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_46, %1 : i32, !llvm.ptr
    %c1_i64_48 = arith.constant 1 : i64
    %104 = llvm.load %11 : !llvm.ptr -> i64
    %105 = arith.cmpi ult, %104, %c1_i64_48 : i64
    scf.if %105 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %104, %c1_i64_48 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i64_49 = arith.constant 3 : i64
    %106 = llvm.load %11 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c3_i64_49 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %106, %c3_i64_49 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %108 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_50 = arith.constant 3 : i64
    %109 = llvm.load %11 : !llvm.ptr -> i64
    %110 = arith.cmpi ult, %109, %c3_i64_50 : i64
    scf.if %110 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %109, %c3_i64_50 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %111 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_51 = arith.constant 3 : i64
    %112 = llvm.load %11 : !llvm.ptr -> i64
    %113 = arith.cmpi ult, %112, %c3_i64_51 : i64
    scf.if %113 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %112, %c3_i64_51 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %114 = arith.cmpi eq, %108, %111 : i32
    %115 = arith.extui %114 : i1 to i32
    %c3_i64_52 = arith.constant 3 : i64
    %116 = llvm.load %11 : !llvm.ptr -> i64
    %117 = arith.cmpi ult, %116, %c3_i64_52 : i64
    scf.if %117 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %116, %c3_i64_52 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %115, %7 : i32, !llvm.ptr
    %c1_i64_53 = arith.constant 1 : i64
    %118 = llvm.load %11 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c1_i64_53 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %118, %c1_i64_53 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_54 = arith.constant 0 : i32
    %120 = arith.cmpi ne, %115, %c0_i32_54 : i32
    cf.cond_br %120, ^bb7, ^bb8
  ^bb7:  // 3 preds: ^bb6, ^bb9, ^bb16
    %c3_i64_55 = arith.constant 3 : i64
    %121 = llvm.load %11 : !llvm.ptr -> i64
    %122 = arith.cmpi ult, %121, %c3_i64_55 : i64
    scf.if %122 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %121, %c3_i64_55 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_56 = arith.constant 3 : i64
    %124 = llvm.load %11 : !llvm.ptr -> i64
    %125 = arith.cmpi ult, %124, %c3_i64_56 : i64
    scf.if %125 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %124, %c3_i64_56 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %126 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_57 = arith.constant 3 : i64
    %127 = llvm.load %11 : !llvm.ptr -> i64
    %128 = arith.cmpi ult, %127, %c3_i64_57 : i64
    scf.if %128 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %127, %c3_i64_57 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %129 = arith.addi %123, %126 : i32
    %c3_i64_58 = arith.constant 3 : i64
    %130 = llvm.load %11 : !llvm.ptr -> i64
    %131 = arith.cmpi ult, %130, %c3_i64_58 : i64
    scf.if %131 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %130, %c3_i64_58 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %129, %9 : i32, !llvm.ptr
    %c1_i64_59 = arith.constant 1 : i64
    %132 = llvm.load %11 : !llvm.ptr -> i64
    %133 = arith.cmpi ult, %132, %c1_i64_59 : i64
    scf.if %133 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %132, %c1_i64_59 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i64_60 = arith.constant 3 : i64
    %134 = llvm.load %11 : !llvm.ptr -> i64
    %135 = arith.cmpi ult, %134, %c3_i64_60 : i64
    scf.if %135 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %134, %c3_i64_60 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %136 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_61 = arith.constant 3 : i64
    %137 = llvm.load %11 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c3_i64_61 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %137, %c3_i64_61 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_62 = arith.constant 0 : i32
    %139 = arith.cmpi eq, %136, %c0_i32_62 : i32
    %140 = arith.extui %139 : i1 to i32
    %c1_i64_63 = arith.constant 1 : i64
    %141 = llvm.load %11 : !llvm.ptr -> i64
    %142 = arith.cmpi ult, %141, %c1_i64_63 : i64
    scf.if %142 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %141, %c1_i64_63 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_64 = arith.constant 0 : i32
    %143 = arith.cmpi ne, %140, %c0_i32_64 : i32
    cf.cond_br %143, ^bb19, ^bb20
  ^bb8:  // pred: ^bb6
    %c1_i64_65 = arith.constant 1 : i64
    %144 = llvm.load %11 : !llvm.ptr -> i64
    %145 = arith.cmpi ult, %144, %c1_i64_65 : i64
    scf.if %145 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %144, %c1_i64_65 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_66 = arith.constant 0 : i32
    %c3_i64_67 = arith.constant 3 : i64
    %146 = llvm.load %11 : !llvm.ptr -> i64
    %147 = arith.cmpi ult, %146, %c3_i64_67 : i64
    scf.if %147 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %146, %c3_i64_67 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_66, %1 : i32, !llvm.ptr
    %c1_i64_68 = arith.constant 1 : i64
    %148 = llvm.load %11 : !llvm.ptr -> i64
    %149 = arith.cmpi ult, %148, %c1_i64_68 : i64
    scf.if %149 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %148, %c1_i64_68 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c1_i64_69 = arith.constant 1 : i64
    %150 = llvm.load %11 : !llvm.ptr -> i64
    %151 = arith.cmpi ult, %150, %c1_i64_69 : i64
    scf.if %151 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %150, %c1_i64_69 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i64_70 = arith.constant 3 : i64
    %152 = llvm.load %11 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c3_i64_70 : i64
    scf.if %153 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %152, %c3_i64_70 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %154 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_71 = arith.constant 3 : i64
    %155 = llvm.load %11 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %c3_i64_71 : i64
    scf.if %156 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %155, %c3_i64_71 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %157 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_72 = arith.constant 3 : i64
    %158 = llvm.load %11 : !llvm.ptr -> i64
    %159 = arith.cmpi ult, %158, %c3_i64_72 : i64
    scf.if %159 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %158, %c3_i64_72 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %160 = arith.subi %154, %157 : i32
    %c3_i64_73 = arith.constant 3 : i64
    %161 = llvm.load %11 : !llvm.ptr -> i64
    %162 = arith.cmpi ult, %161, %c3_i64_73 : i64
    scf.if %162 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %161, %c3_i64_73 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %160, %8 : i32, !llvm.ptr
    %c1_i64_74 = arith.constant 1 : i64
    %163 = llvm.load %11 : !llvm.ptr -> i64
    %164 = arith.cmpi ult, %163, %c1_i64_74 : i64
    scf.if %164 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %163, %c1_i64_74 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-4_i32_75 = arith.constant -4 : i32
    %c3_i64_76 = arith.constant 3 : i64
    %165 = llvm.load %11 : !llvm.ptr -> i64
    %166 = arith.cmpi ult, %165, %c3_i64_76 : i64
    scf.if %166 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %165, %c3_i64_76 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %167 = arith.cmpi ule, %160, %c-4_i32_75 : i32
    %168 = arith.extui %167 : i1 to i32
    %c1_i64_77 = arith.constant 1 : i64
    %169 = llvm.load %11 : !llvm.ptr -> i64
    %170 = arith.cmpi ult, %169, %c1_i64_77 : i64
    scf.if %170 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %169, %c1_i64_77 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_78 = arith.constant 0 : i32
    %171 = arith.cmpi ne, %168, %c0_i32_78 : i32
    cf.cond_br %171, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %c3_i64_79 = arith.constant 3 : i64
    %172 = llvm.load %11 : !llvm.ptr -> i64
    %173 = arith.cmpi ult, %172, %c3_i64_79 : i64
    scf.if %173 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %172, %c3_i64_79 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %174 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_80 = arith.constant 1 : i64
    %175 = llvm.load %11 : !llvm.ptr -> i64
    %176 = arith.cmpi ult, %175, %c1_i64_80 : i64
    scf.if %176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %175, %c1_i64_80 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_81 = arith.constant 0 : i32
    %177 = arith.cmpi ne, %174, %c0_i32_81 : i32
    cf.cond_br %177, ^bb7, ^bb15
  ^bb10:  // pred: ^bb8
    %c1_i64_82 = arith.constant 1 : i64
    %178 = llvm.load %11 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c1_i64_82 : i64
    scf.if %179 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %178, %c1_i64_82 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_83 = arith.constant 0 : i32
    %c3_i64_84 = arith.constant 3 : i64
    %180 = llvm.load %11 : !llvm.ptr -> i64
    %181 = arith.cmpi ult, %180, %c3_i64_84 : i64
    scf.if %181 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %180, %c3_i64_84 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_83, %9 : i32, !llvm.ptr
    %c1_i64_85 = arith.constant 1 : i64
    %182 = llvm.load %11 : !llvm.ptr -> i64
    %183 = arith.cmpi ult, %182, %c1_i64_85 : i64
    scf.if %183 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %182, %c1_i64_85 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c1_i64_86 = arith.constant 1 : i64
    %184 = llvm.load %11 : !llvm.ptr -> i64
    %185 = arith.cmpi ult, %184, %c1_i64_86 : i64
    scf.if %185 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %184, %c1_i64_86 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_87 = arith.constant 0 : i32
    %c3_i64_88 = arith.constant 3 : i64
    %186 = llvm.load %11 : !llvm.ptr -> i64
    %187 = arith.cmpi ult, %186, %c3_i64_88 : i64
    scf.if %187 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %186, %c3_i64_88 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_87, %9 : i32, !llvm.ptr
    %c1_i64_89 = arith.constant 1 : i64
    %188 = llvm.load %11 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c1_i64_89 : i64
    scf.if %189 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %188, %c1_i64_89 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb12:  // pred: ^bb14
    %c1_i64_90 = arith.constant 1 : i64
    %190 = llvm.load %11 : !llvm.ptr -> i64
    %191 = arith.cmpi ult, %190, %c1_i64_90 : i64
    scf.if %191 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %190, %c1_i64_90 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb13
    %c3_i64_91 = arith.constant 3 : i64
    %192 = llvm.load %11 : !llvm.ptr -> i64
    %193 = arith.cmpi ult, %192, %c3_i64_91 : i64
    scf.if %193 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %192, %c3_i64_91 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %194 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_92 = arith.constant 3 : i64
    %195 = llvm.load %11 : !llvm.ptr -> i64
    %196 = arith.cmpi ult, %195, %c3_i64_92 : i64
    scf.if %196 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %195, %c3_i64_92 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %197 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_93 = arith.constant 3 : i64
    %198 = llvm.load %11 : !llvm.ptr -> i64
    %199 = arith.cmpi ult, %198, %c3_i64_93 : i64
    scf.if %199 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %198, %c3_i64_93 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %200 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_94 = arith.constant 3 : i64
    %201 = llvm.load %11 : !llvm.ptr -> i64
    %202 = arith.cmpi ult, %201, %c3_i64_94 : i64
    scf.if %202 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %201, %c3_i64_94 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %203 = arith.addi %197, %200 : i32
    %c3_i64_95 = arith.constant 3 : i64
    %204 = llvm.load %11 : !llvm.ptr -> i64
    %205 = arith.cmpi ult, %204, %c3_i64_95 : i64
    scf.if %205 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %204, %c3_i64_95 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %203, %2 : i32, !llvm.ptr
    %c3_i64_96 = arith.constant 3 : i64
    %206 = llvm.load %11 : !llvm.ptr -> i64
    %207 = arith.cmpi ult, %206, %c3_i64_96 : i64
    scf.if %207 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %206, %c3_i64_96 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %208 = arith.extui %203 : i32 to i64
    %209 = arith.addi %208, %c0_i64 : i64
    %210 = llvm.getelementptr %14[%209] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %211 = llvm.load volatile %210 {alignment = 1 : i64} : !llvm.ptr -> i8
    %212 = arith.extsi %211 : i8 to i32
    %c1_i64_97 = arith.constant 1 : i64
    %213 = llvm.load %11 : !llvm.ptr -> i64
    %214 = arith.cmpi ult, %213, %c1_i64_97 : i64
    scf.if %214 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %213, %c1_i64_97 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32 = arith.constant -65 : i32
    %c3_i64_98 = arith.constant 3 : i64
    %215 = llvm.load %11 : !llvm.ptr -> i64
    %216 = arith.cmpi ult, %215, %c3_i64_98 : i64
    scf.if %216 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %215, %c3_i64_98 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %217 = arith.cmpi sgt, %212, %c-65_i32 : i32
    %218 = arith.extui %217 : i1 to i32
    %c3_i64_99 = arith.constant 3 : i64
    %219 = llvm.load %11 : !llvm.ptr -> i64
    %220 = arith.cmpi ult, %219, %c3_i64_99 : i64
    scf.if %220 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %219, %c3_i64_99 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %221 = arith.addi %194, %218 : i32
    %c3_i64_100 = arith.constant 3 : i64
    %222 = llvm.load %11 : !llvm.ptr -> i64
    %223 = arith.cmpi ult, %222, %c3_i64_100 : i64
    scf.if %223 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %222, %c3_i64_100 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %224 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_101 = arith.constant 1 : i64
    %225 = llvm.load %11 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c1_i64_101 : i64
    scf.if %226 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %225, %c1_i64_101 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c1_i32_102 = arith.constant 1 : i32
    %c3_i64_103 = arith.constant 3 : i64
    %227 = llvm.load %11 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %c3_i64_103 : i64
    scf.if %228 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %227, %c3_i64_103 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %229 = arith.addi %224, %c1_i32_102 : i32
    %c3_i64_104 = arith.constant 3 : i64
    %230 = llvm.load %11 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c3_i64_104 : i64
    scf.if %231 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %230, %c3_i64_104 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64_105 = arith.constant 0 : i64
    %232 = arith.extui %229 : i32 to i64
    %233 = arith.addi %232, %c0_i64_105 : i64
    %234 = llvm.getelementptr %14[%233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %235 = llvm.load volatile %234 {alignment = 1 : i64} : !llvm.ptr -> i8
    %236 = arith.extsi %235 : i8 to i32
    %c1_i64_106 = arith.constant 1 : i64
    %237 = llvm.load %11 : !llvm.ptr -> i64
    %238 = arith.cmpi ult, %237, %c1_i64_106 : i64
    scf.if %238 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %237, %c1_i64_106 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32_107 = arith.constant -65 : i32
    %c3_i64_108 = arith.constant 3 : i64
    %239 = llvm.load %11 : !llvm.ptr -> i64
    %240 = arith.cmpi ult, %239, %c3_i64_108 : i64
    scf.if %240 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %239, %c3_i64_108 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %241 = arith.cmpi sgt, %236, %c-65_i32_107 : i32
    %242 = arith.extui %241 : i1 to i32
    %c3_i64_109 = arith.constant 3 : i64
    %243 = llvm.load %11 : !llvm.ptr -> i64
    %244 = arith.cmpi ult, %243, %c3_i64_109 : i64
    scf.if %244 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %243, %c3_i64_109 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %245 = arith.addi %221, %242 : i32
    %c3_i64_110 = arith.constant 3 : i64
    %246 = llvm.load %11 : !llvm.ptr -> i64
    %247 = arith.cmpi ult, %246, %c3_i64_110 : i64
    scf.if %247 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %246, %c3_i64_110 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %248 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_111 = arith.constant 1 : i64
    %249 = llvm.load %11 : !llvm.ptr -> i64
    %250 = arith.cmpi ult, %249, %c1_i64_111 : i64
    scf.if %250 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %249, %c1_i64_111 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c2_i32 = arith.constant 2 : i32
    %c3_i64_112 = arith.constant 3 : i64
    %251 = llvm.load %11 : !llvm.ptr -> i64
    %252 = arith.cmpi ult, %251, %c3_i64_112 : i64
    scf.if %252 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %251, %c3_i64_112 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %253 = arith.addi %248, %c2_i32 : i32
    %c3_i64_113 = arith.constant 3 : i64
    %254 = llvm.load %11 : !llvm.ptr -> i64
    %255 = arith.cmpi ult, %254, %c3_i64_113 : i64
    scf.if %255 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %254, %c3_i64_113 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64_114 = arith.constant 0 : i64
    %256 = arith.extui %253 : i32 to i64
    %257 = arith.addi %256, %c0_i64_114 : i64
    %258 = llvm.getelementptr %14[%257] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %259 = llvm.load volatile %258 {alignment = 1 : i64} : !llvm.ptr -> i8
    %260 = arith.extsi %259 : i8 to i32
    %c1_i64_115 = arith.constant 1 : i64
    %261 = llvm.load %11 : !llvm.ptr -> i64
    %262 = arith.cmpi ult, %261, %c1_i64_115 : i64
    scf.if %262 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %261, %c1_i64_115 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32_116 = arith.constant -65 : i32
    %c3_i64_117 = arith.constant 3 : i64
    %263 = llvm.load %11 : !llvm.ptr -> i64
    %264 = arith.cmpi ult, %263, %c3_i64_117 : i64
    scf.if %264 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %263, %c3_i64_117 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %265 = arith.cmpi sgt, %260, %c-65_i32_116 : i32
    %266 = arith.extui %265 : i1 to i32
    %c3_i64_118 = arith.constant 3 : i64
    %267 = llvm.load %11 : !llvm.ptr -> i64
    %268 = arith.cmpi ult, %267, %c3_i64_118 : i64
    scf.if %268 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %267, %c3_i64_118 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %269 = arith.addi %245, %266 : i32
    %c3_i64_119 = arith.constant 3 : i64
    %270 = llvm.load %11 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %270, %c3_i64_119 : i64
    scf.if %271 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %270, %c3_i64_119 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %272 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_120 = arith.constant 1 : i64
    %273 = llvm.load %11 : !llvm.ptr -> i64
    %274 = arith.cmpi ult, %273, %c1_i64_120 : i64
    scf.if %274 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %273, %c1_i64_120 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i32_121 = arith.constant 3 : i32
    %c3_i64_122 = arith.constant 3 : i64
    %275 = llvm.load %11 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_122 : i64
    scf.if %276 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %275, %c3_i64_122 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %277 = arith.addi %272, %c3_i32_121 : i32
    %c3_i64_123 = arith.constant 3 : i64
    %278 = llvm.load %11 : !llvm.ptr -> i64
    %279 = arith.cmpi ult, %278, %c3_i64_123 : i64
    scf.if %279 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %278, %c3_i64_123 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64_124 = arith.constant 0 : i64
    %280 = arith.extui %277 : i32 to i64
    %281 = arith.addi %280, %c0_i64_124 : i64
    %282 = llvm.getelementptr %14[%281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %283 = llvm.load volatile %282 {alignment = 1 : i64} : !llvm.ptr -> i8
    %284 = arith.extsi %283 : i8 to i32
    %c1_i64_125 = arith.constant 1 : i64
    %285 = llvm.load %11 : !llvm.ptr -> i64
    %286 = arith.cmpi ult, %285, %c1_i64_125 : i64
    scf.if %286 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %285, %c1_i64_125 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32_126 = arith.constant -65 : i32
    %c3_i64_127 = arith.constant 3 : i64
    %287 = llvm.load %11 : !llvm.ptr -> i64
    %288 = arith.cmpi ult, %287, %c3_i64_127 : i64
    scf.if %288 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %287, %c3_i64_127 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %289 = arith.cmpi sgt, %284, %c-65_i32_126 : i32
    %290 = arith.extui %289 : i1 to i32
    %c3_i64_128 = arith.constant 3 : i64
    %291 = llvm.load %11 : !llvm.ptr -> i64
    %292 = arith.cmpi ult, %291, %c3_i64_128 : i64
    scf.if %292 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %291, %c3_i64_128 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %293 = arith.addi %269, %290 : i32
    %c3_i64_129 = arith.constant 3 : i64
    %294 = llvm.load %11 : !llvm.ptr -> i64
    %295 = arith.cmpi ult, %294, %c3_i64_129 : i64
    scf.if %295 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %294, %c3_i64_129 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %293, %1 : i32, !llvm.ptr
    %c3_i64_130 = arith.constant 3 : i64
    %296 = llvm.load %11 : !llvm.ptr -> i64
    %297 = arith.cmpi ult, %296, %c3_i64_130 : i64
    scf.if %297 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %296, %c3_i64_130 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %298 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64_131 = arith.constant 1 : i64
    %299 = llvm.load %11 : !llvm.ptr -> i64
    %300 = arith.cmpi ult, %299, %c1_i64_131 : i64
    scf.if %300 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %299, %c1_i64_131 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c4_i32_132 = arith.constant 4 : i32
    %c3_i64_133 = arith.constant 3 : i64
    %301 = llvm.load %11 : !llvm.ptr -> i64
    %302 = arith.cmpi ult, %301, %c3_i64_133 : i64
    scf.if %302 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %301, %c3_i64_133 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %303 = arith.addi %298, %c4_i32_132 : i32
    %c3_i64_134 = arith.constant 3 : i64
    %304 = llvm.load %11 : !llvm.ptr -> i64
    %305 = arith.cmpi ult, %304, %c3_i64_134 : i64
    scf.if %305 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %304, %c3_i64_134 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %303, %9 : i32, !llvm.ptr
    %c1_i64_135 = arith.constant 1 : i64
    %306 = llvm.load %11 : !llvm.ptr -> i64
    %307 = arith.cmpi ult, %306, %c1_i64_135 : i64
    scf.if %307 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %306, %c1_i64_135 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_136 = arith.constant 0 : i32
    %308 = arith.cmpi ne, %303, %c0_i32_136 : i32
    cf.cond_br %308, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    %c1_i64_137 = arith.constant 1 : i64
    %309 = llvm.load %11 : !llvm.ptr -> i64
    %310 = arith.cmpi ult, %309, %c1_i64_137 : i64
    scf.if %310 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %309, %c1_i64_137 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb12
  ^bb15:  // pred: ^bb9
    %c3_i64_138 = arith.constant 3 : i64
    %311 = llvm.load %11 : !llvm.ptr -> i64
    %312 = arith.cmpi ult, %311, %c3_i64_138 : i64
    scf.if %312 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %311, %c3_i64_138 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %313 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_139 = arith.constant 3 : i64
    %314 = llvm.load %11 : !llvm.ptr -> i64
    %315 = arith.cmpi ult, %314, %c3_i64_139 : i64
    scf.if %315 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %314, %c3_i64_139 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %316 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_140 = arith.constant 3 : i64
    %317 = llvm.load %11 : !llvm.ptr -> i64
    %318 = arith.cmpi ult, %317, %c3_i64_140 : i64
    scf.if %318 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %317, %c3_i64_140 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %319 = arith.addi %313, %316 : i32
    %c3_i64_141 = arith.constant 3 : i64
    %320 = llvm.load %11 : !llvm.ptr -> i64
    %321 = arith.cmpi ult, %320, %c3_i64_141 : i64
    scf.if %321 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %320, %c3_i64_141 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %319, %2 : i32, !llvm.ptr
    %c1_i64_142 = arith.constant 1 : i64
    %322 = llvm.load %11 : !llvm.ptr -> i64
    %323 = arith.cmpi ult, %322, %c1_i64_142 : i64
    scf.if %323 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %322, %c1_i64_142 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb17
  ^bb16:  // pred: ^bb18
    %c1_i64_143 = arith.constant 1 : i64
    %324 = llvm.load %11 : !llvm.ptr -> i64
    %325 = arith.cmpi ult, %324, %c1_i64_143 : i64
    scf.if %325 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %324, %c1_i64_143 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb7
  ^bb17:  // 2 preds: ^bb15, ^bb17
    %c3_i64_144 = arith.constant 3 : i64
    %326 = llvm.load %11 : !llvm.ptr -> i64
    %327 = arith.cmpi ult, %326, %c3_i64_144 : i64
    scf.if %327 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %326, %c3_i64_144 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %328 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_145 = arith.constant 3 : i64
    %329 = llvm.load %11 : !llvm.ptr -> i64
    %330 = arith.cmpi ult, %329, %c3_i64_145 : i64
    scf.if %330 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %329, %c3_i64_145 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %331 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_146 = arith.constant 3 : i64
    %332 = llvm.load %11 : !llvm.ptr -> i64
    %333 = arith.cmpi ult, %332, %c3_i64_146 : i64
    scf.if %333 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %332, %c3_i64_146 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64_147 = arith.constant 0 : i64
    %334 = arith.extui %331 : i32 to i64
    %335 = arith.addi %334, %c0_i64_147 : i64
    %336 = llvm.getelementptr %14[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %337 = llvm.load volatile %336 {alignment = 1 : i64} : !llvm.ptr -> i8
    %338 = arith.extsi %337 : i8 to i32
    %c1_i64_148 = arith.constant 1 : i64
    %339 = llvm.load %11 : !llvm.ptr -> i64
    %340 = arith.cmpi ult, %339, %c1_i64_148 : i64
    scf.if %340 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %339, %c1_i64_148 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32_149 = arith.constant -65 : i32
    %c3_i64_150 = arith.constant 3 : i64
    %341 = llvm.load %11 : !llvm.ptr -> i64
    %342 = arith.cmpi ult, %341, %c3_i64_150 : i64
    scf.if %342 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %341, %c3_i64_150 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %343 = arith.cmpi sgt, %338, %c-65_i32_149 : i32
    %344 = arith.extui %343 : i1 to i32
    %c3_i64_151 = arith.constant 3 : i64
    %345 = llvm.load %11 : !llvm.ptr -> i64
    %346 = arith.cmpi ult, %345, %c3_i64_151 : i64
    scf.if %346 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %345, %c3_i64_151 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %347 = arith.addi %328, %344 : i32
    %c3_i64_152 = arith.constant 3 : i64
    %348 = llvm.load %11 : !llvm.ptr -> i64
    %349 = arith.cmpi ult, %348, %c3_i64_152 : i64
    scf.if %349 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %348, %c3_i64_152 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %347, %1 : i32, !llvm.ptr
    %c3_i64_153 = arith.constant 3 : i64
    %350 = llvm.load %11 : !llvm.ptr -> i64
    %351 = arith.cmpi ult, %350, %c3_i64_153 : i64
    scf.if %351 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %350, %c3_i64_153 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %352 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_154 = arith.constant 1 : i64
    %353 = llvm.load %11 : !llvm.ptr -> i64
    %354 = arith.cmpi ult, %353, %c1_i64_154 : i64
    scf.if %354 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %353, %c1_i64_154 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c1_i32_155 = arith.constant 1 : i32
    %c3_i64_156 = arith.constant 3 : i64
    %355 = llvm.load %11 : !llvm.ptr -> i64
    %356 = arith.cmpi ult, %355, %c3_i64_156 : i64
    scf.if %356 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %355, %c3_i64_156 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %357 = arith.addi %352, %c1_i32_155 : i32
    %c3_i64_157 = arith.constant 3 : i64
    %358 = llvm.load %11 : !llvm.ptr -> i64
    %359 = arith.cmpi ult, %358, %c3_i64_157 : i64
    scf.if %359 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %358, %c3_i64_157 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %357, %2 : i32, !llvm.ptr
    %c3_i64_158 = arith.constant 3 : i64
    %360 = llvm.load %11 : !llvm.ptr -> i64
    %361 = arith.cmpi ult, %360, %c3_i64_158 : i64
    scf.if %361 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %360, %c3_i64_158 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %362 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i64_159 = arith.constant 1 : i64
    %363 = llvm.load %11 : !llvm.ptr -> i64
    %364 = arith.cmpi ult, %363, %c1_i64_159 : i64
    scf.if %364 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %363, %c1_i64_159 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c1_i32_160 = arith.constant 1 : i32
    %c3_i64_161 = arith.constant 3 : i64
    %365 = llvm.load %11 : !llvm.ptr -> i64
    %366 = arith.cmpi ult, %365, %c3_i64_161 : i64
    scf.if %366 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %365, %c3_i64_161 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %367 = arith.addi %362, %c1_i32_160 : i32
    %c3_i64_162 = arith.constant 3 : i64
    %368 = llvm.load %11 : !llvm.ptr -> i64
    %369 = arith.cmpi ult, %368, %c3_i64_162 : i64
    scf.if %369 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %368, %c3_i64_162 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %367, %8 : i32, !llvm.ptr
    %c1_i64_163 = arith.constant 1 : i64
    %370 = llvm.load %11 : !llvm.ptr -> i64
    %371 = arith.cmpi ult, %370, %c1_i64_163 : i64
    scf.if %371 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %370, %c1_i64_163 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_164 = arith.constant 0 : i32
    %372 = arith.cmpi ne, %367, %c0_i32_164 : i32
    cf.cond_br %372, ^bb17, ^bb18
  ^bb18:  // pred: ^bb17
    %c1_i64_165 = arith.constant 1 : i64
    %373 = llvm.load %11 : !llvm.ptr -> i64
    %374 = arith.cmpi ult, %373, %c1_i64_165 : i64
    scf.if %374 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %373, %c1_i64_165 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb16
  ^bb19:  // 4 preds: ^bb7, ^bb20, ^bb21, ^bb22
    %c3_i64_166 = arith.constant 3 : i64
    %375 = llvm.load %11 : !llvm.ptr -> i64
    %376 = arith.cmpi ult, %375, %c3_i64_166 : i64
    scf.if %376 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %375, %c3_i64_166 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %377 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_167 = arith.constant 1 : i64
    %378 = llvm.load %11 : !llvm.ptr -> i64
    %379 = arith.cmpi ult, %378, %c1_i64_167 : i64
    scf.if %379 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %378, %c1_i64_167 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c2_i32_168 = arith.constant 2 : i32
    %c3_i64_169 = arith.constant 3 : i64
    %380 = llvm.load %11 : !llvm.ptr -> i64
    %381 = arith.cmpi ult, %380, %c3_i64_169 : i64
    scf.if %381 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %380, %c3_i64_169 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %382 = arith.cmpi ule, %c2_i32_168, %c31_i32 : i32
    %383 = scf.if %382 -> (i32) {
      %1369 = arith.shrui %377, %c2_i32_168 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_170 = arith.constant 3 : i64
    %384 = llvm.load %11 : !llvm.ptr -> i64
    %385 = arith.cmpi ult, %384, %c3_i64_170 : i64
    scf.if %385 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %384, %c3_i64_170 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %383, %3 : i32, !llvm.ptr
    %c3_i64_171 = arith.constant 3 : i64
    %386 = llvm.load %11 : !llvm.ptr -> i64
    %387 = arith.cmpi ult, %386, %c3_i64_171 : i64
    scf.if %387 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %386, %c3_i64_171 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %388 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_172 = arith.constant 3 : i64
    %389 = llvm.load %11 : !llvm.ptr -> i64
    %390 = arith.cmpi ult, %389, %c3_i64_172 : i64
    scf.if %390 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %389, %c3_i64_172 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %391 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_173 = arith.constant 3 : i64
    %392 = llvm.load %11 : !llvm.ptr -> i64
    %393 = arith.cmpi ult, %392, %c3_i64_173 : i64
    scf.if %393 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %392, %c3_i64_173 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %394 = arith.addi %388, %391 : i32
    %c3_i64_174 = arith.constant 3 : i64
    %395 = llvm.load %11 : !llvm.ptr -> i64
    %396 = arith.cmpi ult, %395, %c3_i64_174 : i64
    scf.if %396 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %395, %c3_i64_174 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %394, %8 : i32, !llvm.ptr
    %c1_i64_175 = arith.constant 1 : i64
    %397 = llvm.load %11 : !llvm.ptr -> i64
    %398 = arith.cmpi ult, %397, %c1_i64_175 : i64
    scf.if %398 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %397, %c1_i64_175 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb24
  ^bb20:  // pred: ^bb7
    %c3_i64_176 = arith.constant 3 : i64
    %399 = llvm.load %11 : !llvm.ptr -> i64
    %400 = arith.cmpi ult, %399, %c3_i64_176 : i64
    scf.if %400 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %399, %c3_i64_176 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %401 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_177 = arith.constant 3 : i64
    %402 = llvm.load %11 : !llvm.ptr -> i64
    %403 = arith.cmpi ult, %402, %c3_i64_177 : i64
    scf.if %403 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %402, %c3_i64_177 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %404 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_178 = arith.constant 1 : i64
    %405 = llvm.load %11 : !llvm.ptr -> i64
    %406 = arith.cmpi ult, %405, %c1_i64_178 : i64
    scf.if %406 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %405, %c1_i64_178 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-4_i32_179 = arith.constant -4 : i32
    %c3_i64_180 = arith.constant 3 : i64
    %407 = llvm.load %11 : !llvm.ptr -> i64
    %408 = arith.cmpi ult, %407, %c3_i64_180 : i64
    scf.if %408 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %407, %c3_i64_180 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %409 = arith.andi %404, %c-4_i32_179 : i32
    %c3_i64_181 = arith.constant 3 : i64
    %410 = llvm.load %11 : !llvm.ptr -> i64
    %411 = arith.cmpi ult, %410, %c3_i64_181 : i64
    scf.if %411 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %410, %c3_i64_181 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %412 = arith.addi %401, %409 : i32
    %c3_i64_182 = arith.constant 3 : i64
    %413 = llvm.load %11 : !llvm.ptr -> i64
    %414 = arith.cmpi ult, %413, %c3_i64_182 : i64
    scf.if %414 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %413, %c3_i64_182 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %412, %2 : i32, !llvm.ptr
    %c3_i64_183 = arith.constant 3 : i64
    %415 = llvm.load %11 : !llvm.ptr -> i64
    %416 = arith.cmpi ult, %415, %c3_i64_183 : i64
    scf.if %416 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %415, %c3_i64_183 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64_184 = arith.constant 0 : i64
    %417 = arith.extui %412 : i32 to i64
    %418 = arith.addi %417, %c0_i64_184 : i64
    %419 = llvm.getelementptr %14[%418] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %420 = llvm.load volatile %419 {alignment = 1 : i64} : !llvm.ptr -> i8
    %421 = arith.extsi %420 : i8 to i32
    %c1_i64_185 = arith.constant 1 : i64
    %422 = llvm.load %11 : !llvm.ptr -> i64
    %423 = arith.cmpi ult, %422, %c1_i64_185 : i64
    scf.if %423 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %422, %c1_i64_185 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32_186 = arith.constant -65 : i32
    %c3_i64_187 = arith.constant 3 : i64
    %424 = llvm.load %11 : !llvm.ptr -> i64
    %425 = arith.cmpi ult, %424, %c3_i64_187 : i64
    scf.if %425 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %424, %c3_i64_187 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %426 = arith.cmpi sgt, %421, %c-65_i32_186 : i32
    %427 = arith.extui %426 : i1 to i32
    %c3_i64_188 = arith.constant 3 : i64
    %428 = llvm.load %11 : !llvm.ptr -> i64
    %429 = arith.cmpi ult, %428, %c3_i64_188 : i64
    scf.if %429 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %428, %c3_i64_188 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %427, %6 : i32, !llvm.ptr
    %c3_i64_189 = arith.constant 3 : i64
    %430 = llvm.load %11 : !llvm.ptr -> i64
    %431 = arith.cmpi ult, %430, %c3_i64_189 : i64
    scf.if %431 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %430, %c3_i64_189 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %432 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_190 = arith.constant 1 : i64
    %433 = llvm.load %11 : !llvm.ptr -> i64
    %434 = arith.cmpi ult, %433, %c1_i64_190 : i64
    scf.if %434 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %433, %c1_i64_190 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c1_i32_191 = arith.constant 1 : i32
    %c3_i64_192 = arith.constant 3 : i64
    %435 = llvm.load %11 : !llvm.ptr -> i64
    %436 = arith.cmpi ult, %435, %c3_i64_192 : i64
    scf.if %436 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %435, %c3_i64_192 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %437 = arith.cmpi eq, %432, %c1_i32_191 : i32
    %438 = arith.extui %437 : i1 to i32
    %c1_i64_193 = arith.constant 1 : i64
    %439 = llvm.load %11 : !llvm.ptr -> i64
    %440 = arith.cmpi ult, %439, %c1_i64_193 : i64
    scf.if %440 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %439, %c1_i64_193 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_194 = arith.constant 0 : i32
    %441 = arith.cmpi ne, %438, %c0_i32_194 : i32
    cf.cond_br %441, ^bb19, ^bb21
  ^bb21:  // pred: ^bb20
    %c3_i64_195 = arith.constant 3 : i64
    %442 = llvm.load %11 : !llvm.ptr -> i64
    %443 = arith.cmpi ult, %442, %c3_i64_195 : i64
    scf.if %443 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %442, %c3_i64_195 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %444 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_196 = arith.constant 3 : i64
    %445 = llvm.load %11 : !llvm.ptr -> i64
    %446 = arith.cmpi ult, %445, %c3_i64_196 : i64
    scf.if %446 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %445, %c3_i64_196 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %447 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_197 = arith.constant 3 : i64
    %448 = llvm.load %11 : !llvm.ptr -> i64
    %449 = arith.cmpi ult, %448, %c3_i64_197 : i64
    scf.if %449 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %448, %c3_i64_197 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c1_i64_198 = arith.constant 1 : i64
    %450 = arith.extui %447 : i32 to i64
    %451 = arith.addi %450, %c1_i64_198 : i64
    %452 = llvm.getelementptr %14[%451] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %453 = llvm.load volatile %452 {alignment = 1 : i64} : !llvm.ptr -> i8
    %454 = arith.extsi %453 : i8 to i32
    %c1_i64_199 = arith.constant 1 : i64
    %455 = llvm.load %11 : !llvm.ptr -> i64
    %456 = arith.cmpi ult, %455, %c1_i64_199 : i64
    scf.if %456 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %455, %c1_i64_199 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32_200 = arith.constant -65 : i32
    %c3_i64_201 = arith.constant 3 : i64
    %457 = llvm.load %11 : !llvm.ptr -> i64
    %458 = arith.cmpi ult, %457, %c3_i64_201 : i64
    scf.if %458 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %457, %c3_i64_201 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %459 = arith.cmpi sgt, %454, %c-65_i32_200 : i32
    %460 = arith.extui %459 : i1 to i32
    %c3_i64_202 = arith.constant 3 : i64
    %461 = llvm.load %11 : !llvm.ptr -> i64
    %462 = arith.cmpi ult, %461, %c3_i64_202 : i64
    scf.if %462 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %461, %c3_i64_202 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %463 = arith.addi %444, %460 : i32
    %c3_i64_203 = arith.constant 3 : i64
    %464 = llvm.load %11 : !llvm.ptr -> i64
    %465 = arith.cmpi ult, %464, %c3_i64_203 : i64
    scf.if %465 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %464, %c3_i64_203 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %463, %6 : i32, !llvm.ptr
    %c3_i64_204 = arith.constant 3 : i64
    %466 = llvm.load %11 : !llvm.ptr -> i64
    %467 = arith.cmpi ult, %466, %c3_i64_204 : i64
    scf.if %467 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %466, %c3_i64_204 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %468 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_205 = arith.constant 1 : i64
    %469 = llvm.load %11 : !llvm.ptr -> i64
    %470 = arith.cmpi ult, %469, %c1_i64_205 : i64
    scf.if %470 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %469, %c1_i64_205 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c2_i32_206 = arith.constant 2 : i32
    %c3_i64_207 = arith.constant 3 : i64
    %471 = llvm.load %11 : !llvm.ptr -> i64
    %472 = arith.cmpi ult, %471, %c3_i64_207 : i64
    scf.if %472 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %471, %c3_i64_207 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %473 = arith.cmpi eq, %468, %c2_i32_206 : i32
    %474 = arith.extui %473 : i1 to i32
    %c1_i64_208 = arith.constant 1 : i64
    %475 = llvm.load %11 : !llvm.ptr -> i64
    %476 = arith.cmpi ult, %475, %c1_i64_208 : i64
    scf.if %476 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %475, %c1_i64_208 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_209 = arith.constant 0 : i32
    %477 = arith.cmpi ne, %474, %c0_i32_209 : i32
    cf.cond_br %477, ^bb19, ^bb22
  ^bb22:  // pred: ^bb21
    %c3_i64_210 = arith.constant 3 : i64
    %478 = llvm.load %11 : !llvm.ptr -> i64
    %479 = arith.cmpi ult, %478, %c3_i64_210 : i64
    scf.if %479 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %478, %c3_i64_210 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %480 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_211 = arith.constant 3 : i64
    %481 = llvm.load %11 : !llvm.ptr -> i64
    %482 = arith.cmpi ult, %481, %c3_i64_211 : i64
    scf.if %482 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %481, %c3_i64_211 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %483 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_212 = arith.constant 3 : i64
    %484 = llvm.load %11 : !llvm.ptr -> i64
    %485 = arith.cmpi ult, %484, %c3_i64_212 : i64
    scf.if %485 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %484, %c3_i64_212 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c2_i64 = arith.constant 2 : i64
    %486 = arith.extui %483 : i32 to i64
    %487 = arith.addi %486, %c2_i64 : i64
    %488 = llvm.getelementptr %14[%487] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %489 = llvm.load volatile %488 {alignment = 1 : i64} : !llvm.ptr -> i8
    %490 = arith.extsi %489 : i8 to i32
    %c1_i64_213 = arith.constant 1 : i64
    %491 = llvm.load %11 : !llvm.ptr -> i64
    %492 = arith.cmpi ult, %491, %c1_i64_213 : i64
    scf.if %492 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %491, %c1_i64_213 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32_214 = arith.constant -65 : i32
    %c3_i64_215 = arith.constant 3 : i64
    %493 = llvm.load %11 : !llvm.ptr -> i64
    %494 = arith.cmpi ult, %493, %c3_i64_215 : i64
    scf.if %494 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %493, %c3_i64_215 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %495 = arith.cmpi sgt, %490, %c-65_i32_214 : i32
    %496 = arith.extui %495 : i1 to i32
    %c3_i64_216 = arith.constant 3 : i64
    %497 = llvm.load %11 : !llvm.ptr -> i64
    %498 = arith.cmpi ult, %497, %c3_i64_216 : i64
    scf.if %498 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %497, %c3_i64_216 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %499 = arith.addi %480, %496 : i32
    %c3_i64_217 = arith.constant 3 : i64
    %500 = llvm.load %11 : !llvm.ptr -> i64
    %501 = arith.cmpi ult, %500, %c3_i64_217 : i64
    scf.if %501 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %500, %c3_i64_217 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %499, %6 : i32, !llvm.ptr
    %c1_i64_218 = arith.constant 1 : i64
    %502 = llvm.load %11 : !llvm.ptr -> i64
    %503 = arith.cmpi ult, %502, %c1_i64_218 : i64
    scf.if %503 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %502, %c1_i64_218 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb19
  ^bb23:  // pred: ^bb31
    %c3_i64_219 = arith.constant 3 : i64
    %504 = llvm.load %11 : !llvm.ptr -> i64
    %505 = arith.cmpi ult, %504, %c3_i64_219 : i64
    scf.if %505 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %504, %c3_i64_219 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %506 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_220 = arith.constant 3 : i64
    %507 = llvm.load %11 : !llvm.ptr -> i64
    %508 = arith.cmpi ult, %507, %c3_i64_220 : i64
    scf.if %508 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %507, %c3_i64_220 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %509 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_221 = arith.constant 1 : i64
    %510 = llvm.load %11 : !llvm.ptr -> i64
    %511 = arith.cmpi ult, %510, %c1_i64_221 : i64
    scf.if %511 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %510, %c1_i64_221 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c252_i32 = arith.constant 252 : i32
    %c3_i64_222 = arith.constant 3 : i64
    %512 = llvm.load %11 : !llvm.ptr -> i64
    %513 = arith.cmpi ult, %512, %c3_i64_222 : i64
    scf.if %513 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %512, %c3_i64_222 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %514 = arith.andi %509, %c252_i32 : i32
    %c1_i64_223 = arith.constant 1 : i64
    %515 = llvm.load %11 : !llvm.ptr -> i64
    %516 = arith.cmpi ult, %515, %c1_i64_223 : i64
    scf.if %516 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %515, %c1_i64_223 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c2_i32_224 = arith.constant 2 : i32
    %c3_i64_225 = arith.constant 3 : i64
    %517 = llvm.load %11 : !llvm.ptr -> i64
    %518 = arith.cmpi ult, %517, %c3_i64_225 : i64
    scf.if %518 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %517, %c3_i64_225 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_226 = arith.constant 31 : i32
    %519 = arith.cmpi ule, %c2_i32_224, %c31_i32_226 : i32
    %520 = scf.if %519 -> (i32) {
      %1369 = arith.shli %514, %c2_i32_224 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_227 = arith.constant 3 : i64
    %521 = llvm.load %11 : !llvm.ptr -> i64
    %522 = arith.cmpi ult, %521, %c3_i64_227 : i64
    scf.if %522 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %521, %c3_i64_227 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %523 = arith.addi %506, %520 : i32
    %c3_i64_228 = arith.constant 3 : i64
    %524 = llvm.load %11 : !llvm.ptr -> i64
    %525 = arith.cmpi ult, %524, %c3_i64_228 : i64
    scf.if %525 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %524, %c3_i64_228 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %523, %2 : i32, !llvm.ptr
    %c3_i64_229 = arith.constant 3 : i64
    %526 = llvm.load %11 : !llvm.ptr -> i64
    %527 = arith.cmpi ult, %526, %c3_i64_229 : i64
    scf.if %527 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %526, %c3_i64_229 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64_230 = arith.constant 0 : i64
    %528 = arith.extui %523 : i32 to i64
    %529 = arith.addi %528, %c0_i64_230 : i64
    %530 = llvm.getelementptr %14[%529] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %531 = llvm.load volatile %530 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_231 = arith.constant 3 : i64
    %532 = llvm.load %11 : !llvm.ptr -> i64
    %533 = arith.cmpi ult, %532, %c3_i64_231 : i64
    scf.if %533 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %532, %c3_i64_231 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %531, %1 : i32, !llvm.ptr
    %c1_i64_232 = arith.constant 1 : i64
    %534 = llvm.load %11 : !llvm.ptr -> i64
    %535 = arith.cmpi ult, %534, %c1_i64_232 : i64
    scf.if %535 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %534, %c1_i64_232 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_233 = arith.constant 3 : i64
    %536 = llvm.load %11 : !llvm.ptr -> i64
    %537 = arith.cmpi ult, %536, %c3_i64_233 : i64
    scf.if %537 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %536, %c3_i64_233 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %538 = arith.xori %531, %c-1_i32 : i32
    %c1_i64_234 = arith.constant 1 : i64
    %539 = llvm.load %11 : !llvm.ptr -> i64
    %540 = arith.cmpi ult, %539, %c1_i64_234 : i64
    scf.if %540 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %539, %c1_i64_234 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c7_i32 = arith.constant 7 : i32
    %c3_i64_235 = arith.constant 3 : i64
    %541 = llvm.load %11 : !llvm.ptr -> i64
    %542 = arith.cmpi ult, %541, %c3_i64_235 : i64
    scf.if %542 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %541, %c3_i64_235 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_236 = arith.constant 31 : i32
    %543 = arith.cmpi ule, %c7_i32, %c31_i32_236 : i32
    %544 = scf.if %543 -> (i32) {
      %1369 = arith.shrui %538, %c7_i32 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_237 = arith.constant 3 : i64
    %545 = llvm.load %11 : !llvm.ptr -> i64
    %546 = arith.cmpi ult, %545, %c3_i64_237 : i64
    scf.if %546 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %545, %c3_i64_237 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %547 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_238 = arith.constant 1 : i64
    %548 = llvm.load %11 : !llvm.ptr -> i64
    %549 = arith.cmpi ult, %548, %c1_i64_238 : i64
    scf.if %549 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %548, %c1_i64_238 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c6_i32 = arith.constant 6 : i32
    %c3_i64_239 = arith.constant 3 : i64
    %550 = llvm.load %11 : !llvm.ptr -> i64
    %551 = arith.cmpi ult, %550, %c3_i64_239 : i64
    scf.if %551 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %550, %c3_i64_239 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_240 = arith.constant 31 : i32
    %552 = arith.cmpi ule, %c6_i32, %c31_i32_240 : i32
    %553 = scf.if %552 -> (i32) {
      %1369 = arith.shrui %547, %c6_i32 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_241 = arith.constant 3 : i64
    %554 = llvm.load %11 : !llvm.ptr -> i64
    %555 = arith.cmpi ult, %554, %c3_i64_241 : i64
    scf.if %555 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %554, %c3_i64_241 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %556 = arith.ori %544, %553 : i32
    %c1_i64_242 = arith.constant 1 : i64
    %557 = llvm.load %11 : !llvm.ptr -> i64
    %558 = arith.cmpi ult, %557, %c1_i64_242 : i64
    scf.if %558 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %557, %c1_i64_242 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16843009_i32 = arith.constant 16843009 : i32
    %c3_i64_243 = arith.constant 3 : i64
    %559 = llvm.load %11 : !llvm.ptr -> i64
    %560 = arith.cmpi ult, %559, %c3_i64_243 : i64
    scf.if %560 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %559, %c3_i64_243 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %561 = arith.andi %556, %c16843009_i32 : i32
    %c3_i64_244 = arith.constant 3 : i64
    %562 = llvm.load %11 : !llvm.ptr -> i64
    %563 = arith.cmpi ult, %562, %c3_i64_244 : i64
    scf.if %563 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %562, %c3_i64_244 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %561, %1 : i32, !llvm.ptr
    %c1_i64_245 = arith.constant 1 : i64
    %564 = llvm.load %11 : !llvm.ptr -> i64
    %565 = arith.cmpi ult, %564, %c1_i64_245 : i64
    scf.if %565 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %564, %c1_i64_245 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i64_246 = arith.constant 3 : i64
    %566 = llvm.load %11 : !llvm.ptr -> i64
    %567 = arith.cmpi ult, %566, %c3_i64_246 : i64
    scf.if %567 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %566, %c3_i64_246 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %568 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_247 = arith.constant 1 : i64
    %569 = llvm.load %11 : !llvm.ptr -> i64
    %570 = arith.cmpi ult, %569, %c1_i64_247 : i64
    scf.if %570 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %569, %c1_i64_247 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c1_i32_248 = arith.constant 1 : i32
    %c3_i64_249 = arith.constant 3 : i64
    %571 = llvm.load %11 : !llvm.ptr -> i64
    %572 = arith.cmpi ult, %571, %c3_i64_249 : i64
    scf.if %572 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %571, %c3_i64_249 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %573 = arith.cmpi eq, %568, %c1_i32_248 : i32
    %574 = arith.extui %573 : i1 to i32
    %c1_i64_250 = arith.constant 1 : i64
    %575 = llvm.load %11 : !llvm.ptr -> i64
    %576 = arith.cmpi ult, %575, %c1_i64_250 : i64
    scf.if %576 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %575, %c1_i64_250 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_251 = arith.constant 0 : i32
    %577 = arith.cmpi ne, %574, %c0_i32_251 : i32
    cf.cond_br %577, ^bb32, ^bb33
  ^bb24:  // 2 preds: ^bb19, ^bb26
    %c3_i64_252 = arith.constant 3 : i64
    %578 = llvm.load %11 : !llvm.ptr -> i64
    %579 = arith.cmpi ult, %578, %c3_i64_252 : i64
    scf.if %579 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %578, %c3_i64_252 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %580 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_253 = arith.constant 3 : i64
    %581 = llvm.load %11 : !llvm.ptr -> i64
    %582 = arith.cmpi ult, %581, %c3_i64_253 : i64
    scf.if %582 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %581, %c3_i64_253 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %580, %4 : i32, !llvm.ptr
    %c3_i64_254 = arith.constant 3 : i64
    %583 = llvm.load %11 : !llvm.ptr -> i64
    %584 = arith.cmpi ult, %583, %c3_i64_254 : i64
    scf.if %584 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %583, %c3_i64_254 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %585 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_255 = arith.constant 3 : i64
    %586 = llvm.load %11 : !llvm.ptr -> i64
    %587 = arith.cmpi ult, %586, %c3_i64_255 : i64
    scf.if %587 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %586, %c3_i64_255 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_256 = arith.constant 0 : i32
    %588 = arith.cmpi eq, %585, %c0_i32_256 : i32
    %589 = arith.extui %588 : i1 to i32
    %c1_i64_257 = arith.constant 1 : i64
    %590 = llvm.load %11 : !llvm.ptr -> i64
    %591 = arith.cmpi ult, %590, %c1_i64_257 : i64
    scf.if %591 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %590, %c1_i64_257 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_258 = arith.constant 0 : i32
    %592 = arith.cmpi ne, %589, %c0_i32_258 : i32
    cf.cond_br %592, ^bb3, ^bb25
  ^bb25:  // pred: ^bb24
    %c3_i64_259 = arith.constant 3 : i64
    %593 = llvm.load %11 : !llvm.ptr -> i64
    %594 = arith.cmpi ult, %593, %c3_i64_259 : i64
    scf.if %594 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %593, %c3_i64_259 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %595 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_260 = arith.constant 1 : i64
    %596 = llvm.load %11 : !llvm.ptr -> i64
    %597 = arith.cmpi ult, %596, %c1_i64_260 : i64
    scf.if %597 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %596, %c1_i64_260 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c192_i32 = arith.constant 192 : i32
    %c3_i64_261 = arith.constant 3 : i64
    %598 = llvm.load %11 : !llvm.ptr -> i64
    %599 = arith.cmpi ult, %598, %c3_i64_261 : i64
    scf.if %599 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %598, %c3_i64_261 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %600 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_262 = arith.constant 1 : i64
    %601 = llvm.load %11 : !llvm.ptr -> i64
    %602 = arith.cmpi ult, %601, %c1_i64_262 : i64
    scf.if %602 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %601, %c1_i64_262 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c192_i32_263 = arith.constant 192 : i32
    %c3_i64_264 = arith.constant 3 : i64
    %603 = llvm.load %11 : !llvm.ptr -> i64
    %604 = arith.cmpi ult, %603, %c3_i64_264 : i64
    scf.if %604 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %603, %c3_i64_264 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %605 = arith.cmpi ult, %600, %c192_i32_263 : i32
    %606 = arith.extui %605 : i1 to i32
    %c1_i64_265 = arith.constant 1 : i64
    %607 = llvm.load %11 : !llvm.ptr -> i64
    %608 = arith.cmpi ult, %607, %c1_i64_265 : i64
    scf.if %608 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %607, %c1_i64_265 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_266 = arith.constant 0 : i32
    %609 = arith.cmpi ne, %606, %c0_i32_266 : i32
    %610 = arith.select %609, %595, %c192_i32 : i32
    %c3_i64_267 = arith.constant 3 : i64
    %611 = llvm.load %11 : !llvm.ptr -> i64
    %612 = arith.cmpi ult, %611, %c3_i64_267 : i64
    scf.if %612 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %611, %c3_i64_267 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %610, %6 : i32, !llvm.ptr
    %c1_i64_268 = arith.constant 1 : i64
    %613 = llvm.load %11 : !llvm.ptr -> i64
    %614 = arith.cmpi ult, %613, %c1_i64_268 : i64
    scf.if %614 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %613, %c1_i64_268 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i32_269 = arith.constant 3 : i32
    %c3_i64_270 = arith.constant 3 : i64
    %615 = llvm.load %11 : !llvm.ptr -> i64
    %616 = arith.cmpi ult, %615, %c3_i64_270 : i64
    scf.if %616 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %615, %c3_i64_270 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %617 = arith.andi %610, %c3_i32_269 : i32
    %c3_i64_271 = arith.constant 3 : i64
    %618 = llvm.load %11 : !llvm.ptr -> i64
    %619 = arith.cmpi ult, %618, %c3_i64_271 : i64
    scf.if %619 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %618, %c3_i64_271 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %617, %7 : i32, !llvm.ptr
    %c3_i64_272 = arith.constant 3 : i64
    %620 = llvm.load %11 : !llvm.ptr -> i64
    %621 = arith.cmpi ult, %620, %c3_i64_272 : i64
    scf.if %621 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %620, %c3_i64_272 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %622 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_273 = arith.constant 1 : i64
    %623 = llvm.load %11 : !llvm.ptr -> i64
    %624 = arith.cmpi ult, %623, %c1_i64_273 : i64
    scf.if %624 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %623, %c1_i64_273 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c2_i32_274 = arith.constant 2 : i32
    %c3_i64_275 = arith.constant 3 : i64
    %625 = llvm.load %11 : !llvm.ptr -> i64
    %626 = arith.cmpi ult, %625, %c3_i64_275 : i64
    scf.if %626 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %625, %c3_i64_275 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_276 = arith.constant 31 : i32
    %627 = arith.cmpi ule, %c2_i32_274, %c31_i32_276 : i32
    %628 = scf.if %627 -> (i32) {
      %1369 = arith.shli %622, %c2_i32_274 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_277 = arith.constant 3 : i64
    %629 = llvm.load %11 : !llvm.ptr -> i64
    %630 = arith.cmpi ult, %629, %c3_i64_277 : i64
    scf.if %630 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %629, %c3_i64_277 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %628, %5 : i32, !llvm.ptr
    %c1_i64_278 = arith.constant 1 : i64
    %631 = llvm.load %11 : !llvm.ptr -> i64
    %632 = arith.cmpi ult, %631, %c1_i64_278 : i64
    scf.if %632 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %631, %c1_i64_278 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_279 = arith.constant 0 : i32
    %c3_i64_280 = arith.constant 3 : i64
    %633 = llvm.load %11 : !llvm.ptr -> i64
    %634 = arith.cmpi ult, %633, %c3_i64_280 : i64
    scf.if %634 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %633, %c3_i64_280 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_279, %2 : i32, !llvm.ptr
    %c1_i64_281 = arith.constant 1 : i64
    %635 = llvm.load %11 : !llvm.ptr -> i64
    %636 = arith.cmpi ult, %635, %c1_i64_281 : i64
    scf.if %636 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %635, %c1_i64_281 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i64_282 = arith.constant 3 : i64
    %637 = llvm.load %11 : !llvm.ptr -> i64
    %638 = arith.cmpi ult, %637, %c3_i64_282 : i64
    scf.if %638 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %637, %c3_i64_282 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %639 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_283 = arith.constant 1 : i64
    %640 = llvm.load %11 : !llvm.ptr -> i64
    %641 = arith.cmpi ult, %640, %c1_i64_283 : i64
    scf.if %641 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %640, %c1_i64_283 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c4_i32_284 = arith.constant 4 : i32
    %c3_i64_285 = arith.constant 3 : i64
    %642 = llvm.load %11 : !llvm.ptr -> i64
    %643 = arith.cmpi ult, %642, %c3_i64_285 : i64
    scf.if %643 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %642, %c3_i64_285 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %644 = arith.cmpi ult, %639, %c4_i32_284 : i32
    %645 = arith.extui %644 : i1 to i32
    %c1_i64_286 = arith.constant 1 : i64
    %646 = llvm.load %11 : !llvm.ptr -> i64
    %647 = arith.cmpi ult, %646, %c1_i64_286 : i64
    scf.if %647 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %646, %c1_i64_286 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_287 = arith.constant 0 : i32
    %648 = arith.cmpi ne, %645, %c0_i32_287 : i32
    cf.cond_br %648, ^bb26, ^bb27
  ^bb26:  // 2 preds: ^bb25, ^bb28
    %c3_i64_288 = arith.constant 3 : i64
    %649 = llvm.load %11 : !llvm.ptr -> i64
    %650 = arith.cmpi ult, %649, %c3_i64_288 : i64
    scf.if %650 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %649, %c3_i64_288 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %651 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_289 = arith.constant 3 : i64
    %652 = llvm.load %11 : !llvm.ptr -> i64
    %653 = arith.cmpi ult, %652, %c3_i64_289 : i64
    scf.if %653 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %652, %c3_i64_289 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %654 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_290 = arith.constant 3 : i64
    %655 = llvm.load %11 : !llvm.ptr -> i64
    %656 = arith.cmpi ult, %655, %c3_i64_290 : i64
    scf.if %656 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %655, %c3_i64_290 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %657 = arith.subi %651, %654 : i32
    %c3_i64_291 = arith.constant 3 : i64
    %658 = llvm.load %11 : !llvm.ptr -> i64
    %659 = arith.cmpi ult, %658, %c3_i64_291 : i64
    scf.if %659 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %658, %c3_i64_291 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %657, %3 : i32, !llvm.ptr
    %c3_i64_292 = arith.constant 3 : i64
    %660 = llvm.load %11 : !llvm.ptr -> i64
    %661 = arith.cmpi ult, %660, %c3_i64_292 : i64
    scf.if %661 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %660, %c3_i64_292 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %662 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_293 = arith.constant 3 : i64
    %663 = llvm.load %11 : !llvm.ptr -> i64
    %664 = arith.cmpi ult, %663, %c3_i64_293 : i64
    scf.if %664 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %663, %c3_i64_293 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %665 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_294 = arith.constant 3 : i64
    %666 = llvm.load %11 : !llvm.ptr -> i64
    %667 = arith.cmpi ult, %666, %c3_i64_294 : i64
    scf.if %667 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %666, %c3_i64_294 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %668 = arith.addi %662, %665 : i32
    %c3_i64_295 = arith.constant 3 : i64
    %669 = llvm.load %11 : !llvm.ptr -> i64
    %670 = arith.cmpi ult, %669, %c3_i64_295 : i64
    scf.if %670 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %669, %c3_i64_295 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %668, %9 : i32, !llvm.ptr
    %c3_i64_296 = arith.constant 3 : i64
    %671 = llvm.load %11 : !llvm.ptr -> i64
    %672 = arith.cmpi ult, %671, %c3_i64_296 : i64
    scf.if %672 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %671, %c3_i64_296 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %673 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_297 = arith.constant 1 : i64
    %674 = llvm.load %11 : !llvm.ptr -> i64
    %675 = arith.cmpi ult, %674, %c1_i64_297 : i64
    scf.if %675 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %674, %c1_i64_297 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c8_i32 = arith.constant 8 : i32
    %c3_i64_298 = arith.constant 3 : i64
    %676 = llvm.load %11 : !llvm.ptr -> i64
    %677 = arith.cmpi ult, %676, %c3_i64_298 : i64
    scf.if %677 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %676, %c3_i64_298 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_299 = arith.constant 31 : i32
    %678 = arith.cmpi ule, %c8_i32, %c31_i32_299 : i32
    %679 = scf.if %678 -> (i32) {
      %1369 = arith.shrui %673, %c8_i32 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c1_i64_300 = arith.constant 1 : i64
    %680 = llvm.load %11 : !llvm.ptr -> i64
    %681 = arith.cmpi ult, %680, %c1_i64_300 : i64
    scf.if %681 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %680, %c1_i64_300 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16711935_i32 = arith.constant 16711935 : i32
    %c3_i64_301 = arith.constant 3 : i64
    %682 = llvm.load %11 : !llvm.ptr -> i64
    %683 = arith.cmpi ult, %682, %c3_i64_301 : i64
    scf.if %683 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %682, %c3_i64_301 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %684 = arith.andi %679, %c16711935_i32 : i32
    %c3_i64_302 = arith.constant 3 : i64
    %685 = llvm.load %11 : !llvm.ptr -> i64
    %686 = arith.cmpi ult, %685, %c3_i64_302 : i64
    scf.if %686 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %685, %c3_i64_302 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %687 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_303 = arith.constant 1 : i64
    %688 = llvm.load %11 : !llvm.ptr -> i64
    %689 = arith.cmpi ult, %688, %c1_i64_303 : i64
    scf.if %689 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %688, %c1_i64_303 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16711935_i32_304 = arith.constant 16711935 : i32
    %c3_i64_305 = arith.constant 3 : i64
    %690 = llvm.load %11 : !llvm.ptr -> i64
    %691 = arith.cmpi ult, %690, %c3_i64_305 : i64
    scf.if %691 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %690, %c3_i64_305 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %692 = arith.andi %687, %c16711935_i32_304 : i32
    %c3_i64_306 = arith.constant 3 : i64
    %693 = llvm.load %11 : !llvm.ptr -> i64
    %694 = arith.cmpi ult, %693, %c3_i64_306 : i64
    scf.if %694 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %693, %c3_i64_306 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %695 = arith.addi %684, %692 : i32
    %c1_i64_307 = arith.constant 1 : i64
    %696 = llvm.load %11 : !llvm.ptr -> i64
    %697 = arith.cmpi ult, %696, %c1_i64_307 : i64
    scf.if %697 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %696, %c1_i64_307 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c65537_i32 = arith.constant 65537 : i32
    %c5_i64 = arith.constant 5 : i64
    %698 = llvm.load %11 : !llvm.ptr -> i64
    %699 = arith.cmpi ult, %698, %c5_i64 : i64
    scf.if %699 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %698, %c5_i64 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %700 = arith.muli %695, %c65537_i32 : i32
    %c1_i64_308 = arith.constant 1 : i64
    %701 = llvm.load %11 : !llvm.ptr -> i64
    %702 = arith.cmpi ult, %701, %c1_i64_308 : i64
    scf.if %702 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %701, %c1_i64_308 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_309 = arith.constant 3 : i64
    %703 = llvm.load %11 : !llvm.ptr -> i64
    %704 = arith.cmpi ult, %703, %c3_i64_309 : i64
    scf.if %704 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %703, %c3_i64_309 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_310 = arith.constant 31 : i32
    %705 = arith.cmpi ule, %c16_i32, %c31_i32_310 : i32
    %706 = scf.if %705 -> (i32) {
      %1369 = arith.shrui %700, %c16_i32 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_311 = arith.constant 3 : i64
    %707 = llvm.load %11 : !llvm.ptr -> i64
    %708 = arith.cmpi ult, %707, %c3_i64_311 : i64
    scf.if %708 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %707, %c3_i64_311 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %709 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_312 = arith.constant 3 : i64
    %710 = llvm.load %11 : !llvm.ptr -> i64
    %711 = arith.cmpi ult, %710, %c3_i64_312 : i64
    scf.if %711 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %710, %c3_i64_312 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %712 = arith.addi %706, %709 : i32
    %c3_i64_313 = arith.constant 3 : i64
    %713 = llvm.load %11 : !llvm.ptr -> i64
    %714 = arith.cmpi ult, %713, %c3_i64_313 : i64
    scf.if %714 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %713, %c3_i64_313 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %712, %8 : i32, !llvm.ptr
    %c3_i64_314 = arith.constant 3 : i64
    %715 = llvm.load %11 : !llvm.ptr -> i64
    %716 = arith.cmpi ult, %715, %c3_i64_314 : i64
    scf.if %716 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %715, %c3_i64_314 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %717 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_315 = arith.constant 3 : i64
    %718 = llvm.load %11 : !llvm.ptr -> i64
    %719 = arith.cmpi ult, %718, %c3_i64_315 : i64
    scf.if %719 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %718, %c3_i64_315 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_316 = arith.constant 0 : i32
    %720 = arith.cmpi eq, %717, %c0_i32_316 : i32
    %721 = arith.extui %720 : i1 to i32
    %c1_i64_317 = arith.constant 1 : i64
    %722 = llvm.load %11 : !llvm.ptr -> i64
    %723 = arith.cmpi ult, %722, %c1_i64_317 : i64
    scf.if %723 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %722, %c1_i64_317 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_318 = arith.constant 0 : i32
    %724 = arith.cmpi ne, %721, %c0_i32_318 : i32
    cf.cond_br %724, ^bb24, ^bb31
  ^bb27:  // pred: ^bb25
    %c3_i64_319 = arith.constant 3 : i64
    %725 = llvm.load %11 : !llvm.ptr -> i64
    %726 = arith.cmpi ult, %725, %c3_i64_319 : i64
    scf.if %726 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %725, %c3_i64_319 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %727 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_320 = arith.constant 3 : i64
    %728 = llvm.load %11 : !llvm.ptr -> i64
    %729 = arith.cmpi ult, %728, %c3_i64_320 : i64
    scf.if %729 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %728, %c3_i64_320 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %730 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_321 = arith.constant 1 : i64
    %731 = llvm.load %11 : !llvm.ptr -> i64
    %732 = arith.cmpi ult, %731, %c1_i64_321 : i64
    scf.if %732 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %731, %c1_i64_321 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c1008_i32 = arith.constant 1008 : i32
    %c3_i64_322 = arith.constant 3 : i64
    %733 = llvm.load %11 : !llvm.ptr -> i64
    %734 = arith.cmpi ult, %733, %c3_i64_322 : i64
    scf.if %734 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %733, %c3_i64_322 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %735 = arith.andi %730, %c1008_i32 : i32
    %c3_i64_323 = arith.constant 3 : i64
    %736 = llvm.load %11 : !llvm.ptr -> i64
    %737 = arith.cmpi ult, %736, %c3_i64_323 : i64
    scf.if %737 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %736, %c3_i64_323 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %738 = arith.addi %727, %735 : i32
    %c3_i64_324 = arith.constant 3 : i64
    %739 = llvm.load %11 : !llvm.ptr -> i64
    %740 = arith.cmpi ult, %739, %c3_i64_324 : i64
    scf.if %740 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %739, %c3_i64_324 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %738, %0 : i32, !llvm.ptr
    %c1_i64_325 = arith.constant 1 : i64
    %741 = llvm.load %11 : !llvm.ptr -> i64
    %742 = arith.cmpi ult, %741, %c1_i64_325 : i64
    scf.if %742 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %741, %c1_i64_325 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_326 = arith.constant 0 : i32
    %c3_i64_327 = arith.constant 3 : i64
    %743 = llvm.load %11 : !llvm.ptr -> i64
    %744 = arith.cmpi ult, %743, %c3_i64_327 : i64
    scf.if %744 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %743, %c3_i64_327 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_326, %2 : i32, !llvm.ptr
    %c3_i64_328 = arith.constant 3 : i64
    %745 = llvm.load %11 : !llvm.ptr -> i64
    %746 = arith.cmpi ult, %745, %c3_i64_328 : i64
    scf.if %746 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %745, %c3_i64_328 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %747 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_329 = arith.constant 3 : i64
    %748 = llvm.load %11 : !llvm.ptr -> i64
    %749 = arith.cmpi ult, %748, %c3_i64_329 : i64
    scf.if %749 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %748, %c3_i64_329 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %747, %1 : i32, !llvm.ptr
    %c1_i64_330 = arith.constant 1 : i64
    %750 = llvm.load %11 : !llvm.ptr -> i64
    %751 = arith.cmpi ult, %750, %c1_i64_330 : i64
    scf.if %751 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %750, %c1_i64_330 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb29
  ^bb28:  // pred: ^bb30
    %c1_i64_331 = arith.constant 1 : i64
    %752 = llvm.load %11 : !llvm.ptr -> i64
    %753 = arith.cmpi ult, %752, %c1_i64_331 : i64
    scf.if %753 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %752, %c1_i64_331 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb26
  ^bb29:  // 2 preds: ^bb27, ^bb29
    %c3_i64_332 = arith.constant 3 : i64
    %754 = llvm.load %11 : !llvm.ptr -> i64
    %755 = arith.cmpi ult, %754, %c3_i64_332 : i64
    scf.if %755 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %754, %c3_i64_332 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %756 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_333 = arith.constant 3 : i64
    %757 = llvm.load %11 : !llvm.ptr -> i64
    %758 = arith.cmpi ult, %757, %c3_i64_333 : i64
    scf.if %758 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %757, %c3_i64_333 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %759 = arith.extui %756 : i32 to i64
    %760 = arith.addi %759, %c12_i64 : i64
    %761 = llvm.getelementptr %14[%760] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %762 = llvm.load volatile %761 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_334 = arith.constant 3 : i64
    %763 = llvm.load %11 : !llvm.ptr -> i64
    %764 = arith.cmpi ult, %763, %c3_i64_334 : i64
    scf.if %764 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %763, %c3_i64_334 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %762, %9 : i32, !llvm.ptr
    %c1_i64_335 = arith.constant 1 : i64
    %765 = llvm.load %11 : !llvm.ptr -> i64
    %766 = arith.cmpi ult, %765, %c1_i64_335 : i64
    scf.if %766 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %765, %c1_i64_335 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-1_i32_336 = arith.constant -1 : i32
    %c3_i64_337 = arith.constant 3 : i64
    %767 = llvm.load %11 : !llvm.ptr -> i64
    %768 = arith.cmpi ult, %767, %c3_i64_337 : i64
    scf.if %768 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %767, %c3_i64_337 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %769 = arith.xori %762, %c-1_i32_336 : i32
    %c1_i64_338 = arith.constant 1 : i64
    %770 = llvm.load %11 : !llvm.ptr -> i64
    %771 = arith.cmpi ult, %770, %c1_i64_338 : i64
    scf.if %771 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %770, %c1_i64_338 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c7_i32_339 = arith.constant 7 : i32
    %c3_i64_340 = arith.constant 3 : i64
    %772 = llvm.load %11 : !llvm.ptr -> i64
    %773 = arith.cmpi ult, %772, %c3_i64_340 : i64
    scf.if %773 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %772, %c3_i64_340 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_341 = arith.constant 31 : i32
    %774 = arith.cmpi ule, %c7_i32_339, %c31_i32_341 : i32
    %775 = scf.if %774 -> (i32) {
      %1369 = arith.shrui %769, %c7_i32_339 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_342 = arith.constant 3 : i64
    %776 = llvm.load %11 : !llvm.ptr -> i64
    %777 = arith.cmpi ult, %776, %c3_i64_342 : i64
    scf.if %777 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %776, %c3_i64_342 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %778 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64_343 = arith.constant 1 : i64
    %779 = llvm.load %11 : !llvm.ptr -> i64
    %780 = arith.cmpi ult, %779, %c1_i64_343 : i64
    scf.if %780 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %779, %c1_i64_343 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c6_i32_344 = arith.constant 6 : i32
    %c3_i64_345 = arith.constant 3 : i64
    %781 = llvm.load %11 : !llvm.ptr -> i64
    %782 = arith.cmpi ult, %781, %c3_i64_345 : i64
    scf.if %782 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %781, %c3_i64_345 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_346 = arith.constant 31 : i32
    %783 = arith.cmpi ule, %c6_i32_344, %c31_i32_346 : i32
    %784 = scf.if %783 -> (i32) {
      %1369 = arith.shrui %778, %c6_i32_344 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_347 = arith.constant 3 : i64
    %785 = llvm.load %11 : !llvm.ptr -> i64
    %786 = arith.cmpi ult, %785, %c3_i64_347 : i64
    scf.if %786 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %785, %c3_i64_347 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %787 = arith.ori %775, %784 : i32
    %c1_i64_348 = arith.constant 1 : i64
    %788 = llvm.load %11 : !llvm.ptr -> i64
    %789 = arith.cmpi ult, %788, %c1_i64_348 : i64
    scf.if %789 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %788, %c1_i64_348 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16843009_i32_349 = arith.constant 16843009 : i32
    %c3_i64_350 = arith.constant 3 : i64
    %790 = llvm.load %11 : !llvm.ptr -> i64
    %791 = arith.cmpi ult, %790, %c3_i64_350 : i64
    scf.if %791 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %790, %c3_i64_350 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %792 = arith.andi %787, %c16843009_i32_349 : i32
    %c3_i64_351 = arith.constant 3 : i64
    %793 = llvm.load %11 : !llvm.ptr -> i64
    %794 = arith.cmpi ult, %793, %c3_i64_351 : i64
    scf.if %794 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %793, %c3_i64_351 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %795 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_352 = arith.constant 3 : i64
    %796 = llvm.load %11 : !llvm.ptr -> i64
    %797 = arith.cmpi ult, %796, %c3_i64_352 : i64
    scf.if %797 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %796, %c3_i64_352 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c8_i64 = arith.constant 8 : i64
    %798 = arith.extui %795 : i32 to i64
    %799 = arith.addi %798, %c8_i64 : i64
    %800 = llvm.getelementptr %14[%799] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %801 = llvm.load volatile %800 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_353 = arith.constant 3 : i64
    %802 = llvm.load %11 : !llvm.ptr -> i64
    %803 = arith.cmpi ult, %802, %c3_i64_353 : i64
    scf.if %803 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %802, %c3_i64_353 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %801, %9 : i32, !llvm.ptr
    %c1_i64_354 = arith.constant 1 : i64
    %804 = llvm.load %11 : !llvm.ptr -> i64
    %805 = arith.cmpi ult, %804, %c1_i64_354 : i64
    scf.if %805 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %804, %c1_i64_354 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-1_i32_355 = arith.constant -1 : i32
    %c3_i64_356 = arith.constant 3 : i64
    %806 = llvm.load %11 : !llvm.ptr -> i64
    %807 = arith.cmpi ult, %806, %c3_i64_356 : i64
    scf.if %807 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %806, %c3_i64_356 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %808 = arith.xori %801, %c-1_i32_355 : i32
    %c1_i64_357 = arith.constant 1 : i64
    %809 = llvm.load %11 : !llvm.ptr -> i64
    %810 = arith.cmpi ult, %809, %c1_i64_357 : i64
    scf.if %810 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %809, %c1_i64_357 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c7_i32_358 = arith.constant 7 : i32
    %c3_i64_359 = arith.constant 3 : i64
    %811 = llvm.load %11 : !llvm.ptr -> i64
    %812 = arith.cmpi ult, %811, %c3_i64_359 : i64
    scf.if %812 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %811, %c3_i64_359 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_360 = arith.constant 31 : i32
    %813 = arith.cmpi ule, %c7_i32_358, %c31_i32_360 : i32
    %814 = scf.if %813 -> (i32) {
      %1369 = arith.shrui %808, %c7_i32_358 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_361 = arith.constant 3 : i64
    %815 = llvm.load %11 : !llvm.ptr -> i64
    %816 = arith.cmpi ult, %815, %c3_i64_361 : i64
    scf.if %816 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %815, %c3_i64_361 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %817 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64_362 = arith.constant 1 : i64
    %818 = llvm.load %11 : !llvm.ptr -> i64
    %819 = arith.cmpi ult, %818, %c1_i64_362 : i64
    scf.if %819 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %818, %c1_i64_362 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c6_i32_363 = arith.constant 6 : i32
    %c3_i64_364 = arith.constant 3 : i64
    %820 = llvm.load %11 : !llvm.ptr -> i64
    %821 = arith.cmpi ult, %820, %c3_i64_364 : i64
    scf.if %821 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %820, %c3_i64_364 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_365 = arith.constant 31 : i32
    %822 = arith.cmpi ule, %c6_i32_363, %c31_i32_365 : i32
    %823 = scf.if %822 -> (i32) {
      %1369 = arith.shrui %817, %c6_i32_363 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_366 = arith.constant 3 : i64
    %824 = llvm.load %11 : !llvm.ptr -> i64
    %825 = arith.cmpi ult, %824, %c3_i64_366 : i64
    scf.if %825 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %824, %c3_i64_366 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %826 = arith.ori %814, %823 : i32
    %c1_i64_367 = arith.constant 1 : i64
    %827 = llvm.load %11 : !llvm.ptr -> i64
    %828 = arith.cmpi ult, %827, %c1_i64_367 : i64
    scf.if %828 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %827, %c1_i64_367 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16843009_i32_368 = arith.constant 16843009 : i32
    %c3_i64_369 = arith.constant 3 : i64
    %829 = llvm.load %11 : !llvm.ptr -> i64
    %830 = arith.cmpi ult, %829, %c3_i64_369 : i64
    scf.if %830 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %829, %c3_i64_369 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %831 = arith.andi %826, %c16843009_i32_368 : i32
    %c3_i64_370 = arith.constant 3 : i64
    %832 = llvm.load %11 : !llvm.ptr -> i64
    %833 = arith.cmpi ult, %832, %c3_i64_370 : i64
    scf.if %833 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %832, %c3_i64_370 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %834 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_371 = arith.constant 3 : i64
    %835 = llvm.load %11 : !llvm.ptr -> i64
    %836 = arith.cmpi ult, %835, %c3_i64_371 : i64
    scf.if %836 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %835, %c3_i64_371 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c4_i64 = arith.constant 4 : i64
    %837 = arith.extui %834 : i32 to i64
    %838 = arith.addi %837, %c4_i64 : i64
    %839 = llvm.getelementptr %14[%838] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %840 = llvm.load volatile %839 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_372 = arith.constant 3 : i64
    %841 = llvm.load %11 : !llvm.ptr -> i64
    %842 = arith.cmpi ult, %841, %c3_i64_372 : i64
    scf.if %842 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %841, %c3_i64_372 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %840, %9 : i32, !llvm.ptr
    %c1_i64_373 = arith.constant 1 : i64
    %843 = llvm.load %11 : !llvm.ptr -> i64
    %844 = arith.cmpi ult, %843, %c1_i64_373 : i64
    scf.if %844 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %843, %c1_i64_373 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-1_i32_374 = arith.constant -1 : i32
    %c3_i64_375 = arith.constant 3 : i64
    %845 = llvm.load %11 : !llvm.ptr -> i64
    %846 = arith.cmpi ult, %845, %c3_i64_375 : i64
    scf.if %846 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %845, %c3_i64_375 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %847 = arith.xori %840, %c-1_i32_374 : i32
    %c1_i64_376 = arith.constant 1 : i64
    %848 = llvm.load %11 : !llvm.ptr -> i64
    %849 = arith.cmpi ult, %848, %c1_i64_376 : i64
    scf.if %849 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %848, %c1_i64_376 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c7_i32_377 = arith.constant 7 : i32
    %c3_i64_378 = arith.constant 3 : i64
    %850 = llvm.load %11 : !llvm.ptr -> i64
    %851 = arith.cmpi ult, %850, %c3_i64_378 : i64
    scf.if %851 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %850, %c3_i64_378 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_379 = arith.constant 31 : i32
    %852 = arith.cmpi ule, %c7_i32_377, %c31_i32_379 : i32
    %853 = scf.if %852 -> (i32) {
      %1369 = arith.shrui %847, %c7_i32_377 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_380 = arith.constant 3 : i64
    %854 = llvm.load %11 : !llvm.ptr -> i64
    %855 = arith.cmpi ult, %854, %c3_i64_380 : i64
    scf.if %855 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %854, %c3_i64_380 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %856 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64_381 = arith.constant 1 : i64
    %857 = llvm.load %11 : !llvm.ptr -> i64
    %858 = arith.cmpi ult, %857, %c1_i64_381 : i64
    scf.if %858 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %857, %c1_i64_381 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c6_i32_382 = arith.constant 6 : i32
    %c3_i64_383 = arith.constant 3 : i64
    %859 = llvm.load %11 : !llvm.ptr -> i64
    %860 = arith.cmpi ult, %859, %c3_i64_383 : i64
    scf.if %860 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %859, %c3_i64_383 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_384 = arith.constant 31 : i32
    %861 = arith.cmpi ule, %c6_i32_382, %c31_i32_384 : i32
    %862 = scf.if %861 -> (i32) {
      %1369 = arith.shrui %856, %c6_i32_382 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_385 = arith.constant 3 : i64
    %863 = llvm.load %11 : !llvm.ptr -> i64
    %864 = arith.cmpi ult, %863, %c3_i64_385 : i64
    scf.if %864 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %863, %c3_i64_385 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %865 = arith.ori %853, %862 : i32
    %c1_i64_386 = arith.constant 1 : i64
    %866 = llvm.load %11 : !llvm.ptr -> i64
    %867 = arith.cmpi ult, %866, %c1_i64_386 : i64
    scf.if %867 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %866, %c1_i64_386 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16843009_i32_387 = arith.constant 16843009 : i32
    %c3_i64_388 = arith.constant 3 : i64
    %868 = llvm.load %11 : !llvm.ptr -> i64
    %869 = arith.cmpi ult, %868, %c3_i64_388 : i64
    scf.if %869 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %868, %c3_i64_388 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %870 = arith.andi %865, %c16843009_i32_387 : i32
    %c3_i64_389 = arith.constant 3 : i64
    %871 = llvm.load %11 : !llvm.ptr -> i64
    %872 = arith.cmpi ult, %871, %c3_i64_389 : i64
    scf.if %872 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %871, %c3_i64_389 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %873 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_390 = arith.constant 3 : i64
    %874 = llvm.load %11 : !llvm.ptr -> i64
    %875 = arith.cmpi ult, %874, %c3_i64_390 : i64
    scf.if %875 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %874, %c3_i64_390 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64_391 = arith.constant 0 : i64
    %876 = arith.extui %873 : i32 to i64
    %877 = arith.addi %876, %c0_i64_391 : i64
    %878 = llvm.getelementptr %14[%877] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %879 = llvm.load volatile %878 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_392 = arith.constant 3 : i64
    %880 = llvm.load %11 : !llvm.ptr -> i64
    %881 = arith.cmpi ult, %880, %c3_i64_392 : i64
    scf.if %881 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %880, %c3_i64_392 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %879, %9 : i32, !llvm.ptr
    %c1_i64_393 = arith.constant 1 : i64
    %882 = llvm.load %11 : !llvm.ptr -> i64
    %883 = arith.cmpi ult, %882, %c1_i64_393 : i64
    scf.if %883 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %882, %c1_i64_393 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-1_i32_394 = arith.constant -1 : i32
    %c3_i64_395 = arith.constant 3 : i64
    %884 = llvm.load %11 : !llvm.ptr -> i64
    %885 = arith.cmpi ult, %884, %c3_i64_395 : i64
    scf.if %885 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %884, %c3_i64_395 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %886 = arith.xori %879, %c-1_i32_394 : i32
    %c1_i64_396 = arith.constant 1 : i64
    %887 = llvm.load %11 : !llvm.ptr -> i64
    %888 = arith.cmpi ult, %887, %c1_i64_396 : i64
    scf.if %888 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %887, %c1_i64_396 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c7_i32_397 = arith.constant 7 : i32
    %c3_i64_398 = arith.constant 3 : i64
    %889 = llvm.load %11 : !llvm.ptr -> i64
    %890 = arith.cmpi ult, %889, %c3_i64_398 : i64
    scf.if %890 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %889, %c3_i64_398 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_399 = arith.constant 31 : i32
    %891 = arith.cmpi ule, %c7_i32_397, %c31_i32_399 : i32
    %892 = scf.if %891 -> (i32) {
      %1369 = arith.shrui %886, %c7_i32_397 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_400 = arith.constant 3 : i64
    %893 = llvm.load %11 : !llvm.ptr -> i64
    %894 = arith.cmpi ult, %893, %c3_i64_400 : i64
    scf.if %894 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %893, %c3_i64_400 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %895 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64_401 = arith.constant 1 : i64
    %896 = llvm.load %11 : !llvm.ptr -> i64
    %897 = arith.cmpi ult, %896, %c1_i64_401 : i64
    scf.if %897 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %896, %c1_i64_401 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c6_i32_402 = arith.constant 6 : i32
    %c3_i64_403 = arith.constant 3 : i64
    %898 = llvm.load %11 : !llvm.ptr -> i64
    %899 = arith.cmpi ult, %898, %c3_i64_403 : i64
    scf.if %899 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %898, %c3_i64_403 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_404 = arith.constant 31 : i32
    %900 = arith.cmpi ule, %c6_i32_402, %c31_i32_404 : i32
    %901 = scf.if %900 -> (i32) {
      %1369 = arith.shrui %895, %c6_i32_402 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_405 = arith.constant 3 : i64
    %902 = llvm.load %11 : !llvm.ptr -> i64
    %903 = arith.cmpi ult, %902, %c3_i64_405 : i64
    scf.if %903 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %902, %c3_i64_405 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %904 = arith.ori %892, %901 : i32
    %c1_i64_406 = arith.constant 1 : i64
    %905 = llvm.load %11 : !llvm.ptr -> i64
    %906 = arith.cmpi ult, %905, %c1_i64_406 : i64
    scf.if %906 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %905, %c1_i64_406 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16843009_i32_407 = arith.constant 16843009 : i32
    %c3_i64_408 = arith.constant 3 : i64
    %907 = llvm.load %11 : !llvm.ptr -> i64
    %908 = arith.cmpi ult, %907, %c3_i64_408 : i64
    scf.if %908 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %907, %c3_i64_408 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %909 = arith.andi %904, %c16843009_i32_407 : i32
    %c3_i64_409 = arith.constant 3 : i64
    %910 = llvm.load %11 : !llvm.ptr -> i64
    %911 = arith.cmpi ult, %910, %c3_i64_409 : i64
    scf.if %911 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %910, %c3_i64_409 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %912 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_410 = arith.constant 3 : i64
    %913 = llvm.load %11 : !llvm.ptr -> i64
    %914 = arith.cmpi ult, %913, %c3_i64_410 : i64
    scf.if %914 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %913, %c3_i64_410 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %915 = arith.addi %909, %912 : i32
    %c3_i64_411 = arith.constant 3 : i64
    %916 = llvm.load %11 : !llvm.ptr -> i64
    %917 = arith.cmpi ult, %916, %c3_i64_411 : i64
    scf.if %917 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %916, %c3_i64_411 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %918 = arith.addi %870, %915 : i32
    %c3_i64_412 = arith.constant 3 : i64
    %919 = llvm.load %11 : !llvm.ptr -> i64
    %920 = arith.cmpi ult, %919, %c3_i64_412 : i64
    scf.if %920 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %919, %c3_i64_412 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %921 = arith.addi %831, %918 : i32
    %c3_i64_413 = arith.constant 3 : i64
    %922 = llvm.load %11 : !llvm.ptr -> i64
    %923 = arith.cmpi ult, %922, %c3_i64_413 : i64
    scf.if %923 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %922, %c3_i64_413 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %924 = arith.addi %792, %921 : i32
    %c3_i64_414 = arith.constant 3 : i64
    %925 = llvm.load %11 : !llvm.ptr -> i64
    %926 = arith.cmpi ult, %925, %c3_i64_414 : i64
    scf.if %926 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %925, %c3_i64_414 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %924, %2 : i32, !llvm.ptr
    %c3_i64_415 = arith.constant 3 : i64
    %927 = llvm.load %11 : !llvm.ptr -> i64
    %928 = arith.cmpi ult, %927, %c3_i64_415 : i64
    scf.if %928 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %927, %c3_i64_415 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %929 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_416 = arith.constant 1 : i64
    %930 = llvm.load %11 : !llvm.ptr -> i64
    %931 = arith.cmpi ult, %930, %c1_i64_416 : i64
    scf.if %931 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %930, %c1_i64_416 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16_i32_417 = arith.constant 16 : i32
    %c3_i64_418 = arith.constant 3 : i64
    %932 = llvm.load %11 : !llvm.ptr -> i64
    %933 = arith.cmpi ult, %932, %c3_i64_418 : i64
    scf.if %933 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %932, %c3_i64_418 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %934 = arith.addi %929, %c16_i32_417 : i32
    %c3_i64_419 = arith.constant 3 : i64
    %935 = llvm.load %11 : !llvm.ptr -> i64
    %936 = arith.cmpi ult, %935, %c3_i64_419 : i64
    scf.if %936 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %935, %c3_i64_419 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %934, %1 : i32, !llvm.ptr
    %c3_i64_420 = arith.constant 3 : i64
    %937 = llvm.load %11 : !llvm.ptr -> i64
    %938 = arith.cmpi ult, %937, %c3_i64_420 : i64
    scf.if %938 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %937, %c3_i64_420 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %939 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_421 = arith.constant 3 : i64
    %940 = llvm.load %11 : !llvm.ptr -> i64
    %941 = arith.cmpi ult, %940, %c3_i64_421 : i64
    scf.if %941 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %940, %c3_i64_421 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %942 = arith.cmpi eq, %934, %939 : i32
    %943 = arith.extui %942 : i1 to i32
    %c0_i32_422 = arith.constant 0 : i32
    %944 = arith.cmpi eq, %943, %c0_i32_422 : i32
    %945 = arith.extui %944 : i1 to i32
    %c1_i64_423 = arith.constant 1 : i64
    %946 = llvm.load %11 : !llvm.ptr -> i64
    %947 = arith.cmpi ult, %946, %c1_i64_423 : i64
    scf.if %947 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %946, %c1_i64_423 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_424 = arith.constant 0 : i32
    %948 = arith.cmpi ne, %945, %c0_i32_424 : i32
    cf.cond_br %948, ^bb29, ^bb30
  ^bb30:  // pred: ^bb29
    %c1_i64_425 = arith.constant 1 : i64
    %949 = llvm.load %11 : !llvm.ptr -> i64
    %950 = arith.cmpi ult, %949, %c1_i64_425 : i64
    scf.if %950 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %949, %c1_i64_425 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb28
  ^bb31:  // pred: ^bb26
    %c1_i64_426 = arith.constant 1 : i64
    %951 = llvm.load %11 : !llvm.ptr -> i64
    %952 = arith.cmpi ult, %951, %c1_i64_426 : i64
    scf.if %952 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %951, %c1_i64_426 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb23
  ^bb32:  // 3 preds: ^bb23, ^bb33, ^bb34
    %c3_i64_427 = arith.constant 3 : i64
    %953 = llvm.load %11 : !llvm.ptr -> i64
    %954 = arith.cmpi ult, %953, %c3_i64_427 : i64
    scf.if %954 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %953, %c3_i64_427 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %955 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_428 = arith.constant 1 : i64
    %956 = llvm.load %11 : !llvm.ptr -> i64
    %957 = arith.cmpi ult, %956, %c1_i64_428 : i64
    scf.if %957 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %956, %c1_i64_428 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c8_i32_429 = arith.constant 8 : i32
    %c3_i64_430 = arith.constant 3 : i64
    %958 = llvm.load %11 : !llvm.ptr -> i64
    %959 = arith.cmpi ult, %958, %c3_i64_430 : i64
    scf.if %959 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %958, %c3_i64_430 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_431 = arith.constant 31 : i32
    %960 = arith.cmpi ule, %c8_i32_429, %c31_i32_431 : i32
    %961 = scf.if %960 -> (i32) {
      %1369 = arith.shrui %955, %c8_i32_429 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c1_i64_432 = arith.constant 1 : i64
    %962 = llvm.load %11 : !llvm.ptr -> i64
    %963 = arith.cmpi ult, %962, %c1_i64_432 : i64
    scf.if %963 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %962, %c1_i64_432 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c459007_i32 = arith.constant 459007 : i32
    %c3_i64_433 = arith.constant 3 : i64
    %964 = llvm.load %11 : !llvm.ptr -> i64
    %965 = arith.cmpi ult, %964, %c3_i64_433 : i64
    scf.if %965 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %964, %c3_i64_433 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %966 = arith.andi %961, %c459007_i32 : i32
    %c3_i64_434 = arith.constant 3 : i64
    %967 = llvm.load %11 : !llvm.ptr -> i64
    %968 = arith.cmpi ult, %967, %c3_i64_434 : i64
    scf.if %968 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %967, %c3_i64_434 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %969 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_435 = arith.constant 1 : i64
    %970 = llvm.load %11 : !llvm.ptr -> i64
    %971 = arith.cmpi ult, %970, %c1_i64_435 : i64
    scf.if %971 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %970, %c1_i64_435 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16711935_i32_436 = arith.constant 16711935 : i32
    %c3_i64_437 = arith.constant 3 : i64
    %972 = llvm.load %11 : !llvm.ptr -> i64
    %973 = arith.cmpi ult, %972, %c3_i64_437 : i64
    scf.if %973 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %972, %c3_i64_437 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %974 = arith.andi %969, %c16711935_i32_436 : i32
    %c3_i64_438 = arith.constant 3 : i64
    %975 = llvm.load %11 : !llvm.ptr -> i64
    %976 = arith.cmpi ult, %975, %c3_i64_438 : i64
    scf.if %976 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %975, %c3_i64_438 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %977 = arith.addi %966, %974 : i32
    %c1_i64_439 = arith.constant 1 : i64
    %978 = llvm.load %11 : !llvm.ptr -> i64
    %979 = arith.cmpi ult, %978, %c1_i64_439 : i64
    scf.if %979 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %978, %c1_i64_439 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c65537_i32_440 = arith.constant 65537 : i32
    %c5_i64_441 = arith.constant 5 : i64
    %980 = llvm.load %11 : !llvm.ptr -> i64
    %981 = arith.cmpi ult, %980, %c5_i64_441 : i64
    scf.if %981 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %980, %c5_i64_441 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %982 = arith.muli %977, %c65537_i32_440 : i32
    %c1_i64_442 = arith.constant 1 : i64
    %983 = llvm.load %11 : !llvm.ptr -> i64
    %984 = arith.cmpi ult, %983, %c1_i64_442 : i64
    scf.if %984 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %983, %c1_i64_442 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16_i32_443 = arith.constant 16 : i32
    %c3_i64_444 = arith.constant 3 : i64
    %985 = llvm.load %11 : !llvm.ptr -> i64
    %986 = arith.cmpi ult, %985, %c3_i64_444 : i64
    scf.if %986 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %985, %c3_i64_444 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_445 = arith.constant 31 : i32
    %987 = arith.cmpi ule, %c16_i32_443, %c31_i32_445 : i32
    %988 = scf.if %987 -> (i32) {
      %1369 = arith.shrui %982, %c16_i32_443 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_446 = arith.constant 3 : i64
    %989 = llvm.load %11 : !llvm.ptr -> i64
    %990 = arith.cmpi ult, %989, %c3_i64_446 : i64
    scf.if %990 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %989, %c3_i64_446 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %991 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_447 = arith.constant 3 : i64
    %992 = llvm.load %11 : !llvm.ptr -> i64
    %993 = arith.cmpi ult, %992, %c3_i64_447 : i64
    scf.if %993 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %992, %c3_i64_447 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %994 = arith.addi %988, %991 : i32
    %c1_i64_448 = arith.constant 1 : i64
    %995 = llvm.load %11 : !llvm.ptr -> i64
    %996 = arith.cmpi ult, %995, %c1_i64_448 : i64
    scf.if %996 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %995, %c1_i64_448 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb2(%994 : i32)
  ^bb33:  // pred: ^bb23
    %c3_i64_449 = arith.constant 3 : i64
    %997 = llvm.load %11 : !llvm.ptr -> i64
    %998 = arith.cmpi ult, %997, %c3_i64_449 : i64
    scf.if %998 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %997, %c3_i64_449 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %999 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_450 = arith.constant 3 : i64
    %1000 = llvm.load %11 : !llvm.ptr -> i64
    %1001 = arith.cmpi ult, %1000, %c3_i64_450 : i64
    scf.if %1001 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1000, %c3_i64_450 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c4_i64_451 = arith.constant 4 : i64
    %1002 = arith.extui %999 : i32 to i64
    %1003 = arith.addi %1002, %c4_i64_451 : i64
    %1004 = llvm.getelementptr %14[%1003] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1005 = llvm.load volatile %1004 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_452 = arith.constant 3 : i64
    %1006 = llvm.load %11 : !llvm.ptr -> i64
    %1007 = arith.cmpi ult, %1006, %c3_i64_452 : i64
    scf.if %1007 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1006, %c3_i64_452 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1005, %9 : i32, !llvm.ptr
    %c1_i64_453 = arith.constant 1 : i64
    %1008 = llvm.load %11 : !llvm.ptr -> i64
    %1009 = arith.cmpi ult, %1008, %c1_i64_453 : i64
    scf.if %1009 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1008, %c1_i64_453 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-1_i32_454 = arith.constant -1 : i32
    %c3_i64_455 = arith.constant 3 : i64
    %1010 = llvm.load %11 : !llvm.ptr -> i64
    %1011 = arith.cmpi ult, %1010, %c3_i64_455 : i64
    scf.if %1011 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1010, %c3_i64_455 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1012 = arith.xori %1005, %c-1_i32_454 : i32
    %c1_i64_456 = arith.constant 1 : i64
    %1013 = llvm.load %11 : !llvm.ptr -> i64
    %1014 = arith.cmpi ult, %1013, %c1_i64_456 : i64
    scf.if %1014 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1013, %c1_i64_456 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c7_i32_457 = arith.constant 7 : i32
    %c3_i64_458 = arith.constant 3 : i64
    %1015 = llvm.load %11 : !llvm.ptr -> i64
    %1016 = arith.cmpi ult, %1015, %c3_i64_458 : i64
    scf.if %1016 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1015, %c3_i64_458 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_459 = arith.constant 31 : i32
    %1017 = arith.cmpi ule, %c7_i32_457, %c31_i32_459 : i32
    %1018 = scf.if %1017 -> (i32) {
      %1369 = arith.shrui %1012, %c7_i32_457 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_460 = arith.constant 3 : i64
    %1019 = llvm.load %11 : !llvm.ptr -> i64
    %1020 = arith.cmpi ult, %1019, %c3_i64_460 : i64
    scf.if %1020 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1019, %c3_i64_460 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1021 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64_461 = arith.constant 1 : i64
    %1022 = llvm.load %11 : !llvm.ptr -> i64
    %1023 = arith.cmpi ult, %1022, %c1_i64_461 : i64
    scf.if %1023 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1022, %c1_i64_461 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c6_i32_462 = arith.constant 6 : i32
    %c3_i64_463 = arith.constant 3 : i64
    %1024 = llvm.load %11 : !llvm.ptr -> i64
    %1025 = arith.cmpi ult, %1024, %c3_i64_463 : i64
    scf.if %1025 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1024, %c3_i64_463 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_464 = arith.constant 31 : i32
    %1026 = arith.cmpi ule, %c6_i32_462, %c31_i32_464 : i32
    %1027 = scf.if %1026 -> (i32) {
      %1369 = arith.shrui %1021, %c6_i32_462 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_465 = arith.constant 3 : i64
    %1028 = llvm.load %11 : !llvm.ptr -> i64
    %1029 = arith.cmpi ult, %1028, %c3_i64_465 : i64
    scf.if %1029 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1028, %c3_i64_465 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1030 = arith.ori %1018, %1027 : i32
    %c1_i64_466 = arith.constant 1 : i64
    %1031 = llvm.load %11 : !llvm.ptr -> i64
    %1032 = arith.cmpi ult, %1031, %c1_i64_466 : i64
    scf.if %1032 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1031, %c1_i64_466 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16843009_i32_467 = arith.constant 16843009 : i32
    %c3_i64_468 = arith.constant 3 : i64
    %1033 = llvm.load %11 : !llvm.ptr -> i64
    %1034 = arith.cmpi ult, %1033, %c3_i64_468 : i64
    scf.if %1034 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1033, %c3_i64_468 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1035 = arith.andi %1030, %c16843009_i32_467 : i32
    %c3_i64_469 = arith.constant 3 : i64
    %1036 = llvm.load %11 : !llvm.ptr -> i64
    %1037 = arith.cmpi ult, %1036, %c3_i64_469 : i64
    scf.if %1037 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1036, %c3_i64_469 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1038 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_470 = arith.constant 3 : i64
    %1039 = llvm.load %11 : !llvm.ptr -> i64
    %1040 = arith.cmpi ult, %1039, %c3_i64_470 : i64
    scf.if %1040 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1039, %c3_i64_470 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1041 = arith.addi %1035, %1038 : i32
    %c3_i64_471 = arith.constant 3 : i64
    %1042 = llvm.load %11 : !llvm.ptr -> i64
    %1043 = arith.cmpi ult, %1042, %c3_i64_471 : i64
    scf.if %1043 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1042, %c3_i64_471 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1041, %1 : i32, !llvm.ptr
    %c3_i64_472 = arith.constant 3 : i64
    %1044 = llvm.load %11 : !llvm.ptr -> i64
    %1045 = arith.cmpi ult, %1044, %c3_i64_472 : i64
    scf.if %1045 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1044, %c3_i64_472 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1046 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_473 = arith.constant 1 : i64
    %1047 = llvm.load %11 : !llvm.ptr -> i64
    %1048 = arith.cmpi ult, %1047, %c1_i64_473 : i64
    scf.if %1048 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1047, %c1_i64_473 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c2_i32_474 = arith.constant 2 : i32
    %c3_i64_475 = arith.constant 3 : i64
    %1049 = llvm.load %11 : !llvm.ptr -> i64
    %1050 = arith.cmpi ult, %1049, %c3_i64_475 : i64
    scf.if %1050 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1049, %c3_i64_475 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1051 = arith.cmpi eq, %1046, %c2_i32_474 : i32
    %1052 = arith.extui %1051 : i1 to i32
    %c1_i64_476 = arith.constant 1 : i64
    %1053 = llvm.load %11 : !llvm.ptr -> i64
    %1054 = arith.cmpi ult, %1053, %c1_i64_476 : i64
    scf.if %1054 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1053, %c1_i64_476 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_477 = arith.constant 0 : i32
    %1055 = arith.cmpi ne, %1052, %c0_i32_477 : i32
    cf.cond_br %1055, ^bb32, ^bb34
  ^bb34:  // pred: ^bb33
    %c3_i64_478 = arith.constant 3 : i64
    %1056 = llvm.load %11 : !llvm.ptr -> i64
    %1057 = arith.cmpi ult, %1056, %c3_i64_478 : i64
    scf.if %1057 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1056, %c3_i64_478 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1058 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_479 = arith.constant 3 : i64
    %1059 = llvm.load %11 : !llvm.ptr -> i64
    %1060 = arith.cmpi ult, %1059, %c3_i64_479 : i64
    scf.if %1060 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1059, %c3_i64_479 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c8_i64_480 = arith.constant 8 : i64
    %1061 = arith.extui %1058 : i32 to i64
    %1062 = arith.addi %1061, %c8_i64_480 : i64
    %1063 = llvm.getelementptr %14[%1062] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1064 = llvm.load volatile %1063 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_481 = arith.constant 3 : i64
    %1065 = llvm.load %11 : !llvm.ptr -> i64
    %1066 = arith.cmpi ult, %1065, %c3_i64_481 : i64
    scf.if %1066 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1065, %c3_i64_481 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1064, %2 : i32, !llvm.ptr
    %c1_i64_482 = arith.constant 1 : i64
    %1067 = llvm.load %11 : !llvm.ptr -> i64
    %1068 = arith.cmpi ult, %1067, %c1_i64_482 : i64
    scf.if %1068 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1067, %c1_i64_482 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-1_i32_483 = arith.constant -1 : i32
    %c3_i64_484 = arith.constant 3 : i64
    %1069 = llvm.load %11 : !llvm.ptr -> i64
    %1070 = arith.cmpi ult, %1069, %c3_i64_484 : i64
    scf.if %1070 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1069, %c3_i64_484 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1071 = arith.xori %1064, %c-1_i32_483 : i32
    %c1_i64_485 = arith.constant 1 : i64
    %1072 = llvm.load %11 : !llvm.ptr -> i64
    %1073 = arith.cmpi ult, %1072, %c1_i64_485 : i64
    scf.if %1073 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1072, %c1_i64_485 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c7_i32_486 = arith.constant 7 : i32
    %c3_i64_487 = arith.constant 3 : i64
    %1074 = llvm.load %11 : !llvm.ptr -> i64
    %1075 = arith.cmpi ult, %1074, %c3_i64_487 : i64
    scf.if %1075 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1074, %c3_i64_487 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_488 = arith.constant 31 : i32
    %1076 = arith.cmpi ule, %c7_i32_486, %c31_i32_488 : i32
    %1077 = scf.if %1076 -> (i32) {
      %1369 = arith.shrui %1071, %c7_i32_486 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_489 = arith.constant 3 : i64
    %1078 = llvm.load %11 : !llvm.ptr -> i64
    %1079 = arith.cmpi ult, %1078, %c3_i64_489 : i64
    scf.if %1079 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1078, %c3_i64_489 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1080 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_490 = arith.constant 1 : i64
    %1081 = llvm.load %11 : !llvm.ptr -> i64
    %1082 = arith.cmpi ult, %1081, %c1_i64_490 : i64
    scf.if %1082 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1081, %c1_i64_490 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c6_i32_491 = arith.constant 6 : i32
    %c3_i64_492 = arith.constant 3 : i64
    %1083 = llvm.load %11 : !llvm.ptr -> i64
    %1084 = arith.cmpi ult, %1083, %c3_i64_492 : i64
    scf.if %1084 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1083, %c3_i64_492 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c31_i32_493 = arith.constant 31 : i32
    %1085 = arith.cmpi ule, %c6_i32_491, %c31_i32_493 : i32
    %1086 = scf.if %1085 -> (i32) {
      %1369 = arith.shrui %1080, %c6_i32_491 : i32
      scf.yield %1369 : i32
    } else {
      %c0_i32_624 = arith.constant 0 : i32
      scf.yield %c0_i32_624 : i32
    }
    %c3_i64_494 = arith.constant 3 : i64
    %1087 = llvm.load %11 : !llvm.ptr -> i64
    %1088 = arith.cmpi ult, %1087, %c3_i64_494 : i64
    scf.if %1088 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1087, %c3_i64_494 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1089 = arith.ori %1077, %1086 : i32
    %c1_i64_495 = arith.constant 1 : i64
    %1090 = llvm.load %11 : !llvm.ptr -> i64
    %1091 = arith.cmpi ult, %1090, %c1_i64_495 : i64
    scf.if %1091 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1090, %c1_i64_495 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c16843009_i32_496 = arith.constant 16843009 : i32
    %c3_i64_497 = arith.constant 3 : i64
    %1092 = llvm.load %11 : !llvm.ptr -> i64
    %1093 = arith.cmpi ult, %1092, %c3_i64_497 : i64
    scf.if %1093 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1092, %c3_i64_497 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1094 = arith.andi %1089, %c16843009_i32_496 : i32
    %c3_i64_498 = arith.constant 3 : i64
    %1095 = llvm.load %11 : !llvm.ptr -> i64
    %1096 = arith.cmpi ult, %1095, %c3_i64_498 : i64
    scf.if %1096 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1095, %c3_i64_498 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1097 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_499 = arith.constant 3 : i64
    %1098 = llvm.load %11 : !llvm.ptr -> i64
    %1099 = arith.cmpi ult, %1098, %c3_i64_499 : i64
    scf.if %1099 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1098, %c3_i64_499 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1100 = arith.addi %1094, %1097 : i32
    %c3_i64_500 = arith.constant 3 : i64
    %1101 = llvm.load %11 : !llvm.ptr -> i64
    %1102 = arith.cmpi ult, %1101, %c3_i64_500 : i64
    scf.if %1102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1101, %c3_i64_500 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1100, %1 : i32, !llvm.ptr
    %c1_i64_501 = arith.constant 1 : i64
    %1103 = llvm.load %11 : !llvm.ptr -> i64
    %1104 = arith.cmpi ult, %1103, %c1_i64_501 : i64
    scf.if %1104 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1103, %c1_i64_501 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb32
  ^bb35:  // pred: ^bb4
    %c3_i64_502 = arith.constant 3 : i64
    %1105 = llvm.load %11 : !llvm.ptr -> i64
    %1106 = arith.cmpi ult, %1105, %c3_i64_502 : i64
    scf.if %1106 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1105, %c3_i64_502 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1107 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_503 = arith.constant 1 : i64
    %1108 = llvm.load %11 : !llvm.ptr -> i64
    %1109 = arith.cmpi ult, %1108, %c1_i64_503 : i64
    scf.if %1109 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1108, %c1_i64_503 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i32_504 = arith.constant 3 : i32
    %c3_i64_505 = arith.constant 3 : i64
    %1110 = llvm.load %11 : !llvm.ptr -> i64
    %1111 = arith.cmpi ult, %1110, %c3_i64_505 : i64
    scf.if %1111 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1110, %c3_i64_505 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1112 = arith.andi %1107, %c3_i32_504 : i32
    %c3_i64_506 = arith.constant 3 : i64
    %1113 = llvm.load %11 : !llvm.ptr -> i64
    %1114 = arith.cmpi ult, %1113, %c3_i64_506 : i64
    scf.if %1114 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1113, %c3_i64_506 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1112, %9 : i32, !llvm.ptr
    %c1_i64_507 = arith.constant 1 : i64
    %1115 = llvm.load %11 : !llvm.ptr -> i64
    %1116 = arith.cmpi ult, %1115, %c1_i64_507 : i64
    scf.if %1116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1115, %c1_i64_507 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c1_i64_508 = arith.constant 1 : i64
    %1117 = llvm.load %11 : !llvm.ptr -> i64
    %1118 = arith.cmpi ult, %1117, %c1_i64_508 : i64
    scf.if %1118 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1117, %c1_i64_508 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i64_509 = arith.constant 3 : i64
    %1119 = llvm.load %11 : !llvm.ptr -> i64
    %1120 = arith.cmpi ult, %1119, %c3_i64_509 : i64
    scf.if %1120 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1119, %c3_i64_509 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1121 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_510 = arith.constant 1 : i64
    %1122 = llvm.load %11 : !llvm.ptr -> i64
    %1123 = arith.cmpi ult, %1122, %c1_i64_510 : i64
    scf.if %1123 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1122, %c1_i64_510 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c4_i32_511 = arith.constant 4 : i32
    %c3_i64_512 = arith.constant 3 : i64
    %1124 = llvm.load %11 : !llvm.ptr -> i64
    %1125 = arith.cmpi ult, %1124, %c3_i64_512 : i64
    scf.if %1125 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1124, %c3_i64_512 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1126 = arith.cmpi uge, %1121, %c4_i32_511 : i32
    %1127 = arith.extui %1126 : i1 to i32
    %c1_i64_513 = arith.constant 1 : i64
    %1128 = llvm.load %11 : !llvm.ptr -> i64
    %1129 = arith.cmpi ult, %1128, %c1_i64_513 : i64
    scf.if %1129 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1128, %c1_i64_513 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_514 = arith.constant 0 : i32
    %1130 = arith.cmpi ne, %1127, %c0_i32_514 : i32
    cf.cond_br %1130, ^bb38, ^bb39
  ^bb36:  // pred: ^bb4
    %c1_i64_515 = arith.constant 1 : i64
    %1131 = llvm.load %11 : !llvm.ptr -> i64
    %1132 = arith.cmpi ult, %1131, %c1_i64_515 : i64
    scf.if %1132 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1131, %c1_i64_515 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_516 = arith.constant 0 : i32
    %c1_i64_517 = arith.constant 1 : i64
    %1133 = llvm.load %11 : !llvm.ptr -> i64
    %1134 = arith.cmpi ult, %1133, %c1_i64_517 : i64
    scf.if %1134 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1133, %c1_i64_517 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c0_i32_516 : i32)
  ^bb37:  // 2 preds: ^bb39, ^bb40
    %c3_i64_518 = arith.constant 3 : i64
    %1135 = llvm.load %11 : !llvm.ptr -> i64
    %1136 = arith.cmpi ult, %1135, %c3_i64_518 : i64
    scf.if %1136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1135, %c3_i64_518 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1137 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_519 = arith.constant 3 : i64
    %1138 = llvm.load %11 : !llvm.ptr -> i64
    %1139 = arith.cmpi ult, %1138, %c3_i64_519 : i64
    scf.if %1139 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1138, %c3_i64_519 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_520 = arith.constant 0 : i32
    %1140 = arith.cmpi eq, %1137, %c0_i32_520 : i32
    %1141 = arith.extui %1140 : i1 to i32
    %c1_i64_521 = arith.constant 1 : i64
    %1142 = llvm.load %11 : !llvm.ptr -> i64
    %1143 = arith.cmpi ult, %1142, %c1_i64_521 : i64
    scf.if %1143 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1142, %c1_i64_521 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_522 = arith.constant 0 : i32
    %1144 = arith.cmpi ne, %1141, %c0_i32_522 : i32
    cf.cond_br %1144, ^bb3, ^bb43
  ^bb38:  // pred: ^bb35
    %c3_i64_523 = arith.constant 3 : i64
    %1145 = llvm.load %11 : !llvm.ptr -> i64
    %1146 = arith.cmpi ult, %1145, %c3_i64_523 : i64
    scf.if %1146 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1145, %c3_i64_523 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1147 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_524 = arith.constant 1 : i64
    %1148 = llvm.load %11 : !llvm.ptr -> i64
    %1149 = arith.cmpi ult, %1148, %c1_i64_524 : i64
    scf.if %1149 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1148, %c1_i64_524 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-4_i32_525 = arith.constant -4 : i32
    %c3_i64_526 = arith.constant 3 : i64
    %1150 = llvm.load %11 : !llvm.ptr -> i64
    %1151 = arith.cmpi ult, %1150, %c3_i64_526 : i64
    scf.if %1151 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1150, %c3_i64_526 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1152 = arith.andi %1147, %c-4_i32_525 : i32
    %c3_i64_527 = arith.constant 3 : i64
    %1153 = llvm.load %11 : !llvm.ptr -> i64
    %1154 = arith.cmpi ult, %1153, %c3_i64_527 : i64
    scf.if %1154 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1153, %c3_i64_527 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1152, %3 : i32, !llvm.ptr
    %c1_i64_528 = arith.constant 1 : i64
    %1155 = llvm.load %11 : !llvm.ptr -> i64
    %1156 = arith.cmpi ult, %1155, %c1_i64_528 : i64
    scf.if %1156 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1155, %c1_i64_528 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_529 = arith.constant 0 : i32
    %c3_i64_530 = arith.constant 3 : i64
    %1157 = llvm.load %11 : !llvm.ptr -> i64
    %1158 = arith.cmpi ult, %1157, %c3_i64_530 : i64
    scf.if %1158 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1157, %c3_i64_530 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_529, %8 : i32, !llvm.ptr
    %c1_i64_531 = arith.constant 1 : i64
    %1159 = llvm.load %11 : !llvm.ptr -> i64
    %1160 = arith.cmpi ult, %1159, %c1_i64_531 : i64
    scf.if %1160 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1159, %c1_i64_531 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_532 = arith.constant 0 : i32
    %c3_i64_533 = arith.constant 3 : i64
    %1161 = llvm.load %11 : !llvm.ptr -> i64
    %1162 = arith.cmpi ult, %1161, %c3_i64_533 : i64
    scf.if %1162 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1161, %c3_i64_533 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_532, %2 : i32, !llvm.ptr
    %c1_i64_534 = arith.constant 1 : i64
    %1163 = llvm.load %11 : !llvm.ptr -> i64
    %1164 = arith.cmpi ult, %1163, %c1_i64_534 : i64
    scf.if %1164 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1163, %c1_i64_534 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb41
  ^bb39:  // pred: ^bb35
    %c1_i64_535 = arith.constant 1 : i64
    %1165 = llvm.load %11 : !llvm.ptr -> i64
    %1166 = arith.cmpi ult, %1165, %c1_i64_535 : i64
    scf.if %1166 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1165, %c1_i64_535 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_536 = arith.constant 0 : i32
    %c3_i64_537 = arith.constant 3 : i64
    %1167 = llvm.load %11 : !llvm.ptr -> i64
    %1168 = arith.cmpi ult, %1167, %c3_i64_537 : i64
    scf.if %1168 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1167, %c3_i64_537 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_536, %8 : i32, !llvm.ptr
    %c1_i64_538 = arith.constant 1 : i64
    %1169 = llvm.load %11 : !llvm.ptr -> i64
    %1170 = arith.cmpi ult, %1169, %c1_i64_538 : i64
    scf.if %1170 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1169, %c1_i64_538 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_539 = arith.constant 0 : i32
    %c3_i64_540 = arith.constant 3 : i64
    %1171 = llvm.load %11 : !llvm.ptr -> i64
    %1172 = arith.cmpi ult, %1171, %c3_i64_540 : i64
    scf.if %1172 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1171, %c3_i64_540 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_539, %2 : i32, !llvm.ptr
    %c1_i64_541 = arith.constant 1 : i64
    %1173 = llvm.load %11 : !llvm.ptr -> i64
    %1174 = arith.cmpi ult, %1173, %c1_i64_541 : i64
    scf.if %1174 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1173, %c1_i64_541 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb37
  ^bb40:  // pred: ^bb42
    %c1_i64_542 = arith.constant 1 : i64
    %1175 = llvm.load %11 : !llvm.ptr -> i64
    %1176 = arith.cmpi ult, %1175, %c1_i64_542 : i64
    scf.if %1176 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1175, %c1_i64_542 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb37
  ^bb41:  // 2 preds: ^bb38, ^bb41
    %c3_i64_543 = arith.constant 3 : i64
    %1177 = llvm.load %11 : !llvm.ptr -> i64
    %1178 = arith.cmpi ult, %1177, %c3_i64_543 : i64
    scf.if %1178 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1177, %c3_i64_543 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1179 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_544 = arith.constant 3 : i64
    %1180 = llvm.load %11 : !llvm.ptr -> i64
    %1181 = arith.cmpi ult, %1180, %c3_i64_544 : i64
    scf.if %1181 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1180, %c3_i64_544 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1182 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_545 = arith.constant 3 : i64
    %1183 = llvm.load %11 : !llvm.ptr -> i64
    %1184 = arith.cmpi ult, %1183, %c3_i64_545 : i64
    scf.if %1184 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1183, %c3_i64_545 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1185 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_546 = arith.constant 3 : i64
    %1186 = llvm.load %11 : !llvm.ptr -> i64
    %1187 = arith.cmpi ult, %1186, %c3_i64_546 : i64
    scf.if %1187 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1186, %c3_i64_546 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1188 = arith.addi %1182, %1185 : i32
    %c3_i64_547 = arith.constant 3 : i64
    %1189 = llvm.load %11 : !llvm.ptr -> i64
    %1190 = arith.cmpi ult, %1189, %c3_i64_547 : i64
    scf.if %1190 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1189, %c3_i64_547 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1188, %1 : i32, !llvm.ptr
    %c3_i64_548 = arith.constant 3 : i64
    %1191 = llvm.load %11 : !llvm.ptr -> i64
    %1192 = arith.cmpi ult, %1191, %c3_i64_548 : i64
    scf.if %1192 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1191, %c3_i64_548 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64_549 = arith.constant 0 : i64
    %1193 = arith.extui %1188 : i32 to i64
    %1194 = arith.addi %1193, %c0_i64_549 : i64
    %1195 = llvm.getelementptr %14[%1194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1196 = llvm.load volatile %1195 {alignment = 1 : i64} : !llvm.ptr -> i8
    %1197 = arith.extsi %1196 : i8 to i32
    %c1_i64_550 = arith.constant 1 : i64
    %1198 = llvm.load %11 : !llvm.ptr -> i64
    %1199 = arith.cmpi ult, %1198, %c1_i64_550 : i64
    scf.if %1199 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1198, %c1_i64_550 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32_551 = arith.constant -65 : i32
    %c3_i64_552 = arith.constant 3 : i64
    %1200 = llvm.load %11 : !llvm.ptr -> i64
    %1201 = arith.cmpi ult, %1200, %c3_i64_552 : i64
    scf.if %1201 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1200, %c3_i64_552 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1202 = arith.cmpi sgt, %1197, %c-65_i32_551 : i32
    %1203 = arith.extui %1202 : i1 to i32
    %c3_i64_553 = arith.constant 3 : i64
    %1204 = llvm.load %11 : !llvm.ptr -> i64
    %1205 = arith.cmpi ult, %1204, %c3_i64_553 : i64
    scf.if %1205 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1204, %c3_i64_553 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1206 = arith.addi %1179, %1203 : i32
    %c3_i64_554 = arith.constant 3 : i64
    %1207 = llvm.load %11 : !llvm.ptr -> i64
    %1208 = arith.cmpi ult, %1207, %c3_i64_554 : i64
    scf.if %1208 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1207, %c3_i64_554 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1209 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_555 = arith.constant 1 : i64
    %1210 = llvm.load %11 : !llvm.ptr -> i64
    %1211 = arith.cmpi ult, %1210, %c1_i64_555 : i64
    scf.if %1211 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1210, %c1_i64_555 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c1_i32_556 = arith.constant 1 : i32
    %c3_i64_557 = arith.constant 3 : i64
    %1212 = llvm.load %11 : !llvm.ptr -> i64
    %1213 = arith.cmpi ult, %1212, %c3_i64_557 : i64
    scf.if %1213 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1212, %c3_i64_557 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1214 = arith.addi %1209, %c1_i32_556 : i32
    %c3_i64_558 = arith.constant 3 : i64
    %1215 = llvm.load %11 : !llvm.ptr -> i64
    %1216 = arith.cmpi ult, %1215, %c3_i64_558 : i64
    scf.if %1216 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1215, %c3_i64_558 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64_559 = arith.constant 0 : i64
    %1217 = arith.extui %1214 : i32 to i64
    %1218 = arith.addi %1217, %c0_i64_559 : i64
    %1219 = llvm.getelementptr %14[%1218] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1220 = llvm.load volatile %1219 {alignment = 1 : i64} : !llvm.ptr -> i8
    %1221 = arith.extsi %1220 : i8 to i32
    %c1_i64_560 = arith.constant 1 : i64
    %1222 = llvm.load %11 : !llvm.ptr -> i64
    %1223 = arith.cmpi ult, %1222, %c1_i64_560 : i64
    scf.if %1223 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1222, %c1_i64_560 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32_561 = arith.constant -65 : i32
    %c3_i64_562 = arith.constant 3 : i64
    %1224 = llvm.load %11 : !llvm.ptr -> i64
    %1225 = arith.cmpi ult, %1224, %c3_i64_562 : i64
    scf.if %1225 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1224, %c3_i64_562 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1226 = arith.cmpi sgt, %1221, %c-65_i32_561 : i32
    %1227 = arith.extui %1226 : i1 to i32
    %c3_i64_563 = arith.constant 3 : i64
    %1228 = llvm.load %11 : !llvm.ptr -> i64
    %1229 = arith.cmpi ult, %1228, %c3_i64_563 : i64
    scf.if %1229 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1228, %c3_i64_563 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1230 = arith.addi %1206, %1227 : i32
    %c3_i64_564 = arith.constant 3 : i64
    %1231 = llvm.load %11 : !llvm.ptr -> i64
    %1232 = arith.cmpi ult, %1231, %c3_i64_564 : i64
    scf.if %1232 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1231, %c3_i64_564 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1233 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_565 = arith.constant 1 : i64
    %1234 = llvm.load %11 : !llvm.ptr -> i64
    %1235 = arith.cmpi ult, %1234, %c1_i64_565 : i64
    scf.if %1235 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1234, %c1_i64_565 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c2_i32_566 = arith.constant 2 : i32
    %c3_i64_567 = arith.constant 3 : i64
    %1236 = llvm.load %11 : !llvm.ptr -> i64
    %1237 = arith.cmpi ult, %1236, %c3_i64_567 : i64
    scf.if %1237 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1236, %c3_i64_567 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1238 = arith.addi %1233, %c2_i32_566 : i32
    %c3_i64_568 = arith.constant 3 : i64
    %1239 = llvm.load %11 : !llvm.ptr -> i64
    %1240 = arith.cmpi ult, %1239, %c3_i64_568 : i64
    scf.if %1240 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1239, %c3_i64_568 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64_569 = arith.constant 0 : i64
    %1241 = arith.extui %1238 : i32 to i64
    %1242 = arith.addi %1241, %c0_i64_569 : i64
    %1243 = llvm.getelementptr %14[%1242] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1244 = llvm.load volatile %1243 {alignment = 1 : i64} : !llvm.ptr -> i8
    %1245 = arith.extsi %1244 : i8 to i32
    %c1_i64_570 = arith.constant 1 : i64
    %1246 = llvm.load %11 : !llvm.ptr -> i64
    %1247 = arith.cmpi ult, %1246, %c1_i64_570 : i64
    scf.if %1247 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1246, %c1_i64_570 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32_571 = arith.constant -65 : i32
    %c3_i64_572 = arith.constant 3 : i64
    %1248 = llvm.load %11 : !llvm.ptr -> i64
    %1249 = arith.cmpi ult, %1248, %c3_i64_572 : i64
    scf.if %1249 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1248, %c3_i64_572 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1250 = arith.cmpi sgt, %1245, %c-65_i32_571 : i32
    %1251 = arith.extui %1250 : i1 to i32
    %c3_i64_573 = arith.constant 3 : i64
    %1252 = llvm.load %11 : !llvm.ptr -> i64
    %1253 = arith.cmpi ult, %1252, %c3_i64_573 : i64
    scf.if %1253 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1252, %c3_i64_573 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1254 = arith.addi %1230, %1251 : i32
    %c3_i64_574 = arith.constant 3 : i64
    %1255 = llvm.load %11 : !llvm.ptr -> i64
    %1256 = arith.cmpi ult, %1255, %c3_i64_574 : i64
    scf.if %1256 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1255, %c3_i64_574 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1257 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_575 = arith.constant 1 : i64
    %1258 = llvm.load %11 : !llvm.ptr -> i64
    %1259 = arith.cmpi ult, %1258, %c1_i64_575 : i64
    scf.if %1259 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1258, %c1_i64_575 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c3_i32_576 = arith.constant 3 : i32
    %c3_i64_577 = arith.constant 3 : i64
    %1260 = llvm.load %11 : !llvm.ptr -> i64
    %1261 = arith.cmpi ult, %1260, %c3_i64_577 : i64
    scf.if %1261 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1260, %c3_i64_577 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1262 = arith.addi %1257, %c3_i32_576 : i32
    %c3_i64_578 = arith.constant 3 : i64
    %1263 = llvm.load %11 : !llvm.ptr -> i64
    %1264 = arith.cmpi ult, %1263, %c3_i64_578 : i64
    scf.if %1264 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1263, %c3_i64_578 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64_579 = arith.constant 0 : i64
    %1265 = arith.extui %1262 : i32 to i64
    %1266 = arith.addi %1265, %c0_i64_579 : i64
    %1267 = llvm.getelementptr %14[%1266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1268 = llvm.load volatile %1267 {alignment = 1 : i64} : !llvm.ptr -> i8
    %1269 = arith.extsi %1268 : i8 to i32
    %c1_i64_580 = arith.constant 1 : i64
    %1270 = llvm.load %11 : !llvm.ptr -> i64
    %1271 = arith.cmpi ult, %1270, %c1_i64_580 : i64
    scf.if %1271 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1270, %c1_i64_580 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32_581 = arith.constant -65 : i32
    %c3_i64_582 = arith.constant 3 : i64
    %1272 = llvm.load %11 : !llvm.ptr -> i64
    %1273 = arith.cmpi ult, %1272, %c3_i64_582 : i64
    scf.if %1273 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1272, %c3_i64_582 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1274 = arith.cmpi sgt, %1269, %c-65_i32_581 : i32
    %1275 = arith.extui %1274 : i1 to i32
    %c3_i64_583 = arith.constant 3 : i64
    %1276 = llvm.load %11 : !llvm.ptr -> i64
    %1277 = arith.cmpi ult, %1276, %c3_i64_583 : i64
    scf.if %1277 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1276, %c3_i64_583 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1278 = arith.addi %1254, %1275 : i32
    %c3_i64_584 = arith.constant 3 : i64
    %1279 = llvm.load %11 : !llvm.ptr -> i64
    %1280 = arith.cmpi ult, %1279, %c3_i64_584 : i64
    scf.if %1280 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1279, %c3_i64_584 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1278, %8 : i32, !llvm.ptr
    %c3_i64_585 = arith.constant 3 : i64
    %1281 = llvm.load %11 : !llvm.ptr -> i64
    %1282 = arith.cmpi ult, %1281, %c3_i64_585 : i64
    scf.if %1282 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1281, %c3_i64_585 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1283 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_586 = arith.constant 3 : i64
    %1284 = llvm.load %11 : !llvm.ptr -> i64
    %1285 = arith.cmpi ult, %1284, %c3_i64_586 : i64
    scf.if %1285 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1284, %c3_i64_586 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1286 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_587 = arith.constant 1 : i64
    %1287 = llvm.load %11 : !llvm.ptr -> i64
    %1288 = arith.cmpi ult, %1287, %c1_i64_587 : i64
    scf.if %1288 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1287, %c1_i64_587 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c4_i32_588 = arith.constant 4 : i32
    %c3_i64_589 = arith.constant 3 : i64
    %1289 = llvm.load %11 : !llvm.ptr -> i64
    %1290 = arith.cmpi ult, %1289, %c3_i64_589 : i64
    scf.if %1290 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1289, %c3_i64_589 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1291 = arith.addi %1286, %c4_i32_588 : i32
    %c3_i64_590 = arith.constant 3 : i64
    %1292 = llvm.load %11 : !llvm.ptr -> i64
    %1293 = arith.cmpi ult, %1292, %c3_i64_590 : i64
    scf.if %1293 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1292, %c3_i64_590 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1291, %2 : i32, !llvm.ptr
    %c3_i64_591 = arith.constant 3 : i64
    %1294 = llvm.load %11 : !llvm.ptr -> i64
    %1295 = arith.cmpi ult, %1294, %c3_i64_591 : i64
    scf.if %1295 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1294, %c3_i64_591 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1296 = arith.cmpi eq, %1283, %1291 : i32
    %1297 = arith.extui %1296 : i1 to i32
    %c0_i32_592 = arith.constant 0 : i32
    %1298 = arith.cmpi eq, %1297, %c0_i32_592 : i32
    %1299 = arith.extui %1298 : i1 to i32
    %c1_i64_593 = arith.constant 1 : i64
    %1300 = llvm.load %11 : !llvm.ptr -> i64
    %1301 = arith.cmpi ult, %1300, %c1_i64_593 : i64
    scf.if %1301 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1300, %c1_i64_593 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_594 = arith.constant 0 : i32
    %1302 = arith.cmpi ne, %1299, %c0_i32_594 : i32
    cf.cond_br %1302, ^bb41, ^bb42
  ^bb42:  // pred: ^bb41
    %c1_i64_595 = arith.constant 1 : i64
    %1303 = llvm.load %11 : !llvm.ptr -> i64
    %1304 = arith.cmpi ult, %1303, %c1_i64_595 : i64
    scf.if %1304 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1303, %c1_i64_595 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb40
  ^bb43:  // pred: ^bb37
    %c3_i64_596 = arith.constant 3 : i64
    %1305 = llvm.load %11 : !llvm.ptr -> i64
    %1306 = arith.cmpi ult, %1305, %c3_i64_596 : i64
    scf.if %1306 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1305, %c3_i64_596 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1307 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_597 = arith.constant 3 : i64
    %1308 = llvm.load %11 : !llvm.ptr -> i64
    %1309 = arith.cmpi ult, %1308, %c3_i64_597 : i64
    scf.if %1309 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1308, %c3_i64_597 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1310 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_598 = arith.constant 3 : i64
    %1311 = llvm.load %11 : !llvm.ptr -> i64
    %1312 = arith.cmpi ult, %1311, %c3_i64_598 : i64
    scf.if %1312 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1311, %c3_i64_598 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1313 = arith.addi %1307, %1310 : i32
    %c3_i64_599 = arith.constant 3 : i64
    %1314 = llvm.load %11 : !llvm.ptr -> i64
    %1315 = arith.cmpi ult, %1314, %c3_i64_599 : i64
    scf.if %1315 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1314, %c3_i64_599 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1313, %1 : i32, !llvm.ptr
    %c1_i64_600 = arith.constant 1 : i64
    %1316 = llvm.load %11 : !llvm.ptr -> i64
    %1317 = arith.cmpi ult, %1316, %c1_i64_600 : i64
    scf.if %1317 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1316, %c1_i64_600 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb45
  ^bb44:  // pred: ^bb46
    %c1_i64_601 = arith.constant 1 : i64
    %1318 = llvm.load %11 : !llvm.ptr -> i64
    %1319 = arith.cmpi ult, %1318, %c1_i64_601 : i64
    scf.if %1319 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1318, %c1_i64_601 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb45:  // 2 preds: ^bb43, ^bb45
    %c3_i64_602 = arith.constant 3 : i64
    %1320 = llvm.load %11 : !llvm.ptr -> i64
    %1321 = arith.cmpi ult, %1320, %c3_i64_602 : i64
    scf.if %1321 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1320, %c3_i64_602 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1322 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_603 = arith.constant 3 : i64
    %1323 = llvm.load %11 : !llvm.ptr -> i64
    %1324 = arith.cmpi ult, %1323, %c3_i64_603 : i64
    scf.if %1324 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1323, %c3_i64_603 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1325 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_604 = arith.constant 3 : i64
    %1326 = llvm.load %11 : !llvm.ptr -> i64
    %1327 = arith.cmpi ult, %1326, %c3_i64_604 : i64
    scf.if %1327 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1326, %c3_i64_604 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i64_605 = arith.constant 0 : i64
    %1328 = arith.extui %1325 : i32 to i64
    %1329 = arith.addi %1328, %c0_i64_605 : i64
    %1330 = llvm.getelementptr %14[%1329] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1331 = llvm.load volatile %1330 {alignment = 1 : i64} : !llvm.ptr -> i8
    %1332 = arith.extsi %1331 : i8 to i32
    %c1_i64_606 = arith.constant 1 : i64
    %1333 = llvm.load %11 : !llvm.ptr -> i64
    %1334 = arith.cmpi ult, %1333, %c1_i64_606 : i64
    scf.if %1334 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1333, %c1_i64_606 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-65_i32_607 = arith.constant -65 : i32
    %c3_i64_608 = arith.constant 3 : i64
    %1335 = llvm.load %11 : !llvm.ptr -> i64
    %1336 = arith.cmpi ult, %1335, %c3_i64_608 : i64
    scf.if %1336 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1335, %c3_i64_608 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1337 = arith.cmpi sgt, %1332, %c-65_i32_607 : i32
    %1338 = arith.extui %1337 : i1 to i32
    %c3_i64_609 = arith.constant 3 : i64
    %1339 = llvm.load %11 : !llvm.ptr -> i64
    %1340 = arith.cmpi ult, %1339, %c3_i64_609 : i64
    scf.if %1340 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1339, %c3_i64_609 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1341 = arith.addi %1322, %1338 : i32
    %c3_i64_610 = arith.constant 3 : i64
    %1342 = llvm.load %11 : !llvm.ptr -> i64
    %1343 = arith.cmpi ult, %1342, %c3_i64_610 : i64
    scf.if %1343 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1342, %c3_i64_610 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1341, %8 : i32, !llvm.ptr
    %c3_i64_611 = arith.constant 3 : i64
    %1344 = llvm.load %11 : !llvm.ptr -> i64
    %1345 = arith.cmpi ult, %1344, %c3_i64_611 : i64
    scf.if %1345 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1344, %c3_i64_611 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1346 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_612 = arith.constant 1 : i64
    %1347 = llvm.load %11 : !llvm.ptr -> i64
    %1348 = arith.cmpi ult, %1347, %c1_i64_612 : i64
    scf.if %1348 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1347, %c1_i64_612 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c1_i32_613 = arith.constant 1 : i32
    %c3_i64_614 = arith.constant 3 : i64
    %1349 = llvm.load %11 : !llvm.ptr -> i64
    %1350 = arith.cmpi ult, %1349, %c3_i64_614 : i64
    scf.if %1350 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1349, %c3_i64_614 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1351 = arith.addi %1346, %c1_i32_613 : i32
    %c3_i64_615 = arith.constant 3 : i64
    %1352 = llvm.load %11 : !llvm.ptr -> i64
    %1353 = arith.cmpi ult, %1352, %c3_i64_615 : i64
    scf.if %1353 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1352, %c3_i64_615 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1351, %1 : i32, !llvm.ptr
    %c3_i64_616 = arith.constant 3 : i64
    %1354 = llvm.load %11 : !llvm.ptr -> i64
    %1355 = arith.cmpi ult, %1354, %c3_i64_616 : i64
    scf.if %1355 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1354, %c3_i64_616 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1356 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64_617 = arith.constant 1 : i64
    %1357 = llvm.load %11 : !llvm.ptr -> i64
    %1358 = arith.cmpi ult, %1357, %c1_i64_617 : i64
    scf.if %1358 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1357, %c1_i64_617 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c-1_i32_618 = arith.constant -1 : i32
    %c3_i64_619 = arith.constant 3 : i64
    %1359 = llvm.load %11 : !llvm.ptr -> i64
    %1360 = arith.cmpi ult, %1359, %c3_i64_619 : i64
    scf.if %1360 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1359, %c3_i64_619 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %1361 = arith.addi %1356, %c-1_i32_618 : i32
    %c3_i64_620 = arith.constant 3 : i64
    %1362 = llvm.load %11 : !llvm.ptr -> i64
    %1363 = arith.cmpi ult, %1362, %c3_i64_620 : i64
    scf.if %1363 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1362, %c3_i64_620 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    llvm.store %1361, %9 : i32, !llvm.ptr
    %c1_i64_621 = arith.constant 1 : i64
    %1364 = llvm.load %11 : !llvm.ptr -> i64
    %1365 = arith.cmpi ult, %1364, %c1_i64_621 : i64
    scf.if %1365 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1364, %c1_i64_621 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    %c0_i32_622 = arith.constant 0 : i32
    %1366 = arith.cmpi ne, %1361, %c0_i32_622 : i32
    cf.cond_br %1366, ^bb45, ^bb46
  ^bb46:  // pred: ^bb45
    %c1_i64_623 = arith.constant 1 : i64
    %1367 = llvm.load %11 : !llvm.ptr -> i64
    %1368 = arith.cmpi ult, %1367, %c1_i64_623 : i64
    scf.if %1368 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %1369 = arith.subi %1367, %c1_i64_623 : i64
      llvm.store %1369, %11 : i64, !llvm.ptr
    }
    cf.br ^bb44
  }
  func.func @f72(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_5 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %6, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %13 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %14 : !llvm.ptr -> i64
    %17 = arith.trunci %16 : i64 to i32
    %18 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %20 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %14 : !llvm.ptr -> i64
    %22 = arith.trunci %21 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %23 = llvm.load %7 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c1_i64 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %23, %c1_i64 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %c1_i64_6 = arith.constant 1 : i64
    %25 = llvm.load %7 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c1_i64_6 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %25, %c1_i64_6 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %c1_i64_7 = arith.constant 1 : i64
    %27 = llvm.load %7 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c1_i64_7 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %27, %c1_i64_7 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %29 = llvm.load %7 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c3_i64 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %29, %c3_i64 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_8 = arith.constant 1 : i64
    %32 = llvm.load %7 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c1_i64_8 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %32, %c1_i64_8 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %c1114112_i32 = arith.constant 1114112 : i32
    %c3_i64_9 = arith.constant 3 : i64
    %34 = llvm.load %7 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c3_i64_9 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %34, %c3_i64_9 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %36 = arith.cmpi eq, %31, %c1114112_i32 : i32
    %37 = arith.extui %36 : i1 to i32
    %c1_i64_10 = arith.constant 1 : i64
    %38 = llvm.load %7 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c1_i64_10 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %38, %c1_i64_10 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %c0_i32_11 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %37, %c0_i32_11 : i32
    cf.cond_br %40, ^bb5, ^bb6
  ^bb2(%41: i32):  // 2 preds: ^bb4, ^bb23
    return %41 : i32
  ^bb3:  // pred: ^bb5
    %c3_i64_12 = arith.constant 3 : i64
    %42 = llvm.load %7 : !llvm.ptr -> i64
    %43 = arith.cmpi ult, %42, %c3_i64_12 : i64
    scf.if %43 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %42, %c3_i64_12 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_13 = arith.constant 3 : i64
    %45 = llvm.load %7 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_13 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %45, %c3_i64_13 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_14 = arith.constant 3 : i64
    %48 = llvm.load %7 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c3_i64_14 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %48, %c3_i64_14 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %50 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_15 = arith.constant 3 : i64
    %51 = llvm.load %7 : !llvm.ptr -> i64
    %52 = arith.cmpi ult, %51, %c3_i64_15 : i64
    scf.if %52 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %51, %c3_i64_15 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_16 = arith.constant 3 : i64
    %54 = llvm.load %7 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %c3_i64_16 : i64
    scf.if %55 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %54, %c3_i64_16 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c12_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64 = arith.constant 7 : i64
    %60 = llvm.load %7 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c7_i64 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %60, %c7_i64 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %62 = arith.cmpi ult, %59, %22 : i32
    cf.cond_br %62, ^bb17, ^bb18
  ^bb4:  // 2 preds: ^bb13, ^bb16
    %c3_i64_17 = arith.constant 3 : i64
    %63 = llvm.load %7 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c3_i64_17 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %63, %c3_i64_17 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %65 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_18 = arith.constant 1 : i64
    %66 = llvm.load %7 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c1_i64_18 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %66, %c1_i64_18 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    cf.br ^bb2(%65 : i32)
  ^bb5:  // 2 preds: ^bb1, ^bb15
    %c3_i64_19 = arith.constant 3 : i64
    %68 = llvm.load %7 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c3_i64_19 : i64
    scf.if %69 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %68, %c3_i64_19 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %70 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_20 = arith.constant 1 : i64
    %71 = llvm.load %7 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c1_i64_20 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %71, %c1_i64_20 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %c0_i32_21 = arith.constant 0 : i32
    %73 = arith.cmpi ne, %70, %c0_i32_21 : i32
    cf.cond_br %73, ^bb3, ^bb16
  ^bb6:  // pred: ^bb1
    %c1_i64_22 = arith.constant 1 : i64
    %74 = llvm.load %7 : !llvm.ptr -> i64
    %75 = arith.cmpi ult, %74, %c1_i64_22 : i64
    scf.if %75 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %74, %c1_i64_22 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %c1_i32_23 = arith.constant 1 : i32
    %c3_i64_24 = arith.constant 3 : i64
    %76 = llvm.load %7 : !llvm.ptr -> i64
    %77 = arith.cmpi ult, %76, %c3_i64_24 : i64
    scf.if %77 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %76, %c3_i64_24 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_23, %5 : i32, !llvm.ptr
    %c3_i64_25 = arith.constant 3 : i64
    %78 = llvm.load %7 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c3_i64_25 : i64
    scf.if %79 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %78, %c3_i64_25 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %80 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_26 = arith.constant 3 : i64
    %81 = llvm.load %7 : !llvm.ptr -> i64
    %82 = arith.cmpi ult, %81, %c3_i64_26 : i64
    scf.if %82 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %81, %c3_i64_26 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_27 = arith.constant 3 : i64
    %84 = llvm.load %7 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c3_i64_27 : i64
    scf.if %85 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %84, %c3_i64_27 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %86 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_28 = arith.constant 3 : i64
    %87 = llvm.load %7 : !llvm.ptr -> i64
    %88 = arith.cmpi ult, %87, %c3_i64_28 : i64
    scf.if %88 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %87, %c3_i64_28 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %c16_i64 = arith.constant 16 : i64
    %89 = arith.extui %86 : i32 to i64
    %90 = arith.addi %89, %c16_i64 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64_29 = arith.constant 7 : i64
    %93 = llvm.load %7 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c7_i64_29 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %93, %c7_i64_29 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %95 = arith.cmpi ult, %92, %17 : i32
    cf.cond_br %95, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %96 = llvm.getelementptr inbounds %15[%92] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %97 = llvm.load %96 : !llvm.ptr -> !llvm.ptr
    %98 = llvm.ptrtoint %97 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %99 = arith.cmpi eq, %98, %c0_i64 : i64
    cf.cond_br %99, ^bb10, ^bb9
  ^bb8:  // pred: ^bb6
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %100 = llvm.getelementptr %97[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %101 = llvm.getelementptr %97[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %102 = llvm.getelementptr %97[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %103 = llvm.load %100 : !llvm.ptr -> !llvm.ptr
    %104 = llvm.load %102 : !llvm.ptr -> !llvm.ptr
    %105 = llvm.ptrtoint %103 : !llvm.ptr to i64
    %c0_i64_30 = arith.constant 0 : i64
    %106 = arith.cmpi eq, %105, %c0_i64_30 : i64
    cf.cond_br %106, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %107 = llvm.load %101 : !llvm.ptr -> i32
    %108 = arith.cmpi ne, %12, %107 : i32
    cf.cond_br %108, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_31 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_31) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %109 = llvm.call %103(%104, %80, %83) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c1_i64_32 = arith.constant 1 : i64
    %110 = llvm.load %7 : !llvm.ptr -> i64
    %111 = arith.cmpi ult, %110, %c1_i64_32 : i64
    scf.if %111 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %110, %c1_i64_32 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %c0_i32_33 = arith.constant 0 : i32
    %112 = arith.cmpi ne, %109, %c0_i32_33 : i32
    cf.cond_br %112, ^bb4, ^bb15
  ^bb14:  // pred: ^bb11
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb13
    %c1_i64_34 = arith.constant 1 : i64
    %113 = llvm.load %7 : !llvm.ptr -> i64
    %114 = arith.cmpi ult, %113, %c1_i64_34 : i64
    scf.if %114 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %113, %c1_i64_34 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    cf.br ^bb5
  ^bb16:  // pred: ^bb5
    %c1_i64_35 = arith.constant 1 : i64
    %115 = llvm.load %7 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c1_i64_35 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %115, %c1_i64_35 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    %c0_i32_36 = arith.constant 0 : i32
    %c3_i64_37 = arith.constant 3 : i64
    %117 = llvm.load %7 : !llvm.ptr -> i64
    %118 = arith.cmpi ult, %117, %c3_i64_37 : i64
    scf.if %118 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %117, %c3_i64_37 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_36, %5 : i32, !llvm.ptr
    %c1_i64_38 = arith.constant 1 : i64
    %119 = llvm.load %7 : !llvm.ptr -> i64
    %120 = arith.cmpi ult, %119, %c1_i64_38 : i64
    scf.if %120 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %119, %c1_i64_38 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    cf.br ^bb4
  ^bb17:  // 2 preds: ^bb3, ^bb18
    %121 = llvm.getelementptr inbounds %20[%59] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %122 = llvm.load %121 : !llvm.ptr -> !llvm.ptr
    %123 = llvm.ptrtoint %122 : !llvm.ptr to i64
    %c0_i64_39 = arith.constant 0 : i64
    %124 = arith.cmpi eq, %123, %c0_i64_39 : i64
    cf.cond_br %124, ^bb20, ^bb19
  ^bb18:  // pred: ^bb3
    %c3_i32_40 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_40) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %125 = llvm.getelementptr %122[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %126 = llvm.getelementptr %122[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %127 = llvm.getelementptr %122[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %128 = llvm.load %125 : !llvm.ptr -> !llvm.ptr
    %129 = llvm.load %127 : !llvm.ptr -> !llvm.ptr
    %130 = llvm.ptrtoint %128 : !llvm.ptr to i64
    %c0_i64_41 = arith.constant 0 : i64
    %131 = arith.cmpi eq, %130, %c0_i64_41 : i64
    cf.cond_br %131, ^bb22, ^bb21
  ^bb20:  // pred: ^bb17
    %c4_i32_42 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_42) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %132 = llvm.load %126 : !llvm.ptr -> i32
    %133 = arith.cmpi ne, %19, %132 : i32
    cf.cond_br %133, ^bb24, ^bb23
  ^bb22:  // pred: ^bb19
    %c3_i32_43 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_43) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %134 = llvm.call %128(%129, %44, %47, %50) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64_44 = arith.constant 1 : i64
    %135 = llvm.load %7 : !llvm.ptr -> i64
    %136 = arith.cmpi ult, %135, %c1_i64_44 : i64
    scf.if %136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %137 = arith.subi %135, %c1_i64_44 : i64
      llvm.store %137, %7 : i64, !llvm.ptr
    }
    cf.br ^bb2(%134 : i32)
  ^bb24:  // pred: ^bb21
    %c5_i32_45 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_45) : (i32) -> ()
    cf.br ^bb23
  }
  func.func @f73(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_2 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %3, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %10 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %11 : !llvm.ptr -> i64
    %14 = arith.trunci %13 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %15 = llvm.load %4 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c3_i64 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %65 = arith.subi %15, %c3_i64 : i64
      llvm.store %65, %4 : i64, !llvm.ptr
    }
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %18 = llvm.load %4 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c3_i64_3 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %65 = arith.subi %18, %c3_i64_3 : i64
      llvm.store %65, %4 : i64, !llvm.ptr
    }
    %c20_i64 = arith.constant 20 : i64
    %20 = arith.extui %17 : i32 to i64
    %21 = arith.addi %20, %c20_i64 : i64
    %22 = llvm.getelementptr %7[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %24 = llvm.load %4 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c3_i64_4 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %65 = arith.subi %24, %c3_i64_4 : i64
      llvm.store %65, %4 : i64, !llvm.ptr
    }
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_5 = arith.constant 3 : i64
    %27 = llvm.load %4 : !llvm.ptr -> i64
    %28 = arith.cmpi ult, %27, %c3_i64_5 : i64
    scf.if %28 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %65 = arith.subi %27, %c3_i64_5 : i64
      llvm.store %65, %4 : i64, !llvm.ptr
    }
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_6 = arith.constant 3 : i64
    %30 = llvm.load %4 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c3_i64_6 : i64
    scf.if %31 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %65 = arith.subi %30, %c3_i64_6 : i64
      llvm.store %65, %4 : i64, !llvm.ptr
    }
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_7 = arith.constant 3 : i64
    %33 = llvm.load %4 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c3_i64_7 : i64
    scf.if %34 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %65 = arith.subi %33, %c3_i64_7 : i64
      llvm.store %65, %4 : i64, !llvm.ptr
    }
    %c24_i64 = arith.constant 24 : i64
    %35 = arith.extui %32 : i32 to i64
    %36 = arith.addi %35, %c24_i64 : i64
    %37 = llvm.getelementptr %7[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_8 = arith.constant 3 : i64
    %39 = llvm.load %4 : !llvm.ptr -> i64
    %40 = arith.cmpi ult, %39, %c3_i64_8 : i64
    scf.if %40 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %65 = arith.subi %39, %c3_i64_8 : i64
      llvm.store %65, %4 : i64, !llvm.ptr
    }
    %c12_i64 = arith.constant 12 : i64
    %41 = arith.extui %38 : i32 to i64
    %42 = arith.addi %41, %c12_i64 : i64
    %43 = llvm.getelementptr %7[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c7_i64 = arith.constant 7 : i64
    %45 = llvm.load %4 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c7_i64 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %65 = arith.subi %45, %c7_i64 : i64
      llvm.store %65, %4 : i64, !llvm.ptr
    }
    %47 = arith.cmpi ult, %44, %14 : i32
    cf.cond_br %47, ^bb3, ^bb4
  ^bb2(%48: i32):  // pred: ^bb9
    return %48 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %49 = llvm.getelementptr inbounds %12[%44] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %50 = llvm.load %49 : !llvm.ptr -> !llvm.ptr
    %51 = llvm.ptrtoint %50 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %52 = arith.cmpi eq, %51, %c0_i64 : i64
    cf.cond_br %52, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %53 = llvm.getelementptr %50[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %54 = llvm.getelementptr %50[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %55 = llvm.getelementptr %50[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %56 = llvm.load %53 : !llvm.ptr -> !llvm.ptr
    %57 = llvm.load %55 : !llvm.ptr -> !llvm.ptr
    %58 = llvm.ptrtoint %56 : !llvm.ptr to i64
    %c0_i64_9 = arith.constant 0 : i64
    %59 = arith.cmpi eq, %58, %c0_i64_9 : i64
    cf.cond_br %59, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %60 = llvm.load %54 : !llvm.ptr -> i32
    %61 = arith.cmpi ne, %9, %60 : i32
    cf.cond_br %61, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_10 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_10) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %62 = llvm.call %56(%57, %23, %26, %29) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64 = arith.constant 1 : i64
    %63 = llvm.load %4 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c1_i64 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %65 = arith.subi %63, %c1_i64 : i64
      llvm.store %65, %4 : i64, !llvm.ptr
    }
    cf.br ^bb2(%62 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f74(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_2 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %3, %4 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %5 = llvm.load %4 : !llvm.ptr -> i64
    %6 = arith.cmpi ult, %5, %c3_i64 : i64
    scf.if %6 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %20 = arith.subi %5, %c3_i64 : i64
      llvm.store %20, %4 : i64, !llvm.ptr
    }
    %7 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %8 = llvm.load %4 : !llvm.ptr -> i64
    %9 = arith.cmpi ult, %8, %c3_i64_3 : i64
    scf.if %9 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %20 = arith.subi %8, %c3_i64_3 : i64
      llvm.store %20, %4 : i64, !llvm.ptr
    }
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %11 = llvm.load %4 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64_4 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %20 = arith.subi %11, %c3_i64_4 : i64
      llvm.store %20, %4 : i64, !llvm.ptr
    }
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %14 = llvm.load %4 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c6_i64 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %20 = arith.subi %14, %c6_i64 : i64
      llvm.store %20, %4 : i64, !llvm.ptr
    }
    %16 = call @f64(%arg0, %7, %10, %13) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64 = arith.constant 1 : i64
    %17 = llvm.load %4 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c1_i64 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %20 = arith.subi %17, %c1_i64 : i64
      llvm.store %20, %4 : i64, !llvm.ptr
    }
    cf.br ^bb2(%16 : i32)
  ^bb2(%19: i32):  // pred: ^bb1
    return %19 : i32
  }
  func.func @f75(%arg0: !llvm.ptr, %arg1: i64, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_5, %6 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_5, %7 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_5, %8 : i32, !llvm.ptr
    %9 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i64 : (i32) -> !llvm.ptr
    llvm.store %9, %10 : i64, !llvm.ptr
    %11 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %16 = llvm.load %10 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %16, %c3_i64 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %18 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %19 = llvm.load %10 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c1_i64 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %19, %c1_i64 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c48_i32 = arith.constant 48 : i32
    %c3_i64_10 = arith.constant 3 : i64
    %21 = llvm.load %10 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_10 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %21, %c3_i64_10 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %23 = arith.subi %18, %c48_i32 : i32
    %c3_i64_11 = arith.constant 3 : i64
    %24 = llvm.load %10 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c3_i64_11 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %24, %c3_i64_11 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %23, %3 : i32, !llvm.ptr
    %c3_i64_12 = arith.constant 3 : i64
    %26 = llvm.load %10 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c3_i64_12 : i64
    scf.if %27 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %26, %c3_i64_12 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %23, %12 : i32, !llvm.ptr
    %c1_i64_13 = arith.constant 1 : i64
    %28 = llvm.load %10 : !llvm.ptr -> i64
    %29 = arith.cmpi ult, %28, %c1_i64_13 : i64
    scf.if %29 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %28, %c1_i64_13 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c39_i32 = arith.constant 39 : i32
    %c3_i64_14 = arith.constant 3 : i64
    %30 = llvm.load %10 : !llvm.ptr -> i64
    %31 = arith.cmpi ult, %30, %c3_i64_14 : i64
    scf.if %31 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %30, %c3_i64_14 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %c39_i32, %4 : i32, !llvm.ptr
    %c1_i64_15 = arith.constant 1 : i64
    %32 = llvm.load %10 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c1_i64_15 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %32, %c1_i64_15 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c1_i64_16 = arith.constant 1 : i64
    %34 = llvm.load %10 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c1_i64_16 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %34, %c1_i64_16 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c3_i64_17 = arith.constant 3 : i64
    %36 = llvm.load %10 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_17 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %36, %c3_i64_17 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %38 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_18 = arith.constant 1 : i64
    %39 = llvm.load %10 : !llvm.ptr -> i64
    %40 = arith.cmpi ult, %39, %c1_i64_18 : i64
    scf.if %40 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %39, %c1_i64_18 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c10000_i64 = arith.constant 10000 : i64
    %c3_i64_19 = arith.constant 3 : i64
    %41 = llvm.load %10 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c3_i64_19 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %41, %c3_i64_19 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %43 = arith.cmpi uge, %38, %c10000_i64 : i64
    %44 = arith.extui %43 : i1 to i64
    %45 = arith.trunci %44 : i64 to i32
    %c1_i64_20 = arith.constant 1 : i64
    %46 = llvm.load %10 : !llvm.ptr -> i64
    %47 = arith.cmpi ult, %46, %c1_i64_20 : i64
    scf.if %47 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %46, %c1_i64_20 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i32_21 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %45, %c0_i32_21 : i32
    cf.cond_br %48, ^bb4, ^bb5
  ^bb2(%49: i32):  // pred: ^bb11
    return %49 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb6
    %c1_i64_22 = arith.constant 1 : i64
    %50 = llvm.load %10 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c1_i64_22 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %50, %c1_i64_22 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c3_i64_23 = arith.constant 3 : i64
    %52 = llvm.load %10 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c3_i64_23 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %52, %c3_i64_23 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %54 = llvm.load %5 : !llvm.ptr -> i64
    %c4_i64 = arith.constant 4 : i64
    %55 = llvm.load %10 : !llvm.ptr -> i64
    %56 = arith.cmpi ult, %55, %c4_i64 : i64
    scf.if %56 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %55, %c4_i64 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %57 = arith.trunci %54 : i64 to i32
    %c3_i64_24 = arith.constant 3 : i64
    %58 = llvm.load %10 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c3_i64_24 : i64
    scf.if %59 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %58, %c3_i64_24 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %57, %6 : i32, !llvm.ptr
    %c1_i64_25 = arith.constant 1 : i64
    %60 = llvm.load %10 : !llvm.ptr -> i64
    %61 = arith.cmpi ult, %60, %c1_i64_25 : i64
    scf.if %61 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %60, %c1_i64_25 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c99_i32 = arith.constant 99 : i32
    %c3_i64_26 = arith.constant 3 : i64
    %62 = llvm.load %10 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c3_i64_26 : i64
    scf.if %63 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %62, %c3_i64_26 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %64 = arith.cmpi ule, %57, %c99_i32 : i32
    %65 = arith.extui %64 : i1 to i32
    %c1_i64_27 = arith.constant 1 : i64
    %66 = llvm.load %10 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c1_i64_27 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %66, %c1_i64_27 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i32_28 = arith.constant 0 : i32
    %68 = arith.cmpi ne, %65, %c0_i32_28 : i32
    cf.cond_br %68, ^bb9, ^bb10
  ^bb4:  // pred: ^bb1
    %c1_i64_29 = arith.constant 1 : i64
    %69 = llvm.load %10 : !llvm.ptr -> i64
    %70 = arith.cmpi ult, %69, %c1_i64_29 : i64
    scf.if %70 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %69, %c1_i64_29 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c39_i32_30 = arith.constant 39 : i32
    %c3_i64_31 = arith.constant 3 : i64
    %71 = llvm.load %10 : !llvm.ptr -> i64
    %72 = arith.cmpi ult, %71, %c3_i64_31 : i64
    scf.if %72 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %71, %c3_i64_31 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %c39_i32_30, %4 : i32, !llvm.ptr
    %c1_i64_32 = arith.constant 1 : i64
    %73 = llvm.load %10 : !llvm.ptr -> i64
    %74 = arith.cmpi ult, %73, %c1_i64_32 : i64
    scf.if %74 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %73, %c1_i64_32 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    cf.br ^bb7
  ^bb5:  // pred: ^bb1
    %c3_i64_33 = arith.constant 3 : i64
    %75 = llvm.load %10 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c3_i64_33 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %75, %c3_i64_33 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %77 = llvm.load %0 : !llvm.ptr -> i64
    %c3_i64_34 = arith.constant 3 : i64
    %78 = llvm.load %10 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c3_i64_34 : i64
    scf.if %79 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %78, %c3_i64_34 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %77, %5 : i64, !llvm.ptr
    %c1_i64_35 = arith.constant 1 : i64
    %80 = llvm.load %10 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c1_i64_35 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %80, %c1_i64_35 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb6:  // pred: ^bb8
    %c1_i64_36 = arith.constant 1 : i64
    %82 = llvm.load %10 : !llvm.ptr -> i64
    %83 = arith.cmpi ult, %82, %c1_i64_36 : i64
    scf.if %83 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %82, %c1_i64_36 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb7:  // 2 preds: ^bb4, ^bb7
    %c3_i64_37 = arith.constant 3 : i64
    %84 = llvm.load %10 : !llvm.ptr -> i64
    %85 = arith.cmpi ult, %84, %c3_i64_37 : i64
    scf.if %85 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %84, %c3_i64_37 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %86 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_38 = arith.constant 1 : i64
    %87 = llvm.load %10 : !llvm.ptr -> i64
    %88 = arith.cmpi ult, %87, %c1_i64_38 : i64
    scf.if %88 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %87, %c1_i64_38 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c9_i32 = arith.constant 9 : i32
    %c3_i64_39 = arith.constant 3 : i64
    %89 = llvm.load %10 : !llvm.ptr -> i64
    %90 = arith.cmpi ult, %89, %c3_i64_39 : i64
    scf.if %90 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %89, %c3_i64_39 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %91 = arith.addi %86, %c9_i32 : i32
    %c3_i64_40 = arith.constant 3 : i64
    %92 = llvm.load %10 : !llvm.ptr -> i64
    %93 = arith.cmpi ult, %92, %c3_i64_40 : i64
    scf.if %93 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %92, %c3_i64_40 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %94 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_41 = arith.constant 3 : i64
    %95 = llvm.load %10 : !llvm.ptr -> i64
    %96 = arith.cmpi ult, %95, %c3_i64_41 : i64
    scf.if %96 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %95, %c3_i64_41 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %97 = arith.addi %91, %94 : i32
    %c3_i64_42 = arith.constant 3 : i64
    %98 = llvm.load %10 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_42 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %98, %c3_i64_42 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %97, %6 : i32, !llvm.ptr
    %c1_i64_43 = arith.constant 1 : i64
    %100 = llvm.load %10 : !llvm.ptr -> i64
    %101 = arith.cmpi ult, %100, %c1_i64_43 : i64
    scf.if %101 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %100, %c1_i64_43 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c-4_i32 = arith.constant -4 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %102 = llvm.load %10 : !llvm.ptr -> i64
    %103 = arith.cmpi ult, %102, %c3_i64_44 : i64
    scf.if %103 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %102, %c3_i64_44 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %104 = arith.addi %97, %c-4_i32 : i32
    %c3_i64_45 = arith.constant 3 : i64
    %105 = llvm.load %10 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %c3_i64_45 : i64
    scf.if %106 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %105, %c3_i64_45 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %107 = llvm.load %0 : !llvm.ptr -> i64
    %c3_i64_46 = arith.constant 3 : i64
    %108 = llvm.load %10 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %108, %c3_i64_46 : i64
    scf.if %109 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %108, %c3_i64_46 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %110 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_47 = arith.constant 1 : i64
    %111 = llvm.load %10 : !llvm.ptr -> i64
    %112 = arith.cmpi ult, %111, %c1_i64_47 : i64
    scf.if %112 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %111, %c1_i64_47 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c10000_i64_48 = arith.constant 10000 : i64
    %c24_i64 = arith.constant 24 : i64
    %113 = llvm.load %10 : !llvm.ptr -> i64
    %114 = arith.cmpi ult, %113, %c24_i64 : i64
    scf.if %114 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %113, %c24_i64 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %115 = arith.divui %110, %c10000_i64_48 : i64
    %c0_i64_49 = arith.constant 0 : i64
    %116 = arith.cmpi eq, %c10000_i64_48, %c0_i64_49 : i64
    %117 = arith.select %116, %c0_i64_49, %115 : i64
    %c3_i64_50 = arith.constant 3 : i64
    %118 = llvm.load %10 : !llvm.ptr -> i64
    %119 = arith.cmpi ult, %118, %c3_i64_50 : i64
    scf.if %119 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %118, %c3_i64_50 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %117, %5 : i64, !llvm.ptr
    %c1_i64_51 = arith.constant 1 : i64
    %120 = llvm.load %10 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c1_i64_51 : i64
    scf.if %121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %120, %c1_i64_51 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c10000_i64_52 = arith.constant 10000 : i64
    %c5_i64 = arith.constant 5 : i64
    %122 = llvm.load %10 : !llvm.ptr -> i64
    %123 = arith.cmpi ult, %122, %c5_i64 : i64
    scf.if %123 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %122, %c5_i64 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %124 = arith.muli %117, %c10000_i64_52 : i64
    %c3_i64_53 = arith.constant 3 : i64
    %125 = llvm.load %10 : !llvm.ptr -> i64
    %126 = arith.cmpi ult, %125, %c3_i64_53 : i64
    scf.if %126 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %125, %c3_i64_53 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %127 = arith.subi %107, %124 : i64
    %c4_i64_54 = arith.constant 4 : i64
    %128 = llvm.load %10 : !llvm.ptr -> i64
    %129 = arith.cmpi ult, %128, %c4_i64_54 : i64
    scf.if %129 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %128, %c4_i64_54 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %130 = arith.trunci %127 : i64 to i32
    %c3_i64_55 = arith.constant 3 : i64
    %131 = llvm.load %10 : !llvm.ptr -> i64
    %132 = arith.cmpi ult, %131, %c3_i64_55 : i64
    scf.if %132 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %131, %c3_i64_55 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %130, %7 : i32, !llvm.ptr
    %c1_i64_56 = arith.constant 1 : i64
    %133 = llvm.load %10 : !llvm.ptr -> i64
    %134 = arith.cmpi ult, %133, %c1_i64_56 : i64
    scf.if %134 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %133, %c1_i64_56 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c65535_i32 = arith.constant 65535 : i32
    %c3_i64_57 = arith.constant 3 : i64
    %135 = llvm.load %10 : !llvm.ptr -> i64
    %136 = arith.cmpi ult, %135, %c3_i64_57 : i64
    scf.if %136 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %135, %c3_i64_57 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %137 = arith.andi %130, %c65535_i32 : i32
    %c1_i64_58 = arith.constant 1 : i64
    %138 = llvm.load %10 : !llvm.ptr -> i64
    %139 = arith.cmpi ult, %138, %c1_i64_58 : i64
    scf.if %139 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %138, %c1_i64_58 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c100_i32 = arith.constant 100 : i32
    %c20_i64 = arith.constant 20 : i64
    %140 = llvm.load %10 : !llvm.ptr -> i64
    %141 = arith.cmpi ult, %140, %c20_i64 : i64
    scf.if %141 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %140, %c20_i64 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %142 = arith.divui %137, %c100_i32 : i32
    %c0_i32_59 = arith.constant 0 : i32
    %143 = arith.cmpi eq, %c100_i32, %c0_i32_59 : i32
    %144 = arith.select %143, %c0_i32_59, %142 : i32
    %c3_i64_60 = arith.constant 3 : i64
    %145 = llvm.load %10 : !llvm.ptr -> i64
    %146 = arith.cmpi ult, %145, %c3_i64_60 : i64
    scf.if %146 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %145, %c3_i64_60 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %144, %8 : i32, !llvm.ptr
    %c1_i64_61 = arith.constant 1 : i64
    %147 = llvm.load %10 : !llvm.ptr -> i64
    %148 = arith.cmpi ult, %147, %c1_i64_61 : i64
    scf.if %148 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %147, %c1_i64_61 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c1_i32_62 = arith.constant 1 : i32
    %c3_i64_63 = arith.constant 3 : i64
    %149 = llvm.load %10 : !llvm.ptr -> i64
    %150 = arith.cmpi ult, %149, %c3_i64_63 : i64
    scf.if %150 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %149, %c3_i64_63 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %151 = arith.cmpi ule, %c1_i32_62, %c31_i32 : i32
    %152 = scf.if %151 -> (i32) {
      %497 = arith.shli %144, %c1_i32_62 : i32
      scf.yield %497 : i32
    } else {
      %c0_i32_219 = arith.constant 0 : i32
      scf.yield %c0_i32_219 : i32
    }
    %c1_i64_64 = arith.constant 1 : i64
    %153 = llvm.load %10 : !llvm.ptr -> i64
    %154 = arith.cmpi ult, %153, %c1_i64_64 : i64
    scf.if %154 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %153, %c1_i64_64 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c1049296_i32 = arith.constant 1049296 : i32
    %c3_i64_65 = arith.constant 3 : i64
    %155 = llvm.load %10 : !llvm.ptr -> i64
    %156 = arith.cmpi ult, %155, %c3_i64_65 : i64
    scf.if %156 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %155, %c3_i64_65 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %157 = arith.addi %152, %c1049296_i32 : i32
    %c3_i64_66 = arith.constant 3 : i64
    %158 = llvm.load %10 : !llvm.ptr -> i64
    %159 = arith.cmpi ult, %158, %c3_i64_66 : i64
    scf.if %159 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %158, %c3_i64_66 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i64_67 = arith.constant 0 : i64
    %160 = arith.extui %157 : i32 to i64
    %161 = arith.addi %160, %c0_i64_67 : i64
    %162 = llvm.getelementptr %15[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i16
    %164 = arith.extui %163 : i16 to i32
    %c3_i64_68 = arith.constant 3 : i64
    %165 = llvm.load %10 : !llvm.ptr -> i64
    %166 = arith.cmpi ult, %165, %c3_i64_68 : i64
    scf.if %166 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %165, %c3_i64_68 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i64_69 = arith.constant 0 : i64
    %167 = arith.extui %104 : i32 to i64
    %168 = arith.addi %167, %c0_i64_69 : i64
    %169 = llvm.getelementptr %15[%168] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %170 = arith.trunci %164 : i32 to i16
    llvm.store volatile %170, %169 {alignment = 1 : i64} : i16, !llvm.ptr
    %c3_i64_70 = arith.constant 3 : i64
    %171 = llvm.load %10 : !llvm.ptr -> i64
    %172 = arith.cmpi ult, %171, %c3_i64_70 : i64
    scf.if %172 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %171, %c3_i64_70 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %173 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_71 = arith.constant 1 : i64
    %174 = llvm.load %10 : !llvm.ptr -> i64
    %175 = arith.cmpi ult, %174, %c1_i64_71 : i64
    scf.if %175 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %174, %c1_i64_71 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c-2_i32 = arith.constant -2 : i32
    %c3_i64_72 = arith.constant 3 : i64
    %176 = llvm.load %10 : !llvm.ptr -> i64
    %177 = arith.cmpi ult, %176, %c3_i64_72 : i64
    scf.if %177 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %176, %c3_i64_72 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %178 = arith.addi %173, %c-2_i32 : i32
    %c3_i64_73 = arith.constant 3 : i64
    %179 = llvm.load %10 : !llvm.ptr -> i64
    %180 = arith.cmpi ult, %179, %c3_i64_73 : i64
    scf.if %180 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %179, %c3_i64_73 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %181 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i64_74 = arith.constant 3 : i64
    %182 = llvm.load %10 : !llvm.ptr -> i64
    %183 = arith.cmpi ult, %182, %c3_i64_74 : i64
    scf.if %183 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %182, %c3_i64_74 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %184 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i64_75 = arith.constant 1 : i64
    %185 = llvm.load %10 : !llvm.ptr -> i64
    %186 = arith.cmpi ult, %185, %c1_i64_75 : i64
    scf.if %186 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %185, %c1_i64_75 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c100_i32_76 = arith.constant 100 : i32
    %c5_i64_77 = arith.constant 5 : i64
    %187 = llvm.load %10 : !llvm.ptr -> i64
    %188 = arith.cmpi ult, %187, %c5_i64_77 : i64
    scf.if %188 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %187, %c5_i64_77 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %189 = arith.muli %184, %c100_i32_76 : i32
    %c3_i64_78 = arith.constant 3 : i64
    %190 = llvm.load %10 : !llvm.ptr -> i64
    %191 = arith.cmpi ult, %190, %c3_i64_78 : i64
    scf.if %191 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %190, %c3_i64_78 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %192 = arith.subi %181, %189 : i32
    %c1_i64_79 = arith.constant 1 : i64
    %193 = llvm.load %10 : !llvm.ptr -> i64
    %194 = arith.cmpi ult, %193, %c1_i64_79 : i64
    scf.if %194 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %193, %c1_i64_79 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c65535_i32_80 = arith.constant 65535 : i32
    %c3_i64_81 = arith.constant 3 : i64
    %195 = llvm.load %10 : !llvm.ptr -> i64
    %196 = arith.cmpi ult, %195, %c3_i64_81 : i64
    scf.if %196 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %195, %c3_i64_81 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %197 = arith.andi %192, %c65535_i32_80 : i32
    %c1_i64_82 = arith.constant 1 : i64
    %198 = llvm.load %10 : !llvm.ptr -> i64
    %199 = arith.cmpi ult, %198, %c1_i64_82 : i64
    scf.if %199 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %198, %c1_i64_82 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c1_i32_83 = arith.constant 1 : i32
    %c3_i64_84 = arith.constant 3 : i64
    %200 = llvm.load %10 : !llvm.ptr -> i64
    %201 = arith.cmpi ult, %200, %c3_i64_84 : i64
    scf.if %201 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %200, %c3_i64_84 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c31_i32_85 = arith.constant 31 : i32
    %202 = arith.cmpi ule, %c1_i32_83, %c31_i32_85 : i32
    %203 = scf.if %202 -> (i32) {
      %497 = arith.shli %197, %c1_i32_83 : i32
      scf.yield %497 : i32
    } else {
      %c0_i32_219 = arith.constant 0 : i32
      scf.yield %c0_i32_219 : i32
    }
    %c1_i64_86 = arith.constant 1 : i64
    %204 = llvm.load %10 : !llvm.ptr -> i64
    %205 = arith.cmpi ult, %204, %c1_i64_86 : i64
    scf.if %205 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %204, %c1_i64_86 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c1049296_i32_87 = arith.constant 1049296 : i32
    %c3_i64_88 = arith.constant 3 : i64
    %206 = llvm.load %10 : !llvm.ptr -> i64
    %207 = arith.cmpi ult, %206, %c3_i64_88 : i64
    scf.if %207 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %206, %c3_i64_88 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %208 = arith.addi %203, %c1049296_i32_87 : i32
    %c3_i64_89 = arith.constant 3 : i64
    %209 = llvm.load %10 : !llvm.ptr -> i64
    %210 = arith.cmpi ult, %209, %c3_i64_89 : i64
    scf.if %210 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %209, %c3_i64_89 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i64_90 = arith.constant 0 : i64
    %211 = arith.extui %208 : i32 to i64
    %212 = arith.addi %211, %c0_i64_90 : i64
    %213 = llvm.getelementptr %15[%212] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %214 = llvm.load volatile %213 {alignment = 1 : i64} : !llvm.ptr -> i16
    %215 = arith.extui %214 : i16 to i32
    %c3_i64_91 = arith.constant 3 : i64
    %216 = llvm.load %10 : !llvm.ptr -> i64
    %217 = arith.cmpi ult, %216, %c3_i64_91 : i64
    scf.if %217 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %216, %c3_i64_91 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i64_92 = arith.constant 0 : i64
    %218 = arith.extui %178 : i32 to i64
    %219 = arith.addi %218, %c0_i64_92 : i64
    %220 = llvm.getelementptr %15[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %221 = arith.trunci %215 : i32 to i16
    llvm.store volatile %221, %220 {alignment = 1 : i64} : i16, !llvm.ptr
    %c3_i64_93 = arith.constant 3 : i64
    %222 = llvm.load %10 : !llvm.ptr -> i64
    %223 = arith.cmpi ult, %222, %c3_i64_93 : i64
    scf.if %223 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %222, %c3_i64_93 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %224 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_94 = arith.constant 1 : i64
    %225 = llvm.load %10 : !llvm.ptr -> i64
    %226 = arith.cmpi ult, %225, %c1_i64_94 : i64
    scf.if %226 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %225, %c1_i64_94 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c-4_i32_95 = arith.constant -4 : i32
    %c3_i64_96 = arith.constant 3 : i64
    %227 = llvm.load %10 : !llvm.ptr -> i64
    %228 = arith.cmpi ult, %227, %c3_i64_96 : i64
    scf.if %228 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %227, %c3_i64_96 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %229 = arith.addi %224, %c-4_i32_95 : i32
    %c3_i64_97 = arith.constant 3 : i64
    %230 = llvm.load %10 : !llvm.ptr -> i64
    %231 = arith.cmpi ult, %230, %c3_i64_97 : i64
    scf.if %231 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %230, %c3_i64_97 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %229, %4 : i32, !llvm.ptr
    %c3_i64_98 = arith.constant 3 : i64
    %232 = llvm.load %10 : !llvm.ptr -> i64
    %233 = arith.cmpi ult, %232, %c3_i64_98 : i64
    scf.if %233 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %232, %c3_i64_98 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %234 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_99 = arith.constant 1 : i64
    %235 = llvm.load %10 : !llvm.ptr -> i64
    %236 = arith.cmpi ult, %235, %c1_i64_99 : i64
    scf.if %236 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %235, %c1_i64_99 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c99999999_i64 = arith.constant 99999999 : i64
    %c3_i64_100 = arith.constant 3 : i64
    %237 = llvm.load %10 : !llvm.ptr -> i64
    %238 = arith.cmpi ult, %237, %c3_i64_100 : i64
    scf.if %238 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %237, %c3_i64_100 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %239 = arith.cmpi ugt, %234, %c99999999_i64 : i64
    %240 = arith.extui %239 : i1 to i64
    %241 = arith.trunci %240 : i64 to i32
    %c3_i64_101 = arith.constant 3 : i64
    %242 = llvm.load %10 : !llvm.ptr -> i64
    %243 = arith.cmpi ult, %242, %c3_i64_101 : i64
    scf.if %243 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %242, %c3_i64_101 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %241, %6 : i32, !llvm.ptr
    %c3_i64_102 = arith.constant 3 : i64
    %244 = llvm.load %10 : !llvm.ptr -> i64
    %245 = arith.cmpi ult, %244, %c3_i64_102 : i64
    scf.if %245 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %244, %c3_i64_102 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %246 = llvm.load %5 : !llvm.ptr -> i64
    %c3_i64_103 = arith.constant 3 : i64
    %247 = llvm.load %10 : !llvm.ptr -> i64
    %248 = arith.cmpi ult, %247, %c3_i64_103 : i64
    scf.if %248 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %247, %c3_i64_103 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %246, %0 : i64, !llvm.ptr
    %c3_i64_104 = arith.constant 3 : i64
    %249 = llvm.load %10 : !llvm.ptr -> i64
    %250 = arith.cmpi ult, %249, %c3_i64_104 : i64
    scf.if %250 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %249, %c3_i64_104 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %251 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_105 = arith.constant 1 : i64
    %252 = llvm.load %10 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c1_i64_105 : i64
    scf.if %253 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %252, %c1_i64_105 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i32_106 = arith.constant 0 : i32
    %254 = arith.cmpi ne, %251, %c0_i32_106 : i32
    cf.cond_br %254, ^bb7, ^bb8
  ^bb8:  // pred: ^bb7
    %c1_i64_107 = arith.constant 1 : i64
    %255 = llvm.load %10 : !llvm.ptr -> i64
    %256 = arith.cmpi ult, %255, %c1_i64_107 : i64
    scf.if %256 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %255, %c1_i64_107 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %c1_i64_108 = arith.constant 1 : i64
    %257 = llvm.load %10 : !llvm.ptr -> i64
    %258 = arith.cmpi ult, %257, %c1_i64_108 : i64
    scf.if %258 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %257, %c1_i64_108 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c1_i64_109 = arith.constant 1 : i64
    %259 = llvm.load %10 : !llvm.ptr -> i64
    %260 = arith.cmpi ult, %259, %c1_i64_109 : i64
    scf.if %260 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %259, %c1_i64_109 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c3_i64_110 = arith.constant 3 : i64
    %261 = llvm.load %10 : !llvm.ptr -> i64
    %262 = arith.cmpi ult, %261, %c3_i64_110 : i64
    scf.if %262 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %261, %c3_i64_110 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %263 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_111 = arith.constant 1 : i64
    %264 = llvm.load %10 : !llvm.ptr -> i64
    %265 = arith.cmpi ult, %264, %c1_i64_111 : i64
    scf.if %265 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %264, %c1_i64_111 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c10_i32 = arith.constant 10 : i32
    %c3_i64_112 = arith.constant 3 : i64
    %266 = llvm.load %10 : !llvm.ptr -> i64
    %267 = arith.cmpi ult, %266, %c3_i64_112 : i64
    scf.if %267 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %266, %c3_i64_112 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %268 = arith.cmpi ult, %263, %c10_i32 : i32
    %269 = arith.extui %268 : i1 to i32
    %c1_i64_113 = arith.constant 1 : i64
    %270 = llvm.load %10 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %270, %c1_i64_113 : i64
    scf.if %271 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %270, %c1_i64_113 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i32_114 = arith.constant 0 : i32
    %272 = arith.cmpi ne, %269, %c0_i32_114 : i32
    cf.cond_br %272, ^bb12, ^bb13
  ^bb10:  // pred: ^bb3
    %c3_i64_115 = arith.constant 3 : i64
    %273 = llvm.load %10 : !llvm.ptr -> i64
    %274 = arith.cmpi ult, %273, %c3_i64_115 : i64
    scf.if %274 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %273, %c3_i64_115 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %275 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_116 = arith.constant 1 : i64
    %276 = llvm.load %10 : !llvm.ptr -> i64
    %277 = arith.cmpi ult, %276, %c1_i64_116 : i64
    scf.if %277 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %276, %c1_i64_116 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c9_i32_117 = arith.constant 9 : i32
    %c3_i64_118 = arith.constant 3 : i64
    %278 = llvm.load %10 : !llvm.ptr -> i64
    %279 = arith.cmpi ult, %278, %c3_i64_118 : i64
    scf.if %279 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %278, %c3_i64_118 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %280 = arith.addi %275, %c9_i32_117 : i32
    %c3_i64_119 = arith.constant 3 : i64
    %281 = llvm.load %10 : !llvm.ptr -> i64
    %282 = arith.cmpi ult, %281, %c3_i64_119 : i64
    scf.if %282 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %281, %c3_i64_119 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %283 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_120 = arith.constant 1 : i64
    %284 = llvm.load %10 : !llvm.ptr -> i64
    %285 = arith.cmpi ult, %284, %c1_i64_120 : i64
    scf.if %285 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %284, %c1_i64_120 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c-2_i32_121 = arith.constant -2 : i32
    %c3_i64_122 = arith.constant 3 : i64
    %286 = llvm.load %10 : !llvm.ptr -> i64
    %287 = arith.cmpi ult, %286, %c3_i64_122 : i64
    scf.if %287 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %286, %c3_i64_122 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %288 = arith.addi %283, %c-2_i32_121 : i32
    %c3_i64_123 = arith.constant 3 : i64
    %289 = llvm.load %10 : !llvm.ptr -> i64
    %290 = arith.cmpi ult, %289, %c3_i64_123 : i64
    scf.if %290 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %289, %c3_i64_123 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %288, %4 : i32, !llvm.ptr
    %c3_i64_124 = arith.constant 3 : i64
    %291 = llvm.load %10 : !llvm.ptr -> i64
    %292 = arith.cmpi ult, %291, %c3_i64_124 : i64
    scf.if %292 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %291, %c3_i64_124 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %293 = arith.addi %280, %288 : i32
    %c3_i64_125 = arith.constant 3 : i64
    %294 = llvm.load %10 : !llvm.ptr -> i64
    %295 = arith.cmpi ult, %294, %c3_i64_125 : i64
    scf.if %295 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %294, %c3_i64_125 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %296 = llvm.load %5 : !llvm.ptr -> i64
    %c4_i64_126 = arith.constant 4 : i64
    %297 = llvm.load %10 : !llvm.ptr -> i64
    %298 = arith.cmpi ult, %297, %c4_i64_126 : i64
    scf.if %298 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %297, %c4_i64_126 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %299 = arith.trunci %296 : i64 to i32
    %c3_i64_127 = arith.constant 3 : i64
    %300 = llvm.load %10 : !llvm.ptr -> i64
    %301 = arith.cmpi ult, %300, %c3_i64_127 : i64
    scf.if %301 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %300, %c3_i64_127 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %299, %6 : i32, !llvm.ptr
    %c3_i64_128 = arith.constant 3 : i64
    %302 = llvm.load %10 : !llvm.ptr -> i64
    %303 = arith.cmpi ult, %302, %c3_i64_128 : i64
    scf.if %303 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %302, %c3_i64_128 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %304 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_129 = arith.constant 1 : i64
    %305 = llvm.load %10 : !llvm.ptr -> i64
    %306 = arith.cmpi ult, %305, %c1_i64_129 : i64
    scf.if %306 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %305, %c1_i64_129 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c65535_i32_130 = arith.constant 65535 : i32
    %c3_i64_131 = arith.constant 3 : i64
    %307 = llvm.load %10 : !llvm.ptr -> i64
    %308 = arith.cmpi ult, %307, %c3_i64_131 : i64
    scf.if %308 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %307, %c3_i64_131 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %309 = arith.andi %304, %c65535_i32_130 : i32
    %c1_i64_132 = arith.constant 1 : i64
    %310 = llvm.load %10 : !llvm.ptr -> i64
    %311 = arith.cmpi ult, %310, %c1_i64_132 : i64
    scf.if %311 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %310, %c1_i64_132 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c100_i32_133 = arith.constant 100 : i32
    %c20_i64_134 = arith.constant 20 : i64
    %312 = llvm.load %10 : !llvm.ptr -> i64
    %313 = arith.cmpi ult, %312, %c20_i64_134 : i64
    scf.if %313 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %312, %c20_i64_134 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %314 = arith.divui %309, %c100_i32_133 : i32
    %c0_i32_135 = arith.constant 0 : i32
    %315 = arith.cmpi eq, %c100_i32_133, %c0_i32_135 : i32
    %316 = arith.select %315, %c0_i32_135, %314 : i32
    %c3_i64_136 = arith.constant 3 : i64
    %317 = llvm.load %10 : !llvm.ptr -> i64
    %318 = arith.cmpi ult, %317, %c3_i64_136 : i64
    scf.if %318 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %317, %c3_i64_136 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %316, %6 : i32, !llvm.ptr
    %c1_i64_137 = arith.constant 1 : i64
    %319 = llvm.load %10 : !llvm.ptr -> i64
    %320 = arith.cmpi ult, %319, %c1_i64_137 : i64
    scf.if %320 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %319, %c1_i64_137 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c100_i32_138 = arith.constant 100 : i32
    %c5_i64_139 = arith.constant 5 : i64
    %321 = llvm.load %10 : !llvm.ptr -> i64
    %322 = arith.cmpi ult, %321, %c5_i64_139 : i64
    scf.if %322 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %321, %c5_i64_139 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %323 = arith.muli %316, %c100_i32_138 : i32
    %c3_i64_140 = arith.constant 3 : i64
    %324 = llvm.load %10 : !llvm.ptr -> i64
    %325 = arith.cmpi ult, %324, %c3_i64_140 : i64
    scf.if %325 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %324, %c3_i64_140 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %326 = arith.subi %299, %323 : i32
    %c1_i64_141 = arith.constant 1 : i64
    %327 = llvm.load %10 : !llvm.ptr -> i64
    %328 = arith.cmpi ult, %327, %c1_i64_141 : i64
    scf.if %328 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %327, %c1_i64_141 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c65535_i32_142 = arith.constant 65535 : i32
    %c3_i64_143 = arith.constant 3 : i64
    %329 = llvm.load %10 : !llvm.ptr -> i64
    %330 = arith.cmpi ult, %329, %c3_i64_143 : i64
    scf.if %330 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %329, %c3_i64_143 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %331 = arith.andi %326, %c65535_i32_142 : i32
    %c1_i64_144 = arith.constant 1 : i64
    %332 = llvm.load %10 : !llvm.ptr -> i64
    %333 = arith.cmpi ult, %332, %c1_i64_144 : i64
    scf.if %333 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %332, %c1_i64_144 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c1_i32_145 = arith.constant 1 : i32
    %c3_i64_146 = arith.constant 3 : i64
    %334 = llvm.load %10 : !llvm.ptr -> i64
    %335 = arith.cmpi ult, %334, %c3_i64_146 : i64
    scf.if %335 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %334, %c3_i64_146 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c31_i32_147 = arith.constant 31 : i32
    %336 = arith.cmpi ule, %c1_i32_145, %c31_i32_147 : i32
    %337 = scf.if %336 -> (i32) {
      %497 = arith.shli %331, %c1_i32_145 : i32
      scf.yield %497 : i32
    } else {
      %c0_i32_219 = arith.constant 0 : i32
      scf.yield %c0_i32_219 : i32
    }
    %c1_i64_148 = arith.constant 1 : i64
    %338 = llvm.load %10 : !llvm.ptr -> i64
    %339 = arith.cmpi ult, %338, %c1_i64_148 : i64
    scf.if %339 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %338, %c1_i64_148 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c1049296_i32_149 = arith.constant 1049296 : i32
    %c3_i64_150 = arith.constant 3 : i64
    %340 = llvm.load %10 : !llvm.ptr -> i64
    %341 = arith.cmpi ult, %340, %c3_i64_150 : i64
    scf.if %341 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %340, %c3_i64_150 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %342 = arith.addi %337, %c1049296_i32_149 : i32
    %c3_i64_151 = arith.constant 3 : i64
    %343 = llvm.load %10 : !llvm.ptr -> i64
    %344 = arith.cmpi ult, %343, %c3_i64_151 : i64
    scf.if %344 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %343, %c3_i64_151 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i64_152 = arith.constant 0 : i64
    %345 = arith.extui %342 : i32 to i64
    %346 = arith.addi %345, %c0_i64_152 : i64
    %347 = llvm.getelementptr %15[%346] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %348 = llvm.load volatile %347 {alignment = 1 : i64} : !llvm.ptr -> i16
    %349 = arith.extui %348 : i16 to i32
    %c3_i64_153 = arith.constant 3 : i64
    %350 = llvm.load %10 : !llvm.ptr -> i64
    %351 = arith.cmpi ult, %350, %c3_i64_153 : i64
    scf.if %351 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %350, %c3_i64_153 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i64_154 = arith.constant 0 : i64
    %352 = arith.extui %293 : i32 to i64
    %353 = arith.addi %352, %c0_i64_154 : i64
    %354 = llvm.getelementptr %15[%353] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %355 = arith.trunci %349 : i32 to i16
    llvm.store volatile %355, %354 {alignment = 1 : i64} : i16, !llvm.ptr
    %c1_i64_155 = arith.constant 1 : i64
    %356 = llvm.load %10 : !llvm.ptr -> i64
    %357 = arith.cmpi ult, %356, %c1_i64_155 : i64
    scf.if %357 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %356, %c1_i64_155 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb12, ^bb13
    %c3_i64_156 = arith.constant 3 : i64
    %358 = llvm.load %10 : !llvm.ptr -> i64
    %359 = arith.cmpi ult, %358, %c3_i64_156 : i64
    scf.if %359 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %358, %c3_i64_156 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %360 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_157 = arith.constant 3 : i64
    %361 = llvm.load %10 : !llvm.ptr -> i64
    %362 = arith.cmpi ult, %361, %c3_i64_157 : i64
    scf.if %362 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %361, %c3_i64_157 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %363 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_158 = arith.constant 1 : i64
    %364 = llvm.load %10 : !llvm.ptr -> i64
    %365 = arith.cmpi ult, %364, %c1_i64_158 : i64
    scf.if %365 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %364, %c1_i64_158 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c1_i32_159 = arith.constant 1 : i32
    %c1_i64_160 = arith.constant 1 : i64
    %366 = llvm.load %10 : !llvm.ptr -> i64
    %367 = arith.cmpi ult, %366, %c1_i64_160 : i64
    scf.if %367 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %366, %c1_i64_160 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i32_161 = arith.constant 0 : i32
    %c3_i64_162 = arith.constant 3 : i64
    %368 = llvm.load %10 : !llvm.ptr -> i64
    %369 = arith.cmpi ult, %368, %c3_i64_162 : i64
    scf.if %369 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %368, %c3_i64_162 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %370 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_163 = arith.constant 1 : i64
    %371 = llvm.load %10 : !llvm.ptr -> i64
    %372 = arith.cmpi ult, %371, %c1_i64_163 : i64
    scf.if %372 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %371, %c1_i64_163 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c9_i32_164 = arith.constant 9 : i32
    %c3_i64_165 = arith.constant 3 : i64
    %373 = llvm.load %10 : !llvm.ptr -> i64
    %374 = arith.cmpi ult, %373, %c3_i64_165 : i64
    scf.if %374 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %373, %c3_i64_165 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %375 = arith.addi %370, %c9_i32_164 : i32
    %c3_i64_166 = arith.constant 3 : i64
    %376 = llvm.load %10 : !llvm.ptr -> i64
    %377 = arith.cmpi ult, %376, %c3_i64_166 : i64
    scf.if %377 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %376, %c3_i64_166 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %378 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_167 = arith.constant 3 : i64
    %379 = llvm.load %10 : !llvm.ptr -> i64
    %380 = arith.cmpi ult, %379, %c3_i64_167 : i64
    scf.if %380 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %379, %c3_i64_167 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %381 = arith.addi %375, %378 : i32
    %c1_i64_168 = arith.constant 1 : i64
    %382 = llvm.load %10 : !llvm.ptr -> i64
    %383 = arith.cmpi ult, %382, %c1_i64_168 : i64
    scf.if %383 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %382, %c1_i64_168 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c39_i32_169 = arith.constant 39 : i32
    %c3_i64_170 = arith.constant 3 : i64
    %384 = llvm.load %10 : !llvm.ptr -> i64
    %385 = arith.cmpi ult, %384, %c3_i64_170 : i64
    scf.if %385 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %384, %c3_i64_170 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %386 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_171 = arith.constant 3 : i64
    %387 = llvm.load %10 : !llvm.ptr -> i64
    %388 = arith.cmpi ult, %387, %c3_i64_171 : i64
    scf.if %388 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %387, %c3_i64_171 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %389 = arith.subi %c39_i32_169, %386 : i32
    %c6_i64 = arith.constant 6 : i64
    %390 = llvm.load %10 : !llvm.ptr -> i64
    %391 = arith.cmpi ult, %390, %c6_i64 : i64
    scf.if %391 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %390, %c6_i64 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %392 = call @f70(%arg0, %360, %363, %c1_i32_159, %c0_i32_161, %381, %389) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    %c3_i64_172 = arith.constant 3 : i64
    %393 = llvm.load %10 : !llvm.ptr -> i64
    %394 = arith.cmpi ult, %393, %c3_i64_172 : i64
    scf.if %394 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %393, %c3_i64_172 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %392, %4 : i32, !llvm.ptr
    %c3_i64_173 = arith.constant 3 : i64
    %395 = llvm.load %10 : !llvm.ptr -> i64
    %396 = arith.cmpi ult, %395, %c3_i64_173 : i64
    scf.if %396 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %395, %c3_i64_173 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %397 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_174 = arith.constant 1 : i64
    %398 = llvm.load %10 : !llvm.ptr -> i64
    %399 = arith.cmpi ult, %398, %c1_i64_174 : i64
    scf.if %399 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %398, %c1_i64_174 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c48_i32_175 = arith.constant 48 : i32
    %c3_i64_176 = arith.constant 3 : i64
    %400 = llvm.load %10 : !llvm.ptr -> i64
    %401 = arith.cmpi ult, %400, %c3_i64_176 : i64
    scf.if %401 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %400, %c3_i64_176 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %402 = arith.addi %397, %c48_i32_175 : i32
    %c3_i64_177 = arith.constant 3 : i64
    %403 = llvm.load %10 : !llvm.ptr -> i64
    %404 = arith.cmpi ult, %403, %c3_i64_177 : i64
    scf.if %404 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %403, %c3_i64_177 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %402, %12 : i32, !llvm.ptr
    %c3_i64_178 = arith.constant 3 : i64
    %405 = llvm.load %10 : !llvm.ptr -> i64
    %406 = arith.cmpi ult, %405, %c3_i64_178 : i64
    scf.if %406 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %405, %c3_i64_178 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %407 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_179 = arith.constant 1 : i64
    %408 = llvm.load %10 : !llvm.ptr -> i64
    %409 = arith.cmpi ult, %408, %c1_i64_179 : i64
    scf.if %409 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %408, %c1_i64_179 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    cf.br ^bb2(%407 : i32)
  ^bb12:  // pred: ^bb9
    %c3_i64_180 = arith.constant 3 : i64
    %410 = llvm.load %10 : !llvm.ptr -> i64
    %411 = arith.cmpi ult, %410, %c3_i64_180 : i64
    scf.if %411 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %410, %c3_i64_180 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %412 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_181 = arith.constant 1 : i64
    %413 = llvm.load %10 : !llvm.ptr -> i64
    %414 = arith.cmpi ult, %413, %c1_i64_181 : i64
    scf.if %414 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %413, %c1_i64_181 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c9_i32_182 = arith.constant 9 : i32
    %c3_i64_183 = arith.constant 3 : i64
    %415 = llvm.load %10 : !llvm.ptr -> i64
    %416 = arith.cmpi ult, %415, %c3_i64_183 : i64
    scf.if %416 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %415, %c3_i64_183 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %417 = arith.addi %412, %c9_i32_182 : i32
    %c3_i64_184 = arith.constant 3 : i64
    %418 = llvm.load %10 : !llvm.ptr -> i64
    %419 = arith.cmpi ult, %418, %c3_i64_184 : i64
    scf.if %419 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %418, %c3_i64_184 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %420 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_185 = arith.constant 1 : i64
    %421 = llvm.load %10 : !llvm.ptr -> i64
    %422 = arith.cmpi ult, %421, %c1_i64_185 : i64
    scf.if %422 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %421, %c1_i64_185 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c-1_i32 = arith.constant -1 : i32
    %c3_i64_186 = arith.constant 3 : i64
    %423 = llvm.load %10 : !llvm.ptr -> i64
    %424 = arith.cmpi ult, %423, %c3_i64_186 : i64
    scf.if %424 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %423, %c3_i64_186 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %425 = arith.addi %420, %c-1_i32 : i32
    %c3_i64_187 = arith.constant 3 : i64
    %426 = llvm.load %10 : !llvm.ptr -> i64
    %427 = arith.cmpi ult, %426, %c3_i64_187 : i64
    scf.if %427 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %426, %c3_i64_187 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %425, %4 : i32, !llvm.ptr
    %c3_i64_188 = arith.constant 3 : i64
    %428 = llvm.load %10 : !llvm.ptr -> i64
    %429 = arith.cmpi ult, %428, %c3_i64_188 : i64
    scf.if %429 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %428, %c3_i64_188 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %430 = arith.addi %417, %425 : i32
    %c3_i64_189 = arith.constant 3 : i64
    %431 = llvm.load %10 : !llvm.ptr -> i64
    %432 = arith.cmpi ult, %431, %c3_i64_189 : i64
    scf.if %432 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %431, %c3_i64_189 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %433 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_190 = arith.constant 1 : i64
    %434 = llvm.load %10 : !llvm.ptr -> i64
    %435 = arith.cmpi ult, %434, %c1_i64_190 : i64
    scf.if %435 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %434, %c1_i64_190 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c48_i32_191 = arith.constant 48 : i32
    %c3_i64_192 = arith.constant 3 : i64
    %436 = llvm.load %10 : !llvm.ptr -> i64
    %437 = arith.cmpi ult, %436, %c3_i64_192 : i64
    scf.if %437 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %436, %c3_i64_192 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %438 = arith.ori %433, %c48_i32_191 : i32
    %c3_i64_193 = arith.constant 3 : i64
    %439 = llvm.load %10 : !llvm.ptr -> i64
    %440 = arith.cmpi ult, %439, %c3_i64_193 : i64
    scf.if %440 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %439, %c3_i64_193 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i64_194 = arith.constant 0 : i64
    %441 = arith.extui %430 : i32 to i64
    %442 = arith.addi %441, %c0_i64_194 : i64
    %443 = llvm.getelementptr %15[%442] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %444 = arith.trunci %438 : i32 to i8
    llvm.store volatile %444, %443 {alignment = 1 : i64} : i8, !llvm.ptr
    %c1_i64_195 = arith.constant 1 : i64
    %445 = llvm.load %10 : !llvm.ptr -> i64
    %446 = arith.cmpi ult, %445, %c1_i64_195 : i64
    scf.if %446 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %445, %c1_i64_195 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    cf.br ^bb11
  ^bb13:  // pred: ^bb9
    %c3_i64_196 = arith.constant 3 : i64
    %447 = llvm.load %10 : !llvm.ptr -> i64
    %448 = arith.cmpi ult, %447, %c3_i64_196 : i64
    scf.if %448 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %447, %c3_i64_196 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %449 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_197 = arith.constant 1 : i64
    %450 = llvm.load %10 : !llvm.ptr -> i64
    %451 = arith.cmpi ult, %450, %c1_i64_197 : i64
    scf.if %451 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %450, %c1_i64_197 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c9_i32_198 = arith.constant 9 : i32
    %c3_i64_199 = arith.constant 3 : i64
    %452 = llvm.load %10 : !llvm.ptr -> i64
    %453 = arith.cmpi ult, %452, %c3_i64_199 : i64
    scf.if %453 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %452, %c3_i64_199 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %454 = arith.addi %449, %c9_i32_198 : i32
    %c3_i64_200 = arith.constant 3 : i64
    %455 = llvm.load %10 : !llvm.ptr -> i64
    %456 = arith.cmpi ult, %455, %c3_i64_200 : i64
    scf.if %456 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %455, %c3_i64_200 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %457 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_201 = arith.constant 1 : i64
    %458 = llvm.load %10 : !llvm.ptr -> i64
    %459 = arith.cmpi ult, %458, %c1_i64_201 : i64
    scf.if %459 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %458, %c1_i64_201 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c-2_i32_202 = arith.constant -2 : i32
    %c3_i64_203 = arith.constant 3 : i64
    %460 = llvm.load %10 : !llvm.ptr -> i64
    %461 = arith.cmpi ult, %460, %c3_i64_203 : i64
    scf.if %461 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %460, %c3_i64_203 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %462 = arith.addi %457, %c-2_i32_202 : i32
    %c3_i64_204 = arith.constant 3 : i64
    %463 = llvm.load %10 : !llvm.ptr -> i64
    %464 = arith.cmpi ult, %463, %c3_i64_204 : i64
    scf.if %464 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %463, %c3_i64_204 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    llvm.store %462, %4 : i32, !llvm.ptr
    %c3_i64_205 = arith.constant 3 : i64
    %465 = llvm.load %10 : !llvm.ptr -> i64
    %466 = arith.cmpi ult, %465, %c3_i64_205 : i64
    scf.if %466 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %465, %c3_i64_205 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %467 = arith.addi %454, %462 : i32
    %c3_i64_206 = arith.constant 3 : i64
    %468 = llvm.load %10 : !llvm.ptr -> i64
    %469 = arith.cmpi ult, %468, %c3_i64_206 : i64
    scf.if %469 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %468, %c3_i64_206 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %470 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_207 = arith.constant 1 : i64
    %471 = llvm.load %10 : !llvm.ptr -> i64
    %472 = arith.cmpi ult, %471, %c1_i64_207 : i64
    scf.if %472 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %471, %c1_i64_207 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c1_i32_208 = arith.constant 1 : i32
    %c3_i64_209 = arith.constant 3 : i64
    %473 = llvm.load %10 : !llvm.ptr -> i64
    %474 = arith.cmpi ult, %473, %c3_i64_209 : i64
    scf.if %474 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %473, %c3_i64_209 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c31_i32_210 = arith.constant 31 : i32
    %475 = arith.cmpi ule, %c1_i32_208, %c31_i32_210 : i32
    %476 = scf.if %475 -> (i32) {
      %497 = arith.shli %470, %c1_i32_208 : i32
      scf.yield %497 : i32
    } else {
      %c0_i32_219 = arith.constant 0 : i32
      scf.yield %c0_i32_219 : i32
    }
    %c1_i64_211 = arith.constant 1 : i64
    %477 = llvm.load %10 : !llvm.ptr -> i64
    %478 = arith.cmpi ult, %477, %c1_i64_211 : i64
    scf.if %478 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %477, %c1_i64_211 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c1049296_i32_212 = arith.constant 1049296 : i32
    %c3_i64_213 = arith.constant 3 : i64
    %479 = llvm.load %10 : !llvm.ptr -> i64
    %480 = arith.cmpi ult, %479, %c3_i64_213 : i64
    scf.if %480 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %479, %c3_i64_213 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %481 = arith.addi %476, %c1049296_i32_212 : i32
    %c3_i64_214 = arith.constant 3 : i64
    %482 = llvm.load %10 : !llvm.ptr -> i64
    %483 = arith.cmpi ult, %482, %c3_i64_214 : i64
    scf.if %483 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %482, %c3_i64_214 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i64_215 = arith.constant 0 : i64
    %484 = arith.extui %481 : i32 to i64
    %485 = arith.addi %484, %c0_i64_215 : i64
    %486 = llvm.getelementptr %15[%485] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %487 = llvm.load volatile %486 {alignment = 1 : i64} : !llvm.ptr -> i16
    %488 = arith.extui %487 : i16 to i32
    %c3_i64_216 = arith.constant 3 : i64
    %489 = llvm.load %10 : !llvm.ptr -> i64
    %490 = arith.cmpi ult, %489, %c3_i64_216 : i64
    scf.if %490 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %489, %c3_i64_216 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    %c0_i64_217 = arith.constant 0 : i64
    %491 = arith.extui %467 : i32 to i64
    %492 = arith.addi %491, %c0_i64_217 : i64
    %493 = llvm.getelementptr %15[%492] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %494 = arith.trunci %488 : i32 to i16
    llvm.store volatile %494, %493 {alignment = 1 : i64} : i16, !llvm.ptr
    %c1_i64_218 = arith.constant 1 : i64
    %495 = llvm.load %10 : !llvm.ptr -> i64
    %496 = arith.cmpi ult, %495, %c1_i64_218 : i64
    scf.if %496 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %497 = arith.subi %495, %c1_i64_218 : i64
      llvm.store %497, %10 : i64, !llvm.ptr
    }
    cf.br ^bb11
  }
  func.func @f76(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %11 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_10 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_10 x i64 : (i32) -> !llvm.ptr
    llvm.store %11, %12 : i64, !llvm.ptr
    %13 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %16 = llvm.load %12 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c1_i64 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %16, %c1_i64 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c1_i64_11 = arith.constant 1 : i64
    %18 = llvm.load %12 : !llvm.ptr -> i64
    %19 = arith.cmpi ult, %18, %c1_i64_11 : i64
    scf.if %19 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %18, %c1_i64_11 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c3_i64 = arith.constant 3 : i64
    %20 = llvm.load %12 : !llvm.ptr -> i64
    %21 = arith.cmpi ult, %20, %c3_i64 : i64
    scf.if %21 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %20, %c3_i64 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_12 = arith.constant 1 : i64
    %23 = llvm.load %12 : !llvm.ptr -> i64
    %24 = arith.cmpi ult, %23, %c1_i64_12 : i64
    scf.if %24 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %23, %c1_i64_12 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c16_i32 = arith.constant 16 : i32
    %c3_i64_13 = arith.constant 3 : i64
    %25 = llvm.load %12 : !llvm.ptr -> i64
    %26 = arith.cmpi ult, %25, %c3_i64_13 : i64
    scf.if %26 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %25, %c3_i64_13 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %27 = arith.cmpi uge, %22, %c16_i32 : i32
    %28 = arith.extui %27 : i1 to i32
    %c1_i64_14 = arith.constant 1 : i64
    %29 = llvm.load %12 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c1_i64_14 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %29, %c1_i64_14 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_15 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %28, %c0_i32_15 : i32
    cf.cond_br %31, ^bb4, ^bb5
  ^bb2(%32: i32):  // pred: ^bb22
    return %32 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb11
    %c1_i64_16 = arith.constant 1 : i64
    %33 = llvm.load %12 : !llvm.ptr -> i64
    %34 = arith.cmpi ult, %33, %c1_i64_16 : i64
    scf.if %34 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %33, %c1_i64_16 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c3_i64_17 = arith.constant 3 : i64
    %35 = llvm.load %12 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %c3_i64_17 : i64
    scf.if %36 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %35, %c3_i64_17 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_18 = arith.constant 3 : i64
    %38 = llvm.load %12 : !llvm.ptr -> i64
    %39 = arith.cmpi ult, %38, %c3_i64_18 : i64
    scf.if %39 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %38, %c3_i64_18 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_19 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %37, %c0_i32_19 : i32
    %41 = arith.extui %40 : i1 to i32
    %c1_i64_20 = arith.constant 1 : i64
    %42 = llvm.load %12 : !llvm.ptr -> i64
    %43 = arith.cmpi ult, %42, %c1_i64_20 : i64
    scf.if %43 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %42, %c1_i64_20 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_21 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %41, %c0_i32_21 : i32
    cf.cond_br %44, ^bb22, ^bb23
  ^bb4:  // pred: ^bb1
    %c3_i64_22 = arith.constant 3 : i64
    %45 = llvm.load %12 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c3_i64_22 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %45, %c3_i64_22 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_23 = arith.constant 1 : i64
    %48 = llvm.load %12 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c1_i64_23 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %48, %c1_i64_23 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_24 = arith.constant 0 : i32
    %c3_i64_25 = arith.constant 3 : i64
    %50 = llvm.load %12 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c3_i64_25 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %50, %c3_i64_25 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %52 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_26 = arith.constant 3 : i64
    %53 = llvm.load %12 : !llvm.ptr -> i64
    %54 = arith.cmpi ult, %53, %c3_i64_26 : i64
    scf.if %54 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %53, %c3_i64_26 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %55 = arith.subi %c0_i32_24, %52 : i32
    %c1_i64_27 = arith.constant 1 : i64
    %56 = llvm.load %12 : !llvm.ptr -> i64
    %57 = arith.cmpi ult, %56, %c1_i64_27 : i64
    scf.if %57 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %56, %c1_i64_27 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c3_i32 = arith.constant 3 : i32
    %c3_i64_28 = arith.constant 3 : i64
    %58 = llvm.load %12 : !llvm.ptr -> i64
    %59 = arith.cmpi ult, %58, %c3_i64_28 : i64
    scf.if %59 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %58, %c3_i64_28 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %60 = arith.andi %55, %c3_i32 : i32
    %c3_i64_29 = arith.constant 3 : i64
    %61 = llvm.load %12 : !llvm.ptr -> i64
    %62 = arith.cmpi ult, %61, %c3_i64_29 : i64
    scf.if %62 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %61, %c3_i64_29 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %60, %4 : i32, !llvm.ptr
    %c3_i64_30 = arith.constant 3 : i64
    %63 = llvm.load %12 : !llvm.ptr -> i64
    %64 = arith.cmpi ult, %63, %c3_i64_30 : i64
    scf.if %64 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %63, %c3_i64_30 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %65 = arith.addi %47, %60 : i32
    %c3_i64_31 = arith.constant 3 : i64
    %66 = llvm.load %12 : !llvm.ptr -> i64
    %67 = arith.cmpi ult, %66, %c3_i64_31 : i64
    scf.if %67 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %66, %c3_i64_31 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %65, %5 : i32, !llvm.ptr
    %c1_i64_32 = arith.constant 1 : i64
    %68 = llvm.load %12 : !llvm.ptr -> i64
    %69 = arith.cmpi ult, %68, %c1_i64_32 : i64
    scf.if %69 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %68, %c1_i64_32 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c3_i64_33 = arith.constant 3 : i64
    %70 = llvm.load %12 : !llvm.ptr -> i64
    %71 = arith.cmpi ult, %70, %c3_i64_33 : i64
    scf.if %71 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %70, %c3_i64_33 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %72 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_34 = arith.constant 3 : i64
    %73 = llvm.load %12 : !llvm.ptr -> i64
    %74 = arith.cmpi ult, %73, %c3_i64_34 : i64
    scf.if %74 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %73, %c3_i64_34 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_35 = arith.constant 0 : i32
    %75 = arith.cmpi eq, %72, %c0_i32_35 : i32
    %76 = arith.extui %75 : i1 to i32
    %c1_i64_36 = arith.constant 1 : i64
    %77 = llvm.load %12 : !llvm.ptr -> i64
    %78 = arith.cmpi ult, %77, %c1_i64_36 : i64
    scf.if %78 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %77, %c1_i64_36 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_37 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %76, %c0_i32_37 : i32
    cf.cond_br %79, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %c3_i64_38 = arith.constant 3 : i64
    %80 = llvm.load %12 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_38 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %80, %c3_i64_38 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_39 = arith.constant 3 : i64
    %83 = llvm.load %12 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c3_i64_39 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %83, %c3_i64_39 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %82, %3 : i32, !llvm.ptr
    %c1_i64_40 = arith.constant 1 : i64
    %85 = llvm.load %12 : !llvm.ptr -> i64
    %86 = arith.cmpi ult, %85, %c1_i64_40 : i64
    scf.if %86 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %85, %c1_i64_40 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb8
    %c3_i64_41 = arith.constant 3 : i64
    %87 = llvm.load %12 : !llvm.ptr -> i64
    %88 = arith.cmpi ult, %87, %c3_i64_41 : i64
    scf.if %88 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %87, %c3_i64_41 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %89 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_42 = arith.constant 3 : i64
    %90 = llvm.load %12 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c3_i64_42 : i64
    scf.if %91 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %90, %c3_i64_42 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %92 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_43 = arith.constant 3 : i64
    %93 = llvm.load %12 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c3_i64_43 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %93, %c3_i64_43 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %95 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_44 = arith.constant 3 : i64
    %96 = llvm.load %12 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c3_i64_44 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %96, %c3_i64_44 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %98 = arith.subi %92, %95 : i32
    %c3_i64_45 = arith.constant 3 : i64
    %99 = llvm.load %12 : !llvm.ptr -> i64
    %100 = arith.cmpi ult, %99, %c3_i64_45 : i64
    scf.if %100 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %99, %c3_i64_45 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %98, %7 : i32, !llvm.ptr
    %c1_i64_46 = arith.constant 1 : i64
    %101 = llvm.load %12 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c1_i64_46 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %101, %c1_i64_46 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c-4_i32 = arith.constant -4 : i32
    %c3_i64_47 = arith.constant 3 : i64
    %103 = llvm.load %12 : !llvm.ptr -> i64
    %104 = arith.cmpi ult, %103, %c3_i64_47 : i64
    scf.if %104 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %103, %c3_i64_47 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %105 = arith.andi %98, %c-4_i32 : i32
    %c3_i64_48 = arith.constant 3 : i64
    %106 = llvm.load %12 : !llvm.ptr -> i64
    %107 = arith.cmpi ult, %106, %c3_i64_48 : i64
    scf.if %107 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %106, %c3_i64_48 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %105, %8 : i32, !llvm.ptr
    %c3_i64_49 = arith.constant 3 : i64
    %108 = llvm.load %12 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %108, %c3_i64_49 : i64
    scf.if %109 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %108, %c3_i64_49 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %110 = arith.addi %89, %105 : i32
    %c3_i64_50 = arith.constant 3 : i64
    %111 = llvm.load %12 : !llvm.ptr -> i64
    %112 = arith.cmpi ult, %111, %c3_i64_50 : i64
    scf.if %112 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %111, %c3_i64_50 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %110, %3 : i32, !llvm.ptr
    %c1_i64_51 = arith.constant 1 : i64
    %113 = llvm.load %12 : !llvm.ptr -> i64
    %114 = arith.cmpi ult, %113, %c1_i64_51 : i64
    scf.if %114 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %113, %c1_i64_51 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c1_i64_52 = arith.constant 1 : i64
    %115 = llvm.load %12 : !llvm.ptr -> i64
    %116 = arith.cmpi ult, %115, %c1_i64_52 : i64
    scf.if %116 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %115, %c1_i64_52 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c3_i64_53 = arith.constant 3 : i64
    %117 = llvm.load %12 : !llvm.ptr -> i64
    %118 = arith.cmpi ult, %117, %c3_i64_53 : i64
    scf.if %118 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %117, %c3_i64_53 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %119 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_54 = arith.constant 3 : i64
    %120 = llvm.load %12 : !llvm.ptr -> i64
    %121 = arith.cmpi ult, %120, %c3_i64_54 : i64
    scf.if %121 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %120, %c3_i64_54 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %122 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_55 = arith.constant 3 : i64
    %123 = llvm.load %12 : !llvm.ptr -> i64
    %124 = arith.cmpi ult, %123, %c3_i64_55 : i64
    scf.if %124 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %123, %c3_i64_55 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %125 = arith.addi %119, %122 : i32
    %c3_i64_56 = arith.constant 3 : i64
    %126 = llvm.load %12 : !llvm.ptr -> i64
    %127 = arith.cmpi ult, %126, %c3_i64_56 : i64
    scf.if %127 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %126, %c3_i64_56 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %125, %9 : i32, !llvm.ptr
    %c1_i64_57 = arith.constant 1 : i64
    %128 = llvm.load %12 : !llvm.ptr -> i64
    %129 = arith.cmpi ult, %128, %c1_i64_57 : i64
    scf.if %129 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %128, %c1_i64_57 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c3_i32_58 = arith.constant 3 : i32
    %c3_i64_59 = arith.constant 3 : i64
    %130 = llvm.load %12 : !llvm.ptr -> i64
    %131 = arith.cmpi ult, %130, %c3_i64_59 : i64
    scf.if %131 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %130, %c3_i64_59 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %132 = arith.andi %125, %c3_i32_58 : i32
    %c3_i64_60 = arith.constant 3 : i64
    %133 = llvm.load %12 : !llvm.ptr -> i64
    %134 = arith.cmpi ult, %133, %c3_i64_60 : i64
    scf.if %134 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %133, %c3_i64_60 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_61 = arith.constant 0 : i32
    %135 = arith.cmpi eq, %132, %c0_i32_61 : i32
    %136 = arith.extui %135 : i1 to i32
    %c1_i64_62 = arith.constant 1 : i64
    %137 = llvm.load %12 : !llvm.ptr -> i64
    %138 = arith.cmpi ult, %137, %c1_i64_62 : i64
    scf.if %138 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %137, %c1_i64_62 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_63 = arith.constant 0 : i32
    %139 = arith.cmpi ne, %136, %c0_i32_63 : i32
    cf.cond_br %139, ^bb12, ^bb13
  ^bb7:  // pred: ^bb4
    %c3_i64_64 = arith.constant 3 : i64
    %140 = llvm.load %12 : !llvm.ptr -> i64
    %141 = arith.cmpi ult, %140, %c3_i64_64 : i64
    scf.if %141 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %140, %c3_i64_64 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %142 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_65 = arith.constant 3 : i64
    %143 = llvm.load %12 : !llvm.ptr -> i64
    %144 = arith.cmpi ult, %143, %c3_i64_65 : i64
    scf.if %144 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %143, %c3_i64_65 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %142, %3 : i32, !llvm.ptr
    %c3_i64_66 = arith.constant 3 : i64
    %145 = llvm.load %12 : !llvm.ptr -> i64
    %146 = arith.cmpi ult, %145, %c3_i64_66 : i64
    scf.if %146 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %145, %c3_i64_66 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %147 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_67 = arith.constant 3 : i64
    %148 = llvm.load %12 : !llvm.ptr -> i64
    %149 = arith.cmpi ult, %148, %c3_i64_67 : i64
    scf.if %149 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %148, %c3_i64_67 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %147, %6 : i32, !llvm.ptr
    %c1_i64_68 = arith.constant 1 : i64
    %150 = llvm.load %12 : !llvm.ptr -> i64
    %151 = arith.cmpi ult, %150, %c1_i64_68 : i64
    scf.if %151 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %150, %c1_i64_68 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb9
  ^bb8:  // pred: ^bb10
    %c1_i64_69 = arith.constant 1 : i64
    %152 = llvm.load %12 : !llvm.ptr -> i64
    %153 = arith.cmpi ult, %152, %c1_i64_69 : i64
    scf.if %153 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %152, %c1_i64_69 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb7, ^bb9
    %c3_i64_70 = arith.constant 3 : i64
    %154 = llvm.load %12 : !llvm.ptr -> i64
    %155 = arith.cmpi ult, %154, %c3_i64_70 : i64
    scf.if %155 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %154, %c3_i64_70 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %156 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_71 = arith.constant 3 : i64
    %157 = llvm.load %12 : !llvm.ptr -> i64
    %158 = arith.cmpi ult, %157, %c3_i64_71 : i64
    scf.if %158 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %157, %c3_i64_71 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %159 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_72 = arith.constant 3 : i64
    %160 = llvm.load %12 : !llvm.ptr -> i64
    %161 = arith.cmpi ult, %160, %c3_i64_72 : i64
    scf.if %161 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %160, %c3_i64_72 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i64 = arith.constant 0 : i64
    %162 = arith.extui %159 : i32 to i64
    %163 = arith.addi %162, %c0_i64 : i64
    %164 = llvm.getelementptr %15[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i8
    %166 = arith.extui %165 : i8 to i32
    %c3_i64_73 = arith.constant 3 : i64
    %167 = llvm.load %12 : !llvm.ptr -> i64
    %168 = arith.cmpi ult, %167, %c3_i64_73 : i64
    scf.if %168 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %167, %c3_i64_73 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i64_74 = arith.constant 0 : i64
    %169 = arith.extui %156 : i32 to i64
    %170 = arith.addi %169, %c0_i64_74 : i64
    %171 = llvm.getelementptr %15[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %172 = arith.trunci %166 : i32 to i8
    llvm.store volatile %172, %171 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_75 = arith.constant 3 : i64
    %173 = llvm.load %12 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %173, %c3_i64_75 : i64
    scf.if %174 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %173, %c3_i64_75 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %175 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i64_76 = arith.constant 1 : i64
    %176 = llvm.load %12 : !llvm.ptr -> i64
    %177 = arith.cmpi ult, %176, %c1_i64_76 : i64
    scf.if %177 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %176, %c1_i64_76 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c1_i32_77 = arith.constant 1 : i32
    %c3_i64_78 = arith.constant 3 : i64
    %178 = llvm.load %12 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %178, %c3_i64_78 : i64
    scf.if %179 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %178, %c3_i64_78 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %180 = arith.addi %175, %c1_i32_77 : i32
    %c3_i64_79 = arith.constant 3 : i64
    %181 = llvm.load %12 : !llvm.ptr -> i64
    %182 = arith.cmpi ult, %181, %c3_i64_79 : i64
    scf.if %182 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %181, %c3_i64_79 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %180, %6 : i32, !llvm.ptr
    %c3_i64_80 = arith.constant 3 : i64
    %183 = llvm.load %12 : !llvm.ptr -> i64
    %184 = arith.cmpi ult, %183, %c3_i64_80 : i64
    scf.if %184 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %183, %c3_i64_80 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_81 = arith.constant 1 : i64
    %186 = llvm.load %12 : !llvm.ptr -> i64
    %187 = arith.cmpi ult, %186, %c1_i64_81 : i64
    scf.if %187 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %186, %c1_i64_81 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c1_i32_82 = arith.constant 1 : i32
    %c3_i64_83 = arith.constant 3 : i64
    %188 = llvm.load %12 : !llvm.ptr -> i64
    %189 = arith.cmpi ult, %188, %c3_i64_83 : i64
    scf.if %189 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %188, %c3_i64_83 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %190 = arith.addi %185, %c1_i32_82 : i32
    %c3_i64_84 = arith.constant 3 : i64
    %191 = llvm.load %12 : !llvm.ptr -> i64
    %192 = arith.cmpi ult, %191, %c3_i64_84 : i64
    scf.if %192 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %191, %c3_i64_84 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %190, %3 : i32, !llvm.ptr
    %c3_i64_85 = arith.constant 3 : i64
    %193 = llvm.load %12 : !llvm.ptr -> i64
    %194 = arith.cmpi ult, %193, %c3_i64_85 : i64
    scf.if %194 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %193, %c3_i64_85 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %195 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_86 = arith.constant 3 : i64
    %196 = llvm.load %12 : !llvm.ptr -> i64
    %197 = arith.cmpi ult, %196, %c3_i64_86 : i64
    scf.if %197 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %196, %c3_i64_86 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %198 = arith.cmpi ult, %190, %195 : i32
    %199 = arith.extui %198 : i1 to i32
    %c1_i64_87 = arith.constant 1 : i64
    %200 = llvm.load %12 : !llvm.ptr -> i64
    %201 = arith.cmpi ult, %200, %c1_i64_87 : i64
    scf.if %201 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %200, %c1_i64_87 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_88 = arith.constant 0 : i32
    %202 = arith.cmpi ne, %199, %c0_i32_88 : i32
    cf.cond_br %202, ^bb9, ^bb10
  ^bb10:  // pred: ^bb9
    %c1_i64_89 = arith.constant 1 : i64
    %203 = llvm.load %12 : !llvm.ptr -> i64
    %204 = arith.cmpi ult, %203, %c1_i64_89 : i64
    scf.if %204 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %203, %c1_i64_89 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb8
  ^bb11:  // 4 preds: ^bb12, ^bb13, ^bb17, ^bb19
    %c3_i64_90 = arith.constant 3 : i64
    %205 = llvm.load %12 : !llvm.ptr -> i64
    %206 = arith.cmpi ult, %205, %c3_i64_90 : i64
    scf.if %206 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %205, %c3_i64_90 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %207 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64_91 = arith.constant 1 : i64
    %208 = llvm.load %12 : !llvm.ptr -> i64
    %209 = arith.cmpi ult, %208, %c1_i64_91 : i64
    scf.if %209 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %208, %c1_i64_91 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c3_i32_92 = arith.constant 3 : i32
    %c3_i64_93 = arith.constant 3 : i64
    %210 = llvm.load %12 : !llvm.ptr -> i64
    %211 = arith.cmpi ult, %210, %c3_i64_93 : i64
    scf.if %211 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %210, %c3_i64_93 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %212 = arith.andi %207, %c3_i32_92 : i32
    %c3_i64_94 = arith.constant 3 : i64
    %213 = llvm.load %12 : !llvm.ptr -> i64
    %214 = arith.cmpi ult, %213, %c3_i64_94 : i64
    scf.if %214 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %213, %c3_i64_94 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %212, %2 : i32, !llvm.ptr
    %c3_i64_95 = arith.constant 3 : i64
    %215 = llvm.load %12 : !llvm.ptr -> i64
    %216 = arith.cmpi ult, %215, %c3_i64_95 : i64
    scf.if %216 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %215, %c3_i64_95 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %217 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_96 = arith.constant 3 : i64
    %218 = llvm.load %12 : !llvm.ptr -> i64
    %219 = arith.cmpi ult, %218, %c3_i64_96 : i64
    scf.if %219 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %218, %c3_i64_96 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %220 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i64_97 = arith.constant 3 : i64
    %221 = llvm.load %12 : !llvm.ptr -> i64
    %222 = arith.cmpi ult, %221, %c3_i64_97 : i64
    scf.if %222 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %221, %c3_i64_97 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %223 = arith.addi %217, %220 : i32
    %c3_i64_98 = arith.constant 3 : i64
    %224 = llvm.load %12 : !llvm.ptr -> i64
    %225 = arith.cmpi ult, %224, %c3_i64_98 : i64
    scf.if %225 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %224, %c3_i64_98 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %223, %1 : i32, !llvm.ptr
    %c1_i64_99 = arith.constant 1 : i64
    %226 = llvm.load %12 : !llvm.ptr -> i64
    %227 = arith.cmpi ult, %226, %c1_i64_99 : i64
    scf.if %227 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %226, %c1_i64_99 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb3
  ^bb12:  // 2 preds: ^bb6, ^bb15
    %c3_i64_100 = arith.constant 3 : i64
    %228 = llvm.load %12 : !llvm.ptr -> i64
    %229 = arith.cmpi ult, %228, %c3_i64_100 : i64
    scf.if %229 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %228, %c3_i64_100 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %230 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i64_101 = arith.constant 1 : i64
    %231 = llvm.load %12 : !llvm.ptr -> i64
    %232 = arith.cmpi ult, %231, %c1_i64_101 : i64
    scf.if %232 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %231, %c1_i64_101 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c1_i32_102 = arith.constant 1 : i32
    %c3_i64_103 = arith.constant 3 : i64
    %233 = llvm.load %12 : !llvm.ptr -> i64
    %234 = arith.cmpi ult, %233, %c3_i64_103 : i64
    scf.if %234 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %233, %c3_i64_103 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %235 = arith.cmpi slt, %230, %c1_i32_102 : i32
    %236 = arith.extui %235 : i1 to i32
    %c1_i64_104 = arith.constant 1 : i64
    %237 = llvm.load %12 : !llvm.ptr -> i64
    %238 = arith.cmpi ult, %237, %c1_i64_104 : i64
    scf.if %238 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %237, %c1_i64_104 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_105 = arith.constant 0 : i32
    %239 = arith.cmpi ne, %236, %c0_i32_105 : i32
    cf.cond_br %239, ^bb11, ^bb18
  ^bb13:  // pred: ^bb6
    %c3_i64_106 = arith.constant 3 : i64
    %240 = llvm.load %12 : !llvm.ptr -> i64
    %241 = arith.cmpi ult, %240, %c3_i64_106 : i64
    scf.if %241 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %240, %c3_i64_106 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %242 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i64_107 = arith.constant 1 : i64
    %243 = llvm.load %12 : !llvm.ptr -> i64
    %244 = arith.cmpi ult, %243, %c1_i64_107 : i64
    scf.if %244 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %243, %c1_i64_107 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c1_i32_108 = arith.constant 1 : i32
    %c3_i64_109 = arith.constant 3 : i64
    %245 = llvm.load %12 : !llvm.ptr -> i64
    %246 = arith.cmpi ult, %245, %c3_i64_109 : i64
    scf.if %246 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %245, %c3_i64_109 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %247 = arith.cmpi slt, %242, %c1_i32_108 : i32
    %248 = arith.extui %247 : i1 to i32
    %c1_i64_110 = arith.constant 1 : i64
    %249 = llvm.load %12 : !llvm.ptr -> i64
    %250 = arith.cmpi ult, %249, %c1_i64_110 : i64
    scf.if %250 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %249, %c1_i64_110 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_111 = arith.constant 0 : i32
    %251 = arith.cmpi ne, %248, %c0_i32_111 : i32
    cf.cond_br %251, ^bb11, ^bb14
  ^bb14:  // pred: ^bb13
    %c3_i64_112 = arith.constant 3 : i64
    %252 = llvm.load %12 : !llvm.ptr -> i64
    %253 = arith.cmpi ult, %252, %c3_i64_112 : i64
    scf.if %253 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %252, %c3_i64_112 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %254 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64_113 = arith.constant 1 : i64
    %255 = llvm.load %12 : !llvm.ptr -> i64
    %256 = arith.cmpi ult, %255, %c1_i64_113 : i64
    scf.if %256 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %255, %c1_i64_113 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c3_i32_114 = arith.constant 3 : i32
    %c3_i64_115 = arith.constant 3 : i64
    %257 = llvm.load %12 : !llvm.ptr -> i64
    %258 = arith.cmpi ult, %257, %c3_i64_115 : i64
    scf.if %258 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %257, %c3_i64_115 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c31_i32 = arith.constant 31 : i32
    %259 = arith.cmpi ule, %c3_i32_114, %c31_i32 : i32
    %260 = scf.if %259 -> (i32) {
      %517 = arith.shli %254, %c3_i32_114 : i32
      scf.yield %517 : i32
    } else {
      %c0_i32_226 = arith.constant 0 : i32
      scf.yield %c0_i32_226 : i32
    }
    %c3_i64_116 = arith.constant 3 : i64
    %261 = llvm.load %12 : !llvm.ptr -> i64
    %262 = arith.cmpi ult, %261, %c3_i64_116 : i64
    scf.if %262 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %261, %c3_i64_116 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %260, %6 : i32, !llvm.ptr
    %c1_i64_117 = arith.constant 1 : i64
    %263 = llvm.load %12 : !llvm.ptr -> i64
    %264 = arith.cmpi ult, %263, %c1_i64_117 : i64
    scf.if %264 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %263, %c1_i64_117 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c24_i32 = arith.constant 24 : i32
    %c3_i64_118 = arith.constant 3 : i64
    %265 = llvm.load %12 : !llvm.ptr -> i64
    %266 = arith.cmpi ult, %265, %c3_i64_118 : i64
    scf.if %266 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %265, %c3_i64_118 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %267 = arith.andi %260, %c24_i32 : i32
    %c3_i64_119 = arith.constant 3 : i64
    %268 = llvm.load %12 : !llvm.ptr -> i64
    %269 = arith.cmpi ult, %268, %c3_i64_119 : i64
    scf.if %269 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %268, %c3_i64_119 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %267, %2 : i32, !llvm.ptr
    %c3_i64_120 = arith.constant 3 : i64
    %270 = llvm.load %12 : !llvm.ptr -> i64
    %271 = arith.cmpi ult, %270, %c3_i64_120 : i64
    scf.if %271 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %270, %c3_i64_120 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %272 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i64_121 = arith.constant 1 : i64
    %273 = llvm.load %12 : !llvm.ptr -> i64
    %274 = arith.cmpi ult, %273, %c1_i64_121 : i64
    scf.if %274 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %273, %c1_i64_121 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c-4_i32_122 = arith.constant -4 : i32
    %c3_i64_123 = arith.constant 3 : i64
    %275 = llvm.load %12 : !llvm.ptr -> i64
    %276 = arith.cmpi ult, %275, %c3_i64_123 : i64
    scf.if %276 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %275, %c3_i64_123 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %277 = arith.andi %272, %c-4_i32_122 : i32
    %c3_i64_124 = arith.constant 3 : i64
    %278 = llvm.load %12 : !llvm.ptr -> i64
    %279 = arith.cmpi ult, %278, %c3_i64_124 : i64
    scf.if %279 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %278, %c3_i64_124 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %277, %10 : i32, !llvm.ptr
    %c1_i64_125 = arith.constant 1 : i64
    %280 = llvm.load %12 : !llvm.ptr -> i64
    %281 = arith.cmpi ult, %280, %c1_i64_125 : i64
    scf.if %281 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %280, %c1_i64_125 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c4_i32 = arith.constant 4 : i32
    %c3_i64_126 = arith.constant 3 : i64
    %282 = llvm.load %12 : !llvm.ptr -> i64
    %283 = arith.cmpi ult, %282, %c3_i64_126 : i64
    scf.if %283 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %282, %c3_i64_126 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %284 = arith.addi %277, %c4_i32 : i32
    %c3_i64_127 = arith.constant 3 : i64
    %285 = llvm.load %12 : !llvm.ptr -> i64
    %286 = arith.cmpi ult, %285, %c3_i64_127 : i64
    scf.if %286 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %285, %c3_i64_127 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %284, %1 : i32, !llvm.ptr
    %c1_i64_128 = arith.constant 1 : i64
    %287 = llvm.load %12 : !llvm.ptr -> i64
    %288 = arith.cmpi ult, %287, %c1_i64_128 : i64
    scf.if %288 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %287, %c1_i64_128 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_129 = arith.constant 0 : i32
    %c3_i64_130 = arith.constant 3 : i64
    %289 = llvm.load %12 : !llvm.ptr -> i64
    %290 = arith.cmpi ult, %289, %c3_i64_130 : i64
    scf.if %290 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %289, %c3_i64_130 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %291 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_131 = arith.constant 3 : i64
    %292 = llvm.load %12 : !llvm.ptr -> i64
    %293 = arith.cmpi ult, %292, %c3_i64_131 : i64
    scf.if %293 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %292, %c3_i64_131 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %294 = arith.subi %c0_i32_129, %291 : i32
    %c1_i64_132 = arith.constant 1 : i64
    %295 = llvm.load %12 : !llvm.ptr -> i64
    %296 = arith.cmpi ult, %295, %c1_i64_132 : i64
    scf.if %296 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %295, %c1_i64_132 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c24_i32_133 = arith.constant 24 : i32
    %c3_i64_134 = arith.constant 3 : i64
    %297 = llvm.load %12 : !llvm.ptr -> i64
    %298 = arith.cmpi ult, %297, %c3_i64_134 : i64
    scf.if %298 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %297, %c3_i64_134 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %299 = arith.andi %294, %c24_i32_133 : i32
    %c3_i64_135 = arith.constant 3 : i64
    %300 = llvm.load %12 : !llvm.ptr -> i64
    %301 = arith.cmpi ult, %300, %c3_i64_135 : i64
    scf.if %301 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %300, %c3_i64_135 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %299, %4 : i32, !llvm.ptr
    %c3_i64_136 = arith.constant 3 : i64
    %302 = llvm.load %12 : !llvm.ptr -> i64
    %303 = arith.cmpi ult, %302, %c3_i64_136 : i64
    scf.if %303 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %302, %c3_i64_136 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %304 = llvm.load %10 : !llvm.ptr -> i32
    %c3_i64_137 = arith.constant 3 : i64
    %305 = llvm.load %12 : !llvm.ptr -> i64
    %306 = arith.cmpi ult, %305, %c3_i64_137 : i64
    scf.if %306 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %305, %c3_i64_137 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i64_138 = arith.constant 0 : i64
    %307 = arith.extui %304 : i32 to i64
    %308 = arith.addi %307, %c0_i64_138 : i64
    %309 = llvm.getelementptr %15[%308] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %310 = llvm.load volatile %309 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_139 = arith.constant 3 : i64
    %311 = llvm.load %12 : !llvm.ptr -> i64
    %312 = arith.cmpi ult, %311, %c3_i64_139 : i64
    scf.if %312 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %311, %c3_i64_139 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %310, %6 : i32, !llvm.ptr
    %c1_i64_140 = arith.constant 1 : i64
    %313 = llvm.load %12 : !llvm.ptr -> i64
    %314 = arith.cmpi ult, %313, %c1_i64_140 : i64
    scf.if %314 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %313, %c1_i64_140 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb16
  ^bb15:  // no predecessors
    %c1_i64_141 = arith.constant 1 : i64
    %315 = llvm.load %12 : !llvm.ptr -> i64
    %316 = arith.cmpi ult, %315, %c1_i64_141 : i64
    scf.if %316 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %315, %c1_i64_141 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb12
  ^bb16:  // 2 preds: ^bb14, ^bb16
    %c3_i64_142 = arith.constant 3 : i64
    %317 = llvm.load %12 : !llvm.ptr -> i64
    %318 = arith.cmpi ult, %317, %c3_i64_142 : i64
    scf.if %318 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %317, %c3_i64_142 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %319 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_143 = arith.constant 3 : i64
    %320 = llvm.load %12 : !llvm.ptr -> i64
    %321 = arith.cmpi ult, %320, %c3_i64_143 : i64
    scf.if %321 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %320, %c3_i64_143 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %322 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i64_144 = arith.constant 3 : i64
    %323 = llvm.load %12 : !llvm.ptr -> i64
    %324 = arith.cmpi ult, %323, %c3_i64_144 : i64
    scf.if %324 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %323, %c3_i64_144 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %325 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_145 = arith.constant 3 : i64
    %326 = llvm.load %12 : !llvm.ptr -> i64
    %327 = arith.cmpi ult, %326, %c3_i64_145 : i64
    scf.if %327 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %326, %c3_i64_145 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c31_i32_146 = arith.constant 31 : i32
    %328 = arith.cmpi ule, %325, %c31_i32_146 : i32
    %329 = scf.if %328 -> (i32) {
      %517 = arith.shrui %322, %325 : i32
      scf.yield %517 : i32
    } else {
      %c0_i32_226 = arith.constant 0 : i32
      scf.yield %c0_i32_226 : i32
    }
    %c3_i64_147 = arith.constant 3 : i64
    %330 = llvm.load %12 : !llvm.ptr -> i64
    %331 = arith.cmpi ult, %330, %c3_i64_147 : i64
    scf.if %331 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %330, %c3_i64_147 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %332 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_148 = arith.constant 3 : i64
    %333 = llvm.load %12 : !llvm.ptr -> i64
    %334 = arith.cmpi ult, %333, %c3_i64_148 : i64
    scf.if %334 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %333, %c3_i64_148 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i64_149 = arith.constant 0 : i64
    %335 = arith.extui %332 : i32 to i64
    %336 = arith.addi %335, %c0_i64_149 : i64
    %337 = llvm.getelementptr %15[%336] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %338 = llvm.load volatile %337 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_150 = arith.constant 3 : i64
    %339 = llvm.load %12 : !llvm.ptr -> i64
    %340 = arith.cmpi ult, %339, %c3_i64_150 : i64
    scf.if %340 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %339, %c3_i64_150 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %338, %6 : i32, !llvm.ptr
    %c3_i64_151 = arith.constant 3 : i64
    %341 = llvm.load %12 : !llvm.ptr -> i64
    %342 = arith.cmpi ult, %341, %c3_i64_151 : i64
    scf.if %342 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %341, %c3_i64_151 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %343 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_152 = arith.constant 3 : i64
    %344 = llvm.load %12 : !llvm.ptr -> i64
    %345 = arith.cmpi ult, %344, %c3_i64_152 : i64
    scf.if %345 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %344, %c3_i64_152 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c31_i32_153 = arith.constant 31 : i32
    %346 = arith.cmpi ule, %343, %c31_i32_153 : i32
    %347 = scf.if %346 -> (i32) {
      %517 = arith.shli %338, %343 : i32
      scf.yield %517 : i32
    } else {
      %c0_i32_226 = arith.constant 0 : i32
      scf.yield %c0_i32_226 : i32
    }
    %c3_i64_154 = arith.constant 3 : i64
    %348 = llvm.load %12 : !llvm.ptr -> i64
    %349 = arith.cmpi ult, %348, %c3_i64_154 : i64
    scf.if %349 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %348, %c3_i64_154 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %350 = arith.ori %329, %347 : i32
    %c3_i64_155 = arith.constant 3 : i64
    %351 = llvm.load %12 : !llvm.ptr -> i64
    %352 = arith.cmpi ult, %351, %c3_i64_155 : i64
    scf.if %352 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %351, %c3_i64_155 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i64_156 = arith.constant 0 : i64
    %353 = arith.extui %319 : i32 to i64
    %354 = arith.addi %353, %c0_i64_156 : i64
    %355 = llvm.getelementptr %15[%354] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %350, %355 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_157 = arith.constant 3 : i64
    %356 = llvm.load %12 : !llvm.ptr -> i64
    %357 = arith.cmpi ult, %356, %c3_i64_157 : i64
    scf.if %357 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %356, %c3_i64_157 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %358 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_158 = arith.constant 1 : i64
    %359 = llvm.load %12 : !llvm.ptr -> i64
    %360 = arith.cmpi ult, %359, %c1_i64_158 : i64
    scf.if %360 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %359, %c1_i64_158 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c4_i32_159 = arith.constant 4 : i32
    %c3_i64_160 = arith.constant 3 : i64
    %361 = llvm.load %12 : !llvm.ptr -> i64
    %362 = arith.cmpi ult, %361, %c3_i64_160 : i64
    scf.if %362 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %361, %c3_i64_160 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %363 = arith.addi %358, %c4_i32_159 : i32
    %c3_i64_161 = arith.constant 3 : i64
    %364 = llvm.load %12 : !llvm.ptr -> i64
    %365 = arith.cmpi ult, %364, %c3_i64_161 : i64
    scf.if %365 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %364, %c3_i64_161 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %363, %1 : i32, !llvm.ptr
    %c3_i64_162 = arith.constant 3 : i64
    %366 = llvm.load %12 : !llvm.ptr -> i64
    %367 = arith.cmpi ult, %366, %c3_i64_162 : i64
    scf.if %367 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %366, %c3_i64_162 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %368 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_163 = arith.constant 1 : i64
    %369 = llvm.load %12 : !llvm.ptr -> i64
    %370 = arith.cmpi ult, %369, %c1_i64_163 : i64
    scf.if %370 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %369, %c1_i64_163 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c4_i32_164 = arith.constant 4 : i32
    %c3_i64_165 = arith.constant 3 : i64
    %371 = llvm.load %12 : !llvm.ptr -> i64
    %372 = arith.cmpi ult, %371, %c3_i64_165 : i64
    scf.if %372 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %371, %c3_i64_165 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %373 = arith.addi %368, %c4_i32_164 : i32
    %c3_i64_166 = arith.constant 3 : i64
    %374 = llvm.load %12 : !llvm.ptr -> i64
    %375 = arith.cmpi ult, %374, %c3_i64_166 : i64
    scf.if %375 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %374, %c3_i64_166 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %373, %5 : i32, !llvm.ptr
    %c3_i64_167 = arith.constant 3 : i64
    %376 = llvm.load %12 : !llvm.ptr -> i64
    %377 = arith.cmpi ult, %376, %c3_i64_167 : i64
    scf.if %377 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %376, %c3_i64_167 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %378 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_168 = arith.constant 3 : i64
    %379 = llvm.load %12 : !llvm.ptr -> i64
    %380 = arith.cmpi ult, %379, %c3_i64_168 : i64
    scf.if %380 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %379, %c3_i64_168 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %381 = arith.cmpi ult, %373, %378 : i32
    %382 = arith.extui %381 : i1 to i32
    %c1_i64_169 = arith.constant 1 : i64
    %383 = llvm.load %12 : !llvm.ptr -> i64
    %384 = arith.cmpi ult, %383, %c1_i64_169 : i64
    scf.if %384 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %383, %c1_i64_169 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_170 = arith.constant 0 : i32
    %385 = arith.cmpi ne, %382, %c0_i32_170 : i32
    cf.cond_br %385, ^bb16, ^bb17
  ^bb17:  // pred: ^bb16
    %c1_i64_171 = arith.constant 1 : i64
    %386 = llvm.load %12 : !llvm.ptr -> i64
    %387 = arith.cmpi ult, %386, %c1_i64_171 : i64
    scf.if %387 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %386, %c1_i64_171 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb11
  ^bb18:  // pred: ^bb12
    %c3_i64_172 = arith.constant 3 : i64
    %388 = llvm.load %12 : !llvm.ptr -> i64
    %389 = arith.cmpi ult, %388, %c3_i64_172 : i64
    scf.if %389 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %388, %c3_i64_172 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %390 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i64_173 = arith.constant 3 : i64
    %391 = llvm.load %12 : !llvm.ptr -> i64
    %392 = arith.cmpi ult, %391, %c3_i64_173 : i64
    scf.if %392 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %391, %c3_i64_173 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %390, %1 : i32, !llvm.ptr
    %c1_i64_174 = arith.constant 1 : i64
    %393 = llvm.load %12 : !llvm.ptr -> i64
    %394 = arith.cmpi ult, %393, %c1_i64_174 : i64
    scf.if %394 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %393, %c1_i64_174 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb20
  ^bb19:  // pred: ^bb21
    %c1_i64_175 = arith.constant 1 : i64
    %395 = llvm.load %12 : !llvm.ptr -> i64
    %396 = arith.cmpi ult, %395, %c1_i64_175 : i64
    scf.if %396 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %395, %c1_i64_175 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb11
  ^bb20:  // 2 preds: ^bb18, ^bb20
    %c3_i64_176 = arith.constant 3 : i64
    %397 = llvm.load %12 : !llvm.ptr -> i64
    %398 = arith.cmpi ult, %397, %c3_i64_176 : i64
    scf.if %398 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %397, %c3_i64_176 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %399 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_177 = arith.constant 3 : i64
    %400 = llvm.load %12 : !llvm.ptr -> i64
    %401 = arith.cmpi ult, %400, %c3_i64_177 : i64
    scf.if %401 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %400, %c3_i64_177 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %402 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_178 = arith.constant 3 : i64
    %403 = llvm.load %12 : !llvm.ptr -> i64
    %404 = arith.cmpi ult, %403, %c3_i64_178 : i64
    scf.if %404 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %403, %c3_i64_178 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i64_179 = arith.constant 0 : i64
    %405 = arith.extui %402 : i32 to i64
    %406 = arith.addi %405, %c0_i64_179 : i64
    %407 = llvm.getelementptr %15[%406] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %408 = llvm.load volatile %407 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i64_180 = arith.constant 3 : i64
    %409 = llvm.load %12 : !llvm.ptr -> i64
    %410 = arith.cmpi ult, %409, %c3_i64_180 : i64
    scf.if %410 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %409, %c3_i64_180 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i64_181 = arith.constant 0 : i64
    %411 = arith.extui %399 : i32 to i64
    %412 = arith.addi %411, %c0_i64_181 : i64
    %413 = llvm.getelementptr %15[%412] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %408, %413 {alignment = 1 : i64} : i32, !llvm.ptr
    %c3_i64_182 = arith.constant 3 : i64
    %414 = llvm.load %12 : !llvm.ptr -> i64
    %415 = arith.cmpi ult, %414, %c3_i64_182 : i64
    scf.if %415 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %414, %c3_i64_182 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %416 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_183 = arith.constant 1 : i64
    %417 = llvm.load %12 : !llvm.ptr -> i64
    %418 = arith.cmpi ult, %417, %c1_i64_183 : i64
    scf.if %418 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %417, %c1_i64_183 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c4_i32_184 = arith.constant 4 : i32
    %c3_i64_185 = arith.constant 3 : i64
    %419 = llvm.load %12 : !llvm.ptr -> i64
    %420 = arith.cmpi ult, %419, %c3_i64_185 : i64
    scf.if %420 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %419, %c3_i64_185 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %421 = arith.addi %416, %c4_i32_184 : i32
    %c3_i64_186 = arith.constant 3 : i64
    %422 = llvm.load %12 : !llvm.ptr -> i64
    %423 = arith.cmpi ult, %422, %c3_i64_186 : i64
    scf.if %423 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %422, %c3_i64_186 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %421, %1 : i32, !llvm.ptr
    %c3_i64_187 = arith.constant 3 : i64
    %424 = llvm.load %12 : !llvm.ptr -> i64
    %425 = arith.cmpi ult, %424, %c3_i64_187 : i64
    scf.if %425 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %424, %c3_i64_187 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %426 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_188 = arith.constant 1 : i64
    %427 = llvm.load %12 : !llvm.ptr -> i64
    %428 = arith.cmpi ult, %427, %c1_i64_188 : i64
    scf.if %428 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %427, %c1_i64_188 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c4_i32_189 = arith.constant 4 : i32
    %c3_i64_190 = arith.constant 3 : i64
    %429 = llvm.load %12 : !llvm.ptr -> i64
    %430 = arith.cmpi ult, %429, %c3_i64_190 : i64
    scf.if %430 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %429, %c3_i64_190 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %431 = arith.addi %426, %c4_i32_189 : i32
    %c3_i64_191 = arith.constant 3 : i64
    %432 = llvm.load %12 : !llvm.ptr -> i64
    %433 = arith.cmpi ult, %432, %c3_i64_191 : i64
    scf.if %433 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %432, %c3_i64_191 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %431, %5 : i32, !llvm.ptr
    %c3_i64_192 = arith.constant 3 : i64
    %434 = llvm.load %12 : !llvm.ptr -> i64
    %435 = arith.cmpi ult, %434, %c3_i64_192 : i64
    scf.if %435 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %434, %c3_i64_192 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %436 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_193 = arith.constant 3 : i64
    %437 = llvm.load %12 : !llvm.ptr -> i64
    %438 = arith.cmpi ult, %437, %c3_i64_193 : i64
    scf.if %438 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %437, %c3_i64_193 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %439 = arith.cmpi ult, %431, %436 : i32
    %440 = arith.extui %439 : i1 to i32
    %c1_i64_194 = arith.constant 1 : i64
    %441 = llvm.load %12 : !llvm.ptr -> i64
    %442 = arith.cmpi ult, %441, %c1_i64_194 : i64
    scf.if %442 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %441, %c1_i64_194 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_195 = arith.constant 0 : i32
    %443 = arith.cmpi ne, %440, %c0_i32_195 : i32
    cf.cond_br %443, ^bb20, ^bb21
  ^bb21:  // pred: ^bb20
    %c1_i64_196 = arith.constant 1 : i64
    %444 = llvm.load %12 : !llvm.ptr -> i64
    %445 = arith.cmpi ult, %444, %c1_i64_196 : i64
    scf.if %445 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %444, %c1_i64_196 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb19
  ^bb22:  // 2 preds: ^bb3, ^bb24
    %c3_i64_197 = arith.constant 3 : i64
    %446 = llvm.load %12 : !llvm.ptr -> i64
    %447 = arith.cmpi ult, %446, %c3_i64_197 : i64
    scf.if %447 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %446, %c3_i64_197 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %448 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_198 = arith.constant 1 : i64
    %449 = llvm.load %12 : !llvm.ptr -> i64
    %450 = arith.cmpi ult, %449, %c1_i64_198 : i64
    scf.if %450 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %449, %c1_i64_198 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb2(%448 : i32)
  ^bb23:  // pred: ^bb3
    %c3_i64_199 = arith.constant 3 : i64
    %451 = llvm.load %12 : !llvm.ptr -> i64
    %452 = arith.cmpi ult, %451, %c3_i64_199 : i64
    scf.if %452 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %451, %c3_i64_199 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %453 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_200 = arith.constant 3 : i64
    %454 = llvm.load %12 : !llvm.ptr -> i64
    %455 = arith.cmpi ult, %454, %c3_i64_200 : i64
    scf.if %455 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %454, %c3_i64_200 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %456 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_201 = arith.constant 3 : i64
    %457 = llvm.load %12 : !llvm.ptr -> i64
    %458 = arith.cmpi ult, %457, %c3_i64_201 : i64
    scf.if %458 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %457, %c3_i64_201 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %459 = arith.addi %453, %456 : i32
    %c3_i64_202 = arith.constant 3 : i64
    %460 = llvm.load %12 : !llvm.ptr -> i64
    %461 = arith.cmpi ult, %460, %c3_i64_202 : i64
    scf.if %461 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %460, %c3_i64_202 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %459, %5 : i32, !llvm.ptr
    %c1_i64_203 = arith.constant 1 : i64
    %462 = llvm.load %12 : !llvm.ptr -> i64
    %463 = arith.cmpi ult, %462, %c1_i64_203 : i64
    scf.if %463 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %462, %c1_i64_203 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb25
  ^bb24:  // pred: ^bb26
    %c1_i64_204 = arith.constant 1 : i64
    %464 = llvm.load %12 : !llvm.ptr -> i64
    %465 = arith.cmpi ult, %464, %c1_i64_204 : i64
    scf.if %465 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %464, %c1_i64_204 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb22
  ^bb25:  // 2 preds: ^bb23, ^bb25
    %c3_i64_205 = arith.constant 3 : i64
    %466 = llvm.load %12 : !llvm.ptr -> i64
    %467 = arith.cmpi ult, %466, %c3_i64_205 : i64
    scf.if %467 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %466, %c3_i64_205 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %468 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_206 = arith.constant 3 : i64
    %469 = llvm.load %12 : !llvm.ptr -> i64
    %470 = arith.cmpi ult, %469, %c3_i64_206 : i64
    scf.if %470 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %469, %c3_i64_206 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %471 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_207 = arith.constant 3 : i64
    %472 = llvm.load %12 : !llvm.ptr -> i64
    %473 = arith.cmpi ult, %472, %c3_i64_207 : i64
    scf.if %473 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %472, %c3_i64_207 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i64_208 = arith.constant 0 : i64
    %474 = arith.extui %471 : i32 to i64
    %475 = arith.addi %474, %c0_i64_208 : i64
    %476 = llvm.getelementptr %15[%475] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %477 = llvm.load volatile %476 {alignment = 1 : i64} : !llvm.ptr -> i8
    %478 = arith.extui %477 : i8 to i32
    %c3_i64_209 = arith.constant 3 : i64
    %479 = llvm.load %12 : !llvm.ptr -> i64
    %480 = arith.cmpi ult, %479, %c3_i64_209 : i64
    scf.if %480 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %479, %c3_i64_209 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i64_210 = arith.constant 0 : i64
    %481 = arith.extui %468 : i32 to i64
    %482 = arith.addi %481, %c0_i64_210 : i64
    %483 = llvm.getelementptr %15[%482] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %484 = arith.trunci %478 : i32 to i8
    llvm.store volatile %484, %483 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i64_211 = arith.constant 3 : i64
    %485 = llvm.load %12 : !llvm.ptr -> i64
    %486 = arith.cmpi ult, %485, %c3_i64_211 : i64
    scf.if %486 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %485, %c3_i64_211 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %487 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64_212 = arith.constant 1 : i64
    %488 = llvm.load %12 : !llvm.ptr -> i64
    %489 = arith.cmpi ult, %488, %c1_i64_212 : i64
    scf.if %489 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %488, %c1_i64_212 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c1_i32_213 = arith.constant 1 : i32
    %c3_i64_214 = arith.constant 3 : i64
    %490 = llvm.load %12 : !llvm.ptr -> i64
    %491 = arith.cmpi ult, %490, %c3_i64_214 : i64
    scf.if %491 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %490, %c3_i64_214 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %492 = arith.addi %487, %c1_i32_213 : i32
    %c3_i64_215 = arith.constant 3 : i64
    %493 = llvm.load %12 : !llvm.ptr -> i64
    %494 = arith.cmpi ult, %493, %c3_i64_215 : i64
    scf.if %494 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %493, %c3_i64_215 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %492, %1 : i32, !llvm.ptr
    %c3_i64_216 = arith.constant 3 : i64
    %495 = llvm.load %12 : !llvm.ptr -> i64
    %496 = arith.cmpi ult, %495, %c3_i64_216 : i64
    scf.if %496 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %495, %c3_i64_216 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %497 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_217 = arith.constant 1 : i64
    %498 = llvm.load %12 : !llvm.ptr -> i64
    %499 = arith.cmpi ult, %498, %c1_i64_217 : i64
    scf.if %499 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %498, %c1_i64_217 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c1_i32_218 = arith.constant 1 : i32
    %c3_i64_219 = arith.constant 3 : i64
    %500 = llvm.load %12 : !llvm.ptr -> i64
    %501 = arith.cmpi ult, %500, %c3_i64_219 : i64
    scf.if %501 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %500, %c3_i64_219 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %502 = arith.addi %497, %c1_i32_218 : i32
    %c3_i64_220 = arith.constant 3 : i64
    %503 = llvm.load %12 : !llvm.ptr -> i64
    %504 = arith.cmpi ult, %503, %c3_i64_220 : i64
    scf.if %504 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %503, %c3_i64_220 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    llvm.store %502, %3 : i32, !llvm.ptr
    %c3_i64_221 = arith.constant 3 : i64
    %505 = llvm.load %12 : !llvm.ptr -> i64
    %506 = arith.cmpi ult, %505, %c3_i64_221 : i64
    scf.if %506 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %505, %c3_i64_221 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %507 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64_222 = arith.constant 3 : i64
    %508 = llvm.load %12 : !llvm.ptr -> i64
    %509 = arith.cmpi ult, %508, %c3_i64_222 : i64
    scf.if %509 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %508, %c3_i64_222 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %510 = arith.cmpi ult, %502, %507 : i32
    %511 = arith.extui %510 : i1 to i32
    %c1_i64_223 = arith.constant 1 : i64
    %512 = llvm.load %12 : !llvm.ptr -> i64
    %513 = arith.cmpi ult, %512, %c1_i64_223 : i64
    scf.if %513 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %512, %c1_i64_223 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    %c0_i32_224 = arith.constant 0 : i32
    %514 = arith.cmpi ne, %511, %c0_i32_224 : i32
    cf.cond_br %514, ^bb25, ^bb26
  ^bb26:  // pred: ^bb25
    %c1_i64_225 = arith.constant 1 : i64
    %515 = llvm.load %12 : !llvm.ptr -> i64
    %516 = arith.cmpi ult, %515, %c1_i64_225 : i64
    scf.if %516 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %517 = arith.subi %515, %c1_i64_225 : i64
      llvm.store %517, %12 : i64, !llvm.ptr
    }
    cf.br ^bb24
  }
  func.func @f77(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_2 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %3, %4 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %5 = llvm.load %4 : !llvm.ptr -> i64
    %6 = arith.cmpi ult, %5, %c3_i64 : i64
    scf.if %6 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %20 = arith.subi %5, %c3_i64 : i64
      llvm.store %20, %4 : i64, !llvm.ptr
    }
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i64_3 = arith.constant 3 : i64
    %8 = llvm.load %4 : !llvm.ptr -> i64
    %9 = arith.cmpi ult, %8, %c3_i64_3 : i64
    scf.if %9 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %20 = arith.subi %8, %c3_i64_3 : i64
      llvm.store %20, %4 : i64, !llvm.ptr
    }
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_4 = arith.constant 3 : i64
    %11 = llvm.load %4 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c3_i64_4 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %20 = arith.subi %11, %c3_i64_4 : i64
      llvm.store %20, %4 : i64, !llvm.ptr
    }
    %13 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i64 = arith.constant 6 : i64
    %14 = llvm.load %4 : !llvm.ptr -> i64
    %15 = arith.cmpi ult, %14, %c6_i64 : i64
    scf.if %15 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %20 = arith.subi %14, %c6_i64 : i64
      llvm.store %20, %4 : i64, !llvm.ptr
    }
    %16 = call @f76(%arg0, %7, %10, %13) : (!llvm.ptr, i32, i32, i32) -> i32
    %c1_i64 = arith.constant 1 : i64
    %17 = llvm.load %4 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c1_i64 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %20 = arith.subi %17, %c1_i64 : i64
      llvm.store %20, %4 : i64, !llvm.ptr
    }
    cf.br ^bb2(%16 : i32)
  ^bb2(%19: i32):  // pred: ^bb1
    return %19 : i32
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
