---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @dummy(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f1(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1:  // pred: ^bb13
    return
  ^bb2:  // pred: ^bb0
    cf.br ^bb4
  ^bb3:  // pred: ^bb0
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32_0 : i32
    cf.cond_br %4, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    cf.br ^bb7
  ^bb6:  // pred: ^bb4
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32_1 : i32
    cf.cond_br %6, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    cf.br ^bb10
  ^bb9:  // pred: ^bb7
    cf.br ^bb10
  ^bb10:  // 2 preds: ^bb8, ^bb9
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %8 = arith.cmpi ne, %7, %c0_i32_2 : i32
    cf.cond_br %8, ^bb11, ^bb12
  ^bb11:  // pred: ^bb10
    cf.br ^bb13
  ^bb12:  // pred: ^bb10
    cf.br ^bb13
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cf.br ^bb1
  }
  func.func @f2(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb10
    return %3 : i32
  ^bb2:  // pred: ^bb0
    cf.br ^bb4
  ^bb3:  // pred: ^bb0
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4, %c0_i32_0 : i32
    cf.cond_br %5, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    cf.br ^bb7
  ^bb6:  // pred: ^bb4
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %7 = arith.cmpi ne, %6, %c0_i32_1 : i32
    cf.cond_br %7, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %c7_i32 = arith.constant 7 : i32
    cf.br ^bb10(%c7_i32 : i32)
  ^bb9:  // pred: ^bb7
    %c8_i32 = arith.constant 8 : i32
    cf.br ^bb10(%c8_i32 : i32)
  ^bb10(%8: i32):  // 2 preds: ^bb8, ^bb9
    cf.br ^bb1(%8 : i32)
  }
  func.func @f3(%arg0: !llvm.ptr, %arg1: i32) -> (i32, i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32, %4: i32):  // pred: ^bb13
    return %3, %4 : i32, i32
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb4
  ^bb3:  // pred: ^bb0
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32_0 : i32
    cf.cond_br %6, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    cf.br ^bb7
  ^bb6:  // pred: ^bb4
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %8 = arith.cmpi ne, %7, %c0_i32_1 : i32
    cf.cond_br %8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb10(%c8_i32 : i32)
  ^bb9:  // pred: ^bb7
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb10(%c9_i32 : i32)
  ^bb10(%9: i32):  // 2 preds: ^bb8, ^bb9
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_2 : i32
    cf.cond_br %11, ^bb11, ^bb12
  ^bb11:  // pred: ^bb10
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c2_i64 = arith.constant 2 : i64
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb13(%c1_i32, %c2_i64, %c3_i32 : i32, i64, i32)
  ^bb12:  // pred: ^bb10
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c-1_i32 = arith.constant -1 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c-2_i64 = arith.constant -2 : i64
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c-3_i32 = arith.constant -3 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb13(%c-1_i32, %c-2_i64, %c-3_i32 : i32, i64, i32)
  ^bb13(%12: i32, %13: i64, %14: i32):  // 2 preds: ^bb11, ^bb12
    cf.br ^bb1(%9, %12 : i32, i32)
  }
  func.func @f4(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb2, ^bb3
  ^bb1(%4: i32):  // pred: ^bb4
    return %4 : i32
  ^bb2:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32_1 : i32
    cf.cond_br %6, ^bb5, ^bb6
  ^bb3:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %8 = arith.cmpi ne, %7, %c0_i32_2 : i32
    cf.cond_br %8, ^bb16, ^bb17
  ^bb4(%9: i32):  // 2 preds: ^bb15, ^bb26
    cf.br ^bb1(%9 : i32)
  ^bb5:  // pred: ^bb2
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb8
  ^bb6:  // pred: ^bb2
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_3 : i32
    cf.cond_br %11, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    cf.br ^bb7
  ^bb9:  // pred: ^bb7
    cf.br ^bb11
  ^bb10:  // pred: ^bb7
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb12
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_4 : i32
    cf.cond_br %13, ^bb13, ^bb14
  ^bb12:  // pred: ^bb10
    cf.br ^bb11
  ^bb13:  // pred: ^bb11
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb15(%c9_i32 : i32)
  ^bb14:  // pred: ^bb11
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c10_i32 = arith.constant 10 : i32
    cf.br ^bb15(%c10_i32 : i32)
  ^bb15(%14: i32):  // 2 preds: ^bb13, ^bb14
    cf.br ^bb4(%14 : i32)
  ^bb16:  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb19
  ^bb17:  // pred: ^bb3
    cf.br ^bb18
  ^bb18:  // 2 preds: ^bb17, ^bb19
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_5 : i32
    cf.cond_br %16, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    cf.br ^bb18
  ^bb20:  // pred: ^bb18
    cf.br ^bb22
  ^bb21:  // pred: ^bb18
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb23
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %18 = arith.cmpi ne, %17, %c0_i32_6 : i32
    cf.cond_br %18, ^bb24, ^bb25
  ^bb23:  // pred: ^bb21
    cf.br ^bb22
  ^bb24:  // pred: ^bb22
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c10_i32_7 = arith.constant 10 : i32
    cf.br ^bb26(%c10_i32_7 : i32)
  ^bb25:  // pred: ^bb22
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c11_i32 = arith.constant 11 : i32
    cf.br ^bb26(%c11_i32 : i32)
  ^bb26(%19: i32):  // 2 preds: ^bb24, ^bb25
    cf.br ^bb4(%19 : i32)
  }
  func.func @f5(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %5 = "wasm.select"(%4, %c2_i32, %c3_i32) : (i32, i32, i32) -> i32
    cf.br ^bb1(%5 : i32)
  }
  func.func @f6(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    %c3_i32 = arith.constant 3 : i32
    %5 = "wasm.select"(%c2_i32, %4, %c3_i32) : (i32, i32, i32) -> i32
    cf.br ^bb1(%5 : i32)
  }
  func.func @f7(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    %5 = "wasm.select"(%c2_i32, %c3_i32, %4) : (i32, i32, i32) -> i32
    cf.br ^bb1(%5 : i32)
  }
  func.func @f8(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // pred: ^bb6
    cf.br ^bb1(%2 : i32)
  ^bb3:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    cf.cond_br %4, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb6(%c1_i32 : i32)
  ^bb5:  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb6(%c0_i32_0 : i32)
  ^bb6(%5: i32):  // 2 preds: ^bb4, ^bb5
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2(%5 : i32)
  }
  func.func @f9(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // pred: ^bb6
    cf.br ^bb1(%2 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    cf.cond_br %4, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb6(%c1_i32 : i32)
  ^bb5:  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb6(%c0_i32_0 : i32)
  ^bb6(%5: i32):  // 2 preds: ^bb4, ^bb5
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2(%5 : i32)
  }
  func.func @f10(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // pred: ^bb6
    cf.br ^bb1(%2 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    cf.cond_br %4, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb6(%c1_i32 : i32)
  ^bb5:  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb6(%c0_i32_0 : i32)
  ^bb6(%5: i32):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb2(%5 : i32)
  }
  func.func @f11(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb7
    return %3 : i32
  ^bb2:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    %c0_i32_1 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4, %c0_i32_1 : i32
    cf.cond_br %5, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb7(%c2_i32 : i32)
  ^bb6:  // pred: ^bb4
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb7(%c3_i32 : i32)
  ^bb7(%6: i32):  // 2 preds: ^bb5, ^bb6
    cf.br ^bb1(%6 : i32)
  }
  func.func @f12(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb1(%3: i32):  // 2 preds: ^bb2, ^bb6
    return %3 : i32
  ^bb2(%4: i32):  // pred: ^bb5
    cf.br ^bb1(%4 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb4:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32_0 : i32)
  ^bb5(%5: i32):  // 2 preds: ^bb3, ^bb4
    %c2_i32 = arith.constant 2 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c2_i32, %c0_i32_1 : i32
    cf.cond_br %6, ^bb2(%5 : i32), ^bb6(%5 : i32)
  ^bb6(%7: i32):  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb1(%c3_i32 : i32)
  }
  func.func @f13(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb1(%3: i32):  // 2 preds: ^bb2, ^bb6
    return %3 : i32
  ^bb2(%4: i32):  // pred: ^bb5
    cf.br ^bb1(%4 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb4:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32_0 : i32)
  ^bb5(%5: i32):  // 2 preds: ^bb3, ^bb4
    %c0_i32_1 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32_1 : i32
    cf.cond_br %6, ^bb2(%c2_i32 : i32), ^bb6(%c2_i32 : i32)
  ^bb6(%7: i32):  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb1(%c3_i32 : i32)
  }
  func.func @f14(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb1(%3: i32):  // pred: ^bb2
    return %3 : i32
  ^bb2(%4: i32):  // 2 preds: ^bb5, ^bb5
    cf.br ^bb1(%4 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb4:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32_0 : i32)
  ^bb5(%5: i32):  // 2 preds: ^bb3, ^bb4
    %c2_i32 = arith.constant 2 : i32
    %c0_i64 = arith.constant 0 : i64
    cf.switch %c2_i32 : i32, [
      default: ^bb2(%5 : i32),
      0: ^bb2(%5 : i32)
    ]
  }
  func.func @f15(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb1(%3: i32):  // pred: ^bb2
    return %3 : i32
  ^bb2(%4: i32):  // 2 preds: ^bb5, ^bb5
    cf.br ^bb1(%4 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb4:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32_0 : i32)
  ^bb5(%5: i32):  // 2 preds: ^bb3, ^bb4
    %c0_i64 = arith.constant 0 : i64
    cf.switch %5 : i32, [
      default: ^bb2(%c2_i32 : i32),
      0: ^bb2(%c2_i32 : i32)
    ]
  }
  func.func @func(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb1(%3: i32):  // pred: ^bb2
    return %3 : i32
  ^bb2(%4: i32):  // pred: ^bb5
    cf.br ^bb1(%4 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb4:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32_0 : i32)
  ^bb5(%5: i32):  // 2 preds: ^bb3, ^bb4
    %c2_i32 = arith.constant 2 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %6 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i32
    %12 = arith.cmpi ult, %c0_i32_1, %11 : i32
    %13 = llvm.getelementptr %10[%c0_i32_1] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %14[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %14[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_2 : i32
    %23 = llvm.call %18(%5, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (i32, i32) -> i32
    cf.br ^bb2(%23 : i32)
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb1(%3: i32):  // pred: ^bb2
    return %3 : i32
  ^bb2(%4: i32):  // pred: ^bb5
    cf.br ^bb1(%4 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb4:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32_0 : i32)
  ^bb5(%5: i32):  // 2 preds: ^bb3, ^bb4
    %c0_i32_1 = arith.constant 0 : i32
    %6 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i32
    %12 = arith.cmpi ult, %c0_i32_1, %11 : i32
    %13 = llvm.getelementptr %10[%c0_i32_1] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %14[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %14[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_2 : i32
    %23 = llvm.call %18(%c2_i32, %5) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (i32, i32) -> i32
    cf.br ^bb2(%23 : i32)
  }
  func.func @f19(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32_0 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb1(%3: i32):  // pred: ^bb2
    return %3 : i32
  ^bb2(%4: i32):  // pred: ^bb5
    cf.br ^bb1(%4 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb4:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_1 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32_1 : i32)
  ^bb5(%5: i32):  // 2 preds: ^bb3, ^bb4
    %6 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i32
    %12 = arith.cmpi ult, %5, %11 : i32
    %13 = llvm.getelementptr %10[%5] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %14[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %14[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %16 : !llvm.ptr -> i32
    %20 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %18 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %22 = arith.cmpi eq, %21, %c0_i32_2 : i32
    %23 = llvm.call %18(%c2_i32, %c0_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (i32, i32) -> i32
    cf.br ^bb2(%23 : i32)
  }
  func.func @f20(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1:  // pred: ^bb4
    return
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%3: i32):  // 2 preds: ^bb2, ^bb3
    %c2_i32 = arith.constant 2 : i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %3 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c2_i32, %9 : i32, !llvm.ptr
    cf.br ^bb1
  }
  func.func @f21(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1:  // pred: ^bb4
    return
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%3: i32):  // 2 preds: ^bb2, ^bb3
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c2_i32 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %3, %9 : i32, !llvm.ptr
    cf.br ^bb1
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    %c0_i32_1 = arith.constant 0 : i32
    %5 = "wasm.mem_grow"(%4, %c0_i32_1) : (i32, i32) -> i32
    cf.br ^bb1(%5 : i32)
  }
  func.func @f(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f24(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    %5 = call @f(%arg0, %4) : (!llvm.ptr, i32) -> i32
    cf.br ^bb1(%5 : i32)
  }
  func.func @f25(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%4 : i32)
  }
  func.func @f26(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1:  // pred: ^bb4
    return
  ^bb2:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%3: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1
  }
  func.func @f27(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb1(%3: i32):  // pred: ^bb2
    return %3 : i32
  ^bb2(%4: i32):  // pred: ^bb5
    cf.br ^bb1(%4 : i32)
  ^bb3:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb4:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32_0 : i32)
  ^bb5(%5: i32):  // 2 preds: ^bb3, ^bb4
    cf.br ^bb2(%5 : i32)
  }
  func.func @f28(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32_1 : i32
    cf.cond_br %3, ^bb2, ^bb3
  ^bb1(%4: i32):  // pred: ^bb4
    return %4 : i32
  ^bb2:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    %c0_i32_2 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_2 : i32)
  ^bb4(%5: i32):  // 2 preds: ^bb2, ^bb3
    llvm.store %5, %0 : i32, !llvm.ptr
    %6 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%6 : i32)
  }
  func.func @f29(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    llvm.store %4, %0 : i32, !llvm.ptr
    cf.br ^bb1(%4 : i32)
  }
  func.func @f30(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    %5 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    llvm.store %4, %6 : i32, !llvm.ptr
    %7 = llvm.load %6 : !llvm.ptr -> i32
    cf.br ^bb1(%7 : i32)
  }
  func.func @f31(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    %c11_i32 = arith.constant 11 : i32
    cf.br ^bb4(%c11_i32 : i32)
  ^bb3:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    cf.br ^bb4(%c10_i32 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> i32
    cf.br ^bb1(%11 : i32)
  }
  func.func @f32(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c13_i32 = arith.constant 13 : i32
    cf.br ^bb4(%c13_i32 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c-13_i32 = arith.constant -13 : i32
    cf.br ^bb4(%c-13_i32 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    %5 = "wasm.ctz"(%4) : (i32) -> i32
    cf.br ^bb1(%5 : i32)
  }
  func.func @f33(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb2, ^bb3
  ^bb1(%4: i32):  // pred: ^bb7
    return %4 : i32
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb4(%c3_i32 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c-3_i32 = arith.constant -3 : i32
    cf.br ^bb4(%c-3_i32 : i32)
  ^bb4(%5: i32):  // 2 preds: ^bb2, ^bb3
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %7 = arith.cmpi ne, %6, %c0_i32_1 : i32
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb7(%c4_i32 : i32)
  ^bb6:  // pred: ^bb4
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c-5_i32 = arith.constant -5 : i32
    cf.br ^bb7(%c-5_i32 : i32)
  ^bb7(%8: i32):  // 2 preds: ^bb5, ^bb6
    %9 = "wasm.mul"(%5, %8) : (i32, i32) -> i32
    cf.br ^bb1(%9 : i32)
  }
  func.func @f34(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c13_i32 = arith.constant 13 : i32
    cf.br ^bb4(%c13_i32 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    %5 = "wasm.eqz"(%4) : (i32) -> i32
    cf.br ^bb1(%5 : i32)
  }
  func.func @f35(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb2, ^bb3
  ^bb1(%4: i32):  // pred: ^bb7
    return %4 : i32
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %cst = arith.constant 1.07793613E+9 : f32
    cf.br ^bb4(%cst : f32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %cst_1 = arith.constant 3.22541978E+9 : f32
    cf.br ^bb4(%cst_1 : f32)
  ^bb4(%5: f32):  // 2 preds: ^bb2, ^bb3
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %7 = arith.cmpi ne, %6, %c0_i32_2 : i32
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %cst_3 = arith.constant 1.08213043E+9 : f32
    cf.br ^bb7(%cst_3 : f32)
  ^bb6:  // pred: ^bb4
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %cst_4 = arith.constant 3.22961408E+9 : f32
    cf.br ^bb7(%cst_4 : f32)
  ^bb7(%8: f32):  // 2 preds: ^bb5, ^bb6
    %9 = "wasm.gt"(%5, %8) : (f32, f32) -> i32
    cf.br ^bb1(%9 : i32)
  }
  func.func @f36(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb4(%c3_i32, %c4_i32 : i32, i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32_0 = arith.constant 3 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c-4_i32 = arith.constant -4 : i32
    cf.br ^bb4(%c3_i32_0, %c-4_i32 : i32, i32)
  ^bb4(%4: i32, %5: i32):  // 2 preds: ^bb2, ^bb3
    %6 = "wasm.mul"(%4, %5) : (i32, i32) -> i32
    cf.br ^bb1(%6 : i32)
  }
  func.func @f37(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %cst = arith.constant 1.07793613E+9 : f32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %cst_0 = arith.constant 1.07793613E+9 : f32
    cf.br ^bb4(%cst, %cst_0 : f32, f32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %cst_1 = arith.constant 3.22122547E+9 : f32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %cst_2 = arith.constant 3.22541978E+9 : f32
    cf.br ^bb4(%cst_1, %cst_2 : f32, f32)
  ^bb4(%4: f32, %5: f32):  // 2 preds: ^bb2, ^bb3
    %6 = "wasm.gt"(%4, %5) : (f32, f32) -> i32
    cf.br ^bb1(%6 : i32)
  }
  func.func @f38(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb4(%c3_i32, %c4_i32 : i32, i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c-3_i32 = arith.constant -3 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c-4_i32 = arith.constant -4 : i32
    cf.br ^bb4(%c-3_i32, %c-4_i32 : i32, i32)
  ^bb4(%4: i32, %5: i32):  // 2 preds: ^bb2, ^bb3
    %c5_i32 = arith.constant 5 : i32
    %6 = "wasm.add"(%5, %c5_i32) : (i32, i32) -> i32
    %7 = "wasm.mul"(%4, %6) : (i32, i32) -> i32
    cf.br ^bb1(%7 : i32)
  }
  func.func @f39(%arg0: !llvm.ptr) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb2, ^bb3
  ^bb1(%1: i32):  // pred: ^bb31
    return %1 : i32
  ^bb2:  // pred: ^bb0
    cf.br ^bb4
  ^bb3:  // pred: ^bb0
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %c1_i32_0, %c0_i32_1 : i32
    cf.cond_br %2, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    cf.br ^bb7
  ^bb6:  // pred: ^bb4
    "wasm.unreachable"() : () -> ()
  ^bb7:  // pred: ^bb5
    %c0_i32_2 = arith.constant 0 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c0_i32_2, %c0_i32_3 : i32
    cf.cond_br %3, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    "wasm.unreachable"() : () -> ()
  ^bb9:  // pred: ^bb7
    cf.br ^bb10
  ^bb10:  // pred: ^bb9
    %c1_i32_4 = arith.constant 1 : i32
    %c0_i32_5 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %c1_i32_4, %c0_i32_5 : i32
    cf.cond_br %4, ^bb11, ^bb12
  ^bb11:  // pred: ^bb10
    %c1_i32_6 = arith.constant 1 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %c1_i32_6, %c0_i32_7 : i32
    cf.cond_br %5, ^bb13, ^bb14
  ^bb12:  // pred: ^bb10
    cf.br ^bb13
  ^bb13:  // 2 preds: ^bb11, ^bb12
    %c1_i32_8 = arith.constant 1 : i32
    %c0_i32_9 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c1_i32_8, %c0_i32_9 : i32
    cf.cond_br %6, ^bb15, ^bb16
  ^bb14:  // pred: ^bb11
    "wasm.unreachable"() : () -> ()
  ^bb15:  // pred: ^bb13
    %c1_i32_10 = arith.constant 1 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %7 = arith.cmpi ne, %c1_i32_10, %c0_i32_11 : i32
    cf.cond_br %7, ^bb17, ^bb18
  ^bb16:  // pred: ^bb13
    "wasm.unreachable"() : () -> ()
  ^bb17:  // pred: ^bb15
    %c0_i32_12 = arith.constant 0 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %8 = arith.cmpi ne, %c0_i32_12, %c0_i32_13 : i32
    cf.cond_br %8, ^bb19, ^bb20
  ^bb18:  // pred: ^bb15
    "wasm.unreachable"() : () -> ()
  ^bb19:  // pred: ^bb17
    "wasm.unreachable"() : () -> ()
  ^bb20:  // pred: ^bb17
    %c1_i32_14 = arith.constant 1 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %c1_i32_14, %c0_i32_15 : i32
    cf.cond_br %9, ^bb21, ^bb22
  ^bb21:  // pred: ^bb20
    %c1_i32_16 = arith.constant 1 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %c1_i32_16, %c0_i32_17 : i32
    cf.cond_br %10, ^bb23, ^bb24
  ^bb22:  // pred: ^bb20
    "wasm.unreachable"() : () -> ()
  ^bb23:  // pred: ^bb21
    %c0_i32_18 = arith.constant 0 : i32
    cf.switch %c0_i32_18 : i32, [
      default: ^bb25
    ]
  ^bb24:  // pred: ^bb21
    cf.br ^bb25
  ^bb25:  // 2 preds: ^bb23, ^bb24
    %c1_i32_19 = arith.constant 1 : i32
    %c0_i32_20 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %c1_i32_19, %c0_i32_20 : i32
    cf.cond_br %11, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %c0_i32_21 = arith.constant 0 : i32
    cf.switch %c0_i32_21 : i32, [
      default: ^bb28
    ]
  ^bb27:  // pred: ^bb25
    "wasm.unreachable"() : () -> ()
  ^bb28:  // pred: ^bb26
    %c0_i32_22 = arith.constant 0 : i32
    %c0_i32_23 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %c0_i32_22, %c0_i32_23 : i32
    cf.cond_br %12, ^bb29, ^bb30
  ^bb29:  // pred: ^bb28
    "wasm.unreachable"() : () -> ()
  ^bb30:  // pred: ^bb28
    %c0_i32_24 = arith.constant 0 : i32
    cf.switch %c0_i32_24 : i32, [
      default: ^bb31
    ]
  ^bb31:  // pred: ^bb30
    %c19_i32 = arith.constant 19 : i32
    cf.br ^bb1(%c19_i32 : i32)
  }
  func.func @f40(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    %c18_i32 = arith.constant 18 : i32
    cf.br ^bb4(%c18_i32 : i32)
  ^bb3:  // pred: ^bb0
    %c21_i32 = arith.constant 21 : i32
    cf.br ^bb4(%c21_i32 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%4 : i32)
  }
  func.func @f41(%arg0: !llvm.ptr, %arg1: i32) -> (i32, i32, i64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32, %4: i32, %5: i64):  // pred: ^bb4
    return %3, %4, %5 : i32, i32, i64
  ^bb2:  // pred: ^bb0
    %c18_i32 = arith.constant 18 : i32
    %c-18_i32 = arith.constant -18 : i32
    %c18_i64 = arith.constant 18 : i64
    cf.br ^bb4(%c18_i32, %c-18_i32, %c18_i64 : i32, i32, i64)
  ^bb3:  // pred: ^bb0
    %c-18_i32_0 = arith.constant -18 : i32
    %c18_i32_1 = arith.constant 18 : i32
    %c-18_i64 = arith.constant -18 : i64
    cf.br ^bb4(%c-18_i32_0, %c18_i32_1, %c-18_i64 : i32, i32, i64)
  ^bb4(%6: i32, %7: i32, %8: i64):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%6, %7, %8 : i32, i32, i64)
  }
  func.func @f42(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2(%c1_i32 : i32), ^bb3(%c1_i32 : i32)
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2(%4: i32):  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %5 = "wasm.add"(%4, %c2_i32) : (i32, i32) -> i32
    cf.br ^bb4(%5 : i32)
  ^bb3(%6: i32):  // pred: ^bb0
    %c-2_i32 = arith.constant -2 : i32
    %7 = "wasm.add"(%6, %c-2_i32) : (i32, i32) -> i32
    cf.br ^bb4(%7 : i32)
  ^bb4(%8: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%8 : i32)
  }
  func.func @f43(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2(%c1_i32, %c2_i32 : i32, i32), ^bb3(%c1_i32, %c2_i32 : i32, i32)
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2(%4: i32, %5: i32):  // pred: ^bb0
    %6 = "wasm.add"(%4, %5) : (i32, i32) -> i32
    cf.br ^bb4(%6 : i32)
  ^bb3(%7: i32, %8: i32):  // pred: ^bb0
    %9 = "wasm.sub"(%7, %8) : (i32, i32) -> i32
    cf.br ^bb4(%9 : i32)
  ^bb4(%10: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%10 : i32)
  }
  func.func @f44(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2(%c1_i32, %c2_i32 : i32, i32), ^bb3(%c1_i32, %c2_i32 : i32, i32)
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2(%4: i32, %5: i32):  // pred: ^bb0
    cf.br ^bb4(%4, %5 : i32, i32)
  ^bb3(%6: i32, %7: i32):  // pred: ^bb0
    cf.br ^bb4(%6, %7 : i32, i32)
  ^bb4(%8: i32, %9: i32):  // 2 preds: ^bb2, ^bb3
    %10 = "wasm.add"(%8, %9) : (i32, i32) -> i32
    cf.br ^bb1(%10 : i32)
  }
  func.func @f45(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2(%c1_i32 : i32), ^bb3(%c1_i32 : i32)
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2(%4: i32):  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %5 = "wasm.add"(%4, %c2_i32) : (i32, i32) -> i32
    cf.br ^bb4(%5 : i32)
  ^bb3(%6: i32):  // pred: ^bb0
    %c-2_i32 = arith.constant -2 : i32
    %7 = "wasm.add"(%6, %c-2_i32) : (i32, i32) -> i32
    cf.br ^bb4(%7 : i32)
  ^bb4(%8: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%8 : i32)
  }
  func.func @f46(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2(%c1_i32, %c2_i32 : i32, i32), ^bb3(%c1_i32, %c2_i32 : i32, i32)
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2(%4: i32, %5: i32):  // pred: ^bb0
    %6 = "wasm.add"(%4, %5) : (i32, i32) -> i32
    cf.br ^bb4(%6 : i32)
  ^bb3(%7: i32, %8: i32):  // pred: ^bb0
    %9 = "wasm.sub"(%7, %8) : (i32, i32) -> i32
    cf.br ^bb4(%9 : i32)
  ^bb4(%10: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%10 : i32)
  }
  func.func @f47(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2(%c1_i32, %c2_i32 : i32, i32), ^bb3(%c1_i32, %c2_i32 : i32, i32)
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2(%4: i32, %5: i32):  // pred: ^bb0
    cf.br ^bb4(%4, %5 : i32, i32)
  ^bb3(%6: i32, %7: i32):  // pred: ^bb0
    cf.br ^bb4(%6, %7 : i32, i32)
  ^bb4(%8: i32, %9: i32):  // 2 preds: ^bb2, ^bb3
    %10 = "wasm.add"(%8, %9) : (i32, i32) -> i32
    cf.br ^bb1(%10 : i32)
  }
  func.func @f48(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb5
    return %3 : i32
  ^bb2(%4: i32):  // pred: ^bb0
    %c0_i32_1 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4, %c0_i32_1 : i32
    cf.cond_br %5, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %7 = "wasm.mul"(%6, %c3_i32) : (i32, i32) -> i32
    llvm.store %7, %1 : i32, !llvm.ptr
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %9 = "wasm.sub"(%8, %c5_i32) : (i32, i32) -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c7_i32 = arith.constant 7 : i32
    %11 = "wasm.mul"(%10, %c7_i32) : (i32, i32) -> i32
    llvm.store %11, %1 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb4:  // pred: ^bb2
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32_2 = arith.constant 5 : i32
    %13 = "wasm.mul"(%12, %c5_i32_2) : (i32, i32) -> i32
    llvm.store %13, %1 : i32, !llvm.ptr
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c7_i32_3 = arith.constant 7 : i32
    %15 = "wasm.sub"(%14, %c7_i32_3) : (i32, i32) -> i32
    llvm.store %15, %1 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_4 = arith.constant 3 : i32
    %17 = "wasm.mul"(%16, %c3_i32_4) : (i32, i32) -> i32
    llvm.store %17, %1 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb5:  // 2 preds: ^bb3, ^bb4
    %18 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb1(%18 : i32)
  }
  func.func @add64_u_with_carry(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64, %arg3: i32) -> (i64, i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %3 : i64, !llvm.ptr
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %5 = llvm.load %1 : !llvm.ptr -> i64
    %6 = "wasm.add"(%4, %5) : (i64, i64) -> i64
    %7 = llvm.load %2 : !llvm.ptr -> i32
    %8 = "wasm.i64_extend_i32u"(%7) : (i32) -> i64
    %9 = "wasm.add"(%6, %8) : (i64, i64) -> i64
    llvm.store %9, %3 : i64, !llvm.ptr
    %10 = llvm.load %3 : !llvm.ptr -> i64
    %11 = llvm.load %3 : !llvm.ptr -> i64
    %12 = llvm.load %0 : !llvm.ptr -> i64
    %13 = "wasm.ltu"(%11, %12) : (i64, i64) -> i32
    cf.br ^bb1(%10, %13 : i64, i32)
  ^bb1(%14: i64, %15: i32):  // pred: ^bb0
    return %14, %15 : i64, i32
  }
  func.func @add64_u_saturated(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c0_i32 = arith.constant 0 : i32
    %4:2 = call @add64_u_with_carry(%arg0, %2, %3, %c0_i32) : (!llvm.ptr, i64, i64, i32) -> (i64, i32)
    %c0_i32_1 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4#1, %c0_i32_1 : i32
    cf.cond_br %5, ^bb2(%4#0 : i64), ^bb3(%4#0 : i64)
  ^bb1(%6: i64):  // pred: ^bb4
    return %6 : i64
  ^bb2(%7: i64):  // pred: ^bb0
    %c-1_i64 = arith.constant -1 : i64
    cf.br ^bb4(%c-1_i64 : i64)
  ^bb3(%8: i64):  // pred: ^bb0
    cf.br ^bb4(%8 : i64)
  ^bb4(%9: i64):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%9 : i64)
  }
  func.func @f51(%arg0: !llvm.ptr) {
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb2, ^bb3
  ^bb1:  // pred: ^bb22
    return
  ^bb2:  // pred: ^bb0
    cf.br ^bb4
  ^bb3:  // pred: ^bb0
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c1_i32_0, %c0_i32_1 : i32
    cf.cond_br %1, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %c0_i32_2 = arith.constant 0 : i32
    cf.br ^bb7(%c0_i32_2 : i32)
  ^bb6:  // pred: ^bb4
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb7(%c2_i32 : i32)
  ^bb7(%2: i32):  // 2 preds: ^bb5, ^bb6
    %c1_i32_3 = arith.constant 1 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c1_i32_3, %c0_i32_4 : i32
    cf.cond_br %3, ^bb8(%2 : i32), ^bb9(%2 : i32)
  ^bb8(%4: i32):  // pred: ^bb7
    cf.br ^bb10
  ^bb9(%5: i32):  // pred: ^bb7
    cf.br ^bb10
  ^bb10:  // 2 preds: ^bb8, ^bb9
    %c0_i32_5 = arith.constant 0 : i32
    %cst = arith.constant 0.000000e+00 : f64
    %c0_i32_6 = arith.constant 0 : i32
    %c1_i32_7 = arith.constant 1 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c1_i32_7, %c0_i32_8 : i32
    cf.cond_br %6, ^bb11(%c0_i32_5, %cst, %c0_i32_6 : i32, f64, i32), ^bb12(%c0_i32_5, %cst, %c0_i32_6 : i32, f64, i32)
  ^bb11(%7: i32, %8: f64, %9: i32):  // pred: ^bb10
    cf.br ^bb13(%7, %8, %9 : i32, f64, i32)
  ^bb12(%10: i32, %11: f64, %12: i32):  // pred: ^bb10
    cf.br ^bb13(%10, %11, %12 : i32, f64, i32)
  ^bb13(%13: i32, %14: f64, %15: i32):  // 2 preds: ^bb11, ^bb12
    %c1_i32_9 = arith.constant 1 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %c1_i32_9, %c0_i32_10 : i32
    cf.cond_br %16, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %c0_i32_11 = arith.constant 0 : i32
    cf.br ^bb16(%c0_i32_11 : i32)
  ^bb15:  // pred: ^bb13
    %c2_i32_12 = arith.constant 2 : i32
    cf.br ^bb16(%c2_i32_12 : i32)
  ^bb16(%17: i32):  // 2 preds: ^bb14, ^bb15
    %c1_i32_13 = arith.constant 1 : i32
    %c0_i32_14 = arith.constant 0 : i32
    %18 = arith.cmpi ne, %c1_i32_13, %c0_i32_14 : i32
    cf.cond_br %18, ^bb17(%17 : i32), ^bb18(%17 : i32)
  ^bb17(%19: i32):  // pred: ^bb16
    cf.br ^bb19
  ^bb18(%20: i32):  // pred: ^bb16
    cf.br ^bb19
  ^bb19:  // 2 preds: ^bb17, ^bb18
    %c0_i32_15 = arith.constant 0 : i32
    %cst_16 = arith.constant 0.000000e+00 : f64
    %c0_i32_17 = arith.constant 0 : i32
    %c1_i32_18 = arith.constant 1 : i32
    %c0_i32_19 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %c1_i32_18, %c0_i32_19 : i32
    cf.cond_br %21, ^bb20(%c0_i32_15, %cst_16, %c0_i32_17 : i32, f64, i32), ^bb21(%c0_i32_15, %cst_16, %c0_i32_17 : i32, f64, i32)
  ^bb20(%22: i32, %23: f64, %24: i32):  // pred: ^bb19
    cf.br ^bb22(%22, %23, %24 : i32, f64, i32)
  ^bb21(%25: i32, %26: f64, %27: i32):  // pred: ^bb19
    cf.br ^bb22(%25, %26, %27 : i32, f64, i32)
  ^bb22(%28: i32, %29: f64, %30: i32):  // 2 preds: ^bb20, ^bb21
    cf.br ^bb1
  }
  func.func @f52(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c0_i32, %c0_i32_0 : i32
    cf.cond_br %0, ^bb2, ^bb3
  ^bb1:  // pred: ^bb7
    return
  ^bb2:  // pred: ^bb0
    cf.br ^bb4
  ^bb3:  // pred: ^bb0
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %c1_i32 = arith.constant 1 : i32
    %1 = "wasm.eqz"(%c1_i32) : (i32) -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32_1 : i32
    cf.cond_br %2, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    cf.br ^bb7
  ^bb6:  // pred: ^bb4
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cf.br ^bb1
  }
}
