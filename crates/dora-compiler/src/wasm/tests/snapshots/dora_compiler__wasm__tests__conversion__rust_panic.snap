---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
---
module {
  func.func public @main(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %7 = arith.subi %6, %c32_i32 : i32
    llvm.store %7, %0 : i32, !llvm.ptr
    llvm.store %7, %2 : i32, !llvm.ptr
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %c24_i64 = arith.constant 24 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c24_i64 : i64
    %11 = llvm.getelementptr %5[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_0, %11 {alignment = 1 : i64} : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %c12_i64 = arith.constant 12 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c12_i64 : i64
    %15 = llvm.getelementptr %5[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c1048596_i32 = arith.constant 1048596 : i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %19 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048596_i32, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %c16_i64 = arith.constant 16 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c16_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %25 = arith.addi %24, %c8_i32 : i32
    %c1048616_i32 = arith.constant 1048616 : i32
    call @f46(%arg0, %25, %c1048616_i32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f1(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = call @f25(%arg0, %3, %4) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %5, %2 : i32, !llvm.ptr
    %6 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f2(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    call @f26(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f3(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %7 = llvm.load %2 : !llvm.ptr -> i32
    %8 = llvm.load %3 : !llvm.ptr -> i32
    %9 = call @f27(%arg0, %5, %6, %7, %8) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%10 : i32)
  ^bb2(%11: i32):  // pred: ^bb1
    return %11 : i32
  }
  func.func @f4(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @f39(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f5(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c7199936582794304877_i64 = arith.constant 7199936582794304877 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c7199936582794304877_i64, %8 {alignment = 1 : i64} : i64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c-5076933981314334344_i64 = arith.constant -5076933981314334344 : i64
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-5076933981314334344_i64, %12 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f6(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c-235516408301547304_i64 = arith.constant -235516408301547304 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-235516408301547304_i64, %8 {alignment = 1 : i64} : i64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c799433722634398613_i64 = arith.constant 799433722634398613 : i64
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c799433722634398613_i64, %12 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f7(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %9 : i64, !llvm.ptr
    %10 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %15 = llvm.load %11 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %16 = arith.subi %15, %c32_i32 : i32
    llvm.store %16, %5 : i32, !llvm.ptr
    llvm.store %16, %11 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.addi %17, %18 : i32
    llvm.store %19, %2 : i32, !llvm.ptr
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %21 = arith.cmpi uge, %19, %20 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_9 : i32
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // pred: ^bb1
    %c0_i32_10 = arith.constant 0 : i32
    llvm.store %c0_i32_10, %6 : i32, !llvm.ptr
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %25 = llvm.load %4 : !llvm.ptr -> i32
    %26 = arith.addi %24, %25 : i32
    %c-1_i32 = arith.constant -1 : i32
    %27 = arith.addi %26, %c-1_i32 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.subi %c0_i32_11, %28 : i32
    %30 = arith.andi %27, %29 : i32
    %31 = arith.extui %30 : i32 to i64
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_12 = arith.constant 1 : i32
    %33 = arith.cmpi eq, %32, %c1_i32_12 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_13 : i32
    %36 = arith.select %35, %c8_i32, %c4_i32 : i32
    llvm.store %36, %7 : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_14 : i64
    %40 = llvm.getelementptr %14[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %41, %1 : i32, !llvm.ptr
    %c1_i32_15 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %42 = arith.cmpi ule, %c1_i32_15, %c31_i32 : i32
    %43 = scf.if %42 -> (i32) {
      %141 = arith.shli %41, %c1_i32_15 : i32
      scf.yield %141 : i32
    } else {
      %c0_i32_37 = arith.constant 0 : i32
      scf.yield %c0_i32_37 : i32
    }
    llvm.store %43, %8 : i32, !llvm.ptr
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %45 = llvm.load %8 : !llvm.ptr -> i32
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %47 = arith.cmpi ugt, %45, %46 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_16 : i32
    %50 = arith.select %49, %43, %44 : i32
    llvm.store %50, %2 : i32, !llvm.ptr
    %51 = llvm.load %7 : !llvm.ptr -> i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = arith.cmpi ugt, %51, %52 : i32
    %54 = arith.extui %53 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_17 : i32
    %56 = arith.select %55, %36, %50 : i32
    llvm.store %56, %7 : i32, !llvm.ptr
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.muli %31, %57 : i64
    llvm.store %58, %9 : i64, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %59 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %60 = scf.if %59 -> (i64) {
      %141 = arith.shrui %58, %c32_i64 : i64
      scf.yield %141 : i64
    } else {
      %c0_i64_37 = arith.constant 0 : i64
      scf.yield %c0_i64_37 : i64
    }
    %61 = arith.trunci %60 : i64 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_18 : i32
    %63 = arith.extui %62 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_19 : i32
    cf.cond_br %64, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c0_i32_20 = arith.constant 0 : i32
    %c0_i32_21 = arith.constant 0 : i32
    call @f43(%arg0, %c0_i32_20, %c0_i32_21) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb3
    %65 = llvm.load %9 : !llvm.ptr -> i64
    %66 = arith.trunci %65 : i64 to i32
    llvm.store %66, %2 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %67 = llvm.load %3 : !llvm.ptr -> i32
    %68 = arith.subi %c-2147483648_i32, %67 : i32
    %69 = arith.cmpi ugt, %66, %68 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_22 : i32
    cf.cond_br %71, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %c0_i32_23 = arith.constant 0 : i32
    %c0_i32_24 = arith.constant 0 : i32
    call @f43(%arg0, %c0_i32_23, %c0_i32_24) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_25 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_25) : (i32) -> ()
    llvm.unreachable
  ^bb7:  // pred: ^bb10
    %72 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c12_i64 : i64
    %75 = llvm.getelementptr %14[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %3 : i32, !llvm.ptr
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %78 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %79 = arith.extui %77 : i32 to i64
    %80 = arith.addi %79, %c0_i64_26 : i64
    %81 = llvm.getelementptr %14[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %81 {alignment = 1 : i64} : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c4_i64 : i64
    %86 = llvm.getelementptr %14[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32_27 = arith.constant 32 : i32
    %88 = arith.addi %87, %c32_i32_27 : i32
    llvm.store %88, %11 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb8:  // 2 preds: ^bb5, ^bb13
    %89 = llvm.load %6 : !llvm.ptr -> i32
    %90 = llvm.load %8 : !llvm.ptr -> i32
    call @f43(%arg0, %89, %90) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_28 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_28) : (i32) -> ()
    llvm.unreachable
  ^bb9:  // pred: ^bb5
    %91 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_29 = arith.constant 0 : i32
    %92 = arith.cmpi ne, %91, %c0_i32_29 : i32
    cf.cond_br %92, ^bb11, ^bb12
  ^bb10:  // 2 preds: ^bb11, ^bb12
    %93 = llvm.load %5 : !llvm.ptr -> i32
    %94 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %95 = arith.extui %93 : i32 to i64
    %96 = arith.addi %95, %c24_i64 : i64
    %97 = llvm.getelementptr %14[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %94, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    %98 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_30 = arith.constant 8 : i32
    %99 = arith.addi %98, %c8_i32_30 : i32
    %100 = llvm.load %3 : !llvm.ptr -> i32
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %102 = llvm.load %5 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %103 = arith.addi %102, %c20_i32 : i32
    call @f15(%arg0, %99, %100, %101, %103) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %104 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %105 = arith.extui %104 : i32 to i64
    %106 = arith.addi %105, %c8_i64 : i64
    %107 = llvm.getelementptr %14[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %108 = llvm.load volatile %107 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_31 = arith.constant 1 : i32
    %109 = arith.cmpi eq, %108, %c1_i32_31 : i32
    %110 = arith.extui %109 : i1 to i32
    %c0_i32_32 = arith.constant 0 : i32
    %111 = arith.cmpi eq, %110, %c0_i32_32 : i32
    %112 = arith.extui %111 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %113 = arith.cmpi ne, %112, %c0_i32_33 : i32
    cf.cond_br %113, ^bb7, ^bb13
  ^bb11:  // pred: ^bb9
    %114 = llvm.load %5 : !llvm.ptr -> i32
    %115 = llvm.load %1 : !llvm.ptr -> i32
    %116 = llvm.load %4 : !llvm.ptr -> i32
    %117 = arith.muli %115, %116 : i32
    %c28_i64 = arith.constant 28 : i64
    %118 = arith.extui %114 : i32 to i64
    %119 = arith.addi %118, %c28_i64 : i64
    %120 = llvm.getelementptr %14[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %117, %120 {alignment = 1 : i64} : i32, !llvm.ptr
    %121 = llvm.load %5 : !llvm.ptr -> i32
    %122 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_34 = arith.constant 4 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c4_i64_34 : i64
    %125 = llvm.getelementptr %14[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %127 = arith.extui %121 : i32 to i64
    %128 = arith.addi %127, %c20_i64 : i64
    %129 = llvm.getelementptr %14[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %129 {alignment = 1 : i64} : i32, !llvm.ptr
    %130 = llvm.load %3 : !llvm.ptr -> i32
    llvm.store %130, %4 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb12:  // pred: ^bb9
    %c0_i32_35 = arith.constant 0 : i32
    llvm.store %c0_i32_35, %4 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb13:  // pred: ^bb10
    %131 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c16_i64 : i64
    %134 = llvm.getelementptr %14[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %135, %8 : i32, !llvm.ptr
    %136 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64_36 = arith.constant 12 : i64
    %137 = arith.extui %136 : i32 to i64
    %138 = arith.addi %137, %c12_i64_36 : i64
    %139 = llvm.getelementptr %14[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = llvm.load volatile %139 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %140, %6 : i32, !llvm.ptr
    cf.br ^bb8
  }
  func.func @f8(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1048632_i32 = arith.constant 1048632 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f48(%arg0, %2, %c1048632_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f9(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f2(%arg0, %17, %18, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f10(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %10 = arith.ori %9, %c-2147483648_i32 : i32
    %c-2147483648_i32_1 = arith.constant -2147483648 : i32
    %11 = arith.cmpi eq, %10, %c-2147483648_i32_1 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_2 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c4_i64 : i64
    %17 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f2(%arg0, %18, %19, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f11(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32, %8 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f12(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %12 = arith.cmpi ult, %11, %c128_i32 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb4, ^bb5
  ^bb2(%15: i32):  // pred: ^bb3
    return %15 : i32
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %17 = arith.addi %16, %c16_i32_4 : i32
    llvm.store %17, %5 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // pred: ^bb1
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c8_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %22, %3 : i32, !llvm.ptr
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = arith.cmpi eq, %22, %27 : i32
    %29 = arith.extui %28 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %30 = arith.cmpi eq, %29, %c0_i32_6 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_7 : i32
    cf.cond_br %32, ^bb13, ^bb14
  ^bb5:  // pred: ^bb1
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c12_i64 : i64
    %36 = llvm.getelementptr %8[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_8, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %38 = arith.cmpi ult, %37, %c2048_i32 : i32
    %39 = arith.extui %38 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_9 : i32
    cf.cond_br %40, ^bb7, ^bb8
  ^bb6:  // 3 preds: ^bb7, ^bb9, ^bb10
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_10 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64_10 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_11 = arith.constant 8 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c8_i64_11 : i64
    %49 = llvm.getelementptr %8[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %50, %3 : i32, !llvm.ptr
    %51 = arith.subi %45, %50 : i32
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %53 = arith.cmpi uge, %51, %52 : i32
    %54 = arith.extui %53 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_12 : i32
    cf.cond_br %55, ^bb11, ^bb12
  ^bb7:  // pred: ^bb5
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %58 = arith.andi %57, %c63_i32 : i32
    %c128_i32_13 = arith.constant 128 : i32
    %59 = arith.ori %58, %c128_i32_13 : i32
    %c13_i64 = arith.constant 13 : i64
    %60 = arith.extui %56 : i32 to i64
    %61 = arith.addi %60, %c13_i64 : i64
    %62 = llvm.getelementptr %8[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = arith.trunci %59 : i32 to i8
    llvm.store volatile %63, %62 {alignment = 1 : i64} : i8, !llvm.ptr
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %65 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32 = arith.constant 31 : i32
    %66 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %67 = scf.if %66 -> (i32) {
      %186 = arith.shrui %65, %c6_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c192_i32 = arith.constant 192 : i32
    %68 = arith.ori %67, %c192_i32 : i32
    %c12_i64_14 = arith.constant 12 : i64
    %69 = arith.extui %64 : i32 to i64
    %70 = arith.addi %69, %c12_i64_14 : i64
    %71 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = arith.trunci %68 : i32 to i8
    llvm.store volatile %72, %71 {alignment = 1 : i64} : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // pred: ^bb5
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %74 = arith.cmpi ult, %73, %c65536_i32 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_15 : i32
    cf.cond_br %76, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_16 = arith.constant 63 : i32
    %79 = arith.andi %78, %c63_i32_16 : i32
    %c128_i32_17 = arith.constant 128 : i32
    %80 = arith.ori %79, %c128_i32_17 : i32
    %c14_i64 = arith.constant 14 : i64
    %81 = arith.extui %77 : i32 to i64
    %82 = arith.addi %81, %c14_i64 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = arith.trunci %80 : i32 to i8
    llvm.store volatile %84, %83 {alignment = 1 : i64} : i8, !llvm.ptr
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %86 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_18 = arith.constant 31 : i32
    %87 = arith.cmpi ule, %c12_i32, %c31_i32_18 : i32
    %88 = scf.if %87 -> (i32) {
      %186 = arith.shrui %86, %c12_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c224_i32 = arith.constant 224 : i32
    %89 = arith.ori %88, %c224_i32 : i32
    %c12_i64_19 = arith.constant 12 : i64
    %90 = arith.extui %85 : i32 to i64
    %91 = arith.addi %90, %c12_i64_19 : i64
    %92 = llvm.getelementptr %8[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = arith.trunci %89 : i32 to i8
    llvm.store volatile %93, %92 {alignment = 1 : i64} : i8, !llvm.ptr
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_20 = arith.constant 6 : i32
    %c31_i32_21 = arith.constant 31 : i32
    %96 = arith.cmpi ule, %c6_i32_20, %c31_i32_21 : i32
    %97 = scf.if %96 -> (i32) {
      %186 = arith.shrui %95, %c6_i32_20 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c63_i32_22 = arith.constant 63 : i32
    %98 = arith.andi %97, %c63_i32_22 : i32
    %c128_i32_23 = arith.constant 128 : i32
    %99 = arith.ori %98, %c128_i32_23 : i32
    %c13_i64_24 = arith.constant 13 : i64
    %100 = arith.extui %94 : i32 to i64
    %101 = arith.addi %100, %c13_i64_24 : i64
    %102 = llvm.getelementptr %8[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = arith.trunci %99 : i32 to i8
    llvm.store volatile %103, %102 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb10:  // pred: ^bb8
    %104 = llvm.load %2 : !llvm.ptr -> i32
    %105 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_25 = arith.constant 63 : i32
    %106 = arith.andi %105, %c63_i32_25 : i32
    %c128_i32_26 = arith.constant 128 : i32
    %107 = arith.ori %106, %c128_i32_26 : i32
    %c15_i64 = arith.constant 15 : i64
    %108 = arith.extui %104 : i32 to i64
    %109 = arith.addi %108, %c15_i64 : i64
    %110 = llvm.getelementptr %8[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = arith.trunci %107 : i32 to i8
    llvm.store volatile %111, %110 {alignment = 1 : i64} : i8, !llvm.ptr
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %113 = llvm.load %1 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_27 = arith.constant 31 : i32
    %114 = arith.cmpi ule, %c18_i32, %c31_i32_27 : i32
    %115 = scf.if %114 -> (i32) {
      %186 = arith.shrui %113, %c18_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c240_i32 = arith.constant 240 : i32
    %116 = arith.ori %115, %c240_i32 : i32
    %c12_i64_28 = arith.constant 12 : i64
    %117 = arith.extui %112 : i32 to i64
    %118 = arith.addi %117, %c12_i64_28 : i64
    %119 = llvm.getelementptr %8[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %120 = arith.trunci %116 : i32 to i8
    llvm.store volatile %120, %119 {alignment = 1 : i64} : i8, !llvm.ptr
    %121 = llvm.load %2 : !llvm.ptr -> i32
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_29 = arith.constant 6 : i32
    %c31_i32_30 = arith.constant 31 : i32
    %123 = arith.cmpi ule, %c6_i32_29, %c31_i32_30 : i32
    %124 = scf.if %123 -> (i32) {
      %186 = arith.shrui %122, %c6_i32_29 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c63_i32_31 = arith.constant 63 : i32
    %125 = arith.andi %124, %c63_i32_31 : i32
    %c128_i32_32 = arith.constant 128 : i32
    %126 = arith.ori %125, %c128_i32_32 : i32
    %c14_i64_33 = arith.constant 14 : i64
    %127 = arith.extui %121 : i32 to i64
    %128 = arith.addi %127, %c14_i64_33 : i64
    %129 = llvm.getelementptr %8[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = arith.trunci %126 : i32 to i8
    llvm.store volatile %130, %129 {alignment = 1 : i64} : i8, !llvm.ptr
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %132 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_34 = arith.constant 12 : i32
    %c31_i32_35 = arith.constant 31 : i32
    %133 = arith.cmpi ule, %c12_i32_34, %c31_i32_35 : i32
    %134 = scf.if %133 -> (i32) {
      %186 = arith.shrui %132, %c12_i32_34 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c63_i32_36 = arith.constant 63 : i32
    %135 = arith.andi %134, %c63_i32_36 : i32
    %c128_i32_37 = arith.constant 128 : i32
    %136 = arith.ori %135, %c128_i32_37 : i32
    %c13_i64_38 = arith.constant 13 : i64
    %137 = arith.extui %131 : i32 to i64
    %138 = arith.addi %137, %c13_i64_38 : i64
    %139 = llvm.getelementptr %8[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = arith.trunci %136 : i32 to i8
    llvm.store volatile %140, %139 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %141 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c4_i64 : i64
    %144 = llvm.getelementptr %8[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %146 = llvm.load %3 : !llvm.ptr -> i32
    %147 = arith.addi %145, %146 : i32
    %148 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_39 = arith.constant 12 : i32
    %149 = arith.addi %148, %c12_i32_39 : i32
    %150 = llvm.load %1 : !llvm.ptr -> i32
    %151 = call @f54(%arg0, %147, %149, %150) : (!llvm.ptr, i32, i32, i32) -> i32
    %152 = llvm.load %0 : !llvm.ptr -> i32
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %155 = arith.addi %153, %154 : i32
    %c8_i64_40 = arith.constant 8 : i64
    %156 = arith.extui %152 : i32 to i64
    %157 = arith.addi %156, %c8_i64_40 : i64
    %158 = llvm.getelementptr %8[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %155, %158 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %159 = llvm.load %0 : !llvm.ptr -> i32
    %160 = llvm.load %3 : !llvm.ptr -> i32
    %161 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_41 = arith.constant 1 : i32
    %c1_i32_42 = arith.constant 1 : i32
    call @f7(%arg0, %159, %160, %161, %c1_i32_41, %c1_i32_42) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %162 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_43 = arith.constant 8 : i64
    %163 = arith.extui %162 : i32 to i64
    %164 = arith.addi %163, %c8_i64_43 : i64
    %165 = llvm.getelementptr %8[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %166 = llvm.load volatile %165 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %166, %3 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %167 = llvm.load %0 : !llvm.ptr -> i32
    %168 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_44 = arith.constant 1 : i32
    %169 = arith.addi %168, %c1_i32_44 : i32
    %c8_i64_45 = arith.constant 8 : i64
    %170 = arith.extui %167 : i32 to i64
    %171 = arith.addi %170, %c8_i64_45 : i64
    %172 = llvm.getelementptr %8[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %169, %172 {alignment = 1 : i64} : i32, !llvm.ptr
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_46 = arith.constant 4 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c4_i64_46 : i64
    %176 = llvm.getelementptr %8[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %177 = llvm.load volatile %176 {alignment = 1 : i64} : !llvm.ptr -> i32
    %178 = llvm.load %3 : !llvm.ptr -> i32
    %179 = arith.addi %177, %178 : i32
    %180 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %181 = arith.extui %179 : i32 to i64
    %182 = arith.addi %181, %c0_i64_47 : i64
    %183 = llvm.getelementptr %8[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %184 = arith.trunci %180 : i32 to i8
    llvm.store volatile %184, %183 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %185 = llvm.load %0 : !llvm.ptr -> i32
    call @f13(%arg0, %185) : (!llvm.ptr, i32) -> ()
    cf.br ^bb13
  }
  func.func @f13(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %11 = arith.subi %10, %c32_i32 : i32
    llvm.store %11, %1 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %17 = arith.cmpi eq, %16, %c-1_i32 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_4 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_5 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // pred: ^bb10
    return
  ^bb3:  // pred: ^bb1
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %23 = arith.cmpi ule, %c1_i32_6, %c31_i32 : i32
    %24 = scf.if %23 -> (i32) {
      %104 = arith.shli %22, %c1_i32_6 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_31 = arith.constant 0 : i32
      scf.yield %c0_i32_31 : i32
    }
    llvm.store %24, %3 : i32, !llvm.ptr
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_7 = arith.constant 1 : i32
    %26 = arith.addi %25, %c1_i32_7 : i32
    llvm.store %26, %4 : i32, !llvm.ptr
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = arith.cmpi ugt, %27, %28 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_8 : i32
    %32 = arith.select %31, %24, %26 : i32
    llvm.store %32, %3 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %33 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %34 = arith.cmpi ugt, %33, %c8_i32_9 : i32
    %35 = arith.extui %34 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %36 = arith.cmpi ne, %35, %c0_i32_10 : i32
    %37 = arith.select %36, %32, %c8_i32 : i32
    llvm.store %37, %3 : i32, !llvm.ptr
    %c0_i32_11 = arith.constant 0 : i32
    %38 = arith.cmpi sge, %37, %c0_i32_11 : i32
    %39 = arith.extui %38 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_12 : i32
    cf.cond_br %40, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c0_i32_13 = arith.constant 0 : i32
    %c0_i32_14 = arith.constant 0 : i32
    call @f43(%arg0, %c0_i32_13, %c0_i32_14) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb3
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_15 : i32
    cf.cond_br %42, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %c0_i32_16 = arith.constant 0 : i32
    %c0_i32_17 = arith.constant 0 : i32
    call @f43(%arg0, %c0_i32_16, %c0_i32_17) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_18 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_18) : (i32) -> ()
    llvm.unreachable
  ^bb7:  // 2 preds: ^bb8, ^bb9
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %45 = arith.extui %43 : i32 to i64
    %46 = arith.addi %45, %c24_i64 : i64
    %47 = llvm.getelementptr %9[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i32, !llvm.ptr
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_19 = arith.constant 8 : i32
    %49 = arith.addi %48, %c8_i32_19 : i32
    %c1_i32_20 = arith.constant 1 : i32
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %52 = arith.addi %51, %c20_i32 : i32
    call @f15(%arg0, %49, %c1_i32_20, %50, %52) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c8_i64 : i64
    %56 = llvm.getelementptr %9[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_21 = arith.constant 1 : i32
    %58 = arith.cmpi eq, %57, %c1_i32_21 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_22 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_23 : i32
    cf.cond_br %62, ^bb10, ^bb11
  ^bb8:  // pred: ^bb5
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %9[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %9[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %9[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_24 = arith.constant 1 : i32
    llvm.store %c1_i32_24, %2 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb9:  // pred: ^bb5
    %c0_i32_25 = arith.constant 0 : i32
    llvm.store %c0_i32_25, %2 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb10:  // pred: ^bb7
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %9[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_26 : i64
    %86 = llvm.getelementptr %9[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_27 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_27 : i64
    %91 = llvm.getelementptr %9[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_28 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_28 : i32
    llvm.store %93, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb11:  // pred: ^bb7
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_29 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_29 : i64
    %97 = llvm.getelementptr %9[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %9[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f43(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_30 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_30) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f14(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = arith.subi %11, %16 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_3 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = call @f54(%arg0, %29, %30, %31) : (!llvm.ptr, i32, i32, i32) -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = arith.addi %34, %35 : i32
    %c8_i64_4 = arith.constant 8 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c8_i64_4 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // pred: ^bb1
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c1_i32_7 = arith.constant 1 : i32
    call @f7(%arg0, %40, %41, %42, %c1_i32_6, %c1_i32_7) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_8 = arith.constant 8 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c8_i64_8 : i64
    %46 = llvm.getelementptr %6[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %47, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f15(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %9 = arith.cmpi slt, %8, %c0_i32_4 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_5 : i32
    cf.cond_br %11, ^bb4, ^bb5
  ^bb2:  // 2 preds: ^bb3, ^bb17
    return
  ^bb3:  // 2 preds: ^bb4, ^bb16
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %7[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_6, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_7, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_8 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64_8 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %25 = arith.cmpi eq, %24, %c0_i32_9 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_10 : i32
    cf.cond_br %27, ^bb8, ^bb9
  ^bb6:  // 4 preds: ^bb7, ^bb10, ^bb13, ^bb15
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_11 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_12 : i32
    cf.cond_br %31, ^bb16, ^bb17
  ^bb7:  // 2 preds: ^bb12, ^bb14
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %34 = call @f1(%arg0, %32, %33) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %34, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // pred: ^bb5
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %36 = arith.cmpi ne, %35, %c0_i32_13 : i32
    cf.cond_br %36, ^bb14, ^bb15
  ^bb9:  // pred: ^bb5
    %37 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c8_i64 : i64
    %40 = llvm.getelementptr %7[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %41, %4 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_14 : i32
    cf.cond_br %42, ^bb10, ^bb11
  ^bb10:  // pred: ^bb9
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_15 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_15 : i64
    %46 = llvm.getelementptr %7[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    %48 = llvm.load %4 : !llvm.ptr -> i32
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %51 = call @f3(%arg0, %47, %48, %49, %50) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %51, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb11:  // pred: ^bb9
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_16 : i32
    cf.cond_br %53, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %c0_i32_17 = arith.constant 0 : i32
    %c1049261_i64 = arith.constant 1049261 : i64
    %54 = arith.extui %c0_i32_17 : i32 to i64
    %55 = arith.addi %54, %c1049261_i64 : i64
    %56 = llvm.getelementptr %7[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i8
    %58 = arith.extui %57 : i8 to i32
    cf.br ^bb7
  ^bb13:  // pred: ^bb11
    %59 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %59, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb14:  // pred: ^bb8
    %c0_i32_18 = arith.constant 0 : i32
    %c1049261_i64_19 = arith.constant 1049261 : i64
    %60 = arith.extui %c0_i32_18 : i32 to i64
    %61 = arith.addi %60, %c1049261_i64_19 : i64
    %62 = llvm.getelementptr %7[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i8
    %64 = arith.extui %63 : i8 to i32
    cf.br ^bb7
  ^bb15:  // pred: ^bb8
    %65 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %65, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb16:  // pred: ^bb6
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_20 = arith.constant 8 : i64
    %68 = arith.extui %66 : i32 to i64
    %69 = arith.addi %68, %c8_i64_20 : i64
    %70 = llvm.getelementptr %7[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %67, %70 {alignment = 1 : i64} : i32, !llvm.ptr
    %71 = llvm.load %0 : !llvm.ptr -> i32
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_21 = arith.constant 4 : i64
    %73 = arith.extui %71 : i32 to i64
    %74 = arith.addi %73, %c4_i64_21 : i64
    %75 = llvm.getelementptr %7[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %72, %75 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb17:  // pred: ^bb6
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_22 = arith.constant 8 : i64
    %78 = arith.extui %76 : i32 to i64
    %79 = arith.addi %78, %c8_i64_22 : i64
    %80 = llvm.getelementptr %7[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %80 {alignment = 1 : i64} : i32, !llvm.ptr
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %82 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_23 = arith.constant 4 : i64
    %83 = arith.extui %81 : i32 to i64
    %84 = arith.addi %83, %c4_i64_23 : i64
    %85 = llvm.getelementptr %7[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %85 {alignment = 1 : i64} : i32, !llvm.ptr
    %86 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_24 = arith.constant 0 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %87 = arith.extui %86 : i32 to i64
    %88 = arith.addi %87, %c0_i64_25 : i64
    %89 = llvm.getelementptr %7[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_24, %89 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f16(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c12_i64 : i64
    %12 = llvm.getelementptr %8[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %13, %2 : i32, !llvm.ptr
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %15 = arith.cmpi ult, %14, %c256_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_5 : i32
    cf.cond_br %17, ^bb5, ^bb6
  ^bb2:  // 4 preds: ^bb3, ^bb20, ^bb21, ^bb24
    return
  ^bb3:  // 4 preds: ^bb7, ^bb17, ^bb19, ^bb22
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb16, ^bb18
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %20 = arith.extui %18 : i32 to i64
    %21 = arith.addi %20, %c24_i64 : i64
    %22 = llvm.getelementptr %8[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %19, %22 {alignment = 1 : i64} : i32, !llvm.ptr
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c16_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %27, %1 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %28 = arith.cmpi eq, %27, %c0_i32_6 : i32
    %29 = arith.extui %28 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %30 = arith.cmpi ne, %29, %c0_i32_7 : i32
    cf.cond_br %30, ^bb22, ^bb23
  ^bb5:  // pred: ^bb1
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c8_i64 : i64
    %35 = llvm.getelementptr %8[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %36, %4 : i32, !llvm.ptr
    %37 = arith.cmpi eq, %31, %36 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_8 : i32
    cf.cond_br %39, ^bb20, ^bb21
  ^bb6:  // pred: ^bb1
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_9 = arith.constant 24 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c24_i64_9 : i64
    %43 = llvm.getelementptr %8[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %44, %3 : i32, !llvm.ptr
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = arith.cmpi eq, %45, %46 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %49 = arith.cmpi eq, %48, %c0_i32_10 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_11 : i32
    cf.cond_br %51, ^bb9, ^bb10
  ^bb7:  // 3 preds: ^bb9, ^bb11, ^bb12
    %52 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %53 = arith.cmpi eq, %52, %c0_i32_12 : i32
    %54 = arith.extui %53 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_13 : i32
    cf.cond_br %55, ^bb3, ^bb15
  ^bb8:  // pred: ^bb10
    %56 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %57 = arith.addi %56, %c20_i32 : i32
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %59 = arith.addi %58, %c16_i32 : i32
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %61 = arith.cmpi ne, %60, %c0_i32_14 : i32
    %62 = arith.select %61, %57, %59 : i32
    llvm.store %62, %4 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb9:  // pred: ^bb6
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_15 = arith.constant 8 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c8_i64_15 : i64
    %66 = llvm.getelementptr %8[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %67, %1 : i32, !llvm.ptr
    %68 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_16 = arith.constant 12 : i64
    %69 = arith.extui %67 : i32 to i64
    %70 = arith.addi %69, %c12_i64_16 : i64
    %71 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_17 = arith.constant 8 : i64
    %74 = arith.extui %72 : i32 to i64
    %75 = arith.addi %74, %c8_i64_17 : i64
    %76 = llvm.getelementptr %8[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  ^bb10:  // pred: ^bb6
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32_18 = arith.constant 20 : i32
    %c16_i32_19 = arith.constant 16 : i32
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c20_i64 : i64
    %81 = llvm.getelementptr %8[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %82, %2 : i32, !llvm.ptr
    %c0_i32_20 = arith.constant 0 : i32
    %83 = arith.cmpi ne, %82, %c0_i32_20 : i32
    %84 = arith.select %83, %c20_i32_18, %c16_i32_19 : i32
    %85 = arith.addi %77, %84 : i32
    %c0_i64 = arith.constant 0 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c0_i64 : i64
    %88 = llvm.getelementptr %8[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load volatile %88 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %89, %1 : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_21 : i32
    cf.cond_br %90, ^bb8, ^bb11
  ^bb11:  // pred: ^bb10
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %2 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb12:  // pred: ^bb14
    %91 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_23 = arith.constant 0 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_24 : i64
    %94 = llvm.getelementptr %8[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_23, %94 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  ^bb13:  // 2 preds: ^bb8, ^bb13
    %95 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %95, %5 : i32, !llvm.ptr
    %96 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %96, %2 : i32, !llvm.ptr
    %c20_i32_25 = arith.constant 20 : i32
    %97 = arith.addi %96, %c20_i32_25 : i32
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_26 = arith.constant 16 : i32
    %99 = arith.addi %98, %c16_i32_26 : i32
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_27 = arith.constant 20 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c20_i64_27 : i64
    %103 = llvm.getelementptr %8[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %104, %1 : i32, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    %105 = arith.cmpi ne, %104, %c0_i32_28 : i32
    %106 = arith.select %105, %97, %99 : i32
    llvm.store %106, %4 : i32, !llvm.ptr
    %107 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i32_29 = arith.constant 20 : i32
    %c16_i32_30 = arith.constant 16 : i32
    %108 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_31 = arith.constant 0 : i32
    %109 = arith.cmpi ne, %108, %c0_i32_31 : i32
    %110 = arith.select %109, %c20_i32_29, %c16_i32_30 : i32
    %111 = arith.addi %107, %110 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c0_i64_32 : i64
    %114 = llvm.getelementptr %8[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %115 = llvm.load volatile %114 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %115, %1 : i32, !llvm.ptr
    %c0_i32_33 = arith.constant 0 : i32
    %116 = arith.cmpi ne, %115, %c0_i32_33 : i32
    cf.cond_br %116, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // pred: ^bb7
    %117 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c28_i64 : i64
    %120 = llvm.getelementptr %8[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %122 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %123 = scf.if %122 -> (i32) {
      %232 = arith.shli %121, %c2_i32 : i32
      scf.yield %232 : i32
    } else {
      %c0_i32_64 = arith.constant 0 : i32
      scf.yield %c0_i32_64 : i32
    }
    %c1049284_i32 = arith.constant 1049284 : i32
    %124 = arith.addi %123, %c1049284_i32 : i32
    llvm.store %124, %1 : i32, !llvm.ptr
    %c0_i64_34 = arith.constant 0 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c0_i64_34 : i64
    %127 = llvm.getelementptr %8[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %128 = llvm.load volatile %127 {alignment = 1 : i64} : !llvm.ptr -> i32
    %129 = llvm.load %0 : !llvm.ptr -> i32
    %130 = arith.cmpi eq, %128, %129 : i32
    %131 = arith.extui %130 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %132 = arith.cmpi ne, %131, %c0_i32_35 : i32
    cf.cond_br %132, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %134 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %135 = arith.extui %133 : i32 to i64
    %136 = arith.addi %135, %c0_i64_36 : i64
    %137 = llvm.getelementptr %8[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %137 {alignment = 1 : i64} : i32, !llvm.ptr
    %138 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_37 = arith.constant 0 : i32
    %139 = arith.cmpi ne, %138, %c0_i32_37 : i32
    cf.cond_br %139, ^bb4, ^bb19
  ^bb17:  // pred: ^bb15
    %140 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_38 = arith.constant 16 : i32
    %c20_i32_39 = arith.constant 20 : i32
    %141 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64_40 = arith.constant 16 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c16_i64_40 : i64
    %144 = llvm.getelementptr %8[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %146 = llvm.load %0 : !llvm.ptr -> i32
    %147 = arith.cmpi eq, %145, %146 : i32
    %148 = arith.extui %147 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %149 = arith.cmpi ne, %148, %c0_i32_41 : i32
    %150 = arith.select %149, %c16_i32_38, %c20_i32_39 : i32
    %151 = arith.addi %140, %150 : i32
    %152 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %153 = arith.extui %151 : i32 to i64
    %154 = arith.addi %153, %c0_i64_42 : i64
    %155 = llvm.getelementptr %8[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %152, %155 {alignment = 1 : i64} : i32, !llvm.ptr
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %157 = arith.cmpi eq, %156, %c0_i32_43 : i32
    %158 = arith.extui %157 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %159 = arith.cmpi ne, %158, %c0_i32_44 : i32
    cf.cond_br %159, ^bb3, ^bb18
  ^bb18:  // pred: ^bb17
    cf.br ^bb4
  ^bb19:  // pred: ^bb16
    %c0_i32_45 = arith.constant 0 : i32
    %c0_i32_46 = arith.constant 0 : i32
    %c1049696_i64 = arith.constant 1049696 : i64
    %160 = arith.extui %c0_i32_46 : i32 to i64
    %161 = arith.addi %160, %c1049696_i64 : i64
    %162 = llvm.getelementptr %8[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %164 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_47 = arith.constant 28 : i64
    %165 = arith.extui %164 : i32 to i64
    %166 = arith.addi %165, %c28_i64_47 : i64
    %167 = llvm.getelementptr %8[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %168 = llvm.load volatile %167 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %169 = arith.remui %168, %c32_i32 : i32
    %170 = arith.shli %c-2_i32, %169 : i32
    %171 = arith.subi %c32_i32, %169 : i32
    %172 = arith.shrui %c-2_i32, %171 : i32
    %173 = arith.ori %170, %172 : i32
    %174 = arith.andi %163, %173 : i32
    %c1049696_i64_48 = arith.constant 1049696 : i64
    %175 = arith.extui %c0_i32_45 : i32 to i64
    %176 = arith.addi %175, %c1049696_i64_48 : i64
    %177 = llvm.getelementptr %8[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %174, %177 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb20:  // pred: ^bb5
    %c0_i32_49 = arith.constant 0 : i32
    %c0_i32_50 = arith.constant 0 : i32
    %c1049692_i64 = arith.constant 1049692 : i64
    %178 = arith.extui %c0_i32_50 : i32 to i64
    %179 = arith.addi %178, %c1049692_i64 : i64
    %180 = llvm.getelementptr %8[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %181 = llvm.load volatile %180 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32_51 = arith.constant -2 : i32
    %182 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %183 = arith.cmpi ule, %c3_i32, %c31_i32_52 : i32
    %184 = scf.if %183 -> (i32) {
      %232 = arith.shrui %182, %c3_i32 : i32
      scf.yield %232 : i32
    } else {
      %c0_i32_64 = arith.constant 0 : i32
      scf.yield %c0_i32_64 : i32
    }
    %c32_i32_53 = arith.constant 32 : i32
    %185 = arith.remui %184, %c32_i32_53 : i32
    %186 = arith.shli %c-2_i32_51, %185 : i32
    %187 = arith.subi %c32_i32_53, %185 : i32
    %188 = arith.shrui %c-2_i32_51, %187 : i32
    %189 = arith.ori %186, %188 : i32
    %190 = arith.andi %181, %189 : i32
    %c1049692_i64_54 = arith.constant 1049692 : i64
    %191 = arith.extui %c0_i32_49 : i32 to i64
    %192 = arith.addi %191, %c1049692_i64_54 : i64
    %193 = llvm.getelementptr %8[%192] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %190, %193 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb21:  // pred: ^bb5
    %194 = llvm.load %4 : !llvm.ptr -> i32
    %195 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_55 = arith.constant 12 : i64
    %196 = arith.extui %194 : i32 to i64
    %197 = arith.addi %196, %c12_i64_55 : i64
    %198 = llvm.getelementptr %8[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %195, %198 {alignment = 1 : i64} : i32, !llvm.ptr
    %199 = llvm.load %2 : !llvm.ptr -> i32
    %200 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_56 = arith.constant 8 : i64
    %201 = arith.extui %199 : i32 to i64
    %202 = arith.addi %201, %c8_i64_56 : i64
    %203 = llvm.getelementptr %8[%202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %200, %203 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb22:  // 2 preds: ^bb4, ^bb23
    %204 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_57 = arith.constant 20 : i64
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.addi %205, %c20_i64_57 : i64
    %207 = llvm.getelementptr %8[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %208 = llvm.load volatile %207 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %208, %1 : i32, !llvm.ptr
    %c0_i32_58 = arith.constant 0 : i32
    %209 = arith.cmpi eq, %208, %c0_i32_58 : i32
    %210 = arith.extui %209 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %211 = arith.cmpi ne, %210, %c0_i32_59 : i32
    cf.cond_br %211, ^bb3, ^bb24
  ^bb23:  // pred: ^bb4
    %212 = llvm.load %2 : !llvm.ptr -> i32
    %213 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_60 = arith.constant 16 : i64
    %214 = arith.extui %212 : i32 to i64
    %215 = arith.addi %214, %c16_i64_60 : i64
    %216 = llvm.getelementptr %8[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %213, %216 {alignment = 1 : i64} : i32, !llvm.ptr
    %217 = llvm.load %1 : !llvm.ptr -> i32
    %218 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_61 = arith.constant 24 : i64
    %219 = arith.extui %217 : i32 to i64
    %220 = arith.addi %219, %c24_i64_61 : i64
    %221 = llvm.getelementptr %8[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %218, %221 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb22
  ^bb24:  // pred: ^bb22
    %222 = llvm.load %2 : !llvm.ptr -> i32
    %223 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_62 = arith.constant 20 : i64
    %224 = arith.extui %222 : i32 to i64
    %225 = arith.addi %224, %c20_i64_62 : i64
    %226 = llvm.getelementptr %8[%225] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %223, %226 {alignment = 1 : i64} : i32, !llvm.ptr
    %227 = llvm.load %1 : !llvm.ptr -> i32
    %228 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_63 = arith.constant 24 : i64
    %229 = arith.extui %227 : i32 to i64
    %230 = arith.addi %229, %c24_i64_63 : i64
    %231 = llvm.getelementptr %8[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %228, %231 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %9 = arith.addi %7, %8 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c4_i64 : i64
    %13 = llvm.getelementptr %6[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %14, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %15 = arith.andi %14, %c1_i32_3 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_4 : i32
    cf.cond_br %16, ^bb4, ^bb5
  ^bb2:  // 6 preds: ^bb3, ^bb10, ^bb17, ^bb19, ^bb20, ^bb23
    return
  ^bb3:  // 3 preds: ^bb5, ^bb9, ^bb11
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb1, ^bb7, ^bb8
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c4_i64_5 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %3 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %22 = arith.andi %21, %c2_i32 : i32
    %c0_i32_6 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_6 : i32
    cf.cond_br %23, ^bb13, ^bb14
  ^bb5:  // pred: ^bb1
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_7 = arith.constant 2 : i32
    %25 = arith.andi %24, %c2_i32_7 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %26 = arith.cmpi eq, %25, %c0_i32_8 : i32
    %27 = arith.extui %26 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_9 : i32
    cf.cond_br %28, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64 : i64
    %32 = llvm.getelementptr %6[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %33, %3 : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %35 = arith.addi %33, %34 : i32
    llvm.store %35, %1 : i32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %37 = llvm.load %3 : !llvm.ptr -> i32
    %38 = arith.subi %36, %37 : i32
    llvm.store %38, %0 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c1049708_i64 = arith.constant 1049708 : i64
    %39 = arith.extui %c0_i32_10 : i32 to i64
    %40 = arith.addi %39, %c1049708_i64 : i64
    %41 = llvm.getelementptr %6[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i32
    %43 = arith.cmpi eq, %38, %42 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %45 = arith.cmpi eq, %44, %c0_i32_11 : i32
    %46 = arith.extui %45 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %47 = arith.cmpi ne, %46, %c0_i32_12 : i32
    cf.cond_br %47, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %49 = llvm.load %3 : !llvm.ptr -> i32
    call @f16(%arg0, %48, %49) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb4
  ^bb8:  // pred: ^bb6
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_13 = arith.constant 4 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c4_i64_13 : i64
    %53 = llvm.getelementptr %6[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %55 = arith.andi %54, %c3_i32 : i32
    %c3_i32_14 = arith.constant 3 : i32
    %56 = arith.cmpi eq, %55, %c3_i32_14 : i32
    %57 = arith.extui %56 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %58 = arith.cmpi eq, %57, %c0_i32_15 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_16 : i32
    cf.cond_br %60, ^bb4, ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i32_17 = arith.constant 0 : i32
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %c1049700_i64 = arith.constant 1049700 : i64
    %62 = arith.extui %c0_i32_17 : i32 to i64
    %63 = arith.addi %62, %c1049700_i64 : i64
    %64 = llvm.getelementptr %6[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %61, %64 {alignment = 1 : i64} : i32, !llvm.ptr
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_18 = arith.constant 4 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c4_i64_18 : i64
    %69 = llvm.getelementptr %6[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %71 = arith.andi %70, %c-2_i32 : i32
    %c4_i64_19 = arith.constant 4 : i64
    %72 = arith.extui %65 : i32 to i64
    %73 = arith.addi %72, %c4_i64_19 : i64
    %74 = llvm.getelementptr %6[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %71, %74 {alignment = 1 : i64} : i32, !llvm.ptr
    %75 = llvm.load %0 : !llvm.ptr -> i32
    %76 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %77 = arith.ori %76, %c1_i32_20 : i32
    %c4_i64_21 = arith.constant 4 : i64
    %78 = arith.extui %75 : i32 to i64
    %79 = arith.addi %78, %c4_i64_21 : i64
    %80 = llvm.getelementptr %6[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %80 {alignment = 1 : i64} : i32, !llvm.ptr
    %81 = llvm.load %2 : !llvm.ptr -> i32
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %83 = arith.extui %81 : i32 to i64
    %84 = arith.addi %83, %c0_i64_22 : i64
    %85 = llvm.getelementptr %6[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %85 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // pred: ^bb15
    %c0_i32_23 = arith.constant 0 : i32
    %86 = llvm.load %0 : !llvm.ptr -> i32
    %c1049708_i64_24 = arith.constant 1049708 : i64
    %87 = arith.extui %c0_i32_23 : i32 to i64
    %88 = arith.addi %87, %c1049708_i64_24 : i64
    %89 = llvm.getelementptr %6[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %86, %89 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %c0_i32_26 = arith.constant 0 : i32
    %c1049700_i64_27 = arith.constant 1049700 : i64
    %90 = arith.extui %c0_i32_26 : i32 to i64
    %91 = arith.addi %90, %c1049700_i64_27 : i64
    %92 = llvm.getelementptr %6[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i32
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %95 = arith.addi %93, %94 : i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %c1049700_i64_28 = arith.constant 1049700 : i64
    %96 = arith.extui %c0_i32_25 : i32 to i64
    %97 = arith.addi %96, %c1049700_i64_28 : i64
    %98 = llvm.getelementptr %6[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %99 = llvm.load %0 : !llvm.ptr -> i32
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_29 = arith.constant 1 : i32
    %101 = arith.ori %100, %c1_i32_29 : i32
    %c4_i64_30 = arith.constant 4 : i64
    %102 = arith.extui %99 : i32 to i64
    %103 = arith.addi %102, %c4_i64_30 : i64
    %104 = llvm.getelementptr %6[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %101, %104 {alignment = 1 : i64} : i32, !llvm.ptr
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %107 = arith.addi %105, %106 : i32
    %108 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %109 = arith.extui %107 : i32 to i64
    %110 = arith.addi %109, %c0_i64_31 : i64
    %111 = llvm.getelementptr %6[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb11:  // pred: ^bb14
    %c0_i32_32 = arith.constant 0 : i32
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c1049712_i64 = arith.constant 1049712 : i64
    %113 = arith.extui %c0_i32_32 : i32 to i64
    %114 = arith.addi %113, %c1049712_i64 : i64
    %115 = llvm.getelementptr %6[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_33 = arith.constant 0 : i32
    %c0_i32_34 = arith.constant 0 : i32
    %c1049704_i64 = arith.constant 1049704 : i64
    %116 = arith.extui %c0_i32_34 : i32 to i64
    %117 = arith.addi %116, %c1049704_i64 : i64
    %118 = llvm.getelementptr %6[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i32
    %120 = llvm.load %1 : !llvm.ptr -> i32
    %121 = arith.addi %119, %120 : i32
    llvm.store %121, %1 : i32, !llvm.ptr
    %c1049704_i64_35 = arith.constant 1049704 : i64
    %122 = arith.extui %c0_i32_33 : i32 to i64
    %123 = arith.addi %122, %c1049704_i64_35 : i64
    %124 = llvm.getelementptr %6[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %124 {alignment = 1 : i64} : i32, !llvm.ptr
    %125 = llvm.load %0 : !llvm.ptr -> i32
    %126 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_36 = arith.constant 1 : i32
    %127 = arith.ori %126, %c1_i32_36 : i32
    %c4_i64_37 = arith.constant 4 : i64
    %128 = arith.extui %125 : i32 to i64
    %129 = arith.addi %128, %c4_i64_37 : i64
    %130 = llvm.getelementptr %6[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %127, %130 {alignment = 1 : i64} : i32, !llvm.ptr
    %131 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_38 = arith.constant 0 : i32
    %c1049708_i64_39 = arith.constant 1049708 : i64
    %132 = arith.extui %c0_i32_38 : i32 to i64
    %133 = arith.addi %132, %c1049708_i64_39 : i64
    %134 = llvm.getelementptr %6[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i32
    %136 = arith.cmpi eq, %131, %135 : i32
    %137 = arith.extui %136 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %138 = arith.cmpi eq, %137, %c0_i32_40 : i32
    %139 = arith.extui %138 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %140 = arith.cmpi ne, %139, %c0_i32_41 : i32
    cf.cond_br %140, ^bb3, ^bb23
  ^bb12:  // 2 preds: ^bb13, ^bb16
    %141 = llvm.load %1 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %142 = arith.cmpi ult, %141, %c256_i32 : i32
    %143 = arith.extui %142 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %144 = arith.cmpi ne, %143, %c0_i32_42 : i32
    cf.cond_br %144, ^bb18, ^bb19
  ^bb13:  // pred: ^bb4
    %145 = llvm.load %2 : !llvm.ptr -> i32
    %146 = llvm.load %3 : !llvm.ptr -> i32
    %c-2_i32_43 = arith.constant -2 : i32
    %147 = arith.andi %146, %c-2_i32_43 : i32
    %c4_i64_44 = arith.constant 4 : i64
    %148 = arith.extui %145 : i32 to i64
    %149 = arith.addi %148, %c4_i64_44 : i64
    %150 = llvm.getelementptr %6[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %147, %150 {alignment = 1 : i64} : i32, !llvm.ptr
    %151 = llvm.load %0 : !llvm.ptr -> i32
    %152 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_45 = arith.constant 1 : i32
    %153 = arith.ori %152, %c1_i32_45 : i32
    %c4_i64_46 = arith.constant 4 : i64
    %154 = arith.extui %151 : i32 to i64
    %155 = arith.addi %154, %c4_i64_46 : i64
    %156 = llvm.getelementptr %6[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %153, %156 {alignment = 1 : i64} : i32, !llvm.ptr
    %157 = llvm.load %0 : !llvm.ptr -> i32
    %158 = llvm.load %1 : !llvm.ptr -> i32
    %159 = arith.addi %157, %158 : i32
    %160 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %161 = arith.extui %159 : i32 to i64
    %162 = arith.addi %161, %c0_i64_47 : i64
    %163 = llvm.getelementptr %6[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %160, %163 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb12
  ^bb14:  // pred: ^bb4
    %164 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_48 = arith.constant 0 : i32
    %c1049712_i64_49 = arith.constant 1049712 : i64
    %165 = arith.extui %c0_i32_48 : i32 to i64
    %166 = arith.addi %165, %c1049712_i64_49 : i64
    %167 = llvm.getelementptr %6[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %168 = llvm.load volatile %167 {alignment = 1 : i64} : !llvm.ptr -> i32
    %169 = arith.cmpi eq, %164, %168 : i32
    %170 = arith.extui %169 : i1 to i32
    %c0_i32_50 = arith.constant 0 : i32
    %171 = arith.cmpi ne, %170, %c0_i32_50 : i32
    cf.cond_br %171, ^bb11, ^bb15
  ^bb15:  // pred: ^bb14
    %172 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_51 = arith.constant 0 : i32
    %c1049708_i64_52 = arith.constant 1049708 : i64
    %173 = arith.extui %c0_i32_51 : i32 to i64
    %174 = arith.addi %173, %c1049708_i64_52 : i64
    %175 = llvm.getelementptr %6[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = llvm.load volatile %175 {alignment = 1 : i64} : !llvm.ptr -> i32
    %177 = arith.cmpi eq, %172, %176 : i32
    %178 = arith.extui %177 : i1 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %179 = arith.cmpi ne, %178, %c0_i32_53 : i32
    cf.cond_br %179, ^bb10, ^bb16
  ^bb16:  // pred: ^bb15
    %180 = llvm.load %2 : !llvm.ptr -> i32
    %181 = llvm.load %3 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %182 = arith.andi %181, %c-8_i32 : i32
    llvm.store %182, %3 : i32, !llvm.ptr
    call @f16(%arg0, %180, %182) : (!llvm.ptr, i32, i32) -> ()
    %183 = llvm.load %0 : !llvm.ptr -> i32
    %184 = llvm.load %3 : !llvm.ptr -> i32
    %185 = llvm.load %1 : !llvm.ptr -> i32
    %186 = arith.addi %184, %185 : i32
    llvm.store %186, %1 : i32, !llvm.ptr
    %c1_i32_54 = arith.constant 1 : i32
    %187 = arith.ori %186, %c1_i32_54 : i32
    %c4_i64_55 = arith.constant 4 : i64
    %188 = arith.extui %183 : i32 to i64
    %189 = arith.addi %188, %c4_i64_55 : i64
    %190 = llvm.getelementptr %6[%189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %187, %190 {alignment = 1 : i64} : i32, !llvm.ptr
    %191 = llvm.load %0 : !llvm.ptr -> i32
    %192 = llvm.load %1 : !llvm.ptr -> i32
    %193 = arith.addi %191, %192 : i32
    %194 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_56 = arith.constant 0 : i64
    %195 = arith.extui %193 : i32 to i64
    %196 = arith.addi %195, %c0_i64_56 : i64
    %197 = llvm.getelementptr %6[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %194, %197 {alignment = 1 : i64} : i32, !llvm.ptr
    %198 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_57 = arith.constant 0 : i32
    %c1049708_i64_58 = arith.constant 1049708 : i64
    %199 = arith.extui %c0_i32_57 : i32 to i64
    %200 = arith.addi %199, %c1049708_i64_58 : i64
    %201 = llvm.getelementptr %6[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %202 = llvm.load volatile %201 {alignment = 1 : i64} : !llvm.ptr -> i32
    %203 = arith.cmpi eq, %198, %202 : i32
    %204 = arith.extui %203 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %205 = arith.cmpi eq, %204, %c0_i32_59 : i32
    %206 = arith.extui %205 : i1 to i32
    %c0_i32_60 = arith.constant 0 : i32
    %207 = arith.cmpi ne, %206, %c0_i32_60 : i32
    cf.cond_br %207, ^bb12, ^bb17
  ^bb17:  // pred: ^bb16
    %c0_i32_61 = arith.constant 0 : i32
    %208 = llvm.load %1 : !llvm.ptr -> i32
    %c1049700_i64_62 = arith.constant 1049700 : i64
    %209 = arith.extui %c0_i32_61 : i32 to i64
    %210 = arith.addi %209, %c1049700_i64_62 : i64
    %211 = llvm.getelementptr %6[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %208, %211 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb18:  // pred: ^bb12
    %212 = llvm.load %1 : !llvm.ptr -> i32
    %c248_i32 = arith.constant 248 : i32
    %213 = arith.andi %212, %c248_i32 : i32
    %c1049428_i32 = arith.constant 1049428 : i32
    %214 = arith.addi %213, %c1049428_i32 : i32
    llvm.store %214, %2 : i32, !llvm.ptr
    %c0_i32_63 = arith.constant 0 : i32
    %c1049692_i64 = arith.constant 1049692 : i64
    %215 = arith.extui %c0_i32_63 : i32 to i64
    %216 = arith.addi %215, %c1049692_i64 : i64
    %217 = llvm.getelementptr %6[%216] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %218 = llvm.load volatile %217 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %218, %3 : i32, !llvm.ptr
    %c1_i32_64 = arith.constant 1 : i32
    %219 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_65 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %220 = arith.cmpi ule, %c3_i32_65, %c31_i32 : i32
    %221 = scf.if %220 -> (i32) {
      %266 = arith.shrui %219, %c3_i32_65 : i32
      scf.yield %266 : i32
    } else {
      %c0_i32_79 = arith.constant 0 : i32
      scf.yield %c0_i32_79 : i32
    }
    %c31_i32_66 = arith.constant 31 : i32
    %222 = arith.cmpi ule, %221, %c31_i32_66 : i32
    %223 = scf.if %222 -> (i32) {
      %266 = arith.shli %c1_i32_64, %221 : i32
      scf.yield %266 : i32
    } else {
      %c0_i32_79 = arith.constant 0 : i32
      scf.yield %c0_i32_79 : i32
    }
    llvm.store %223, %1 : i32, !llvm.ptr
    %224 = arith.andi %218, %223 : i32
    %c0_i32_67 = arith.constant 0 : i32
    %225 = arith.cmpi ne, %224, %c0_i32_67 : i32
    cf.cond_br %225, ^bb21, ^bb22
  ^bb19:  // pred: ^bb12
    %226 = llvm.load %0 : !llvm.ptr -> i32
    %227 = llvm.load %1 : !llvm.ptr -> i32
    call @f18(%arg0, %226, %227) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb20:  // 2 preds: ^bb21, ^bb22
    %228 = llvm.load %2 : !llvm.ptr -> i32
    %229 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %230 = arith.extui %228 : i32 to i64
    %231 = arith.addi %230, %c8_i64 : i64
    %232 = llvm.getelementptr %6[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %229, %232 {alignment = 1 : i64} : i32, !llvm.ptr
    %233 = llvm.load %1 : !llvm.ptr -> i32
    %234 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %235 = arith.extui %233 : i32 to i64
    %236 = arith.addi %235, %c12_i64 : i64
    %237 = llvm.getelementptr %6[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %234, %237 {alignment = 1 : i64} : i32, !llvm.ptr
    %238 = llvm.load %0 : !llvm.ptr -> i32
    %239 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_68 = arith.constant 12 : i64
    %240 = arith.extui %238 : i32 to i64
    %241 = arith.addi %240, %c12_i64_68 : i64
    %242 = llvm.getelementptr %6[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %239, %242 {alignment = 1 : i64} : i32, !llvm.ptr
    %243 = llvm.load %0 : !llvm.ptr -> i32
    %244 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_69 = arith.constant 8 : i64
    %245 = arith.extui %243 : i32 to i64
    %246 = arith.addi %245, %c8_i64_69 : i64
    %247 = llvm.getelementptr %6[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %244, %247 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb21:  // pred: ^bb18
    %248 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_70 = arith.constant 8 : i64
    %249 = arith.extui %248 : i32 to i64
    %250 = arith.addi %249, %c8_i64_70 : i64
    %251 = llvm.getelementptr %6[%250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %252 = llvm.load volatile %251 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %252, %1 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb22:  // pred: ^bb18
    %c0_i32_71 = arith.constant 0 : i32
    %253 = llvm.load %3 : !llvm.ptr -> i32
    %254 = llvm.load %1 : !llvm.ptr -> i32
    %255 = arith.ori %253, %254 : i32
    %c1049692_i64_72 = arith.constant 1049692 : i64
    %256 = arith.extui %c0_i32_71 : i32 to i64
    %257 = arith.addi %256, %c1049692_i64_72 : i64
    %258 = llvm.getelementptr %6[%257] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %255, %258 {alignment = 1 : i64} : i32, !llvm.ptr
    %259 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %259, %1 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb23:  // pred: ^bb11
    %c0_i32_73 = arith.constant 0 : i32
    %c0_i32_74 = arith.constant 0 : i32
    %c1049700_i64_75 = arith.constant 1049700 : i64
    %260 = arith.extui %c0_i32_73 : i32 to i64
    %261 = arith.addi %260, %c1049700_i64_75 : i64
    %262 = llvm.getelementptr %6[%261] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_74, %262 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_76 = arith.constant 0 : i32
    %c0_i32_77 = arith.constant 0 : i32
    %c1049708_i64_78 = arith.constant 1049708 : i64
    %263 = arith.extui %c0_i32_76 : i32 to i64
    %264 = arith.addi %263, %c1049708_i64_78 : i64
    %265 = llvm.getelementptr %6[%264] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_77, %265 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %2 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %10 = arith.cmpi ult, %9, %c256_i32 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_6 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // 3 preds: ^bb7, ^bb8, ^bb9
    return
  ^bb3:  // 3 preds: ^bb1, ^bb4, ^bb5
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %c16_i64 = arith.constant 16 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c16_i64 : i64
    %16 = llvm.getelementptr %8[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %16 {alignment = 1 : i64} : i64, !llvm.ptr
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c28_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %23 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %24 = scf.if %23 -> (i32) {
      %189 = arith.shli %22, %c2_i32 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_53 = arith.constant 0 : i32
      scf.yield %c0_i32_53 : i32
    }
    %c1049284_i32 = arith.constant 1049284 : i32
    %25 = arith.addi %24, %c1049284_i32 : i32
    llvm.store %25, %3 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %c1049696_i64 = arith.constant 1049696 : i64
    %26 = arith.extui %c0_i32_7 : i32 to i64
    %27 = arith.addi %26, %c1049696_i64 : i64
    %28 = llvm.getelementptr %8[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_8 = arith.constant 1 : i32
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_9 = arith.constant 31 : i32
    %31 = arith.cmpi ule, %30, %c31_i32_9 : i32
    %32 = scf.if %31 -> (i32) {
      %189 = arith.shli %c1_i32_8, %30 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_53 = arith.constant 0 : i32
      scf.yield %c0_i32_53 : i32
    }
    llvm.store %32, %4 : i32, !llvm.ptr
    %33 = arith.andi %29, %32 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_10 : i32
    cf.cond_br %34, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c31_i32_11 = arith.constant 31 : i32
    llvm.store %c31_i32_11, %2 : i32, !llvm.ptr
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %c16777215_i32 = arith.constant 16777215 : i32
    %36 = arith.cmpi ugt, %35, %c16777215_i32 : i32
    %37 = arith.extui %36 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_12 : i32
    cf.cond_br %38, ^bb3, ^bb5
  ^bb5:  // pred: ^bb4
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_13 = arith.constant 31 : i32
    %41 = arith.cmpi ule, %c8_i32, %c31_i32_13 : i32
    %42 = scf.if %41 -> (i32) {
      %189 = arith.shrui %40, %c8_i32 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_53 = arith.constant 0 : i32
      scf.yield %c0_i32_53 : i32
    }
    %false = arith.constant false
    %43 = llvm.call_intrinsic "llvm.ctlz.i32"(%42, %false) : (i32, i1) -> i32
    llvm.store %43, %2 : i32, !llvm.ptr
    %44 = arith.subi %c6_i32, %43 : i32
    %c31_i32_14 = arith.constant 31 : i32
    %45 = arith.cmpi ule, %44, %c31_i32_14 : i32
    %46 = scf.if %45 -> (i32) {
      %189 = arith.shrui %39, %44 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_53 = arith.constant 0 : i32
      scf.yield %c0_i32_53 : i32
    }
    %c1_i32_15 = arith.constant 1 : i32
    %47 = arith.andi %46, %c1_i32_15 : i32
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %c31_i32_17 = arith.constant 31 : i32
    %49 = arith.cmpi ule, %c1_i32_16, %c31_i32_17 : i32
    %50 = scf.if %49 -> (i32) {
      %189 = arith.shli %48, %c1_i32_16 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_53 = arith.constant 0 : i32
      scf.yield %c0_i32_53 : i32
    }
    %51 = arith.subi %47, %50 : i32
    %c62_i32 = arith.constant 62 : i32
    %52 = arith.addi %51, %c62_i32 : i32
    llvm.store %52, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb3
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_18 : i64
    %56 = llvm.getelementptr %8[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %57, %4 : i32, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c4_i64 : i64
    %60 = llvm.getelementptr %8[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %62 = arith.andi %61, %c-8_i32 : i32
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = arith.cmpi eq, %62, %63 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %66 = arith.cmpi eq, %65, %c0_i32_19 : i32
    %67 = arith.extui %66 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %68 = arith.cmpi ne, %67, %c0_i32_20 : i32
    cf.cond_br %68, ^bb10, ^bb11
  ^bb7:  // pred: ^bb3
    %69 = llvm.load %3 : !llvm.ptr -> i32
    %70 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %71 = arith.extui %69 : i32 to i64
    %72 = arith.addi %71, %c0_i64_21 : i64
    %73 = llvm.getelementptr %8[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %70, %73 {alignment = 1 : i64} : i32, !llvm.ptr
    %74 = llvm.load %0 : !llvm.ptr -> i32
    %75 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %76 = arith.extui %74 : i32 to i64
    %77 = arith.addi %76, %c24_i64 : i64
    %78 = llvm.getelementptr %8[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %75, %78 {alignment = 1 : i64} : i32, !llvm.ptr
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %80 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c12_i64 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    %84 = llvm.load %0 : !llvm.ptr -> i32
    %85 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c8_i64 : i64
    %88 = llvm.getelementptr %8[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %c0_i32_23 = arith.constant 0 : i32
    %c1049696_i64_24 = arith.constant 1049696 : i64
    %89 = arith.extui %c0_i32_23 : i32 to i64
    %90 = arith.addi %89, %c1049696_i64_24 : i64
    %91 = llvm.getelementptr %8[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i32
    %93 = llvm.load %4 : !llvm.ptr -> i32
    %94 = arith.ori %92, %93 : i32
    %c1049696_i64_25 = arith.constant 1049696 : i64
    %95 = arith.extui %c0_i32_22 : i32 to i64
    %96 = arith.addi %95, %c1049696_i64_25 : i64
    %97 = llvm.getelementptr %8[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %94, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb8:  // pred: ^bb13
    %98 = llvm.load %5 : !llvm.ptr -> i32
    %99 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %100 = arith.extui %98 : i32 to i64
    %101 = arith.addi %100, %c0_i64_26 : i64
    %102 = llvm.getelementptr %8[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %99, %102 {alignment = 1 : i64} : i32, !llvm.ptr
    %103 = llvm.load %0 : !llvm.ptr -> i32
    %104 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64_27 = arith.constant 24 : i64
    %105 = arith.extui %103 : i32 to i64
    %106 = arith.addi %105, %c24_i64_27 : i64
    %107 = llvm.getelementptr %8[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %104, %107 {alignment = 1 : i64} : i32, !llvm.ptr
    %108 = llvm.load %0 : !llvm.ptr -> i32
    %109 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_28 = arith.constant 12 : i64
    %110 = arith.extui %108 : i32 to i64
    %111 = arith.addi %110, %c12_i64_28 : i64
    %112 = llvm.getelementptr %8[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %112 {alignment = 1 : i64} : i32, !llvm.ptr
    %113 = llvm.load %0 : !llvm.ptr -> i32
    %114 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_29 = arith.constant 8 : i64
    %115 = arith.extui %113 : i32 to i64
    %116 = arith.addi %115, %c8_i64_29 : i64
    %117 = llvm.getelementptr %8[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %114, %117 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %118 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_30 = arith.constant 8 : i64
    %119 = arith.extui %118 : i32 to i64
    %120 = arith.addi %119, %c8_i64_30 : i64
    %121 = llvm.getelementptr %8[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = llvm.load volatile %121 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %122, %3 : i32, !llvm.ptr
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_31 = arith.constant 12 : i64
    %124 = arith.extui %122 : i32 to i64
    %125 = arith.addi %124, %c12_i64_31 : i64
    %126 = llvm.getelementptr %8[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %123, %126 {alignment = 1 : i64} : i32, !llvm.ptr
    %127 = llvm.load %2 : !llvm.ptr -> i32
    %128 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_32 = arith.constant 8 : i64
    %129 = arith.extui %127 : i32 to i64
    %130 = arith.addi %129, %c8_i64_32 : i64
    %131 = llvm.getelementptr %8[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %128, %131 {alignment = 1 : i64} : i32, !llvm.ptr
    %132 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_33 = arith.constant 0 : i32
    %c24_i64_34 = arith.constant 24 : i64
    %133 = arith.extui %132 : i32 to i64
    %134 = arith.addi %133, %c24_i64_34 : i64
    %135 = llvm.getelementptr %8[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_33, %135 {alignment = 1 : i64} : i32, !llvm.ptr
    %136 = llvm.load %0 : !llvm.ptr -> i32
    %137 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_35 = arith.constant 12 : i64
    %138 = arith.extui %136 : i32 to i64
    %139 = arith.addi %138, %c12_i64_35 : i64
    %140 = llvm.getelementptr %8[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %137, %140 {alignment = 1 : i64} : i32, !llvm.ptr
    %141 = llvm.load %0 : !llvm.ptr -> i32
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_36 = arith.constant 8 : i64
    %143 = arith.extui %141 : i32 to i64
    %144 = arith.addi %143, %c8_i64_36 : i64
    %145 = llvm.getelementptr %8[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %142, %145 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb10:  // pred: ^bb6
    %146 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_37 = arith.constant 0 : i32
    %c25_i32 = arith.constant 25 : i32
    %147 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_38 = arith.constant 1 : i32
    %c31_i32_39 = arith.constant 31 : i32
    %148 = arith.cmpi ule, %c1_i32_38, %c31_i32_39 : i32
    %149 = scf.if %148 -> (i32) {
      %189 = arith.shrui %147, %c1_i32_38 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_53 = arith.constant 0 : i32
      scf.yield %c0_i32_53 : i32
    }
    %150 = arith.subi %c25_i32, %149 : i32
    %151 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_40 = arith.constant 31 : i32
    %152 = arith.cmpi eq, %151, %c31_i32_40 : i32
    %153 = arith.extui %152 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %154 = arith.cmpi ne, %153, %c0_i32_41 : i32
    %155 = arith.select %154, %c0_i32_37, %150 : i32
    %c31_i32_42 = arith.constant 31 : i32
    %156 = arith.cmpi ule, %155, %c31_i32_42 : i32
    %157 = scf.if %156 -> (i32) {
      %189 = arith.shli %146, %155 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_53 = arith.constant 0 : i32
      scf.yield %c0_i32_53 : i32
    }
    llvm.store %157, %3 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb6
    %158 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %158, %2 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb15
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb14
    %159 = llvm.load %4 : !llvm.ptr -> i32
    %160 = llvm.load %3 : !llvm.ptr -> i32
    %c29_i32 = arith.constant 29 : i32
    %c31_i32_43 = arith.constant 31 : i32
    %161 = arith.cmpi ule, %c29_i32, %c31_i32_43 : i32
    %162 = scf.if %161 -> (i32) {
      %189 = arith.shrui %160, %c29_i32 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_53 = arith.constant 0 : i32
      scf.yield %c0_i32_53 : i32
    }
    %c4_i32 = arith.constant 4 : i32
    %163 = arith.andi %162, %c4_i32 : i32
    %164 = arith.addi %159, %163 : i32
    %c16_i32 = arith.constant 16 : i32
    %165 = arith.addi %164, %c16_i32 : i32
    llvm.store %165, %5 : i32, !llvm.ptr
    %c0_i64_44 = arith.constant 0 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c0_i64_44 : i64
    %168 = llvm.getelementptr %8[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %169 = llvm.load volatile %168 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %169, %2 : i32, !llvm.ptr
    %c0_i32_45 = arith.constant 0 : i32
    %170 = arith.cmpi eq, %169, %c0_i32_45 : i32
    %171 = arith.extui %170 : i1 to i32
    %c0_i32_46 = arith.constant 0 : i32
    %172 = arith.cmpi ne, %171, %c0_i32_46 : i32
    cf.cond_br %172, ^bb8, ^bb14
  ^bb14:  // pred: ^bb13
    %173 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_47 = arith.constant 1 : i32
    %c31_i32_48 = arith.constant 31 : i32
    %174 = arith.cmpi ule, %c1_i32_47, %c31_i32_48 : i32
    %175 = scf.if %174 -> (i32) {
      %189 = arith.shli %173, %c1_i32_47 : i32
      scf.yield %189 : i32
    } else {
      %c0_i32_53 = arith.constant 0 : i32
      scf.yield %c0_i32_53 : i32
    }
    llvm.store %175, %3 : i32, !llvm.ptr
    %176 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %176, %4 : i32, !llvm.ptr
    %177 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_49 = arith.constant 4 : i64
    %178 = arith.extui %177 : i32 to i64
    %179 = arith.addi %178, %c4_i64_49 : i64
    %180 = llvm.getelementptr %8[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %181 = llvm.load volatile %180 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-8_i32_50 = arith.constant -8 : i32
    %182 = arith.andi %181, %c-8_i32_50 : i32
    %183 = llvm.load %1 : !llvm.ptr -> i32
    %184 = arith.cmpi eq, %182, %183 : i32
    %185 = arith.extui %184 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %185, %c0_i32_51 : i32
    %187 = arith.extui %186 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %188 = arith.cmpi ne, %187, %c0_i32_52 : i32
    cf.cond_br %188, ^bb13, ^bb15
  ^bb15:  // pred: ^bb14
    cf.br ^bb12
  }
  func.func @f19(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %10 = arith.addi %9, %c-8_i32 : i32
    llvm.store %10, %1 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %12 = arith.addi %11, %c-4_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %8[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %c-8_i32_5 = arith.constant -8 : i32
    %17 = arith.andi %16, %c-8_i32_5 : i32
    llvm.store %17, %0 : i32, !llvm.ptr
    %18 = arith.addi %10, %17 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %20 = arith.andi %19, %c1_i32_6 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_7 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2:  // 6 preds: ^bb3, ^bb9, ^bb12, ^bb19, ^bb22, ^bb37
    return
  ^bb3:  // 6 preds: ^bb5, ^bb20, ^bb27, ^bb29, ^bb40, ^bb45
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb1, ^bb7, ^bb8
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c4_i64 : i64
    %25 = llvm.getelementptr %8[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %26, %2 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %27 = arith.andi %26, %c2_i32 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_8 : i32
    cf.cond_br %28, ^bb15, ^bb16
  ^bb5:  // pred: ^bb1
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_9 = arith.constant 2 : i32
    %30 = arith.andi %29, %c2_i32_9 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %31 = arith.cmpi eq, %30, %c0_i32_10 : i32
    %32 = arith.extui %31 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %33 = arith.cmpi ne, %32, %c0_i32_11 : i32
    cf.cond_br %33, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_12 : i64
    %37 = llvm.getelementptr %8[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %2 : i32, !llvm.ptr
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %40 = arith.addi %38, %39 : i32
    llvm.store %40, %0 : i32, !llvm.ptr
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %43 = arith.subi %41, %42 : i32
    llvm.store %43, %1 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    %c1049708_i64 = arith.constant 1049708 : i64
    %44 = arith.extui %c0_i32_13 : i32 to i64
    %45 = arith.addi %44, %c1049708_i64 : i64
    %46 = llvm.getelementptr %8[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    %48 = arith.cmpi eq, %43, %47 : i32
    %49 = arith.extui %48 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %50 = arith.cmpi eq, %49, %c0_i32_14 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %52 = arith.cmpi ne, %51, %c0_i32_15 : i32
    cf.cond_br %52, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %54 = llvm.load %2 : !llvm.ptr -> i32
    call @f16(%arg0, %53, %54) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb4
  ^bb8:  // pred: ^bb6
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_16 = arith.constant 4 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c4_i64_16 : i64
    %58 = llvm.getelementptr %8[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %60 = arith.andi %59, %c3_i32 : i32
    %c3_i32_17 = arith.constant 3 : i32
    %61 = arith.cmpi eq, %60, %c3_i32_17 : i32
    %62 = arith.extui %61 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %63 = arith.cmpi eq, %62, %c0_i32_18 : i32
    %64 = arith.extui %63 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %65 = arith.cmpi ne, %64, %c0_i32_19 : i32
    cf.cond_br %65, ^bb4, ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i32_20 = arith.constant 0 : i32
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %c1049700_i64 = arith.constant 1049700 : i64
    %67 = arith.extui %c0_i32_20 : i32 to i64
    %68 = arith.addi %67, %c1049700_i64 : i64
    %69 = llvm.getelementptr %8[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %66, %69 {alignment = 1 : i64} : i32, !llvm.ptr
    %70 = llvm.load %3 : !llvm.ptr -> i32
    %71 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_21 = arith.constant 4 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c4_i64_21 : i64
    %74 = llvm.getelementptr %8[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = llvm.load volatile %74 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %76 = arith.andi %75, %c-2_i32 : i32
    %c4_i64_22 = arith.constant 4 : i64
    %77 = arith.extui %70 : i32 to i64
    %78 = arith.addi %77, %c4_i64_22 : i64
    %79 = llvm.getelementptr %8[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %76, %79 {alignment = 1 : i64} : i32, !llvm.ptr
    %80 = llvm.load %1 : !llvm.ptr -> i32
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_23 = arith.constant 1 : i32
    %82 = arith.ori %81, %c1_i32_23 : i32
    %c4_i64_24 = arith.constant 4 : i64
    %83 = arith.extui %80 : i32 to i64
    %84 = arith.addi %83, %c4_i64_24 : i64
    %85 = llvm.getelementptr %8[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %85 {alignment = 1 : i64} : i32, !llvm.ptr
    %86 = llvm.load %3 : !llvm.ptr -> i32
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %88 = arith.extui %86 : i32 to i64
    %89 = arith.addi %88, %c0_i64_25 : i64
    %90 = llvm.getelementptr %8[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %90 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb10:  // 2 preds: ^bb30, ^bb35
    %c0_i32_26 = arith.constant 0 : i32
    %c1049420_i64 = arith.constant 1049420 : i64
    %91 = arith.extui %c0_i32_26 : i32 to i64
    %92 = arith.addi %91, %c1049420_i64 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %94, %1 : i32, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    %95 = arith.cmpi eq, %94, %c0_i32_27 : i32
    %96 = arith.extui %95 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %97 = arith.cmpi ne, %96, %c0_i32_28 : i32
    cf.cond_br %97, ^bb40, ^bb41
  ^bb11:  // pred: ^bb14
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %c248_i32 = arith.constant 248 : i32
    %99 = arith.andi %98, %c248_i32 : i32
    %c1049428_i32 = arith.constant 1049428 : i32
    %100 = arith.addi %99, %c1049428_i32 : i32
    llvm.store %100, %3 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    %c1049692_i64 = arith.constant 1049692 : i64
    %101 = arith.extui %c0_i32_29 : i32 to i64
    %102 = arith.addi %101, %c1049692_i64 : i64
    %103 = llvm.getelementptr %8[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %104, %2 : i32, !llvm.ptr
    %c1_i32_30 = arith.constant 1 : i32
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_31 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %106 = arith.cmpi ule, %c3_i32_31, %c31_i32 : i32
    %107 = scf.if %106 -> (i32) {
      %384 = arith.shrui %105, %c3_i32_31 : i32
      scf.yield %384 : i32
    } else {
      %c0_i32_131 = arith.constant 0 : i32
      scf.yield %c0_i32_131 : i32
    }
    %c31_i32_32 = arith.constant 31 : i32
    %108 = arith.cmpi ule, %107, %c31_i32_32 : i32
    %109 = scf.if %108 -> (i32) {
      %384 = arith.shli %c1_i32_30, %107 : i32
      scf.yield %384 : i32
    } else {
      %c0_i32_131 = arith.constant 0 : i32
      scf.yield %c0_i32_131 : i32
    }
    llvm.store %109, %0 : i32, !llvm.ptr
    %110 = arith.andi %104, %109 : i32
    %c0_i32_33 = arith.constant 0 : i32
    %111 = arith.cmpi ne, %110, %c0_i32_33 : i32
    cf.cond_br %111, ^bb38, ^bb39
  ^bb12:  // 2 preds: ^bb17, ^bb32
    %c0_i32_34 = arith.constant 0 : i32
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c1049708_i64_35 = arith.constant 1049708 : i64
    %113 = arith.extui %c0_i32_34 : i32 to i64
    %114 = arith.addi %113, %c1049708_i64_35 : i64
    %115 = llvm.getelementptr %8[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_36 = arith.constant 0 : i32
    %c0_i32_37 = arith.constant 0 : i32
    %c1049700_i64_38 = arith.constant 1049700 : i64
    %116 = arith.extui %c0_i32_37 : i32 to i64
    %117 = arith.addi %116, %c1049700_i64_38 : i64
    %118 = llvm.getelementptr %8[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i32
    %120 = llvm.load %0 : !llvm.ptr -> i32
    %121 = arith.addi %119, %120 : i32
    llvm.store %121, %0 : i32, !llvm.ptr
    %c1049700_i64_39 = arith.constant 1049700 : i64
    %122 = arith.extui %c0_i32_36 : i32 to i64
    %123 = arith.addi %122, %c1049700_i64_39 : i64
    %124 = llvm.getelementptr %8[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %124 {alignment = 1 : i64} : i32, !llvm.ptr
    %125 = llvm.load %1 : !llvm.ptr -> i32
    %126 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_40 = arith.constant 1 : i32
    %127 = arith.ori %126, %c1_i32_40 : i32
    %c4_i64_41 = arith.constant 4 : i64
    %128 = arith.extui %125 : i32 to i64
    %129 = arith.addi %128, %c4_i64_41 : i64
    %130 = llvm.getelementptr %8[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %127, %130 {alignment = 1 : i64} : i32, !llvm.ptr
    %131 = llvm.load %1 : !llvm.ptr -> i32
    %132 = llvm.load %0 : !llvm.ptr -> i32
    %133 = arith.addi %131, %132 : i32
    %134 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %135 = arith.extui %133 : i32 to i64
    %136 = arith.addi %135, %c0_i64_42 : i64
    %137 = llvm.getelementptr %8[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %137 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb13:  // pred: ^bb16
    %c0_i32_43 = arith.constant 0 : i32
    %138 = llvm.load %1 : !llvm.ptr -> i32
    %c1049712_i64 = arith.constant 1049712 : i64
    %139 = arith.extui %c0_i32_43 : i32 to i64
    %140 = arith.addi %139, %c1049712_i64 : i64
    %141 = llvm.getelementptr %8[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %141 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_44 = arith.constant 0 : i32
    %c0_i32_45 = arith.constant 0 : i32
    %c1049704_i64 = arith.constant 1049704 : i64
    %142 = arith.extui %c0_i32_45 : i32 to i64
    %143 = arith.addi %142, %c1049704_i64 : i64
    %144 = llvm.getelementptr %8[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %146 = llvm.load %0 : !llvm.ptr -> i32
    %147 = arith.addi %145, %146 : i32
    llvm.store %147, %0 : i32, !llvm.ptr
    %c1049704_i64_46 = arith.constant 1049704 : i64
    %148 = arith.extui %c0_i32_44 : i32 to i64
    %149 = arith.addi %148, %c1049704_i64_46 : i64
    %150 = llvm.getelementptr %8[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %147, %150 {alignment = 1 : i64} : i32, !llvm.ptr
    %151 = llvm.load %1 : !llvm.ptr -> i32
    %152 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_47 = arith.constant 1 : i32
    %153 = arith.ori %152, %c1_i32_47 : i32
    %c4_i64_48 = arith.constant 4 : i64
    %154 = arith.extui %151 : i32 to i64
    %155 = arith.addi %154, %c4_i64_48 : i64
    %156 = llvm.getelementptr %8[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %153, %156 {alignment = 1 : i64} : i32, !llvm.ptr
    %157 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %c1049708_i64_50 = arith.constant 1049708 : i64
    %158 = arith.extui %c0_i32_49 : i32 to i64
    %159 = arith.addi %158, %c1049708_i64_50 : i64
    %160 = llvm.getelementptr %8[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i32
    %162 = arith.cmpi eq, %157, %161 : i32
    %163 = arith.extui %162 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %164 = arith.cmpi eq, %163, %c0_i32_51 : i32
    %165 = arith.extui %164 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %166 = arith.cmpi ne, %165, %c0_i32_52 : i32
    cf.cond_br %166, ^bb27, ^bb28
  ^bb14:  // 2 preds: ^bb15, ^bb18
    %167 = llvm.load %0 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %168 = arith.cmpi ult, %167, %c256_i32 : i32
    %169 = arith.extui %168 : i1 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %170 = arith.cmpi ne, %169, %c0_i32_53 : i32
    cf.cond_br %170, ^bb11, ^bb20
  ^bb15:  // pred: ^bb4
    %171 = llvm.load %3 : !llvm.ptr -> i32
    %172 = llvm.load %2 : !llvm.ptr -> i32
    %c-2_i32_54 = arith.constant -2 : i32
    %173 = arith.andi %172, %c-2_i32_54 : i32
    %c4_i64_55 = arith.constant 4 : i64
    %174 = arith.extui %171 : i32 to i64
    %175 = arith.addi %174, %c4_i64_55 : i64
    %176 = llvm.getelementptr %8[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %173, %176 {alignment = 1 : i64} : i32, !llvm.ptr
    %177 = llvm.load %1 : !llvm.ptr -> i32
    %178 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_56 = arith.constant 1 : i32
    %179 = arith.ori %178, %c1_i32_56 : i32
    %c4_i64_57 = arith.constant 4 : i64
    %180 = arith.extui %177 : i32 to i64
    %181 = arith.addi %180, %c4_i64_57 : i64
    %182 = llvm.getelementptr %8[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %179, %182 {alignment = 1 : i64} : i32, !llvm.ptr
    %183 = llvm.load %1 : !llvm.ptr -> i32
    %184 = llvm.load %0 : !llvm.ptr -> i32
    %185 = arith.addi %183, %184 : i32
    %186 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_58 = arith.constant 0 : i64
    %187 = arith.extui %185 : i32 to i64
    %188 = arith.addi %187, %c0_i64_58 : i64
    %189 = llvm.getelementptr %8[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %186, %189 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb14
  ^bb16:  // pred: ^bb4
    %190 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_59 = arith.constant 0 : i32
    %c1049712_i64_60 = arith.constant 1049712 : i64
    %191 = arith.extui %c0_i32_59 : i32 to i64
    %192 = arith.addi %191, %c1049712_i64_60 : i64
    %193 = llvm.getelementptr %8[%192] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %194 = llvm.load volatile %193 {alignment = 1 : i64} : !llvm.ptr -> i32
    %195 = arith.cmpi eq, %190, %194 : i32
    %196 = arith.extui %195 : i1 to i32
    %c0_i32_61 = arith.constant 0 : i32
    %197 = arith.cmpi ne, %196, %c0_i32_61 : i32
    cf.cond_br %197, ^bb13, ^bb17
  ^bb17:  // pred: ^bb16
    %198 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_62 = arith.constant 0 : i32
    %c1049708_i64_63 = arith.constant 1049708 : i64
    %199 = arith.extui %c0_i32_62 : i32 to i64
    %200 = arith.addi %199, %c1049708_i64_63 : i64
    %201 = llvm.getelementptr %8[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %202 = llvm.load volatile %201 {alignment = 1 : i64} : !llvm.ptr -> i32
    %203 = arith.cmpi eq, %198, %202 : i32
    %204 = arith.extui %203 : i1 to i32
    %c0_i32_64 = arith.constant 0 : i32
    %205 = arith.cmpi ne, %204, %c0_i32_64 : i32
    cf.cond_br %205, ^bb12, ^bb18
  ^bb18:  // pred: ^bb17
    %206 = llvm.load %3 : !llvm.ptr -> i32
    %207 = llvm.load %2 : !llvm.ptr -> i32
    %c-8_i32_65 = arith.constant -8 : i32
    %208 = arith.andi %207, %c-8_i32_65 : i32
    llvm.store %208, %2 : i32, !llvm.ptr
    call @f16(%arg0, %206, %208) : (!llvm.ptr, i32, i32) -> ()
    %209 = llvm.load %1 : !llvm.ptr -> i32
    %210 = llvm.load %2 : !llvm.ptr -> i32
    %211 = llvm.load %0 : !llvm.ptr -> i32
    %212 = arith.addi %210, %211 : i32
    llvm.store %212, %0 : i32, !llvm.ptr
    %c1_i32_66 = arith.constant 1 : i32
    %213 = arith.ori %212, %c1_i32_66 : i32
    %c4_i64_67 = arith.constant 4 : i64
    %214 = arith.extui %209 : i32 to i64
    %215 = arith.addi %214, %c4_i64_67 : i64
    %216 = llvm.getelementptr %8[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %213, %216 {alignment = 1 : i64} : i32, !llvm.ptr
    %217 = llvm.load %1 : !llvm.ptr -> i32
    %218 = llvm.load %0 : !llvm.ptr -> i32
    %219 = arith.addi %217, %218 : i32
    %220 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_68 = arith.constant 0 : i64
    %221 = arith.extui %219 : i32 to i64
    %222 = arith.addi %221, %c0_i64_68 : i64
    %223 = llvm.getelementptr %8[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %220, %223 {alignment = 1 : i64} : i32, !llvm.ptr
    %224 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_69 = arith.constant 0 : i32
    %c1049708_i64_70 = arith.constant 1049708 : i64
    %225 = arith.extui %c0_i32_69 : i32 to i64
    %226 = arith.addi %225, %c1049708_i64_70 : i64
    %227 = llvm.getelementptr %8[%226] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %228 = llvm.load volatile %227 {alignment = 1 : i64} : !llvm.ptr -> i32
    %229 = arith.cmpi eq, %224, %228 : i32
    %230 = arith.extui %229 : i1 to i32
    %c0_i32_71 = arith.constant 0 : i32
    %231 = arith.cmpi eq, %230, %c0_i32_71 : i32
    %232 = arith.extui %231 : i1 to i32
    %c0_i32_72 = arith.constant 0 : i32
    %233 = arith.cmpi ne, %232, %c0_i32_72 : i32
    cf.cond_br %233, ^bb14, ^bb19
  ^bb19:  // pred: ^bb18
    %c0_i32_73 = arith.constant 0 : i32
    %234 = llvm.load %0 : !llvm.ptr -> i32
    %c1049700_i64_74 = arith.constant 1049700 : i64
    %235 = arith.extui %c0_i32_73 : i32 to i64
    %236 = arith.addi %235, %c1049700_i64_74 : i64
    %237 = llvm.getelementptr %8[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %234, %237 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb20:  // pred: ^bb14
    %238 = llvm.load %1 : !llvm.ptr -> i32
    %239 = llvm.load %0 : !llvm.ptr -> i32
    call @f18(%arg0, %238, %239) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_75 = arith.constant 0 : i32
    llvm.store %c0_i32_75, %1 : i32, !llvm.ptr
    %c0_i32_76 = arith.constant 0 : i32
    %c0_i32_77 = arith.constant 0 : i32
    %c1049732_i64 = arith.constant 1049732 : i64
    %240 = arith.extui %c0_i32_77 : i32 to i64
    %241 = arith.addi %240, %c1049732_i64 : i64
    %242 = llvm.getelementptr %8[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %243 = llvm.load volatile %242 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %244 = arith.addi %243, %c-1_i32 : i32
    llvm.store %244, %0 : i32, !llvm.ptr
    %c1049732_i64_78 = arith.constant 1049732 : i64
    %245 = arith.extui %c0_i32_76 : i32 to i64
    %246 = arith.addi %245, %c1049732_i64_78 : i64
    %247 = llvm.getelementptr %8[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %244, %247 {alignment = 1 : i64} : i32, !llvm.ptr
    %248 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_79 = arith.constant 0 : i32
    %249 = arith.cmpi ne, %248, %c0_i32_79 : i32
    cf.cond_br %249, ^bb3, ^bb21
  ^bb21:  // pred: ^bb20
    %c0_i32_80 = arith.constant 0 : i32
    %c1049420_i64_81 = arith.constant 1049420 : i64
    %250 = arith.extui %c0_i32_80 : i32 to i64
    %251 = arith.addi %250, %c1049420_i64_81 : i64
    %252 = llvm.getelementptr %8[%251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %253 = llvm.load volatile %252 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %253, %0 : i32, !llvm.ptr
    %c0_i32_82 = arith.constant 0 : i32
    %254 = arith.cmpi eq, %253, %c0_i32_82 : i32
    %255 = arith.extui %254 : i1 to i32
    %c0_i32_83 = arith.constant 0 : i32
    %256 = arith.cmpi ne, %255, %c0_i32_83 : i32
    cf.cond_br %256, ^bb22, ^bb23
  ^bb22:  // 2 preds: ^bb21, ^bb24
    %c0_i32_84 = arith.constant 0 : i32
    %257 = llvm.load %1 : !llvm.ptr -> i32
    %c4095_i32 = arith.constant 4095 : i32
    %258 = llvm.load %1 : !llvm.ptr -> i32
    %c4095_i32_85 = arith.constant 4095 : i32
    %259 = arith.cmpi ugt, %258, %c4095_i32_85 : i32
    %260 = arith.extui %259 : i1 to i32
    %c0_i32_86 = arith.constant 0 : i32
    %261 = arith.cmpi ne, %260, %c0_i32_86 : i32
    %262 = arith.select %261, %257, %c4095_i32 : i32
    %c1049732_i64_87 = arith.constant 1049732 : i64
    %263 = arith.extui %c0_i32_84 : i32 to i64
    %264 = arith.addi %263, %c1049732_i64_87 : i64
    %265 = llvm.getelementptr %8[%264] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %262, %265 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb23:  // pred: ^bb21
    %c0_i32_88 = arith.constant 0 : i32
    llvm.store %c0_i32_88, %1 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb24:  // pred: ^bb26
    cf.br ^bb22
  ^bb25:  // 2 preds: ^bb23, ^bb25
    %266 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_89 = arith.constant 1 : i32
    %267 = arith.addi %266, %c1_i32_89 : i32
    llvm.store %267, %1 : i32, !llvm.ptr
    %268 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %269 = arith.extui %268 : i32 to i64
    %270 = arith.addi %269, %c8_i64 : i64
    %271 = llvm.getelementptr %8[%270] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %272 = llvm.load volatile %271 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %272, %0 : i32, !llvm.ptr
    %c0_i32_90 = arith.constant 0 : i32
    %273 = arith.cmpi ne, %272, %c0_i32_90 : i32
    cf.cond_br %273, ^bb25, ^bb26
  ^bb26:  // pred: ^bb25
    cf.br ^bb24
  ^bb27:  // 2 preds: ^bb13, ^bb28
    %274 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_91 = arith.constant 0 : i32
    %c1049724_i64 = arith.constant 1049724 : i64
    %275 = arith.extui %c0_i32_91 : i32 to i64
    %276 = arith.addi %275, %c1049724_i64 : i64
    %277 = llvm.getelementptr %8[%276] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %278 = llvm.load volatile %277 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %278, %4 : i32, !llvm.ptr
    %279 = arith.cmpi ule, %274, %278 : i32
    %280 = arith.extui %279 : i1 to i32
    %c0_i32_92 = arith.constant 0 : i32
    %281 = arith.cmpi ne, %280, %c0_i32_92 : i32
    cf.cond_br %281, ^bb3, ^bb29
  ^bb28:  // pred: ^bb13
    %c0_i32_93 = arith.constant 0 : i32
    %c0_i32_94 = arith.constant 0 : i32
    %c1049700_i64_95 = arith.constant 1049700 : i64
    %282 = arith.extui %c0_i32_93 : i32 to i64
    %283 = arith.addi %282, %c1049700_i64_95 : i64
    %284 = llvm.getelementptr %8[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_94, %284 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_96 = arith.constant 0 : i32
    %c0_i32_97 = arith.constant 0 : i32
    %c1049708_i64_98 = arith.constant 1049708 : i64
    %285 = arith.extui %c0_i32_96 : i32 to i64
    %286 = arith.addi %285, %c1049708_i64_98 : i64
    %287 = llvm.getelementptr %8[%286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_97, %287 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb27
  ^bb29:  // pred: ^bb27
    %c0_i32_99 = arith.constant 0 : i32
    %c1049712_i64_100 = arith.constant 1049712 : i64
    %288 = arith.extui %c0_i32_99 : i32 to i64
    %289 = arith.addi %288, %c1049712_i64_100 : i64
    %290 = llvm.getelementptr %8[%289] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %291 = llvm.load volatile %290 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %291, %0 : i32, !llvm.ptr
    %c0_i32_101 = arith.constant 0 : i32
    %292 = arith.cmpi eq, %291, %c0_i32_101 : i32
    %293 = arith.extui %292 : i1 to i32
    %c0_i32_102 = arith.constant 0 : i32
    %294 = arith.cmpi ne, %293, %c0_i32_102 : i32
    cf.cond_br %294, ^bb3, ^bb30
  ^bb30:  // pred: ^bb29
    %c0_i32_103 = arith.constant 0 : i32
    llvm.store %c0_i32_103, %2 : i32, !llvm.ptr
    %c0_i32_104 = arith.constant 0 : i32
    %c1049704_i64_105 = arith.constant 1049704 : i64
    %295 = arith.extui %c0_i32_104 : i32 to i64
    %296 = arith.addi %295, %c1049704_i64_105 : i64
    %297 = llvm.getelementptr %8[%296] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %298 = llvm.load volatile %297 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %298, %5 : i32, !llvm.ptr
    %c41_i32 = arith.constant 41 : i32
    %299 = arith.cmpi ult, %298, %c41_i32 : i32
    %300 = arith.extui %299 : i1 to i32
    %c0_i32_106 = arith.constant 0 : i32
    %301 = arith.cmpi ne, %300, %c0_i32_106 : i32
    cf.cond_br %301, ^bb10, ^bb31
  ^bb31:  // pred: ^bb30
    %c1049412_i32 = arith.constant 1049412 : i32
    llvm.store %c1049412_i32, %1 : i32, !llvm.ptr
    cf.br ^bb33
  ^bb32:  // no predecessors
    cf.br ^bb12
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %302 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_107 = arith.constant 0 : i64
    %303 = arith.extui %302 : i32 to i64
    %304 = arith.addi %303, %c0_i64_107 : i64
    %305 = llvm.getelementptr %8[%304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %306 = llvm.load volatile %305 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %306, %3 : i32, !llvm.ptr
    %307 = llvm.load %0 : !llvm.ptr -> i32
    %308 = arith.cmpi ugt, %306, %307 : i32
    %309 = arith.extui %308 : i1 to i32
    %c0_i32_108 = arith.constant 0 : i32
    %310 = arith.cmpi ne, %309, %c0_i32_108 : i32
    cf.cond_br %310, ^bb34, ^bb35
  ^bb34:  // 2 preds: ^bb33, ^bb36
    %311 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_109 = arith.constant 8 : i64
    %312 = arith.extui %311 : i32 to i64
    %313 = arith.addi %312, %c8_i64_109 : i64
    %314 = llvm.getelementptr %8[%313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %315 = llvm.load volatile %314 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %315, %1 : i32, !llvm.ptr
    cf.br ^bb33
  ^bb35:  // pred: ^bb33
    %316 = llvm.load %0 : !llvm.ptr -> i32
    %317 = llvm.load %3 : !llvm.ptr -> i32
    %318 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_110 = arith.constant 4 : i64
    %319 = arith.extui %318 : i32 to i64
    %320 = arith.addi %319, %c4_i64_110 : i64
    %321 = llvm.getelementptr %8[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %322 = llvm.load volatile %321 {alignment = 1 : i64} : !llvm.ptr -> i32
    %323 = arith.addi %317, %322 : i32
    %324 = arith.cmpi ult, %316, %323 : i32
    %325 = arith.extui %324 : i1 to i32
    %c0_i32_111 = arith.constant 0 : i32
    %326 = arith.cmpi ne, %325, %c0_i32_111 : i32
    cf.cond_br %326, ^bb10, ^bb36
  ^bb36:  // pred: ^bb35
    cf.br ^bb34
  ^bb37:  // 2 preds: ^bb38, ^bb39
    %327 = llvm.load %3 : !llvm.ptr -> i32
    %328 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_112 = arith.constant 8 : i64
    %329 = arith.extui %327 : i32 to i64
    %330 = arith.addi %329, %c8_i64_112 : i64
    %331 = llvm.getelementptr %8[%330] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %328, %331 {alignment = 1 : i64} : i32, !llvm.ptr
    %332 = llvm.load %0 : !llvm.ptr -> i32
    %333 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %334 = arith.extui %332 : i32 to i64
    %335 = arith.addi %334, %c12_i64 : i64
    %336 = llvm.getelementptr %8[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %333, %336 {alignment = 1 : i64} : i32, !llvm.ptr
    %337 = llvm.load %1 : !llvm.ptr -> i32
    %338 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_113 = arith.constant 12 : i64
    %339 = arith.extui %337 : i32 to i64
    %340 = arith.addi %339, %c12_i64_113 : i64
    %341 = llvm.getelementptr %8[%340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %338, %341 {alignment = 1 : i64} : i32, !llvm.ptr
    %342 = llvm.load %1 : !llvm.ptr -> i32
    %343 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_114 = arith.constant 8 : i64
    %344 = arith.extui %342 : i32 to i64
    %345 = arith.addi %344, %c8_i64_114 : i64
    %346 = llvm.getelementptr %8[%345] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %343, %346 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb38:  // pred: ^bb11
    %347 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_115 = arith.constant 8 : i64
    %348 = arith.extui %347 : i32 to i64
    %349 = arith.addi %348, %c8_i64_115 : i64
    %350 = llvm.getelementptr %8[%349] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %351 = llvm.load volatile %350 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %351, %0 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb39:  // pred: ^bb11
    %c0_i32_116 = arith.constant 0 : i32
    %352 = llvm.load %2 : !llvm.ptr -> i32
    %353 = llvm.load %0 : !llvm.ptr -> i32
    %354 = arith.ori %352, %353 : i32
    %c1049692_i64_117 = arith.constant 1049692 : i64
    %355 = arith.extui %c0_i32_116 : i32 to i64
    %356 = arith.addi %355, %c1049692_i64_117 : i64
    %357 = llvm.getelementptr %8[%356] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %354, %357 {alignment = 1 : i64} : i32, !llvm.ptr
    %358 = llvm.load %3 : !llvm.ptr -> i32
    llvm.store %358, %0 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb40:  // 2 preds: ^bb10, ^bb42
    %c0_i32_118 = arith.constant 0 : i32
    %359 = llvm.load %2 : !llvm.ptr -> i32
    %c4095_i32_119 = arith.constant 4095 : i32
    %360 = llvm.load %2 : !llvm.ptr -> i32
    %c4095_i32_120 = arith.constant 4095 : i32
    %361 = arith.cmpi ugt, %360, %c4095_i32_120 : i32
    %362 = arith.extui %361 : i1 to i32
    %c0_i32_121 = arith.constant 0 : i32
    %363 = arith.cmpi ne, %362, %c0_i32_121 : i32
    %364 = arith.select %363, %359, %c4095_i32_119 : i32
    %c1049732_i64_122 = arith.constant 1049732 : i64
    %365 = arith.extui %c0_i32_118 : i32 to i64
    %366 = arith.addi %365, %c1049732_i64_122 : i64
    %367 = llvm.getelementptr %8[%366] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %364, %367 {alignment = 1 : i64} : i32, !llvm.ptr
    %368 = llvm.load %5 : !llvm.ptr -> i32
    %369 = llvm.load %4 : !llvm.ptr -> i32
    %370 = arith.cmpi ule, %368, %369 : i32
    %371 = arith.extui %370 : i1 to i32
    %c0_i32_123 = arith.constant 0 : i32
    %372 = arith.cmpi ne, %371, %c0_i32_123 : i32
    cf.cond_br %372, ^bb3, ^bb45
  ^bb41:  // pred: ^bb10
    %c0_i32_124 = arith.constant 0 : i32
    llvm.store %c0_i32_124, %2 : i32, !llvm.ptr
    cf.br ^bb43
  ^bb42:  // pred: ^bb44
    cf.br ^bb40
  ^bb43:  // 2 preds: ^bb41, ^bb43
    %373 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_125 = arith.constant 1 : i32
    %374 = arith.addi %373, %c1_i32_125 : i32
    llvm.store %374, %2 : i32, !llvm.ptr
    %375 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_126 = arith.constant 8 : i64
    %376 = arith.extui %375 : i32 to i64
    %377 = arith.addi %376, %c8_i64_126 : i64
    %378 = llvm.getelementptr %8[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %379, %1 : i32, !llvm.ptr
    %c0_i32_127 = arith.constant 0 : i32
    %380 = arith.cmpi ne, %379, %c0_i32_127 : i32
    cf.cond_br %380, ^bb43, ^bb44
  ^bb44:  // pred: ^bb43
    cf.br ^bb42
  ^bb45:  // pred: ^bb40
    %c0_i32_128 = arith.constant 0 : i32
    %c-1_i32_129 = arith.constant -1 : i32
    %c1049724_i64_130 = arith.constant 1049724 : i64
    %381 = arith.extui %c0_i32_128 : i32 to i64
    %382 = arith.addi %381, %c1049724_i64_130 : i64
    %383 = llvm.getelementptr %8[%382] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-1_i32_129, %383 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f20(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %10 : i64, !llvm.ptr
    %11 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %16 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %17 = arith.subi %16, %c16_i32 : i32
    llvm.store %17, %1 : i32, !llvm.ptr
    llvm.store %17, %12 : i32, !llvm.ptr
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c245_i32 = arith.constant 245 : i32
    %19 = arith.cmpi ult, %18, %c245_i32 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_10 : i32
    cf.cond_br %21, ^bb10, ^bb11
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 11 preds: ^bb13, ^bb28, ^bb58, ^bb66, ^bb100, ^bb101, ^bb107, ^bb110, ^bb160, ^bb163, ^bb167
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_11 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32_11 : i32
    llvm.store %24, %12 : i32, !llvm.ptr
    %25 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%25 : i32)
  ^bb4:  // 5 preds: ^bb87, ^bb97, ^bb99, ^bb164, ^bb166
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_12 = arith.constant 16 : i32
    %27 = arith.cmpi ult, %26, %c16_i32_12 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_13 : i32
    cf.cond_br %29, ^bb168, ^bb169
  ^bb5:  // 2 preds: ^bb96, ^bb98
    %30 = llvm.load %0 : !llvm.ptr -> i32
    %31 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %32 = arith.extui %30 : i32 to i64
    %33 = arith.addi %32, %c24_i64 : i64
    %34 = llvm.getelementptr %15[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    %35 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c16_i64 : i64
    %38 = llvm.getelementptr %15[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %39, %6 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %39, %c0_i32_14 : i32
    %41 = arith.extui %40 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_15 : i32
    cf.cond_br %42, ^bb164, ^bb165
  ^bb6:  // 6 preds: ^bb7, ^bb12, ^bb26, ^bb35, ^bb75, ^bb85
    %c0_i32_16 = arith.constant 0 : i32
    %c1049700_i64 = arith.constant 1049700 : i64
    %43 = arith.extui %c0_i32_16 : i32 to i64
    %44 = arith.addi %43, %c1049700_i64 : i64
    %45 = llvm.getelementptr %15[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %46, %0 : i32, !llvm.ptr
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %48 = arith.cmpi uge, %46, %47 : i32
    %49 = arith.extui %48 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_17 : i32
    cf.cond_br %50, ^bb105, ^bb106
  ^bb7:  // 2 preds: ^bb74, ^bb78
    %51 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %52 = arith.cmpi eq, %51, %c0_i32_18 : i32
    %53 = arith.extui %52 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %54 = arith.cmpi ne, %53, %c0_i32_19 : i32
    cf.cond_br %54, ^bb6, ^bb83
  ^bb8:  // 2 preds: ^bb24, ^bb77
    cf.br ^bb79
  ^bb9:  // 2 preds: ^bb18, ^bb21
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %7 : !llvm.ptr -> i32
    %57 = arith.ori %55, %56 : i32
    %c0_i32_20 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_20 : i32
    cf.cond_br %58, ^bb74, ^bb75
  ^bb10:  // 2 preds: ^bb1, ^bb19
    %c0_i32_21 = arith.constant 0 : i32
    %c1049692_i64 = arith.constant 1049692 : i64
    %59 = arith.extui %c0_i32_21 : i32 to i64
    %60 = arith.addi %59, %c1049692_i64 : i64
    %61 = llvm.getelementptr %15[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = llvm.load volatile %61 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %62, %6 : i32, !llvm.ptr
    %c16_i32_22 = arith.constant 16 : i32
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c11_i32 = arith.constant 11 : i32
    %64 = arith.addi %63, %c11_i32 : i32
    %c504_i32 = arith.constant 504 : i32
    %65 = arith.andi %64, %c504_i32 : i32
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %c11_i32_23 = arith.constant 11 : i32
    %67 = arith.cmpi ult, %66, %c11_i32_23 : i32
    %68 = arith.extui %67 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_24 : i32
    %70 = arith.select %69, %c16_i32_22, %65 : i32
    llvm.store %70, %3 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %71 = arith.cmpi ule, %c3_i32, %c31_i32 : i32
    %72 = scf.if %71 -> (i32) {
      %2078 = arith.shrui %70, %c3_i32 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %72, %2 : i32, !llvm.ptr
    %c31_i32_25 = arith.constant 31 : i32
    %73 = arith.cmpi ule, %72, %c31_i32_25 : i32
    %74 = scf.if %73 -> (i32) {
      %2078 = arith.shrui %62, %72 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %74, %0 : i32, !llvm.ptr
    %c3_i32_26 = arith.constant 3 : i32
    %75 = arith.andi %74, %c3_i32_26 : i32
    %c0_i32_27 = arith.constant 0 : i32
    %76 = arith.cmpi eq, %75, %c0_i32_27 : i32
    %77 = arith.extui %76 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %78 = arith.cmpi ne, %77, %c0_i32_28 : i32
    cf.cond_br %78, ^bb26, ^bb27
  ^bb11:  // pred: ^bb1
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %c-65587_i32 = arith.constant -65587 : i32
    %80 = arith.cmpi ult, %79, %c-65587_i32 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_29 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_29 : i32
    cf.cond_br %82, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %83 = llvm.load %0 : !llvm.ptr -> i32
    %c11_i32_30 = arith.constant 11 : i32
    %84 = arith.addi %83, %c11_i32_30 : i32
    llvm.store %84, %2 : i32, !llvm.ptr
    %c-8_i32 = arith.constant -8 : i32
    %85 = arith.andi %84, %c-8_i32 : i32
    llvm.store %85, %3 : i32, !llvm.ptr
    %c0_i32_31 = arith.constant 0 : i32
    %c1049696_i64 = arith.constant 1049696 : i64
    %86 = arith.extui %c0_i32_31 : i32 to i64
    %87 = arith.addi %86, %c1049696_i64 : i64
    %88 = llvm.getelementptr %15[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load volatile %88 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %89, %4 : i32, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    %90 = arith.cmpi eq, %89, %c0_i32_32 : i32
    %91 = arith.extui %90 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %92 = arith.cmpi ne, %91, %c0_i32_33 : i32
    cf.cond_br %92, ^bb6, ^bb14
  ^bb13:  // pred: ^bb11
    %c0_i32_34 = arith.constant 0 : i32
    llvm.store %c0_i32_34, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb12
    %c31_i32_35 = arith.constant 31 : i32
    llvm.store %c31_i32_35, %5 : i32, !llvm.ptr
    %93 = llvm.load %0 : !llvm.ptr -> i32
    %c16777204_i32 = arith.constant 16777204 : i32
    %94 = arith.cmpi ugt, %93, %c16777204_i32 : i32
    %95 = arith.extui %94 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %96 = arith.cmpi ne, %95, %c0_i32_36 : i32
    cf.cond_br %96, ^bb15, ^bb16
  ^bb15:  // 2 preds: ^bb14, ^bb16
    %c0_i32_37 = arith.constant 0 : i32
    %97 = llvm.load %3 : !llvm.ptr -> i32
    %98 = arith.subi %c0_i32_37, %97 : i32
    llvm.store %98, %2 : i32, !llvm.ptr
    %99 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32_38 = arith.constant 31 : i32
    %100 = arith.cmpi ule, %c2_i32, %c31_i32_38 : i32
    %101 = scf.if %100 -> (i32) {
      %2078 = arith.shli %99, %c2_i32 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c1049284_i32 = arith.constant 1049284 : i32
    %102 = arith.addi %101, %c1049284_i32 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c0_i64_39 : i64
    %105 = llvm.getelementptr %15[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %106, %6 : i32, !llvm.ptr
    %c0_i32_40 = arith.constant 0 : i32
    %107 = arith.cmpi ne, %106, %c0_i32_40 : i32
    cf.cond_br %107, ^bb17, ^bb18
  ^bb16:  // pred: ^bb14
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_41 = arith.constant 31 : i32
    %110 = arith.cmpi ule, %c8_i32, %c31_i32_41 : i32
    %111 = scf.if %110 -> (i32) {
      %2078 = arith.shrui %109, %c8_i32 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %false = arith.constant false
    %112 = llvm.call_intrinsic "llvm.ctlz.i32"(%111, %false) : (i32, i1) -> i32
    llvm.store %112, %0 : i32, !llvm.ptr
    %113 = arith.subi %c6_i32, %112 : i32
    %c31_i32_42 = arith.constant 31 : i32
    %114 = arith.cmpi ule, %113, %c31_i32_42 : i32
    %115 = scf.if %114 -> (i32) {
      %2078 = arith.shrui %108, %113 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c1_i32_43 = arith.constant 1 : i32
    %116 = arith.andi %115, %c1_i32_43 : i32
    %117 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_44 = arith.constant 1 : i32
    %c31_i32_45 = arith.constant 31 : i32
    %118 = arith.cmpi ule, %c1_i32_44, %c31_i32_45 : i32
    %119 = scf.if %118 -> (i32) {
      %2078 = arith.shli %117, %c1_i32_44 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %120 = arith.subi %116, %119 : i32
    %c62_i32 = arith.constant 62 : i32
    %121 = arith.addi %120, %c62_i32 : i32
    llvm.store %121, %5 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    %c0_i32_46 = arith.constant 0 : i32
    llvm.store %c0_i32_46, %0 : i32, !llvm.ptr
    %122 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_47 = arith.constant 0 : i32
    %c25_i32 = arith.constant 25 : i32
    %123 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_48 = arith.constant 1 : i32
    %c31_i32_49 = arith.constant 31 : i32
    %124 = arith.cmpi ule, %c1_i32_48, %c31_i32_49 : i32
    %125 = scf.if %124 -> (i32) {
      %2078 = arith.shrui %123, %c1_i32_48 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %126 = arith.subi %c25_i32, %125 : i32
    %127 = llvm.load %5 : !llvm.ptr -> i32
    %c31_i32_50 = arith.constant 31 : i32
    %128 = arith.cmpi eq, %127, %c31_i32_50 : i32
    %129 = arith.extui %128 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %130 = arith.cmpi ne, %129, %c0_i32_51 : i32
    %131 = arith.select %130, %c0_i32_47, %126 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %132 = arith.cmpi ule, %131, %c31_i32_52 : i32
    %133 = scf.if %132 -> (i32) {
      %2078 = arith.shli %122, %131 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %133, %8 : i32, !llvm.ptr
    %c0_i32_53 = arith.constant 0 : i32
    llvm.store %c0_i32_53, %7 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb18:  // pred: ^bb15
    %c0_i32_54 = arith.constant 0 : i32
    llvm.store %c0_i32_54, %0 : i32, !llvm.ptr
    %c0_i32_55 = arith.constant 0 : i32
    llvm.store %c0_i32_55, %7 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb19:  // no predecessors
    cf.br ^bb10
  ^bb20:  // 2 preds: ^bb17, ^bb25
    %134 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %134, %6 : i32, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c4_i64 : i64
    %137 = llvm.getelementptr %15[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load volatile %137 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-8_i32_56 = arith.constant -8 : i32
    %139 = arith.andi %138, %c-8_i32_56 : i32
    llvm.store %139, %9 : i32, !llvm.ptr
    %140 = llvm.load %3 : !llvm.ptr -> i32
    %141 = arith.cmpi ult, %139, %140 : i32
    %142 = arith.extui %141 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %143 = arith.cmpi ne, %142, %c0_i32_57 : i32
    cf.cond_br %143, ^bb21, ^bb22
  ^bb21:  // 3 preds: ^bb20, ^bb22, ^bb23
    %144 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c20_i64 : i64
    %147 = llvm.getelementptr %15[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %148, %9 : i32, !llvm.ptr
    %149 = llvm.load %0 : !llvm.ptr -> i32
    %150 = llvm.load %9 : !llvm.ptr -> i32
    %151 = llvm.load %6 : !llvm.ptr -> i32
    %152 = llvm.load %8 : !llvm.ptr -> i32
    %c29_i32 = arith.constant 29 : i32
    %c31_i32_58 = arith.constant 31 : i32
    %153 = arith.cmpi ule, %c29_i32, %c31_i32_58 : i32
    %154 = scf.if %153 -> (i32) {
      %2078 = arith.shrui %152, %c29_i32 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c4_i32 = arith.constant 4 : i32
    %155 = arith.andi %154, %c4_i32 : i32
    %156 = arith.addi %151, %155 : i32
    %c16_i32_59 = arith.constant 16 : i32
    %157 = arith.addi %156, %c16_i32_59 : i32
    %c0_i64_60 = arith.constant 0 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c0_i64_60 : i64
    %160 = llvm.getelementptr %15[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %161, %6 : i32, !llvm.ptr
    %162 = arith.cmpi eq, %150, %161 : i32
    %163 = arith.extui %162 : i1 to i32
    %c0_i32_61 = arith.constant 0 : i32
    %164 = arith.cmpi eq, %163, %c0_i32_61 : i32
    %165 = arith.extui %164 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %166 = arith.cmpi ne, %165, %c0_i32_62 : i32
    %167 = arith.select %166, %148, %149 : i32
    %168 = llvm.load %0 : !llvm.ptr -> i32
    %169 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_63 = arith.constant 0 : i32
    %170 = arith.cmpi ne, %169, %c0_i32_63 : i32
    %171 = arith.select %170, %167, %168 : i32
    llvm.store %171, %0 : i32, !llvm.ptr
    %172 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_64 = arith.constant 1 : i32
    %c31_i32_65 = arith.constant 31 : i32
    %173 = arith.cmpi ule, %c1_i32_64, %c31_i32_65 : i32
    %174 = scf.if %173 -> (i32) {
      %2078 = arith.shli %172, %c1_i32_64 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %174, %8 : i32, !llvm.ptr
    %175 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_66 = arith.constant 0 : i32
    %176 = arith.cmpi eq, %175, %c0_i32_66 : i32
    %177 = arith.extui %176 : i1 to i32
    %c0_i32_67 = arith.constant 0 : i32
    %178 = arith.cmpi ne, %177, %c0_i32_67 : i32
    cf.cond_br %178, ^bb9, ^bb25
  ^bb22:  // pred: ^bb20
    %179 = llvm.load %9 : !llvm.ptr -> i32
    %180 = llvm.load %3 : !llvm.ptr -> i32
    %181 = arith.subi %179, %180 : i32
    llvm.store %181, %9 : i32, !llvm.ptr
    %182 = llvm.load %2 : !llvm.ptr -> i32
    %183 = arith.cmpi uge, %181, %182 : i32
    %184 = arith.extui %183 : i1 to i32
    %c0_i32_68 = arith.constant 0 : i32
    %185 = arith.cmpi ne, %184, %c0_i32_68 : i32
    cf.cond_br %185, ^bb21, ^bb23
  ^bb23:  // pred: ^bb22
    %186 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %186, %2 : i32, !llvm.ptr
    %187 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %187, %7 : i32, !llvm.ptr
    %188 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_69 = arith.constant 0 : i32
    %189 = arith.cmpi ne, %188, %c0_i32_69 : i32
    cf.cond_br %189, ^bb21, ^bb24
  ^bb24:  // pred: ^bb23
    %c0_i32_70 = arith.constant 0 : i32
    llvm.store %c0_i32_70, %2 : i32, !llvm.ptr
    %190 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %190, %7 : i32, !llvm.ptr
    %191 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %191, %0 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb25:  // pred: ^bb21
    cf.br ^bb20
  ^bb26:  // pred: ^bb10
    %192 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_71 = arith.constant 0 : i32
    %c1049700_i64_72 = arith.constant 1049700 : i64
    %193 = arith.extui %c0_i32_71 : i32 to i64
    %194 = arith.addi %193, %c1049700_i64_72 : i64
    %195 = llvm.getelementptr %15[%194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %196 = llvm.load volatile %195 {alignment = 1 : i64} : !llvm.ptr -> i32
    %197 = arith.cmpi ule, %192, %196 : i32
    %198 = arith.extui %197 : i1 to i32
    %c0_i32_73 = arith.constant 0 : i32
    %199 = arith.cmpi ne, %198, %c0_i32_73 : i32
    cf.cond_br %199, ^bb6, ^bb31
  ^bb27:  // pred: ^bb10
    %200 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %201 = arith.xori %200, %c-1_i32 : i32
    %c1_i32_74 = arith.constant 1 : i32
    %202 = arith.andi %201, %c1_i32_74 : i32
    %203 = llvm.load %2 : !llvm.ptr -> i32
    %204 = arith.addi %202, %203 : i32
    llvm.store %204, %8 : i32, !llvm.ptr
    %c3_i32_75 = arith.constant 3 : i32
    %c31_i32_76 = arith.constant 31 : i32
    %205 = arith.cmpi ule, %c3_i32_75, %c31_i32_76 : i32
    %206 = scf.if %205 -> (i32) {
      %2078 = arith.shli %204, %c3_i32_75 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %206, %3 : i32, !llvm.ptr
    %c1049428_i32 = arith.constant 1049428 : i32
    %207 = arith.addi %206, %c1049428_i32 : i32
    llvm.store %207, %0 : i32, !llvm.ptr
    %208 = llvm.load %3 : !llvm.ptr -> i32
    %c1049436_i32 = arith.constant 1049436 : i32
    %209 = arith.addi %208, %c1049436_i32 : i32
    %c0_i64_77 = arith.constant 0 : i64
    %210 = arith.extui %209 : i32 to i64
    %211 = arith.addi %210, %c0_i64_77 : i64
    %212 = llvm.getelementptr %15[%211] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %213 = llvm.load volatile %212 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %213, %2 : i32, !llvm.ptr
    %c8_i64 = arith.constant 8 : i64
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.addi %214, %c8_i64 : i64
    %216 = llvm.getelementptr %15[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %217, %7 : i32, !llvm.ptr
    %218 = arith.cmpi eq, %207, %217 : i32
    %219 = arith.extui %218 : i1 to i32
    %c0_i32_78 = arith.constant 0 : i32
    %220 = arith.cmpi ne, %219, %c0_i32_78 : i32
    cf.cond_br %220, ^bb29, ^bb30
  ^bb28:  // 2 preds: ^bb29, ^bb30
    %221 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_79 = arith.constant 8 : i32
    %222 = arith.addi %221, %c8_i32_79 : i32
    llvm.store %222, %0 : i32, !llvm.ptr
    %223 = llvm.load %2 : !llvm.ptr -> i32
    %224 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_80 = arith.constant 3 : i32
    %225 = arith.ori %224, %c3_i32_80 : i32
    %c4_i64_81 = arith.constant 4 : i64
    %226 = arith.extui %223 : i32 to i64
    %227 = arith.addi %226, %c4_i64_81 : i64
    %228 = llvm.getelementptr %15[%227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %225, %228 {alignment = 1 : i64} : i32, !llvm.ptr
    %229 = llvm.load %2 : !llvm.ptr -> i32
    %230 = llvm.load %3 : !llvm.ptr -> i32
    %231 = arith.addi %229, %230 : i32
    llvm.store %231, %3 : i32, !llvm.ptr
    %232 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_82 = arith.constant 4 : i64
    %233 = arith.extui %232 : i32 to i64
    %234 = arith.addi %233, %c4_i64_82 : i64
    %235 = llvm.getelementptr %15[%234] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %236 = llvm.load volatile %235 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_83 = arith.constant 1 : i32
    %237 = arith.ori %236, %c1_i32_83 : i32
    %c4_i64_84 = arith.constant 4 : i64
    %238 = arith.extui %231 : i32 to i64
    %239 = arith.addi %238, %c4_i64_84 : i64
    %240 = llvm.getelementptr %15[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %237, %240 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb29:  // pred: ^bb27
    %c0_i32_85 = arith.constant 0 : i32
    %241 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %242 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %243 = arith.remui %242, %c32_i32 : i32
    %244 = arith.shli %c-2_i32, %243 : i32
    %245 = arith.subi %c32_i32, %243 : i32
    %246 = arith.shrui %c-2_i32, %245 : i32
    %247 = arith.ori %244, %246 : i32
    %248 = arith.andi %241, %247 : i32
    %c1049692_i64_86 = arith.constant 1049692 : i64
    %249 = arith.extui %c0_i32_85 : i32 to i64
    %250 = arith.addi %249, %c1049692_i64_86 : i64
    %251 = llvm.getelementptr %15[%250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %248, %251 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb28
  ^bb30:  // pred: ^bb27
    %252 = llvm.load %7 : !llvm.ptr -> i32
    %253 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %254 = arith.extui %252 : i32 to i64
    %255 = arith.addi %254, %c12_i64 : i64
    %256 = llvm.getelementptr %15[%255] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %253, %256 {alignment = 1 : i64} : i32, !llvm.ptr
    %257 = llvm.load %0 : !llvm.ptr -> i32
    %258 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i64_87 = arith.constant 8 : i64
    %259 = arith.extui %257 : i32 to i64
    %260 = arith.addi %259, %c8_i64_87 : i64
    %261 = llvm.getelementptr %15[%260] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %258, %261 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb26
    %262 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_88 = arith.constant 0 : i32
    %263 = arith.cmpi ne, %262, %c0_i32_88 : i32
    cf.cond_br %263, ^bb34, ^bb35
  ^bb32:  // 5 preds: ^bb42, ^bb52, ^bb54, ^bb63, ^bb65
    %264 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_89 = arith.constant 16 : i32
    %265 = arith.cmpi ult, %264, %c16_i32_89 : i32
    %266 = arith.extui %265 : i1 to i32
    %c0_i32_90 = arith.constant 0 : i32
    %267 = arith.cmpi ne, %266, %c0_i32_90 : i32
    cf.cond_br %267, ^bb68, ^bb69
  ^bb33:  // 2 preds: ^bb51, ^bb53
    %268 = llvm.load %0 : !llvm.ptr -> i32
    %269 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64_91 = arith.constant 24 : i64
    %270 = arith.extui %268 : i32 to i64
    %271 = arith.addi %270, %c24_i64_91 : i64
    %272 = llvm.getelementptr %15[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %269, %272 {alignment = 1 : i64} : i32, !llvm.ptr
    %273 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i64_92 = arith.constant 16 : i64
    %274 = arith.extui %273 : i32 to i64
    %275 = arith.addi %274, %c16_i64_92 : i64
    %276 = llvm.getelementptr %15[%275] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %277 = llvm.load volatile %276 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %277, %7 : i32, !llvm.ptr
    %c0_i32_93 = arith.constant 0 : i32
    %278 = arith.cmpi eq, %277, %c0_i32_93 : i32
    %279 = arith.extui %278 : i1 to i32
    %c0_i32_94 = arith.constant 0 : i32
    %280 = arith.cmpi ne, %279, %c0_i32_94 : i32
    cf.cond_br %280, ^bb63, ^bb64
  ^bb34:  // 2 preds: ^bb31, ^bb37
    %281 = llvm.load %0 : !llvm.ptr -> i32
    %282 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_95 = arith.constant 31 : i32
    %283 = arith.cmpi ule, %282, %c31_i32_95 : i32
    %284 = scf.if %283 -> (i32) {
      %2078 = arith.shli %281, %282 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c2_i32_96 = arith.constant 2 : i32
    %285 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_97 = arith.constant 31 : i32
    %286 = arith.cmpi ule, %285, %c31_i32_97 : i32
    %287 = scf.if %286 -> (i32) {
      %2078 = arith.shli %c2_i32_96, %285 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %287, %0 : i32, !llvm.ptr
    %c0_i32_98 = arith.constant 0 : i32
    %288 = llvm.load %0 : !llvm.ptr -> i32
    %289 = arith.subi %c0_i32_98, %288 : i32
    %290 = arith.ori %287, %289 : i32
    %291 = arith.andi %284, %290 : i32
    %false_99 = arith.constant false
    %292 = llvm.call_intrinsic "llvm.cttz.i32"(%291, %false_99) : (i32, i1) -> i32
    llvm.store %292, %9 : i32, !llvm.ptr
    %c3_i32_100 = arith.constant 3 : i32
    %c31_i32_101 = arith.constant 31 : i32
    %293 = arith.cmpi ule, %c3_i32_100, %c31_i32_101 : i32
    %294 = scf.if %293 -> (i32) {
      %2078 = arith.shli %292, %c3_i32_100 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %294, %2 : i32, !llvm.ptr
    %c1049428_i32_102 = arith.constant 1049428 : i32
    %295 = arith.addi %294, %c1049428_i32_102 : i32
    llvm.store %295, %7 : i32, !llvm.ptr
    %296 = llvm.load %2 : !llvm.ptr -> i32
    %c1049436_i32_103 = arith.constant 1049436 : i32
    %297 = arith.addi %296, %c1049436_i32_103 : i32
    %c0_i64_104 = arith.constant 0 : i64
    %298 = arith.extui %297 : i32 to i64
    %299 = arith.addi %298, %c0_i64_104 : i64
    %300 = llvm.getelementptr %15[%299] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %301 = llvm.load volatile %300 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %301, %0 : i32, !llvm.ptr
    %c8_i64_105 = arith.constant 8 : i64
    %302 = arith.extui %301 : i32 to i64
    %303 = arith.addi %302, %c8_i64_105 : i64
    %304 = llvm.getelementptr %15[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %305 = llvm.load volatile %304 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %305, %8 : i32, !llvm.ptr
    %306 = arith.cmpi eq, %295, %305 : i32
    %307 = arith.extui %306 : i1 to i32
    %c0_i32_106 = arith.constant 0 : i32
    %308 = arith.cmpi ne, %307, %c0_i32_106 : i32
    cf.cond_br %308, ^bb56, ^bb57
  ^bb35:  // pred: ^bb31
    %c0_i32_107 = arith.constant 0 : i32
    %c1049696_i64_108 = arith.constant 1049696 : i64
    %309 = arith.extui %c0_i32_107 : i32 to i64
    %310 = arith.addi %309, %c1049696_i64_108 : i64
    %311 = llvm.getelementptr %15[%310] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %312 = llvm.load volatile %311 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %312, %0 : i32, !llvm.ptr
    %c0_i32_109 = arith.constant 0 : i32
    %313 = arith.cmpi eq, %312, %c0_i32_109 : i32
    %314 = arith.extui %313 : i1 to i32
    %c0_i32_110 = arith.constant 0 : i32
    %315 = arith.cmpi ne, %314, %c0_i32_110 : i32
    cf.cond_br %315, ^bb6, ^bb36
  ^bb36:  // pred: ^bb35
    %316 = llvm.load %0 : !llvm.ptr -> i32
    %false_111 = arith.constant false
    %317 = llvm.call_intrinsic "llvm.cttz.i32"(%316, %false_111) : (i32, i1) -> i32
    %c2_i32_112 = arith.constant 2 : i32
    %c31_i32_113 = arith.constant 31 : i32
    %318 = arith.cmpi ule, %c2_i32_112, %c31_i32_113 : i32
    %319 = scf.if %318 -> (i32) {
      %2078 = arith.shli %317, %c2_i32_112 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c1049284_i32_114 = arith.constant 1049284 : i32
    %320 = arith.addi %319, %c1049284_i32_114 : i32
    %c0_i64_115 = arith.constant 0 : i64
    %321 = arith.extui %320 : i32 to i64
    %322 = arith.addi %321, %c0_i64_115 : i64
    %323 = llvm.getelementptr %15[%322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %324 = llvm.load volatile %323 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %324, %7 : i32, !llvm.ptr
    %c4_i64_116 = arith.constant 4 : i64
    %325 = arith.extui %324 : i32 to i64
    %326 = arith.addi %325, %c4_i64_116 : i64
    %327 = llvm.getelementptr %15[%326] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %328 = llvm.load volatile %327 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-8_i32_117 = arith.constant -8 : i32
    %329 = arith.andi %328, %c-8_i32_117 : i32
    %330 = llvm.load %3 : !llvm.ptr -> i32
    %331 = arith.subi %329, %330 : i32
    llvm.store %331, %2 : i32, !llvm.ptr
    %332 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %332, %6 : i32, !llvm.ptr
    cf.br ^bb38
  ^bb37:  // no predecessors
    cf.br ^bb34
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %333 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64_118 = arith.constant 16 : i64
    %334 = arith.extui %333 : i32 to i64
    %335 = arith.addi %334, %c16_i64_118 : i64
    %336 = llvm.getelementptr %15[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %337 = llvm.load volatile %336 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %337, %0 : i32, !llvm.ptr
    %c0_i32_119 = arith.constant 0 : i32
    %338 = arith.cmpi ne, %337, %c0_i32_119 : i32
    cf.cond_br %338, ^bb39, ^bb40
  ^bb39:  // 2 preds: ^bb38, ^bb40
    %339 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_120 = arith.constant 4 : i64
    %340 = arith.extui %339 : i32 to i64
    %341 = arith.addi %340, %c4_i64_120 : i64
    %342 = llvm.getelementptr %15[%341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %343 = llvm.load volatile %342 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-8_i32_121 = arith.constant -8 : i32
    %344 = arith.andi %343, %c-8_i32_121 : i32
    %345 = llvm.load %3 : !llvm.ptr -> i32
    %346 = arith.subi %344, %345 : i32
    llvm.store %346, %7 : i32, !llvm.ptr
    %347 = llvm.load %2 : !llvm.ptr -> i32
    %348 = llvm.load %7 : !llvm.ptr -> i32
    %349 = llvm.load %2 : !llvm.ptr -> i32
    %350 = arith.cmpi ult, %348, %349 : i32
    %351 = arith.extui %350 : i1 to i32
    llvm.store %351, %7 : i32, !llvm.ptr
    %c0_i32_122 = arith.constant 0 : i32
    %352 = arith.cmpi ne, %351, %c0_i32_122 : i32
    %353 = arith.select %352, %346, %347 : i32
    llvm.store %353, %2 : i32, !llvm.ptr
    %354 = llvm.load %0 : !llvm.ptr -> i32
    %355 = llvm.load %6 : !llvm.ptr -> i32
    %356 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_123 = arith.constant 0 : i32
    %357 = arith.cmpi ne, %356, %c0_i32_123 : i32
    %358 = arith.select %357, %354, %355 : i32
    llvm.store %358, %6 : i32, !llvm.ptr
    %359 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %359, %7 : i32, !llvm.ptr
    cf.br ^bb38
  ^bb40:  // pred: ^bb38
    %360 = llvm.load %7 : !llvm.ptr -> i32
    %c20_i64_124 = arith.constant 20 : i64
    %361 = arith.extui %360 : i32 to i64
    %362 = arith.addi %361, %c20_i64_124 : i64
    %363 = llvm.getelementptr %15[%362] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %364 = llvm.load volatile %363 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %364, %0 : i32, !llvm.ptr
    %c0_i32_125 = arith.constant 0 : i32
    %365 = arith.cmpi ne, %364, %c0_i32_125 : i32
    cf.cond_br %365, ^bb39, ^bb41
  ^bb41:  // pred: ^bb40
    %366 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i64_126 = arith.constant 24 : i64
    %367 = arith.extui %366 : i32 to i64
    %368 = arith.addi %367, %c24_i64_126 : i64
    %369 = llvm.getelementptr %15[%368] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %370 = llvm.load volatile %369 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %370, %5 : i32, !llvm.ptr
    %371 = llvm.load %6 : !llvm.ptr -> i32
    %c12_i64_127 = arith.constant 12 : i64
    %372 = arith.extui %371 : i32 to i64
    %373 = arith.addi %372, %c12_i64_127 : i64
    %374 = llvm.getelementptr %15[%373] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %375 = llvm.load volatile %374 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %375, %0 : i32, !llvm.ptr
    %376 = llvm.load %6 : !llvm.ptr -> i32
    %377 = arith.cmpi eq, %375, %376 : i32
    %378 = arith.extui %377 : i1 to i32
    %c0_i32_128 = arith.constant 0 : i32
    %379 = arith.cmpi eq, %378, %c0_i32_128 : i32
    %380 = arith.extui %379 : i1 to i32
    %c0_i32_129 = arith.constant 0 : i32
    %381 = arith.cmpi ne, %380, %c0_i32_129 : i32
    cf.cond_br %381, ^bb44, ^bb45
  ^bb42:  // 3 preds: ^bb44, ^bb46, ^bb47
    %382 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_130 = arith.constant 0 : i32
    %383 = arith.cmpi eq, %382, %c0_i32_130 : i32
    %384 = arith.extui %383 : i1 to i32
    %c0_i32_131 = arith.constant 0 : i32
    %385 = arith.cmpi ne, %384, %c0_i32_131 : i32
    cf.cond_br %385, ^bb32, ^bb50
  ^bb43:  // pred: ^bb45
    %386 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %387 = arith.addi %386, %c20_i32 : i32
    %388 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32_132 = arith.constant 16 : i32
    %389 = arith.addi %388, %c16_i32_132 : i32
    %390 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_133 = arith.constant 0 : i32
    %391 = arith.cmpi ne, %390, %c0_i32_133 : i32
    %392 = arith.select %391, %387, %389 : i32
    llvm.store %392, %8 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb44:  // pred: ^bb41
    %393 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i64_134 = arith.constant 8 : i64
    %394 = arith.extui %393 : i32 to i64
    %395 = arith.addi %394, %c8_i64_134 : i64
    %396 = llvm.getelementptr %15[%395] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %397 = llvm.load volatile %396 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %397, %7 : i32, !llvm.ptr
    %398 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_135 = arith.constant 12 : i64
    %399 = arith.extui %397 : i32 to i64
    %400 = arith.addi %399, %c12_i64_135 : i64
    %401 = llvm.getelementptr %15[%400] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %398, %401 {alignment = 1 : i64} : i32, !llvm.ptr
    %402 = llvm.load %0 : !llvm.ptr -> i32
    %403 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i64_136 = arith.constant 8 : i64
    %404 = arith.extui %402 : i32 to i64
    %405 = arith.addi %404, %c8_i64_136 : i64
    %406 = llvm.getelementptr %15[%405] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %403, %406 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb42
  ^bb45:  // pred: ^bb41
    %407 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i32_137 = arith.constant 20 : i32
    %c16_i32_138 = arith.constant 16 : i32
    %408 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64_139 = arith.constant 20 : i64
    %409 = arith.extui %408 : i32 to i64
    %410 = arith.addi %409, %c20_i64_139 : i64
    %411 = llvm.getelementptr %15[%410] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %412 = llvm.load volatile %411 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %412, %0 : i32, !llvm.ptr
    %c0_i32_140 = arith.constant 0 : i32
    %413 = arith.cmpi ne, %412, %c0_i32_140 : i32
    %414 = arith.select %413, %c20_i32_137, %c16_i32_138 : i32
    %415 = arith.addi %407, %414 : i32
    %c0_i64_141 = arith.constant 0 : i64
    %416 = arith.extui %415 : i32 to i64
    %417 = arith.addi %416, %c0_i64_141 : i64
    %418 = llvm.getelementptr %15[%417] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %419 = llvm.load volatile %418 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %419, %7 : i32, !llvm.ptr
    %c0_i32_142 = arith.constant 0 : i32
    %420 = arith.cmpi ne, %419, %c0_i32_142 : i32
    cf.cond_br %420, ^bb43, ^bb46
  ^bb46:  // pred: ^bb45
    %c0_i32_143 = arith.constant 0 : i32
    llvm.store %c0_i32_143, %0 : i32, !llvm.ptr
    cf.br ^bb42
  ^bb47:  // pred: ^bb49
    %421 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_144 = arith.constant 0 : i32
    %c0_i64_145 = arith.constant 0 : i64
    %422 = arith.extui %421 : i32 to i64
    %423 = arith.addi %422, %c0_i64_145 : i64
    %424 = llvm.getelementptr %15[%423] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_144, %424 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb42
  ^bb48:  // 2 preds: ^bb43, ^bb48
    %425 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %425, %9 : i32, !llvm.ptr
    %426 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %426, %0 : i32, !llvm.ptr
    %c20_i32_146 = arith.constant 20 : i32
    %427 = arith.addi %426, %c20_i32_146 : i32
    %428 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_147 = arith.constant 16 : i32
    %429 = arith.addi %428, %c16_i32_147 : i32
    %430 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_148 = arith.constant 20 : i64
    %431 = arith.extui %430 : i32 to i64
    %432 = arith.addi %431, %c20_i64_148 : i64
    %433 = llvm.getelementptr %15[%432] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %434 = llvm.load volatile %433 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %434, %7 : i32, !llvm.ptr
    %c0_i32_149 = arith.constant 0 : i32
    %435 = arith.cmpi ne, %434, %c0_i32_149 : i32
    %436 = arith.select %435, %427, %429 : i32
    llvm.store %436, %8 : i32, !llvm.ptr
    %437 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32_150 = arith.constant 20 : i32
    %c16_i32_151 = arith.constant 16 : i32
    %438 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_152 = arith.constant 0 : i32
    %439 = arith.cmpi ne, %438, %c0_i32_152 : i32
    %440 = arith.select %439, %c20_i32_150, %c16_i32_151 : i32
    %441 = arith.addi %437, %440 : i32
    %c0_i64_153 = arith.constant 0 : i64
    %442 = arith.extui %441 : i32 to i64
    %443 = arith.addi %442, %c0_i64_153 : i64
    %444 = llvm.getelementptr %15[%443] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %445 = llvm.load volatile %444 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %445, %7 : i32, !llvm.ptr
    %c0_i32_154 = arith.constant 0 : i32
    %446 = arith.cmpi ne, %445, %c0_i32_154 : i32
    cf.cond_br %446, ^bb48, ^bb49
  ^bb49:  // pred: ^bb48
    cf.br ^bb47
  ^bb50:  // pred: ^bb42
    %447 = llvm.load %6 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %448 = arith.extui %447 : i32 to i64
    %449 = arith.addi %448, %c28_i64 : i64
    %450 = llvm.getelementptr %15[%449] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %451 = llvm.load volatile %450 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32_155 = arith.constant 2 : i32
    %c31_i32_156 = arith.constant 31 : i32
    %452 = arith.cmpi ule, %c2_i32_155, %c31_i32_156 : i32
    %453 = scf.if %452 -> (i32) {
      %2078 = arith.shli %451, %c2_i32_155 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c1049284_i32_157 = arith.constant 1049284 : i32
    %454 = arith.addi %453, %c1049284_i32_157 : i32
    llvm.store %454, %7 : i32, !llvm.ptr
    %c0_i64_158 = arith.constant 0 : i64
    %455 = arith.extui %454 : i32 to i64
    %456 = arith.addi %455, %c0_i64_158 : i64
    %457 = llvm.getelementptr %15[%456] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %458 = llvm.load volatile %457 {alignment = 1 : i64} : !llvm.ptr -> i32
    %459 = llvm.load %6 : !llvm.ptr -> i32
    %460 = arith.cmpi eq, %458, %459 : i32
    %461 = arith.extui %460 : i1 to i32
    %c0_i32_159 = arith.constant 0 : i32
    %462 = arith.cmpi ne, %461, %c0_i32_159 : i32
    cf.cond_br %462, ^bb51, ^bb52
  ^bb51:  // pred: ^bb50
    %463 = llvm.load %7 : !llvm.ptr -> i32
    %464 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_160 = arith.constant 0 : i64
    %465 = arith.extui %463 : i32 to i64
    %466 = arith.addi %465, %c0_i64_160 : i64
    %467 = llvm.getelementptr %15[%466] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %464, %467 {alignment = 1 : i64} : i32, !llvm.ptr
    %468 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_161 = arith.constant 0 : i32
    %469 = arith.cmpi ne, %468, %c0_i32_161 : i32
    cf.cond_br %469, ^bb33, ^bb54
  ^bb52:  // pred: ^bb50
    %470 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_162 = arith.constant 16 : i32
    %c20_i32_163 = arith.constant 20 : i32
    %471 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i64_164 = arith.constant 16 : i64
    %472 = arith.extui %471 : i32 to i64
    %473 = arith.addi %472, %c16_i64_164 : i64
    %474 = llvm.getelementptr %15[%473] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %475 = llvm.load volatile %474 {alignment = 1 : i64} : !llvm.ptr -> i32
    %476 = llvm.load %6 : !llvm.ptr -> i32
    %477 = arith.cmpi eq, %475, %476 : i32
    %478 = arith.extui %477 : i1 to i32
    %c0_i32_165 = arith.constant 0 : i32
    %479 = arith.cmpi ne, %478, %c0_i32_165 : i32
    %480 = arith.select %479, %c16_i32_162, %c20_i32_163 : i32
    %481 = arith.addi %470, %480 : i32
    %482 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_166 = arith.constant 0 : i64
    %483 = arith.extui %481 : i32 to i64
    %484 = arith.addi %483, %c0_i64_166 : i64
    %485 = llvm.getelementptr %15[%484] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %482, %485 {alignment = 1 : i64} : i32, !llvm.ptr
    %486 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_167 = arith.constant 0 : i32
    %487 = arith.cmpi eq, %486, %c0_i32_167 : i32
    %488 = arith.extui %487 : i1 to i32
    %c0_i32_168 = arith.constant 0 : i32
    %489 = arith.cmpi ne, %488, %c0_i32_168 : i32
    cf.cond_br %489, ^bb32, ^bb53
  ^bb53:  // pred: ^bb52
    cf.br ^bb33
  ^bb54:  // pred: ^bb51
    %c0_i32_169 = arith.constant 0 : i32
    %c0_i32_170 = arith.constant 0 : i32
    %c1049696_i64_171 = arith.constant 1049696 : i64
    %490 = arith.extui %c0_i32_170 : i32 to i64
    %491 = arith.addi %490, %c1049696_i64_171 : i64
    %492 = llvm.getelementptr %15[%491] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %493 = llvm.load volatile %492 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32_172 = arith.constant -2 : i32
    %494 = llvm.load %6 : !llvm.ptr -> i32
    %c28_i64_173 = arith.constant 28 : i64
    %495 = arith.extui %494 : i32 to i64
    %496 = arith.addi %495, %c28_i64_173 : i64
    %497 = llvm.getelementptr %15[%496] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %498 = llvm.load volatile %497 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c32_i32_174 = arith.constant 32 : i32
    %499 = arith.remui %498, %c32_i32_174 : i32
    %500 = arith.shli %c-2_i32_172, %499 : i32
    %501 = arith.subi %c32_i32_174, %499 : i32
    %502 = arith.shrui %c-2_i32_172, %501 : i32
    %503 = arith.ori %500, %502 : i32
    %504 = arith.andi %493, %503 : i32
    %c1049696_i64_175 = arith.constant 1049696 : i64
    %505 = arith.extui %c0_i32_169 : i32 to i64
    %506 = arith.addi %505, %c1049696_i64_175 : i64
    %507 = llvm.getelementptr %15[%506] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %504, %507 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb32
  ^bb55:  // 2 preds: ^bb56, ^bb57
    %508 = llvm.load %0 : !llvm.ptr -> i32
    %509 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_176 = arith.constant 3 : i32
    %510 = arith.ori %509, %c3_i32_176 : i32
    %c4_i64_177 = arith.constant 4 : i64
    %511 = arith.extui %508 : i32 to i64
    %512 = arith.addi %511, %c4_i64_177 : i64
    %513 = llvm.getelementptr %15[%512] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %510, %513 {alignment = 1 : i64} : i32, !llvm.ptr
    %514 = llvm.load %0 : !llvm.ptr -> i32
    %515 = llvm.load %3 : !llvm.ptr -> i32
    %516 = arith.addi %514, %515 : i32
    llvm.store %516, %8 : i32, !llvm.ptr
    %517 = llvm.load %2 : !llvm.ptr -> i32
    %518 = llvm.load %3 : !llvm.ptr -> i32
    %519 = arith.subi %517, %518 : i32
    llvm.store %519, %7 : i32, !llvm.ptr
    %c1_i32_178 = arith.constant 1 : i32
    %520 = arith.ori %519, %c1_i32_178 : i32
    %c4_i64_179 = arith.constant 4 : i64
    %521 = arith.extui %516 : i32 to i64
    %522 = arith.addi %521, %c4_i64_179 : i64
    %523 = llvm.getelementptr %15[%522] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %520, %523 {alignment = 1 : i64} : i32, !llvm.ptr
    %524 = llvm.load %0 : !llvm.ptr -> i32
    %525 = llvm.load %2 : !llvm.ptr -> i32
    %526 = arith.addi %524, %525 : i32
    %527 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_180 = arith.constant 0 : i64
    %528 = arith.extui %526 : i32 to i64
    %529 = arith.addi %528, %c0_i64_180 : i64
    %530 = llvm.getelementptr %15[%529] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %527, %530 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_181 = arith.constant 0 : i32
    %c1049700_i64_182 = arith.constant 1049700 : i64
    %531 = arith.extui %c0_i32_181 : i32 to i64
    %532 = arith.addi %531, %c1049700_i64_182 : i64
    %533 = llvm.getelementptr %15[%532] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %534 = llvm.load volatile %533 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %534, %6 : i32, !llvm.ptr
    %c0_i32_183 = arith.constant 0 : i32
    %535 = arith.cmpi eq, %534, %c0_i32_183 : i32
    %536 = arith.extui %535 : i1 to i32
    %c0_i32_184 = arith.constant 0 : i32
    %537 = arith.cmpi ne, %536, %c0_i32_184 : i32
    cf.cond_br %537, ^bb58, ^bb59
  ^bb56:  // pred: ^bb34
    %c0_i32_185 = arith.constant 0 : i32
    %538 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32_186 = arith.constant -2 : i32
    %539 = llvm.load %9 : !llvm.ptr -> i32
    %c32_i32_187 = arith.constant 32 : i32
    %540 = arith.remui %539, %c32_i32_187 : i32
    %541 = arith.shli %c-2_i32_186, %540 : i32
    %542 = arith.subi %c32_i32_187, %540 : i32
    %543 = arith.shrui %c-2_i32_186, %542 : i32
    %544 = arith.ori %541, %543 : i32
    %545 = arith.andi %538, %544 : i32
    %c1049692_i64_188 = arith.constant 1049692 : i64
    %546 = arith.extui %c0_i32_185 : i32 to i64
    %547 = arith.addi %546, %c1049692_i64_188 : i64
    %548 = llvm.getelementptr %15[%547] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %545, %548 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb55
  ^bb57:  // pred: ^bb34
    %549 = llvm.load %8 : !llvm.ptr -> i32
    %550 = llvm.load %7 : !llvm.ptr -> i32
    %c12_i64_189 = arith.constant 12 : i64
    %551 = arith.extui %549 : i32 to i64
    %552 = arith.addi %551, %c12_i64_189 : i64
    %553 = llvm.getelementptr %15[%552] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %550, %553 {alignment = 1 : i64} : i32, !llvm.ptr
    %554 = llvm.load %7 : !llvm.ptr -> i32
    %555 = llvm.load %8 : !llvm.ptr -> i32
    %c8_i64_190 = arith.constant 8 : i64
    %556 = arith.extui %554 : i32 to i64
    %557 = arith.addi %556, %c8_i64_190 : i64
    %558 = llvm.getelementptr %15[%557] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %555, %558 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb55
  ^bb58:  // 2 preds: ^bb55, ^bb60
    %559 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_191 = arith.constant 8 : i32
    %560 = arith.addi %559, %c8_i32_191 : i32
    llvm.store %560, %0 : i32, !llvm.ptr
    %c0_i32_192 = arith.constant 0 : i32
    %561 = llvm.load %8 : !llvm.ptr -> i32
    %c1049708_i64 = arith.constant 1049708 : i64
    %562 = arith.extui %c0_i32_192 : i32 to i64
    %563 = arith.addi %562, %c1049708_i64 : i64
    %564 = llvm.getelementptr %15[%563] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %561, %564 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_193 = arith.constant 0 : i32
    %565 = llvm.load %7 : !llvm.ptr -> i32
    %c1049700_i64_194 = arith.constant 1049700 : i64
    %566 = arith.extui %c0_i32_193 : i32 to i64
    %567 = arith.addi %566, %c1049700_i64_194 : i64
    %568 = llvm.getelementptr %15[%567] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %565, %568 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb59:  // pred: ^bb55
    %569 = llvm.load %6 : !llvm.ptr -> i32
    %c-8_i32_195 = arith.constant -8 : i32
    %570 = arith.andi %569, %c-8_i32_195 : i32
    %c1049428_i32_196 = arith.constant 1049428 : i32
    %571 = arith.addi %570, %c1049428_i32_196 : i32
    llvm.store %571, %2 : i32, !llvm.ptr
    %c0_i32_197 = arith.constant 0 : i32
    %c1049708_i64_198 = arith.constant 1049708 : i64
    %572 = arith.extui %c0_i32_197 : i32 to i64
    %573 = arith.addi %572, %c1049708_i64_198 : i64
    %574 = llvm.getelementptr %15[%573] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %575 = llvm.load volatile %574 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %575, %3 : i32, !llvm.ptr
    %c0_i32_199 = arith.constant 0 : i32
    %c1049692_i64_200 = arith.constant 1049692 : i64
    %576 = arith.extui %c0_i32_199 : i32 to i64
    %577 = arith.addi %576, %c1049692_i64_200 : i64
    %578 = llvm.getelementptr %15[%577] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %579 = llvm.load volatile %578 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %579, %9 : i32, !llvm.ptr
    %c1_i32_201 = arith.constant 1 : i32
    %580 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_202 = arith.constant 3 : i32
    %c31_i32_203 = arith.constant 31 : i32
    %581 = arith.cmpi ule, %c3_i32_202, %c31_i32_203 : i32
    %582 = scf.if %581 -> (i32) {
      %2078 = arith.shrui %580, %c3_i32_202 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c31_i32_204 = arith.constant 31 : i32
    %583 = arith.cmpi ule, %582, %c31_i32_204 : i32
    %584 = scf.if %583 -> (i32) {
      %2078 = arith.shli %c1_i32_201, %582 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %584, %6 : i32, !llvm.ptr
    %585 = arith.andi %579, %584 : i32
    %c0_i32_205 = arith.constant 0 : i32
    %586 = arith.cmpi ne, %585, %c0_i32_205 : i32
    cf.cond_br %586, ^bb61, ^bb62
  ^bb60:  // 2 preds: ^bb61, ^bb62
    %587 = llvm.load %2 : !llvm.ptr -> i32
    %588 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_206 = arith.constant 8 : i64
    %589 = arith.extui %587 : i32 to i64
    %590 = arith.addi %589, %c8_i64_206 : i64
    %591 = llvm.getelementptr %15[%590] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %588, %591 {alignment = 1 : i64} : i32, !llvm.ptr
    %592 = llvm.load %6 : !llvm.ptr -> i32
    %593 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_207 = arith.constant 12 : i64
    %594 = arith.extui %592 : i32 to i64
    %595 = arith.addi %594, %c12_i64_207 : i64
    %596 = llvm.getelementptr %15[%595] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %593, %596 {alignment = 1 : i64} : i32, !llvm.ptr
    %597 = llvm.load %3 : !llvm.ptr -> i32
    %598 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_208 = arith.constant 12 : i64
    %599 = arith.extui %597 : i32 to i64
    %600 = arith.addi %599, %c12_i64_208 : i64
    %601 = llvm.getelementptr %15[%600] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %598, %601 {alignment = 1 : i64} : i32, !llvm.ptr
    %602 = llvm.load %3 : !llvm.ptr -> i32
    %603 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i64_209 = arith.constant 8 : i64
    %604 = arith.extui %602 : i32 to i64
    %605 = arith.addi %604, %c8_i64_209 : i64
    %606 = llvm.getelementptr %15[%605] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %603, %606 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb58
  ^bb61:  // pred: ^bb59
    %607 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_210 = arith.constant 8 : i64
    %608 = arith.extui %607 : i32 to i64
    %609 = arith.addi %608, %c8_i64_210 : i64
    %610 = llvm.getelementptr %15[%609] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %611 = llvm.load volatile %610 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %611, %6 : i32, !llvm.ptr
    cf.br ^bb60
  ^bb62:  // pred: ^bb59
    %c0_i32_211 = arith.constant 0 : i32
    %612 = llvm.load %9 : !llvm.ptr -> i32
    %613 = llvm.load %6 : !llvm.ptr -> i32
    %614 = arith.ori %612, %613 : i32
    %c1049692_i64_212 = arith.constant 1049692 : i64
    %615 = arith.extui %c0_i32_211 : i32 to i64
    %616 = arith.addi %615, %c1049692_i64_212 : i64
    %617 = llvm.getelementptr %15[%616] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %614, %617 {alignment = 1 : i64} : i32, !llvm.ptr
    %618 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %618, %6 : i32, !llvm.ptr
    cf.br ^bb60
  ^bb63:  // 2 preds: ^bb33, ^bb64
    %619 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64_213 = arith.constant 20 : i64
    %620 = arith.extui %619 : i32 to i64
    %621 = arith.addi %620, %c20_i64_213 : i64
    %622 = llvm.getelementptr %15[%621] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %623 = llvm.load volatile %622 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %623, %7 : i32, !llvm.ptr
    %c0_i32_214 = arith.constant 0 : i32
    %624 = arith.cmpi eq, %623, %c0_i32_214 : i32
    %625 = arith.extui %624 : i1 to i32
    %c0_i32_215 = arith.constant 0 : i32
    %626 = arith.cmpi ne, %625, %c0_i32_215 : i32
    cf.cond_br %626, ^bb32, ^bb65
  ^bb64:  // pred: ^bb33
    %627 = llvm.load %0 : !llvm.ptr -> i32
    %628 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64_216 = arith.constant 16 : i64
    %629 = arith.extui %627 : i32 to i64
    %630 = arith.addi %629, %c16_i64_216 : i64
    %631 = llvm.getelementptr %15[%630] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %628, %631 {alignment = 1 : i64} : i32, !llvm.ptr
    %632 = llvm.load %7 : !llvm.ptr -> i32
    %633 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_217 = arith.constant 24 : i64
    %634 = arith.extui %632 : i32 to i64
    %635 = arith.addi %634, %c24_i64_217 : i64
    %636 = llvm.getelementptr %15[%635] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %633, %636 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb63
  ^bb65:  // pred: ^bb63
    %637 = llvm.load %0 : !llvm.ptr -> i32
    %638 = llvm.load %7 : !llvm.ptr -> i32
    %c20_i64_218 = arith.constant 20 : i64
    %639 = arith.extui %637 : i32 to i64
    %640 = arith.addi %639, %c20_i64_218 : i64
    %641 = llvm.getelementptr %15[%640] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %638, %641 {alignment = 1 : i64} : i32, !llvm.ptr
    %642 = llvm.load %7 : !llvm.ptr -> i32
    %643 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_219 = arith.constant 24 : i64
    %644 = arith.extui %642 : i32 to i64
    %645 = arith.addi %644, %c24_i64_219 : i64
    %646 = llvm.getelementptr %15[%645] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %643, %646 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb32
  ^bb66:  // 2 preds: ^bb67, ^bb68
    %647 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i32_220 = arith.constant 8 : i32
    %648 = arith.addi %647, %c8_i32_220 : i32
    llvm.store %648, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb67:  // 2 preds: ^bb69, ^bb71
    %c0_i32_221 = arith.constant 0 : i32
    %649 = llvm.load %3 : !llvm.ptr -> i32
    %c1049708_i64_222 = arith.constant 1049708 : i64
    %650 = arith.extui %c0_i32_221 : i32 to i64
    %651 = arith.addi %650, %c1049708_i64_222 : i64
    %652 = llvm.getelementptr %15[%651] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %649, %652 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_223 = arith.constant 0 : i32
    %653 = llvm.load %2 : !llvm.ptr -> i32
    %c1049700_i64_224 = arith.constant 1049700 : i64
    %654 = arith.extui %c0_i32_223 : i32 to i64
    %655 = arith.addi %654, %c1049700_i64_224 : i64
    %656 = llvm.getelementptr %15[%655] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %653, %656 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb66
  ^bb68:  // pred: ^bb32
    %657 = llvm.load %6 : !llvm.ptr -> i32
    %658 = llvm.load %2 : !llvm.ptr -> i32
    %659 = llvm.load %3 : !llvm.ptr -> i32
    %660 = arith.addi %658, %659 : i32
    llvm.store %660, %0 : i32, !llvm.ptr
    %c3_i32_225 = arith.constant 3 : i32
    %661 = arith.ori %660, %c3_i32_225 : i32
    %c4_i64_226 = arith.constant 4 : i64
    %662 = arith.extui %657 : i32 to i64
    %663 = arith.addi %662, %c4_i64_226 : i64
    %664 = llvm.getelementptr %15[%663] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %661, %664 {alignment = 1 : i64} : i32, !llvm.ptr
    %665 = llvm.load %6 : !llvm.ptr -> i32
    %666 = llvm.load %0 : !llvm.ptr -> i32
    %667 = arith.addi %665, %666 : i32
    llvm.store %667, %0 : i32, !llvm.ptr
    %668 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_227 = arith.constant 4 : i64
    %669 = arith.extui %668 : i32 to i64
    %670 = arith.addi %669, %c4_i64_227 : i64
    %671 = llvm.getelementptr %15[%670] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %672 = llvm.load volatile %671 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_228 = arith.constant 1 : i32
    %673 = arith.ori %672, %c1_i32_228 : i32
    %c4_i64_229 = arith.constant 4 : i64
    %674 = arith.extui %667 : i32 to i64
    %675 = arith.addi %674, %c4_i64_229 : i64
    %676 = llvm.getelementptr %15[%675] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %673, %676 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb66
  ^bb69:  // pred: ^bb32
    %677 = llvm.load %6 : !llvm.ptr -> i32
    %678 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_230 = arith.constant 3 : i32
    %679 = arith.ori %678, %c3_i32_230 : i32
    %c4_i64_231 = arith.constant 4 : i64
    %680 = arith.extui %677 : i32 to i64
    %681 = arith.addi %680, %c4_i64_231 : i64
    %682 = llvm.getelementptr %15[%681] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %679, %682 {alignment = 1 : i64} : i32, !llvm.ptr
    %683 = llvm.load %6 : !llvm.ptr -> i32
    %684 = llvm.load %3 : !llvm.ptr -> i32
    %685 = arith.addi %683, %684 : i32
    llvm.store %685, %3 : i32, !llvm.ptr
    %686 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_232 = arith.constant 1 : i32
    %687 = arith.ori %686, %c1_i32_232 : i32
    %c4_i64_233 = arith.constant 4 : i64
    %688 = arith.extui %685 : i32 to i64
    %689 = arith.addi %688, %c4_i64_233 : i64
    %690 = llvm.getelementptr %15[%689] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %687, %690 {alignment = 1 : i64} : i32, !llvm.ptr
    %691 = llvm.load %3 : !llvm.ptr -> i32
    %692 = llvm.load %2 : !llvm.ptr -> i32
    %693 = arith.addi %691, %692 : i32
    %694 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_234 = arith.constant 0 : i64
    %695 = arith.extui %693 : i32 to i64
    %696 = arith.addi %695, %c0_i64_234 : i64
    %697 = llvm.getelementptr %15[%696] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %694, %697 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_235 = arith.constant 0 : i32
    %c1049700_i64_236 = arith.constant 1049700 : i64
    %698 = arith.extui %c0_i32_235 : i32 to i64
    %699 = arith.addi %698, %c1049700_i64_236 : i64
    %700 = llvm.getelementptr %15[%699] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %701 = llvm.load volatile %700 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %701, %8 : i32, !llvm.ptr
    %c0_i32_237 = arith.constant 0 : i32
    %702 = arith.cmpi eq, %701, %c0_i32_237 : i32
    %703 = arith.extui %702 : i1 to i32
    %c0_i32_238 = arith.constant 0 : i32
    %704 = arith.cmpi ne, %703, %c0_i32_238 : i32
    cf.cond_br %704, ^bb67, ^bb70
  ^bb70:  // pred: ^bb69
    %705 = llvm.load %8 : !llvm.ptr -> i32
    %c-8_i32_239 = arith.constant -8 : i32
    %706 = arith.andi %705, %c-8_i32_239 : i32
    %c1049428_i32_240 = arith.constant 1049428 : i32
    %707 = arith.addi %706, %c1049428_i32_240 : i32
    llvm.store %707, %7 : i32, !llvm.ptr
    %c0_i32_241 = arith.constant 0 : i32
    %c1049708_i64_242 = arith.constant 1049708 : i64
    %708 = arith.extui %c0_i32_241 : i32 to i64
    %709 = arith.addi %708, %c1049708_i64_242 : i64
    %710 = llvm.getelementptr %15[%709] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %711 = llvm.load volatile %710 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %711, %0 : i32, !llvm.ptr
    %c0_i32_243 = arith.constant 0 : i32
    %c1049692_i64_244 = arith.constant 1049692 : i64
    %712 = arith.extui %c0_i32_243 : i32 to i64
    %713 = arith.addi %712, %c1049692_i64_244 : i64
    %714 = llvm.getelementptr %15[%713] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %715 = llvm.load volatile %714 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %715, %9 : i32, !llvm.ptr
    %c1_i32_245 = arith.constant 1 : i32
    %716 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i32_246 = arith.constant 3 : i32
    %c31_i32_247 = arith.constant 31 : i32
    %717 = arith.cmpi ule, %c3_i32_246, %c31_i32_247 : i32
    %718 = scf.if %717 -> (i32) {
      %2078 = arith.shrui %716, %c3_i32_246 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c31_i32_248 = arith.constant 31 : i32
    %719 = arith.cmpi ule, %718, %c31_i32_248 : i32
    %720 = scf.if %719 -> (i32) {
      %2078 = arith.shli %c1_i32_245, %718 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %720, %8 : i32, !llvm.ptr
    %721 = arith.andi %715, %720 : i32
    %c0_i32_249 = arith.constant 0 : i32
    %722 = arith.cmpi ne, %721, %c0_i32_249 : i32
    cf.cond_br %722, ^bb72, ^bb73
  ^bb71:  // 2 preds: ^bb72, ^bb73
    %723 = llvm.load %7 : !llvm.ptr -> i32
    %724 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_250 = arith.constant 8 : i64
    %725 = arith.extui %723 : i32 to i64
    %726 = arith.addi %725, %c8_i64_250 : i64
    %727 = llvm.getelementptr %15[%726] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %724, %727 {alignment = 1 : i64} : i32, !llvm.ptr
    %728 = llvm.load %8 : !llvm.ptr -> i32
    %729 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_251 = arith.constant 12 : i64
    %730 = arith.extui %728 : i32 to i64
    %731 = arith.addi %730, %c12_i64_251 : i64
    %732 = llvm.getelementptr %15[%731] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %729, %732 {alignment = 1 : i64} : i32, !llvm.ptr
    %733 = llvm.load %0 : !llvm.ptr -> i32
    %734 = llvm.load %7 : !llvm.ptr -> i32
    %c12_i64_252 = arith.constant 12 : i64
    %735 = arith.extui %733 : i32 to i64
    %736 = arith.addi %735, %c12_i64_252 : i64
    %737 = llvm.getelementptr %15[%736] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %734, %737 {alignment = 1 : i64} : i32, !llvm.ptr
    %738 = llvm.load %0 : !llvm.ptr -> i32
    %739 = llvm.load %8 : !llvm.ptr -> i32
    %c8_i64_253 = arith.constant 8 : i64
    %740 = arith.extui %738 : i32 to i64
    %741 = arith.addi %740, %c8_i64_253 : i64
    %742 = llvm.getelementptr %15[%741] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %739, %742 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb67
  ^bb72:  // pred: ^bb70
    %743 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i64_254 = arith.constant 8 : i64
    %744 = arith.extui %743 : i32 to i64
    %745 = arith.addi %744, %c8_i64_254 : i64
    %746 = llvm.getelementptr %15[%745] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %747 = llvm.load volatile %746 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %747, %8 : i32, !llvm.ptr
    cf.br ^bb71
  ^bb73:  // pred: ^bb70
    %c0_i32_255 = arith.constant 0 : i32
    %748 = llvm.load %9 : !llvm.ptr -> i32
    %749 = llvm.load %8 : !llvm.ptr -> i32
    %750 = arith.ori %748, %749 : i32
    %c1049692_i64_256 = arith.constant 1049692 : i64
    %751 = arith.extui %c0_i32_255 : i32 to i64
    %752 = arith.addi %751, %c1049692_i64_256 : i64
    %753 = llvm.getelementptr %15[%752] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %750, %753 {alignment = 1 : i64} : i32, !llvm.ptr
    %754 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %754, %8 : i32, !llvm.ptr
    cf.br ^bb71
  ^bb74:  // 2 preds: ^bb9, ^bb76
    %755 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_257 = arith.constant 0 : i32
    %756 = arith.cmpi eq, %755, %c0_i32_257 : i32
    %757 = arith.extui %756 : i1 to i32
    %c0_i32_258 = arith.constant 0 : i32
    %758 = arith.cmpi ne, %757, %c0_i32_258 : i32
    cf.cond_br %758, ^bb7, ^bb77
  ^bb75:  // pred: ^bb9
    %c0_i32_259 = arith.constant 0 : i32
    llvm.store %c0_i32_259, %7 : i32, !llvm.ptr
    %c2_i32_260 = arith.constant 2 : i32
    %759 = llvm.load %5 : !llvm.ptr -> i32
    %c31_i32_261 = arith.constant 31 : i32
    %760 = arith.cmpi ule, %759, %c31_i32_261 : i32
    %761 = scf.if %760 -> (i32) {
      %2078 = arith.shli %c2_i32_260, %759 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %761, %0 : i32, !llvm.ptr
    %c0_i32_262 = arith.constant 0 : i32
    %762 = llvm.load %0 : !llvm.ptr -> i32
    %763 = arith.subi %c0_i32_262, %762 : i32
    %764 = arith.ori %761, %763 : i32
    %765 = llvm.load %4 : !llvm.ptr -> i32
    %766 = arith.andi %764, %765 : i32
    llvm.store %766, %0 : i32, !llvm.ptr
    %c0_i32_263 = arith.constant 0 : i32
    %767 = arith.cmpi eq, %766, %c0_i32_263 : i32
    %768 = arith.extui %767 : i1 to i32
    %c0_i32_264 = arith.constant 0 : i32
    %769 = arith.cmpi ne, %768, %c0_i32_264 : i32
    cf.cond_br %769, ^bb6, ^bb76
  ^bb76:  // pred: ^bb75
    %770 = llvm.load %0 : !llvm.ptr -> i32
    %false_265 = arith.constant false
    %771 = llvm.call_intrinsic "llvm.cttz.i32"(%770, %false_265) : (i32, i1) -> i32
    %c2_i32_266 = arith.constant 2 : i32
    %c31_i32_267 = arith.constant 31 : i32
    %772 = arith.cmpi ule, %c2_i32_266, %c31_i32_267 : i32
    %773 = scf.if %772 -> (i32) {
      %2078 = arith.shli %771, %c2_i32_266 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c1049284_i32_268 = arith.constant 1049284 : i32
    %774 = arith.addi %773, %c1049284_i32_268 : i32
    %c0_i64_269 = arith.constant 0 : i64
    %775 = arith.extui %774 : i32 to i64
    %776 = arith.addi %775, %c0_i64_269 : i64
    %777 = llvm.getelementptr %15[%776] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %778 = llvm.load volatile %777 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %778, %0 : i32, !llvm.ptr
    cf.br ^bb74
  ^bb77:  // pred: ^bb74
    cf.br ^bb8
  ^bb78:  // pred: ^bb82
    cf.br ^bb7
  ^bb79:  // 2 preds: ^bb8, ^bb80
    %779 = llvm.load %0 : !llvm.ptr -> i32
    %780 = llvm.load %7 : !llvm.ptr -> i32
    %781 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_270 = arith.constant 4 : i64
    %782 = arith.extui %781 : i32 to i64
    %783 = arith.addi %782, %c4_i64_270 : i64
    %784 = llvm.getelementptr %15[%783] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %785 = llvm.load volatile %784 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-8_i32_271 = arith.constant -8 : i32
    %786 = arith.andi %785, %c-8_i32_271 : i32
    llvm.store %786, %6 : i32, !llvm.ptr
    %787 = llvm.load %3 : !llvm.ptr -> i32
    %788 = arith.subi %786, %787 : i32
    llvm.store %788, %9 : i32, !llvm.ptr
    %789 = llvm.load %2 : !llvm.ptr -> i32
    %790 = arith.cmpi ult, %788, %789 : i32
    %791 = arith.extui %790 : i1 to i32
    llvm.store %791, %5 : i32, !llvm.ptr
    %c0_i32_272 = arith.constant 0 : i32
    %792 = arith.cmpi ne, %791, %c0_i32_272 : i32
    %793 = arith.select %792, %779, %780 : i32
    llvm.store %793, %4 : i32, !llvm.ptr
    %794 = llvm.load %6 : !llvm.ptr -> i32
    %795 = llvm.load %3 : !llvm.ptr -> i32
    %796 = arith.cmpi ult, %794, %795 : i32
    %797 = arith.extui %796 : i1 to i32
    llvm.store %797, %8 : i32, !llvm.ptr
    %798 = llvm.load %9 : !llvm.ptr -> i32
    %799 = llvm.load %2 : !llvm.ptr -> i32
    %800 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_273 = arith.constant 0 : i32
    %801 = arith.cmpi ne, %800, %c0_i32_273 : i32
    %802 = arith.select %801, %798, %799 : i32
    llvm.store %802, %9 : i32, !llvm.ptr
    %803 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64_274 = arith.constant 16 : i64
    %804 = arith.extui %803 : i32 to i64
    %805 = arith.addi %804, %c16_i64_274 : i64
    %806 = llvm.getelementptr %15[%805] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %807 = llvm.load volatile %806 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %807, %6 : i32, !llvm.ptr
    %c0_i32_275 = arith.constant 0 : i32
    %808 = arith.cmpi ne, %807, %c0_i32_275 : i32
    cf.cond_br %808, ^bb80, ^bb81
  ^bb80:  // 2 preds: ^bb79, ^bb81
    %809 = llvm.load %7 : !llvm.ptr -> i32
    %810 = llvm.load %4 : !llvm.ptr -> i32
    %811 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i32_276 = arith.constant 0 : i32
    %812 = arith.cmpi ne, %811, %c0_i32_276 : i32
    %813 = arith.select %812, %809, %810 : i32
    llvm.store %813, %7 : i32, !llvm.ptr
    %814 = llvm.load %2 : !llvm.ptr -> i32
    %815 = llvm.load %9 : !llvm.ptr -> i32
    %816 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i32_277 = arith.constant 0 : i32
    %817 = arith.cmpi ne, %816, %c0_i32_277 : i32
    %818 = arith.select %817, %814, %815 : i32
    llvm.store %818, %2 : i32, !llvm.ptr
    %819 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %819, %0 : i32, !llvm.ptr
    %820 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_278 = arith.constant 0 : i32
    %821 = arith.cmpi ne, %820, %c0_i32_278 : i32
    cf.cond_br %821, ^bb79, ^bb82
  ^bb81:  // pred: ^bb79
    %822 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_279 = arith.constant 20 : i64
    %823 = arith.extui %822 : i32 to i64
    %824 = arith.addi %823, %c20_i64_279 : i64
    %825 = llvm.getelementptr %15[%824] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %826 = llvm.load volatile %825 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %826, %6 : i32, !llvm.ptr
    cf.br ^bb80
  ^bb82:  // pred: ^bb80
    cf.br ^bb78
  ^bb83:  // pred: ^bb7
    %c0_i32_280 = arith.constant 0 : i32
    %c1049700_i64_281 = arith.constant 1049700 : i64
    %827 = arith.extui %c0_i32_280 : i32 to i64
    %828 = arith.addi %827, %c1049700_i64_281 : i64
    %829 = llvm.getelementptr %15[%828] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %830 = llvm.load volatile %829 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %830, %0 : i32, !llvm.ptr
    %831 = llvm.load %3 : !llvm.ptr -> i32
    %832 = arith.cmpi ult, %830, %831 : i32
    %833 = arith.extui %832 : i1 to i32
    %c0_i32_282 = arith.constant 0 : i32
    %834 = arith.cmpi ne, %833, %c0_i32_282 : i32
    cf.cond_br %834, ^bb84, ^bb85
  ^bb84:  // 2 preds: ^bb83, ^bb86
    %835 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i64_283 = arith.constant 24 : i64
    %836 = arith.extui %835 : i32 to i64
    %837 = arith.addi %836, %c24_i64_283 : i64
    %838 = llvm.getelementptr %15[%837] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %839 = llvm.load volatile %838 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %839, %5 : i32, !llvm.ptr
    %840 = llvm.load %7 : !llvm.ptr -> i32
    %c12_i64_284 = arith.constant 12 : i64
    %841 = arith.extui %840 : i32 to i64
    %842 = arith.addi %841, %c12_i64_284 : i64
    %843 = llvm.getelementptr %15[%842] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %844 = llvm.load volatile %843 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %844, %0 : i32, !llvm.ptr
    %845 = llvm.load %7 : !llvm.ptr -> i32
    %846 = arith.cmpi eq, %844, %845 : i32
    %847 = arith.extui %846 : i1 to i32
    %c0_i32_285 = arith.constant 0 : i32
    %848 = arith.cmpi eq, %847, %c0_i32_285 : i32
    %849 = arith.extui %848 : i1 to i32
    %c0_i32_286 = arith.constant 0 : i32
    %850 = arith.cmpi ne, %849, %c0_i32_286 : i32
    cf.cond_br %850, ^bb89, ^bb90
  ^bb85:  // pred: ^bb83
    %851 = llvm.load %2 : !llvm.ptr -> i32
    %852 = llvm.load %0 : !llvm.ptr -> i32
    %853 = llvm.load %3 : !llvm.ptr -> i32
    %854 = arith.subi %852, %853 : i32
    %855 = arith.cmpi uge, %851, %854 : i32
    %856 = arith.extui %855 : i1 to i32
    %c0_i32_287 = arith.constant 0 : i32
    %857 = arith.cmpi ne, %856, %c0_i32_287 : i32
    cf.cond_br %857, ^bb6, ^bb86
  ^bb86:  // pred: ^bb85
    cf.br ^bb84
  ^bb87:  // 3 preds: ^bb89, ^bb91, ^bb92
    %858 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_288 = arith.constant 0 : i32
    %859 = arith.cmpi eq, %858, %c0_i32_288 : i32
    %860 = arith.extui %859 : i1 to i32
    %c0_i32_289 = arith.constant 0 : i32
    %861 = arith.cmpi ne, %860, %c0_i32_289 : i32
    cf.cond_br %861, ^bb4, ^bb95
  ^bb88:  // pred: ^bb90
    %862 = llvm.load %7 : !llvm.ptr -> i32
    %c20_i32_290 = arith.constant 20 : i32
    %863 = arith.addi %862, %c20_i32_290 : i32
    %864 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32_291 = arith.constant 16 : i32
    %865 = arith.addi %864, %c16_i32_291 : i32
    %866 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_292 = arith.constant 0 : i32
    %867 = arith.cmpi ne, %866, %c0_i32_292 : i32
    %868 = arith.select %867, %863, %865 : i32
    llvm.store %868, %8 : i32, !llvm.ptr
    cf.br ^bb93
  ^bb89:  // pred: ^bb84
    %869 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i64_293 = arith.constant 8 : i64
    %870 = arith.extui %869 : i32 to i64
    %871 = arith.addi %870, %c8_i64_293 : i64
    %872 = llvm.getelementptr %15[%871] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %873 = llvm.load volatile %872 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %873, %6 : i32, !llvm.ptr
    %874 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_294 = arith.constant 12 : i64
    %875 = arith.extui %873 : i32 to i64
    %876 = arith.addi %875, %c12_i64_294 : i64
    %877 = llvm.getelementptr %15[%876] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %874, %877 {alignment = 1 : i64} : i32, !llvm.ptr
    %878 = llvm.load %0 : !llvm.ptr -> i32
    %879 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i64_295 = arith.constant 8 : i64
    %880 = arith.extui %878 : i32 to i64
    %881 = arith.addi %880, %c8_i64_295 : i64
    %882 = llvm.getelementptr %15[%881] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %879, %882 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb87
  ^bb90:  // pred: ^bb84
    %883 = llvm.load %7 : !llvm.ptr -> i32
    %c20_i32_296 = arith.constant 20 : i32
    %c16_i32_297 = arith.constant 16 : i32
    %884 = llvm.load %7 : !llvm.ptr -> i32
    %c20_i64_298 = arith.constant 20 : i64
    %885 = arith.extui %884 : i32 to i64
    %886 = arith.addi %885, %c20_i64_298 : i64
    %887 = llvm.getelementptr %15[%886] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %888 = llvm.load volatile %887 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %888, %0 : i32, !llvm.ptr
    %c0_i32_299 = arith.constant 0 : i32
    %889 = arith.cmpi ne, %888, %c0_i32_299 : i32
    %890 = arith.select %889, %c20_i32_296, %c16_i32_297 : i32
    %891 = arith.addi %883, %890 : i32
    %c0_i64_300 = arith.constant 0 : i64
    %892 = arith.extui %891 : i32 to i64
    %893 = arith.addi %892, %c0_i64_300 : i64
    %894 = llvm.getelementptr %15[%893] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %895 = llvm.load volatile %894 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %895, %6 : i32, !llvm.ptr
    %c0_i32_301 = arith.constant 0 : i32
    %896 = arith.cmpi ne, %895, %c0_i32_301 : i32
    cf.cond_br %896, ^bb88, ^bb91
  ^bb91:  // pred: ^bb90
    %c0_i32_302 = arith.constant 0 : i32
    llvm.store %c0_i32_302, %0 : i32, !llvm.ptr
    cf.br ^bb87
  ^bb92:  // pred: ^bb94
    %897 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_303 = arith.constant 0 : i32
    %c0_i64_304 = arith.constant 0 : i64
    %898 = arith.extui %897 : i32 to i64
    %899 = arith.addi %898, %c0_i64_304 : i64
    %900 = llvm.getelementptr %15[%899] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_303, %900 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb87
  ^bb93:  // 2 preds: ^bb88, ^bb93
    %901 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %901, %9 : i32, !llvm.ptr
    %902 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %902, %0 : i32, !llvm.ptr
    %c20_i32_305 = arith.constant 20 : i32
    %903 = arith.addi %902, %c20_i32_305 : i32
    %904 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_306 = arith.constant 16 : i32
    %905 = arith.addi %904, %c16_i32_306 : i32
    %906 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_307 = arith.constant 20 : i64
    %907 = arith.extui %906 : i32 to i64
    %908 = arith.addi %907, %c20_i64_307 : i64
    %909 = llvm.getelementptr %15[%908] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %910 = llvm.load volatile %909 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %910, %6 : i32, !llvm.ptr
    %c0_i32_308 = arith.constant 0 : i32
    %911 = arith.cmpi ne, %910, %c0_i32_308 : i32
    %912 = arith.select %911, %903, %905 : i32
    llvm.store %912, %8 : i32, !llvm.ptr
    %913 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32_309 = arith.constant 20 : i32
    %c16_i32_310 = arith.constant 16 : i32
    %914 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_311 = arith.constant 0 : i32
    %915 = arith.cmpi ne, %914, %c0_i32_311 : i32
    %916 = arith.select %915, %c20_i32_309, %c16_i32_310 : i32
    %917 = arith.addi %913, %916 : i32
    %c0_i64_312 = arith.constant 0 : i64
    %918 = arith.extui %917 : i32 to i64
    %919 = arith.addi %918, %c0_i64_312 : i64
    %920 = llvm.getelementptr %15[%919] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %921 = llvm.load volatile %920 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %921, %6 : i32, !llvm.ptr
    %c0_i32_313 = arith.constant 0 : i32
    %922 = arith.cmpi ne, %921, %c0_i32_313 : i32
    cf.cond_br %922, ^bb93, ^bb94
  ^bb94:  // pred: ^bb93
    cf.br ^bb92
  ^bb95:  // pred: ^bb87
    %923 = llvm.load %7 : !llvm.ptr -> i32
    %c28_i64_314 = arith.constant 28 : i64
    %924 = arith.extui %923 : i32 to i64
    %925 = arith.addi %924, %c28_i64_314 : i64
    %926 = llvm.getelementptr %15[%925] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %927 = llvm.load volatile %926 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32_315 = arith.constant 2 : i32
    %c31_i32_316 = arith.constant 31 : i32
    %928 = arith.cmpi ule, %c2_i32_315, %c31_i32_316 : i32
    %929 = scf.if %928 -> (i32) {
      %2078 = arith.shli %927, %c2_i32_315 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c1049284_i32_317 = arith.constant 1049284 : i32
    %930 = arith.addi %929, %c1049284_i32_317 : i32
    llvm.store %930, %6 : i32, !llvm.ptr
    %c0_i64_318 = arith.constant 0 : i64
    %931 = arith.extui %930 : i32 to i64
    %932 = arith.addi %931, %c0_i64_318 : i64
    %933 = llvm.getelementptr %15[%932] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %934 = llvm.load volatile %933 {alignment = 1 : i64} : !llvm.ptr -> i32
    %935 = llvm.load %7 : !llvm.ptr -> i32
    %936 = arith.cmpi eq, %934, %935 : i32
    %937 = arith.extui %936 : i1 to i32
    %c0_i32_319 = arith.constant 0 : i32
    %938 = arith.cmpi ne, %937, %c0_i32_319 : i32
    cf.cond_br %938, ^bb96, ^bb97
  ^bb96:  // pred: ^bb95
    %939 = llvm.load %6 : !llvm.ptr -> i32
    %940 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_320 = arith.constant 0 : i64
    %941 = arith.extui %939 : i32 to i64
    %942 = arith.addi %941, %c0_i64_320 : i64
    %943 = llvm.getelementptr %15[%942] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %940, %943 {alignment = 1 : i64} : i32, !llvm.ptr
    %944 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_321 = arith.constant 0 : i32
    %945 = arith.cmpi ne, %944, %c0_i32_321 : i32
    cf.cond_br %945, ^bb5, ^bb99
  ^bb97:  // pred: ^bb95
    %946 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_322 = arith.constant 16 : i32
    %c20_i32_323 = arith.constant 20 : i32
    %947 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i64_324 = arith.constant 16 : i64
    %948 = arith.extui %947 : i32 to i64
    %949 = arith.addi %948, %c16_i64_324 : i64
    %950 = llvm.getelementptr %15[%949] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %951 = llvm.load volatile %950 {alignment = 1 : i64} : !llvm.ptr -> i32
    %952 = llvm.load %7 : !llvm.ptr -> i32
    %953 = arith.cmpi eq, %951, %952 : i32
    %954 = arith.extui %953 : i1 to i32
    %c0_i32_325 = arith.constant 0 : i32
    %955 = arith.cmpi ne, %954, %c0_i32_325 : i32
    %956 = arith.select %955, %c16_i32_322, %c20_i32_323 : i32
    %957 = arith.addi %946, %956 : i32
    %958 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_326 = arith.constant 0 : i64
    %959 = arith.extui %957 : i32 to i64
    %960 = arith.addi %959, %c0_i64_326 : i64
    %961 = llvm.getelementptr %15[%960] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %958, %961 {alignment = 1 : i64} : i32, !llvm.ptr
    %962 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_327 = arith.constant 0 : i32
    %963 = arith.cmpi eq, %962, %c0_i32_327 : i32
    %964 = arith.extui %963 : i1 to i32
    %c0_i32_328 = arith.constant 0 : i32
    %965 = arith.cmpi ne, %964, %c0_i32_328 : i32
    cf.cond_br %965, ^bb4, ^bb98
  ^bb98:  // pred: ^bb97
    cf.br ^bb5
  ^bb99:  // pred: ^bb96
    %c0_i32_329 = arith.constant 0 : i32
    %c0_i32_330 = arith.constant 0 : i32
    %c1049696_i64_331 = arith.constant 1049696 : i64
    %966 = arith.extui %c0_i32_330 : i32 to i64
    %967 = arith.addi %966, %c1049696_i64_331 : i64
    %968 = llvm.getelementptr %15[%967] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %969 = llvm.load volatile %968 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32_332 = arith.constant -2 : i32
    %970 = llvm.load %7 : !llvm.ptr -> i32
    %c28_i64_333 = arith.constant 28 : i64
    %971 = arith.extui %970 : i32 to i64
    %972 = arith.addi %971, %c28_i64_333 : i64
    %973 = llvm.getelementptr %15[%972] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %974 = llvm.load volatile %973 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c32_i32_334 = arith.constant 32 : i32
    %975 = arith.remui %974, %c32_i32_334 : i32
    %976 = arith.shli %c-2_i32_332, %975 : i32
    %977 = arith.subi %c32_i32_334, %975 : i32
    %978 = arith.shrui %c-2_i32_332, %977 : i32
    %979 = arith.ori %976, %978 : i32
    %980 = arith.andi %969, %979 : i32
    %c1049696_i64_335 = arith.constant 1049696 : i64
    %981 = arith.extui %c0_i32_329 : i32 to i64
    %982 = arith.addi %981, %c1049696_i64_335 : i64
    %983 = llvm.getelementptr %15[%982] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %980, %983 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb100:  // 5 preds: ^bb104, ^bb119, ^bb142, ^bb147, ^bb148
    %c0_i32_336 = arith.constant 0 : i32
    llvm.store %c0_i32_336, %0 : i32, !llvm.ptr
    %c0_i32_337 = arith.constant 0 : i32
    %c1049704_i64 = arith.constant 1049704 : i64
    %984 = arith.extui %c0_i32_337 : i32 to i64
    %985 = arith.addi %984, %c1049704_i64 : i64
    %986 = llvm.getelementptr %15[%985] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %987 = llvm.load volatile %986 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %987, %2 : i32, !llvm.ptr
    %988 = llvm.load %3 : !llvm.ptr -> i32
    %989 = arith.cmpi ule, %987, %988 : i32
    %990 = arith.extui %989 : i1 to i32
    %c0_i32_338 = arith.constant 0 : i32
    %991 = arith.cmpi ne, %990, %c0_i32_338 : i32
    cf.cond_br %991, ^bb3, ^bb163
  ^bb101:  // 4 preds: ^bb102, ^bb103, ^bb156, ^bb157
    %992 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_339 = arith.constant 8 : i32
    %993 = arith.addi %992, %c8_i32_339 : i32
    llvm.store %993, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb102:  // pred: ^bb151
    %c0_i32_340 = arith.constant 0 : i32
    %994 = llvm.load %0 : !llvm.ptr -> i32
    %c1049708_i64_341 = arith.constant 1049708 : i64
    %995 = arith.extui %c0_i32_340 : i32 to i64
    %996 = arith.addi %995, %c1049708_i64_341 : i64
    %997 = llvm.getelementptr %15[%996] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %994, %997 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_342 = arith.constant 0 : i32
    %c0_i32_343 = arith.constant 0 : i32
    %c1049700_i64_344 = arith.constant 1049700 : i64
    %998 = arith.extui %c0_i32_343 : i32 to i64
    %999 = arith.addi %998, %c1049700_i64_344 : i64
    %1000 = llvm.getelementptr %15[%999] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1001 = llvm.load volatile %1000 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1002 = llvm.load %3 : !llvm.ptr -> i32
    %1003 = arith.addi %1001, %1002 : i32
    llvm.store %1003, %3 : i32, !llvm.ptr
    %c1049700_i64_345 = arith.constant 1049700 : i64
    %1004 = arith.extui %c0_i32_342 : i32 to i64
    %1005 = arith.addi %1004, %c1049700_i64_345 : i64
    %1006 = llvm.getelementptr %15[%1005] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1003, %1006 {alignment = 1 : i64} : i32, !llvm.ptr
    %1007 = llvm.load %0 : !llvm.ptr -> i32
    %1008 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_346 = arith.constant 1 : i32
    %1009 = arith.ori %1008, %c1_i32_346 : i32
    %c4_i64_347 = arith.constant 4 : i64
    %1010 = arith.extui %1007 : i32 to i64
    %1011 = arith.addi %1010, %c4_i64_347 : i64
    %1012 = llvm.getelementptr %15[%1011] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1009, %1012 {alignment = 1 : i64} : i32, !llvm.ptr
    %1013 = llvm.load %0 : !llvm.ptr -> i32
    %1014 = llvm.load %3 : !llvm.ptr -> i32
    %1015 = arith.addi %1013, %1014 : i32
    %1016 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_348 = arith.constant 0 : i64
    %1017 = arith.extui %1015 : i32 to i64
    %1018 = arith.addi %1017, %c0_i64_348 : i64
    %1019 = llvm.getelementptr %15[%1018] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1016, %1019 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb101
  ^bb103:  // pred: ^bb127
    %c0_i32_349 = arith.constant 0 : i32
    %1020 = llvm.load %0 : !llvm.ptr -> i32
    %c1049712_i64 = arith.constant 1049712 : i64
    %1021 = arith.extui %c0_i32_349 : i32 to i64
    %1022 = arith.addi %1021, %c1049712_i64 : i64
    %1023 = llvm.getelementptr %15[%1022] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1020, %1023 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_350 = arith.constant 0 : i32
    %c0_i32_351 = arith.constant 0 : i32
    %c1049704_i64_352 = arith.constant 1049704 : i64
    %1024 = arith.extui %c0_i32_351 : i32 to i64
    %1025 = arith.addi %1024, %c1049704_i64_352 : i64
    %1026 = llvm.getelementptr %15[%1025] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1027 = llvm.load volatile %1026 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1028 = llvm.load %3 : !llvm.ptr -> i32
    %1029 = arith.addi %1027, %1028 : i32
    llvm.store %1029, %3 : i32, !llvm.ptr
    %c1049704_i64_353 = arith.constant 1049704 : i64
    %1030 = arith.extui %c0_i32_350 : i32 to i64
    %1031 = arith.addi %1030, %c1049704_i64_353 : i64
    %1032 = llvm.getelementptr %15[%1031] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1029, %1032 {alignment = 1 : i64} : i32, !llvm.ptr
    %1033 = llvm.load %0 : !llvm.ptr -> i32
    %1034 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_354 = arith.constant 1 : i32
    %1035 = arith.ori %1034, %c1_i32_354 : i32
    %c4_i64_355 = arith.constant 4 : i64
    %1036 = arith.extui %1033 : i32 to i64
    %1037 = arith.addi %1036, %c4_i64_355 : i64
    %1038 = llvm.getelementptr %15[%1037] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1035, %1038 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb101
  ^bb104:  // pred: ^bb125
    %1039 = llvm.load %0 : !llvm.ptr -> i32
    %1040 = llvm.load %8 : !llvm.ptr -> i32
    %1041 = llvm.load %9 : !llvm.ptr -> i32
    %1042 = arith.addi %1040, %1041 : i32
    %c4_i64_356 = arith.constant 4 : i64
    %1043 = arith.extui %1039 : i32 to i64
    %1044 = arith.addi %1043, %c4_i64_356 : i64
    %1045 = llvm.getelementptr %15[%1044] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1042, %1045 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_357 = arith.constant 0 : i32
    %c0_i32_358 = arith.constant 0 : i32
    %c1049712_i64_359 = arith.constant 1049712 : i64
    %1046 = arith.extui %c0_i32_358 : i32 to i64
    %1047 = arith.addi %1046, %c1049712_i64_359 : i64
    %1048 = llvm.getelementptr %15[%1047] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1049 = llvm.load volatile %1048 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1049, %0 : i32, !llvm.ptr
    %c15_i32 = arith.constant 15 : i32
    %1050 = arith.addi %1049, %c15_i32 : i32
    %c-8_i32_360 = arith.constant -8 : i32
    %1051 = arith.andi %1050, %c-8_i32_360 : i32
    llvm.store %1051, %2 : i32, !llvm.ptr
    %c-8_i32_361 = arith.constant -8 : i32
    %1052 = arith.addi %1051, %c-8_i32_361 : i32
    llvm.store %1052, %7 : i32, !llvm.ptr
    %c1049712_i64_362 = arith.constant 1049712 : i64
    %1053 = arith.extui %c0_i32_357 : i32 to i64
    %1054 = arith.addi %1053, %c1049712_i64_362 : i64
    %1055 = llvm.getelementptr %15[%1054] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1052, %1055 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_363 = arith.constant 0 : i32
    %1056 = llvm.load %0 : !llvm.ptr -> i32
    %1057 = llvm.load %2 : !llvm.ptr -> i32
    %1058 = arith.subi %1056, %1057 : i32
    %c0_i32_364 = arith.constant 0 : i32
    %c1049704_i64_365 = arith.constant 1049704 : i64
    %1059 = arith.extui %c0_i32_364 : i32 to i64
    %1060 = arith.addi %1059, %c1049704_i64_365 : i64
    %1061 = llvm.getelementptr %15[%1060] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1062 = llvm.load volatile %1061 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1063 = llvm.load %9 : !llvm.ptr -> i32
    %1064 = arith.addi %1062, %1063 : i32
    llvm.store %1064, %2 : i32, !llvm.ptr
    %1065 = arith.addi %1058, %1064 : i32
    %c8_i32_366 = arith.constant 8 : i32
    %1066 = arith.addi %1065, %c8_i32_366 : i32
    llvm.store %1066, %6 : i32, !llvm.ptr
    %c1049704_i64_367 = arith.constant 1049704 : i64
    %1067 = arith.extui %c0_i32_363 : i32 to i64
    %1068 = arith.addi %1067, %c1049704_i64_367 : i64
    %1069 = llvm.getelementptr %15[%1068] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1066, %1069 {alignment = 1 : i64} : i32, !llvm.ptr
    %1070 = llvm.load %7 : !llvm.ptr -> i32
    %1071 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_368 = arith.constant 1 : i32
    %1072 = arith.ori %1071, %c1_i32_368 : i32
    %c4_i64_369 = arith.constant 4 : i64
    %1073 = arith.extui %1070 : i32 to i64
    %1074 = arith.addi %1073, %c4_i64_369 : i64
    %1075 = llvm.getelementptr %15[%1074] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1072, %1075 {alignment = 1 : i64} : i32, !llvm.ptr
    %1076 = llvm.load %0 : !llvm.ptr -> i32
    %1077 = llvm.load %2 : !llvm.ptr -> i32
    %1078 = arith.addi %1076, %1077 : i32
    %c40_i32 = arith.constant 40 : i32
    %c4_i64_370 = arith.constant 4 : i64
    %1079 = arith.extui %1078 : i32 to i64
    %1080 = arith.addi %1079, %c4_i64_370 : i64
    %1081 = llvm.getelementptr %15[%1080] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c40_i32, %1081 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_371 = arith.constant 0 : i32
    %c2097152_i32 = arith.constant 2097152 : i32
    %c1049724_i64 = arith.constant 1049724 : i64
    %1082 = arith.extui %c0_i32_371 : i32 to i64
    %1083 = arith.addi %1082, %c1049724_i64 : i64
    %1084 = llvm.getelementptr %15[%1083] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2097152_i32, %1084 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb100
  ^bb105:  // pred: ^bb6
    %c0_i32_372 = arith.constant 0 : i32
    %c1049708_i64_373 = arith.constant 1049708 : i64
    %1085 = arith.extui %c0_i32_372 : i32 to i64
    %1086 = arith.addi %1085, %c1049708_i64_373 : i64
    %1087 = llvm.getelementptr %15[%1086] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1088 = llvm.load volatile %1087 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1088, %2 : i32, !llvm.ptr
    %1089 = llvm.load %0 : !llvm.ptr -> i32
    %1090 = llvm.load %3 : !llvm.ptr -> i32
    %1091 = arith.subi %1089, %1090 : i32
    llvm.store %1091, %7 : i32, !llvm.ptr
    %c15_i32_374 = arith.constant 15 : i32
    %1092 = arith.cmpi ugt, %1091, %c15_i32_374 : i32
    %1093 = arith.extui %1092 : i1 to i32
    %c0_i32_375 = arith.constant 0 : i32
    %1094 = arith.cmpi ne, %1093, %c0_i32_375 : i32
    cf.cond_br %1094, ^bb161, ^bb162
  ^bb106:  // pred: ^bb6
    %c0_i32_376 = arith.constant 0 : i32
    %c1049704_i64_377 = arith.constant 1049704 : i64
    %1095 = arith.extui %c0_i32_376 : i32 to i64
    %1096 = arith.addi %1095, %c1049704_i64_377 : i64
    %1097 = llvm.getelementptr %15[%1096] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1098 = llvm.load volatile %1097 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1098, %0 : i32, !llvm.ptr
    %1099 = llvm.load %3 : !llvm.ptr -> i32
    %1100 = arith.cmpi ugt, %1098, %1099 : i32
    %1101 = arith.extui %1100 : i1 to i32
    %c0_i32_378 = arith.constant 0 : i32
    %1102 = arith.cmpi ne, %1101, %c0_i32_378 : i32
    cf.cond_br %1102, ^bb107, ^bb108
  ^bb107:  // pred: ^bb106
    %c0_i32_379 = arith.constant 0 : i32
    %1103 = llvm.load %0 : !llvm.ptr -> i32
    %1104 = llvm.load %3 : !llvm.ptr -> i32
    %1105 = arith.subi %1103, %1104 : i32
    llvm.store %1105, %2 : i32, !llvm.ptr
    %c1049704_i64_380 = arith.constant 1049704 : i64
    %1106 = arith.extui %c0_i32_379 : i32 to i64
    %1107 = arith.addi %1106, %c1049704_i64_380 : i64
    %1108 = llvm.getelementptr %15[%1107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1105, %1108 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_381 = arith.constant 0 : i32
    %c0_i32_382 = arith.constant 0 : i32
    %c1049712_i64_383 = arith.constant 1049712 : i64
    %1109 = arith.extui %c0_i32_382 : i32 to i64
    %1110 = arith.addi %1109, %c1049712_i64_383 : i64
    %1111 = llvm.getelementptr %15[%1110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1112 = llvm.load volatile %1111 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1112, %0 : i32, !llvm.ptr
    %1113 = llvm.load %3 : !llvm.ptr -> i32
    %1114 = arith.addi %1112, %1113 : i32
    llvm.store %1114, %7 : i32, !llvm.ptr
    %c1049712_i64_384 = arith.constant 1049712 : i64
    %1115 = arith.extui %c0_i32_381 : i32 to i64
    %1116 = arith.addi %1115, %c1049712_i64_384 : i64
    %1117 = llvm.getelementptr %15[%1116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1114, %1117 {alignment = 1 : i64} : i32, !llvm.ptr
    %1118 = llvm.load %7 : !llvm.ptr -> i32
    %1119 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_385 = arith.constant 1 : i32
    %1120 = arith.ori %1119, %c1_i32_385 : i32
    %c4_i64_386 = arith.constant 4 : i64
    %1121 = arith.extui %1118 : i32 to i64
    %1122 = arith.addi %1121, %c4_i64_386 : i64
    %1123 = llvm.getelementptr %15[%1122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1120, %1123 {alignment = 1 : i64} : i32, !llvm.ptr
    %1124 = llvm.load %0 : !llvm.ptr -> i32
    %1125 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_387 = arith.constant 3 : i32
    %1126 = arith.ori %1125, %c3_i32_387 : i32
    %c4_i64_388 = arith.constant 4 : i64
    %1127 = arith.extui %1124 : i32 to i64
    %1128 = arith.addi %1127, %c4_i64_388 : i64
    %1129 = llvm.getelementptr %15[%1128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1126, %1129 {alignment = 1 : i64} : i32, !llvm.ptr
    %1130 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_389 = arith.constant 8 : i32
    %1131 = arith.addi %1130, %c8_i32_389 : i32
    llvm.store %1131, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb108:  // pred: ^bb106
    %1132 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_390 = arith.constant 4 : i32
    %1133 = arith.addi %1132, %c4_i32_390 : i32
    %c1049736_i32 = arith.constant 1049736 : i32
    %1134 = llvm.load %3 : !llvm.ptr -> i32
    %c65583_i32 = arith.constant 65583 : i32
    %1135 = arith.addi %1134, %c65583_i32 : i32
    %c-65536_i32 = arith.constant -65536 : i32
    %1136 = arith.andi %1135, %c-65536_i32 : i32
    call @f41(%arg0, %1133, %c1049736_i32, %1136) : (!llvm.ptr, i32, i32, i32) -> ()
    %1137 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_391 = arith.constant 4 : i64
    %1138 = arith.extui %1137 : i32 to i64
    %1139 = arith.addi %1138, %c4_i64_391 : i64
    %1140 = llvm.getelementptr %15[%1139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1141 = llvm.load volatile %1140 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1141, %6 : i32, !llvm.ptr
    %c0_i32_392 = arith.constant 0 : i32
    %1142 = arith.cmpi ne, %1141, %c0_i32_392 : i32
    cf.cond_br %1142, ^bb109, ^bb110
  ^bb109:  // pred: ^bb108
    %1143 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_393 = arith.constant 12 : i64
    %1144 = arith.extui %1143 : i32 to i64
    %1145 = arith.addi %1144, %c12_i64_393 : i64
    %1146 = llvm.getelementptr %15[%1145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1147 = llvm.load volatile %1146 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1147, %5 : i32, !llvm.ptr
    %c0_i32_394 = arith.constant 0 : i32
    %c0_i32_395 = arith.constant 0 : i32
    %c1049716_i64 = arith.constant 1049716 : i64
    %1148 = arith.extui %c0_i32_395 : i32 to i64
    %1149 = arith.addi %1148, %c1049716_i64 : i64
    %1150 = llvm.getelementptr %15[%1149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1151 = llvm.load volatile %1150 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1152 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_396 = arith.constant 8 : i64
    %1153 = arith.extui %1152 : i32 to i64
    %1154 = arith.addi %1153, %c8_i64_396 : i64
    %1155 = llvm.getelementptr %15[%1154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1156 = llvm.load volatile %1155 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1156, %9 : i32, !llvm.ptr
    %1157 = arith.addi %1151, %1156 : i32
    llvm.store %1157, %0 : i32, !llvm.ptr
    %c1049716_i64_397 = arith.constant 1049716 : i64
    %1158 = arith.extui %c0_i32_394 : i32 to i64
    %1159 = arith.addi %1158, %c1049716_i64_397 : i64
    %1160 = llvm.getelementptr %15[%1159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1157, %1160 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_398 = arith.constant 0 : i32
    %c0_i32_399 = arith.constant 0 : i32
    %c1049720_i64 = arith.constant 1049720 : i64
    %1161 = arith.extui %c0_i32_399 : i32 to i64
    %1162 = arith.addi %1161, %c1049720_i64 : i64
    %1163 = llvm.getelementptr %15[%1162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1164 = llvm.load volatile %1163 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1164, %2 : i32, !llvm.ptr
    %1165 = llvm.load %0 : !llvm.ptr -> i32
    %1166 = llvm.load %2 : !llvm.ptr -> i32
    %1167 = llvm.load %0 : !llvm.ptr -> i32
    %1168 = arith.cmpi ugt, %1166, %1167 : i32
    %1169 = arith.extui %1168 : i1 to i32
    %c0_i32_400 = arith.constant 0 : i32
    %1170 = arith.cmpi ne, %1169, %c0_i32_400 : i32
    %1171 = arith.select %1170, %1164, %1165 : i32
    %c1049720_i64_401 = arith.constant 1049720 : i64
    %1172 = arith.extui %c0_i32_398 : i32 to i64
    %1173 = arith.addi %1172, %c1049720_i64_401 : i64
    %1174 = llvm.getelementptr %15[%1173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1171, %1174 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_402 = arith.constant 0 : i32
    %c1049712_i64_403 = arith.constant 1049712 : i64
    %1175 = arith.extui %c0_i32_402 : i32 to i64
    %1176 = arith.addi %1175, %c1049712_i64_403 : i64
    %1177 = llvm.getelementptr %15[%1176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1178 = llvm.load volatile %1177 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1178, %2 : i32, !llvm.ptr
    %c0_i32_404 = arith.constant 0 : i32
    %1179 = arith.cmpi eq, %1178, %c0_i32_404 : i32
    %1180 = arith.extui %1179 : i1 to i32
    %c0_i32_405 = arith.constant 0 : i32
    %1181 = arith.cmpi ne, %1180, %c0_i32_405 : i32
    cf.cond_br %1181, ^bb113, ^bb114
  ^bb110:  // pred: ^bb108
    %c0_i32_406 = arith.constant 0 : i32
    llvm.store %c0_i32_406, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb111:  // 5 preds: ^bb112, ^bb118, ^bb123, ^bb124, ^bb126
    %c0_i32_407 = arith.constant 0 : i32
    %c0_i32_408 = arith.constant 0 : i32
    %c1049728_i64 = arith.constant 1049728 : i64
    %1182 = arith.extui %c0_i32_408 : i32 to i64
    %1183 = arith.addi %1182, %c1049728_i64 : i64
    %1184 = llvm.getelementptr %15[%1183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1185 = llvm.load volatile %1184 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1185, %0 : i32, !llvm.ptr
    %1186 = llvm.load %6 : !llvm.ptr -> i32
    %1187 = llvm.load %6 : !llvm.ptr -> i32
    %1188 = llvm.load %0 : !llvm.ptr -> i32
    %1189 = arith.cmpi ugt, %1187, %1188 : i32
    %1190 = arith.extui %1189 : i1 to i32
    %c0_i32_409 = arith.constant 0 : i32
    %1191 = arith.cmpi ne, %1190, %c0_i32_409 : i32
    %1192 = arith.select %1191, %1185, %1186 : i32
    %c1049728_i64_410 = arith.constant 1049728 : i64
    %1193 = arith.extui %c0_i32_407 : i32 to i64
    %1194 = arith.addi %1193, %c1049728_i64_410 : i64
    %1195 = llvm.getelementptr %15[%1194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1192, %1195 {alignment = 1 : i64} : i32, !llvm.ptr
    %1196 = llvm.load %6 : !llvm.ptr -> i32
    %1197 = llvm.load %9 : !llvm.ptr -> i32
    %1198 = arith.addi %1196, %1197 : i32
    llvm.store %1198, %7 : i32, !llvm.ptr
    %c1049412_i32 = arith.constant 1049412 : i32
    llvm.store %c1049412_i32, %0 : i32, !llvm.ptr
    cf.br ^bb131
  ^bb112:  // pred: ^bb116
    %1199 = llvm.load %2 : !llvm.ptr -> i32
    %1200 = llvm.load %6 : !llvm.ptr -> i32
    %1201 = arith.cmpi uge, %1199, %1200 : i32
    %1202 = arith.extui %1201 : i1 to i32
    %c0_i32_411 = arith.constant 0 : i32
    %1203 = arith.cmpi ne, %1202, %c0_i32_411 : i32
    cf.cond_br %1203, ^bb111, ^bb123
  ^bb113:  // 2 preds: ^bb109, ^bb115
    %c0_i32_412 = arith.constant 0 : i32
    %c1049728_i64_413 = arith.constant 1049728 : i64
    %1204 = arith.extui %c0_i32_412 : i32 to i64
    %1205 = arith.addi %1204, %c1049728_i64_413 : i64
    %1206 = llvm.getelementptr %15[%1205] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1207 = llvm.load volatile %1206 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1207, %0 : i32, !llvm.ptr
    %c0_i32_414 = arith.constant 0 : i32
    %1208 = arith.cmpi eq, %1207, %c0_i32_414 : i32
    %1209 = arith.extui %1208 : i1 to i32
    %c0_i32_415 = arith.constant 0 : i32
    %1210 = arith.cmpi ne, %1209, %c0_i32_415 : i32
    cf.cond_br %1210, ^bb120, ^bb121
  ^bb114:  // pred: ^bb109
    %c1049412_i32_416 = arith.constant 1049412 : i32
    llvm.store %c1049412_i32_416, %0 : i32, !llvm.ptr
    cf.br ^bb116
  ^bb115:  // no predecessors
    cf.br ^bb113
  ^bb116:  // 2 preds: ^bb114, ^bb117
    %1211 = llvm.load %6 : !llvm.ptr -> i32
    %1212 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_417 = arith.constant 0 : i64
    %1213 = arith.extui %1212 : i32 to i64
    %1214 = arith.addi %1213, %c0_i64_417 : i64
    %1215 = llvm.getelementptr %15[%1214] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1216 = llvm.load volatile %1215 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1216, %7 : i32, !llvm.ptr
    %1217 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_418 = arith.constant 4 : i64
    %1218 = arith.extui %1217 : i32 to i64
    %1219 = arith.addi %1218, %c4_i64_418 : i64
    %1220 = llvm.getelementptr %15[%1219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1221 = llvm.load volatile %1220 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1221, %8 : i32, !llvm.ptr
    %1222 = arith.addi %1216, %1221 : i32
    %1223 = arith.cmpi eq, %1211, %1222 : i32
    %1224 = arith.extui %1223 : i1 to i32
    %c0_i32_419 = arith.constant 0 : i32
    %1225 = arith.cmpi ne, %1224, %c0_i32_419 : i32
    cf.cond_br %1225, ^bb112, ^bb117
  ^bb117:  // pred: ^bb116
    %1226 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_420 = arith.constant 8 : i64
    %1227 = arith.extui %1226 : i32 to i64
    %1228 = arith.addi %1227, %c8_i64_420 : i64
    %1229 = llvm.getelementptr %15[%1228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1230 = llvm.load volatile %1229 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1230, %0 : i32, !llvm.ptr
    %c0_i32_421 = arith.constant 0 : i32
    %1231 = arith.cmpi ne, %1230, %c0_i32_421 : i32
    cf.cond_br %1231, ^bb116, ^bb118
  ^bb118:  // pred: ^bb117
    cf.br ^bb111
  ^bb119:  // 2 preds: ^bb120, ^bb121
    %c0_i32_422 = arith.constant 0 : i32
    %c4095_i32 = arith.constant 4095 : i32
    %c1049732_i64 = arith.constant 1049732 : i64
    %1232 = arith.extui %c0_i32_422 : i32 to i64
    %1233 = arith.addi %1232, %c1049732_i64 : i64
    %1234 = llvm.getelementptr %15[%1233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4095_i32, %1234 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_423 = arith.constant 0 : i32
    %1235 = llvm.load %5 : !llvm.ptr -> i32
    %c1049424_i64 = arith.constant 1049424 : i64
    %1236 = arith.extui %c0_i32_423 : i32 to i64
    %1237 = arith.addi %1236, %c1049424_i64 : i64
    %1238 = llvm.getelementptr %15[%1237] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1235, %1238 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_424 = arith.constant 0 : i32
    %1239 = llvm.load %9 : !llvm.ptr -> i32
    %c1049416_i64 = arith.constant 1049416 : i64
    %1240 = arith.extui %c0_i32_424 : i32 to i64
    %1241 = arith.addi %1240, %c1049416_i64 : i64
    %1242 = llvm.getelementptr %15[%1241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1239, %1242 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_425 = arith.constant 0 : i32
    %1243 = llvm.load %6 : !llvm.ptr -> i32
    %c1049412_i64 = arith.constant 1049412 : i64
    %1244 = arith.extui %c0_i32_425 : i32 to i64
    %1245 = arith.addi %1244, %c1049412_i64 : i64
    %1246 = llvm.getelementptr %15[%1245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1243, %1246 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_426 = arith.constant 0 : i32
    %c1049428_i32_427 = arith.constant 1049428 : i32
    %c1049440_i64 = arith.constant 1049440 : i64
    %1247 = arith.extui %c0_i32_426 : i32 to i64
    %1248 = arith.addi %1247, %c1049440_i64 : i64
    %1249 = llvm.getelementptr %15[%1248] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049428_i32_427, %1249 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_428 = arith.constant 0 : i32
    %c1049436_i32_429 = arith.constant 1049436 : i32
    %c1049448_i64 = arith.constant 1049448 : i64
    %1250 = arith.extui %c0_i32_428 : i32 to i64
    %1251 = arith.addi %1250, %c1049448_i64 : i64
    %1252 = llvm.getelementptr %15[%1251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049436_i32_429, %1252 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_430 = arith.constant 0 : i32
    %c1049428_i32_431 = arith.constant 1049428 : i32
    %c1049436_i64 = arith.constant 1049436 : i64
    %1253 = arith.extui %c0_i32_430 : i32 to i64
    %1254 = arith.addi %1253, %c1049436_i64 : i64
    %1255 = llvm.getelementptr %15[%1254] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049428_i32_431, %1255 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_432 = arith.constant 0 : i32
    %c1049444_i32 = arith.constant 1049444 : i32
    %c1049456_i64 = arith.constant 1049456 : i64
    %1256 = arith.extui %c0_i32_432 : i32 to i64
    %1257 = arith.addi %1256, %c1049456_i64 : i64
    %1258 = llvm.getelementptr %15[%1257] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049444_i32, %1258 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_433 = arith.constant 0 : i32
    %c1049436_i32_434 = arith.constant 1049436 : i32
    %c1049444_i64 = arith.constant 1049444 : i64
    %1259 = arith.extui %c0_i32_433 : i32 to i64
    %1260 = arith.addi %1259, %c1049444_i64 : i64
    %1261 = llvm.getelementptr %15[%1260] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049436_i32_434, %1261 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_435 = arith.constant 0 : i32
    %c1049452_i32 = arith.constant 1049452 : i32
    %c1049464_i64 = arith.constant 1049464 : i64
    %1262 = arith.extui %c0_i32_435 : i32 to i64
    %1263 = arith.addi %1262, %c1049464_i64 : i64
    %1264 = llvm.getelementptr %15[%1263] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049452_i32, %1264 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_436 = arith.constant 0 : i32
    %c1049444_i32_437 = arith.constant 1049444 : i32
    %c1049452_i64 = arith.constant 1049452 : i64
    %1265 = arith.extui %c0_i32_436 : i32 to i64
    %1266 = arith.addi %1265, %c1049452_i64 : i64
    %1267 = llvm.getelementptr %15[%1266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049444_i32_437, %1267 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_438 = arith.constant 0 : i32
    %c1049460_i32 = arith.constant 1049460 : i32
    %c1049472_i64 = arith.constant 1049472 : i64
    %1268 = arith.extui %c0_i32_438 : i32 to i64
    %1269 = arith.addi %1268, %c1049472_i64 : i64
    %1270 = llvm.getelementptr %15[%1269] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049460_i32, %1270 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_439 = arith.constant 0 : i32
    %c1049452_i32_440 = arith.constant 1049452 : i32
    %c1049460_i64 = arith.constant 1049460 : i64
    %1271 = arith.extui %c0_i32_439 : i32 to i64
    %1272 = arith.addi %1271, %c1049460_i64 : i64
    %1273 = llvm.getelementptr %15[%1272] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049452_i32_440, %1273 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_441 = arith.constant 0 : i32
    %c1049468_i32 = arith.constant 1049468 : i32
    %c1049480_i64 = arith.constant 1049480 : i64
    %1274 = arith.extui %c0_i32_441 : i32 to i64
    %1275 = arith.addi %1274, %c1049480_i64 : i64
    %1276 = llvm.getelementptr %15[%1275] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049468_i32, %1276 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_442 = arith.constant 0 : i32
    %c1049460_i32_443 = arith.constant 1049460 : i32
    %c1049468_i64 = arith.constant 1049468 : i64
    %1277 = arith.extui %c0_i32_442 : i32 to i64
    %1278 = arith.addi %1277, %c1049468_i64 : i64
    %1279 = llvm.getelementptr %15[%1278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049460_i32_443, %1279 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_444 = arith.constant 0 : i32
    %c1049476_i32 = arith.constant 1049476 : i32
    %c1049488_i64 = arith.constant 1049488 : i64
    %1280 = arith.extui %c0_i32_444 : i32 to i64
    %1281 = arith.addi %1280, %c1049488_i64 : i64
    %1282 = llvm.getelementptr %15[%1281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049476_i32, %1282 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_445 = arith.constant 0 : i32
    %c1049468_i32_446 = arith.constant 1049468 : i32
    %c1049476_i64 = arith.constant 1049476 : i64
    %1283 = arith.extui %c0_i32_445 : i32 to i64
    %1284 = arith.addi %1283, %c1049476_i64 : i64
    %1285 = llvm.getelementptr %15[%1284] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049468_i32_446, %1285 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_447 = arith.constant 0 : i32
    %c1049484_i32 = arith.constant 1049484 : i32
    %c1049496_i64 = arith.constant 1049496 : i64
    %1286 = arith.extui %c0_i32_447 : i32 to i64
    %1287 = arith.addi %1286, %c1049496_i64 : i64
    %1288 = llvm.getelementptr %15[%1287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049484_i32, %1288 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_448 = arith.constant 0 : i32
    %c1049476_i32_449 = arith.constant 1049476 : i32
    %c1049484_i64 = arith.constant 1049484 : i64
    %1289 = arith.extui %c0_i32_448 : i32 to i64
    %1290 = arith.addi %1289, %c1049484_i64 : i64
    %1291 = llvm.getelementptr %15[%1290] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049476_i32_449, %1291 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_450 = arith.constant 0 : i32
    %c1049492_i32 = arith.constant 1049492 : i32
    %c1049504_i64 = arith.constant 1049504 : i64
    %1292 = arith.extui %c0_i32_450 : i32 to i64
    %1293 = arith.addi %1292, %c1049504_i64 : i64
    %1294 = llvm.getelementptr %15[%1293] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049492_i32, %1294 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_451 = arith.constant 0 : i32
    %c1049484_i32_452 = arith.constant 1049484 : i32
    %c1049492_i64 = arith.constant 1049492 : i64
    %1295 = arith.extui %c0_i32_451 : i32 to i64
    %1296 = arith.addi %1295, %c1049492_i64 : i64
    %1297 = llvm.getelementptr %15[%1296] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049484_i32_452, %1297 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_453 = arith.constant 0 : i32
    %c1049492_i32_454 = arith.constant 1049492 : i32
    %c1049500_i64 = arith.constant 1049500 : i64
    %1298 = arith.extui %c0_i32_453 : i32 to i64
    %1299 = arith.addi %1298, %c1049500_i64 : i64
    %1300 = llvm.getelementptr %15[%1299] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049492_i32_454, %1300 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_455 = arith.constant 0 : i32
    %c1049500_i32 = arith.constant 1049500 : i32
    %c1049512_i64 = arith.constant 1049512 : i64
    %1301 = arith.extui %c0_i32_455 : i32 to i64
    %1302 = arith.addi %1301, %c1049512_i64 : i64
    %1303 = llvm.getelementptr %15[%1302] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049500_i32, %1303 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_456 = arith.constant 0 : i32
    %c1049500_i32_457 = arith.constant 1049500 : i32
    %c1049508_i64 = arith.constant 1049508 : i64
    %1304 = arith.extui %c0_i32_456 : i32 to i64
    %1305 = arith.addi %1304, %c1049508_i64 : i64
    %1306 = llvm.getelementptr %15[%1305] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049500_i32_457, %1306 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_458 = arith.constant 0 : i32
    %c1049508_i32 = arith.constant 1049508 : i32
    %c1049520_i64 = arith.constant 1049520 : i64
    %1307 = arith.extui %c0_i32_458 : i32 to i64
    %1308 = arith.addi %1307, %c1049520_i64 : i64
    %1309 = llvm.getelementptr %15[%1308] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049508_i32, %1309 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_459 = arith.constant 0 : i32
    %c1049508_i32_460 = arith.constant 1049508 : i32
    %c1049516_i64 = arith.constant 1049516 : i64
    %1310 = arith.extui %c0_i32_459 : i32 to i64
    %1311 = arith.addi %1310, %c1049516_i64 : i64
    %1312 = llvm.getelementptr %15[%1311] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049508_i32_460, %1312 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_461 = arith.constant 0 : i32
    %c1049516_i32 = arith.constant 1049516 : i32
    %c1049528_i64 = arith.constant 1049528 : i64
    %1313 = arith.extui %c0_i32_461 : i32 to i64
    %1314 = arith.addi %1313, %c1049528_i64 : i64
    %1315 = llvm.getelementptr %15[%1314] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049516_i32, %1315 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_462 = arith.constant 0 : i32
    %c1049516_i32_463 = arith.constant 1049516 : i32
    %c1049524_i64 = arith.constant 1049524 : i64
    %1316 = arith.extui %c0_i32_462 : i32 to i64
    %1317 = arith.addi %1316, %c1049524_i64 : i64
    %1318 = llvm.getelementptr %15[%1317] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049516_i32_463, %1318 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_464 = arith.constant 0 : i32
    %c1049524_i32 = arith.constant 1049524 : i32
    %c1049536_i64 = arith.constant 1049536 : i64
    %1319 = arith.extui %c0_i32_464 : i32 to i64
    %1320 = arith.addi %1319, %c1049536_i64 : i64
    %1321 = llvm.getelementptr %15[%1320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049524_i32, %1321 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_465 = arith.constant 0 : i32
    %c1049524_i32_466 = arith.constant 1049524 : i32
    %c1049532_i64 = arith.constant 1049532 : i64
    %1322 = arith.extui %c0_i32_465 : i32 to i64
    %1323 = arith.addi %1322, %c1049532_i64 : i64
    %1324 = llvm.getelementptr %15[%1323] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049524_i32_466, %1324 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_467 = arith.constant 0 : i32
    %c1049532_i32 = arith.constant 1049532 : i32
    %c1049544_i64 = arith.constant 1049544 : i64
    %1325 = arith.extui %c0_i32_467 : i32 to i64
    %1326 = arith.addi %1325, %c1049544_i64 : i64
    %1327 = llvm.getelementptr %15[%1326] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049532_i32, %1327 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_468 = arith.constant 0 : i32
    %c1049532_i32_469 = arith.constant 1049532 : i32
    %c1049540_i64 = arith.constant 1049540 : i64
    %1328 = arith.extui %c0_i32_468 : i32 to i64
    %1329 = arith.addi %1328, %c1049540_i64 : i64
    %1330 = llvm.getelementptr %15[%1329] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049532_i32_469, %1330 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_470 = arith.constant 0 : i32
    %c1049540_i32 = arith.constant 1049540 : i32
    %c1049552_i64 = arith.constant 1049552 : i64
    %1331 = arith.extui %c0_i32_470 : i32 to i64
    %1332 = arith.addi %1331, %c1049552_i64 : i64
    %1333 = llvm.getelementptr %15[%1332] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049540_i32, %1333 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_471 = arith.constant 0 : i32
    %c1049540_i32_472 = arith.constant 1049540 : i32
    %c1049548_i64 = arith.constant 1049548 : i64
    %1334 = arith.extui %c0_i32_471 : i32 to i64
    %1335 = arith.addi %1334, %c1049548_i64 : i64
    %1336 = llvm.getelementptr %15[%1335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049540_i32_472, %1336 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_473 = arith.constant 0 : i32
    %c1049548_i32 = arith.constant 1049548 : i32
    %c1049560_i64 = arith.constant 1049560 : i64
    %1337 = arith.extui %c0_i32_473 : i32 to i64
    %1338 = arith.addi %1337, %c1049560_i64 : i64
    %1339 = llvm.getelementptr %15[%1338] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049548_i32, %1339 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_474 = arith.constant 0 : i32
    %c1049548_i32_475 = arith.constant 1049548 : i32
    %c1049556_i64 = arith.constant 1049556 : i64
    %1340 = arith.extui %c0_i32_474 : i32 to i64
    %1341 = arith.addi %1340, %c1049556_i64 : i64
    %1342 = llvm.getelementptr %15[%1341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049548_i32_475, %1342 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_476 = arith.constant 0 : i32
    %c1049556_i32 = arith.constant 1049556 : i32
    %c1049568_i64 = arith.constant 1049568 : i64
    %1343 = arith.extui %c0_i32_476 : i32 to i64
    %1344 = arith.addi %1343, %c1049568_i64 : i64
    %1345 = llvm.getelementptr %15[%1344] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049556_i32, %1345 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_477 = arith.constant 0 : i32
    %c1049564_i32 = arith.constant 1049564 : i32
    %c1049576_i64 = arith.constant 1049576 : i64
    %1346 = arith.extui %c0_i32_477 : i32 to i64
    %1347 = arith.addi %1346, %c1049576_i64 : i64
    %1348 = llvm.getelementptr %15[%1347] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049564_i32, %1348 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_478 = arith.constant 0 : i32
    %c1049556_i32_479 = arith.constant 1049556 : i32
    %c1049564_i64 = arith.constant 1049564 : i64
    %1349 = arith.extui %c0_i32_478 : i32 to i64
    %1350 = arith.addi %1349, %c1049564_i64 : i64
    %1351 = llvm.getelementptr %15[%1350] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049556_i32_479, %1351 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_480 = arith.constant 0 : i32
    %c1049572_i32 = arith.constant 1049572 : i32
    %c1049584_i64 = arith.constant 1049584 : i64
    %1352 = arith.extui %c0_i32_480 : i32 to i64
    %1353 = arith.addi %1352, %c1049584_i64 : i64
    %1354 = llvm.getelementptr %15[%1353] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049572_i32, %1354 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_481 = arith.constant 0 : i32
    %c1049564_i32_482 = arith.constant 1049564 : i32
    %c1049572_i64 = arith.constant 1049572 : i64
    %1355 = arith.extui %c0_i32_481 : i32 to i64
    %1356 = arith.addi %1355, %c1049572_i64 : i64
    %1357 = llvm.getelementptr %15[%1356] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049564_i32_482, %1357 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_483 = arith.constant 0 : i32
    %c1049580_i32 = arith.constant 1049580 : i32
    %c1049592_i64 = arith.constant 1049592 : i64
    %1358 = arith.extui %c0_i32_483 : i32 to i64
    %1359 = arith.addi %1358, %c1049592_i64 : i64
    %1360 = llvm.getelementptr %15[%1359] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049580_i32, %1360 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_484 = arith.constant 0 : i32
    %c1049572_i32_485 = arith.constant 1049572 : i32
    %c1049580_i64 = arith.constant 1049580 : i64
    %1361 = arith.extui %c0_i32_484 : i32 to i64
    %1362 = arith.addi %1361, %c1049580_i64 : i64
    %1363 = llvm.getelementptr %15[%1362] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049572_i32_485, %1363 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_486 = arith.constant 0 : i32
    %c1049588_i32 = arith.constant 1049588 : i32
    %c1049600_i64 = arith.constant 1049600 : i64
    %1364 = arith.extui %c0_i32_486 : i32 to i64
    %1365 = arith.addi %1364, %c1049600_i64 : i64
    %1366 = llvm.getelementptr %15[%1365] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049588_i32, %1366 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_487 = arith.constant 0 : i32
    %c1049580_i32_488 = arith.constant 1049580 : i32
    %c1049588_i64 = arith.constant 1049588 : i64
    %1367 = arith.extui %c0_i32_487 : i32 to i64
    %1368 = arith.addi %1367, %c1049588_i64 : i64
    %1369 = llvm.getelementptr %15[%1368] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049580_i32_488, %1369 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_489 = arith.constant 0 : i32
    %c1049596_i32 = arith.constant 1049596 : i32
    %c1049608_i64 = arith.constant 1049608 : i64
    %1370 = arith.extui %c0_i32_489 : i32 to i64
    %1371 = arith.addi %1370, %c1049608_i64 : i64
    %1372 = llvm.getelementptr %15[%1371] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049596_i32, %1372 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_490 = arith.constant 0 : i32
    %c1049588_i32_491 = arith.constant 1049588 : i32
    %c1049596_i64 = arith.constant 1049596 : i64
    %1373 = arith.extui %c0_i32_490 : i32 to i64
    %1374 = arith.addi %1373, %c1049596_i64 : i64
    %1375 = llvm.getelementptr %15[%1374] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049588_i32_491, %1375 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_492 = arith.constant 0 : i32
    %c1049604_i32 = arith.constant 1049604 : i32
    %c1049616_i64 = arith.constant 1049616 : i64
    %1376 = arith.extui %c0_i32_492 : i32 to i64
    %1377 = arith.addi %1376, %c1049616_i64 : i64
    %1378 = llvm.getelementptr %15[%1377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049604_i32, %1378 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_493 = arith.constant 0 : i32
    %c1049596_i32_494 = arith.constant 1049596 : i32
    %c1049604_i64 = arith.constant 1049604 : i64
    %1379 = arith.extui %c0_i32_493 : i32 to i64
    %1380 = arith.addi %1379, %c1049604_i64 : i64
    %1381 = llvm.getelementptr %15[%1380] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049596_i32_494, %1381 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_495 = arith.constant 0 : i32
    %c1049612_i32 = arith.constant 1049612 : i32
    %c1049624_i64 = arith.constant 1049624 : i64
    %1382 = arith.extui %c0_i32_495 : i32 to i64
    %1383 = arith.addi %1382, %c1049624_i64 : i64
    %1384 = llvm.getelementptr %15[%1383] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049612_i32, %1384 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_496 = arith.constant 0 : i32
    %c1049604_i32_497 = arith.constant 1049604 : i32
    %c1049612_i64 = arith.constant 1049612 : i64
    %1385 = arith.extui %c0_i32_496 : i32 to i64
    %1386 = arith.addi %1385, %c1049612_i64 : i64
    %1387 = llvm.getelementptr %15[%1386] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049604_i32_497, %1387 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_498 = arith.constant 0 : i32
    %c1049620_i32 = arith.constant 1049620 : i32
    %c1049632_i64 = arith.constant 1049632 : i64
    %1388 = arith.extui %c0_i32_498 : i32 to i64
    %1389 = arith.addi %1388, %c1049632_i64 : i64
    %1390 = llvm.getelementptr %15[%1389] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049620_i32, %1390 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_499 = arith.constant 0 : i32
    %c1049612_i32_500 = arith.constant 1049612 : i32
    %c1049620_i64 = arith.constant 1049620 : i64
    %1391 = arith.extui %c0_i32_499 : i32 to i64
    %1392 = arith.addi %1391, %c1049620_i64 : i64
    %1393 = llvm.getelementptr %15[%1392] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049612_i32_500, %1393 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_501 = arith.constant 0 : i32
    %c1049628_i32 = arith.constant 1049628 : i32
    %c1049640_i64 = arith.constant 1049640 : i64
    %1394 = arith.extui %c0_i32_501 : i32 to i64
    %1395 = arith.addi %1394, %c1049640_i64 : i64
    %1396 = llvm.getelementptr %15[%1395] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049628_i32, %1396 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_502 = arith.constant 0 : i32
    %c1049620_i32_503 = arith.constant 1049620 : i32
    %c1049628_i64 = arith.constant 1049628 : i64
    %1397 = arith.extui %c0_i32_502 : i32 to i64
    %1398 = arith.addi %1397, %c1049628_i64 : i64
    %1399 = llvm.getelementptr %15[%1398] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049620_i32_503, %1399 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_504 = arith.constant 0 : i32
    %c1049636_i32 = arith.constant 1049636 : i32
    %c1049648_i64 = arith.constant 1049648 : i64
    %1400 = arith.extui %c0_i32_504 : i32 to i64
    %1401 = arith.addi %1400, %c1049648_i64 : i64
    %1402 = llvm.getelementptr %15[%1401] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049636_i32, %1402 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_505 = arith.constant 0 : i32
    %c1049628_i32_506 = arith.constant 1049628 : i32
    %c1049636_i64 = arith.constant 1049636 : i64
    %1403 = arith.extui %c0_i32_505 : i32 to i64
    %1404 = arith.addi %1403, %c1049636_i64 : i64
    %1405 = llvm.getelementptr %15[%1404] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049628_i32_506, %1405 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_507 = arith.constant 0 : i32
    %c1049644_i32 = arith.constant 1049644 : i32
    %c1049656_i64 = arith.constant 1049656 : i64
    %1406 = arith.extui %c0_i32_507 : i32 to i64
    %1407 = arith.addi %1406, %c1049656_i64 : i64
    %1408 = llvm.getelementptr %15[%1407] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049644_i32, %1408 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_508 = arith.constant 0 : i32
    %c1049636_i32_509 = arith.constant 1049636 : i32
    %c1049644_i64 = arith.constant 1049644 : i64
    %1409 = arith.extui %c0_i32_508 : i32 to i64
    %1410 = arith.addi %1409, %c1049644_i64 : i64
    %1411 = llvm.getelementptr %15[%1410] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049636_i32_509, %1411 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_510 = arith.constant 0 : i32
    %c1049652_i32 = arith.constant 1049652 : i32
    %c1049664_i64 = arith.constant 1049664 : i64
    %1412 = arith.extui %c0_i32_510 : i32 to i64
    %1413 = arith.addi %1412, %c1049664_i64 : i64
    %1414 = llvm.getelementptr %15[%1413] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049652_i32, %1414 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_511 = arith.constant 0 : i32
    %c1049644_i32_512 = arith.constant 1049644 : i32
    %c1049652_i64 = arith.constant 1049652 : i64
    %1415 = arith.extui %c0_i32_511 : i32 to i64
    %1416 = arith.addi %1415, %c1049652_i64 : i64
    %1417 = llvm.getelementptr %15[%1416] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049644_i32_512, %1417 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_513 = arith.constant 0 : i32
    %c1049660_i32 = arith.constant 1049660 : i32
    %c1049672_i64 = arith.constant 1049672 : i64
    %1418 = arith.extui %c0_i32_513 : i32 to i64
    %1419 = arith.addi %1418, %c1049672_i64 : i64
    %1420 = llvm.getelementptr %15[%1419] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049660_i32, %1420 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_514 = arith.constant 0 : i32
    %c1049652_i32_515 = arith.constant 1049652 : i32
    %c1049660_i64 = arith.constant 1049660 : i64
    %1421 = arith.extui %c0_i32_514 : i32 to i64
    %1422 = arith.addi %1421, %c1049660_i64 : i64
    %1423 = llvm.getelementptr %15[%1422] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049652_i32_515, %1423 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_516 = arith.constant 0 : i32
    %c1049668_i32 = arith.constant 1049668 : i32
    %c1049680_i64 = arith.constant 1049680 : i64
    %1424 = arith.extui %c0_i32_516 : i32 to i64
    %1425 = arith.addi %1424, %c1049680_i64 : i64
    %1426 = llvm.getelementptr %15[%1425] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049668_i32, %1426 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_517 = arith.constant 0 : i32
    %c1049660_i32_518 = arith.constant 1049660 : i32
    %c1049668_i64 = arith.constant 1049668 : i64
    %1427 = arith.extui %c0_i32_517 : i32 to i64
    %1428 = arith.addi %1427, %c1049668_i64 : i64
    %1429 = llvm.getelementptr %15[%1428] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049660_i32_518, %1429 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_519 = arith.constant 0 : i32
    %c1049676_i32 = arith.constant 1049676 : i32
    %c1049688_i64 = arith.constant 1049688 : i64
    %1430 = arith.extui %c0_i32_519 : i32 to i64
    %1431 = arith.addi %1430, %c1049688_i64 : i64
    %1432 = llvm.getelementptr %15[%1431] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049676_i32, %1432 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_520 = arith.constant 0 : i32
    %c1049668_i32_521 = arith.constant 1049668 : i32
    %c1049676_i64 = arith.constant 1049676 : i64
    %1433 = arith.extui %c0_i32_520 : i32 to i64
    %1434 = arith.addi %1433, %c1049676_i64 : i64
    %1435 = llvm.getelementptr %15[%1434] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049668_i32_521, %1435 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_522 = arith.constant 0 : i32
    %1436 = llvm.load %6 : !llvm.ptr -> i32
    %c15_i32_523 = arith.constant 15 : i32
    %1437 = arith.addi %1436, %c15_i32_523 : i32
    %c-8_i32_524 = arith.constant -8 : i32
    %1438 = arith.andi %1437, %c-8_i32_524 : i32
    llvm.store %1438, %0 : i32, !llvm.ptr
    %c-8_i32_525 = arith.constant -8 : i32
    %1439 = arith.addi %1438, %c-8_i32_525 : i32
    llvm.store %1439, %2 : i32, !llvm.ptr
    %c1049712_i64_526 = arith.constant 1049712 : i64
    %1440 = arith.extui %c0_i32_522 : i32 to i64
    %1441 = arith.addi %1440, %c1049712_i64_526 : i64
    %1442 = llvm.getelementptr %15[%1441] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1439, %1442 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_527 = arith.constant 0 : i32
    %c1049676_i32_528 = arith.constant 1049676 : i32
    %c1049684_i64 = arith.constant 1049684 : i64
    %1443 = arith.extui %c0_i32_527 : i32 to i64
    %1444 = arith.addi %1443, %c1049684_i64 : i64
    %1445 = llvm.getelementptr %15[%1444] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049676_i32_528, %1445 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_529 = arith.constant 0 : i32
    %1446 = llvm.load %6 : !llvm.ptr -> i32
    %1447 = llvm.load %0 : !llvm.ptr -> i32
    %1448 = arith.subi %1446, %1447 : i32
    %1449 = llvm.load %9 : !llvm.ptr -> i32
    %c-40_i32 = arith.constant -40 : i32
    %1450 = arith.addi %1449, %c-40_i32 : i32
    llvm.store %1450, %0 : i32, !llvm.ptr
    %1451 = arith.addi %1448, %1450 : i32
    %c8_i32_530 = arith.constant 8 : i32
    %1452 = arith.addi %1451, %c8_i32_530 : i32
    llvm.store %1452, %7 : i32, !llvm.ptr
    %c1049704_i64_531 = arith.constant 1049704 : i64
    %1453 = arith.extui %c0_i32_529 : i32 to i64
    %1454 = arith.addi %1453, %c1049704_i64_531 : i64
    %1455 = llvm.getelementptr %15[%1454] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1452, %1455 {alignment = 1 : i64} : i32, !llvm.ptr
    %1456 = llvm.load %2 : !llvm.ptr -> i32
    %1457 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_532 = arith.constant 1 : i32
    %1458 = arith.ori %1457, %c1_i32_532 : i32
    %c4_i64_533 = arith.constant 4 : i64
    %1459 = arith.extui %1456 : i32 to i64
    %1460 = arith.addi %1459, %c4_i64_533 : i64
    %1461 = llvm.getelementptr %15[%1460] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1458, %1461 {alignment = 1 : i64} : i32, !llvm.ptr
    %1462 = llvm.load %6 : !llvm.ptr -> i32
    %1463 = llvm.load %0 : !llvm.ptr -> i32
    %1464 = arith.addi %1462, %1463 : i32
    %c40_i32_534 = arith.constant 40 : i32
    %c4_i64_535 = arith.constant 4 : i64
    %1465 = arith.extui %1464 : i32 to i64
    %1466 = arith.addi %1465, %c4_i64_535 : i64
    %1467 = llvm.getelementptr %15[%1466] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c40_i32_534, %1467 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_536 = arith.constant 0 : i32
    %c2097152_i32_537 = arith.constant 2097152 : i32
    %c1049724_i64_538 = arith.constant 1049724 : i64
    %1468 = arith.extui %c0_i32_536 : i32 to i64
    %1469 = arith.addi %1468, %c1049724_i64_538 : i64
    %1470 = llvm.getelementptr %15[%1469] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2097152_i32_537, %1470 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb100
  ^bb120:  // 2 preds: ^bb113, ^bb122
    %c0_i32_539 = arith.constant 0 : i32
    %1471 = llvm.load %6 : !llvm.ptr -> i32
    %c1049728_i64_540 = arith.constant 1049728 : i64
    %1472 = arith.extui %c0_i32_539 : i32 to i64
    %1473 = arith.addi %1472, %c1049728_i64_540 : i64
    %1474 = llvm.getelementptr %15[%1473] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1471, %1474 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb119
  ^bb121:  // pred: ^bb113
    %1475 = llvm.load %6 : !llvm.ptr -> i32
    %1476 = llvm.load %0 : !llvm.ptr -> i32
    %1477 = arith.cmpi uge, %1475, %1476 : i32
    %1478 = arith.extui %1477 : i1 to i32
    %c0_i32_541 = arith.constant 0 : i32
    %1479 = arith.cmpi ne, %1478, %c0_i32_541 : i32
    cf.cond_br %1479, ^bb119, ^bb122
  ^bb122:  // pred: ^bb121
    cf.br ^bb120
  ^bb123:  // pred: ^bb112
    %1480 = llvm.load %7 : !llvm.ptr -> i32
    %1481 = llvm.load %2 : !llvm.ptr -> i32
    %1482 = arith.cmpi ugt, %1480, %1481 : i32
    %1483 = arith.extui %1482 : i1 to i32
    %c0_i32_542 = arith.constant 0 : i32
    %1484 = arith.cmpi ne, %1483, %c0_i32_542 : i32
    cf.cond_br %1484, ^bb111, ^bb124
  ^bb124:  // pred: ^bb123
    %1485 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_543 = arith.constant 12 : i64
    %1486 = arith.extui %1485 : i32 to i64
    %1487 = arith.addi %1486, %c12_i64_543 : i64
    %1488 = llvm.getelementptr %15[%1487] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1489 = llvm.load volatile %1488 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1489, %7 : i32, !llvm.ptr
    %c1_i32_544 = arith.constant 1 : i32
    %1490 = arith.andi %1489, %c1_i32_544 : i32
    %c0_i32_545 = arith.constant 0 : i32
    %1491 = arith.cmpi ne, %1490, %c0_i32_545 : i32
    cf.cond_br %1491, ^bb111, ^bb125
  ^bb125:  // pred: ^bb124
    %1492 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_546 = arith.constant 1 : i32
    %c31_i32_547 = arith.constant 31 : i32
    %1493 = arith.cmpi ule, %c1_i32_546, %c31_i32_547 : i32
    %1494 = scf.if %1493 -> (i32) {
      %2078 = arith.shrui %1492, %c1_i32_546 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %1495 = llvm.load %5 : !llvm.ptr -> i32
    %1496 = arith.cmpi eq, %1494, %1495 : i32
    %1497 = arith.extui %1496 : i1 to i32
    %c0_i32_548 = arith.constant 0 : i32
    %1498 = arith.cmpi ne, %1497, %c0_i32_548 : i32
    cf.cond_br %1498, ^bb104, ^bb126
  ^bb126:  // pred: ^bb125
    cf.br ^bb111
  ^bb127:  // pred: ^bb134
    %1499 = llvm.load %0 : !llvm.ptr -> i32
    %1500 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_549 = arith.constant 0 : i64
    %1501 = arith.extui %1499 : i32 to i64
    %1502 = arith.addi %1501, %c0_i64_549 : i64
    %1503 = llvm.getelementptr %15[%1502] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1500, %1503 {alignment = 1 : i64} : i32, !llvm.ptr
    %1504 = llvm.load %0 : !llvm.ptr -> i32
    %1505 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_550 = arith.constant 4 : i64
    %1506 = arith.extui %1505 : i32 to i64
    %1507 = arith.addi %1506, %c4_i64_550 : i64
    %1508 = llvm.getelementptr %15[%1507] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1509 = llvm.load volatile %1508 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1510 = llvm.load %9 : !llvm.ptr -> i32
    %1511 = arith.addi %1509, %1510 : i32
    %c4_i64_551 = arith.constant 4 : i64
    %1512 = arith.extui %1504 : i32 to i64
    %1513 = arith.addi %1512, %c4_i64_551 : i64
    %1514 = llvm.getelementptr %15[%1513] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1511, %1514 {alignment = 1 : i64} : i32, !llvm.ptr
    %1515 = llvm.load %6 : !llvm.ptr -> i32
    %c15_i32_552 = arith.constant 15 : i32
    %1516 = arith.addi %1515, %c15_i32_552 : i32
    %c-8_i32_553 = arith.constant -8 : i32
    %1517 = arith.andi %1516, %c-8_i32_553 : i32
    %c-8_i32_554 = arith.constant -8 : i32
    %1518 = arith.addi %1517, %c-8_i32_554 : i32
    llvm.store %1518, %7 : i32, !llvm.ptr
    %1519 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_555 = arith.constant 3 : i32
    %1520 = arith.ori %1519, %c3_i32_555 : i32
    %c4_i64_556 = arith.constant 4 : i64
    %1521 = arith.extui %1518 : i32 to i64
    %1522 = arith.addi %1521, %c4_i64_556 : i64
    %1523 = llvm.getelementptr %15[%1522] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1520, %1523 {alignment = 1 : i64} : i32, !llvm.ptr
    %1524 = llvm.load %8 : !llvm.ptr -> i32
    %c15_i32_557 = arith.constant 15 : i32
    %1525 = arith.addi %1524, %c15_i32_557 : i32
    %c-8_i32_558 = arith.constant -8 : i32
    %1526 = arith.andi %1525, %c-8_i32_558 : i32
    %c-8_i32_559 = arith.constant -8 : i32
    %1527 = arith.addi %1526, %c-8_i32_559 : i32
    llvm.store %1527, %2 : i32, !llvm.ptr
    %1528 = llvm.load %7 : !llvm.ptr -> i32
    %1529 = llvm.load %3 : !llvm.ptr -> i32
    %1530 = arith.addi %1528, %1529 : i32
    llvm.store %1530, %0 : i32, !llvm.ptr
    %1531 = arith.subi %1527, %1530 : i32
    llvm.store %1531, %3 : i32, !llvm.ptr
    %1532 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_560 = arith.constant 0 : i32
    %c1049712_i64_561 = arith.constant 1049712 : i64
    %1533 = arith.extui %c0_i32_560 : i32 to i64
    %1534 = arith.addi %1533, %c1049712_i64_561 : i64
    %1535 = llvm.getelementptr %15[%1534] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1536 = llvm.load volatile %1535 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1537 = arith.cmpi eq, %1532, %1536 : i32
    %1538 = arith.extui %1537 : i1 to i32
    %c0_i32_562 = arith.constant 0 : i32
    %1539 = arith.cmpi ne, %1538, %c0_i32_562 : i32
    cf.cond_br %1539, ^bb103, ^bb151
  ^bb128:  // 3 preds: ^bb129, ^bb133, ^bb135
    %c1049412_i32_563 = arith.constant 1049412 : i32
    llvm.store %c1049412_i32_563, %0 : i32, !llvm.ptr
    cf.br ^bb138
  ^bb129:  // 2 preds: ^bb130, ^bb131
    %1540 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_564 = arith.constant 12 : i64
    %1541 = arith.extui %1540 : i32 to i64
    %1542 = arith.addi %1541, %c12_i64_564 : i64
    %1543 = llvm.getelementptr %15[%1542] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1544 = llvm.load volatile %1543 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1544, %7 : i32, !llvm.ptr
    %c1_i32_565 = arith.constant 1 : i32
    %1545 = arith.andi %1544, %c1_i32_565 : i32
    %c0_i32_566 = arith.constant 0 : i32
    %1546 = arith.cmpi ne, %1545, %c0_i32_566 : i32
    cf.cond_br %1546, ^bb128, ^bb134
  ^bb130:  // no predecessors
    cf.br ^bb129
  ^bb131:  // 2 preds: ^bb111, ^bb132
    %1547 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_567 = arith.constant 0 : i64
    %1548 = arith.extui %1547 : i32 to i64
    %1549 = arith.addi %1548, %c0_i64_567 : i64
    %1550 = llvm.getelementptr %15[%1549] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1551 = llvm.load volatile %1550 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1551, %8 : i32, !llvm.ptr
    %1552 = llvm.load %7 : !llvm.ptr -> i32
    %1553 = arith.cmpi eq, %1551, %1552 : i32
    %1554 = arith.extui %1553 : i1 to i32
    %c0_i32_568 = arith.constant 0 : i32
    %1555 = arith.cmpi ne, %1554, %c0_i32_568 : i32
    cf.cond_br %1555, ^bb129, ^bb132
  ^bb132:  // pred: ^bb131
    %1556 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_569 = arith.constant 8 : i64
    %1557 = arith.extui %1556 : i32 to i64
    %1558 = arith.addi %1557, %c8_i64_569 : i64
    %1559 = llvm.getelementptr %15[%1558] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1560 = llvm.load volatile %1559 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1560, %0 : i32, !llvm.ptr
    %c0_i32_570 = arith.constant 0 : i32
    %1561 = arith.cmpi ne, %1560, %c0_i32_570 : i32
    cf.cond_br %1561, ^bb131, ^bb133
  ^bb133:  // pred: ^bb132
    cf.br ^bb128
  ^bb134:  // pred: ^bb129
    %1562 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_571 = arith.constant 1 : i32
    %c31_i32_572 = arith.constant 31 : i32
    %1563 = arith.cmpi ule, %c1_i32_571, %c31_i32_572 : i32
    %1564 = scf.if %1563 -> (i32) {
      %2078 = arith.shrui %1562, %c1_i32_571 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %1565 = llvm.load %5 : !llvm.ptr -> i32
    %1566 = arith.cmpi eq, %1564, %1565 : i32
    %1567 = arith.extui %1566 : i1 to i32
    %c0_i32_573 = arith.constant 0 : i32
    %1568 = arith.cmpi ne, %1567, %c0_i32_573 : i32
    cf.cond_br %1568, ^bb127, ^bb135
  ^bb135:  // pred: ^bb134
    cf.br ^bb128
  ^bb136:  // 2 preds: ^bb137, ^bb140
    %c0_i32_574 = arith.constant 0 : i32
    %1569 = llvm.load %6 : !llvm.ptr -> i32
    %c15_i32_575 = arith.constant 15 : i32
    %1570 = arith.addi %1569, %c15_i32_575 : i32
    %c-8_i32_576 = arith.constant -8 : i32
    %1571 = arith.andi %1570, %c-8_i32_576 : i32
    llvm.store %1571, %0 : i32, !llvm.ptr
    %c-8_i32_577 = arith.constant -8 : i32
    %1572 = arith.addi %1571, %c-8_i32_577 : i32
    llvm.store %1572, %8 : i32, !llvm.ptr
    %c1049712_i64_578 = arith.constant 1049712 : i64
    %1573 = arith.extui %c0_i32_574 : i32 to i64
    %1574 = arith.addi %1573, %c1049712_i64_578 : i64
    %1575 = llvm.getelementptr %15[%1574] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1572, %1575 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_579 = arith.constant 0 : i32
    %1576 = llvm.load %6 : !llvm.ptr -> i32
    %1577 = llvm.load %0 : !llvm.ptr -> i32
    %1578 = arith.subi %1576, %1577 : i32
    %1579 = llvm.load %9 : !llvm.ptr -> i32
    %c-40_i32_580 = arith.constant -40 : i32
    %1580 = arith.addi %1579, %c-40_i32_580 : i32
    llvm.store %1580, %0 : i32, !llvm.ptr
    %1581 = arith.addi %1578, %1580 : i32
    %c8_i32_581 = arith.constant 8 : i32
    %1582 = arith.addi %1581, %c8_i32_581 : i32
    llvm.store %1582, %4 : i32, !llvm.ptr
    %c1049704_i64_582 = arith.constant 1049704 : i64
    %1583 = arith.extui %c0_i32_579 : i32 to i64
    %1584 = arith.addi %1583, %c1049704_i64_582 : i64
    %1585 = llvm.getelementptr %15[%1584] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1582, %1585 {alignment = 1 : i64} : i32, !llvm.ptr
    %1586 = llvm.load %8 : !llvm.ptr -> i32
    %1587 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_583 = arith.constant 1 : i32
    %1588 = arith.ori %1587, %c1_i32_583 : i32
    %c4_i64_584 = arith.constant 4 : i64
    %1589 = arith.extui %1586 : i32 to i64
    %1590 = arith.addi %1589, %c4_i64_584 : i64
    %1591 = llvm.getelementptr %15[%1590] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1588, %1591 {alignment = 1 : i64} : i32, !llvm.ptr
    %1592 = llvm.load %6 : !llvm.ptr -> i32
    %1593 = llvm.load %0 : !llvm.ptr -> i32
    %1594 = arith.addi %1592, %1593 : i32
    %c40_i32_585 = arith.constant 40 : i32
    %c4_i64_586 = arith.constant 4 : i64
    %1595 = arith.extui %1594 : i32 to i64
    %1596 = arith.addi %1595, %c4_i64_586 : i64
    %1597 = llvm.getelementptr %15[%1596] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c40_i32_585, %1597 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_587 = arith.constant 0 : i32
    %c2097152_i32_588 = arith.constant 2097152 : i32
    %c1049724_i64_589 = arith.constant 1049724 : i64
    %1598 = arith.extui %c0_i32_587 : i32 to i64
    %1599 = arith.addi %1598, %c1049724_i64_589 : i64
    %1600 = llvm.getelementptr %15[%1599] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2097152_i32_588, %1600 {alignment = 1 : i64} : i32, !llvm.ptr
    %1601 = llvm.load %2 : !llvm.ptr -> i32
    %1602 = llvm.load %7 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %1603 = arith.addi %1602, %c-32_i32 : i32
    %c-8_i32_590 = arith.constant -8 : i32
    %1604 = arith.andi %1603, %c-8_i32_590 : i32
    %c-8_i32_591 = arith.constant -8 : i32
    %1605 = arith.addi %1604, %c-8_i32_591 : i32
    llvm.store %1605, %0 : i32, !llvm.ptr
    %1606 = llvm.load %0 : !llvm.ptr -> i32
    %1607 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_592 = arith.constant 16 : i32
    %1608 = arith.addi %1607, %c16_i32_592 : i32
    %1609 = arith.cmpi ult, %1606, %1608 : i32
    %1610 = arith.extui %1609 : i1 to i32
    %c0_i32_593 = arith.constant 0 : i32
    %1611 = arith.cmpi ne, %1610, %c0_i32_593 : i32
    %1612 = arith.select %1611, %1601, %1605 : i32
    llvm.store %1612, %8 : i32, !llvm.ptr
    %c27_i32 = arith.constant 27 : i32
    %c4_i64_594 = arith.constant 4 : i64
    %1613 = arith.extui %1612 : i32 to i64
    %1614 = arith.addi %1613, %c4_i64_594 : i64
    %1615 = llvm.getelementptr %15[%1614] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c27_i32, %1615 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_595 = arith.constant 0 : i32
    %c1049412_i64_596 = arith.constant 1049412 : i64
    %1616 = arith.extui %c0_i32_595 : i32 to i64
    %1617 = arith.addi %1616, %c1049412_i64_596 : i64
    %1618 = llvm.getelementptr %15[%1617] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1619 = llvm.load volatile %1618 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %1619, %10 : i64, !llvm.ptr
    %1620 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i32_597 = arith.constant 16 : i32
    %1621 = arith.addi %1620, %c16_i32_597 : i32
    %c0_i32_598 = arith.constant 0 : i32
    %c1049420_i64 = arith.constant 1049420 : i64
    %1622 = arith.extui %c0_i32_598 : i32 to i64
    %1623 = arith.addi %1622, %c1049420_i64 : i64
    %1624 = llvm.getelementptr %15[%1623] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1625 = llvm.load volatile %1624 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_599 = arith.constant 0 : i64
    %1626 = arith.extui %1621 : i32 to i64
    %1627 = arith.addi %1626, %c0_i64_599 : i64
    %1628 = llvm.getelementptr %15[%1627] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1625, %1628 {alignment = 1 : i64} : i64, !llvm.ptr
    %1629 = llvm.load %8 : !llvm.ptr -> i32
    %1630 = llvm.load %10 : !llvm.ptr -> i64
    %c8_i64_600 = arith.constant 8 : i64
    %1631 = arith.extui %1629 : i32 to i64
    %1632 = arith.addi %1631, %c8_i64_600 : i64
    %1633 = llvm.getelementptr %15[%1632] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1630, %1633 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_601 = arith.constant 0 : i32
    %1634 = llvm.load %5 : !llvm.ptr -> i32
    %c1049424_i64_602 = arith.constant 1049424 : i64
    %1635 = arith.extui %c0_i32_601 : i32 to i64
    %1636 = arith.addi %1635, %c1049424_i64_602 : i64
    %1637 = llvm.getelementptr %15[%1636] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1634, %1637 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_603 = arith.constant 0 : i32
    %1638 = llvm.load %9 : !llvm.ptr -> i32
    %c1049416_i64_604 = arith.constant 1049416 : i64
    %1639 = arith.extui %c0_i32_603 : i32 to i64
    %1640 = arith.addi %1639, %c1049416_i64_604 : i64
    %1641 = llvm.getelementptr %15[%1640] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1638, %1641 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_605 = arith.constant 0 : i32
    %1642 = llvm.load %6 : !llvm.ptr -> i32
    %c1049412_i64_606 = arith.constant 1049412 : i64
    %1643 = arith.extui %c0_i32_605 : i32 to i64
    %1644 = arith.addi %1643, %c1049412_i64_606 : i64
    %1645 = llvm.getelementptr %15[%1644] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1642, %1645 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_607 = arith.constant 0 : i32
    %1646 = llvm.load %8 : !llvm.ptr -> i32
    %c8_i32_608 = arith.constant 8 : i32
    %1647 = arith.addi %1646, %c8_i32_608 : i32
    %c1049420_i64_609 = arith.constant 1049420 : i64
    %1648 = arith.extui %c0_i32_607 : i32 to i64
    %1649 = arith.addi %1648, %c1049420_i64_609 : i64
    %1650 = llvm.getelementptr %15[%1649] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1647, %1650 {alignment = 1 : i64} : i32, !llvm.ptr
    %1651 = llvm.load %8 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %1652 = arith.addi %1651, %c28_i32 : i32
    llvm.store %1652, %0 : i32, !llvm.ptr
    cf.br ^bb143
  ^bb137:  // no predecessors
    cf.br ^bb136
  ^bb138:  // 2 preds: ^bb128, ^bb139
    %1653 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_610 = arith.constant 0 : i64
    %1654 = arith.extui %1653 : i32 to i64
    %1655 = arith.addi %1654, %c0_i64_610 : i64
    %1656 = llvm.getelementptr %15[%1655] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1657 = llvm.load volatile %1656 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1657, %7 : i32, !llvm.ptr
    %1658 = llvm.load %2 : !llvm.ptr -> i32
    %1659 = arith.cmpi ugt, %1657, %1658 : i32
    %1660 = arith.extui %1659 : i1 to i32
    %c0_i32_611 = arith.constant 0 : i32
    %1661 = arith.cmpi ne, %1660, %c0_i32_611 : i32
    cf.cond_br %1661, ^bb139, ^bb140
  ^bb139:  // 2 preds: ^bb138, ^bb141
    %1662 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_612 = arith.constant 8 : i64
    %1663 = arith.extui %1662 : i32 to i64
    %1664 = arith.addi %1663, %c8_i64_612 : i64
    %1665 = llvm.getelementptr %15[%1664] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1666 = llvm.load volatile %1665 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1666, %0 : i32, !llvm.ptr
    cf.br ^bb138
  ^bb140:  // pred: ^bb138
    %1667 = llvm.load %2 : !llvm.ptr -> i32
    %1668 = llvm.load %7 : !llvm.ptr -> i32
    %1669 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_613 = arith.constant 4 : i64
    %1670 = arith.extui %1669 : i32 to i64
    %1671 = arith.addi %1670, %c4_i64_613 : i64
    %1672 = llvm.getelementptr %15[%1671] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1673 = llvm.load volatile %1672 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1674 = arith.addi %1668, %1673 : i32
    llvm.store %1674, %7 : i32, !llvm.ptr
    %1675 = arith.cmpi ult, %1667, %1674 : i32
    %1676 = arith.extui %1675 : i1 to i32
    %c0_i32_614 = arith.constant 0 : i32
    %1677 = arith.cmpi ne, %1676, %c0_i32_614 : i32
    cf.cond_br %1677, ^bb136, ^bb141
  ^bb141:  // pred: ^bb140
    cf.br ^bb139
  ^bb142:  // pred: ^bb144
    %1678 = llvm.load %8 : !llvm.ptr -> i32
    %1679 = llvm.load %2 : !llvm.ptr -> i32
    %1680 = arith.cmpi eq, %1678, %1679 : i32
    %1681 = arith.extui %1680 : i1 to i32
    %c0_i32_615 = arith.constant 0 : i32
    %1682 = arith.cmpi ne, %1681, %c0_i32_615 : i32
    cf.cond_br %1682, ^bb100, ^bb145
  ^bb143:  // 2 preds: ^bb136, ^bb143
    %1683 = llvm.load %0 : !llvm.ptr -> i32
    %c7_i32 = arith.constant 7 : i32
    %c0_i64_616 = arith.constant 0 : i64
    %1684 = arith.extui %1683 : i32 to i64
    %1685 = arith.addi %1684, %c0_i64_616 : i64
    %1686 = llvm.getelementptr %15[%1685] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c7_i32, %1686 {alignment = 1 : i64} : i32, !llvm.ptr
    %1687 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_617 = arith.constant 4 : i32
    %1688 = arith.addi %1687, %c4_i32_617 : i32
    llvm.store %1688, %0 : i32, !llvm.ptr
    %1689 = llvm.load %7 : !llvm.ptr -> i32
    %1690 = arith.cmpi ult, %1688, %1689 : i32
    %1691 = arith.extui %1690 : i1 to i32
    %c0_i32_618 = arith.constant 0 : i32
    %1692 = arith.cmpi ne, %1691, %c0_i32_618 : i32
    cf.cond_br %1692, ^bb143, ^bb144
  ^bb144:  // pred: ^bb143
    cf.br ^bb142
  ^bb145:  // pred: ^bb142
    %1693 = llvm.load %8 : !llvm.ptr -> i32
    %1694 = llvm.load %8 : !llvm.ptr -> i32
    %c4_i64_619 = arith.constant 4 : i64
    %1695 = arith.extui %1694 : i32 to i64
    %1696 = arith.addi %1695, %c4_i64_619 : i64
    %1697 = llvm.getelementptr %15[%1696] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1698 = llvm.load volatile %1697 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32_620 = arith.constant -2 : i32
    %1699 = arith.andi %1698, %c-2_i32_620 : i32
    %c4_i64_621 = arith.constant 4 : i64
    %1700 = arith.extui %1693 : i32 to i64
    %1701 = arith.addi %1700, %c4_i64_621 : i64
    %1702 = llvm.getelementptr %15[%1701] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1699, %1702 {alignment = 1 : i64} : i32, !llvm.ptr
    %1703 = llvm.load %2 : !llvm.ptr -> i32
    %1704 = llvm.load %8 : !llvm.ptr -> i32
    %1705 = llvm.load %2 : !llvm.ptr -> i32
    %1706 = arith.subi %1704, %1705 : i32
    llvm.store %1706, %0 : i32, !llvm.ptr
    %c1_i32_622 = arith.constant 1 : i32
    %1707 = arith.ori %1706, %c1_i32_622 : i32
    %c4_i64_623 = arith.constant 4 : i64
    %1708 = arith.extui %1703 : i32 to i64
    %1709 = arith.addi %1708, %c4_i64_623 : i64
    %1710 = llvm.getelementptr %15[%1709] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1707, %1710 {alignment = 1 : i64} : i32, !llvm.ptr
    %1711 = llvm.load %8 : !llvm.ptr -> i32
    %1712 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_624 = arith.constant 0 : i64
    %1713 = arith.extui %1711 : i32 to i64
    %1714 = arith.addi %1713, %c0_i64_624 : i64
    %1715 = llvm.getelementptr %15[%1714] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1712, %1715 {alignment = 1 : i64} : i32, !llvm.ptr
    %1716 = llvm.load %0 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %1717 = arith.cmpi ult, %1716, %c256_i32 : i32
    %1718 = arith.extui %1717 : i1 to i32
    %c0_i32_625 = arith.constant 0 : i32
    %1719 = arith.cmpi ne, %1718, %c0_i32_625 : i32
    cf.cond_br %1719, ^bb146, ^bb147
  ^bb146:  // pred: ^bb145
    %1720 = llvm.load %0 : !llvm.ptr -> i32
    %c248_i32 = arith.constant 248 : i32
    %1721 = arith.andi %1720, %c248_i32 : i32
    %c1049428_i32_626 = arith.constant 1049428 : i32
    %1722 = arith.addi %1721, %c1049428_i32_626 : i32
    llvm.store %1722, %7 : i32, !llvm.ptr
    %c0_i32_627 = arith.constant 0 : i32
    %c1049692_i64_628 = arith.constant 1049692 : i64
    %1723 = arith.extui %c0_i32_627 : i32 to i64
    %1724 = arith.addi %1723, %c1049692_i64_628 : i64
    %1725 = llvm.getelementptr %15[%1724] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1726 = llvm.load volatile %1725 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1726, %6 : i32, !llvm.ptr
    %c1_i32_629 = arith.constant 1 : i32
    %1727 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_630 = arith.constant 3 : i32
    %c31_i32_631 = arith.constant 31 : i32
    %1728 = arith.cmpi ule, %c3_i32_630, %c31_i32_631 : i32
    %1729 = scf.if %1728 -> (i32) {
      %2078 = arith.shrui %1727, %c3_i32_630 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c31_i32_632 = arith.constant 31 : i32
    %1730 = arith.cmpi ule, %1729, %c31_i32_632 : i32
    %1731 = scf.if %1730 -> (i32) {
      %2078 = arith.shli %c1_i32_629, %1729 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %1731, %0 : i32, !llvm.ptr
    %1732 = arith.andi %1726, %1731 : i32
    %c0_i32_633 = arith.constant 0 : i32
    %1733 = arith.cmpi ne, %1732, %c0_i32_633 : i32
    cf.cond_br %1733, ^bb149, ^bb150
  ^bb147:  // pred: ^bb145
    %1734 = llvm.load %2 : !llvm.ptr -> i32
    %1735 = llvm.load %0 : !llvm.ptr -> i32
    call @f18(%arg0, %1734, %1735) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb100
  ^bb148:  // 2 preds: ^bb149, ^bb150
    %1736 = llvm.load %7 : !llvm.ptr -> i32
    %1737 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_634 = arith.constant 8 : i64
    %1738 = arith.extui %1736 : i32 to i64
    %1739 = arith.addi %1738, %c8_i64_634 : i64
    %1740 = llvm.getelementptr %15[%1739] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1737, %1740 {alignment = 1 : i64} : i32, !llvm.ptr
    %1741 = llvm.load %0 : !llvm.ptr -> i32
    %1742 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_635 = arith.constant 12 : i64
    %1743 = arith.extui %1741 : i32 to i64
    %1744 = arith.addi %1743, %c12_i64_635 : i64
    %1745 = llvm.getelementptr %15[%1744] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1742, %1745 {alignment = 1 : i64} : i32, !llvm.ptr
    %1746 = llvm.load %2 : !llvm.ptr -> i32
    %1747 = llvm.load %7 : !llvm.ptr -> i32
    %c12_i64_636 = arith.constant 12 : i64
    %1748 = arith.extui %1746 : i32 to i64
    %1749 = arith.addi %1748, %c12_i64_636 : i64
    %1750 = llvm.getelementptr %15[%1749] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1747, %1750 {alignment = 1 : i64} : i32, !llvm.ptr
    %1751 = llvm.load %2 : !llvm.ptr -> i32
    %1752 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_637 = arith.constant 8 : i64
    %1753 = arith.extui %1751 : i32 to i64
    %1754 = arith.addi %1753, %c8_i64_637 : i64
    %1755 = llvm.getelementptr %15[%1754] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1752, %1755 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb100
  ^bb149:  // pred: ^bb146
    %1756 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i64_638 = arith.constant 8 : i64
    %1757 = arith.extui %1756 : i32 to i64
    %1758 = arith.addi %1757, %c8_i64_638 : i64
    %1759 = llvm.getelementptr %15[%1758] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1760 = llvm.load volatile %1759 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1760, %0 : i32, !llvm.ptr
    cf.br ^bb148
  ^bb150:  // pred: ^bb146
    %c0_i32_639 = arith.constant 0 : i32
    %1761 = llvm.load %6 : !llvm.ptr -> i32
    %1762 = llvm.load %0 : !llvm.ptr -> i32
    %1763 = arith.ori %1761, %1762 : i32
    %c1049692_i64_640 = arith.constant 1049692 : i64
    %1764 = arith.extui %c0_i32_639 : i32 to i64
    %1765 = arith.addi %1764, %c1049692_i64_640 : i64
    %1766 = llvm.getelementptr %15[%1765] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1763, %1766 {alignment = 1 : i64} : i32, !llvm.ptr
    %1767 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %1767, %0 : i32, !llvm.ptr
    cf.br ^bb148
  ^bb151:  // pred: ^bb127
    %1768 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_641 = arith.constant 0 : i32
    %c1049708_i64_642 = arith.constant 1049708 : i64
    %1769 = arith.extui %c0_i32_641 : i32 to i64
    %1770 = arith.addi %1769, %c1049708_i64_642 : i64
    %1771 = llvm.getelementptr %15[%1770] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1772 = llvm.load volatile %1771 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1773 = arith.cmpi eq, %1768, %1772 : i32
    %1774 = arith.extui %1773 : i1 to i32
    %c0_i32_643 = arith.constant 0 : i32
    %1775 = arith.cmpi ne, %1774, %c0_i32_643 : i32
    cf.cond_br %1775, ^bb102, ^bb152
  ^bb152:  // pred: ^bb151
    %1776 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_644 = arith.constant 4 : i64
    %1777 = arith.extui %1776 : i32 to i64
    %1778 = arith.addi %1777, %c4_i64_644 : i64
    %1779 = llvm.getelementptr %15[%1778] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1780 = llvm.load volatile %1779 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1780, %6 : i32, !llvm.ptr
    %c3_i32_645 = arith.constant 3 : i32
    %1781 = arith.andi %1780, %c3_i32_645 : i32
    %c1_i32_646 = arith.constant 1 : i32
    %1782 = arith.cmpi eq, %1781, %c1_i32_646 : i32
    %1783 = arith.extui %1782 : i1 to i32
    %c0_i32_647 = arith.constant 0 : i32
    %1784 = arith.cmpi eq, %1783, %c0_i32_647 : i32
    %1785 = arith.extui %1784 : i1 to i32
    %c0_i32_648 = arith.constant 0 : i32
    %1786 = arith.cmpi ne, %1785, %c0_i32_648 : i32
    cf.cond_br %1786, ^bb153, ^bb154
  ^bb153:  // 2 preds: ^bb152, ^bb154
    %1787 = llvm.load %2 : !llvm.ptr -> i32
    %1788 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32_649 = arith.constant -2 : i32
    %1789 = arith.andi %1788, %c-2_i32_649 : i32
    %c4_i64_650 = arith.constant 4 : i64
    %1790 = arith.extui %1787 : i32 to i64
    %1791 = arith.addi %1790, %c4_i64_650 : i64
    %1792 = llvm.getelementptr %15[%1791] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1789, %1792 {alignment = 1 : i64} : i32, !llvm.ptr
    %1793 = llvm.load %0 : !llvm.ptr -> i32
    %1794 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_651 = arith.constant 1 : i32
    %1795 = arith.ori %1794, %c1_i32_651 : i32
    %c4_i64_652 = arith.constant 4 : i64
    %1796 = arith.extui %1793 : i32 to i64
    %1797 = arith.addi %1796, %c4_i64_652 : i64
    %1798 = llvm.getelementptr %15[%1797] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1795, %1798 {alignment = 1 : i64} : i32, !llvm.ptr
    %1799 = llvm.load %0 : !llvm.ptr -> i32
    %1800 = llvm.load %3 : !llvm.ptr -> i32
    %1801 = arith.addi %1799, %1800 : i32
    %1802 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_653 = arith.constant 0 : i64
    %1803 = arith.extui %1801 : i32 to i64
    %1804 = arith.addi %1803, %c0_i64_653 : i64
    %1805 = llvm.getelementptr %15[%1804] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1802, %1805 {alignment = 1 : i64} : i32, !llvm.ptr
    %1806 = llvm.load %3 : !llvm.ptr -> i32
    %c256_i32_654 = arith.constant 256 : i32
    %1807 = arith.cmpi ult, %1806, %c256_i32_654 : i32
    %1808 = arith.extui %1807 : i1 to i32
    %c0_i32_655 = arith.constant 0 : i32
    %1809 = arith.cmpi ne, %1808, %c0_i32_655 : i32
    cf.cond_br %1809, ^bb155, ^bb156
  ^bb154:  // pred: ^bb152
    %1810 = llvm.load %2 : !llvm.ptr -> i32
    %1811 = llvm.load %6 : !llvm.ptr -> i32
    %c-8_i32_656 = arith.constant -8 : i32
    %1812 = arith.andi %1811, %c-8_i32_656 : i32
    llvm.store %1812, %6 : i32, !llvm.ptr
    call @f16(%arg0, %1810, %1812) : (!llvm.ptr, i32, i32) -> ()
    %1813 = llvm.load %6 : !llvm.ptr -> i32
    %1814 = llvm.load %3 : !llvm.ptr -> i32
    %1815 = arith.addi %1813, %1814 : i32
    llvm.store %1815, %3 : i32, !llvm.ptr
    %1816 = llvm.load %2 : !llvm.ptr -> i32
    %1817 = llvm.load %6 : !llvm.ptr -> i32
    %1818 = arith.addi %1816, %1817 : i32
    llvm.store %1818, %2 : i32, !llvm.ptr
    %c4_i64_657 = arith.constant 4 : i64
    %1819 = arith.extui %1818 : i32 to i64
    %1820 = arith.addi %1819, %c4_i64_657 : i64
    %1821 = llvm.getelementptr %15[%1820] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1822 = llvm.load volatile %1821 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1822, %6 : i32, !llvm.ptr
    cf.br ^bb153
  ^bb155:  // pred: ^bb153
    %1823 = llvm.load %3 : !llvm.ptr -> i32
    %c248_i32_658 = arith.constant 248 : i32
    %1824 = arith.andi %1823, %c248_i32_658 : i32
    %c1049428_i32_659 = arith.constant 1049428 : i32
    %1825 = arith.addi %1824, %c1049428_i32_659 : i32
    llvm.store %1825, %2 : i32, !llvm.ptr
    %c0_i32_660 = arith.constant 0 : i32
    %c1049692_i64_661 = arith.constant 1049692 : i64
    %1826 = arith.extui %c0_i32_660 : i32 to i64
    %1827 = arith.addi %1826, %c1049692_i64_661 : i64
    %1828 = llvm.getelementptr %15[%1827] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1829 = llvm.load volatile %1828 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1829, %6 : i32, !llvm.ptr
    %c1_i32_662 = arith.constant 1 : i32
    %1830 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_663 = arith.constant 3 : i32
    %c31_i32_664 = arith.constant 31 : i32
    %1831 = arith.cmpi ule, %c3_i32_663, %c31_i32_664 : i32
    %1832 = scf.if %1831 -> (i32) {
      %2078 = arith.shrui %1830, %c3_i32_663 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c31_i32_665 = arith.constant 31 : i32
    %1833 = arith.cmpi ule, %1832, %c31_i32_665 : i32
    %1834 = scf.if %1833 -> (i32) {
      %2078 = arith.shli %c1_i32_662, %1832 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %1834, %3 : i32, !llvm.ptr
    %1835 = arith.andi %1829, %1834 : i32
    %c0_i32_666 = arith.constant 0 : i32
    %1836 = arith.cmpi ne, %1835, %c0_i32_666 : i32
    cf.cond_br %1836, ^bb158, ^bb159
  ^bb156:  // pred: ^bb153
    %1837 = llvm.load %0 : !llvm.ptr -> i32
    %1838 = llvm.load %3 : !llvm.ptr -> i32
    call @f18(%arg0, %1837, %1838) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb101
  ^bb157:  // 2 preds: ^bb158, ^bb159
    %1839 = llvm.load %2 : !llvm.ptr -> i32
    %1840 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_667 = arith.constant 8 : i64
    %1841 = arith.extui %1839 : i32 to i64
    %1842 = arith.addi %1841, %c8_i64_667 : i64
    %1843 = llvm.getelementptr %15[%1842] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1840, %1843 {alignment = 1 : i64} : i32, !llvm.ptr
    %1844 = llvm.load %3 : !llvm.ptr -> i32
    %1845 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_668 = arith.constant 12 : i64
    %1846 = arith.extui %1844 : i32 to i64
    %1847 = arith.addi %1846, %c12_i64_668 : i64
    %1848 = llvm.getelementptr %15[%1847] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1845, %1848 {alignment = 1 : i64} : i32, !llvm.ptr
    %1849 = llvm.load %0 : !llvm.ptr -> i32
    %1850 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_669 = arith.constant 12 : i64
    %1851 = arith.extui %1849 : i32 to i64
    %1852 = arith.addi %1851, %c12_i64_669 : i64
    %1853 = llvm.getelementptr %15[%1852] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1850, %1853 {alignment = 1 : i64} : i32, !llvm.ptr
    %1854 = llvm.load %0 : !llvm.ptr -> i32
    %1855 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_670 = arith.constant 8 : i64
    %1856 = arith.extui %1854 : i32 to i64
    %1857 = arith.addi %1856, %c8_i64_670 : i64
    %1858 = llvm.getelementptr %15[%1857] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1855, %1858 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb101
  ^bb158:  // pred: ^bb155
    %1859 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_671 = arith.constant 8 : i64
    %1860 = arith.extui %1859 : i32 to i64
    %1861 = arith.addi %1860, %c8_i64_671 : i64
    %1862 = llvm.getelementptr %15[%1861] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1863 = llvm.load volatile %1862 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1863, %3 : i32, !llvm.ptr
    cf.br ^bb157
  ^bb159:  // pred: ^bb155
    %c0_i32_672 = arith.constant 0 : i32
    %1864 = llvm.load %6 : !llvm.ptr -> i32
    %1865 = llvm.load %3 : !llvm.ptr -> i32
    %1866 = arith.ori %1864, %1865 : i32
    %c1049692_i64_673 = arith.constant 1049692 : i64
    %1867 = arith.extui %c0_i32_672 : i32 to i64
    %1868 = arith.addi %1867, %c1049692_i64_673 : i64
    %1869 = llvm.getelementptr %15[%1868] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1866, %1869 {alignment = 1 : i64} : i32, !llvm.ptr
    %1870 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %1870, %3 : i32, !llvm.ptr
    cf.br ^bb157
  ^bb160:  // 2 preds: ^bb161, ^bb162
    %1871 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_674 = arith.constant 8 : i32
    %1872 = arith.addi %1871, %c8_i32_674 : i32
    llvm.store %1872, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb161:  // pred: ^bb105
    %c0_i32_675 = arith.constant 0 : i32
    %1873 = llvm.load %7 : !llvm.ptr -> i32
    %c1049700_i64_676 = arith.constant 1049700 : i64
    %1874 = arith.extui %c0_i32_675 : i32 to i64
    %1875 = arith.addi %1874, %c1049700_i64_676 : i64
    %1876 = llvm.getelementptr %15[%1875] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1873, %1876 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_677 = arith.constant 0 : i32
    %1877 = llvm.load %2 : !llvm.ptr -> i32
    %1878 = llvm.load %3 : !llvm.ptr -> i32
    %1879 = arith.addi %1877, %1878 : i32
    llvm.store %1879, %6 : i32, !llvm.ptr
    %c1049708_i64_678 = arith.constant 1049708 : i64
    %1880 = arith.extui %c0_i32_677 : i32 to i64
    %1881 = arith.addi %1880, %c1049708_i64_678 : i64
    %1882 = llvm.getelementptr %15[%1881] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1879, %1882 {alignment = 1 : i64} : i32, !llvm.ptr
    %1883 = llvm.load %6 : !llvm.ptr -> i32
    %1884 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_679 = arith.constant 1 : i32
    %1885 = arith.ori %1884, %c1_i32_679 : i32
    %c4_i64_680 = arith.constant 4 : i64
    %1886 = arith.extui %1883 : i32 to i64
    %1887 = arith.addi %1886, %c4_i64_680 : i64
    %1888 = llvm.getelementptr %15[%1887] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1885, %1888 {alignment = 1 : i64} : i32, !llvm.ptr
    %1889 = llvm.load %2 : !llvm.ptr -> i32
    %1890 = llvm.load %0 : !llvm.ptr -> i32
    %1891 = arith.addi %1889, %1890 : i32
    %1892 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_681 = arith.constant 0 : i64
    %1893 = arith.extui %1891 : i32 to i64
    %1894 = arith.addi %1893, %c0_i64_681 : i64
    %1895 = llvm.getelementptr %15[%1894] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1892, %1895 {alignment = 1 : i64} : i32, !llvm.ptr
    %1896 = llvm.load %2 : !llvm.ptr -> i32
    %1897 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_682 = arith.constant 3 : i32
    %1898 = arith.ori %1897, %c3_i32_682 : i32
    %c4_i64_683 = arith.constant 4 : i64
    %1899 = arith.extui %1896 : i32 to i64
    %1900 = arith.addi %1899, %c4_i64_683 : i64
    %1901 = llvm.getelementptr %15[%1900] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1898, %1901 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb160
  ^bb162:  // pred: ^bb105
    %c0_i32_684 = arith.constant 0 : i32
    %c0_i32_685 = arith.constant 0 : i32
    %c1049708_i64_686 = arith.constant 1049708 : i64
    %1902 = arith.extui %c0_i32_684 : i32 to i64
    %1903 = arith.addi %1902, %c1049708_i64_686 : i64
    %1904 = llvm.getelementptr %15[%1903] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_685, %1904 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_687 = arith.constant 0 : i32
    %c0_i32_688 = arith.constant 0 : i32
    %c1049700_i64_689 = arith.constant 1049700 : i64
    %1905 = arith.extui %c0_i32_687 : i32 to i64
    %1906 = arith.addi %1905, %c1049700_i64_689 : i64
    %1907 = llvm.getelementptr %15[%1906] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_688, %1907 {alignment = 1 : i64} : i32, !llvm.ptr
    %1908 = llvm.load %2 : !llvm.ptr -> i32
    %1909 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_690 = arith.constant 3 : i32
    %1910 = arith.ori %1909, %c3_i32_690 : i32
    %c4_i64_691 = arith.constant 4 : i64
    %1911 = arith.extui %1908 : i32 to i64
    %1912 = arith.addi %1911, %c4_i64_691 : i64
    %1913 = llvm.getelementptr %15[%1912] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1910, %1913 {alignment = 1 : i64} : i32, !llvm.ptr
    %1914 = llvm.load %2 : !llvm.ptr -> i32
    %1915 = llvm.load %0 : !llvm.ptr -> i32
    %1916 = arith.addi %1914, %1915 : i32
    llvm.store %1916, %0 : i32, !llvm.ptr
    %1917 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_692 = arith.constant 4 : i64
    %1918 = arith.extui %1917 : i32 to i64
    %1919 = arith.addi %1918, %c4_i64_692 : i64
    %1920 = llvm.getelementptr %15[%1919] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1921 = llvm.load volatile %1920 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_693 = arith.constant 1 : i32
    %1922 = arith.ori %1921, %c1_i32_693 : i32
    %c4_i64_694 = arith.constant 4 : i64
    %1923 = arith.extui %1916 : i32 to i64
    %1924 = arith.addi %1923, %c4_i64_694 : i64
    %1925 = llvm.getelementptr %15[%1924] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1922, %1925 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb160
  ^bb163:  // pred: ^bb100
    %c0_i32_695 = arith.constant 0 : i32
    %1926 = llvm.load %2 : !llvm.ptr -> i32
    %1927 = llvm.load %3 : !llvm.ptr -> i32
    %1928 = arith.subi %1926, %1927 : i32
    llvm.store %1928, %2 : i32, !llvm.ptr
    %c1049704_i64_696 = arith.constant 1049704 : i64
    %1929 = arith.extui %c0_i32_695 : i32 to i64
    %1930 = arith.addi %1929, %c1049704_i64_696 : i64
    %1931 = llvm.getelementptr %15[%1930] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1928, %1931 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_697 = arith.constant 0 : i32
    %c0_i32_698 = arith.constant 0 : i32
    %c1049712_i64_699 = arith.constant 1049712 : i64
    %1932 = arith.extui %c0_i32_698 : i32 to i64
    %1933 = arith.addi %1932, %c1049712_i64_699 : i64
    %1934 = llvm.getelementptr %15[%1933] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1935 = llvm.load volatile %1934 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1935, %0 : i32, !llvm.ptr
    %1936 = llvm.load %3 : !llvm.ptr -> i32
    %1937 = arith.addi %1935, %1936 : i32
    llvm.store %1937, %7 : i32, !llvm.ptr
    %c1049712_i64_700 = arith.constant 1049712 : i64
    %1938 = arith.extui %c0_i32_697 : i32 to i64
    %1939 = arith.addi %1938, %c1049712_i64_700 : i64
    %1940 = llvm.getelementptr %15[%1939] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1937, %1940 {alignment = 1 : i64} : i32, !llvm.ptr
    %1941 = llvm.load %7 : !llvm.ptr -> i32
    %1942 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_701 = arith.constant 1 : i32
    %1943 = arith.ori %1942, %c1_i32_701 : i32
    %c4_i64_702 = arith.constant 4 : i64
    %1944 = arith.extui %1941 : i32 to i64
    %1945 = arith.addi %1944, %c4_i64_702 : i64
    %1946 = llvm.getelementptr %15[%1945] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1943, %1946 {alignment = 1 : i64} : i32, !llvm.ptr
    %1947 = llvm.load %0 : !llvm.ptr -> i32
    %1948 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_703 = arith.constant 3 : i32
    %1949 = arith.ori %1948, %c3_i32_703 : i32
    %c4_i64_704 = arith.constant 4 : i64
    %1950 = arith.extui %1947 : i32 to i64
    %1951 = arith.addi %1950, %c4_i64_704 : i64
    %1952 = llvm.getelementptr %15[%1951] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1949, %1952 {alignment = 1 : i64} : i32, !llvm.ptr
    %1953 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_705 = arith.constant 8 : i32
    %1954 = arith.addi %1953, %c8_i32_705 : i32
    llvm.store %1954, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb164:  // 2 preds: ^bb5, ^bb165
    %1955 = llvm.load %7 : !llvm.ptr -> i32
    %c20_i64_706 = arith.constant 20 : i64
    %1956 = arith.extui %1955 : i32 to i64
    %1957 = arith.addi %1956, %c20_i64_706 : i64
    %1958 = llvm.getelementptr %15[%1957] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1959 = llvm.load volatile %1958 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1959, %6 : i32, !llvm.ptr
    %c0_i32_707 = arith.constant 0 : i32
    %1960 = arith.cmpi eq, %1959, %c0_i32_707 : i32
    %1961 = arith.extui %1960 : i1 to i32
    %c0_i32_708 = arith.constant 0 : i32
    %1962 = arith.cmpi ne, %1961, %c0_i32_708 : i32
    cf.cond_br %1962, ^bb4, ^bb166
  ^bb165:  // pred: ^bb5
    %1963 = llvm.load %0 : !llvm.ptr -> i32
    %1964 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i64_709 = arith.constant 16 : i64
    %1965 = arith.extui %1963 : i32 to i64
    %1966 = arith.addi %1965, %c16_i64_709 : i64
    %1967 = llvm.getelementptr %15[%1966] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1964, %1967 {alignment = 1 : i64} : i32, !llvm.ptr
    %1968 = llvm.load %6 : !llvm.ptr -> i32
    %1969 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_710 = arith.constant 24 : i64
    %1970 = arith.extui %1968 : i32 to i64
    %1971 = arith.addi %1970, %c24_i64_710 : i64
    %1972 = llvm.getelementptr %15[%1971] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1969, %1972 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb164
  ^bb166:  // pred: ^bb164
    %1973 = llvm.load %0 : !llvm.ptr -> i32
    %1974 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64_711 = arith.constant 20 : i64
    %1975 = arith.extui %1973 : i32 to i64
    %1976 = arith.addi %1975, %c20_i64_711 : i64
    %1977 = llvm.getelementptr %15[%1976] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1974, %1977 {alignment = 1 : i64} : i32, !llvm.ptr
    %1978 = llvm.load %6 : !llvm.ptr -> i32
    %1979 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_712 = arith.constant 24 : i64
    %1980 = arith.extui %1978 : i32 to i64
    %1981 = arith.addi %1980, %c24_i64_712 : i64
    %1982 = llvm.getelementptr %15[%1981] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1979, %1982 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb167:  // 3 preds: ^bb168, ^bb171, ^bb172
    %1983 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_713 = arith.constant 8 : i32
    %1984 = arith.addi %1983, %c8_i32_713 : i32
    llvm.store %1984, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb168:  // pred: ^bb4
    %1985 = llvm.load %7 : !llvm.ptr -> i32
    %1986 = llvm.load %2 : !llvm.ptr -> i32
    %1987 = llvm.load %3 : !llvm.ptr -> i32
    %1988 = arith.addi %1986, %1987 : i32
    llvm.store %1988, %0 : i32, !llvm.ptr
    %c3_i32_714 = arith.constant 3 : i32
    %1989 = arith.ori %1988, %c3_i32_714 : i32
    %c4_i64_715 = arith.constant 4 : i64
    %1990 = arith.extui %1985 : i32 to i64
    %1991 = arith.addi %1990, %c4_i64_715 : i64
    %1992 = llvm.getelementptr %15[%1991] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1989, %1992 {alignment = 1 : i64} : i32, !llvm.ptr
    %1993 = llvm.load %7 : !llvm.ptr -> i32
    %1994 = llvm.load %0 : !llvm.ptr -> i32
    %1995 = arith.addi %1993, %1994 : i32
    llvm.store %1995, %0 : i32, !llvm.ptr
    %1996 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_716 = arith.constant 4 : i64
    %1997 = arith.extui %1996 : i32 to i64
    %1998 = arith.addi %1997, %c4_i64_716 : i64
    %1999 = llvm.getelementptr %15[%1998] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2000 = llvm.load volatile %1999 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_717 = arith.constant 1 : i32
    %2001 = arith.ori %2000, %c1_i32_717 : i32
    %c4_i64_718 = arith.constant 4 : i64
    %2002 = arith.extui %1995 : i32 to i64
    %2003 = arith.addi %2002, %c4_i64_718 : i64
    %2004 = llvm.getelementptr %15[%2003] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2001, %2004 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb167
  ^bb169:  // pred: ^bb4
    %2005 = llvm.load %7 : !llvm.ptr -> i32
    %2006 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_719 = arith.constant 3 : i32
    %2007 = arith.ori %2006, %c3_i32_719 : i32
    %c4_i64_720 = arith.constant 4 : i64
    %2008 = arith.extui %2005 : i32 to i64
    %2009 = arith.addi %2008, %c4_i64_720 : i64
    %2010 = llvm.getelementptr %15[%2009] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2007, %2010 {alignment = 1 : i64} : i32, !llvm.ptr
    %2011 = llvm.load %7 : !llvm.ptr -> i32
    %2012 = llvm.load %3 : !llvm.ptr -> i32
    %2013 = arith.addi %2011, %2012 : i32
    llvm.store %2013, %0 : i32, !llvm.ptr
    %2014 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_721 = arith.constant 1 : i32
    %2015 = arith.ori %2014, %c1_i32_721 : i32
    %c4_i64_722 = arith.constant 4 : i64
    %2016 = arith.extui %2013 : i32 to i64
    %2017 = arith.addi %2016, %c4_i64_722 : i64
    %2018 = llvm.getelementptr %15[%2017] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2015, %2018 {alignment = 1 : i64} : i32, !llvm.ptr
    %2019 = llvm.load %0 : !llvm.ptr -> i32
    %2020 = llvm.load %2 : !llvm.ptr -> i32
    %2021 = arith.addi %2019, %2020 : i32
    %2022 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_723 = arith.constant 0 : i64
    %2023 = arith.extui %2021 : i32 to i64
    %2024 = arith.addi %2023, %c0_i64_723 : i64
    %2025 = llvm.getelementptr %15[%2024] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2022, %2025 {alignment = 1 : i64} : i32, !llvm.ptr
    %2026 = llvm.load %2 : !llvm.ptr -> i32
    %c256_i32_724 = arith.constant 256 : i32
    %2027 = arith.cmpi ult, %2026, %c256_i32_724 : i32
    %2028 = arith.extui %2027 : i1 to i32
    %c0_i32_725 = arith.constant 0 : i32
    %2029 = arith.cmpi ne, %2028, %c0_i32_725 : i32
    cf.cond_br %2029, ^bb170, ^bb171
  ^bb170:  // pred: ^bb169
    %2030 = llvm.load %2 : !llvm.ptr -> i32
    %c248_i32_726 = arith.constant 248 : i32
    %2031 = arith.andi %2030, %c248_i32_726 : i32
    %c1049428_i32_727 = arith.constant 1049428 : i32
    %2032 = arith.addi %2031, %c1049428_i32_727 : i32
    llvm.store %2032, %3 : i32, !llvm.ptr
    %c0_i32_728 = arith.constant 0 : i32
    %c1049692_i64_729 = arith.constant 1049692 : i64
    %2033 = arith.extui %c0_i32_728 : i32 to i64
    %2034 = arith.addi %2033, %c1049692_i64_729 : i64
    %2035 = llvm.getelementptr %15[%2034] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2036 = llvm.load volatile %2035 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %2036, %6 : i32, !llvm.ptr
    %c1_i32_730 = arith.constant 1 : i32
    %2037 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_731 = arith.constant 3 : i32
    %c31_i32_732 = arith.constant 31 : i32
    %2038 = arith.cmpi ule, %c3_i32_731, %c31_i32_732 : i32
    %2039 = scf.if %2038 -> (i32) {
      %2078 = arith.shrui %2037, %c3_i32_731 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    %c31_i32_733 = arith.constant 31 : i32
    %2040 = arith.cmpi ule, %2039, %c31_i32_733 : i32
    %2041 = scf.if %2040 -> (i32) {
      %2078 = arith.shli %c1_i32_730, %2039 : i32
      scf.yield %2078 : i32
    } else {
      %c0_i32_742 = arith.constant 0 : i32
      scf.yield %c0_i32_742 : i32
    }
    llvm.store %2041, %2 : i32, !llvm.ptr
    %2042 = arith.andi %2036, %2041 : i32
    %c0_i32_734 = arith.constant 0 : i32
    %2043 = arith.cmpi ne, %2042, %c0_i32_734 : i32
    cf.cond_br %2043, ^bb173, ^bb174
  ^bb171:  // pred: ^bb169
    %2044 = llvm.load %0 : !llvm.ptr -> i32
    %2045 = llvm.load %2 : !llvm.ptr -> i32
    call @f18(%arg0, %2044, %2045) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb167
  ^bb172:  // 2 preds: ^bb173, ^bb174
    %2046 = llvm.load %3 : !llvm.ptr -> i32
    %2047 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_735 = arith.constant 8 : i64
    %2048 = arith.extui %2046 : i32 to i64
    %2049 = arith.addi %2048, %c8_i64_735 : i64
    %2050 = llvm.getelementptr %15[%2049] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2047, %2050 {alignment = 1 : i64} : i32, !llvm.ptr
    %2051 = llvm.load %2 : !llvm.ptr -> i32
    %2052 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_736 = arith.constant 12 : i64
    %2053 = arith.extui %2051 : i32 to i64
    %2054 = arith.addi %2053, %c12_i64_736 : i64
    %2055 = llvm.getelementptr %15[%2054] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2052, %2055 {alignment = 1 : i64} : i32, !llvm.ptr
    %2056 = llvm.load %0 : !llvm.ptr -> i32
    %2057 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_737 = arith.constant 12 : i64
    %2058 = arith.extui %2056 : i32 to i64
    %2059 = arith.addi %2058, %c12_i64_737 : i64
    %2060 = llvm.getelementptr %15[%2059] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2057, %2060 {alignment = 1 : i64} : i32, !llvm.ptr
    %2061 = llvm.load %0 : !llvm.ptr -> i32
    %2062 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_738 = arith.constant 8 : i64
    %2063 = arith.extui %2061 : i32 to i64
    %2064 = arith.addi %2063, %c8_i64_738 : i64
    %2065 = llvm.getelementptr %15[%2064] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2062, %2065 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb167
  ^bb173:  // pred: ^bb170
    %2066 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_739 = arith.constant 8 : i64
    %2067 = arith.extui %2066 : i32 to i64
    %2068 = arith.addi %2067, %c8_i64_739 : i64
    %2069 = llvm.getelementptr %15[%2068] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %2070 = llvm.load volatile %2069 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %2070, %2 : i32, !llvm.ptr
    cf.br ^bb172
  ^bb174:  // pred: ^bb170
    %c0_i32_740 = arith.constant 0 : i32
    %2071 = llvm.load %6 : !llvm.ptr -> i32
    %2072 = llvm.load %2 : !llvm.ptr -> i32
    %2073 = arith.ori %2071, %2072 : i32
    %c1049692_i64_741 = arith.constant 1049692 : i64
    %2074 = arith.extui %c0_i32_740 : i32 to i64
    %2075 = arith.addi %2074, %c1049692_i64_741 : i64
    %2076 = llvm.getelementptr %15[%2075] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %2073, %2076 {alignment = 1 : i64} : i32, !llvm.ptr
    %2077 = llvm.load %3 : !llvm.ptr -> i32
    llvm.store %2077, %2 : i32, !llvm.ptr
    cf.br ^bb172
  }
  func.func @f21(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_6 = arith.constant 0 : i32
    llvm.store %c0_i32_6, %2 : i32, !llvm.ptr
    %c-65587_i32 = arith.constant -65587 : i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_7 = arith.constant 16 : i32
    %12 = arith.cmpi ugt, %11, %c16_i32_7 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_8 : i32
    %15 = arith.select %14, %10, %c16_i32 : i32
    llvm.store %15, %0 : i32, !llvm.ptr
    %16 = arith.subi %c-65587_i32, %15 : i32
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = arith.cmpi ule, %16, %17 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_9 : i32
    cf.cond_br %20, ^bb3, ^bb4
  ^bb2(%21: i32):  // pred: ^bb3
    return %21 : i32
  ^bb3:  // 3 preds: ^bb1, ^bb4, ^bb11
    %22 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%22 : i32)
  ^bb4:  // pred: ^bb1
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_10 = arith.constant 16 : i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c11_i32 = arith.constant 11 : i32
    %25 = arith.addi %24, %c11_i32 : i32
    %c-8_i32 = arith.constant -8 : i32
    %26 = arith.andi %25, %c-8_i32 : i32
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %c11_i32_11 = arith.constant 11 : i32
    %28 = arith.cmpi ult, %27, %c11_i32_11 : i32
    %29 = arith.extui %28 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %30 = arith.cmpi ne, %29, %c0_i32_12 : i32
    %31 = arith.select %30, %c16_i32_10, %26 : i32
    llvm.store %31, %3 : i32, !llvm.ptr
    %32 = arith.addi %23, %31 : i32
    %c12_i32 = arith.constant 12 : i32
    %33 = arith.addi %32, %c12_i32 : i32
    %34 = call @f20(%arg0, %33) : (!llvm.ptr, i32) -> i32
    llvm.store %34, %1 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    %35 = arith.cmpi eq, %34, %c0_i32_13 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_14 : i32
    cf.cond_br %37, ^bb3, ^bb5
  ^bb5:  // pred: ^bb4
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c-8_i32_15 = arith.constant -8 : i32
    %39 = arith.addi %38, %c-8_i32_15 : i32
    llvm.store %39, %2 : i32, !llvm.ptr
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %41 = arith.addi %40, %c-1_i32 : i32
    llvm.store %41, %4 : i32, !llvm.ptr
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %43 = arith.andi %41, %42 : i32
    %c0_i32_16 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_16 : i32
    cf.cond_br %44, ^bb7, ^bb8
  ^bb6:  // 3 preds: ^bb8, ^bb9, ^bb10
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c4_i64 : i64
    %48 = llvm.getelementptr %9[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %49, %1 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %50 = arith.andi %49, %c3_i32 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %51 = arith.cmpi eq, %50, %c0_i32_17 : i32
    %52 = arith.extui %51 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_18 : i32
    cf.cond_br %53, ^bb11, ^bb12
  ^bb7:  // pred: ^bb5
    %54 = llvm.load %1 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %55 = arith.addi %54, %c-4_i32 : i32
    llvm.store %55, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %59, %6 : i32, !llvm.ptr
    %c-8_i32_19 = arith.constant -8 : i32
    %60 = arith.andi %59, %c-8_i32_19 : i32
    %61 = llvm.load %4 : !llvm.ptr -> i32
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %63 = arith.addi %61, %62 : i32
    %c0_i32_20 = arith.constant 0 : i32
    %64 = llvm.load %0 : !llvm.ptr -> i32
    %65 = arith.subi %c0_i32_20, %64 : i32
    %66 = arith.andi %63, %65 : i32
    %c-8_i32_21 = arith.constant -8 : i32
    %67 = arith.addi %66, %c-8_i32_21 : i32
    llvm.store %67, %1 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %71 = arith.subi %69, %70 : i32
    %c16_i32_23 = arith.constant 16 : i32
    %72 = arith.cmpi ugt, %71, %c16_i32_23 : i32
    %73 = arith.extui %72 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %74 = arith.cmpi ne, %73, %c0_i32_24 : i32
    %75 = arith.select %74, %c0_i32_22, %68 : i32
    %76 = arith.addi %67, %75 : i32
    llvm.store %76, %0 : i32, !llvm.ptr
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = arith.subi %76, %77 : i32
    llvm.store %78, %1 : i32, !llvm.ptr
    %79 = arith.subi %60, %78 : i32
    llvm.store %79, %4 : i32, !llvm.ptr
    %80 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_25 = arith.constant 3 : i32
    %81 = arith.andi %80, %c3_i32_25 : i32
    %c0_i32_26 = arith.constant 0 : i32
    %82 = arith.cmpi eq, %81, %c0_i32_26 : i32
    %83 = arith.extui %82 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_27 : i32
    cf.cond_br %84, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %85 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %85, %0 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // pred: ^bb7
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_28 = arith.constant 0 : i64
    %87 = arith.extui %86 : i32 to i64
    %88 = arith.addi %87, %c0_i64_28 : i64
    %89 = llvm.getelementptr %9[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %90 = llvm.load volatile %89 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %90, %2 : i32, !llvm.ptr
    %91 = llvm.load %0 : !llvm.ptr -> i32
    %92 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_29 = arith.constant 4 : i64
    %93 = arith.extui %91 : i32 to i64
    %94 = arith.addi %93, %c4_i64_29 : i64
    %95 = llvm.getelementptr %9[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %95 {alignment = 1 : i64} : i32, !llvm.ptr
    %96 = llvm.load %0 : !llvm.ptr -> i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %98 = llvm.load %1 : !llvm.ptr -> i32
    %99 = arith.addi %97, %98 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %100 = arith.extui %96 : i32 to i64
    %101 = arith.addi %100, %c0_i64_30 : i64
    %102 = llvm.getelementptr %9[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %99, %102 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb10:  // pred: ^bb7
    %103 = llvm.load %0 : !llvm.ptr -> i32
    %104 = llvm.load %4 : !llvm.ptr -> i32
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_31 = arith.constant 4 : i64
    %106 = arith.extui %105 : i32 to i64
    %107 = arith.addi %106, %c4_i64_31 : i64
    %108 = llvm.getelementptr %9[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %109 = llvm.load volatile %108 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_32 = arith.constant 1 : i32
    %110 = arith.andi %109, %c1_i32_32 : i32
    %111 = arith.ori %104, %110 : i32
    %c2_i32 = arith.constant 2 : i32
    %112 = arith.ori %111, %c2_i32 : i32
    %c4_i64_33 = arith.constant 4 : i64
    %113 = arith.extui %103 : i32 to i64
    %114 = arith.addi %113, %c4_i64_33 : i64
    %115 = llvm.getelementptr %9[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    %116 = llvm.load %0 : !llvm.ptr -> i32
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %118 = arith.addi %116, %117 : i32
    llvm.store %118, %4 : i32, !llvm.ptr
    %119 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_34 = arith.constant 4 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c4_i64_34 : i64
    %122 = llvm.getelementptr %9[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_35 = arith.constant 1 : i32
    %124 = arith.ori %123, %c1_i32_35 : i32
    %c4_i64_36 = arith.constant 4 : i64
    %125 = arith.extui %118 : i32 to i64
    %126 = arith.addi %125, %c4_i64_36 : i64
    %127 = llvm.getelementptr %9[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %124, %127 {alignment = 1 : i64} : i32, !llvm.ptr
    %128 = llvm.load %5 : !llvm.ptr -> i32
    %129 = llvm.load %1 : !llvm.ptr -> i32
    %130 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c0_i64_37 : i64
    %133 = llvm.getelementptr %9[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_38 = arith.constant 1 : i32
    %135 = arith.andi %134, %c1_i32_38 : i32
    %136 = arith.ori %129, %135 : i32
    %c2_i32_39 = arith.constant 2 : i32
    %137 = arith.ori %136, %c2_i32_39 : i32
    %c0_i64_40 = arith.constant 0 : i64
    %138 = arith.extui %128 : i32 to i64
    %139 = arith.addi %138, %c0_i64_40 : i64
    %140 = llvm.getelementptr %9[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %137, %140 {alignment = 1 : i64} : i32, !llvm.ptr
    %141 = llvm.load %2 : !llvm.ptr -> i32
    %142 = llvm.load %1 : !llvm.ptr -> i32
    %143 = arith.addi %141, %142 : i32
    llvm.store %143, %4 : i32, !llvm.ptr
    %144 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_41 = arith.constant 4 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c4_i64_41 : i64
    %147 = llvm.getelementptr %9[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_42 = arith.constant 1 : i32
    %149 = arith.ori %148, %c1_i32_42 : i32
    %c4_i64_43 = arith.constant 4 : i64
    %150 = arith.extui %143 : i32 to i64
    %151 = arith.addi %150, %c4_i64_43 : i64
    %152 = llvm.getelementptr %9[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %149, %152 {alignment = 1 : i64} : i32, !llvm.ptr
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %154 = llvm.load %1 : !llvm.ptr -> i32
    call @f17(%arg0, %153, %154) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb6
  ^bb11:  // 3 preds: ^bb6, ^bb12, ^bb13
    %155 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %156 = arith.addi %155, %c8_i32 : i32
    llvm.store %156, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %157 = llvm.load %1 : !llvm.ptr -> i32
    %c-8_i32_44 = arith.constant -8 : i32
    %158 = arith.andi %157, %c-8_i32_44 : i32
    llvm.store %158, %2 : i32, !llvm.ptr
    %159 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_45 = arith.constant 16 : i32
    %160 = arith.addi %159, %c16_i32_45 : i32
    %161 = arith.cmpi ule, %158, %160 : i32
    %162 = arith.extui %161 : i1 to i32
    %c0_i32_46 = arith.constant 0 : i32
    %163 = arith.cmpi ne, %162, %c0_i32_46 : i32
    cf.cond_br %163, ^bb11, ^bb13
  ^bb13:  // pred: ^bb12
    %164 = llvm.load %0 : !llvm.ptr -> i32
    %165 = llvm.load %3 : !llvm.ptr -> i32
    %166 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_47 = arith.constant 1 : i32
    %167 = arith.andi %166, %c1_i32_47 : i32
    %168 = arith.ori %165, %167 : i32
    %c2_i32_48 = arith.constant 2 : i32
    %169 = arith.ori %168, %c2_i32_48 : i32
    %c4_i64_49 = arith.constant 4 : i64
    %170 = arith.extui %164 : i32 to i64
    %171 = arith.addi %170, %c4_i64_49 : i64
    %172 = llvm.getelementptr %9[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %169, %172 {alignment = 1 : i64} : i32, !llvm.ptr
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %174 = llvm.load %3 : !llvm.ptr -> i32
    %175 = arith.addi %173, %174 : i32
    llvm.store %175, %1 : i32, !llvm.ptr
    %176 = llvm.load %2 : !llvm.ptr -> i32
    %177 = llvm.load %3 : !llvm.ptr -> i32
    %178 = arith.subi %176, %177 : i32
    llvm.store %178, %3 : i32, !llvm.ptr
    %c3_i32_50 = arith.constant 3 : i32
    %179 = arith.ori %178, %c3_i32_50 : i32
    %c4_i64_51 = arith.constant 4 : i64
    %180 = arith.extui %175 : i32 to i64
    %181 = arith.addi %180, %c4_i64_51 : i64
    %182 = llvm.getelementptr %9[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %179, %182 {alignment = 1 : i64} : i32, !llvm.ptr
    %183 = llvm.load %0 : !llvm.ptr -> i32
    %184 = llvm.load %2 : !llvm.ptr -> i32
    %185 = arith.addi %183, %184 : i32
    llvm.store %185, %2 : i32, !llvm.ptr
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_52 = arith.constant 4 : i64
    %187 = arith.extui %186 : i32 to i64
    %188 = arith.addi %187, %c4_i64_52 : i64
    %189 = llvm.getelementptr %9[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %190 = llvm.load volatile %189 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_53 = arith.constant 1 : i32
    %191 = arith.ori %190, %c1_i32_53 : i32
    %c4_i64_54 = arith.constant 4 : i64
    %192 = arith.extui %185 : i32 to i64
    %193 = arith.addi %192, %c4_i64_54 : i64
    %194 = llvm.getelementptr %9[%193] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %191, %194 {alignment = 1 : i64} : i32, !llvm.ptr
    %195 = llvm.load %1 : !llvm.ptr -> i32
    %196 = llvm.load %3 : !llvm.ptr -> i32
    call @f17(%arg0, %195, %196) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb11
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f23(%arg0, %1) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f23(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %1 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %c12_i64 = arith.constant 12 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c12_i64 : i64
    %18 = llvm.getelementptr %8[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %19, %3 : i32, !llvm.ptr
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64 : i64
    %23 = llvm.getelementptr %8[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %24 : i32, [
      default: ^bb4,
      0: ^bb6,
      1: ^bb5
    ]
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb7, ^bb8
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_3 = arith.constant 4 : i64
    %27 = arith.extui %25 : i32 to i64
    %28 = arith.addi %27, %c4_i64_3 : i64
    %29 = llvm.getelementptr %8[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %26, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %32 = arith.extui %30 : i32 to i64
    %33 = arith.addi %32, %c0_i64_4 : i64
    %34 = llvm.getelementptr %8[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %c1048940_i32 = arith.constant 1048940 : i32
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c4_i64_5 : i64
    %39 = llvm.getelementptr %8[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c8_i64 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %45, %0 : i32, !llvm.ptr
    %c8_i64_6 = arith.constant 8 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c8_i64_6 : i64
    %48 = llvm.getelementptr %8[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i8
    %50 = arith.extui %49 : i8 to i32
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c9_i64 = arith.constant 9 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c9_i64 : i64
    %54 = llvm.getelementptr %8[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i8
    %56 = arith.extui %55 : i8 to i32
    call @f37(%arg0, %35, %c1048940_i32, %40, %50, %56) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // 3 preds: ^bb1, ^bb5, ^bb6
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c0_i64_7 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64_7 : i64
    %60 = llvm.getelementptr %8[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %60 {alignment = 1 : i64} : i32, !llvm.ptr
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_8 = arith.constant 12 : i64
    %63 = arith.extui %61 : i32 to i64
    %64 = arith.addi %63, %c12_i64_8 : i64
    %65 = llvm.getelementptr %8[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %62, %65 {alignment = 1 : i64} : i32, !llvm.ptr
    %66 = llvm.load %1 : !llvm.ptr -> i32
    %c1048968_i32 = arith.constant 1048968 : i32
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_9 = arith.constant 4 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c4_i64_9 : i64
    %70 = llvm.getelementptr %8[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i32
    %72 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_10 = arith.constant 8 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c8_i64_10 : i64
    %75 = llvm.getelementptr %8[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %0 : i32, !llvm.ptr
    %c8_i64_11 = arith.constant 8 : i64
    %77 = arith.extui %76 : i32 to i64
    %78 = arith.addi %77, %c8_i64_11 : i64
    %79 = llvm.getelementptr %8[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i8
    %81 = arith.extui %80 : i8 to i32
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %c9_i64_12 = arith.constant 9 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c9_i64_12 : i64
    %85 = llvm.getelementptr %8[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i8
    %87 = arith.extui %86 : i8 to i32
    call @f37(%arg0, %66, %c1048968_i32, %71, %81, %87) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32_13 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_13) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %88 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %89 = arith.cmpi ne, %88, %c0_i32_14 : i32
    cf.cond_br %89, ^bb4, ^bb8
  ^bb6:  // pred: ^bb1
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %91 = arith.cmpi ne, %90, %c0_i32_15 : i32
    cf.cond_br %91, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %c1_i32_16 = arith.constant 1 : i32
    llvm.store %c1_i32_16, %2 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    llvm.store %c0_i32_17, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // pred: ^bb5
    %92 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c0_i64_18 : i64
    %95 = llvm.getelementptr %8[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %96, %2 : i32, !llvm.ptr
    %c4_i64_19 = arith.constant 4 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c4_i64_19 : i64
    %99 = llvm.getelementptr %8[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %100, %3 : i32, !llvm.ptr
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_20 : i64
    %104 = llvm.getelementptr %8[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %105, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f24(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %9 = arith.subi %8, %c48_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %c0_i32_2 = arith.constant 0 : i32
    %c1049260_i64 = arith.constant 1049260 : i64
    %10 = arith.extui %c0_i32_2 : i32 to i64
    %11 = arith.addi %10, %c1049260_i64 : i64
    %12 = llvm.getelementptr %7[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i8
    %14 = arith.extui %13 : i8 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_3 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_5 = arith.constant 48 : i32
    %19 = arith.addi %18, %c48_i32_5 : i32
    llvm.store %19, %4 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c12_i64 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c1048860_i32 = arith.constant 1048860 : i32
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048860_i32, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c20_i64 = arith.constant 20 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c20_i64 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %34 = arith.extui %32 : i32 to i64
    %35 = arith.addi %34, %c44_i64 : i64
    %36 = llvm.getelementptr %7[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %38 = arith.extui %c1_i32_6 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %39 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %40 = scf.if %39 -> (i64) {
      %56 = arith.shli %38, %c32_i64 : i64
      scf.yield %56 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i32 = arith.constant 44 : i32
    %42 = arith.addi %41, %c44_i32 : i32
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.ori %40, %43 : i64
    %c32_i64_7 = arith.constant 32 : i64
    %45 = arith.extui %37 : i32 to i64
    %46 = arith.addi %45, %c32_i64_7 : i64
    %47 = llvm.getelementptr %7[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i64, !llvm.ptr
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %50 = arith.addi %49, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %51 = arith.extui %48 : i32 to i64
    %52 = arith.addi %51, %c16_i64 : i64
    %53 = llvm.getelementptr %7[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %55 = arith.addi %54, %c8_i32 : i32
    %c1048892_i32 = arith.constant 1048892 : i32
    call @f46(%arg0, %55, %c1048892_i32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f25(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %c9_i32 = arith.constant 9 : i32
    %3 = arith.cmpi ult, %2, %c9_i32 : i32
    %4 = arith.extui %3 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4, %c0_i32 : i32
    cf.cond_br %5, ^bb3, ^bb4
  ^bb2(%6: i32):  // 2 preds: ^bb3, ^bb4
    return %6 : i32
  ^bb3:  // pred: ^bb1
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = call @f20(%arg0, %7) : (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%8 : i32)
  ^bb4:  // pred: ^bb1
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %11 = call @f21(%arg0, %9, %10) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%11 : i32)
  }
  func.func @f26(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %9 = arith.addi %8, %c-4_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %7[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %13, %3 : i32, !llvm.ptr
    %c-8_i32 = arith.constant -8 : i32
    %14 = arith.andi %13, %c-8_i32 : i32
    llvm.store %14, %4 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %c8_i32 = arith.constant 8 : i32
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %16 = arith.andi %15, %c3_i32 : i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    %18 = arith.select %17, %c4_i32, %c8_i32 : i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %20 = arith.addi %18, %19 : i32
    %21 = arith.cmpi ult, %14, %20 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_5 : i32
    cf.cond_br %23, ^bb4, ^bb5
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // pred: ^bb7
    %c1048760_i32 = arith.constant 1048760 : i32
    %c46_i32 = arith.constant 46 : i32
    %c1048808_i32 = arith.constant 1048808 : i32
    call @f45(%arg0, %c1048760_i32, %c46_i32, %c1048808_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c1048697_i32 = arith.constant 1048697 : i32
    %c46_i32_6 = arith.constant 46 : i32
    %c1048744_i32 = arith.constant 1048744 : i32
    call @f45(%arg0, %c1048697_i32, %c46_i32_6, %c1048744_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_7 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_7) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %25 = arith.cmpi eq, %24, %c0_i32_8 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_9 : i32
    cf.cond_br %27, ^bb6, ^bb7
  ^bb6:  // 2 preds: ^bb5, ^bb8
    %28 = llvm.load %0 : !llvm.ptr -> i32
    call @f19(%arg0, %28) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb7:  // pred: ^bb5
    %29 = llvm.load %4 : !llvm.ptr -> i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %c39_i32 = arith.constant 39 : i32
    %31 = arith.addi %30, %c39_i32 : i32
    %32 = arith.cmpi ugt, %29, %31 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_10 : i32
    cf.cond_br %34, ^bb3, ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb6
  }
  func.func @f27(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %14 = arith.addi %13, %c-4_i32 : i32
    llvm.store %14, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %17 = llvm.getelementptr %12[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %18, %5 : i32, !llvm.ptr
    %c-8_i32 = arith.constant -8 : i32
    %19 = arith.andi %18, %c-8_i32 : i32
    llvm.store %19, %6 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %c8_i32 = arith.constant 8 : i32
    %20 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %21 = arith.andi %20, %c3_i32 : i32
    llvm.store %21, %7 : i32, !llvm.ptr
    %c0_i32_9 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_9 : i32
    %23 = arith.select %22, %c4_i32, %c8_i32 : i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %25 = arith.addi %23, %24 : i32
    %26 = arith.cmpi ult, %19, %25 : i32
    %27 = arith.extui %26 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_10 : i32
    cf.cond_br %28, ^bb7, ^bb8
  ^bb2(%29: i32):  // 10 preds: ^bb3, ^bb12, ^bb16, ^bb23, ^bb25, ^bb27, ^bb34, ^bb35, ^bb37, ^bb41
    return %29 : i32
  ^bb3:  // pred: ^bb24
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %32 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %33 = arith.andi %32, %c1_i32_11 : i32
    %34 = arith.ori %31, %33 : i32
    %c2_i32 = arith.constant 2 : i32
    %35 = arith.ori %34, %c2_i32 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %36 = arith.extui %30 : i32 to i64
    %37 = arith.addi %36, %c0_i64_12 : i64
    %38 = llvm.getelementptr %12[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    %39 = llvm.load %8 : !llvm.ptr -> i32
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %3 : i32, !llvm.ptr
    %42 = llvm.load %7 : !llvm.ptr -> i32
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %44 = arith.subi %42, %43 : i32
    llvm.store %44, %1 : i32, !llvm.ptr
    %c1_i32_13 = arith.constant 1 : i32
    %45 = arith.ori %44, %c1_i32_13 : i32
    %c4_i64 = arith.constant 4 : i64
    %46 = arith.extui %41 : i32 to i64
    %47 = arith.addi %46, %c4_i64 : i64
    %48 = llvm.getelementptr %12[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c1049704_i64 = arith.constant 1049704 : i64
    %50 = arith.extui %c0_i32_14 : i32 to i64
    %51 = arith.addi %50, %c1049704_i64 : i64
    %52 = llvm.getelementptr %12[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c1049712_i64 = arith.constant 1049712 : i64
    %54 = arith.extui %c0_i32_15 : i32 to i64
    %55 = arith.addi %54, %c1049712_i64 : i64
    %56 = llvm.getelementptr %12[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%57 : i32)
  ^bb4:  // pred: ^bb44
    %c1048760_i32 = arith.constant 1048760 : i32
    %c46_i32 = arith.constant 46 : i32
    %c1048808_i32 = arith.constant 1048808 : i32
    call @f45(%arg0, %c1048760_i32, %c46_i32, %c1048808_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb13
    %c1048697_i32 = arith.constant 1048697 : i32
    %c46_i32_16 = arith.constant 46 : i32
    %c1048744_i32 = arith.constant 1048744 : i32
    call @f45(%arg0, %c1048697_i32, %c46_i32_16, %c1048744_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_17 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_17) : (i32) -> ()
    llvm.unreachable
  ^bb6:  // pred: ^bb10
    %c1048760_i32_18 = arith.constant 1048760 : i32
    %c46_i32_19 = arith.constant 46 : i32
    %c1048808_i32_20 = arith.constant 1048808 : i32
    call @f45(%arg0, %c1048760_i32_18, %c46_i32_19, %c1048808_i32_20) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_21 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_21) : (i32) -> ()
    llvm.unreachable
  ^bb7:  // pred: ^bb1
    %c1048697_i32_22 = arith.constant 1048697 : i32
    %c46_i32_23 = arith.constant 46 : i32
    %c1048744_i32_24 = arith.constant 1048744 : i32
    call @f45(%arg0, %c1048697_i32_22, %c46_i32_23, %c1048744_i32_24) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_25 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_25) : (i32) -> ()
    llvm.unreachable
  ^bb8:  // pred: ^bb1
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %c39_i32 = arith.constant 39 : i32
    %59 = arith.addi %58, %c39_i32 : i32
    llvm.store %59, %8 : i32, !llvm.ptr
    %60 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %61 = arith.cmpi eq, %60, %c0_i32_26 : i32
    %62 = arith.extui %61 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %63 = arith.cmpi ne, %62, %c0_i32_27 : i32
    cf.cond_br %63, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb11
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c9_i32_28 = arith.constant 9 : i32
    %65 = arith.cmpi ult, %64, %c9_i32_28 : i32
    %66 = arith.extui %65 : i1 to i32
    %c0_i32_29 = arith.constant 0 : i32
    %67 = arith.cmpi ne, %66, %c0_i32_29 : i32
    cf.cond_br %67, ^bb14, ^bb15
  ^bb10:  // pred: ^bb8
    %68 = llvm.load %6 : !llvm.ptr -> i32
    %69 = llvm.load %8 : !llvm.ptr -> i32
    %70 = arith.cmpi ugt, %68, %69 : i32
    %71 = arith.extui %70 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_30 : i32
    cf.cond_br %72, ^bb6, ^bb11
  ^bb11:  // pred: ^bb10
    cf.br ^bb9
  ^bb12:  // 3 preds: ^bb14, ^bb18, ^bb43
    %73 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%73 : i32)
  ^bb13:  // pred: ^bb15
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %75 = llvm.load %0 : !llvm.ptr -> i32
    %76 = llvm.load %1 : !llvm.ptr -> i32
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %80 = arith.cmpi ult, %78, %79 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_31 : i32
    %83 = arith.select %82, %76, %77 : i32
    %84 = call @f54(%arg0, %74, %75, %83) : (!llvm.ptr, i32, i32, i32) -> i32
    %85 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c0_i64_32 : i64
    %88 = llvm.getelementptr %12[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load volatile %88 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %89, %3 : i32, !llvm.ptr
    %c-8_i32_33 = arith.constant -8 : i32
    %90 = arith.andi %89, %c-8_i32_33 : i32
    llvm.store %90, %7 : i32, !llvm.ptr
    %c4_i32_34 = arith.constant 4 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %91 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_36 = arith.constant 3 : i32
    %92 = arith.andi %91, %c3_i32_36 : i32
    llvm.store %92, %3 : i32, !llvm.ptr
    %c0_i32_37 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_37 : i32
    %94 = arith.select %93, %c4_i32_34, %c8_i32_35 : i32
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %96 = arith.addi %94, %95 : i32
    %97 = arith.cmpi ult, %90, %96 : i32
    %98 = arith.extui %97 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %99 = arith.cmpi ne, %98, %c0_i32_38 : i32
    cf.cond_br %99, ^bb5, ^bb42
  ^bb14:  // pred: ^bb9
    %c0_i32_39 = arith.constant 0 : i32
    llvm.store %c0_i32_39, %2 : i32, !llvm.ptr
    %100 = llvm.load %3 : !llvm.ptr -> i32
    %c-65588_i32 = arith.constant -65588 : i32
    %101 = arith.cmpi ugt, %100, %c-65588_i32 : i32
    %102 = arith.extui %101 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %102, %c0_i32_40 : i32
    cf.cond_br %103, ^bb12, ^bb17
  ^bb15:  // pred: ^bb9
    %104 = llvm.load %2 : !llvm.ptr -> i32
    %105 = llvm.load %3 : !llvm.ptr -> i32
    %106 = call @f21(%arg0, %104, %105) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %106, %2 : i32, !llvm.ptr
    %c0_i32_41 = arith.constant 0 : i32
    %107 = arith.cmpi ne, %106, %c0_i32_41 : i32
    cf.cond_br %107, ^bb13, ^bb16
  ^bb16:  // pred: ^bb15
    %c0_i32_42 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_42 : i32)
  ^bb17:  // pred: ^bb14
    %c16_i32 = arith.constant 16 : i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c11_i32 = arith.constant 11 : i32
    %109 = arith.addi %108, %c11_i32 : i32
    %c-8_i32_43 = arith.constant -8 : i32
    %110 = arith.andi %109, %c-8_i32_43 : i32
    %111 = llvm.load %3 : !llvm.ptr -> i32
    %c11_i32_44 = arith.constant 11 : i32
    %112 = arith.cmpi ult, %111, %c11_i32_44 : i32
    %113 = arith.extui %112 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %114 = arith.cmpi ne, %113, %c0_i32_45 : i32
    %115 = arith.select %114, %c16_i32, %110 : i32
    llvm.store %115, %1 : i32, !llvm.ptr
    %116 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_46 = arith.constant 0 : i32
    %117 = arith.cmpi ne, %116, %c0_i32_46 : i32
    cf.cond_br %117, ^bb19, ^bb20
  ^bb18:  // 7 preds: ^bb20, ^bb21, ^bb22, ^bb26, ^bb31, ^bb32, ^bb40
    %118 = llvm.load %3 : !llvm.ptr -> i32
    %119 = call @f20(%arg0, %118) : (!llvm.ptr, i32) -> i32
    llvm.store %119, %1 : i32, !llvm.ptr
    %c0_i32_47 = arith.constant 0 : i32
    %120 = arith.cmpi eq, %119, %c0_i32_47 : i32
    %121 = arith.extui %120 : i1 to i32
    %c0_i32_48 = arith.constant 0 : i32
    %122 = arith.cmpi ne, %121, %c0_i32_48 : i32
    cf.cond_br %122, ^bb12, ^bb41
  ^bb19:  // pred: ^bb17
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %c-8_i32_49 = arith.constant -8 : i32
    %124 = arith.addi %123, %c-8_i32_49 : i32
    llvm.store %124, %8 : i32, !llvm.ptr
    %125 = llvm.load %6 : !llvm.ptr -> i32
    %126 = arith.addi %124, %125 : i32
    llvm.store %126, %7 : i32, !llvm.ptr
    %127 = llvm.load %6 : !llvm.ptr -> i32
    %128 = llvm.load %1 : !llvm.ptr -> i32
    %129 = arith.cmpi uge, %127, %128 : i32
    %130 = arith.extui %129 : i1 to i32
    %c0_i32_50 = arith.constant 0 : i32
    %131 = arith.cmpi ne, %130, %c0_i32_50 : i32
    cf.cond_br %131, ^bb28, ^bb29
  ^bb20:  // pred: ^bb17
    %132 = llvm.load %1 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %133 = arith.cmpi ult, %132, %c256_i32 : i32
    %134 = arith.extui %133 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %135 = arith.cmpi ne, %134, %c0_i32_51 : i32
    cf.cond_br %135, ^bb18, ^bb21
  ^bb21:  // pred: ^bb20
    %136 = llvm.load %6 : !llvm.ptr -> i32
    %137 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_52 = arith.constant 4 : i32
    %138 = arith.ori %137, %c4_i32_52 : i32
    %139 = arith.cmpi ult, %136, %138 : i32
    %140 = arith.extui %139 : i1 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %141 = arith.cmpi ne, %140, %c0_i32_53 : i32
    cf.cond_br %141, ^bb18, ^bb22
  ^bb22:  // pred: ^bb21
    %142 = llvm.load %6 : !llvm.ptr -> i32
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %144 = arith.subi %142, %143 : i32
    %c131073_i32 = arith.constant 131073 : i32
    %145 = arith.cmpi uge, %144, %c131073_i32 : i32
    %146 = arith.extui %145 : i1 to i32
    %c0_i32_54 = arith.constant 0 : i32
    %147 = arith.cmpi ne, %146, %c0_i32_54 : i32
    cf.cond_br %147, ^bb18, ^bb23
  ^bb23:  // pred: ^bb22
    %148 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%148 : i32)
  ^bb24:  // pred: ^bb29
    %c0_i32_55 = arith.constant 0 : i32
    %c1049704_i64_56 = arith.constant 1049704 : i64
    %149 = arith.extui %c0_i32_55 : i32 to i64
    %150 = arith.addi %149, %c1049704_i64_56 : i64
    %151 = llvm.getelementptr %12[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    %153 = llvm.load %6 : !llvm.ptr -> i32
    %154 = arith.addi %152, %153 : i32
    llvm.store %154, %7 : i32, !llvm.ptr
    %155 = llvm.load %1 : !llvm.ptr -> i32
    %156 = arith.cmpi ugt, %154, %155 : i32
    %157 = arith.extui %156 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %158 = arith.cmpi ne, %157, %c0_i32_57 : i32
    cf.cond_br %158, ^bb3, ^bb40
  ^bb25:  // pred: ^bb28
    %159 = llvm.load %4 : !llvm.ptr -> i32
    %160 = llvm.load %1 : !llvm.ptr -> i32
    %161 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_58 = arith.constant 1 : i32
    %162 = arith.andi %161, %c1_i32_58 : i32
    %163 = arith.ori %160, %162 : i32
    %c2_i32_59 = arith.constant 2 : i32
    %164 = arith.ori %163, %c2_i32_59 : i32
    %c0_i64_60 = arith.constant 0 : i64
    %165 = arith.extui %159 : i32 to i64
    %166 = arith.addi %165, %c0_i64_60 : i64
    %167 = llvm.getelementptr %12[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %164, %167 {alignment = 1 : i64} : i32, !llvm.ptr
    %168 = llvm.load %8 : !llvm.ptr -> i32
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %170 = arith.addi %168, %169 : i32
    llvm.store %170, %1 : i32, !llvm.ptr
    %171 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_61 = arith.constant 3 : i32
    %172 = arith.ori %171, %c3_i32_61 : i32
    %c4_i64_62 = arith.constant 4 : i64
    %173 = arith.extui %170 : i32 to i64
    %174 = arith.addi %173, %c4_i64_62 : i64
    %175 = llvm.getelementptr %12[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %172, %175 {alignment = 1 : i64} : i32, !llvm.ptr
    %176 = llvm.load %7 : !llvm.ptr -> i32
    %177 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i64_63 = arith.constant 4 : i64
    %178 = arith.extui %177 : i32 to i64
    %179 = arith.addi %178, %c4_i64_63 : i64
    %180 = llvm.getelementptr %12[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %181 = llvm.load volatile %180 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_64 = arith.constant 1 : i32
    %182 = arith.ori %181, %c1_i32_64 : i32
    %c4_i64_65 = arith.constant 4 : i64
    %183 = arith.extui %176 : i32 to i64
    %184 = arith.addi %183, %c4_i64_65 : i64
    %185 = llvm.getelementptr %12[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %182, %185 {alignment = 1 : i64} : i32, !llvm.ptr
    %186 = llvm.load %1 : !llvm.ptr -> i32
    %187 = llvm.load %3 : !llvm.ptr -> i32
    call @f17(%arg0, %186, %187) : (!llvm.ptr, i32, i32) -> ()
    %188 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%188 : i32)
  ^bb26:  // pred: ^bb30
    %c0_i32_66 = arith.constant 0 : i32
    %c1049700_i64 = arith.constant 1049700 : i64
    %189 = arith.extui %c0_i32_66 : i32 to i64
    %190 = arith.addi %189, %c1049700_i64 : i64
    %191 = llvm.getelementptr %12[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %192 = llvm.load volatile %191 {alignment = 1 : i64} : !llvm.ptr -> i32
    %193 = llvm.load %6 : !llvm.ptr -> i32
    %194 = arith.addi %192, %193 : i32
    llvm.store %194, %7 : i32, !llvm.ptr
    %195 = llvm.load %1 : !llvm.ptr -> i32
    %196 = arith.cmpi ult, %194, %195 : i32
    %197 = arith.extui %196 : i1 to i32
    %c0_i32_67 = arith.constant 0 : i32
    %198 = arith.cmpi ne, %197, %c0_i32_67 : i32
    cf.cond_br %198, ^bb18, ^bb36
  ^bb27:  // pred: ^bb33
    %199 = llvm.load %4 : !llvm.ptr -> i32
    %200 = llvm.load %5 : !llvm.ptr -> i32
    %201 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_68 = arith.constant 0 : i64
    %202 = arith.extui %201 : i32 to i64
    %203 = arith.addi %202, %c0_i64_68 : i64
    %204 = llvm.getelementptr %12[%203] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %205 = llvm.load volatile %204 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_69 = arith.constant 1 : i32
    %206 = arith.andi %205, %c1_i32_69 : i32
    %207 = arith.ori %200, %206 : i32
    %c2_i32_70 = arith.constant 2 : i32
    %208 = arith.ori %207, %c2_i32_70 : i32
    %c0_i64_71 = arith.constant 0 : i64
    %209 = arith.extui %199 : i32 to i64
    %210 = arith.addi %209, %c0_i64_71 : i64
    %211 = llvm.getelementptr %12[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %208, %211 {alignment = 1 : i64} : i32, !llvm.ptr
    %212 = llvm.load %8 : !llvm.ptr -> i32
    %213 = llvm.load %5 : !llvm.ptr -> i32
    %214 = arith.addi %212, %213 : i32
    llvm.store %214, %1 : i32, !llvm.ptr
    %215 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_72 = arith.constant 4 : i64
    %216 = arith.extui %215 : i32 to i64
    %217 = arith.addi %216, %c4_i64_72 : i64
    %218 = llvm.getelementptr %12[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %219 = llvm.load volatile %218 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_73 = arith.constant 1 : i32
    %220 = arith.ori %219, %c1_i32_73 : i32
    %c4_i64_74 = arith.constant 4 : i64
    %221 = arith.extui %214 : i32 to i64
    %222 = arith.addi %221, %c4_i64_74 : i64
    %223 = llvm.getelementptr %12[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %220, %223 {alignment = 1 : i64} : i32, !llvm.ptr
    %224 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%224 : i32)
  ^bb28:  // pred: ^bb19
    %225 = llvm.load %6 : !llvm.ptr -> i32
    %226 = llvm.load %1 : !llvm.ptr -> i32
    %227 = arith.subi %225, %226 : i32
    llvm.store %227, %3 : i32, !llvm.ptr
    %c15_i32 = arith.constant 15 : i32
    %228 = arith.cmpi ugt, %227, %c15_i32 : i32
    %229 = arith.extui %228 : i1 to i32
    %c0_i32_75 = arith.constant 0 : i32
    %230 = arith.cmpi ne, %229, %c0_i32_75 : i32
    cf.cond_br %230, ^bb25, ^bb35
  ^bb29:  // pred: ^bb19
    %231 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_76 = arith.constant 0 : i32
    %c1049712_i64_77 = arith.constant 1049712 : i64
    %232 = arith.extui %c0_i32_76 : i32 to i64
    %233 = arith.addi %232, %c1049712_i64_77 : i64
    %234 = llvm.getelementptr %12[%233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %235 = llvm.load volatile %234 {alignment = 1 : i64} : !llvm.ptr -> i32
    %236 = arith.cmpi eq, %231, %235 : i32
    %237 = arith.extui %236 : i1 to i32
    %c0_i32_78 = arith.constant 0 : i32
    %238 = arith.cmpi ne, %237, %c0_i32_78 : i32
    cf.cond_br %238, ^bb24, ^bb30
  ^bb30:  // pred: ^bb29
    %239 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_79 = arith.constant 0 : i32
    %c1049708_i64 = arith.constant 1049708 : i64
    %240 = arith.extui %c0_i32_79 : i32 to i64
    %241 = arith.addi %240, %c1049708_i64 : i64
    %242 = llvm.getelementptr %12[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %243 = llvm.load volatile %242 {alignment = 1 : i64} : !llvm.ptr -> i32
    %244 = arith.cmpi eq, %239, %243 : i32
    %245 = arith.extui %244 : i1 to i32
    %c0_i32_80 = arith.constant 0 : i32
    %246 = arith.cmpi ne, %245, %c0_i32_80 : i32
    cf.cond_br %246, ^bb26, ^bb31
  ^bb31:  // pred: ^bb30
    %247 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i64_81 = arith.constant 4 : i64
    %248 = arith.extui %247 : i32 to i64
    %249 = arith.addi %248, %c4_i64_81 : i64
    %250 = llvm.getelementptr %12[%249] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %251 = llvm.load volatile %250 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %251, %5 : i32, !llvm.ptr
    %c2_i32_82 = arith.constant 2 : i32
    %252 = arith.andi %251, %c2_i32_82 : i32
    %c0_i32_83 = arith.constant 0 : i32
    %253 = arith.cmpi ne, %252, %c0_i32_83 : i32
    cf.cond_br %253, ^bb18, ^bb32
  ^bb32:  // pred: ^bb31
    %254 = llvm.load %5 : !llvm.ptr -> i32
    %c-8_i32_84 = arith.constant -8 : i32
    %255 = arith.andi %254, %c-8_i32_84 : i32
    llvm.store %255, %9 : i32, !llvm.ptr
    %256 = llvm.load %6 : !llvm.ptr -> i32
    %257 = arith.addi %255, %256 : i32
    llvm.store %257, %5 : i32, !llvm.ptr
    %258 = llvm.load %1 : !llvm.ptr -> i32
    %259 = arith.cmpi ult, %257, %258 : i32
    %260 = arith.extui %259 : i1 to i32
    %c0_i32_85 = arith.constant 0 : i32
    %261 = arith.cmpi ne, %260, %c0_i32_85 : i32
    cf.cond_br %261, ^bb18, ^bb33
  ^bb33:  // pred: ^bb32
    %262 = llvm.load %7 : !llvm.ptr -> i32
    %263 = llvm.load %9 : !llvm.ptr -> i32
    call @f16(%arg0, %262, %263) : (!llvm.ptr, i32, i32) -> ()
    %264 = llvm.load %5 : !llvm.ptr -> i32
    %265 = llvm.load %1 : !llvm.ptr -> i32
    %266 = arith.subi %264, %265 : i32
    llvm.store %266, %3 : i32, !llvm.ptr
    %c16_i32_86 = arith.constant 16 : i32
    %267 = arith.cmpi ult, %266, %c16_i32_86 : i32
    %268 = arith.extui %267 : i1 to i32
    %c0_i32_87 = arith.constant 0 : i32
    %269 = arith.cmpi ne, %268, %c0_i32_87 : i32
    cf.cond_br %269, ^bb27, ^bb34
  ^bb34:  // pred: ^bb33
    %270 = llvm.load %4 : !llvm.ptr -> i32
    %271 = llvm.load %1 : !llvm.ptr -> i32
    %272 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_88 = arith.constant 0 : i64
    %273 = arith.extui %272 : i32 to i64
    %274 = arith.addi %273, %c0_i64_88 : i64
    %275 = llvm.getelementptr %12[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %276 = llvm.load volatile %275 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_89 = arith.constant 1 : i32
    %277 = arith.andi %276, %c1_i32_89 : i32
    %278 = arith.ori %271, %277 : i32
    %c2_i32_90 = arith.constant 2 : i32
    %279 = arith.ori %278, %c2_i32_90 : i32
    %c0_i64_91 = arith.constant 0 : i64
    %280 = arith.extui %270 : i32 to i64
    %281 = arith.addi %280, %c0_i64_91 : i64
    %282 = llvm.getelementptr %12[%281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %279, %282 {alignment = 1 : i64} : i32, !llvm.ptr
    %283 = llvm.load %8 : !llvm.ptr -> i32
    %284 = llvm.load %1 : !llvm.ptr -> i32
    %285 = arith.addi %283, %284 : i32
    llvm.store %285, %1 : i32, !llvm.ptr
    %286 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32_92 = arith.constant 3 : i32
    %287 = arith.ori %286, %c3_i32_92 : i32
    %c4_i64_93 = arith.constant 4 : i64
    %288 = arith.extui %285 : i32 to i64
    %289 = arith.addi %288, %c4_i64_93 : i64
    %290 = llvm.getelementptr %12[%289] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %287, %290 {alignment = 1 : i64} : i32, !llvm.ptr
    %291 = llvm.load %8 : !llvm.ptr -> i32
    %292 = llvm.load %5 : !llvm.ptr -> i32
    %293 = arith.addi %291, %292 : i32
    llvm.store %293, %2 : i32, !llvm.ptr
    %294 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_94 = arith.constant 4 : i64
    %295 = arith.extui %294 : i32 to i64
    %296 = arith.addi %295, %c4_i64_94 : i64
    %297 = llvm.getelementptr %12[%296] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %298 = llvm.load volatile %297 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_95 = arith.constant 1 : i32
    %299 = arith.ori %298, %c1_i32_95 : i32
    %c4_i64_96 = arith.constant 4 : i64
    %300 = arith.extui %293 : i32 to i64
    %301 = arith.addi %300, %c4_i64_96 : i64
    %302 = llvm.getelementptr %12[%301] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %299, %302 {alignment = 1 : i64} : i32, !llvm.ptr
    %303 = llvm.load %1 : !llvm.ptr -> i32
    %304 = llvm.load %3 : !llvm.ptr -> i32
    call @f17(%arg0, %303, %304) : (!llvm.ptr, i32, i32) -> ()
    %305 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%305 : i32)
  ^bb35:  // pred: ^bb28
    %306 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%306 : i32)
  ^bb36:  // pred: ^bb26
    %307 = llvm.load %7 : !llvm.ptr -> i32
    %308 = llvm.load %1 : !llvm.ptr -> i32
    %309 = arith.subi %307, %308 : i32
    llvm.store %309, %3 : i32, !llvm.ptr
    %c15_i32_97 = arith.constant 15 : i32
    %310 = arith.cmpi ugt, %309, %c15_i32_97 : i32
    %311 = arith.extui %310 : i1 to i32
    %c0_i32_98 = arith.constant 0 : i32
    %312 = arith.cmpi ne, %311, %c0_i32_98 : i32
    cf.cond_br %312, ^bb38, ^bb39
  ^bb37:  // 2 preds: ^bb38, ^bb39
    %c0_i32_99 = arith.constant 0 : i32
    %313 = llvm.load %1 : !llvm.ptr -> i32
    %c1049708_i64_100 = arith.constant 1049708 : i64
    %314 = arith.extui %c0_i32_99 : i32 to i64
    %315 = arith.addi %314, %c1049708_i64_100 : i64
    %316 = llvm.getelementptr %12[%315] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %313, %316 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_101 = arith.constant 0 : i32
    %317 = llvm.load %3 : !llvm.ptr -> i32
    %c1049700_i64_102 = arith.constant 1049700 : i64
    %318 = arith.extui %c0_i32_101 : i32 to i64
    %319 = arith.addi %318, %c1049700_i64_102 : i64
    %320 = llvm.getelementptr %12[%319] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %317, %320 {alignment = 1 : i64} : i32, !llvm.ptr
    %321 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%321 : i32)
  ^bb38:  // pred: ^bb36
    %322 = llvm.load %4 : !llvm.ptr -> i32
    %323 = llvm.load %1 : !llvm.ptr -> i32
    %324 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_103 = arith.constant 1 : i32
    %325 = arith.andi %324, %c1_i32_103 : i32
    %326 = arith.ori %323, %325 : i32
    %c2_i32_104 = arith.constant 2 : i32
    %327 = arith.ori %326, %c2_i32_104 : i32
    %c0_i64_105 = arith.constant 0 : i64
    %328 = arith.extui %322 : i32 to i64
    %329 = arith.addi %328, %c0_i64_105 : i64
    %330 = llvm.getelementptr %12[%329] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %327, %330 {alignment = 1 : i64} : i32, !llvm.ptr
    %331 = llvm.load %8 : !llvm.ptr -> i32
    %332 = llvm.load %1 : !llvm.ptr -> i32
    %333 = arith.addi %331, %332 : i32
    llvm.store %333, %1 : i32, !llvm.ptr
    %334 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_106 = arith.constant 1 : i32
    %335 = arith.ori %334, %c1_i32_106 : i32
    %c4_i64_107 = arith.constant 4 : i64
    %336 = arith.extui %333 : i32 to i64
    %337 = arith.addi %336, %c4_i64_107 : i64
    %338 = llvm.getelementptr %12[%337] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %335, %338 {alignment = 1 : i64} : i32, !llvm.ptr
    %339 = llvm.load %8 : !llvm.ptr -> i32
    %340 = llvm.load %7 : !llvm.ptr -> i32
    %341 = arith.addi %339, %340 : i32
    llvm.store %341, %2 : i32, !llvm.ptr
    %342 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_108 = arith.constant 0 : i64
    %343 = arith.extui %341 : i32 to i64
    %344 = arith.addi %343, %c0_i64_108 : i64
    %345 = llvm.getelementptr %12[%344] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %342, %345 {alignment = 1 : i64} : i32, !llvm.ptr
    %346 = llvm.load %2 : !llvm.ptr -> i32
    %347 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_109 = arith.constant 4 : i64
    %348 = arith.extui %347 : i32 to i64
    %349 = arith.addi %348, %c4_i64_109 : i64
    %350 = llvm.getelementptr %12[%349] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %351 = llvm.load volatile %350 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %352 = arith.andi %351, %c-2_i32 : i32
    %c4_i64_110 = arith.constant 4 : i64
    %353 = arith.extui %346 : i32 to i64
    %354 = arith.addi %353, %c4_i64_110 : i64
    %355 = llvm.getelementptr %12[%354] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %352, %355 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb37
  ^bb39:  // pred: ^bb36
    %356 = llvm.load %4 : !llvm.ptr -> i32
    %357 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_111 = arith.constant 1 : i32
    %358 = arith.andi %357, %c1_i32_111 : i32
    %359 = llvm.load %7 : !llvm.ptr -> i32
    %360 = arith.ori %358, %359 : i32
    %c2_i32_112 = arith.constant 2 : i32
    %361 = arith.ori %360, %c2_i32_112 : i32
    %c0_i64_113 = arith.constant 0 : i64
    %362 = arith.extui %356 : i32 to i64
    %363 = arith.addi %362, %c0_i64_113 : i64
    %364 = llvm.getelementptr %12[%363] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %361, %364 {alignment = 1 : i64} : i32, !llvm.ptr
    %365 = llvm.load %8 : !llvm.ptr -> i32
    %366 = llvm.load %7 : !llvm.ptr -> i32
    %367 = arith.addi %365, %366 : i32
    llvm.store %367, %1 : i32, !llvm.ptr
    %368 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_114 = arith.constant 4 : i64
    %369 = arith.extui %368 : i32 to i64
    %370 = arith.addi %369, %c4_i64_114 : i64
    %371 = llvm.getelementptr %12[%370] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %372 = llvm.load volatile %371 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_115 = arith.constant 1 : i32
    %373 = arith.ori %372, %c1_i32_115 : i32
    %c4_i64_116 = arith.constant 4 : i64
    %374 = arith.extui %367 : i32 to i64
    %375 = arith.addi %374, %c4_i64_116 : i64
    %376 = llvm.getelementptr %12[%375] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %373, %376 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_117 = arith.constant 0 : i32
    llvm.store %c0_i32_117, %3 : i32, !llvm.ptr
    %c0_i32_118 = arith.constant 0 : i32
    llvm.store %c0_i32_118, %1 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb40:  // pred: ^bb24
    cf.br ^bb18
  ^bb41:  // pred: ^bb18
    %377 = llvm.load %1 : !llvm.ptr -> i32
    %378 = llvm.load %0 : !llvm.ptr -> i32
    %c-4_i32_119 = arith.constant -4 : i32
    %c-8_i32_120 = arith.constant -8 : i32
    %379 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_121 = arith.constant 0 : i64
    %380 = arith.extui %379 : i32 to i64
    %381 = arith.addi %380, %c0_i64_121 : i64
    %382 = llvm.getelementptr %12[%381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %383 = llvm.load volatile %382 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %383, %2 : i32, !llvm.ptr
    %c3_i32_122 = arith.constant 3 : i32
    %384 = arith.andi %383, %c3_i32_122 : i32
    %c0_i32_123 = arith.constant 0 : i32
    %385 = arith.cmpi ne, %384, %c0_i32_123 : i32
    %386 = arith.select %385, %c-4_i32_119, %c-8_i32_120 : i32
    %387 = llvm.load %2 : !llvm.ptr -> i32
    %c-8_i32_124 = arith.constant -8 : i32
    %388 = arith.andi %387, %c-8_i32_124 : i32
    %389 = arith.addi %386, %388 : i32
    llvm.store %389, %2 : i32, !llvm.ptr
    %390 = llvm.load %3 : !llvm.ptr -> i32
    %391 = llvm.load %2 : !llvm.ptr -> i32
    %392 = llvm.load %3 : !llvm.ptr -> i32
    %393 = arith.cmpi ult, %391, %392 : i32
    %394 = arith.extui %393 : i1 to i32
    %c0_i32_125 = arith.constant 0 : i32
    %395 = arith.cmpi ne, %394, %c0_i32_125 : i32
    %396 = arith.select %395, %389, %390 : i32
    %397 = call @f54(%arg0, %377, %378, %396) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %397, %1 : i32, !llvm.ptr
    %398 = llvm.load %0 : !llvm.ptr -> i32
    call @f19(%arg0, %398) : (!llvm.ptr, i32) -> ()
    %399 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%399 : i32)
  ^bb42:  // pred: ^bb13
    %400 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_126 = arith.constant 0 : i32
    %401 = arith.cmpi eq, %400, %c0_i32_126 : i32
    %402 = arith.extui %401 : i1 to i32
    %c0_i32_127 = arith.constant 0 : i32
    %403 = arith.cmpi ne, %402, %c0_i32_127 : i32
    cf.cond_br %403, ^bb43, ^bb44
  ^bb43:  // 2 preds: ^bb42, ^bb45
    %404 = llvm.load %0 : !llvm.ptr -> i32
    call @f19(%arg0, %404) : (!llvm.ptr, i32) -> ()
    cf.br ^bb12
  ^bb44:  // pred: ^bb42
    %405 = llvm.load %7 : !llvm.ptr -> i32
    %406 = llvm.load %8 : !llvm.ptr -> i32
    %407 = arith.cmpi ugt, %405, %406 : i32
    %408 = arith.extui %407 : i1 to i32
    %c0_i32_128 = arith.constant 0 : i32
    %409 = arith.cmpi ne, %408, %c0_i32_128 : i32
    cf.cond_br %409, ^bb4, ^bb45
  ^bb45:  // pred: ^bb44
    cf.br ^bb43
  }
  func.func @f28(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_2 = arith.constant 0 : i32
    llvm.store %c0_i32_2, %1 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %c1049280_i64 = arith.constant 1049280 : i64
    %6 = arith.extui %c0_i32_4 : i32 to i64
    %7 = arith.addi %6, %c1049280_i64 : i64
    %8 = llvm.getelementptr %5[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %2 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %10 = arith.addi %9, %c1_i32_5 : i32
    %c1049280_i64_6 = arith.constant 1049280 : i64
    %11 = arith.extui %c0_i32_3 : i32 to i64
    %12 = arith.addi %11, %c1049280_i64_6 : i64
    %13 = llvm.getelementptr %5[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i32, !llvm.ptr
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %15 = arith.cmpi slt, %14, %c0_i32_7 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_8 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2(%18: i32):  // pred: ^bb3
    return %18 : i32
  ^bb3:  // 3 preds: ^bb1, ^bb4, ^bb5
    %19 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%19 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_9 = arith.constant 1 : i32
    llvm.store %c1_i32_9, %1 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c1049740_i64 = arith.constant 1049740 : i64
    %20 = arith.extui %c0_i32_10 : i32 to i64
    %21 = arith.addi %20, %c1049740_i64 : i64
    %22 = llvm.getelementptr %5[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i8
    %24 = arith.extui %23 : i8 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_11 : i32
    cf.cond_br %25, ^bb3, ^bb5
  ^bb5:  // pred: ^bb4
    %c0_i32_12 = arith.constant 0 : i32
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c1049740_i64_13 = arith.constant 1049740 : i64
    %27 = arith.extui %c0_i32_12 : i32 to i64
    %28 = arith.addi %27, %c1049740_i64_13 : i64
    %29 = llvm.getelementptr %5[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = arith.trunci %26 : i32 to i8
    llvm.store volatile %30, %29 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %c1049736_i64 = arith.constant 1049736 : i64
    %31 = arith.extui %c0_i32_15 : i32 to i64
    %32 = arith.addi %31, %c1049736_i64 : i64
    %33 = llvm.getelementptr %5[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %35 = arith.addi %34, %c1_i32_16 : i32
    %c1049736_i64_17 = arith.constant 1049736 : i64
    %36 = arith.extui %c0_i32_14 : i32 to i64
    %37 = arith.addi %36, %c1049736_i64_17 : i64
    %38 = llvm.getelementptr %5[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f29(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %1 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_2 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64_2 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %14, %2 : i64, !llvm.ptr
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %17 = arith.extui %15 : i32 to i64
    %18 = arith.addi %17, %c12_i64 : i64
    %19 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %16, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %21 = llvm.load %2 : !llvm.ptr -> i64
    %c4_i64 = arith.constant 4 : i64
    %22 = arith.extui %20 : i32 to i64
    %23 = arith.addi %22, %c4_i64 : i64
    %24 = llvm.getelementptr %7[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %24 {alignment = 1 : i64} : i64, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %26 = arith.addi %25, %c4_i32 : i32
    call @f22(%arg0, %26) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f30(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %12 = arith.subi %11, %c64_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %18 = arith.cmpi eq, %17, %c-2147483648_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64_8 : i64
    %26 = llvm.getelementptr %10[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %27, %5 : i64, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c0_i64_9 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %33 = arith.addi %32, %c8_i32 : i32
    llvm.store %33, %3 : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_10 = arith.constant 8 : i32
    %35 = arith.addi %34, %c8_i32_10 : i32
    llvm.store %35, %1 : i32, !llvm.ptr
    %c0_i64_11 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_11 : i64
    %38 = llvm.getelementptr %10[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %40 = arith.extui %33 : i32 to i64
    %41 = arith.addi %40, %c0_i64_12 : i64
    %42 = llvm.getelementptr %10[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_14 : i64
    %46 = llvm.getelementptr %10[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %46 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %c1049261_i64 = arith.constant 1049261 : i64
    %47 = arith.extui %c0_i32_15 : i32 to i64
    %48 = arith.addi %47, %c1049261_i64 : i64
    %49 = llvm.getelementptr %10[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i8
    %51 = arith.extui %50 : i8 to i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %54 = arith.extui %52 : i32 to i64
    %55 = arith.addi %54, %c0_i64_16 : i64
    %56 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %c12_i32 = arith.constant 12 : i32
    %c4_i32 = arith.constant 4 : i32
    %57 = call @f1(%arg0, %c12_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %57, %1 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_17 : i32
    cf.cond_br %58, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %59 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c12_i64 : i64
    %62 = llvm.getelementptr %10[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %63, %3 : i32, !llvm.ptr
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %65 = arith.addi %64, %c28_i32 : i32
    %c8_i32_18 = arith.constant 8 : i32
    %66 = arith.addi %65, %c8_i32_18 : i32
    llvm.store %66, %4 : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_20 : i64
    %69 = llvm.getelementptr %10[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_19, %69 {alignment = 1 : i64} : i32, !llvm.ptr
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64_21 = arith.constant 4294967296 : i64
    %c28_i64 = arith.constant 28 : i64
    %71 = arith.extui %70 : i32 to i64
    %72 = arith.addi %71, %c28_i64 : i64
    %73 = llvm.getelementptr %10[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_21, %73 {alignment = 1 : i64} : i64, !llvm.ptr
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %75 = arith.addi %74, %c40_i32 : i32
    %c8_i32_22 = arith.constant 8 : i32
    %76 = arith.addi %75, %c8_i32_22 : i32
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_23 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_23 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %3 : i32, !llvm.ptr
    %c8_i32_24 = arith.constant 8 : i32
    %82 = arith.addi %81, %c8_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c0_i64_25 : i64
    %85 = llvm.getelementptr %10[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_26 = arith.constant 0 : i64
    %87 = arith.extui %76 : i32 to i64
    %88 = arith.addi %87, %c0_i64_26 : i64
    %89 = llvm.getelementptr %10[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %86, %89 {alignment = 1 : i64} : i64, !llvm.ptr
    %90 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_27 = arith.constant 40 : i32
    %91 = arith.addi %90, %c40_i32_27 : i32
    %c16_i32 = arith.constant 16 : i32
    %92 = arith.addi %91, %c16_i32 : i32
    %93 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_28 = arith.constant 16 : i32
    %94 = arith.addi %93, %c16_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c0_i64_29 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %99 = arith.extui %92 : i32 to i64
    %100 = arith.addi %99, %c0_i64_30 : i64
    %101 = llvm.getelementptr %10[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %98, %101 {alignment = 1 : i64} : i64, !llvm.ptr
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %103 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_31 : i64
    %106 = llvm.getelementptr %10[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c40_i64 = arith.constant 40 : i64
    %108 = arith.extui %102 : i32 to i64
    %109 = arith.addi %108, %c40_i64 : i64
    %110 = llvm.getelementptr %10[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %107, %110 {alignment = 1 : i64} : i64, !llvm.ptr
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32_32 = arith.constant 28 : i32
    %112 = arith.addi %111, %c28_i32_32 : i32
    %c1048632_i32 = arith.constant 1048632 : i32
    %113 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_33 = arith.constant 40 : i32
    %114 = arith.addi %113, %c40_i32_33 : i32
    %115 = call @f48(%arg0, %112, %c1048632_i32, %114) : (!llvm.ptr, i32, i32, i32) -> i32
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_34 = arith.constant 16 : i32
    %117 = arith.addi %116, %c16_i32_34 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %118 = arith.addi %117, %c8_i32_35 : i32
    %119 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c0_i64_36 : i64
    %122 = llvm.getelementptr %10[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %123, %3 : i32, !llvm.ptr
    %c0_i64_37 = arith.constant 0 : i64
    %124 = arith.extui %118 : i32 to i64
    %125 = arith.addi %124, %c0_i64_37 : i64
    %126 = llvm.getelementptr %10[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %123, %126 {alignment = 1 : i64} : i32, !llvm.ptr
    %127 = llvm.load %2 : !llvm.ptr -> i32
    %128 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_38 = arith.constant 28 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c28_i64_38 : i64
    %131 = llvm.getelementptr %10[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load volatile %131 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %132, %5 : i64, !llvm.ptr
    %c16_i64 = arith.constant 16 : i64
    %133 = arith.extui %127 : i32 to i64
    %134 = arith.addi %133, %c16_i64 : i64
    %135 = llvm.getelementptr %10[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %132, %135 {alignment = 1 : i64} : i64, !llvm.ptr
    %136 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_39 = arith.constant 8 : i32
    %137 = arith.addi %136, %c8_i32_39 : i32
    %138 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %139 = arith.extui %137 : i32 to i64
    %140 = arith.addi %139, %c0_i64_40 : i64
    %141 = llvm.getelementptr %10[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %141 {alignment = 1 : i64} : i32, !llvm.ptr
    %142 = llvm.load %1 : !llvm.ptr -> i32
    %143 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %144 = arith.extui %142 : i32 to i64
    %145 = arith.addi %144, %c0_i64_41 : i64
    %146 = llvm.getelementptr %10[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %146 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb3
    %147 = llvm.load %1 : !llvm.ptr -> i32
    %148 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c0_i64_42 : i64
    %151 = llvm.getelementptr %10[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_43 = arith.constant 0 : i64
    %153 = arith.extui %147 : i32 to i64
    %154 = arith.addi %153, %c0_i64_43 : i64
    %155 = llvm.getelementptr %10[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %152, %155 {alignment = 1 : i64} : i64, !llvm.ptr
    %156 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_44 = arith.constant 8 : i32
    %157 = arith.addi %156, %c8_i32_44 : i32
    %158 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_45 = arith.constant 0 : i64
    %159 = arith.extui %158 : i32 to i64
    %160 = arith.addi %159, %c0_i64_45 : i64
    %161 = llvm.getelementptr %10[%160] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %162 = llvm.load volatile %161 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_46 = arith.constant 0 : i64
    %163 = arith.extui %157 : i32 to i64
    %164 = arith.addi %163, %c0_i64_46 : i64
    %165 = llvm.getelementptr %10[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %162, %165 {alignment = 1 : i64} : i32, !llvm.ptr
    %166 = llvm.load %0 : !llvm.ptr -> i32
    %c1048908_i32 = arith.constant 1048908 : i32
    %c4_i64 = arith.constant 4 : i64
    %167 = arith.extui %166 : i32 to i64
    %168 = arith.addi %167, %c4_i64 : i64
    %169 = llvm.getelementptr %10[%168] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048908_i32, %169 {alignment = 1 : i64} : i32, !llvm.ptr
    %170 = llvm.load %0 : !llvm.ptr -> i32
    %171 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %172 = arith.extui %170 : i32 to i64
    %173 = arith.addi %172, %c0_i64_47 : i64
    %174 = llvm.getelementptr %10[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %171, %174 {alignment = 1 : i64} : i32, !llvm.ptr
    %175 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_48 = arith.constant 64 : i32
    %176 = arith.addi %175, %c64_i32_48 : i32
    llvm.store %176, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // pred: ^bb3
    %c4_i32_49 = arith.constant 4 : i32
    %c12_i32_50 = arith.constant 12 : i32
    call @f44(%arg0, %c4_i32_49, %c12_i32_50) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f31(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %12 = arith.subi %11, %c48_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %18 = arith.cmpi eq, %17, %c-2147483648_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c1048908_i32 = arith.constant 1048908 : i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %10[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048908_i32, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %29 = arith.extui %27 : i32 to i64
    %30 = arith.addi %29, %c0_i64_8 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_9 = arith.constant 48 : i32
    %33 = arith.addi %32, %c48_i32_9 : i32
    llvm.store %33, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c12_i64 : i64
    %37 = llvm.getelementptr %10[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %40 = arith.addi %39, %c12_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %41 = arith.addi %40, %c8_i32 : i32
    llvm.store %41, %4 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64_11 : i64
    %44 = llvm.getelementptr %10[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_10, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c12_i64_12 = arith.constant 12 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c12_i64_12 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %48 {alignment = 1 : i64} : i64, !llvm.ptr
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %50 = arith.addi %49, %c24_i32 : i32
    %c8_i32_13 = arith.constant 8 : i32
    %51 = arith.addi %50, %c8_i32_13 : i32
    %52 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %53 = arith.extui %52 : i32 to i64
    %54 = arith.addi %53, %c0_i64_14 : i64
    %55 = llvm.getelementptr %10[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = llvm.load volatile %55 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %56, %3 : i32, !llvm.ptr
    %c8_i32_15 = arith.constant 8 : i32
    %57 = arith.addi %56, %c8_i32_15 : i32
    %c0_i64_16 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64_16 : i64
    %60 = llvm.getelementptr %10[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %62 = arith.extui %51 : i32 to i64
    %63 = arith.addi %62, %c0_i64_17 : i64
    %64 = llvm.getelementptr %10[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %61, %64 {alignment = 1 : i64} : i64, !llvm.ptr
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_18 = arith.constant 24 : i32
    %66 = arith.addi %65, %c24_i32_18 : i32
    %c16_i32 = arith.constant 16 : i32
    %67 = arith.addi %66, %c16_i32 : i32
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_19 = arith.constant 16 : i32
    %69 = arith.addi %68, %c16_i32_19 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c0_i64_20 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %74 = arith.extui %67 : i32 to i64
    %75 = arith.addi %74, %c0_i64_21 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i64, !llvm.ptr
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c0_i64_22 : i64
    %81 = llvm.getelementptr %10[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c24_i64 = arith.constant 24 : i64
    %83 = arith.extui %77 : i32 to i64
    %84 = arith.addi %83, %c24_i64 : i64
    %85 = llvm.getelementptr %10[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %85 {alignment = 1 : i64} : i64, !llvm.ptr
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_23 = arith.constant 12 : i32
    %87 = arith.addi %86, %c12_i32_23 : i32
    %c1048632_i32 = arith.constant 1048632 : i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_24 = arith.constant 24 : i32
    %89 = arith.addi %88, %c24_i32_24 : i32
    %90 = call @f48(%arg0, %87, %c1048632_i32, %89) : (!llvm.ptr, i32, i32, i32) -> i32
    %91 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_25 = arith.constant 8 : i32
    %92 = arith.addi %91, %c8_i32_25 : i32
    %93 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c0_i64_26 : i64
    %96 = llvm.getelementptr %10[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %97, %3 : i32, !llvm.ptr
    %c0_i64_27 = arith.constant 0 : i64
    %98 = arith.extui %92 : i32 to i64
    %99 = arith.addi %98, %c0_i64_27 : i64
    %100 = llvm.getelementptr %10[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %97, %100 {alignment = 1 : i64} : i32, !llvm.ptr
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_28 = arith.constant 12 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c12_i64_28 : i64
    %105 = llvm.getelementptr %10[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %106, %5 : i64, !llvm.ptr
    %c0_i64_29 = arith.constant 0 : i64
    %107 = arith.extui %101 : i32 to i64
    %108 = arith.addi %107, %c0_i64_29 : i64
    %109 = llvm.getelementptr %10[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %106, %109 {alignment = 1 : i64} : i64, !llvm.ptr
    %110 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_30 = arith.constant 8 : i32
    %111 = arith.addi %110, %c8_i32_30 : i32
    %112 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %113 = arith.extui %111 : i32 to i64
    %114 = arith.addi %113, %c0_i64_31 : i64
    %115 = llvm.getelementptr %10[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %117 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_32 = arith.constant 0 : i64
    %118 = arith.extui %116 : i32 to i64
    %119 = arith.addi %118, %c0_i64_32 : i64
    %120 = llvm.getelementptr %10[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %117, %120 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f32(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %15 = arith.cmpi eq, %14, %c-2147483648_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_2 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb3
    return %18 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_3 = arith.constant 32 : i32
    %20 = arith.addi %19, %c32_i32_3 : i32
    llvm.store %20, %4 : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%21 : i32)
  ^bb4:  // pred: ^bb1
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32 : i32
    %c8_i32_4 = arith.constant 8 : i32
    %24 = arith.addi %23, %c8_i32_4 : i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %28 = llvm.getelementptr %7[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64_5 : i64
    %32 = llvm.getelementptr %7[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %33, %0 : i32, !llvm.ptr
    %c8_i32_6 = arith.constant 8 : i32
    %34 = arith.addi %33, %c8_i32_6 : i32
    %c0_i64_7 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_7 : i64
    %37 = llvm.getelementptr %7[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    %39 = arith.extui %24 : i32 to i64
    %40 = arith.addi %39, %c0_i64_8 : i64
    %41 = llvm.getelementptr %7[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %38, %41 {alignment = 1 : i64} : i64, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %43 = arith.addi %42, %c8_i32_9 : i32
    %c16_i32 = arith.constant 16 : i32
    %44 = arith.addi %43, %c16_i32 : i32
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_10 = arith.constant 16 : i32
    %46 = arith.addi %45, %c16_i32_10 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c0_i64_11 : i64
    %49 = llvm.getelementptr %7[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    %51 = arith.extui %44 : i32 to i64
    %52 = arith.addi %51, %c0_i64_12 : i64
    %53 = llvm.getelementptr %7[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i64, !llvm.ptr
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64_13 : i64
    %58 = llvm.getelementptr %7[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64 = arith.constant 8 : i64
    %60 = arith.extui %54 : i32 to i64
    %61 = arith.addi %60, %c8_i64 : i64
    %62 = llvm.getelementptr %7[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %62 {alignment = 1 : i64} : i64, !llvm.ptr
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c20_i64 : i64
    %66 = llvm.getelementptr %7[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i32
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c24_i64 : i64
    %71 = llvm.getelementptr %7[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i32
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_14 = arith.constant 8 : i32
    %74 = arith.addi %73, %c8_i32_14 : i32
    %75 = call @f48(%arg0, %67, %72, %74) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %75, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %76 = llvm.load %1 : !llvm.ptr -> i32
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c4_i64 : i64
    %80 = llvm.getelementptr %7[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_15 = arith.constant 8 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c8_i64_15 : i64
    %85 = llvm.getelementptr %7[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i32
    %87 = call @f52(%arg0, %76, %81, %86) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %87, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f33(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_3 = arith.constant 0 : i32
    %c1049261_i64 = arith.constant 1049261 : i64
    %7 = arith.extui %c0_i32_3 : i32 to i64
    %8 = arith.addi %7, %c1049261_i64 : i64
    %9 = llvm.getelementptr %6[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i8
    %11 = arith.extui %10 : i8 to i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c4_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %3 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %22 = call @f1(%arg0, %c8_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %22, %1 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_4 : i32
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %26 = arith.extui %24 : i32 to i64
    %27 = arith.addi %26, %c4_i64_5 : i64
    %28 = llvm.getelementptr %6[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %25, %28 {alignment = 1 : i64} : i32, !llvm.ptr
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_6 = arith.constant 0 : i64
    %31 = arith.extui %29 : i32 to i64
    %32 = arith.addi %31, %c0_i64_6 : i64
    %33 = llvm.getelementptr %6[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %30, %33 {alignment = 1 : i64} : i32, !llvm.ptr
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c1048924_i32 = arith.constant 1048924 : i32
    %c4_i64_7 = arith.constant 4 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c4_i64_7 : i64
    %37 = llvm.getelementptr %6[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048924_i32, %37 {alignment = 1 : i64} : i32, !llvm.ptr
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %40 = arith.extui %38 : i32 to i64
    %41 = arith.addi %40, %c0_i64_8 : i64
    %42 = llvm.getelementptr %6[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c4_i32_9 = arith.constant 4 : i32
    %c8_i32_10 = arith.constant 8 : i32
    call @f44(%arg0, %c4_i32_9, %c8_i32_10) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f34(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c1048924_i32 = arith.constant 1048924 : i32
    %c4_i64 = arith.constant 4 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c4_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048924_i32, %8 {alignment = 1 : i64} : i32, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %9 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f35(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1 = arith.constant 0 : i64
    %11 = arith.extui %5 : i32 to i64
    %12 = arith.addi %11, %c0_i64_1 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f36(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c4_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %16 = call @f52(%arg0, %5, %10, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f37(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    %19 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %15 : !llvm.ptr -> i64
    %21 = arith.trunci %20 : i64 to i32
    %22 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %15 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %25 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %26 = arith.subi %25, %c32_i32 : i32
    llvm.store %26, %5 : i32, !llvm.ptr
    llvm.store %26, %8 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %27 = call @f28(%arg0, %c1_i32_6) : (!llvm.ptr, i32) -> i32
    %c255_i32 = arith.constant 255 : i32
    %28 = arith.andi %27, %c255_i32 : i32
    llvm.store %28, %6 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %29 = arith.cmpi eq, %28, %c2_i32 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_7 : i32
    cf.cond_br %31, ^bb4, ^bb5
  ^bb2:  // no predecessors
    return
  ^bb3:  // 4 preds: ^bb4, ^bb5, ^bb16, ^bb34
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c0_i32_8 = arith.constant 0 : i32
    %c1049268_i64 = arith.constant 1049268 : i64
    %32 = arith.extui %c0_i32_8 : i32 to i64
    %33 = arith.addi %32, %c1049268_i64 : i64
    %34 = llvm.getelementptr %11[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %35, %6 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %36 = arith.cmpi sle, %35, %c-1_i32 : i32
    %37 = arith.extui %36 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_9 : i32
    cf.cond_br %38, ^bb3, ^bb15
  ^bb5:  // pred: ^bb1
    %39 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_10 = arith.constant 1 : i32
    %40 = arith.andi %39, %c1_i32_10 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %41 = arith.cmpi eq, %40, %c0_i32_11 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_12 : i32
    cf.cond_br %43, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %44 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %45 = arith.addi %44, %c8_i32 : i32
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c24_i64 : i64
    %50 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i32
    %52 = arith.cmpi ult, %51, %18 : i32
    cf.cond_br %52, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %53 = llvm.getelementptr inbounds %16[%51] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %54 = llvm.load %53 : !llvm.ptr -> !llvm.ptr
    %55 = llvm.ptrtoint %54 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %56 = arith.cmpi eq, %55, %c0_i64 : i64
    cf.cond_br %56, ^bb10, ^bb9
  ^bb8:  // pred: ^bb6
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %57 = llvm.getelementptr %54[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %58 = llvm.getelementptr %54[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %59 = llvm.getelementptr %54[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %60 = llvm.load %57 : !llvm.ptr -> !llvm.ptr
    %61 = llvm.load %59 : !llvm.ptr -> !llvm.ptr
    %62 = llvm.ptrtoint %60 : !llvm.ptr to i64
    %c0_i64_13 = arith.constant 0 : i64
    %63 = arith.cmpi eq, %62, %c0_i64_13 : i64
    cf.cond_br %63, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %64 = llvm.load %58 : !llvm.ptr -> i32
    %65 = arith.cmpi ne, %13, %64 : i32
    cf.cond_br %65, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_14 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_14) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %66 = llvm.call %60(%61, %45, %46) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c9_i32_15 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_15) : (i32) -> ()
    llvm.unreachable
  ^bb14:  // pred: ^bb11
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb4
    %c0_i32_16 = arith.constant 0 : i32
    %67 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_17 = arith.constant 1 : i32
    %68 = arith.addi %67, %c1_i32_17 : i32
    %c1049268_i64_18 = arith.constant 1049268 : i64
    %69 = arith.extui %c0_i32_16 : i32 to i64
    %70 = arith.addi %69, %c1049268_i64_18 : i64
    %71 = llvm.getelementptr %11[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    %c1049272_i64 = arith.constant 1049272 : i64
    %72 = arith.extui %c0_i32_19 : i32 to i64
    %73 = arith.addi %72, %c1049272_i64 : i64
    %74 = llvm.getelementptr %11[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = llvm.load volatile %74 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %76 = arith.cmpi eq, %75, %c0_i32_20 : i32
    %77 = arith.extui %76 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %78 = arith.cmpi ne, %77, %c0_i32_21 : i32
    cf.cond_br %78, ^bb16, ^bb17
  ^bb16:  // 2 preds: ^bb15, ^bb32
    %c0_i32_22 = arith.constant 0 : i32
    %79 = llvm.load %6 : !llvm.ptr -> i32
    %c1049268_i64_23 = arith.constant 1049268 : i64
    %80 = arith.extui %c0_i32_22 : i32 to i64
    %81 = arith.addi %80, %c1049268_i64_23 : i64
    %82 = llvm.getelementptr %11[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %79, %82 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    %c0_i32_25 = arith.constant 0 : i32
    %c1049740_i64 = arith.constant 1049740 : i64
    %83 = arith.extui %c0_i32_24 : i32 to i64
    %84 = arith.addi %83, %c1049740_i64 : i64
    %85 = llvm.getelementptr %11[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = arith.trunci %c0_i32_25 : i32 to i8
    llvm.store volatile %86, %85 {alignment = 1 : i64} : i8, !llvm.ptr
    %87 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %88 = arith.cmpi eq, %87, %c0_i32_26 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_27 : i32
    cf.cond_br %90, ^bb3, ^bb34
  ^bb17:  // pred: ^bb15
    %91 = llvm.load %5 : !llvm.ptr -> i32
    %92 = llvm.load %0 : !llvm.ptr -> i32
    %93 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c20_i64 : i64
    %96 = llvm.getelementptr %11[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    %98 = arith.cmpi ult, %97, %21 : i32
    cf.cond_br %98, ^bb18, ^bb19
  ^bb18:  // 2 preds: ^bb17, ^bb19
    %99 = llvm.getelementptr inbounds %19[%97] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %100 = llvm.load %99 : !llvm.ptr -> !llvm.ptr
    %101 = llvm.ptrtoint %100 : !llvm.ptr to i64
    %c0_i64_28 = arith.constant 0 : i64
    %102 = arith.cmpi eq, %101, %c0_i64_28 : i64
    cf.cond_br %102, ^bb21, ^bb20
  ^bb19:  // pred: ^bb17
    %c3_i32_29 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_29) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %103 = llvm.getelementptr %100[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %104 = llvm.getelementptr %100[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %105 = llvm.getelementptr %100[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %106 = llvm.load %103 : !llvm.ptr -> !llvm.ptr
    %107 = llvm.load %105 : !llvm.ptr -> !llvm.ptr
    %108 = llvm.ptrtoint %106 : !llvm.ptr to i64
    %c0_i64_30 = arith.constant 0 : i64
    %109 = arith.cmpi eq, %108, %c0_i64_30 : i64
    cf.cond_br %109, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c4_i32_31 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_31) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %110 = llvm.load %104 : !llvm.ptr -> i32
    %111 = arith.cmpi ne, %13, %110 : i32
    cf.cond_br %111, ^bb25, ^bb24
  ^bb23:  // pred: ^bb20
    %c3_i32_32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_32) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %112 = llvm.call %106(%107, %91, %92) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %113 = llvm.load %5 : !llvm.ptr -> i32
    %114 = llvm.load %4 : !llvm.ptr -> i32
    %c29_i64 = arith.constant 29 : i64
    %115 = arith.extui %113 : i32 to i64
    %116 = arith.addi %115, %c29_i64 : i64
    %117 = llvm.getelementptr %11[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %118 = arith.trunci %114 : i32 to i8
    llvm.store volatile %118, %117 {alignment = 1 : i64} : i8, !llvm.ptr
    %119 = llvm.load %5 : !llvm.ptr -> i32
    %120 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %121 = arith.extui %119 : i32 to i64
    %122 = arith.addi %121, %c28_i64 : i64
    %123 = llvm.getelementptr %11[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = arith.trunci %120 : i32 to i8
    llvm.store volatile %124, %123 {alignment = 1 : i64} : i8, !llvm.ptr
    %125 = llvm.load %5 : !llvm.ptr -> i32
    %126 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_33 = arith.constant 24 : i64
    %127 = arith.extui %125 : i32 to i64
    %128 = arith.addi %127, %c24_i64_33 : i64
    %129 = llvm.getelementptr %11[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %129 {alignment = 1 : i64} : i32, !llvm.ptr
    %130 = llvm.load %5 : !llvm.ptr -> i32
    %131 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_34 : i64
    %134 = llvm.getelementptr %11[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %136 = arith.extui %130 : i32 to i64
    %137 = arith.addi %136, %c16_i64 : i64
    %138 = llvm.getelementptr %11[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %135, %138 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_35 = arith.constant 0 : i32
    %c1049272_i64_36 = arith.constant 1049272 : i64
    %139 = arith.extui %c0_i32_35 : i32 to i64
    %140 = arith.addi %139, %c1049272_i64_36 : i64
    %141 = llvm.getelementptr %11[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %142 = llvm.load volatile %141 {alignment = 1 : i64} : !llvm.ptr -> i32
    %143 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %144 = arith.addi %143, %c16_i32 : i32
    %c0_i32_37 = arith.constant 0 : i32
    %c1049276_i64 = arith.constant 1049276 : i64
    %145 = arith.extui %c0_i32_37 : i32 to i64
    %146 = arith.addi %145, %c1049276_i64 : i64
    %147 = llvm.getelementptr %11[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64_38 = arith.constant 20 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c20_i64_38 : i64
    %151 = llvm.getelementptr %11[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    %153 = arith.cmpi ult, %152, %24 : i32
    cf.cond_br %153, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c5_i32_39 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_39) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %154 = llvm.getelementptr inbounds %22[%152] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %155 = llvm.load %154 : !llvm.ptr -> !llvm.ptr
    %156 = llvm.ptrtoint %155 : !llvm.ptr to i64
    %c0_i64_40 = arith.constant 0 : i64
    %157 = arith.cmpi eq, %156, %c0_i64_40 : i64
    cf.cond_br %157, ^bb29, ^bb28
  ^bb27:  // pred: ^bb24
    %c3_i32_41 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_41) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %158 = llvm.getelementptr %155[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %159 = llvm.getelementptr %155[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %160 = llvm.getelementptr %155[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %161 = llvm.load %158 : !llvm.ptr -> !llvm.ptr
    %162 = llvm.load %160 : !llvm.ptr -> !llvm.ptr
    %163 = llvm.ptrtoint %161 : !llvm.ptr to i64
    %c0_i64_42 = arith.constant 0 : i64
    %164 = arith.cmpi eq, %163, %c0_i64_42 : i64
    cf.cond_br %164, ^bb31, ^bb30
  ^bb29:  // pred: ^bb26
    %c4_i32_43 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_43) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %165 = llvm.load %159 : !llvm.ptr -> i32
    %166 = arith.cmpi ne, %13, %165 : i32
    cf.cond_br %166, ^bb33, ^bb32
  ^bb31:  // pred: ^bb28
    %c3_i32_44 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_44) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %167 = llvm.call %161(%162, %142, %144) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c0_i32_45 = arith.constant 0 : i32
    %c1049268_i64_46 = arith.constant 1049268 : i64
    %168 = arith.extui %c0_i32_45 : i32 to i64
    %169 = arith.addi %168, %c1049268_i64_46 : i64
    %170 = llvm.getelementptr %11[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-1_i32_47 = arith.constant -1 : i32
    %172 = arith.addi %171, %c-1_i32_47 : i32
    llvm.store %172, %6 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb33:  // pred: ^bb30
    %c5_i32_48 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_48) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // pred: ^bb16
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %174 = llvm.load %1 : !llvm.ptr -> i32
    call @f38(%arg0, %173, %174) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f38(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f40(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> i32
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f39(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %c1049264_i64 = arith.constant 1049264 : i64
    %15 = arith.extui %c0_i32_2 : i32 to i64
    %16 = arith.addi %15, %c1049264_i64 : i64
    %17 = llvm.getelementptr %5[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %18, %2 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_3 : i32
    %21 = arith.select %20, %18, %c2_i32 : i32
    %22 = arith.cmpi ult, %21, %12 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.getelementptr inbounds %10[%21] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.ptrtoint %24 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.cmpi eq, %25, %c0_i64 : i64
    cf.cond_br %26, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %27 = llvm.getelementptr %24[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.getelementptr %24[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.getelementptr %24[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %30 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.ptrtoint %30 : !llvm.ptr to i64
    %c0_i64_4 = arith.constant 0 : i64
    %33 = arith.cmpi eq, %32, %c0_i64_4 : i64
    cf.cond_br %33, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %34 = llvm.load %28 : !llvm.ptr -> i32
    %35 = arith.cmpi ne, %7, %34 : i32
    cf.cond_br %35, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_5 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_5) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %36 = llvm.call %30(%31, %13, %14) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f40(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2(%2: i32):  // no predecessors
    return %2 : i32
  }
  func.func @f41(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32 = arith.constant 31 : i32
    %8 = arith.cmpi ule, %c16_i32, %c31_i32 : i32
    %9 = scf.if %8 -> (i32) {
      %36 = arith.shrui %7, %c16_i32 : i32
      scf.yield %36 : i32
    } else {
      %c0_i32_11 = arith.constant 0 : i32
      scf.yield %c0_i32_11 : i32
    }
    %c0_i32_3 = arith.constant 0 : i32
    %10 = call @dora_fn_wasm_memory_grow(%arg0, %9, %c0_i32_3) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %10, %3 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %c8_i64 = arith.constant 8 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c8_i64 : i64
    %14 = llvm.getelementptr %6[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_4, %14 {alignment = 1 : i64} : i32, !llvm.ptr
    %15 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c-65536_i32 = arith.constant -65536 : i32
    %17 = arith.andi %16, %c-65536_i32 : i32
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %19 = arith.cmpi eq, %18, %c-1_i32 : i32
    %20 = arith.extui %19 : i1 to i32
    llvm.store %20, %2 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_6 : i32
    %22 = arith.select %21, %c0_i32_5, %17 : i32
    %c4_i64 = arith.constant 4 : i64
    %23 = arith.extui %15 : i32 to i64
    %24 = arith.addi %23, %c4_i64 : i64
    %25 = llvm.getelementptr %6[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_8 = arith.constant 16 : i32
    %c31_i32_9 = arith.constant 31 : i32
    %28 = arith.cmpi ule, %c16_i32_8, %c31_i32_9 : i32
    %29 = scf.if %28 -> (i32) {
      %36 = arith.shli %27, %c16_i32_8 : i32
      scf.yield %36 : i32
    } else {
      %c0_i32_11 = arith.constant 0 : i32
      scf.yield %c0_i32_11 : i32
    }
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_10 : i32
    %32 = arith.select %31, %c0_i32_7, %29 : i32
    %c0_i64 = arith.constant 0 : i64
    %33 = arith.extui %26 : i32 to i64
    %34 = arith.addi %33, %c0_i64 : i64
    %35 = llvm.getelementptr %6[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f42(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %7 = arith.subi %6, %c32_i32 : i32
    llvm.store %7, %0 : i32, !llvm.ptr
    llvm.store %7, %2 : i32, !llvm.ptr
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %c24_i64 = arith.constant 24 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c24_i64 : i64
    %11 = llvm.getelementptr %5[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_0, %11 {alignment = 1 : i64} : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %c12_i64 = arith.constant 12 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c12_i64 : i64
    %15 = llvm.getelementptr %5[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c1049016_i32 = arith.constant 1049016 : i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %19 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049016_i32, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %c16_i64 = arith.constant 16 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c16_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %25 = arith.addi %24, %c8_i32 : i32
    %c1049044_i32 = arith.constant 1049044 : i32
    call @f46(%arg0, %25, %c1049044_i32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f43(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // pred: ^bb1
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %5 = llvm.load %1 : !llvm.ptr -> i32
    call @f44(%arg0, %4, %5) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    call @f42(%arg0) : (!llvm.ptr) -> ()
    %c9_i32_1 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_1) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f44(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    call @f4(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f45(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %10 = arith.subi %9, %c32_i32 : i32
    llvm.store %10, %3 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %c16_i64 = arith.constant 16 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c16_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_3, %14 {alignment = 1 : i64} : i32, !llvm.ptr
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_4 = arith.constant 1 : i32
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c4_i64 : i64
    %18 = llvm.getelementptr %8[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_4, %18 {alignment = 1 : i64} : i32, !llvm.ptr
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c8_i64 : i64
    %22 = llvm.getelementptr %8[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64_5, %22 {alignment = 1 : i64} : i64, !llvm.ptr
    %23 = llvm.load %3 : !llvm.ptr -> i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %25 = arith.extui %23 : i32 to i64
    %26 = arith.addi %25, %c28_i64 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c24_i64 : i64
    %32 = llvm.getelementptr %8[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %33 = llvm.load %3 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %35 = arith.addi %34, %c24_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %36 = arith.extui %33 : i32 to i64
    %37 = arith.addi %36, %c0_i64 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %40 = llvm.load %2 : !llvm.ptr -> i32
    call @f46(%arg0, %39, %40) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f46(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_2 = arith.constant 1 : i32
    %c12_i64 = arith.constant 12 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c12_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = arith.trunci %c1_i32_2 : i32 to i16
    llvm.store volatile %14, %13 {alignment = 1 : i64} : i16, !llvm.ptr
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %15 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %19 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %16, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %22 = arith.extui %20 : i32 to i64
    %23 = arith.addi %22, %c4_i64 : i64
    %24 = llvm.getelementptr %7[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %24 {alignment = 1 : i64} : i32, !llvm.ptr
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %26 = arith.addi %25, %c4_i32 : i32
    call @f29(%arg0, %26) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f47(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %11 = call @f53(%arg0, %9, %c1_i32_1, %10) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%11 : i32)
  ^bb2(%12: i32):  // pred: ^bb1
    return %12 : i32
  }
  func.func @f48(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %20 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    %25 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.load %25 : !llvm.ptr -> i32
    %27 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %21 : !llvm.ptr -> i64
    %29 = arith.trunci %28 : i64 to i32
    %30 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %21 : !llvm.ptr -> i64
    %32 = arith.trunci %31 : i64 to i32
    %33 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.load %21 : !llvm.ptr -> i64
    %35 = arith.trunci %34 : i64 to i32
    %36 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %21 : !llvm.ptr -> i64
    %38 = arith.trunci %37 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %39 = llvm.load %14 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %40 = arith.subi %39, %c48_i32 : i32
    llvm.store %40, %3 : i32, !llvm.ptr
    llvm.store %40, %14 : i32, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c44_i64 = arith.constant 44 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c44_i64 : i64
    %44 = llvm.getelementptr %17[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %45, %44 {alignment = 1 : i64} : i8, !llvm.ptr
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %c28_i64 = arith.constant 28 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c28_i64 : i64
    %49 = llvm.getelementptr %17[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    llvm.store %c0_i32_12, %4 : i32, !llvm.ptr
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c40_i64 = arith.constant 40 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c40_i64 : i64
    %53 = llvm.getelementptr %17[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %56 = arith.extui %54 : i32 to i64
    %57 = arith.addi %56, %c36_i64 : i64
    %58 = llvm.getelementptr %17[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %60 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %61 = arith.extui %59 : i32 to i64
    %62 = arith.addi %61, %c32_i64 : i64
    %63 = llvm.getelementptr %17[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i32, !llvm.ptr
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c20_i64 : i64
    %67 = llvm.getelementptr %17[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_14, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c12_i64 : i64
    %71 = llvm.getelementptr %17[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_15, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c16_i64 : i64
    %75 = llvm.getelementptr %17[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %5 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %77 = arith.cmpi ne, %76, %c0_i32_16 : i32
    cf.cond_br %77, ^bb7, ^bb8
  ^bb2(%78: i32):  // pred: ^bb3
    return %78 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_17 = arith.constant 48 : i32
    %80 = arith.addi %79, %c48_i32_17 : i32
    llvm.store %80, %14 : i32, !llvm.ptr
    %81 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%81 : i32)
  ^bb4:  // 2 preds: ^bb6, ^bb72
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 5 preds: ^bb20, ^bb29, ^bb44, ^bb61, ^bb74
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 4 preds: ^bb7, ^bb8, ^bb32, ^bb34
    %82 = llvm.load %4 : !llvm.ptr -> i32
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %84 = arith.extui %83 : i32 to i64
    %85 = arith.addi %84, %c4_i64 : i64
    %86 = llvm.getelementptr %17[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i32
    %88 = arith.cmpi uge, %82, %87 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_20 : i32
    cf.cond_br %90, ^bb4, ^bb65
  ^bb7:  // 2 preds: ^bb1, ^bb10
    %91 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_21 = arith.constant 20 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c20_i64_21 : i64
    %94 = llvm.getelementptr %17[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %96 = arith.cmpi eq, %95, %c0_i32_22 : i32
    %97 = arith.extui %96 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %98 = arith.cmpi ne, %97, %c0_i32_23 : i32
    cf.cond_br %98, ^bb6, ^bb33
  ^bb8:  // pred: ^bb1
    %99 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_24 = arith.constant 12 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c12_i64_24 : i64
    %102 = llvm.getelementptr %17[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %103, %0 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %104 = arith.cmpi eq, %103, %c0_i32_25 : i32
    %105 = arith.extui %104 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %106 = arith.cmpi ne, %105, %c0_i32_26 : i32
    cf.cond_br %106, ^bb6, ^bb9
  ^bb9:  // pred: ^bb8
    %107 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c8_i64 : i64
    %110 = llvm.getelementptr %17[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %111, %1 : i32, !llvm.ptr
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_27 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %113 = arith.cmpi ule, %c3_i32_27, %c31_i32 : i32
    %114 = scf.if %113 -> (i32) {
      %476 = arith.shli %112, %c3_i32_27 : i32
      scf.yield %476 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    %115 = arith.addi %111, %114 : i32
    llvm.store %115, %6 : i32, !llvm.ptr
    %116 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %117 = arith.addi %116, %c-1_i32 : i32
    %c536870911_i32 = arith.constant 536870911 : i32
    %118 = arith.andi %117, %c536870911_i32 : i32
    %c1_i32_28 = arith.constant 1 : i32
    %119 = arith.addi %118, %c1_i32_28 : i32
    llvm.store %119, %4 : i32, !llvm.ptr
    %120 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64 : i64
    %123 = llvm.getelementptr %17[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %124, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb10:  // no predecessors
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb9, ^bb31
    %125 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %126 = arith.addi %125, %c4_i32 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c0_i64_29 : i64
    %129 = llvm.getelementptr %17[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %130, %7 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %131 = arith.cmpi eq, %130, %c0_i32_30 : i32
    %132 = arith.extui %131 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %133 = arith.cmpi ne, %132, %c0_i32_31 : i32
    cf.cond_br %133, ^bb12, ^bb13
  ^bb12:  // 2 preds: ^bb11, ^bb22
    %134 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c0_i64_32 : i64
    %137 = llvm.getelementptr %17[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load volatile %137 {alignment = 1 : i64} : !llvm.ptr -> i32
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %140 = arith.addi %139, %c12_i32 : i32
    %141 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_33 = arith.constant 4 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c4_i64_33 : i64
    %144 = llvm.getelementptr %17[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %146 = arith.cmpi ult, %145, %29 : i32
    cf.cond_br %146, ^bb23, ^bb24
  ^bb13:  // pred: ^bb11
    %147 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_34 = arith.constant 32 : i64
    %148 = arith.extui %147 : i32 to i64
    %149 = arith.addi %148, %c32_i64_34 : i64
    %150 = llvm.getelementptr %17[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i32
    %152 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c0_i64_35 : i64
    %155 = llvm.getelementptr %17[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %156 = llvm.load volatile %155 {alignment = 1 : i64} : !llvm.ptr -> i32
    %157 = llvm.load %7 : !llvm.ptr -> i32
    %158 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_36 = arith.constant 36 : i64
    %159 = arith.extui %158 : i32 to i64
    %160 = arith.addi %159, %c36_i64_36 : i64
    %161 = llvm.getelementptr %17[%160] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %162 = llvm.load volatile %161 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_37 = arith.constant 12 : i64
    %163 = arith.extui %162 : i32 to i64
    %164 = arith.addi %163, %c12_i64_37 : i64
    %165 = llvm.getelementptr %17[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %166 = llvm.load volatile %165 {alignment = 1 : i64} : !llvm.ptr -> i32
    %167 = arith.cmpi ult, %166, %24 : i32
    cf.cond_br %167, ^bb14, ^bb15
  ^bb14:  // 2 preds: ^bb13, ^bb15
    %168 = llvm.getelementptr inbounds %22[%166] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %169 = llvm.load %168 : !llvm.ptr -> !llvm.ptr
    %170 = llvm.ptrtoint %169 : !llvm.ptr to i64
    %c0_i64_38 = arith.constant 0 : i64
    %171 = arith.cmpi eq, %170, %c0_i64_38 : i64
    cf.cond_br %171, ^bb17, ^bb16
  ^bb15:  // pred: ^bb13
    %c3_i32_39 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_39) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %172 = llvm.getelementptr %169[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %173 = llvm.getelementptr %169[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %174 = llvm.getelementptr %169[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %175 = llvm.load %172 : !llvm.ptr -> !llvm.ptr
    %176 = llvm.load %174 : !llvm.ptr -> !llvm.ptr
    %177 = llvm.ptrtoint %175 : !llvm.ptr to i64
    %c0_i64_40 = arith.constant 0 : i64
    %178 = arith.cmpi eq, %177, %c0_i64_40 : i64
    cf.cond_br %178, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_41 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_41) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %179 = llvm.load %173 : !llvm.ptr -> i32
    %180 = arith.cmpi ne, %19, %179 : i32
    cf.cond_br %180, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_42 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_42) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %181 = llvm.call %175(%176, %151, %156, %157) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %182 = arith.cmpi ne, %181, %c0_i32_43 : i32
    cf.cond_br %182, ^bb5, ^bb22
  ^bb21:  // pred: ^bb18
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    cf.br ^bb12
  ^bb23:  // 2 preds: ^bb12, ^bb24
    %183 = llvm.getelementptr inbounds %27[%145] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %184 = llvm.load %183 : !llvm.ptr -> !llvm.ptr
    %185 = llvm.ptrtoint %184 : !llvm.ptr to i64
    %c0_i64_44 = arith.constant 0 : i64
    %186 = arith.cmpi eq, %185, %c0_i64_44 : i64
    cf.cond_br %186, ^bb26, ^bb25
  ^bb24:  // pred: ^bb12
    %c3_i32_45 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_45) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %187 = llvm.getelementptr %184[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %188 = llvm.getelementptr %184[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %189 = llvm.getelementptr %184[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %190 = llvm.load %187 : !llvm.ptr -> !llvm.ptr
    %191 = llvm.load %189 : !llvm.ptr -> !llvm.ptr
    %192 = llvm.ptrtoint %190 : !llvm.ptr to i64
    %c0_i64_46 = arith.constant 0 : i64
    %193 = arith.cmpi eq, %192, %c0_i64_46 : i64
    cf.cond_br %193, ^bb28, ^bb27
  ^bb26:  // pred: ^bb23
    %c4_i32_47 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_47) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %194 = llvm.load %188 : !llvm.ptr -> i32
    %195 = arith.cmpi ne, %26, %194 : i32
    cf.cond_br %195, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %196 = llvm.call %190(%191, %138, %140) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %197 = arith.cmpi ne, %196, %c0_i32_49 : i32
    cf.cond_br %197, ^bb5, ^bb31
  ^bb30:  // pred: ^bb27
    %c5_i32_50 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_50) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    %198 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %199 = arith.addi %198, %c8_i32 : i32
    llvm.store %199, %0 : i32, !llvm.ptr
    %200 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_51 = arith.constant 8 : i32
    %201 = arith.addi %200, %c8_i32_51 : i32
    llvm.store %201, %1 : i32, !llvm.ptr
    %202 = llvm.load %6 : !llvm.ptr -> i32
    %203 = arith.cmpi eq, %201, %202 : i32
    %204 = arith.extui %203 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %205 = arith.cmpi eq, %204, %c0_i32_52 : i32
    %206 = arith.extui %205 : i1 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %207 = arith.cmpi ne, %206, %c0_i32_53 : i32
    cf.cond_br %207, ^bb11, ^bb32
  ^bb32:  // pred: ^bb31
    cf.br ^bb6
  ^bb33:  // pred: ^bb7
    %208 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32_54 = arith.constant 5 : i32
    %c31_i32_55 = arith.constant 31 : i32
    %209 = arith.cmpi ule, %c5_i32_54, %c31_i32_55 : i32
    %210 = scf.if %209 -> (i32) {
      %476 = arith.shli %208, %c5_i32_54 : i32
      scf.yield %476 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    llvm.store %210, %8 : i32, !llvm.ptr
    %211 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_56 = arith.constant -1 : i32
    %212 = arith.addi %211, %c-1_i32_56 : i32
    %c134217727_i32 = arith.constant 134217727 : i32
    %213 = arith.andi %212, %c134217727_i32 : i32
    %c1_i32_57 = arith.constant 1 : i32
    %214 = arith.addi %213, %c1_i32_57 : i32
    llvm.store %214, %4 : i32, !llvm.ptr
    %215 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_58 = arith.constant 8 : i64
    %216 = arith.extui %215 : i32 to i64
    %217 = arith.addi %216, %c8_i64_58 : i64
    %218 = llvm.getelementptr %17[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %219 = llvm.load volatile %218 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %219, %9 : i32, !llvm.ptr
    %220 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_59 = arith.constant 0 : i64
    %221 = arith.extui %220 : i32 to i64
    %222 = arith.addi %221, %c0_i64_59 : i64
    %223 = llvm.getelementptr %17[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %224 = llvm.load volatile %223 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %224, %0 : i32, !llvm.ptr
    %c0_i32_60 = arith.constant 0 : i32
    llvm.store %c0_i32_60, %7 : i32, !llvm.ptr
    cf.br ^bb35
  ^bb34:  // pred: ^bb64
    cf.br ^bb6
  ^bb35:  // 2 preds: ^bb33, ^bb63
    %225 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_61 = arith.constant 4 : i32
    %226 = arith.addi %225, %c4_i32_61 : i32
    %c0_i64_62 = arith.constant 0 : i64
    %227 = arith.extui %226 : i32 to i64
    %228 = arith.addi %227, %c0_i64_62 : i64
    %229 = llvm.getelementptr %17[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %230 = llvm.load volatile %229 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %230, %1 : i32, !llvm.ptr
    %c0_i32_63 = arith.constant 0 : i32
    %231 = arith.cmpi eq, %230, %c0_i32_63 : i32
    %232 = arith.extui %231 : i1 to i32
    %c0_i32_64 = arith.constant 0 : i32
    %233 = arith.cmpi ne, %232, %c0_i32_64 : i32
    cf.cond_br %233, ^bb36, ^bb37
  ^bb36:  // 2 preds: ^bb35, ^bb46
    %234 = llvm.load %3 : !llvm.ptr -> i32
    %235 = llvm.load %5 : !llvm.ptr -> i32
    %236 = llvm.load %7 : !llvm.ptr -> i32
    %237 = arith.addi %235, %236 : i32
    llvm.store %237, %1 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %238 = arith.addi %237, %c16_i32 : i32
    %c0_i64_65 = arith.constant 0 : i64
    %239 = arith.extui %238 : i32 to i64
    %240 = arith.addi %239, %c0_i64_65 : i64
    %241 = llvm.getelementptr %17[%240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %242 = llvm.load volatile %241 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c28_i64_66 = arith.constant 28 : i64
    %243 = arith.extui %234 : i32 to i64
    %244 = arith.addi %243, %c28_i64_66 : i64
    %245 = llvm.getelementptr %17[%244] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %242, %245 {alignment = 1 : i64} : i32, !llvm.ptr
    %246 = llvm.load %3 : !llvm.ptr -> i32
    %247 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %248 = arith.addi %247, %c28_i32 : i32
    %c0_i64_67 = arith.constant 0 : i64
    %249 = arith.extui %248 : i32 to i64
    %250 = arith.addi %249, %c0_i64_67 : i64
    %251 = llvm.getelementptr %17[%250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %252 = llvm.load volatile %251 {alignment = 1 : i64} : !llvm.ptr -> i8
    %253 = arith.extui %252 : i8 to i32
    %c44_i64_68 = arith.constant 44 : i64
    %254 = arith.extui %246 : i32 to i64
    %255 = arith.addi %254, %c44_i64_68 : i64
    %256 = llvm.getelementptr %17[%255] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %257 = arith.trunci %253 : i32 to i8
    llvm.store volatile %257, %256 {alignment = 1 : i64} : i8, !llvm.ptr
    %258 = llvm.load %3 : !llvm.ptr -> i32
    %259 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %260 = arith.addi %259, %c24_i32 : i32
    %c0_i64_69 = arith.constant 0 : i64
    %261 = arith.extui %260 : i32 to i64
    %262 = arith.addi %261, %c0_i64_69 : i64
    %263 = llvm.getelementptr %17[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %264 = llvm.load volatile %263 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c40_i64_70 = arith.constant 40 : i64
    %265 = arith.extui %258 : i32 to i64
    %266 = arith.addi %265, %c40_i64_70 : i64
    %267 = llvm.getelementptr %17[%266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %264, %267 {alignment = 1 : i64} : i32, !llvm.ptr
    %268 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_71 = arith.constant 12 : i32
    %269 = arith.addi %268, %c12_i32_71 : i32
    %c0_i64_72 = arith.constant 0 : i64
    %270 = arith.extui %269 : i32 to i64
    %271 = arith.addi %270, %c0_i64_72 : i64
    %272 = llvm.getelementptr %17[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = llvm.load volatile %272 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %273, %6 : i32, !llvm.ptr
    %c0_i32_73 = arith.constant 0 : i32
    llvm.store %c0_i32_73, %10 : i32, !llvm.ptr
    %c0_i32_74 = arith.constant 0 : i32
    llvm.store %c0_i32_74, %11 : i32, !llvm.ptr
    %274 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_75 = arith.constant 8 : i32
    %275 = arith.addi %274, %c8_i32_75 : i32
    %c0_i64_76 = arith.constant 0 : i64
    %276 = arith.extui %275 : i32 to i64
    %277 = arith.addi %276, %c0_i64_76 : i64
    %278 = llvm.getelementptr %17[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %279 : i32, [
      default: ^bb48,
      0: ^bb48,
      1: ^bb49,
      2: ^bb47
    ]
  ^bb37:  // pred: ^bb35
    %280 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_77 = arith.constant 32 : i64
    %281 = arith.extui %280 : i32 to i64
    %282 = arith.addi %281, %c32_i64_77 : i64
    %283 = llvm.getelementptr %17[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %284 = llvm.load volatile %283 {alignment = 1 : i64} : !llvm.ptr -> i32
    %285 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_78 = arith.constant 0 : i64
    %286 = arith.extui %285 : i32 to i64
    %287 = arith.addi %286, %c0_i64_78 : i64
    %288 = llvm.getelementptr %17[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %289 = llvm.load volatile %288 {alignment = 1 : i64} : !llvm.ptr -> i32
    %290 = llvm.load %1 : !llvm.ptr -> i32
    %291 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_79 = arith.constant 36 : i64
    %292 = arith.extui %291 : i32 to i64
    %293 = arith.addi %292, %c36_i64_79 : i64
    %294 = llvm.getelementptr %17[%293] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %295 = llvm.load volatile %294 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_80 = arith.constant 12 : i64
    %296 = arith.extui %295 : i32 to i64
    %297 = arith.addi %296, %c12_i64_80 : i64
    %298 = llvm.getelementptr %17[%297] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %299 = llvm.load volatile %298 {alignment = 1 : i64} : !llvm.ptr -> i32
    %300 = arith.cmpi ult, %299, %32 : i32
    cf.cond_br %300, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %301 = llvm.getelementptr inbounds %30[%299] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %302 = llvm.load %301 : !llvm.ptr -> !llvm.ptr
    %303 = llvm.ptrtoint %302 : !llvm.ptr to i64
    %c0_i64_81 = arith.constant 0 : i64
    %304 = arith.cmpi eq, %303, %c0_i64_81 : i64
    cf.cond_br %304, ^bb41, ^bb40
  ^bb39:  // pred: ^bb37
    %c3_i32_82 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_82) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %305 = llvm.getelementptr %302[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %306 = llvm.getelementptr %302[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %307 = llvm.getelementptr %302[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %308 = llvm.load %305 : !llvm.ptr -> !llvm.ptr
    %309 = llvm.load %307 : !llvm.ptr -> !llvm.ptr
    %310 = llvm.ptrtoint %308 : !llvm.ptr to i64
    %c0_i64_83 = arith.constant 0 : i64
    %311 = arith.cmpi eq, %310, %c0_i64_83 : i64
    cf.cond_br %311, ^bb43, ^bb42
  ^bb41:  // pred: ^bb38
    %c4_i32_84 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_84) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %312 = llvm.load %306 : !llvm.ptr -> i32
    %313 = arith.cmpi ne, %19, %312 : i32
    cf.cond_br %313, ^bb45, ^bb44
  ^bb43:  // pred: ^bb40
    %c3_i32_85 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_85) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %314 = llvm.call %308(%309, %284, %289, %290) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_86 = arith.constant 0 : i32
    %315 = arith.cmpi ne, %314, %c0_i32_86 : i32
    cf.cond_br %315, ^bb5, ^bb46
  ^bb45:  // pred: ^bb42
    %c5_i32_87 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_87) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    cf.br ^bb36
  ^bb47:  // 3 preds: ^bb36, ^bb48, ^bb49
    %316 = llvm.load %3 : !llvm.ptr -> i32
    %317 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i64_88 = arith.constant 16 : i64
    %318 = arith.extui %316 : i32 to i64
    %319 = arith.addi %318, %c16_i64_88 : i64
    %320 = llvm.getelementptr %17[%319] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %317, %320 {alignment = 1 : i64} : i32, !llvm.ptr
    %321 = llvm.load %3 : !llvm.ptr -> i32
    %322 = llvm.load %11 : !llvm.ptr -> i32
    %c12_i64_89 = arith.constant 12 : i64
    %323 = arith.extui %321 : i32 to i64
    %324 = arith.addi %323, %c12_i64_89 : i64
    %325 = llvm.getelementptr %17[%324] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %322, %325 {alignment = 1 : i64} : i32, !llvm.ptr
    %326 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_90 = arith.constant 4 : i32
    %327 = arith.addi %326, %c4_i32_90 : i32
    %c0_i64_91 = arith.constant 0 : i64
    %328 = arith.extui %327 : i32 to i64
    %329 = arith.addi %328, %c0_i64_91 : i64
    %330 = llvm.getelementptr %17[%329] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %331 = llvm.load volatile %330 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %331, %6 : i32, !llvm.ptr
    %332 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_92 = arith.constant 0 : i64
    %333 = arith.extui %332 : i32 to i64
    %334 = arith.addi %333, %c0_i64_92 : i64
    %335 = llvm.getelementptr %17[%334] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %336 = llvm.load volatile %335 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %336 : i32, [
      default: ^bb52,
      0: ^bb52,
      1: ^bb53,
      2: ^bb51
    ]
  ^bb48:  // 3 preds: ^bb36, ^bb36, ^bb50
    %c1_i32_93 = arith.constant 1 : i32
    llvm.store %c1_i32_93, %11 : i32, !llvm.ptr
    cf.br ^bb47
  ^bb49:  // pred: ^bb36
    %337 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_94 = arith.constant 3 : i32
    %c31_i32_95 = arith.constant 31 : i32
    %338 = arith.cmpi ule, %c3_i32_94, %c31_i32_95 : i32
    %339 = scf.if %338 -> (i32) {
      %476 = arith.shli %337, %c3_i32_94 : i32
      scf.yield %476 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    llvm.store %339, %12 : i32, !llvm.ptr
    %c0_i32_96 = arith.constant 0 : i32
    llvm.store %c0_i32_96, %11 : i32, !llvm.ptr
    %340 = llvm.load %9 : !llvm.ptr -> i32
    %341 = llvm.load %12 : !llvm.ptr -> i32
    %342 = arith.addi %340, %341 : i32
    llvm.store %342, %12 : i32, !llvm.ptr
    %c0_i64_97 = arith.constant 0 : i64
    %343 = arith.extui %342 : i32 to i64
    %344 = arith.addi %343, %c0_i64_97 : i64
    %345 = llvm.getelementptr %17[%344] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %346 = llvm.load volatile %345 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_98 = arith.constant 0 : i32
    %347 = arith.cmpi ne, %346, %c0_i32_98 : i32
    cf.cond_br %347, ^bb47, ^bb50
  ^bb50:  // pred: ^bb49
    %348 = llvm.load %12 : !llvm.ptr -> i32
    %c4_i64_99 = arith.constant 4 : i64
    %349 = arith.extui %348 : i32 to i64
    %350 = arith.addi %349, %c4_i64_99 : i64
    %351 = llvm.getelementptr %17[%350] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %352 = llvm.load volatile %351 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %352, %6 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb51:  // 3 preds: ^bb47, ^bb52, ^bb53
    %353 = llvm.load %3 : !llvm.ptr -> i32
    %354 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %355 = arith.extui %353 : i32 to i64
    %356 = arith.addi %355, %c24_i64 : i64
    %357 = llvm.getelementptr %17[%356] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %354, %357 {alignment = 1 : i64} : i32, !llvm.ptr
    %358 = llvm.load %3 : !llvm.ptr -> i32
    %359 = llvm.load %10 : !llvm.ptr -> i32
    %c20_i64_100 = arith.constant 20 : i64
    %360 = arith.extui %358 : i32 to i64
    %361 = arith.addi %360, %c20_i64_100 : i64
    %362 = llvm.getelementptr %17[%361] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %359, %362 {alignment = 1 : i64} : i32, !llvm.ptr
    %363 = llvm.load %9 : !llvm.ptr -> i32
    %364 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %365 = arith.addi %364, %c20_i32 : i32
    %c0_i64_101 = arith.constant 0 : i64
    %366 = arith.extui %365 : i32 to i64
    %367 = arith.addi %366, %c0_i64_101 : i64
    %368 = llvm.getelementptr %17[%367] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %369 = llvm.load volatile %368 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32_102 = arith.constant 3 : i32
    %c31_i32_103 = arith.constant 31 : i32
    %370 = arith.cmpi ule, %c3_i32_102, %c31_i32_103 : i32
    %371 = scf.if %370 -> (i32) {
      %476 = arith.shli %369, %c3_i32_102 : i32
      scf.yield %476 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    %372 = arith.addi %363, %371 : i32
    llvm.store %372, %1 : i32, !llvm.ptr
    %c0_i64_104 = arith.constant 0 : i64
    %373 = arith.extui %372 : i32 to i64
    %374 = arith.addi %373, %c0_i64_104 : i64
    %375 = llvm.getelementptr %17[%374] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %376 = llvm.load volatile %375 {alignment = 1 : i64} : !llvm.ptr -> i32
    %377 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_105 = arith.constant 12 : i32
    %378 = arith.addi %377, %c12_i32_105 : i32
    %379 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_106 = arith.constant 4 : i64
    %380 = arith.extui %379 : i32 to i64
    %381 = arith.addi %380, %c4_i64_106 : i64
    %382 = llvm.getelementptr %17[%381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %383 = llvm.load volatile %382 {alignment = 1 : i64} : !llvm.ptr -> i32
    %384 = arith.cmpi ult, %383, %35 : i32
    cf.cond_br %384, ^bb55, ^bb56
  ^bb52:  // 3 preds: ^bb47, ^bb47, ^bb54
    %c1_i32_107 = arith.constant 1 : i32
    llvm.store %c1_i32_107, %10 : i32, !llvm.ptr
    cf.br ^bb51
  ^bb53:  // pred: ^bb47
    %385 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_108 = arith.constant 3 : i32
    %c31_i32_109 = arith.constant 31 : i32
    %386 = arith.cmpi ule, %c3_i32_108, %c31_i32_109 : i32
    %387 = scf.if %386 -> (i32) {
      %476 = arith.shli %385, %c3_i32_108 : i32
      scf.yield %476 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    llvm.store %387, %11 : i32, !llvm.ptr
    %388 = llvm.load %9 : !llvm.ptr -> i32
    %389 = llvm.load %11 : !llvm.ptr -> i32
    %390 = arith.addi %388, %389 : i32
    llvm.store %390, %11 : i32, !llvm.ptr
    %c0_i64_110 = arith.constant 0 : i64
    %391 = arith.extui %390 : i32 to i64
    %392 = arith.addi %391, %c0_i64_110 : i64
    %393 = llvm.getelementptr %17[%392] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %394 = llvm.load volatile %393 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_111 = arith.constant 0 : i32
    %395 = arith.cmpi ne, %394, %c0_i32_111 : i32
    cf.cond_br %395, ^bb51, ^bb54
  ^bb54:  // pred: ^bb53
    %396 = llvm.load %11 : !llvm.ptr -> i32
    %c4_i64_112 = arith.constant 4 : i64
    %397 = arith.extui %396 : i32 to i64
    %398 = arith.addi %397, %c4_i64_112 : i64
    %399 = llvm.getelementptr %17[%398] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %400 = llvm.load volatile %399 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %400, %6 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb55:  // 2 preds: ^bb51, ^bb56
    %401 = llvm.getelementptr inbounds %33[%383] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %402 = llvm.load %401 : !llvm.ptr -> !llvm.ptr
    %403 = llvm.ptrtoint %402 : !llvm.ptr to i64
    %c0_i64_113 = arith.constant 0 : i64
    %404 = arith.cmpi eq, %403, %c0_i64_113 : i64
    cf.cond_br %404, ^bb58, ^bb57
  ^bb56:  // pred: ^bb51
    %c3_i32_114 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_114) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %405 = llvm.getelementptr %402[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %406 = llvm.getelementptr %402[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %407 = llvm.getelementptr %402[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %408 = llvm.load %405 : !llvm.ptr -> !llvm.ptr
    %409 = llvm.load %407 : !llvm.ptr -> !llvm.ptr
    %410 = llvm.ptrtoint %408 : !llvm.ptr to i64
    %c0_i64_115 = arith.constant 0 : i64
    %411 = arith.cmpi eq, %410, %c0_i64_115 : i64
    cf.cond_br %411, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c4_i32_116 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_116) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %412 = llvm.load %406 : !llvm.ptr -> i32
    %413 = arith.cmpi ne, %26, %412 : i32
    cf.cond_br %413, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_117 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_117) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %414 = llvm.call %408(%409, %376, %378) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_118 = arith.constant 0 : i32
    %415 = arith.cmpi ne, %414, %c0_i32_118 : i32
    cf.cond_br %415, ^bb5, ^bb63
  ^bb62:  // pred: ^bb59
    %c5_i32_119 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_119) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // pred: ^bb61
    %416 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_120 = arith.constant 8 : i32
    %417 = arith.addi %416, %c8_i32_120 : i32
    llvm.store %417, %0 : i32, !llvm.ptr
    %418 = llvm.load %8 : !llvm.ptr -> i32
    %419 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32_121 = arith.constant 32 : i32
    %420 = arith.addi %419, %c32_i32_121 : i32
    llvm.store %420, %7 : i32, !llvm.ptr
    %421 = arith.cmpi eq, %418, %420 : i32
    %422 = arith.extui %421 : i1 to i32
    %c0_i32_122 = arith.constant 0 : i32
    %423 = arith.cmpi eq, %422, %c0_i32_122 : i32
    %424 = arith.extui %423 : i1 to i32
    %c0_i32_123 = arith.constant 0 : i32
    %425 = arith.cmpi ne, %424, %c0_i32_123 : i32
    cf.cond_br %425, ^bb35, ^bb64
  ^bb64:  // pred: ^bb63
    cf.br ^bb34
  ^bb65:  // pred: ^bb6
    %426 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_124 = arith.constant 32 : i64
    %427 = arith.extui %426 : i32 to i64
    %428 = arith.addi %427, %c32_i64_124 : i64
    %429 = llvm.getelementptr %17[%428] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %430 = llvm.load volatile %429 {alignment = 1 : i64} : !llvm.ptr -> i32
    %431 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_125 = arith.constant 0 : i64
    %432 = arith.extui %431 : i32 to i64
    %433 = arith.addi %432, %c0_i64_125 : i64
    %434 = llvm.getelementptr %17[%433] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %435 = llvm.load volatile %434 {alignment = 1 : i64} : !llvm.ptr -> i32
    %436 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_126 = arith.constant 3 : i32
    %c31_i32_127 = arith.constant 31 : i32
    %437 = arith.cmpi ule, %c3_i32_126, %c31_i32_127 : i32
    %438 = scf.if %437 -> (i32) {
      %476 = arith.shli %436, %c3_i32_126 : i32
      scf.yield %476 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    %439 = arith.addi %435, %438 : i32
    llvm.store %439, %1 : i32, !llvm.ptr
    %c0_i64_128 = arith.constant 0 : i64
    %440 = arith.extui %439 : i32 to i64
    %441 = arith.addi %440, %c0_i64_128 : i64
    %442 = llvm.getelementptr %17[%441] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %443 = llvm.load volatile %442 {alignment = 1 : i64} : !llvm.ptr -> i32
    %444 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_129 = arith.constant 4 : i64
    %445 = arith.extui %444 : i32 to i64
    %446 = arith.addi %445, %c4_i64_129 : i64
    %447 = llvm.getelementptr %17[%446] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %448 = llvm.load volatile %447 {alignment = 1 : i64} : !llvm.ptr -> i32
    %449 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_130 = arith.constant 36 : i64
    %450 = arith.extui %449 : i32 to i64
    %451 = arith.addi %450, %c36_i64_130 : i64
    %452 = llvm.getelementptr %17[%451] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %453 = llvm.load volatile %452 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_131 = arith.constant 12 : i64
    %454 = arith.extui %453 : i32 to i64
    %455 = arith.addi %454, %c12_i64_131 : i64
    %456 = llvm.getelementptr %17[%455] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %457 = llvm.load volatile %456 {alignment = 1 : i64} : !llvm.ptr -> i32
    %458 = arith.cmpi ult, %457, %38 : i32
    cf.cond_br %458, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %459 = llvm.getelementptr inbounds %36[%457] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %460 = llvm.load %459 : !llvm.ptr -> !llvm.ptr
    %461 = llvm.ptrtoint %460 : !llvm.ptr to i64
    %c0_i64_132 = arith.constant 0 : i64
    %462 = arith.cmpi eq, %461, %c0_i64_132 : i64
    cf.cond_br %462, ^bb69, ^bb68
  ^bb67:  // pred: ^bb65
    %c3_i32_133 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_133) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %463 = llvm.getelementptr %460[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %464 = llvm.getelementptr %460[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %465 = llvm.getelementptr %460[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %466 = llvm.load %463 : !llvm.ptr -> !llvm.ptr
    %467 = llvm.load %465 : !llvm.ptr -> !llvm.ptr
    %468 = llvm.ptrtoint %466 : !llvm.ptr to i64
    %c0_i64_134 = arith.constant 0 : i64
    %469 = arith.cmpi eq, %468, %c0_i64_134 : i64
    cf.cond_br %469, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c4_i32_135 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_135) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %470 = llvm.load %464 : !llvm.ptr -> i32
    %471 = arith.cmpi ne, %19, %470 : i32
    cf.cond_br %471, ^bb73, ^bb72
  ^bb71:  // pred: ^bb68
    %c3_i32_136 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_136) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %472 = llvm.call %466(%467, %430, %443, %448) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_137 = arith.constant 0 : i32
    %473 = arith.cmpi eq, %472, %c0_i32_137 : i32
    %474 = arith.extui %473 : i1 to i32
    %c0_i32_138 = arith.constant 0 : i32
    %475 = arith.cmpi ne, %474, %c0_i32_138 : i32
    cf.cond_br %475, ^bb4, ^bb74
  ^bb73:  // pred: ^bb70
    %c5_i32_139 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_139) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // pred: ^bb72
    cf.br ^bb5
  }
  func.func @f49(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %19 : !llvm.ptr -> i64
    %22 = arith.trunci %21 : i64 to i32
    %23 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %23 : !llvm.ptr -> i32
    %25 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.load %19 : !llvm.ptr -> i64
    %27 = arith.trunci %26 : i64 to i32
    %28 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %19 : !llvm.ptr -> i64
    %30 = arith.trunci %29 : i64 to i32
    %31 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %19 : !llvm.ptr -> i64
    %33 = arith.trunci %32 : i64 to i32
    %34 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.load %19 : !llvm.ptr -> i64
    %36 = arith.trunci %35 : i64 to i32
    %37 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %19 : !llvm.ptr -> i64
    %39 = arith.trunci %38 : i64 to i32
    %40 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.load %19 : !llvm.ptr -> i64
    %42 = arith.trunci %41 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_12 : i32
    cf.cond_br %44, ^bb4, ^bb5
  ^bb2(%45: i32):  // 10 preds: ^bb27, ^bb34, ^bb36, ^bb41, ^bb45, ^bb57, ^bb66, ^bb79, ^bb101, ^bb104
    return %45 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %46 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %47 = arith.andi %46, %c4_i32 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_13 : i32
    cf.cond_br %48, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c43_i32 = arith.constant 43 : i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c28_i64 : i64
    %52 = llvm.getelementptr %15[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %53, %7 : i32, !llvm.ptr
    %c1_i32_14 = arith.constant 1 : i32
    %54 = arith.andi %53, %c1_i32_14 : i32
    llvm.store %54, %1 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_15 : i32
    %56 = arith.select %55, %c43_i32, %c1114112_i32 : i32
    llvm.store %56, %8 : i32, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %5 : !llvm.ptr -> i32
    %59 = arith.addi %57, %58 : i32
    llvm.store %59, %6 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %60 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %61 = arith.addi %60, %c1_i32_16 : i32
    llvm.store %61, %6 : i32, !llvm.ptr
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_17 = arith.constant 28 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c28_i64_17 : i64
    %65 = llvm.getelementptr %15[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %66, %7 : i32, !llvm.ptr
    %c45_i32 = arith.constant 45 : i32
    llvm.store %c45_i32, %8 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb8, ^bb9
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64 : i64
    %70 = llvm.getelementptr %15[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_18 : i32
    cf.cond_br %72, ^bb24, ^bb25
  ^bb7:  // pred: ^bb3
    %73 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %74 = arith.cmpi ult, %73, %c16_i32 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_19 : i32
    cf.cond_br %76, ^bb10, ^bb11
  ^bb8:  // pred: ^bb3
    %c0_i32_20 = arith.constant 0 : i32
    llvm.store %c0_i32_20, %2 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // 4 preds: ^bb11, ^bb13, ^bb14, ^bb21
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %78 = llvm.load %6 : !llvm.ptr -> i32
    %79 = arith.addi %77, %78 : i32
    llvm.store %79, %6 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb10:  // pred: ^bb7
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %81 = arith.cmpi ne, %80, %c0_i32_21 : i32
    cf.cond_br %81, ^bb12, ^bb13
  ^bb11:  // pred: ^bb7
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %84 = call @f50(%arg0, %82, %83) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %84, %1 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb10
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %86 = arith.andi %85, %c3_i32 : i32
    llvm.store %86, %9 : i32, !llvm.ptr
    %87 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_22 = arith.constant 4 : i32
    %88 = arith.cmpi uge, %87, %c4_i32_22 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_23 : i32
    cf.cond_br %90, ^bb15, ^bb16
  ^bb13:  // pred: ^bb10
    %c0_i32_24 = arith.constant 0 : i32
    llvm.store %c0_i32_24, %1 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb14:  // 2 preds: ^bb16, ^bb17
    %91 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_25 = arith.constant 0 : i32
    %92 = arith.cmpi eq, %91, %c0_i32_25 : i32
    %93 = arith.extui %92 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %94 = arith.cmpi ne, %93, %c0_i32_26 : i32
    cf.cond_br %94, ^bb9, ^bb20
  ^bb15:  // pred: ^bb12
    %95 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %96 = arith.andi %95, %c12_i32 : i32
    llvm.store %96, %11 : i32, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    llvm.store %c0_i32_27, %1 : i32, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    llvm.store %c0_i32_28, %10 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb16:  // pred: ^bb12
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %1 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    llvm.store %c0_i32_30, %10 : i32, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb19
    cf.br ^bb14
  ^bb18:  // 2 preds: ^bb15, ^bb18
    %97 = llvm.load %1 : !llvm.ptr -> i32
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %99 = llvm.load %10 : !llvm.ptr -> i32
    %100 = arith.addi %98, %99 : i32
    llvm.store %100, %12 : i32, !llvm.ptr
    %c0_i64_31 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_31 : i64
    %103 = llvm.getelementptr %15[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i8
    %105 = arith.extsi %104 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %106 = arith.cmpi sgt, %105, %c-65_i32 : i32
    %107 = arith.extui %106 : i1 to i32
    %108 = arith.addi %97, %107 : i32
    %109 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_32 = arith.constant 1 : i32
    %110 = arith.addi %109, %c1_i32_32 : i32
    %c0_i64_33 = arith.constant 0 : i64
    %111 = arith.extui %110 : i32 to i64
    %112 = arith.addi %111, %c0_i64_33 : i64
    %113 = llvm.getelementptr %15[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = llvm.load volatile %113 {alignment = 1 : i64} : !llvm.ptr -> i8
    %115 = arith.extsi %114 : i8 to i32
    %c-65_i32_34 = arith.constant -65 : i32
    %116 = arith.cmpi sgt, %115, %c-65_i32_34 : i32
    %117 = arith.extui %116 : i1 to i32
    %118 = arith.addi %108, %117 : i32
    %119 = llvm.load %12 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %120 = arith.addi %119, %c2_i32 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64_35 : i64
    %123 = llvm.getelementptr %15[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i8
    %125 = arith.extsi %124 : i8 to i32
    %c-65_i32_36 = arith.constant -65 : i32
    %126 = arith.cmpi sgt, %125, %c-65_i32_36 : i32
    %127 = arith.extui %126 : i1 to i32
    %128 = arith.addi %118, %127 : i32
    %129 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i32_37 = arith.constant 3 : i32
    %130 = arith.addi %129, %c3_i32_37 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c0_i64_38 : i64
    %133 = llvm.getelementptr %15[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i8
    %135 = arith.extsi %134 : i8 to i32
    %c-65_i32_39 = arith.constant -65 : i32
    %136 = arith.cmpi sgt, %135, %c-65_i32_39 : i32
    %137 = arith.extui %136 : i1 to i32
    %138 = arith.addi %128, %137 : i32
    llvm.store %138, %1 : i32, !llvm.ptr
    %139 = llvm.load %11 : !llvm.ptr -> i32
    %140 = llvm.load %10 : !llvm.ptr -> i32
    %c4_i32_40 = arith.constant 4 : i32
    %141 = arith.addi %140, %c4_i32_40 : i32
    llvm.store %141, %10 : i32, !llvm.ptr
    %142 = arith.cmpi eq, %139, %141 : i32
    %143 = arith.extui %142 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %144 = arith.cmpi eq, %143, %c0_i32_41 : i32
    %145 = arith.extui %144 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %146 = arith.cmpi ne, %145, %c0_i32_42 : i32
    cf.cond_br %146, ^bb18, ^bb19
  ^bb19:  // pred: ^bb18
    cf.br ^bb17
  ^bb20:  // pred: ^bb14
    %147 = llvm.load %2 : !llvm.ptr -> i32
    %148 = llvm.load %10 : !llvm.ptr -> i32
    %149 = arith.addi %147, %148 : i32
    llvm.store %149, %12 : i32, !llvm.ptr
    cf.br ^bb22
  ^bb21:  // pred: ^bb23
    cf.br ^bb9
  ^bb22:  // 2 preds: ^bb20, ^bb22
    %150 = llvm.load %1 : !llvm.ptr -> i32
    %151 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_43 = arith.constant 0 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c0_i64_43 : i64
    %154 = llvm.getelementptr %15[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i8
    %156 = arith.extsi %155 : i8 to i32
    %c-65_i32_44 = arith.constant -65 : i32
    %157 = arith.cmpi sgt, %156, %c-65_i32_44 : i32
    %158 = arith.extui %157 : i1 to i32
    %159 = arith.addi %150, %158 : i32
    llvm.store %159, %1 : i32, !llvm.ptr
    %160 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_45 = arith.constant 1 : i32
    %161 = arith.addi %160, %c1_i32_45 : i32
    llvm.store %161, %12 : i32, !llvm.ptr
    %162 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %163 = arith.addi %162, %c-1_i32 : i32
    llvm.store %163, %9 : i32, !llvm.ptr
    %c0_i32_46 = arith.constant 0 : i32
    %164 = arith.cmpi ne, %163, %c0_i32_46 : i32
    cf.cond_br %164, ^bb22, ^bb23
  ^bb23:  // pred: ^bb22
    cf.br ^bb21
  ^bb24:  // pred: ^bb6
    %165 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c4_i64 : i64
    %168 = llvm.getelementptr %15[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %169 = llvm.load volatile %168 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %169, %1 : i32, !llvm.ptr
    %170 = llvm.load %6 : !llvm.ptr -> i32
    %171 = arith.cmpi ugt, %169, %170 : i32
    %172 = arith.extui %171 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %173 = arith.cmpi ne, %172, %c0_i32_47 : i32
    cf.cond_br %173, ^bb39, ^bb40
  ^bb25:  // pred: ^bb6
    %174 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %175 = arith.extui %174 : i32 to i64
    %176 = arith.addi %175, %c20_i64 : i64
    %177 = llvm.getelementptr %15[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %178 = llvm.load volatile %177 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %178, %1 : i32, !llvm.ptr
    %179 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %180 = arith.extui %179 : i32 to i64
    %181 = arith.addi %180, %c24_i64 : i64
    %182 = llvm.getelementptr %15[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %183 = llvm.load volatile %182 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %183, %12 : i32, !llvm.ptr
    %184 = llvm.load %8 : !llvm.ptr -> i32
    %185 = llvm.load %2 : !llvm.ptr -> i32
    %186 = llvm.load %3 : !llvm.ptr -> i32
    %187 = call @f51(%arg0, %178, %183, %184, %185, %186) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_48 = arith.constant 0 : i32
    %188 = arith.cmpi eq, %187, %c0_i32_48 : i32
    %189 = arith.extui %188 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %190 = arith.cmpi ne, %189, %c0_i32_49 : i32
    cf.cond_br %190, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %191 = llvm.load %1 : !llvm.ptr -> i32
    %192 = llvm.load %4 : !llvm.ptr -> i32
    %193 = llvm.load %5 : !llvm.ptr -> i32
    %194 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %195 = arith.extui %194 : i32 to i64
    %196 = arith.addi %195, %c12_i64 : i64
    %197 = llvm.getelementptr %15[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = llvm.load volatile %197 {alignment = 1 : i64} : !llvm.ptr -> i32
    %199 = arith.cmpi ult, %198, %22 : i32
    cf.cond_br %199, ^bb28, ^bb29
  ^bb27:  // pred: ^bb25
    %c1_i32_50 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_50 : i32)
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %200 = llvm.getelementptr inbounds %20[%198] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %201 = llvm.load %200 : !llvm.ptr -> !llvm.ptr
    %202 = llvm.ptrtoint %201 : !llvm.ptr to i64
    %c0_i64_51 = arith.constant 0 : i64
    %203 = arith.cmpi eq, %202, %c0_i64_51 : i64
    cf.cond_br %203, ^bb31, ^bb30
  ^bb29:  // pred: ^bb26
    %c3_i32_52 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_52) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %204 = llvm.getelementptr %201[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %205 = llvm.getelementptr %201[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %206 = llvm.getelementptr %201[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %207 = llvm.load %204 : !llvm.ptr -> !llvm.ptr
    %208 = llvm.load %206 : !llvm.ptr -> !llvm.ptr
    %209 = llvm.ptrtoint %207 : !llvm.ptr to i64
    %c0_i64_53 = arith.constant 0 : i64
    %210 = arith.cmpi eq, %209, %c0_i64_53 : i64
    cf.cond_br %210, ^bb33, ^bb32
  ^bb31:  // pred: ^bb28
    %c4_i32_54 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_54) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %211 = llvm.load %205 : !llvm.ptr -> i32
    %212 = arith.cmpi ne, %17, %211 : i32
    cf.cond_br %212, ^bb35, ^bb34
  ^bb33:  // pred: ^bb30
    %c3_i32_55 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_55) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %213 = llvm.call %207(%208, %191, %192, %193) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%213 : i32)
  ^bb35:  // pred: ^bb32
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 4 preds: ^bb42, ^bb73, ^bb78, ^bb98
    %214 = llvm.load %11 : !llvm.ptr -> i32
    cf.br ^bb2(%214 : i32)
  ^bb37:  // pred: ^bb39
    %215 = llvm.load %1 : !llvm.ptr -> i32
    %216 = llvm.load %6 : !llvm.ptr -> i32
    %217 = arith.subi %215, %216 : i32
    llvm.store %217, %6 : i32, !llvm.ptr
    %218 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %219 = arith.extui %218 : i32 to i64
    %220 = arith.addi %219, %c32_i64 : i64
    %221 = llvm.getelementptr %15[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %222 = llvm.load volatile %221 {alignment = 1 : i64} : !llvm.ptr -> i8
    %223 = arith.extui %222 : i8 to i32
    llvm.store %223, %1 : i32, !llvm.ptr
    cf.switch %223 : i32, [
      default: ^bb75,
      0: ^bb75,
      1: ^bb77,
      2: ^bb76,
      3: ^bb77
    ]
  ^bb38:  // pred: ^bb40
    %224 = llvm.load %1 : !llvm.ptr -> i32
    %225 = llvm.load %4 : !llvm.ptr -> i32
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %227 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64_56 = arith.constant 12 : i64
    %228 = arith.extui %227 : i32 to i64
    %229 = arith.addi %228, %c12_i64_56 : i64
    %230 = llvm.getelementptr %15[%229] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %231 = llvm.load volatile %230 {alignment = 1 : i64} : !llvm.ptr -> i32
    %232 = arith.cmpi ult, %231, %33 : i32
    cf.cond_br %232, ^bb67, ^bb68
  ^bb39:  // pred: ^bb24
    %233 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %234 = arith.andi %233, %c8_i32 : i32
    %c0_i32_57 = arith.constant 0 : i32
    %235 = arith.cmpi eq, %234, %c0_i32_57 : i32
    %236 = arith.extui %235 : i1 to i32
    %c0_i32_58 = arith.constant 0 : i32
    %237 = arith.cmpi ne, %236, %c0_i32_58 : i32
    cf.cond_br %237, ^bb37, ^bb42
  ^bb40:  // pred: ^bb24
    %238 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_59 = arith.constant 20 : i64
    %239 = arith.extui %238 : i32 to i64
    %240 = arith.addi %239, %c20_i64_59 : i64
    %241 = llvm.getelementptr %15[%240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %242 = llvm.load volatile %241 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %242, %1 : i32, !llvm.ptr
    %243 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_60 = arith.constant 24 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c24_i64_60 : i64
    %246 = llvm.getelementptr %15[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load volatile %246 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %247, %12 : i32, !llvm.ptr
    %248 = llvm.load %8 : !llvm.ptr -> i32
    %249 = llvm.load %2 : !llvm.ptr -> i32
    %250 = llvm.load %3 : !llvm.ptr -> i32
    %251 = call @f51(%arg0, %242, %247, %248, %249, %250) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_61 = arith.constant 0 : i32
    %252 = arith.cmpi eq, %251, %c0_i32_61 : i32
    %253 = arith.extui %252 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %254 = arith.cmpi ne, %253, %c0_i32_62 : i32
    cf.cond_br %254, ^bb38, ^bb41
  ^bb41:  // pred: ^bb40
    %c1_i32_63 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_63 : i32)
  ^bb42:  // pred: ^bb39
    %255 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %256 = arith.extui %255 : i32 to i64
    %257 = arith.addi %256, %c16_i64 : i64
    %258 = llvm.getelementptr %15[%257] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %259 = llvm.load volatile %258 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %259, %9 : i32, !llvm.ptr
    %260 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %c16_i64_64 = arith.constant 16 : i64
    %261 = arith.extui %260 : i32 to i64
    %262 = arith.addi %261, %c16_i64_64 : i64
    %263 = llvm.getelementptr %15[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c48_i32, %263 {alignment = 1 : i64} : i32, !llvm.ptr
    %264 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64_65 = arith.constant 32 : i64
    %265 = arith.extui %264 : i32 to i64
    %266 = arith.addi %265, %c32_i64_65 : i64
    %267 = llvm.getelementptr %15[%266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %268 = llvm.load volatile %267 {alignment = 1 : i64} : !llvm.ptr -> i8
    %269 = arith.extui %268 : i8 to i32
    llvm.store %269, %7 : i32, !llvm.ptr
    %c1_i32_66 = arith.constant 1 : i32
    llvm.store %c1_i32_66, %11 : i32, !llvm.ptr
    %270 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_67 = arith.constant 1 : i32
    %c32_i64_68 = arith.constant 32 : i64
    %271 = arith.extui %270 : i32 to i64
    %272 = arith.addi %271, %c32_i64_68 : i64
    %273 = llvm.getelementptr %15[%272] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %274 = arith.trunci %c1_i32_67 : i32 to i8
    llvm.store volatile %274, %273 {alignment = 1 : i64} : i8, !llvm.ptr
    %275 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_69 = arith.constant 20 : i64
    %276 = arith.extui %275 : i32 to i64
    %277 = arith.addi %276, %c20_i64_69 : i64
    %278 = llvm.getelementptr %15[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %279, %12 : i32, !llvm.ptr
    %280 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_70 = arith.constant 24 : i64
    %281 = arith.extui %280 : i32 to i64
    %282 = arith.addi %281, %c24_i64_70 : i64
    %283 = llvm.getelementptr %15[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %284 = llvm.load volatile %283 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %284, %10 : i32, !llvm.ptr
    %285 = llvm.load %8 : !llvm.ptr -> i32
    %286 = llvm.load %2 : !llvm.ptr -> i32
    %287 = llvm.load %3 : !llvm.ptr -> i32
    %288 = call @f51(%arg0, %279, %284, %285, %286, %287) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_71 = arith.constant 0 : i32
    %289 = arith.cmpi ne, %288, %c0_i32_71 : i32
    cf.cond_br %289, ^bb36, ^bb43
  ^bb43:  // pred: ^bb42
    %290 = llvm.load %1 : !llvm.ptr -> i32
    %291 = llvm.load %6 : !llvm.ptr -> i32
    %292 = arith.subi %290, %291 : i32
    %c1_i32_72 = arith.constant 1 : i32
    %293 = arith.addi %292, %c1_i32_72 : i32
    llvm.store %293, %1 : i32, !llvm.ptr
    cf.br ^bb46
  ^bb44:  // pred: ^bb46
    %294 = llvm.load %12 : !llvm.ptr -> i32
    %295 = llvm.load %4 : !llvm.ptr -> i32
    %296 = llvm.load %5 : !llvm.ptr -> i32
    %297 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64_73 = arith.constant 12 : i64
    %298 = arith.extui %297 : i32 to i64
    %299 = arith.addi %298, %c12_i64_73 : i64
    %300 = llvm.getelementptr %15[%299] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %301 = llvm.load volatile %300 {alignment = 1 : i64} : !llvm.ptr -> i32
    %302 = arith.cmpi ult, %301, %30 : i32
    cf.cond_br %302, ^bb58, ^bb59
  ^bb45:  // pred: ^bb56
    %c1_i32_74 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_74 : i32)
  ^bb46:  // 2 preds: ^bb43, ^bb54
    %303 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_75 = arith.constant -1 : i32
    %304 = arith.addi %303, %c-1_i32_75 : i32
    llvm.store %304, %1 : i32, !llvm.ptr
    %c0_i32_76 = arith.constant 0 : i32
    %305 = arith.cmpi eq, %304, %c0_i32_76 : i32
    %306 = arith.extui %305 : i1 to i32
    %c0_i32_77 = arith.constant 0 : i32
    %307 = arith.cmpi ne, %306, %c0_i32_77 : i32
    cf.cond_br %307, ^bb44, ^bb47
  ^bb47:  // pred: ^bb46
    %308 = llvm.load %12 : !llvm.ptr -> i32
    %c48_i32_78 = arith.constant 48 : i32
    %309 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i64_79 = arith.constant 16 : i64
    %310 = arith.extui %309 : i32 to i64
    %311 = arith.addi %310, %c16_i64_79 : i64
    %312 = llvm.getelementptr %15[%311] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %313 = llvm.load volatile %312 {alignment = 1 : i64} : !llvm.ptr -> i32
    %314 = arith.cmpi ult, %313, %27 : i32
    cf.cond_br %314, ^bb48, ^bb49
  ^bb48:  // 2 preds: ^bb47, ^bb49
    %315 = llvm.getelementptr inbounds %25[%313] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %316 = llvm.load %315 : !llvm.ptr -> !llvm.ptr
    %317 = llvm.ptrtoint %316 : !llvm.ptr to i64
    %c0_i64_80 = arith.constant 0 : i64
    %318 = arith.cmpi eq, %317, %c0_i64_80 : i64
    cf.cond_br %318, ^bb51, ^bb50
  ^bb49:  // pred: ^bb47
    %c3_i32_81 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_81) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %319 = llvm.getelementptr %316[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %320 = llvm.getelementptr %316[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %321 = llvm.getelementptr %316[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %322 = llvm.load %319 : !llvm.ptr -> !llvm.ptr
    %323 = llvm.load %321 : !llvm.ptr -> !llvm.ptr
    %324 = llvm.ptrtoint %322 : !llvm.ptr to i64
    %c0_i64_82 = arith.constant 0 : i64
    %325 = arith.cmpi eq, %324, %c0_i64_82 : i64
    cf.cond_br %325, ^bb53, ^bb52
  ^bb51:  // pred: ^bb48
    %c4_i32_83 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_83) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %326 = llvm.load %320 : !llvm.ptr -> i32
    %327 = arith.cmpi ne, %24, %326 : i32
    cf.cond_br %327, ^bb55, ^bb54
  ^bb53:  // pred: ^bb50
    %c3_i32_84 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_84) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %328 = llvm.call %322(%323, %308, %c48_i32_78) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_85 = arith.constant 0 : i32
    %329 = arith.cmpi eq, %328, %c0_i32_85 : i32
    %330 = arith.extui %329 : i1 to i32
    %c0_i32_86 = arith.constant 0 : i32
    %331 = arith.cmpi ne, %330, %c0_i32_86 : i32
    cf.cond_br %331, ^bb46, ^bb56
  ^bb55:  // pred: ^bb52
    %c5_i32_87 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_87) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // pred: ^bb54
    cf.br ^bb45
  ^bb57:  // pred: ^bb64
    %332 = llvm.load %0 : !llvm.ptr -> i32
    %333 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i64_88 = arith.constant 32 : i64
    %334 = arith.extui %332 : i32 to i64
    %335 = arith.addi %334, %c32_i64_88 : i64
    %336 = llvm.getelementptr %15[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %337 = arith.trunci %333 : i32 to i8
    llvm.store volatile %337, %336 {alignment = 1 : i64} : i8, !llvm.ptr
    %338 = llvm.load %0 : !llvm.ptr -> i32
    %339 = llvm.load %9 : !llvm.ptr -> i32
    %c16_i64_89 = arith.constant 16 : i64
    %340 = arith.extui %338 : i32 to i64
    %341 = arith.addi %340, %c16_i64_89 : i64
    %342 = llvm.getelementptr %15[%341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %339, %342 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_90 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_90 : i32)
  ^bb58:  // 2 preds: ^bb44, ^bb59
    %343 = llvm.getelementptr inbounds %28[%301] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %344 = llvm.load %343 : !llvm.ptr -> !llvm.ptr
    %345 = llvm.ptrtoint %344 : !llvm.ptr to i64
    %c0_i64_91 = arith.constant 0 : i64
    %346 = arith.cmpi eq, %345, %c0_i64_91 : i64
    cf.cond_br %346, ^bb61, ^bb60
  ^bb59:  // pred: ^bb44
    %c3_i32_92 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_92) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %347 = llvm.getelementptr %344[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %348 = llvm.getelementptr %344[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %349 = llvm.getelementptr %344[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %350 = llvm.load %347 : !llvm.ptr -> !llvm.ptr
    %351 = llvm.load %349 : !llvm.ptr -> !llvm.ptr
    %352 = llvm.ptrtoint %350 : !llvm.ptr to i64
    %c0_i64_93 = arith.constant 0 : i64
    %353 = arith.cmpi eq, %352, %c0_i64_93 : i64
    cf.cond_br %353, ^bb63, ^bb62
  ^bb61:  // pred: ^bb58
    %c4_i32_94 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_94) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %354 = llvm.load %348 : !llvm.ptr -> i32
    %355 = arith.cmpi ne, %17, %354 : i32
    cf.cond_br %355, ^bb65, ^bb64
  ^bb63:  // pred: ^bb60
    %c3_i32_95 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_95) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // 2 preds: ^bb62, ^bb65
    %356 = llvm.call %350(%351, %294, %295, %296) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_96 = arith.constant 0 : i32
    %357 = arith.cmpi eq, %356, %c0_i32_96 : i32
    %358 = arith.extui %357 : i1 to i32
    %c0_i32_97 = arith.constant 0 : i32
    %359 = arith.cmpi ne, %358, %c0_i32_97 : i32
    cf.cond_br %359, ^bb57, ^bb66
  ^bb65:  // pred: ^bb62
    %c5_i32_98 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_98) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // pred: ^bb64
    %c1_i32_99 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_99 : i32)
  ^bb67:  // 2 preds: ^bb38, ^bb68
    %360 = llvm.getelementptr inbounds %31[%231] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %361 = llvm.load %360 : !llvm.ptr -> !llvm.ptr
    %362 = llvm.ptrtoint %361 : !llvm.ptr to i64
    %c0_i64_100 = arith.constant 0 : i64
    %363 = arith.cmpi eq, %362, %c0_i64_100 : i64
    cf.cond_br %363, ^bb70, ^bb69
  ^bb68:  // pred: ^bb38
    %c3_i32_101 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_101) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %364 = llvm.getelementptr %361[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %365 = llvm.getelementptr %361[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %366 = llvm.getelementptr %361[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %367 = llvm.load %364 : !llvm.ptr -> !llvm.ptr
    %368 = llvm.load %366 : !llvm.ptr -> !llvm.ptr
    %369 = llvm.ptrtoint %367 : !llvm.ptr to i64
    %c0_i64_102 = arith.constant 0 : i64
    %370 = arith.cmpi eq, %369, %c0_i64_102 : i64
    cf.cond_br %370, ^bb72, ^bb71
  ^bb70:  // pred: ^bb67
    %c4_i32_103 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_103) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %371 = llvm.load %365 : !llvm.ptr -> i32
    %372 = arith.cmpi ne, %17, %371 : i32
    cf.cond_br %372, ^bb74, ^bb73
  ^bb72:  // pred: ^bb69
    %c3_i32_104 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_104) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %373 = llvm.call %367(%368, %224, %225, %226) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %373, %11 : i32, !llvm.ptr
    cf.br ^bb36
  ^bb74:  // pred: ^bb71
    %c5_i32_105 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_105) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 4 preds: ^bb37, ^bb37, ^bb76, ^bb77
    %374 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_106 = arith.constant 1 : i32
    %375 = arith.addi %374, %c1_i32_106 : i32
    llvm.store %375, %1 : i32, !llvm.ptr
    %376 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64_107 = arith.constant 16 : i64
    %377 = arith.extui %376 : i32 to i64
    %378 = arith.addi %377, %c16_i64_107 : i64
    %379 = llvm.getelementptr %15[%378] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %380 = llvm.load volatile %379 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %380, %9 : i32, !llvm.ptr
    %381 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_108 = arith.constant 24 : i64
    %382 = arith.extui %381 : i32 to i64
    %383 = arith.addi %382, %c24_i64_108 : i64
    %384 = llvm.getelementptr %15[%383] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %385 = llvm.load volatile %384 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %385, %12 : i32, !llvm.ptr
    %386 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_109 = arith.constant 20 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c20_i64_109 : i64
    %389 = llvm.getelementptr %15[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %390, %10 : i32, !llvm.ptr
    cf.br ^bb80
  ^bb76:  // pred: ^bb37
    %391 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_110 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %392 = arith.cmpi ule, %c1_i32_110, %c31_i32 : i32
    %393 = scf.if %392 -> (i32) {
      %503 = arith.shrui %391, %c1_i32_110 : i32
      scf.yield %503 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %393, %1 : i32, !llvm.ptr
    %394 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_111 = arith.constant 1 : i32
    %395 = arith.addi %394, %c1_i32_111 : i32
    %c1_i32_112 = arith.constant 1 : i32
    %c31_i32_113 = arith.constant 31 : i32
    %396 = arith.cmpi ule, %c1_i32_112, %c31_i32_113 : i32
    %397 = scf.if %396 -> (i32) {
      %503 = arith.shrui %395, %c1_i32_112 : i32
      scf.yield %503 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %397, %6 : i32, !llvm.ptr
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb37, ^bb37
    %398 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %398, %1 : i32, !llvm.ptr
    %c0_i32_114 = arith.constant 0 : i32
    llvm.store %c0_i32_114, %6 : i32, !llvm.ptr
    cf.br ^bb75
  ^bb78:  // pred: ^bb80
    %c1_i32_115 = arith.constant 1 : i32
    llvm.store %c1_i32_115, %11 : i32, !llvm.ptr
    %399 = llvm.load %10 : !llvm.ptr -> i32
    %400 = llvm.load %12 : !llvm.ptr -> i32
    %401 = llvm.load %8 : !llvm.ptr -> i32
    %402 = llvm.load %2 : !llvm.ptr -> i32
    %403 = llvm.load %3 : !llvm.ptr -> i32
    %404 = call @f51(%arg0, %399, %400, %401, %402, %403) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_116 = arith.constant 0 : i32
    %405 = arith.cmpi ne, %404, %c0_i32_116 : i32
    cf.cond_br %405, ^bb36, ^bb91
  ^bb79:  // pred: ^bb90
    %c1_i32_117 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_117 : i32)
  ^bb80:  // 2 preds: ^bb75, ^bb88
    %406 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_118 = arith.constant -1 : i32
    %407 = arith.addi %406, %c-1_i32_118 : i32
    llvm.store %407, %1 : i32, !llvm.ptr
    %c0_i32_119 = arith.constant 0 : i32
    %408 = arith.cmpi eq, %407, %c0_i32_119 : i32
    %409 = arith.extui %408 : i1 to i32
    %c0_i32_120 = arith.constant 0 : i32
    %410 = arith.cmpi ne, %409, %c0_i32_120 : i32
    cf.cond_br %410, ^bb78, ^bb81
  ^bb81:  // pred: ^bb80
    %411 = llvm.load %10 : !llvm.ptr -> i32
    %412 = llvm.load %9 : !llvm.ptr -> i32
    %413 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_121 = arith.constant 16 : i64
    %414 = arith.extui %413 : i32 to i64
    %415 = arith.addi %414, %c16_i64_121 : i64
    %416 = llvm.getelementptr %15[%415] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %417 = llvm.load volatile %416 {alignment = 1 : i64} : !llvm.ptr -> i32
    %418 = arith.cmpi ult, %417, %36 : i32
    cf.cond_br %418, ^bb82, ^bb83
  ^bb82:  // 2 preds: ^bb81, ^bb83
    %419 = llvm.getelementptr inbounds %34[%417] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %420 = llvm.load %419 : !llvm.ptr -> !llvm.ptr
    %421 = llvm.ptrtoint %420 : !llvm.ptr to i64
    %c0_i64_122 = arith.constant 0 : i64
    %422 = arith.cmpi eq, %421, %c0_i64_122 : i64
    cf.cond_br %422, ^bb85, ^bb84
  ^bb83:  // pred: ^bb81
    %c3_i32_123 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_123) : (i32) -> ()
    cf.br ^bb82
  ^bb84:  // 2 preds: ^bb82, ^bb85
    %423 = llvm.getelementptr %420[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %424 = llvm.getelementptr %420[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %425 = llvm.getelementptr %420[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %426 = llvm.load %423 : !llvm.ptr -> !llvm.ptr
    %427 = llvm.load %425 : !llvm.ptr -> !llvm.ptr
    %428 = llvm.ptrtoint %426 : !llvm.ptr to i64
    %c0_i64_124 = arith.constant 0 : i64
    %429 = arith.cmpi eq, %428, %c0_i64_124 : i64
    cf.cond_br %429, ^bb87, ^bb86
  ^bb85:  // pred: ^bb82
    %c4_i32_125 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_125) : (i32) -> ()
    cf.br ^bb84
  ^bb86:  // 2 preds: ^bb84, ^bb87
    %430 = llvm.load %424 : !llvm.ptr -> i32
    %431 = arith.cmpi ne, %24, %430 : i32
    cf.cond_br %431, ^bb89, ^bb88
  ^bb87:  // pred: ^bb84
    %c3_i32_126 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_126) : (i32) -> ()
    cf.br ^bb86
  ^bb88:  // 2 preds: ^bb86, ^bb89
    %432 = llvm.call %426(%427, %411, %412) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_127 = arith.constant 0 : i32
    %433 = arith.cmpi eq, %432, %c0_i32_127 : i32
    %434 = arith.extui %433 : i1 to i32
    %c0_i32_128 = arith.constant 0 : i32
    %435 = arith.cmpi ne, %434, %c0_i32_128 : i32
    cf.cond_br %435, ^bb80, ^bb90
  ^bb89:  // pred: ^bb86
    %c5_i32_129 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_129) : (i32) -> ()
    cf.br ^bb88
  ^bb90:  // pred: ^bb88
    cf.br ^bb79
  ^bb91:  // pred: ^bb78
    %436 = llvm.load %10 : !llvm.ptr -> i32
    %437 = llvm.load %4 : !llvm.ptr -> i32
    %438 = llvm.load %5 : !llvm.ptr -> i32
    %439 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64_130 = arith.constant 12 : i64
    %440 = arith.extui %439 : i32 to i64
    %441 = arith.addi %440, %c12_i64_130 : i64
    %442 = llvm.getelementptr %15[%441] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %443 = llvm.load volatile %442 {alignment = 1 : i64} : !llvm.ptr -> i32
    %444 = arith.cmpi ult, %443, %39 : i32
    cf.cond_br %444, ^bb92, ^bb93
  ^bb92:  // 2 preds: ^bb91, ^bb93
    %445 = llvm.getelementptr inbounds %37[%443] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %446 = llvm.load %445 : !llvm.ptr -> !llvm.ptr
    %447 = llvm.ptrtoint %446 : !llvm.ptr to i64
    %c0_i64_131 = arith.constant 0 : i64
    %448 = arith.cmpi eq, %447, %c0_i64_131 : i64
    cf.cond_br %448, ^bb95, ^bb94
  ^bb93:  // pred: ^bb91
    %c3_i32_132 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_132) : (i32) -> ()
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb92, ^bb95
    %449 = llvm.getelementptr %446[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %450 = llvm.getelementptr %446[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %451 = llvm.getelementptr %446[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %452 = llvm.load %449 : !llvm.ptr -> !llvm.ptr
    %453 = llvm.load %451 : !llvm.ptr -> !llvm.ptr
    %454 = llvm.ptrtoint %452 : !llvm.ptr to i64
    %c0_i64_133 = arith.constant 0 : i64
    %455 = arith.cmpi eq, %454, %c0_i64_133 : i64
    cf.cond_br %455, ^bb97, ^bb96
  ^bb95:  // pred: ^bb92
    %c4_i32_134 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_134) : (i32) -> ()
    cf.br ^bb94
  ^bb96:  // 2 preds: ^bb94, ^bb97
    %456 = llvm.load %450 : !llvm.ptr -> i32
    %457 = arith.cmpi ne, %17, %456 : i32
    cf.cond_br %457, ^bb99, ^bb98
  ^bb97:  // pred: ^bb94
    %c3_i32_135 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_135) : (i32) -> ()
    cf.br ^bb96
  ^bb98:  // 2 preds: ^bb96, ^bb99
    %458 = llvm.call %452(%453, %436, %437, %438) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_136 = arith.constant 0 : i32
    %459 = arith.cmpi ne, %458, %c0_i32_136 : i32
    cf.cond_br %459, ^bb36, ^bb100
  ^bb99:  // pred: ^bb96
    %c5_i32_137 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_137) : (i32) -> ()
    cf.br ^bb98
  ^bb100:  // pred: ^bb98
    %c0_i32_138 = arith.constant 0 : i32
    llvm.store %c0_i32_138, %1 : i32, !llvm.ptr
    cf.br ^bb102
  ^bb101:  // pred: ^bb113
    %460 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_139 = arith.constant -1 : i32
    %461 = arith.addi %460, %c-1_i32_139 : i32
    %462 = llvm.load %6 : !llvm.ptr -> i32
    %463 = arith.cmpi ult, %461, %462 : i32
    %464 = arith.extui %463 : i1 to i32
    cf.br ^bb2(%464 : i32)
  ^bb102:  // 2 preds: ^bb100, ^bb111
    %465 = llvm.load %6 : !llvm.ptr -> i32
    %466 = llvm.load %1 : !llvm.ptr -> i32
    %467 = arith.cmpi eq, %465, %466 : i32
    %468 = arith.extui %467 : i1 to i32
    %c0_i32_140 = arith.constant 0 : i32
    %469 = arith.cmpi eq, %468, %c0_i32_140 : i32
    %470 = arith.extui %469 : i1 to i32
    %c0_i32_141 = arith.constant 0 : i32
    %471 = arith.cmpi ne, %470, %c0_i32_141 : i32
    cf.cond_br %471, ^bb103, ^bb104
  ^bb103:  // pred: ^bb102
    %472 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_142 = arith.constant 1 : i32
    %473 = arith.addi %472, %c1_i32_142 : i32
    llvm.store %473, %1 : i32, !llvm.ptr
    %474 = llvm.load %10 : !llvm.ptr -> i32
    %475 = llvm.load %9 : !llvm.ptr -> i32
    %476 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_143 = arith.constant 16 : i64
    %477 = arith.extui %476 : i32 to i64
    %478 = arith.addi %477, %c16_i64_143 : i64
    %479 = llvm.getelementptr %15[%478] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %480 = llvm.load volatile %479 {alignment = 1 : i64} : !llvm.ptr -> i32
    %481 = arith.cmpi ult, %480, %42 : i32
    cf.cond_br %481, ^bb105, ^bb106
  ^bb104:  // pred: ^bb102
    %482 = llvm.load %6 : !llvm.ptr -> i32
    %483 = llvm.load %6 : !llvm.ptr -> i32
    %484 = arith.cmpi ult, %482, %483 : i32
    %485 = arith.extui %484 : i1 to i32
    cf.br ^bb2(%485 : i32)
  ^bb105:  // 2 preds: ^bb103, ^bb106
    %486 = llvm.getelementptr inbounds %40[%480] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %487 = llvm.load %486 : !llvm.ptr -> !llvm.ptr
    %488 = llvm.ptrtoint %487 : !llvm.ptr to i64
    %c0_i64_144 = arith.constant 0 : i64
    %489 = arith.cmpi eq, %488, %c0_i64_144 : i64
    cf.cond_br %489, ^bb108, ^bb107
  ^bb106:  // pred: ^bb103
    %c3_i32_145 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_145) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // 2 preds: ^bb105, ^bb108
    %490 = llvm.getelementptr %487[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %491 = llvm.getelementptr %487[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %492 = llvm.getelementptr %487[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %493 = llvm.load %490 : !llvm.ptr -> !llvm.ptr
    %494 = llvm.load %492 : !llvm.ptr -> !llvm.ptr
    %495 = llvm.ptrtoint %493 : !llvm.ptr to i64
    %c0_i64_146 = arith.constant 0 : i64
    %496 = arith.cmpi eq, %495, %c0_i64_146 : i64
    cf.cond_br %496, ^bb110, ^bb109
  ^bb108:  // pred: ^bb105
    %c4_i32_147 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_147) : (i32) -> ()
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb107, ^bb110
    %497 = llvm.load %491 : !llvm.ptr -> i32
    %498 = arith.cmpi ne, %24, %497 : i32
    cf.cond_br %498, ^bb112, ^bb111
  ^bb110:  // pred: ^bb107
    %c3_i32_148 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_148) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // 2 preds: ^bb109, ^bb112
    %499 = llvm.call %493(%494, %474, %475) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_149 = arith.constant 0 : i32
    %500 = arith.cmpi eq, %499, %c0_i32_149 : i32
    %501 = arith.extui %500 : i1 to i32
    %c0_i32_150 = arith.constant 0 : i32
    %502 = arith.cmpi ne, %501, %c0_i32_150 : i32
    cf.cond_br %502, ^bb102, ^bb113
  ^bb112:  // pred: ^bb109
    %c5_i32_151 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_151) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // pred: ^bb111
    cf.br ^bb101
  }
  func.func @f50(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %15 = arith.addi %14, %c3_i32 : i32
    %c-4_i32 = arith.constant -4 : i32
    %16 = arith.andi %15, %c-4_i32 : i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %18 = arith.subi %16, %17 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %19 = arith.cmpi ult, %13, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_9 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2(%22: i32):  // 3 preds: ^bb3, ^bb32, ^bb36
    return %22 : i32
  ^bb3:  // 3 preds: ^bb24, ^bb37, ^bb44
    %23 = llvm.load %8 : !llvm.ptr -> i32
    cf.br ^bb2(%23 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_10 : i32
    cf.cond_br %25, ^bb35, ^bb36
  ^bb5:  // pred: ^bb1
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %28 = arith.subi %26, %27 : i32
    llvm.store %28, %4 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %29 = arith.cmpi ult, %28, %c4_i32 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_11 : i32
    cf.cond_br %31, ^bb4, ^bb6
  ^bb6:  // pred: ^bb5
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_12 = arith.constant 3 : i32
    %33 = arith.andi %32, %c3_i32_12 : i32
    llvm.store %33, %5 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %6 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    llvm.store %c0_i32_14, %1 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %36 = arith.cmpi eq, %34, %35 : i32
    %37 = arith.extui %36 : i1 to i32
    llvm.store %37, %7 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_15 : i32
    cf.cond_br %38, ^bb7, ^bb8
  ^bb7:  // 3 preds: ^bb6, ^bb9, ^bb16
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_16 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_17 : i32
    cf.cond_br %45, ^bb19, ^bb20
  ^bb8:  // pred: ^bb6
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %48 = arith.subi %46, %47 : i32
    llvm.store %48, %8 : i32, !llvm.ptr
    %c-4_i32_19 = arith.constant -4 : i32
    %49 = arith.cmpi ule, %48, %c-4_i32_19 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_20 : i32
    cf.cond_br %51, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %52 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_21 : i32
    cf.cond_br %53, ^bb7, ^bb15
  ^bb10:  // pred: ^bb8
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %9 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %9 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb14
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb13
    %54 = llvm.load %1 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %9 : !llvm.ptr -> i32
    %57 = arith.addi %55, %56 : i32
    llvm.store %57, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64 : i64
    %60 = llvm.getelementptr %12[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i8
    %62 = arith.extsi %61 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %63 = arith.cmpi sgt, %62, %c-65_i32 : i32
    %64 = arith.extui %63 : i1 to i32
    %65 = arith.addi %54, %64 : i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %67 = arith.addi %66, %c1_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_25 : i64
    %70 = llvm.getelementptr %12[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i8
    %72 = arith.extsi %71 : i8 to i32
    %c-65_i32_26 = arith.constant -65 : i32
    %73 = arith.cmpi sgt, %72, %c-65_i32_26 : i32
    %74 = arith.extui %73 : i1 to i32
    %75 = arith.addi %65, %74 : i32
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %77 = arith.addi %76, %c2_i32 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_27 : i64
    %80 = llvm.getelementptr %12[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i8
    %82 = arith.extsi %81 : i8 to i32
    %c-65_i32_28 = arith.constant -65 : i32
    %83 = arith.cmpi sgt, %82, %c-65_i32_28 : i32
    %84 = arith.extui %83 : i1 to i32
    %85 = arith.addi %75, %84 : i32
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_29 = arith.constant 3 : i32
    %87 = arith.addi %86, %c3_i32_29 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c0_i64_30 : i64
    %90 = llvm.getelementptr %12[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load volatile %90 {alignment = 1 : i64} : !llvm.ptr -> i8
    %92 = arith.extsi %91 : i8 to i32
    %c-65_i32_31 = arith.constant -65 : i32
    %93 = arith.cmpi sgt, %92, %c-65_i32_31 : i32
    %94 = arith.extui %93 : i1 to i32
    %95 = arith.addi %85, %94 : i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %96 = llvm.load %9 : !llvm.ptr -> i32
    %c4_i32_32 = arith.constant 4 : i32
    %97 = arith.addi %96, %c4_i32_32 : i32
    llvm.store %97, %9 : i32, !llvm.ptr
    %c0_i32_33 = arith.constant 0 : i32
    %98 = arith.cmpi ne, %97, %c0_i32_33 : i32
    cf.cond_br %98, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // pred: ^bb9
    %99 = llvm.load %0 : !llvm.ptr -> i32
    %100 = llvm.load %9 : !llvm.ptr -> i32
    %101 = arith.addi %99, %100 : i32
    llvm.store %101, %2 : i32, !llvm.ptr
    cf.br ^bb17
  ^bb16:  // pred: ^bb18
    cf.br ^bb7
  ^bb17:  // 2 preds: ^bb15, ^bb17
    %102 = llvm.load %1 : !llvm.ptr -> i32
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_34 : i64
    %106 = llvm.getelementptr %12[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i8
    %108 = arith.extsi %107 : i8 to i32
    %c-65_i32_35 = arith.constant -65 : i32
    %109 = arith.cmpi sgt, %108, %c-65_i32_35 : i32
    %110 = arith.extui %109 : i1 to i32
    %111 = arith.addi %102, %110 : i32
    llvm.store %111, %1 : i32, !llvm.ptr
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_36 = arith.constant 1 : i32
    %113 = arith.addi %112, %c1_i32_36 : i32
    llvm.store %113, %2 : i32, !llvm.ptr
    %114 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_37 = arith.constant 1 : i32
    %115 = arith.addi %114, %c1_i32_37 : i32
    llvm.store %115, %8 : i32, !llvm.ptr
    %c0_i32_38 = arith.constant 0 : i32
    %116 = arith.cmpi ne, %115, %c0_i32_38 : i32
    cf.cond_br %116, ^bb17, ^bb18
  ^bb18:  // pred: ^bb17
    cf.br ^bb16
  ^bb19:  // 4 preds: ^bb7, ^bb20, ^bb21, ^bb22
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_39 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %118 = arith.cmpi ule, %c2_i32_39, %c31_i32 : i32
    %119 = scf.if %118 -> (i32) {
      %421 = arith.shrui %117, %c2_i32_39 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %119, %3 : i32, !llvm.ptr
    %120 = llvm.load %6 : !llvm.ptr -> i32
    %121 = llvm.load %1 : !llvm.ptr -> i32
    %122 = arith.addi %120, %121 : i32
    llvm.store %122, %8 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb20:  // pred: ^bb7
    %123 = llvm.load %9 : !llvm.ptr -> i32
    %124 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_40 = arith.constant -4 : i32
    %125 = arith.andi %124, %c-4_i32_40 : i32
    %126 = arith.addi %123, %125 : i32
    llvm.store %126, %2 : i32, !llvm.ptr
    %c0_i64_41 = arith.constant 0 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c0_i64_41 : i64
    %129 = llvm.getelementptr %12[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i8
    %131 = arith.extsi %130 : i8 to i32
    %c-65_i32_42 = arith.constant -65 : i32
    %132 = arith.cmpi sgt, %131, %c-65_i32_42 : i32
    %133 = arith.extui %132 : i1 to i32
    llvm.store %133, %6 : i32, !llvm.ptr
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_43 = arith.constant 1 : i32
    %135 = arith.cmpi eq, %134, %c1_i32_43 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_44 : i32
    cf.cond_br %137, ^bb19, ^bb21
  ^bb21:  // pred: ^bb20
    %138 = llvm.load %6 : !llvm.ptr -> i32
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c1_i64 : i64
    %142 = llvm.getelementptr %12[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i8
    %144 = arith.extsi %143 : i8 to i32
    %c-65_i32_45 = arith.constant -65 : i32
    %145 = arith.cmpi sgt, %144, %c-65_i32_45 : i32
    %146 = arith.extui %145 : i1 to i32
    %147 = arith.addi %138, %146 : i32
    llvm.store %147, %6 : i32, !llvm.ptr
    %148 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32_46 = arith.constant 2 : i32
    %149 = arith.cmpi eq, %148, %c2_i32_46 : i32
    %150 = arith.extui %149 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %151 = arith.cmpi ne, %150, %c0_i32_47 : i32
    cf.cond_br %151, ^bb19, ^bb22
  ^bb22:  // pred: ^bb21
    %152 = llvm.load %6 : !llvm.ptr -> i32
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c2_i64 : i64
    %156 = llvm.getelementptr %12[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load volatile %156 {alignment = 1 : i64} : !llvm.ptr -> i8
    %158 = arith.extsi %157 : i8 to i32
    %c-65_i32_48 = arith.constant -65 : i32
    %159 = arith.cmpi sgt, %158, %c-65_i32_48 : i32
    %160 = arith.extui %159 : i1 to i32
    %161 = arith.addi %152, %160 : i32
    llvm.store %161, %6 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb23:  // pred: ^bb31
    %162 = llvm.load %4 : !llvm.ptr -> i32
    %163 = llvm.load %6 : !llvm.ptr -> i32
    %c252_i32 = arith.constant 252 : i32
    %164 = arith.andi %163, %c252_i32 : i32
    %c2_i32_49 = arith.constant 2 : i32
    %c31_i32_50 = arith.constant 31 : i32
    %165 = arith.cmpi ule, %c2_i32_49, %c31_i32_50 : i32
    %166 = scf.if %165 -> (i32) {
      %421 = arith.shli %164, %c2_i32_49 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %167 = arith.addi %162, %166 : i32
    llvm.store %167, %2 : i32, !llvm.ptr
    %c0_i64_51 = arith.constant 0 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c0_i64_51 : i64
    %170 = llvm.getelementptr %12[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %171, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %172 = arith.xori %171, %c-1_i32 : i32
    %c7_i32 = arith.constant 7 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %173 = arith.cmpi ule, %c7_i32, %c31_i32_52 : i32
    %174 = scf.if %173 -> (i32) {
      %421 = arith.shrui %172, %c7_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %175 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32_53 = arith.constant 31 : i32
    %176 = arith.cmpi ule, %c6_i32, %c31_i32_53 : i32
    %177 = scf.if %176 -> (i32) {
      %421 = arith.shrui %175, %c6_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %178 = arith.ori %174, %177 : i32
    %c16843009_i32 = arith.constant 16843009 : i32
    %179 = arith.andi %178, %c16843009_i32 : i32
    llvm.store %179, %1 : i32, !llvm.ptr
    %180 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_54 = arith.constant 1 : i32
    %181 = arith.cmpi eq, %180, %c1_i32_54 : i32
    %182 = arith.extui %181 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %183 = arith.cmpi ne, %182, %c0_i32_55 : i32
    cf.cond_br %183, ^bb32, ^bb33
  ^bb24:  // 2 preds: ^bb19, ^bb26
    %184 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %184, %4 : i32, !llvm.ptr
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_56 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %185, %c0_i32_56 : i32
    %187 = arith.extui %186 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %188 = arith.cmpi ne, %187, %c0_i32_57 : i32
    cf.cond_br %188, ^bb3, ^bb25
  ^bb25:  // pred: ^bb24
    %189 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %190 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32_58 = arith.constant 192 : i32
    %191 = arith.cmpi ult, %190, %c192_i32_58 : i32
    %192 = arith.extui %191 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %193 = arith.cmpi ne, %192, %c0_i32_59 : i32
    %194 = arith.select %193, %189, %c192_i32 : i32
    llvm.store %194, %6 : i32, !llvm.ptr
    %c3_i32_60 = arith.constant 3 : i32
    %195 = arith.andi %194, %c3_i32_60 : i32
    llvm.store %195, %7 : i32, !llvm.ptr
    %196 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_61 = arith.constant 2 : i32
    %c31_i32_62 = arith.constant 31 : i32
    %197 = arith.cmpi ule, %c2_i32_61, %c31_i32_62 : i32
    %198 = scf.if %197 -> (i32) {
      %421 = arith.shli %196, %c2_i32_61 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %198, %5 : i32, !llvm.ptr
    %c0_i32_63 = arith.constant 0 : i32
    llvm.store %c0_i32_63, %2 : i32, !llvm.ptr
    %199 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_64 = arith.constant 4 : i32
    %200 = arith.cmpi ult, %199, %c4_i32_64 : i32
    %201 = arith.extui %200 : i1 to i32
    %c0_i32_65 = arith.constant 0 : i32
    %202 = arith.cmpi ne, %201, %c0_i32_65 : i32
    cf.cond_br %202, ^bb26, ^bb27
  ^bb26:  // 2 preds: ^bb25, ^bb28
    %203 = llvm.load %3 : !llvm.ptr -> i32
    %204 = llvm.load %6 : !llvm.ptr -> i32
    %205 = arith.subi %203, %204 : i32
    llvm.store %205, %3 : i32, !llvm.ptr
    %206 = llvm.load %4 : !llvm.ptr -> i32
    %207 = llvm.load %5 : !llvm.ptr -> i32
    %208 = arith.addi %206, %207 : i32
    llvm.store %208, %9 : i32, !llvm.ptr
    %209 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_66 = arith.constant 31 : i32
    %210 = arith.cmpi ule, %c8_i32, %c31_i32_66 : i32
    %211 = scf.if %210 -> (i32) {
      %421 = arith.shrui %209, %c8_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %c16711935_i32 = arith.constant 16711935 : i32
    %212 = arith.andi %211, %c16711935_i32 : i32
    %213 = llvm.load %2 : !llvm.ptr -> i32
    %c16711935_i32_67 = arith.constant 16711935 : i32
    %214 = arith.andi %213, %c16711935_i32_67 : i32
    %215 = arith.addi %212, %214 : i32
    %c65537_i32 = arith.constant 65537 : i32
    %216 = arith.muli %215, %c65537_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32_68 = arith.constant 31 : i32
    %217 = arith.cmpi ule, %c16_i32, %c31_i32_68 : i32
    %218 = scf.if %217 -> (i32) {
      %421 = arith.shrui %216, %c16_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %219 = llvm.load %8 : !llvm.ptr -> i32
    %220 = arith.addi %218, %219 : i32
    llvm.store %220, %8 : i32, !llvm.ptr
    %221 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_69 = arith.constant 0 : i32
    %222 = arith.cmpi eq, %221, %c0_i32_69 : i32
    %223 = arith.extui %222 : i1 to i32
    %c0_i32_70 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_70 : i32
    cf.cond_br %224, ^bb24, ^bb31
  ^bb27:  // pred: ^bb25
    %225 = llvm.load %4 : !llvm.ptr -> i32
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %c1008_i32 = arith.constant 1008 : i32
    %227 = arith.andi %226, %c1008_i32 : i32
    %228 = arith.addi %225, %227 : i32
    llvm.store %228, %0 : i32, !llvm.ptr
    %c0_i32_71 = arith.constant 0 : i32
    llvm.store %c0_i32_71, %2 : i32, !llvm.ptr
    %229 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %229, %1 : i32, !llvm.ptr
    cf.br ^bb29
  ^bb28:  // pred: ^bb30
    cf.br ^bb26
  ^bb29:  // 2 preds: ^bb27, ^bb29
    %230 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %231 = arith.extui %230 : i32 to i64
    %232 = arith.addi %231, %c12_i64 : i64
    %233 = llvm.getelementptr %12[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %234 = llvm.load volatile %233 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %234, %9 : i32, !llvm.ptr
    %c-1_i32_72 = arith.constant -1 : i32
    %235 = arith.xori %234, %c-1_i32_72 : i32
    %c7_i32_73 = arith.constant 7 : i32
    %c31_i32_74 = arith.constant 31 : i32
    %236 = arith.cmpi ule, %c7_i32_73, %c31_i32_74 : i32
    %237 = scf.if %236 -> (i32) {
      %421 = arith.shrui %235, %c7_i32_73 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %238 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_75 = arith.constant 6 : i32
    %c31_i32_76 = arith.constant 31 : i32
    %239 = arith.cmpi ule, %c6_i32_75, %c31_i32_76 : i32
    %240 = scf.if %239 -> (i32) {
      %421 = arith.shrui %238, %c6_i32_75 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %241 = arith.ori %237, %240 : i32
    %c16843009_i32_77 = arith.constant 16843009 : i32
    %242 = arith.andi %241, %c16843009_i32_77 : i32
    %243 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c8_i64 : i64
    %246 = llvm.getelementptr %12[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load volatile %246 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %247, %9 : i32, !llvm.ptr
    %c-1_i32_78 = arith.constant -1 : i32
    %248 = arith.xori %247, %c-1_i32_78 : i32
    %c7_i32_79 = arith.constant 7 : i32
    %c31_i32_80 = arith.constant 31 : i32
    %249 = arith.cmpi ule, %c7_i32_79, %c31_i32_80 : i32
    %250 = scf.if %249 -> (i32) {
      %421 = arith.shrui %248, %c7_i32_79 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %251 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_81 = arith.constant 6 : i32
    %c31_i32_82 = arith.constant 31 : i32
    %252 = arith.cmpi ule, %c6_i32_81, %c31_i32_82 : i32
    %253 = scf.if %252 -> (i32) {
      %421 = arith.shrui %251, %c6_i32_81 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %254 = arith.ori %250, %253 : i32
    %c16843009_i32_83 = arith.constant 16843009 : i32
    %255 = arith.andi %254, %c16843009_i32_83 : i32
    %256 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c4_i64 : i64
    %259 = llvm.getelementptr %12[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %260, %9 : i32, !llvm.ptr
    %c-1_i32_84 = arith.constant -1 : i32
    %261 = arith.xori %260, %c-1_i32_84 : i32
    %c7_i32_85 = arith.constant 7 : i32
    %c31_i32_86 = arith.constant 31 : i32
    %262 = arith.cmpi ule, %c7_i32_85, %c31_i32_86 : i32
    %263 = scf.if %262 -> (i32) {
      %421 = arith.shrui %261, %c7_i32_85 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %264 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_87 = arith.constant 6 : i32
    %c31_i32_88 = arith.constant 31 : i32
    %265 = arith.cmpi ule, %c6_i32_87, %c31_i32_88 : i32
    %266 = scf.if %265 -> (i32) {
      %421 = arith.shrui %264, %c6_i32_87 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %267 = arith.ori %263, %266 : i32
    %c16843009_i32_89 = arith.constant 16843009 : i32
    %268 = arith.andi %267, %c16843009_i32_89 : i32
    %269 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_90 = arith.constant 0 : i64
    %270 = arith.extui %269 : i32 to i64
    %271 = arith.addi %270, %c0_i64_90 : i64
    %272 = llvm.getelementptr %12[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = llvm.load volatile %272 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %273, %9 : i32, !llvm.ptr
    %c-1_i32_91 = arith.constant -1 : i32
    %274 = arith.xori %273, %c-1_i32_91 : i32
    %c7_i32_92 = arith.constant 7 : i32
    %c31_i32_93 = arith.constant 31 : i32
    %275 = arith.cmpi ule, %c7_i32_92, %c31_i32_93 : i32
    %276 = scf.if %275 -> (i32) {
      %421 = arith.shrui %274, %c7_i32_92 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %277 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_94 = arith.constant 6 : i32
    %c31_i32_95 = arith.constant 31 : i32
    %278 = arith.cmpi ule, %c6_i32_94, %c31_i32_95 : i32
    %279 = scf.if %278 -> (i32) {
      %421 = arith.shrui %277, %c6_i32_94 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %280 = arith.ori %276, %279 : i32
    %c16843009_i32_96 = arith.constant 16843009 : i32
    %281 = arith.andi %280, %c16843009_i32_96 : i32
    %282 = llvm.load %2 : !llvm.ptr -> i32
    %283 = arith.addi %281, %282 : i32
    %284 = arith.addi %268, %283 : i32
    %285 = arith.addi %255, %284 : i32
    %286 = arith.addi %242, %285 : i32
    llvm.store %286, %2 : i32, !llvm.ptr
    %287 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_97 = arith.constant 16 : i32
    %288 = arith.addi %287, %c16_i32_97 : i32
    llvm.store %288, %1 : i32, !llvm.ptr
    %289 = llvm.load %0 : !llvm.ptr -> i32
    %290 = arith.cmpi eq, %288, %289 : i32
    %291 = arith.extui %290 : i1 to i32
    %c0_i32_98 = arith.constant 0 : i32
    %292 = arith.cmpi eq, %291, %c0_i32_98 : i32
    %293 = arith.extui %292 : i1 to i32
    %c0_i32_99 = arith.constant 0 : i32
    %294 = arith.cmpi ne, %293, %c0_i32_99 : i32
    cf.cond_br %294, ^bb29, ^bb30
  ^bb30:  // pred: ^bb29
    cf.br ^bb28
  ^bb31:  // pred: ^bb26
    cf.br ^bb23
  ^bb32:  // 3 preds: ^bb23, ^bb33, ^bb34
    %295 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_100 = arith.constant 8 : i32
    %c31_i32_101 = arith.constant 31 : i32
    %296 = arith.cmpi ule, %c8_i32_100, %c31_i32_101 : i32
    %297 = scf.if %296 -> (i32) {
      %421 = arith.shrui %295, %c8_i32_100 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %c459007_i32 = arith.constant 459007 : i32
    %298 = arith.andi %297, %c459007_i32 : i32
    %299 = llvm.load %1 : !llvm.ptr -> i32
    %c16711935_i32_102 = arith.constant 16711935 : i32
    %300 = arith.andi %299, %c16711935_i32_102 : i32
    %301 = arith.addi %298, %300 : i32
    %c65537_i32_103 = arith.constant 65537 : i32
    %302 = arith.muli %301, %c65537_i32_103 : i32
    %c16_i32_104 = arith.constant 16 : i32
    %c31_i32_105 = arith.constant 31 : i32
    %303 = arith.cmpi ule, %c16_i32_104, %c31_i32_105 : i32
    %304 = scf.if %303 -> (i32) {
      %421 = arith.shrui %302, %c16_i32_104 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %305 = llvm.load %8 : !llvm.ptr -> i32
    %306 = arith.addi %304, %305 : i32
    cf.br ^bb2(%306 : i32)
  ^bb33:  // pred: ^bb23
    %307 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_106 = arith.constant 4 : i64
    %308 = arith.extui %307 : i32 to i64
    %309 = arith.addi %308, %c4_i64_106 : i64
    %310 = llvm.getelementptr %12[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load volatile %310 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %311, %9 : i32, !llvm.ptr
    %c-1_i32_107 = arith.constant -1 : i32
    %312 = arith.xori %311, %c-1_i32_107 : i32
    %c7_i32_108 = arith.constant 7 : i32
    %c31_i32_109 = arith.constant 31 : i32
    %313 = arith.cmpi ule, %c7_i32_108, %c31_i32_109 : i32
    %314 = scf.if %313 -> (i32) {
      %421 = arith.shrui %312, %c7_i32_108 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %315 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_110 = arith.constant 6 : i32
    %c31_i32_111 = arith.constant 31 : i32
    %316 = arith.cmpi ule, %c6_i32_110, %c31_i32_111 : i32
    %317 = scf.if %316 -> (i32) {
      %421 = arith.shrui %315, %c6_i32_110 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %318 = arith.ori %314, %317 : i32
    %c16843009_i32_112 = arith.constant 16843009 : i32
    %319 = arith.andi %318, %c16843009_i32_112 : i32
    %320 = llvm.load %1 : !llvm.ptr -> i32
    %321 = arith.addi %319, %320 : i32
    llvm.store %321, %1 : i32, !llvm.ptr
    %322 = llvm.load %7 : !llvm.ptr -> i32
    %c2_i32_113 = arith.constant 2 : i32
    %323 = arith.cmpi eq, %322, %c2_i32_113 : i32
    %324 = arith.extui %323 : i1 to i32
    %c0_i32_114 = arith.constant 0 : i32
    %325 = arith.cmpi ne, %324, %c0_i32_114 : i32
    cf.cond_br %325, ^bb32, ^bb34
  ^bb34:  // pred: ^bb33
    %326 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_115 = arith.constant 8 : i64
    %327 = arith.extui %326 : i32 to i64
    %328 = arith.addi %327, %c8_i64_115 : i64
    %329 = llvm.getelementptr %12[%328] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %330 = llvm.load volatile %329 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %330, %2 : i32, !llvm.ptr
    %c-1_i32_116 = arith.constant -1 : i32
    %331 = arith.xori %330, %c-1_i32_116 : i32
    %c7_i32_117 = arith.constant 7 : i32
    %c31_i32_118 = arith.constant 31 : i32
    %332 = arith.cmpi ule, %c7_i32_117, %c31_i32_118 : i32
    %333 = scf.if %332 -> (i32) {
      %421 = arith.shrui %331, %c7_i32_117 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %334 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i32_119 = arith.constant 6 : i32
    %c31_i32_120 = arith.constant 31 : i32
    %335 = arith.cmpi ule, %c6_i32_119, %c31_i32_120 : i32
    %336 = scf.if %335 -> (i32) {
      %421 = arith.shrui %334, %c6_i32_119 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %337 = arith.ori %333, %336 : i32
    %c16843009_i32_121 = arith.constant 16843009 : i32
    %338 = arith.andi %337, %c16843009_i32_121 : i32
    %339 = llvm.load %1 : !llvm.ptr -> i32
    %340 = arith.addi %338, %339 : i32
    llvm.store %340, %1 : i32, !llvm.ptr
    cf.br ^bb32
  ^bb35:  // pred: ^bb4
    %341 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_122 = arith.constant 3 : i32
    %342 = arith.andi %341, %c3_i32_122 : i32
    llvm.store %342, %9 : i32, !llvm.ptr
    %343 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_123 = arith.constant 4 : i32
    %344 = arith.cmpi uge, %343, %c4_i32_123 : i32
    %345 = arith.extui %344 : i1 to i32
    %c0_i32_124 = arith.constant 0 : i32
    %346 = arith.cmpi ne, %345, %c0_i32_124 : i32
    cf.cond_br %346, ^bb38, ^bb39
  ^bb36:  // pred: ^bb4
    %c0_i32_125 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_125 : i32)
  ^bb37:  // 2 preds: ^bb39, ^bb40
    %347 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_126 = arith.constant 0 : i32
    %348 = arith.cmpi eq, %347, %c0_i32_126 : i32
    %349 = arith.extui %348 : i1 to i32
    %c0_i32_127 = arith.constant 0 : i32
    %350 = arith.cmpi ne, %349, %c0_i32_127 : i32
    cf.cond_br %350, ^bb3, ^bb43
  ^bb38:  // pred: ^bb35
    %351 = llvm.load %1 : !llvm.ptr -> i32
    %c-4_i32_128 = arith.constant -4 : i32
    %352 = arith.andi %351, %c-4_i32_128 : i32
    llvm.store %352, %3 : i32, !llvm.ptr
    %c0_i32_129 = arith.constant 0 : i32
    llvm.store %c0_i32_129, %8 : i32, !llvm.ptr
    %c0_i32_130 = arith.constant 0 : i32
    llvm.store %c0_i32_130, %2 : i32, !llvm.ptr
    cf.br ^bb41
  ^bb39:  // pred: ^bb35
    %c0_i32_131 = arith.constant 0 : i32
    llvm.store %c0_i32_131, %8 : i32, !llvm.ptr
    %c0_i32_132 = arith.constant 0 : i32
    llvm.store %c0_i32_132, %2 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb40:  // pred: ^bb42
    cf.br ^bb37
  ^bb41:  // 2 preds: ^bb38, ^bb41
    %353 = llvm.load %8 : !llvm.ptr -> i32
    %354 = llvm.load %0 : !llvm.ptr -> i32
    %355 = llvm.load %2 : !llvm.ptr -> i32
    %356 = arith.addi %354, %355 : i32
    llvm.store %356, %1 : i32, !llvm.ptr
    %c0_i64_133 = arith.constant 0 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c0_i64_133 : i64
    %359 = llvm.getelementptr %12[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load volatile %359 {alignment = 1 : i64} : !llvm.ptr -> i8
    %361 = arith.extsi %360 : i8 to i32
    %c-65_i32_134 = arith.constant -65 : i32
    %362 = arith.cmpi sgt, %361, %c-65_i32_134 : i32
    %363 = arith.extui %362 : i1 to i32
    %364 = arith.addi %353, %363 : i32
    %365 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_135 = arith.constant 1 : i32
    %366 = arith.addi %365, %c1_i32_135 : i32
    %c0_i64_136 = arith.constant 0 : i64
    %367 = arith.extui %366 : i32 to i64
    %368 = arith.addi %367, %c0_i64_136 : i64
    %369 = llvm.getelementptr %12[%368] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %370 = llvm.load volatile %369 {alignment = 1 : i64} : !llvm.ptr -> i8
    %371 = arith.extsi %370 : i8 to i32
    %c-65_i32_137 = arith.constant -65 : i32
    %372 = arith.cmpi sgt, %371, %c-65_i32_137 : i32
    %373 = arith.extui %372 : i1 to i32
    %374 = arith.addi %364, %373 : i32
    %375 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32_138 = arith.constant 2 : i32
    %376 = arith.addi %375, %c2_i32_138 : i32
    %c0_i64_139 = arith.constant 0 : i64
    %377 = arith.extui %376 : i32 to i64
    %378 = arith.addi %377, %c0_i64_139 : i64
    %379 = llvm.getelementptr %12[%378] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %380 = llvm.load volatile %379 {alignment = 1 : i64} : !llvm.ptr -> i8
    %381 = arith.extsi %380 : i8 to i32
    %c-65_i32_140 = arith.constant -65 : i32
    %382 = arith.cmpi sgt, %381, %c-65_i32_140 : i32
    %383 = arith.extui %382 : i1 to i32
    %384 = arith.addi %374, %383 : i32
    %385 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_141 = arith.constant 3 : i32
    %386 = arith.addi %385, %c3_i32_141 : i32
    %c0_i64_142 = arith.constant 0 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c0_i64_142 : i64
    %389 = llvm.getelementptr %12[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i8
    %391 = arith.extsi %390 : i8 to i32
    %c-65_i32_143 = arith.constant -65 : i32
    %392 = arith.cmpi sgt, %391, %c-65_i32_143 : i32
    %393 = arith.extui %392 : i1 to i32
    %394 = arith.addi %384, %393 : i32
    llvm.store %394, %8 : i32, !llvm.ptr
    %395 = llvm.load %3 : !llvm.ptr -> i32
    %396 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_144 = arith.constant 4 : i32
    %397 = arith.addi %396, %c4_i32_144 : i32
    llvm.store %397, %2 : i32, !llvm.ptr
    %398 = arith.cmpi eq, %395, %397 : i32
    %399 = arith.extui %398 : i1 to i32
    %c0_i32_145 = arith.constant 0 : i32
    %400 = arith.cmpi eq, %399, %c0_i32_145 : i32
    %401 = arith.extui %400 : i1 to i32
    %c0_i32_146 = arith.constant 0 : i32
    %402 = arith.cmpi ne, %401, %c0_i32_146 : i32
    cf.cond_br %402, ^bb41, ^bb42
  ^bb42:  // pred: ^bb41
    cf.br ^bb40
  ^bb43:  // pred: ^bb37
    %403 = llvm.load %0 : !llvm.ptr -> i32
    %404 = llvm.load %2 : !llvm.ptr -> i32
    %405 = arith.addi %403, %404 : i32
    llvm.store %405, %1 : i32, !llvm.ptr
    cf.br ^bb45
  ^bb44:  // pred: ^bb46
    cf.br ^bb3
  ^bb45:  // 2 preds: ^bb43, ^bb45
    %406 = llvm.load %8 : !llvm.ptr -> i32
    %407 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_147 = arith.constant 0 : i64
    %408 = arith.extui %407 : i32 to i64
    %409 = arith.addi %408, %c0_i64_147 : i64
    %410 = llvm.getelementptr %12[%409] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %411 = llvm.load volatile %410 {alignment = 1 : i64} : !llvm.ptr -> i8
    %412 = arith.extsi %411 : i8 to i32
    %c-65_i32_148 = arith.constant -65 : i32
    %413 = arith.cmpi sgt, %412, %c-65_i32_148 : i32
    %414 = arith.extui %413 : i1 to i32
    %415 = arith.addi %406, %414 : i32
    llvm.store %415, %8 : i32, !llvm.ptr
    %416 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_149 = arith.constant 1 : i32
    %417 = arith.addi %416, %c1_i32_149 : i32
    llvm.store %417, %1 : i32, !llvm.ptr
    %418 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32_150 = arith.constant -1 : i32
    %419 = arith.addi %418, %c-1_i32_150 : i32
    llvm.store %419, %9 : i32, !llvm.ptr
    %c0_i32_151 = arith.constant 0 : i32
    %420 = arith.cmpi ne, %419, %c0_i32_151 : i32
    cf.cond_br %420, ^bb45, ^bb46
  ^bb46:  // pred: ^bb45
    cf.br ^bb44
  }
  func.func @f51(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %10 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %11 : !llvm.ptr -> i64
    %14 = arith.trunci %13 : i64 to i32
    %15 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> i32
    %17 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %11 : !llvm.ptr -> i64
    %19 = arith.trunci %18 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %21 = arith.cmpi eq, %20, %c1114112_i32 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32 : i32
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2(%24: i32):  // 3 preds: ^bb13, ^bb15, ^bb22
    return %24 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb11
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_4 : i32
    cf.cond_br %26, ^bb14, ^bb15
  ^bb4:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c16_i64 : i64
    %32 = llvm.getelementptr %7[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    %34 = arith.cmpi ult, %33, %14 : i32
    cf.cond_br %34, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %35 = llvm.getelementptr inbounds %12[%33] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %36 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.ptrtoint %36 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %38 = arith.cmpi eq, %37, %c0_i64 : i64
    cf.cond_br %38, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %39 = llvm.getelementptr %36[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %40 = llvm.getelementptr %36[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %41 = llvm.getelementptr %36[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %42 = llvm.load %39 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    %44 = llvm.ptrtoint %42 : !llvm.ptr to i64
    %c0_i64_5 = arith.constant 0 : i64
    %45 = arith.cmpi eq, %44, %c0_i64_5 : i64
    cf.cond_br %45, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %46 = llvm.load %40 : !llvm.ptr -> i32
    %47 = arith.cmpi ne, %9, %46 : i32
    cf.cond_br %47, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_6 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_6) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %48 = llvm.call %42(%43, %27, %28) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %49 = arith.cmpi eq, %48, %c0_i32_7 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_8 : i32
    cf.cond_br %51, ^bb3, ^bb13
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // pred: ^bb11
    %c1_i32_9 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_9 : i32)
  ^bb14:  // pred: ^bb3
    %52 = llvm.load %0 : !llvm.ptr -> i32
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %4 : !llvm.ptr -> i32
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c12_i64 : i64
    %58 = llvm.getelementptr %7[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi ult, %59, %19 : i32
    cf.cond_br %60, ^bb16, ^bb17
  ^bb15:  // pred: ^bb3
    %c0_i32_10 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_10 : i32)
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %61 = llvm.getelementptr inbounds %17[%59] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.ptrtoint %62 : !llvm.ptr to i64
    %c0_i64_11 = arith.constant 0 : i64
    %64 = arith.cmpi eq, %63, %c0_i64_11 : i64
    cf.cond_br %64, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c3_i32_12 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_12) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %65 = llvm.getelementptr %62[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %66 = llvm.getelementptr %62[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %67 = llvm.getelementptr %62[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %68 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64_13 = arith.constant 0 : i64
    %71 = arith.cmpi eq, %70, %c0_i64_13 : i64
    cf.cond_br %71, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c4_i32_14 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_14) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %72 = llvm.load %66 : !llvm.ptr -> i32
    %73 = arith.cmpi ne, %16, %72 : i32
    cf.cond_br %73, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c3_i32_15 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_15) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %74 = llvm.call %68(%69, %52, %53, %54) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%74 : i32)
  ^bb23:  // pred: ^bb20
    %c5_i32_16 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_16) : (i32) -> ()
    cf.br ^bb22
  }
  func.func @f52(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c20_i64 : i64
    %16 = llvm.getelementptr %5[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c24_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c12_i64 : i64
    %27 = llvm.getelementptr %5[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %29 = arith.cmpi ult, %28, %12 : i32
    cf.cond_br %29, ^bb3, ^bb4
  ^bb2(%30: i32):  // pred: ^bb9
    return %30 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %31 = llvm.getelementptr inbounds %10[%28] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %32 = llvm.load %31 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.ptrtoint %32 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %34 = arith.cmpi eq, %33, %c0_i64 : i64
    cf.cond_br %34, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %35 = llvm.getelementptr %32[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.getelementptr %32[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %37 = llvm.getelementptr %32[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %38 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %39 = llvm.load %37 : !llvm.ptr -> !llvm.ptr
    %40 = llvm.ptrtoint %38 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %41 = arith.cmpi eq, %40, %c0_i64_2 : i64
    cf.cond_br %41, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %42 = llvm.load %36 : !llvm.ptr -> i32
    %43 = arith.cmpi ne, %7, %42 : i32
    cf.cond_br %43, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %44 = llvm.call %38(%39, %17, %18, %19) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%44 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f53(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.subi %14, %c16_i32 : i32
    llvm.store %15, %3 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %c10_i32 = arith.constant 10 : i32
    llvm.store %c10_i32, %4 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c10000_i32 = arith.constant 10000 : i32
    %17 = arith.cmpi uge, %16, %c10000_i32 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_8 : i32
    cf.cond_br %19, ^bb4, ^bb5
  ^bb2(%20: i32):  // pred: ^bb12
    return %20 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb6
    %21 = llvm.load %5 : !llvm.ptr -> i32
    %c99_i32 = arith.constant 99 : i32
    %22 = arith.cmpi ugt, %21, %c99_i32 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_9 : i32
    cf.cond_br %24, ^bb10, ^bb11
  ^bb4:  // pred: ^bb1
    %c10_i32_10 = arith.constant 10 : i32
    llvm.store %c10_i32_10, %4 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb5:  // pred: ^bb1
    %25 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %25, %5 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb8
    cf.br ^bb3
  ^bb7:  // 2 preds: ^bb4, ^bb7
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %27 = arith.addi %26, %c6_i32 : i32
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    llvm.store %29, %6 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %30 = arith.addi %29, %c-4_i32 : i32
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c10000_i32_11 = arith.constant 10000 : i32
    %33 = arith.divui %32, %c10000_i32_11 : i32
    %c0_i32_12 = arith.constant 0 : i32
    %34 = arith.cmpi eq, %c10000_i32_11, %c0_i32_12 : i32
    %35 = arith.select %34, %c0_i32_12, %33 : i32
    llvm.store %35, %5 : i32, !llvm.ptr
    %c10000_i32_13 = arith.constant 10000 : i32
    %36 = arith.muli %35, %c10000_i32_13 : i32
    %37 = arith.subi %31, %36 : i32
    llvm.store %37, %7 : i32, !llvm.ptr
    %c65535_i32 = arith.constant 65535 : i32
    %38 = arith.andi %37, %c65535_i32 : i32
    %c100_i32 = arith.constant 100 : i32
    %39 = arith.divui %38, %c100_i32 : i32
    %c0_i32_14 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %c100_i32, %c0_i32_14 : i32
    %41 = arith.select %40, %c0_i32_14, %39 : i32
    llvm.store %41, %8 : i32, !llvm.ptr
    %c1_i32_15 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %42 = arith.cmpi ule, %c1_i32_15, %c31_i32 : i32
    %43 = scf.if %42 -> (i32) {
      %153 = arith.shli %41, %c1_i32_15 : i32
      scf.yield %153 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    %c1049060_i32 = arith.constant 1049060 : i32
    %44 = arith.addi %43, %c1049060_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c0_i64 : i64
    %47 = llvm.getelementptr %13[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i16
    %49 = arith.extui %48 : i16 to i32
    %c0_i64_16 = arith.constant 0 : i64
    %50 = arith.extui %30 : i32 to i64
    %51 = arith.addi %50, %c0_i64_16 : i64
    %52 = llvm.getelementptr %13[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = arith.trunci %49 : i32 to i16
    llvm.store volatile %53, %52 {alignment = 1 : i64} : i16, !llvm.ptr
    %54 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %55 = arith.addi %54, %c-2_i32 : i32
    %56 = llvm.load %7 : !llvm.ptr -> i32
    %57 = llvm.load %8 : !llvm.ptr -> i32
    %c100_i32_17 = arith.constant 100 : i32
    %58 = arith.muli %57, %c100_i32_17 : i32
    %59 = arith.subi %56, %58 : i32
    %c65535_i32_18 = arith.constant 65535 : i32
    %60 = arith.andi %59, %c65535_i32_18 : i32
    %c1_i32_19 = arith.constant 1 : i32
    %c31_i32_20 = arith.constant 31 : i32
    %61 = arith.cmpi ule, %c1_i32_19, %c31_i32_20 : i32
    %62 = scf.if %61 -> (i32) {
      %153 = arith.shli %60, %c1_i32_19 : i32
      scf.yield %153 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    %c1049060_i32_21 = arith.constant 1049060 : i32
    %63 = arith.addi %62, %c1049060_i32_21 : i32
    %c0_i64_22 = arith.constant 0 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c0_i64_22 : i64
    %66 = llvm.getelementptr %13[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i16
    %68 = arith.extui %67 : i16 to i32
    %c0_i64_23 = arith.constant 0 : i64
    %69 = arith.extui %55 : i32 to i64
    %70 = arith.addi %69, %c0_i64_23 : i64
    %71 = llvm.getelementptr %13[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = arith.trunci %68 : i32 to i16
    llvm.store volatile %72, %71 {alignment = 1 : i64} : i16, !llvm.ptr
    %73 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_24 = arith.constant -4 : i32
    %74 = arith.addi %73, %c-4_i32_24 : i32
    llvm.store %74, %4 : i32, !llvm.ptr
    %75 = llvm.load %0 : !llvm.ptr -> i32
    %c99999999_i32 = arith.constant 99999999 : i32
    %76 = arith.cmpi ugt, %75, %c99999999_i32 : i32
    %77 = arith.extui %76 : i1 to i32
    llvm.store %77, %6 : i32, !llvm.ptr
    %78 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %78, %0 : i32, !llvm.ptr
    %79 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_25 = arith.constant 0 : i32
    %80 = arith.cmpi ne, %79, %c0_i32_25 : i32
    cf.cond_br %80, ^bb7, ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb10, ^bb11
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %c10_i32_26 = arith.constant 10 : i32
    %82 = arith.cmpi ult, %81, %c10_i32_26 : i32
    %83 = arith.extui %82 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_27 : i32
    cf.cond_br %84, ^bb13, ^bb14
  ^bb10:  // pred: ^bb3
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_28 = arith.constant 6 : i32
    %86 = arith.addi %85, %c6_i32_28 : i32
    %87 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_29 = arith.constant -2 : i32
    %88 = arith.addi %87, %c-2_i32_29 : i32
    llvm.store %88, %4 : i32, !llvm.ptr
    %89 = arith.addi %86, %88 : i32
    %90 = llvm.load %5 : !llvm.ptr -> i32
    %91 = llvm.load %5 : !llvm.ptr -> i32
    %c65535_i32_30 = arith.constant 65535 : i32
    %92 = arith.andi %91, %c65535_i32_30 : i32
    %c100_i32_31 = arith.constant 100 : i32
    %93 = arith.divui %92, %c100_i32_31 : i32
    %c0_i32_32 = arith.constant 0 : i32
    %94 = arith.cmpi eq, %c100_i32_31, %c0_i32_32 : i32
    %95 = arith.select %94, %c0_i32_32, %93 : i32
    llvm.store %95, %0 : i32, !llvm.ptr
    %c100_i32_33 = arith.constant 100 : i32
    %96 = arith.muli %95, %c100_i32_33 : i32
    %97 = arith.subi %90, %96 : i32
    %c65535_i32_34 = arith.constant 65535 : i32
    %98 = arith.andi %97, %c65535_i32_34 : i32
    %c1_i32_35 = arith.constant 1 : i32
    %c31_i32_36 = arith.constant 31 : i32
    %99 = arith.cmpi ule, %c1_i32_35, %c31_i32_36 : i32
    %100 = scf.if %99 -> (i32) {
      %153 = arith.shli %98, %c1_i32_35 : i32
      scf.yield %153 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    %c1049060_i32_37 = arith.constant 1049060 : i32
    %101 = arith.addi %100, %c1049060_i32_37 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_38 : i64
    %104 = llvm.getelementptr %13[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i16
    %106 = arith.extui %105 : i16 to i32
    %c0_i64_39 = arith.constant 0 : i64
    %107 = arith.extui %89 : i32 to i64
    %108 = arith.addi %107, %c0_i64_39 : i64
    %109 = llvm.getelementptr %13[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = arith.trunci %106 : i32 to i16
    llvm.store volatile %110, %109 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // pred: ^bb3
    %111 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %111, %0 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // 2 preds: ^bb13, ^bb14
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %113 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_40 = arith.constant 1 : i32
    %c0_i32_41 = arith.constant 0 : i32
    %114 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_42 = arith.constant 6 : i32
    %115 = arith.addi %114, %c6_i32_42 : i32
    %116 = llvm.load %4 : !llvm.ptr -> i32
    %117 = arith.addi %115, %116 : i32
    %c10_i32_43 = arith.constant 10 : i32
    %118 = llvm.load %4 : !llvm.ptr -> i32
    %119 = arith.subi %c10_i32_43, %118 : i32
    %120 = call @f49(%arg0, %112, %113, %c1_i32_40, %c0_i32_41, %117, %119) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %120, %0 : i32, !llvm.ptr
    %121 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_44 = arith.constant 16 : i32
    %122 = arith.addi %121, %c16_i32_44 : i32
    llvm.store %122, %10 : i32, !llvm.ptr
    %123 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%123 : i32)
  ^bb13:  // pred: ^bb9
    %124 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_45 = arith.constant 6 : i32
    %125 = arith.addi %124, %c6_i32_45 : i32
    %126 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %127 = arith.addi %126, %c-1_i32 : i32
    llvm.store %127, %4 : i32, !llvm.ptr
    %128 = arith.addi %125, %127 : i32
    %129 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %130 = arith.ori %129, %c48_i32 : i32
    %c0_i64_46 = arith.constant 0 : i64
    %131 = arith.extui %128 : i32 to i64
    %132 = arith.addi %131, %c0_i64_46 : i64
    %133 = llvm.getelementptr %13[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = arith.trunci %130 : i32 to i8
    llvm.store volatile %134, %133 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb12
  ^bb14:  // pred: ^bb9
    %135 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_47 = arith.constant 6 : i32
    %136 = arith.addi %135, %c6_i32_47 : i32
    %137 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_48 = arith.constant -2 : i32
    %138 = arith.addi %137, %c-2_i32_48 : i32
    llvm.store %138, %4 : i32, !llvm.ptr
    %139 = arith.addi %136, %138 : i32
    %140 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_49 = arith.constant 1 : i32
    %c31_i32_50 = arith.constant 31 : i32
    %141 = arith.cmpi ule, %c1_i32_49, %c31_i32_50 : i32
    %142 = scf.if %141 -> (i32) {
      %153 = arith.shli %140, %c1_i32_49 : i32
      scf.yield %153 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    %c1049060_i32_51 = arith.constant 1049060 : i32
    %143 = arith.addi %142, %c1049060_i32_51 : i32
    %c0_i64_52 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_52 : i64
    %146 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i16
    %148 = arith.extui %147 : i16 to i32
    %c0_i64_53 = arith.constant 0 : i64
    %149 = arith.extui %139 : i32 to i64
    %150 = arith.addi %149, %c0_i64_53 : i64
    %151 = llvm.getelementptr %13[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = arith.trunci %148 : i32 to i16
    llvm.store volatile %152, %151 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb12
  }
  func.func @f54(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %11 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.cmpi uge, %14, %c16_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_10 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb22
    return %18 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb11
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_11 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_12 : i32
    cf.cond_br %22, ^bb22, ^bb23
  ^bb4:  // pred: ^bb1
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = arith.subi %c0_i32_13, %24 : i32
    %c3_i32 = arith.constant 3 : i32
    %26 = arith.andi %25, %c3_i32 : i32
    llvm.store %26, %4 : i32, !llvm.ptr
    %27 = arith.addi %23, %26 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_14 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_15 : i32
    cf.cond_br %31, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %32 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %32, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb8
    %33 = llvm.load %5 : !llvm.ptr -> i32
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %4 : !llvm.ptr -> i32
    %36 = arith.subi %34, %35 : i32
    llvm.store %36, %7 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %37 = arith.andi %36, %c-4_i32 : i32
    llvm.store %37, %8 : i32, !llvm.ptr
    %38 = arith.addi %33, %37 : i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %c3_i32_16 = arith.constant 3 : i32
    %42 = arith.andi %41, %c3_i32_16 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_17 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_18 : i32
    cf.cond_br %45, ^bb12, ^bb13
  ^bb7:  // pred: ^bb4
    %46 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %46, %3 : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %47, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb8:  // pred: ^bb10
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb7, ^bb9
    %48 = llvm.load %3 : !llvm.ptr -> i32
    %49 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64 : i64
    %52 = llvm.getelementptr %13[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i8
    %54 = arith.extui %53 : i8 to i32
    %c0_i64_19 = arith.constant 0 : i64
    %55 = arith.extui %48 : i32 to i64
    %56 = arith.addi %55, %c0_i64_19 : i64
    %57 = llvm.getelementptr %13[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = arith.trunci %54 : i32 to i8
    llvm.store volatile %58, %57 {alignment = 1 : i64} : i8, !llvm.ptr
    %59 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %60 = arith.addi %59, %c1_i32_20 : i32
    llvm.store %60, %6 : i32, !llvm.ptr
    %61 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_21 = arith.constant 1 : i32
    %62 = arith.addi %61, %c1_i32_21 : i32
    llvm.store %62, %3 : i32, !llvm.ptr
    %63 = llvm.load %5 : !llvm.ptr -> i32
    %64 = arith.cmpi ult, %62, %63 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %66 = arith.cmpi ne, %65, %c0_i32_22 : i32
    cf.cond_br %66, ^bb9, ^bb10
  ^bb10:  // pred: ^bb9
    cf.br ^bb8
  ^bb11:  // 4 preds: ^bb12, ^bb13, ^bb17, ^bb19
    %67 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_23 = arith.constant 3 : i32
    %68 = arith.andi %67, %c3_i32_23 : i32
    llvm.store %68, %2 : i32, !llvm.ptr
    %69 = llvm.load %9 : !llvm.ptr -> i32
    %70 = llvm.load %8 : !llvm.ptr -> i32
    %71 = arith.addi %69, %70 : i32
    llvm.store %71, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // 2 preds: ^bb6, ^bb15
    %72 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %73 = arith.cmpi slt, %72, %c1_i32_24 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_25 : i32
    cf.cond_br %75, ^bb11, ^bb18
  ^bb13:  // pred: ^bb6
    %76 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_26 = arith.constant 1 : i32
    %77 = arith.cmpi slt, %76, %c1_i32_26 : i32
    %78 = arith.extui %77 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %78, %c0_i32_27 : i32
    cf.cond_br %79, ^bb11, ^bb14
  ^bb14:  // pred: ^bb13
    %80 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i32_28 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %81 = arith.cmpi ule, %c3_i32_28, %c31_i32 : i32
    %82 = scf.if %81 -> (i32) {
      %161 = arith.shli %80, %c3_i32_28 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_50 = arith.constant 0 : i32
      scf.yield %c0_i32_50 : i32
    }
    llvm.store %82, %6 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %83 = arith.andi %82, %c24_i32 : i32
    llvm.store %83, %2 : i32, !llvm.ptr
    %84 = llvm.load %9 : !llvm.ptr -> i32
    %c-4_i32_29 = arith.constant -4 : i32
    %85 = arith.andi %84, %c-4_i32_29 : i32
    llvm.store %85, %10 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %86 = arith.addi %85, %c4_i32 : i32
    llvm.store %86, %1 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %87 = llvm.load %6 : !llvm.ptr -> i32
    %88 = arith.subi %c0_i32_30, %87 : i32
    %c24_i32_31 = arith.constant 24 : i32
    %89 = arith.andi %88, %c24_i32_31 : i32
    llvm.store %89, %4 : i32, !llvm.ptr
    %90 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64_32 : i64
    %93 = llvm.getelementptr %13[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %94, %6 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb15:  // no predecessors
    cf.br ^bb12
  ^bb16:  // 2 preds: ^bb14, ^bb16
    %95 = llvm.load %5 : !llvm.ptr -> i32
    %96 = llvm.load %6 : !llvm.ptr -> i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_33 = arith.constant 31 : i32
    %98 = arith.cmpi ule, %97, %c31_i32_33 : i32
    %99 = scf.if %98 -> (i32) {
      %161 = arith.shrui %96, %97 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_50 = arith.constant 0 : i32
      scf.yield %c0_i32_50 : i32
    }
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_34 : i64
    %103 = llvm.getelementptr %13[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %104, %6 : i32, !llvm.ptr
    %105 = llvm.load %4 : !llvm.ptr -> i32
    %c31_i32_35 = arith.constant 31 : i32
    %106 = arith.cmpi ule, %105, %c31_i32_35 : i32
    %107 = scf.if %106 -> (i32) {
      %161 = arith.shli %104, %105 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_50 = arith.constant 0 : i32
      scf.yield %c0_i32_50 : i32
    }
    %108 = arith.ori %99, %107 : i32
    %c0_i64_36 = arith.constant 0 : i64
    %109 = arith.extui %95 : i32 to i64
    %110 = arith.addi %109, %c0_i64_36 : i64
    %111 = llvm.getelementptr %13[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i32, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_37 = arith.constant 4 : i32
    %113 = arith.addi %112, %c4_i32_37 : i32
    llvm.store %113, %1 : i32, !llvm.ptr
    %114 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_38 = arith.constant 4 : i32
    %115 = arith.addi %114, %c4_i32_38 : i32
    llvm.store %115, %5 : i32, !llvm.ptr
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %117 = arith.cmpi ult, %115, %116 : i32
    %118 = arith.extui %117 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %119 = arith.cmpi ne, %118, %c0_i32_39 : i32
    cf.cond_br %119, ^bb16, ^bb17
  ^bb17:  // pred: ^bb16
    cf.br ^bb11
  ^bb18:  // pred: ^bb12
    %120 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %120, %1 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb19:  // pred: ^bb21
    cf.br ^bb11
  ^bb20:  // 2 preds: ^bb18, ^bb20
    %121 = llvm.load %5 : !llvm.ptr -> i32
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_40 : i64
    %125 = llvm.getelementptr %13[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_41 = arith.constant 0 : i64
    %127 = arith.extui %121 : i32 to i64
    %128 = arith.addi %127, %c0_i64_41 : i64
    %129 = llvm.getelementptr %13[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %129 {alignment = 1 : i64} : i32, !llvm.ptr
    %130 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_42 = arith.constant 4 : i32
    %131 = arith.addi %130, %c4_i32_42 : i32
    llvm.store %131, %1 : i32, !llvm.ptr
    %132 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_43 = arith.constant 4 : i32
    %133 = arith.addi %132, %c4_i32_43 : i32
    llvm.store %133, %5 : i32, !llvm.ptr
    %134 = llvm.load %3 : !llvm.ptr -> i32
    %135 = arith.cmpi ult, %133, %134 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_44 : i32
    cf.cond_br %137, ^bb20, ^bb21
  ^bb21:  // pred: ^bb20
    cf.br ^bb19
  ^bb22:  // 2 preds: ^bb3, ^bb24
    %138 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%138 : i32)
  ^bb23:  // pred: ^bb3
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %140 = llvm.load %2 : !llvm.ptr -> i32
    %141 = arith.addi %139, %140 : i32
    llvm.store %141, %5 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb24:  // pred: ^bb26
    cf.br ^bb22
  ^bb25:  // 2 preds: ^bb23, ^bb25
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_45 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_45 : i64
    %146 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i8
    %148 = arith.extui %147 : i8 to i32
    %c0_i64_46 = arith.constant 0 : i64
    %149 = arith.extui %142 : i32 to i64
    %150 = arith.addi %149, %c0_i64_46 : i64
    %151 = llvm.getelementptr %13[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = arith.trunci %148 : i32 to i8
    llvm.store volatile %152, %151 {alignment = 1 : i64} : i8, !llvm.ptr
    %153 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_47 = arith.constant 1 : i32
    %154 = arith.addi %153, %c1_i32_47 : i32
    llvm.store %154, %1 : i32, !llvm.ptr
    %155 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_48 = arith.constant 1 : i32
    %156 = arith.addi %155, %c1_i32_48 : i32
    llvm.store %156, %3 : i32, !llvm.ptr
    %157 = llvm.load %5 : !llvm.ptr -> i32
    %158 = arith.cmpi ult, %156, %157 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %160 = arith.cmpi ne, %159, %c0_i32_49 : i32
    cf.cond_br %160, ^bb25, ^bb26
  ^bb26:  // pred: ^bb25
    cf.br ^bb24
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
