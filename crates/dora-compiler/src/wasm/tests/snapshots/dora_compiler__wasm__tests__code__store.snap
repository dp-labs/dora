---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @f0(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c0_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c1_i32, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb1:  // pred: ^bb2
    return
  ^bb2:  // pred: ^bb0
    cf.br ^bb1
  }
  func.func @f1(%arg0: !llvm.ptr) {
    cf.br ^bb3
  ^bb1:  // pred: ^bb2
    return
  ^bb2:  // pred: ^bb3
    cf.br ^bb1
  ^bb3:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c0_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c1_i32, %5 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f2(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c0_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c1_i32, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb1:  // pred: ^bb2
    return
  ^bb2:  // pred: ^bb0
    cf.br ^bb1
  }
  func.func @f3(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c0_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c1_i32, %5 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c1_i32_0, %c0_i32_1 : i32
    cf.cond_br %6, ^bb2, ^bb3
  ^bb1:  // pred: ^bb2
    return
  ^bb2:  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1
  ^bb3:  // pred: ^bb0
    cf.br ^bb2
  }
  func.func @f4(%arg0: !llvm.ptr) {
    %c6_i32 = arith.constant 6 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c0_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c1_i32, %5 : i32, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c6_i32, %c0_i32_0 : i32
    cf.cond_br %6, ^bb2, ^bb3
  ^bb1:  // pred: ^bb2
    return
  ^bb2:  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1
  ^bb3:  // pred: ^bb0
    cf.br ^bb2
  }
  func.func @f5(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c0_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c1_i32, %5 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    cf.switch %c1_i32_0 : i32, [
      default: ^bb2
    ]
  ^bb1:  // pred: ^bb2
    return
  ^bb2:  // pred: ^bb0
    cf.br ^bb1
  }
  func.func @f6(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.extui %c0_i32 : i32 to i64
    %1 = arith.addi %0, %c0_i64 : i64
    %2 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %4[%1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c1_i32, %5 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f7(%arg0: !llvm.ptr) {
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb2, ^bb3
  ^bb1:  // pred: ^bb4
    return
  ^bb2:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.extui %c0_i32_0 : i32 to i64
    %2 = arith.addi %1, %c0_i64 : i64
    %3 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %5[%2] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c1_i32_1, %6 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb3:  // pred: ^bb0
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1
  }
  func.func @f8(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c0_i32, %c0_i32_0 : i32
    cf.cond_br %0, ^bb2, ^bb3
  ^bb1:  // pred: ^bb4
    return
  ^bb2:  // pred: ^bb0
    cf.br ^bb4
  ^bb3:  // pred: ^bb0
    %c0_i32_1 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.extui %c0_i32_1 : i32 to i64
    %2 = arith.addi %1, %c0_i64 : i64
    %3 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %5[%2] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c1_i32, %6 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1
  }
}
