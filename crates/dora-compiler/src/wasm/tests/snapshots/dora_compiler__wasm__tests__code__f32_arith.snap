---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: module.module().as_operation()
snapshot_kind: text
---
"builtin.module"() ({
  "func.func"() <{function_type = (f32, f32) -> f32, sym_name = "f0"}> ({
  ^bb0(%arg31: f32, %arg32: f32):
    %131 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %132 = "llvm.alloca"(%131) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg31, %132) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %133 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %134 = "llvm.alloca"(%133) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg32, %134) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %135 = "llvm.load"(%132) <{ordering = 0 : i64}> : (f32) -> f32
    %136 = "llvm.load"(%134) <{ordering = 0 : i64}> : (f32) -> f32
    %137 = "wasm.add"(%135, %136) : (f32, f32) -> f32
    "cf.br"(%137)[^bb1] : (f32) -> ()
  ^bb1(%138: f32):  // pred: ^bb0
    "func.return"(%138) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32, f32) -> f32, sym_name = "f1"}> ({
  ^bb0(%arg29: f32, %arg30: f32):
    %123 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %124 = "llvm.alloca"(%123) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg29, %124) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %125 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %126 = "llvm.alloca"(%125) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg30, %126) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %127 = "llvm.load"(%124) <{ordering = 0 : i64}> : (f32) -> f32
    %128 = "llvm.load"(%126) <{ordering = 0 : i64}> : (f32) -> f32
    %129 = "wasm.sub"(%127, %128) : (f32, f32) -> f32
    "cf.br"(%129)[^bb1] : (f32) -> ()
  ^bb1(%130: f32):  // pred: ^bb0
    "func.return"(%130) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32, f32) -> f32, sym_name = "f2"}> ({
  ^bb0(%arg27: f32, %arg28: f32):
    %115 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %116 = "llvm.alloca"(%115) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg27, %116) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %117 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %118 = "llvm.alloca"(%117) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg28, %118) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %119 = "llvm.load"(%116) <{ordering = 0 : i64}> : (f32) -> f32
    %120 = "llvm.load"(%118) <{ordering = 0 : i64}> : (f32) -> f32
    %121 = "wasm.mul"(%119, %120) : (f32, f32) -> f32
    "cf.br"(%121)[^bb1] : (f32) -> ()
  ^bb1(%122: f32):  // pred: ^bb0
    "func.return"(%122) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32, f32) -> f32, sym_name = "f3"}> ({
  ^bb0(%arg25: f32, %arg26: f32):
    %107 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %108 = "llvm.alloca"(%107) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg25, %108) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %109 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %110 = "llvm.alloca"(%109) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg26, %110) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %111 = "llvm.load"(%108) <{ordering = 0 : i64}> : (f32) -> f32
    %112 = "llvm.load"(%110) <{ordering = 0 : i64}> : (f32) -> f32
    %113 = "wasm.div"(%111, %112) : (f32, f32) -> f32
    "cf.br"(%113)[^bb1] : (f32) -> ()
  ^bb1(%114: f32):  // pred: ^bb0
    "func.return"(%114) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32) -> f32, sym_name = "f4"}> ({
  ^bb0(%arg24: f32):
    %102 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %103 = "llvm.alloca"(%102) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg24, %103) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %104 = "llvm.load"(%103) <{ordering = 0 : i64}> : (f32) -> f32
    %105 = "wasm.sqrt"(%104) : (f32) -> f32
    "cf.br"(%105)[^bb1] : (f32) -> ()
  ^bb1(%106: f32):  // pred: ^bb0
    "func.return"(%106) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32, f32) -> f32, sym_name = "f5"}> ({
  ^bb0(%arg22: f32, %arg23: f32):
    %94 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %95 = "llvm.alloca"(%94) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg22, %95) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %96 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %97 = "llvm.alloca"(%96) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg23, %97) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %98 = "llvm.load"(%95) <{ordering = 0 : i64}> : (f32) -> f32
    %99 = "llvm.load"(%97) <{ordering = 0 : i64}> : (f32) -> f32
    %100 = "wasm.min"(%98, %99) : (f32, f32) -> f32
    "cf.br"(%100)[^bb1] : (f32) -> ()
  ^bb1(%101: f32):  // pred: ^bb0
    "func.return"(%101) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32, f32) -> f32, sym_name = "f6"}> ({
  ^bb0(%arg20: f32, %arg21: f32):
    %86 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %87 = "llvm.alloca"(%86) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg20, %87) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %88 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %89 = "llvm.alloca"(%88) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg21, %89) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %90 = "llvm.load"(%87) <{ordering = 0 : i64}> : (f32) -> f32
    %91 = "llvm.load"(%89) <{ordering = 0 : i64}> : (f32) -> f32
    %92 = "wasm.max"(%90, %91) : (f32, f32) -> f32
    "cf.br"(%92)[^bb1] : (f32) -> ()
  ^bb1(%93: f32):  // pred: ^bb0
    "func.return"(%93) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32) -> f32, sym_name = "f7"}> ({
  ^bb0(%arg19: f32):
    %81 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %82 = "llvm.alloca"(%81) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg19, %82) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %83 = "llvm.load"(%82) <{ordering = 0 : i64}> : (f32) -> f32
    %84 = "wasm.ceil"(%83) : (f32) -> f32
    "cf.br"(%84)[^bb1] : (f32) -> ()
  ^bb1(%85: f32):  // pred: ^bb0
    "func.return"(%85) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32) -> f32, sym_name = "f8"}> ({
  ^bb0(%arg18: f32):
    %76 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %77 = "llvm.alloca"(%76) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg18, %77) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %78 = "llvm.load"(%77) <{ordering = 0 : i64}> : (f32) -> f32
    %79 = "wasm.floor"(%78) : (f32) -> f32
    "cf.br"(%79)[^bb1] : (f32) -> ()
  ^bb1(%80: f32):  // pred: ^bb0
    "func.return"(%80) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32) -> f32, sym_name = "f9"}> ({
  ^bb0(%arg17: f32):
    %71 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %72 = "llvm.alloca"(%71) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg17, %72) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %73 = "llvm.load"(%72) <{ordering = 0 : i64}> : (f32) -> f32
    %74 = "wasm.trunc"(%73) : (f32) -> f32
    "cf.br"(%74)[^bb1] : (f32) -> ()
  ^bb1(%75: f32):  // pred: ^bb0
    "func.return"(%75) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32) -> f32, sym_name = "f10"}> ({
  ^bb0(%arg16: f32):
    %66 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %67 = "llvm.alloca"(%66) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg16, %67) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %68 = "llvm.load"(%67) <{ordering = 0 : i64}> : (f32) -> f32
    %69 = "wasm.nearest"(%68) : (f32) -> f32
    "cf.br"(%69)[^bb1] : (f32) -> ()
  ^bb1(%70: f32):  // pred: ^bb0
    "func.return"(%70) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32) -> f32, sym_name = "f11"}> ({
  ^bb0(%arg15: f32):
    %61 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %62 = "llvm.alloca"(%61) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg15, %62) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %63 = "llvm.load"(%62) <{ordering = 0 : i64}> : (f32) -> f32
    %64 = "wasm.abs"(%63) : (f32) -> f32
    "cf.br"(%64)[^bb1] : (f32) -> ()
  ^bb1(%65: f32):  // pred: ^bb0
    "func.return"(%65) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32) -> f32, sym_name = "f12"}> ({
  ^bb0(%arg14: f32):
    %56 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %57 = "llvm.alloca"(%56) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg14, %57) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %58 = "llvm.load"(%57) <{ordering = 0 : i64}> : (f32) -> f32
    %59 = "wasm.neg"(%58) : (f32) -> f32
    "cf.br"(%59)[^bb1] : (f32) -> ()
  ^bb1(%60: f32):  // pred: ^bb0
    "func.return"(%60) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32, f32) -> f32, sym_name = "f13"}> ({
  ^bb0(%arg12: f32, %arg13: f32):
    %48 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %49 = "llvm.alloca"(%48) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg12, %49) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %50 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %51 = "llvm.alloca"(%50) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg13, %51) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %52 = "llvm.load"(%49) <{ordering = 0 : i64}> : (f32) -> f32
    %53 = "llvm.load"(%51) <{ordering = 0 : i64}> : (f32) -> f32
    %54 = "wasm.copysign"(%52, %53) : (f32, f32) -> f32
    "cf.br"(%54)[^bb1] : (f32) -> ()
  ^bb1(%55: f32):  // pred: ^bb0
    "func.return"(%55) : (f32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32, f32) -> i32, sym_name = "f14"}> ({
  ^bb0(%arg10: f32, %arg11: f32):
    %40 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %41 = "llvm.alloca"(%40) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg10, %41) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %42 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %43 = "llvm.alloca"(%42) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg11, %43) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %44 = "llvm.load"(%41) <{ordering = 0 : i64}> : (f32) -> f32
    %45 = "llvm.load"(%43) <{ordering = 0 : i64}> : (f32) -> f32
    %46 = "wasm.eq"(%44, %45) : (f32, f32) -> f32
    "cf.br"(%46)[^bb1] : (f32) -> ()
  ^bb1(%47: i32):  // pred: ^bb0
    "func.return"(%47) : (i32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32, f32) -> i32, sym_name = "f15"}> ({
  ^bb0(%arg8: f32, %arg9: f32):
    %32 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %33 = "llvm.alloca"(%32) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg8, %33) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %34 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %35 = "llvm.alloca"(%34) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg9, %35) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %36 = "llvm.load"(%33) <{ordering = 0 : i64}> : (f32) -> f32
    %37 = "llvm.load"(%35) <{ordering = 0 : i64}> : (f32) -> f32
    %38 = "wasm.ne"(%36, %37) : (f32, f32) -> f32
    "cf.br"(%38)[^bb1] : (f32) -> ()
  ^bb1(%39: i32):  // pred: ^bb0
    "func.return"(%39) : (i32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32, f32) -> i32, sym_name = "f16"}> ({
  ^bb0(%arg6: f32, %arg7: f32):
    %24 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %25 = "llvm.alloca"(%24) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg6, %25) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %26 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %27 = "llvm.alloca"(%26) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg7, %27) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %28 = "llvm.load"(%25) <{ordering = 0 : i64}> : (f32) -> f32
    %29 = "llvm.load"(%27) <{ordering = 0 : i64}> : (f32) -> f32
    %30 = "wasm.lt"(%28, %29) : (f32, f32) -> f32
    "cf.br"(%30)[^bb1] : (f32) -> ()
  ^bb1(%31: i32):  // pred: ^bb0
    "func.return"(%31) : (i32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32, f32) -> i32, sym_name = "f17"}> ({
  ^bb0(%arg4: f32, %arg5: f32):
    %16 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %17 = "llvm.alloca"(%16) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg4, %17) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %18 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %19 = "llvm.alloca"(%18) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg5, %19) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %20 = "llvm.load"(%17) <{ordering = 0 : i64}> : (f32) -> f32
    %21 = "llvm.load"(%19) <{ordering = 0 : i64}> : (f32) -> f32
    %22 = "wasm.le"(%20, %21) : (f32, f32) -> f32
    "cf.br"(%22)[^bb1] : (f32) -> ()
  ^bb1(%23: i32):  // pred: ^bb0
    "func.return"(%23) : (i32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32, f32) -> i32, sym_name = "f18"}> ({
  ^bb0(%arg2: f32, %arg3: f32):
    %8 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %9 = "llvm.alloca"(%8) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg2, %9) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %10 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %11 = "llvm.alloca"(%10) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg3, %11) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %12 = "llvm.load"(%9) <{ordering = 0 : i64}> : (f32) -> f32
    %13 = "llvm.load"(%11) <{ordering = 0 : i64}> : (f32) -> f32
    %14 = "wasm.gt"(%12, %13) : (f32, f32) -> f32
    "cf.br"(%14)[^bb1] : (f32) -> ()
  ^bb1(%15: i32):  // pred: ^bb0
    "func.return"(%15) : (i32) -> ()
  }) : () -> ()
  "func.func"() <{function_type = (f32, f32) -> i32, sym_name = "f19"}> ({
  ^bb0(%arg0: f32, %arg1: f32):
    %0 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %1 = "llvm.alloca"(%0) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg0, %1) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %2 = "arith.constant"() <{value = 1 : i64}> : () -> i64
    %3 = "llvm.alloca"(%2) <{elem_type = f32}> : (i64) -> f32
    "llvm.store"(%arg1, %3) <{ordering = 0 : i64}> : (f32, f32) -> ()
    %4 = "llvm.load"(%1) <{ordering = 0 : i64}> : (f32) -> f32
    %5 = "llvm.load"(%3) <{ordering = 0 : i64}> : (f32) -> f32
    %6 = "wasm.ge"(%4, %5) : (f32, f32) -> f32
    "cf.br"(%6)[^bb1] : (f32) -> ()
  ^bb1(%7: i32):  // pred: ^bb0
    "func.return"(%7) : (i32) -> ()
  }) : () -> ()
}) : () -> ()
