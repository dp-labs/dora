---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @f0(%arg0: !llvm.ptr, %arg1: i32, %arg2: !llvm.ptr, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : !llvm.ptr, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    "wasm.table_fill"(%c0_i32, %3, %4, %5) : (i32, i32, !llvm.ptr, i32) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f1(%arg0: !llvm.ptr, %arg1: i32, %arg2: !llvm.ptr, %arg3: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x !llvm.ptr : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : !llvm.ptr, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    "wasm.table_fill"(%c0_i32, %3, %4, %5) : (i32, i32, !llvm.ptr, i32) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f2(%arg0: !llvm.ptr, %arg1: i32) -> !llvm.ptr {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = "wasm.table_get"(%c0_i32, %1) : (i32, i32) -> !llvm.ptr
    %3 = llvm.bitcast %2 : !llvm.ptr to !llvm.ptr
    cf.br ^bb1(%3 : !llvm.ptr)
  ^bb1(%4: !llvm.ptr):  // pred: ^bb0
    return %4 : !llvm.ptr
  }
}
