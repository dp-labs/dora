---
source: crates/dora-compiler/src/wasm/tests/meter.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @"fib-recursive"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_0 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %1, %2 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i64 = arith.constant 3 : i64
    %3 = llvm.load %2 : !llvm.ptr -> i64
    %4 = arith.cmpi ult, %3, %c3_i64 : i64
    scf.if %4 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %3, %c3_i64 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %6 = llvm.load %2 : !llvm.ptr -> i64
    %7 = arith.cmpi ult, %6, %c1_i64 : i64
    scf.if %7 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %6, %c1_i64 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %c1_i32_1 = arith.constant 1 : i32
    %c3_i64_2 = arith.constant 3 : i64
    %8 = llvm.load %2 : !llvm.ptr -> i64
    %9 = arith.cmpi ult, %8, %c3_i64_2 : i64
    scf.if %9 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %8, %c3_i64_2 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %10 = arith.cmpi ule, %5, %c1_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c1_i64_3 = arith.constant 1 : i64
    %12 = llvm.load %2 : !llvm.ptr -> i64
    %13 = arith.cmpi ult, %12, %c1_i64_3 : i64
    scf.if %13 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %12, %c1_i64_3 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %c0_i32 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %11, %c0_i32 : i32
    cf.cond_br %14, ^bb3, ^bb4
  ^bb2(%15: i32):  // 2 preds: ^bb3, ^bb5
    return %15 : i32
  ^bb3:  // pred: ^bb1
    %c3_i64_4 = arith.constant 3 : i64
    %16 = llvm.load %2 : !llvm.ptr -> i64
    %17 = arith.cmpi ult, %16, %c3_i64_4 : i64
    scf.if %17 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %16, %c3_i64_4 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_5 = arith.constant 1 : i64
    %19 = llvm.load %2 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c1_i64_5 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %19, %c1_i64_5 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    cf.br ^bb2(%18 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %c3_i64_6 = arith.constant 3 : i64
    %21 = llvm.load %2 : !llvm.ptr -> i64
    %22 = arith.cmpi ult, %21, %c3_i64_6 : i64
    scf.if %22 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %21, %c3_i64_6 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_7 = arith.constant 1 : i64
    %24 = llvm.load %2 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c1_i64_7 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %24, %c1_i64_7 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %c1_i32_8 = arith.constant 1 : i32
    %c3_i64_9 = arith.constant 3 : i64
    %26 = llvm.load %2 : !llvm.ptr -> i64
    %27 = arith.cmpi ult, %26, %c3_i64_9 : i64
    scf.if %27 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %26, %c3_i64_9 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %28 = arith.subi %23, %c1_i32_8 : i32
    %c6_i64 = arith.constant 6 : i64
    %29 = llvm.load %2 : !llvm.ptr -> i64
    %30 = arith.cmpi ult, %29, %c6_i64 : i64
    scf.if %30 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %29, %c6_i64 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %31 = call @"fib-recursive"(%arg0, %28) : (!llvm.ptr, i32) -> i32
    %c3_i64_10 = arith.constant 3 : i64
    %32 = llvm.load %2 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c3_i64_10 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %32, %c3_i64_10 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_11 = arith.constant 1 : i64
    %35 = llvm.load %2 : !llvm.ptr -> i64
    %36 = arith.cmpi ult, %35, %c1_i64_11 : i64
    scf.if %36 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %35, %c1_i64_11 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %c2_i32 = arith.constant 2 : i32
    %c3_i64_12 = arith.constant 3 : i64
    %37 = llvm.load %2 : !llvm.ptr -> i64
    %38 = arith.cmpi ult, %37, %c3_i64_12 : i64
    scf.if %38 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %37, %c3_i64_12 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %39 = arith.subi %34, %c2_i32 : i32
    %c6_i64_13 = arith.constant 6 : i64
    %40 = llvm.load %2 : !llvm.ptr -> i64
    %41 = arith.cmpi ult, %40, %c6_i64_13 : i64
    scf.if %41 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %40, %c6_i64_13 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %42 = call @"fib-recursive"(%arg0, %39) : (!llvm.ptr, i32) -> i32
    %c3_i64_14 = arith.constant 3 : i64
    %43 = llvm.load %2 : !llvm.ptr -> i64
    %44 = arith.cmpi ult, %43, %c3_i64_14 : i64
    scf.if %44 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %43, %c3_i64_14 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    %45 = arith.addi %31, %42 : i32
    %c1_i64_15 = arith.constant 1 : i64
    %46 = llvm.load %2 : !llvm.ptr -> i64
    %47 = arith.cmpi ult, %46, %c1_i64_15 : i64
    scf.if %47 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %48 = arith.subi %46, %c1_i64_15 : i64
      llvm.store %48, %2 : i64, !llvm.ptr
    }
    cf.br ^bb2(%45 : i32)
  }
  func.func public @"fib-iterative"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = call @dora_fn_wasm_gas_limit() : () -> i64
    %c1_i32_4 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %5, %6 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    %7 = llvm.load %6 : !llvm.ptr -> i64
    %8 = arith.cmpi ult, %7, %c1_i64 : i64
    scf.if %8 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %7, %c1_i64 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %c0_i32_5 = arith.constant 0 : i32
    %c3_i64 = arith.constant 3 : i64
    %9 = llvm.load %6 : !llvm.ptr -> i64
    %10 = arith.cmpi ult, %9, %c3_i64 : i64
    scf.if %10 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %9, %c3_i64 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_5, %1 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %11 = llvm.load %6 : !llvm.ptr -> i64
    %12 = arith.cmpi ult, %11, %c1_i64_6 : i64
    scf.if %12 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %11, %c1_i64_6 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %c1_i32_7 = arith.constant 1 : i32
    %c3_i64_8 = arith.constant 3 : i64
    %13 = llvm.load %6 : !llvm.ptr -> i64
    %14 = arith.cmpi ult, %13, %c3_i64_8 : i64
    scf.if %14 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %13, %c3_i64_8 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    llvm.store %c1_i32_7, %2 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %15 = llvm.load %6 : !llvm.ptr -> i64
    %16 = arith.cmpi ult, %15, %c1_i64_9 : i64
    scf.if %16 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %15, %c1_i64_9 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %c0_i32_10 = arith.constant 0 : i32
    %c3_i64_11 = arith.constant 3 : i64
    %17 = llvm.load %6 : !llvm.ptr -> i64
    %18 = arith.cmpi ult, %17, %c3_i64_11 : i64
    scf.if %18 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %17, %c3_i64_11 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    llvm.store %c0_i32_10, %3 : i32, !llvm.ptr
    %c3_i64_12 = arith.constant 3 : i64
    %19 = llvm.load %6 : !llvm.ptr -> i64
    %20 = arith.cmpi ult, %19, %c3_i64_12 : i64
    scf.if %20 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %19, %c3_i64_12 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_13 = arith.constant 1 : i64
    %22 = llvm.load %6 : !llvm.ptr -> i64
    %23 = arith.cmpi ult, %22, %c1_i64_13 : i64
    scf.if %23 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %22, %c1_i64_13 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %c0_i32_14 = arith.constant 0 : i32
    %c3_i64_15 = arith.constant 3 : i64
    %24 = llvm.load %6 : !llvm.ptr -> i64
    %25 = arith.cmpi ult, %24, %c3_i64_15 : i64
    scf.if %25 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %24, %c3_i64_15 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %26 = arith.cmpi eq, %21, %c0_i32_14 : i32
    %27 = arith.extui %26 : i1 to i32
    %c1_i64_16 = arith.constant 1 : i64
    %28 = llvm.load %6 : !llvm.ptr -> i64
    %29 = arith.cmpi ult, %28, %c1_i64_16 : i64
    scf.if %29 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %28, %c1_i64_16 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %c0_i32_17 = arith.constant 0 : i32
    %30 = arith.cmpi ne, %27, %c0_i32_17 : i32
    cf.cond_br %30, ^bb3, ^bb4
  ^bb2(%31: i32):  // 3 preds: ^bb3, ^bb6, ^bb9
    return %31 : i32
  ^bb3:  // pred: ^bb1
    %c1_i64_18 = arith.constant 1 : i64
    %32 = llvm.load %6 : !llvm.ptr -> i64
    %33 = arith.cmpi ult, %32, %c1_i64_18 : i64
    scf.if %33 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %32, %c1_i64_18 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %c0_i32_19 = arith.constant 0 : i32
    %c1_i64_20 = arith.constant 1 : i64
    %34 = llvm.load %6 : !llvm.ptr -> i64
    %35 = arith.cmpi ult, %34, %c1_i64_20 : i64
    scf.if %35 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %34, %c1_i64_20 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c0_i32_19 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %c3_i64_21 = arith.constant 3 : i64
    %36 = llvm.load %6 : !llvm.ptr -> i64
    %37 = arith.cmpi ult, %36, %c3_i64_21 : i64
    scf.if %37 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %36, %c3_i64_21 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_22 = arith.constant 1 : i64
    %39 = llvm.load %6 : !llvm.ptr -> i64
    %40 = arith.cmpi ult, %39, %c1_i64_22 : i64
    scf.if %40 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %39, %c1_i64_22 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %c1_i32_23 = arith.constant 1 : i32
    %c3_i64_24 = arith.constant 3 : i64
    %41 = llvm.load %6 : !llvm.ptr -> i64
    %42 = arith.cmpi ult, %41, %c3_i64_24 : i64
    scf.if %42 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %41, %c3_i64_24 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %43 = arith.cmpi eq, %38, %c1_i32_23 : i32
    %44 = arith.extui %43 : i1 to i32
    %c1_i64_25 = arith.constant 1 : i64
    %45 = llvm.load %6 : !llvm.ptr -> i64
    %46 = arith.cmpi ult, %45, %c1_i64_25 : i64
    scf.if %46 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %45, %c1_i64_25 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %c0_i32_26 = arith.constant 0 : i32
    %47 = arith.cmpi ne, %44, %c0_i32_26 : i32
    cf.cond_br %47, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %c1_i64_27 = arith.constant 1 : i64
    %48 = llvm.load %6 : !llvm.ptr -> i64
    %49 = arith.cmpi ult, %48, %c1_i64_27 : i64
    scf.if %49 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %48, %c1_i64_27 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %c1_i32_28 = arith.constant 1 : i32
    %c1_i64_29 = arith.constant 1 : i64
    %50 = llvm.load %6 : !llvm.ptr -> i64
    %51 = arith.cmpi ult, %50, %c1_i64_29 : i64
    scf.if %51 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %50, %c1_i64_29 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    cf.br ^bb2(%c1_i32_28 : i32)
  ^bb7:  // pred: ^bb5
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c1_i64_30 = arith.constant 1 : i64
    %52 = llvm.load %6 : !llvm.ptr -> i64
    %53 = arith.cmpi ult, %52, %c1_i64_30 : i64
    scf.if %53 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %52, %c1_i64_30 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    cf.br ^bb10
  ^bb9:  // pred: ^bb11
    %c3_i64_31 = arith.constant 3 : i64
    %54 = llvm.load %6 : !llvm.ptr -> i64
    %55 = arith.cmpi ult, %54, %c3_i64_31 : i64
    scf.if %55 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %54, %c3_i64_31 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64_32 = arith.constant 1 : i64
    %57 = llvm.load %6 : !llvm.ptr -> i64
    %58 = arith.cmpi ult, %57, %c1_i64_32 : i64
    scf.if %58 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %57, %c1_i64_32 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    cf.br ^bb2(%56 : i32)
  ^bb10:  // 2 preds: ^bb8, ^bb10
    %c3_i64_33 = arith.constant 3 : i64
    %59 = llvm.load %6 : !llvm.ptr -> i64
    %60 = arith.cmpi ult, %59, %c3_i64_33 : i64
    scf.if %60 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %59, %c3_i64_33 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_34 = arith.constant 3 : i64
    %62 = llvm.load %6 : !llvm.ptr -> i64
    %63 = arith.cmpi ult, %62, %c3_i64_34 : i64
    scf.if %63 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %62, %c3_i64_34 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    llvm.store %61, %4 : i32, !llvm.ptr
    %c3_i64_35 = arith.constant 3 : i64
    %64 = llvm.load %6 : !llvm.ptr -> i64
    %65 = arith.cmpi ult, %64, %c3_i64_35 : i64
    scf.if %65 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %64, %c3_i64_35 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %66 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64_36 = arith.constant 3 : i64
    %67 = llvm.load %6 : !llvm.ptr -> i64
    %68 = arith.cmpi ult, %67, %c3_i64_36 : i64
    scf.if %68 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %67, %c3_i64_36 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64_37 = arith.constant 3 : i64
    %70 = llvm.load %6 : !llvm.ptr -> i64
    %71 = arith.cmpi ult, %70, %c3_i64_37 : i64
    scf.if %71 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %70, %c3_i64_37 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %72 = arith.addi %66, %69 : i32
    %c3_i64_38 = arith.constant 3 : i64
    %73 = llvm.load %6 : !llvm.ptr -> i64
    %74 = arith.cmpi ult, %73, %c3_i64_38 : i64
    scf.if %74 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %73, %c3_i64_38 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    llvm.store %72, %2 : i32, !llvm.ptr
    %c3_i64_39 = arith.constant 3 : i64
    %75 = llvm.load %6 : !llvm.ptr -> i64
    %76 = arith.cmpi ult, %75, %c3_i64_39 : i64
    scf.if %76 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %75, %c3_i64_39 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %77 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i64_40 = arith.constant 3 : i64
    %78 = llvm.load %6 : !llvm.ptr -> i64
    %79 = arith.cmpi ult, %78, %c3_i64_40 : i64
    scf.if %79 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %78, %c3_i64_40 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    llvm.store %77, %1 : i32, !llvm.ptr
    %c3_i64_41 = arith.constant 3 : i64
    %80 = llvm.load %6 : !llvm.ptr -> i64
    %81 = arith.cmpi ult, %80, %c3_i64_41 : i64
    scf.if %81 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %80, %c3_i64_41 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %82 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_42 = arith.constant 1 : i64
    %83 = llvm.load %6 : !llvm.ptr -> i64
    %84 = arith.cmpi ult, %83, %c1_i64_42 : i64
    scf.if %84 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %83, %c1_i64_42 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %c1_i32_43 = arith.constant 1 : i32
    %c3_i64_44 = arith.constant 3 : i64
    %85 = llvm.load %6 : !llvm.ptr -> i64
    %86 = arith.cmpi ult, %85, %c3_i64_44 : i64
    scf.if %86 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %85, %c3_i64_44 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %87 = arith.addi %82, %c1_i32_43 : i32
    %c3_i64_45 = arith.constant 3 : i64
    %88 = llvm.load %6 : !llvm.ptr -> i64
    %89 = arith.cmpi ult, %88, %c3_i64_45 : i64
    scf.if %89 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %88, %c3_i64_45 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    llvm.store %87, %3 : i32, !llvm.ptr
    %c3_i64_46 = arith.constant 3 : i64
    %90 = llvm.load %6 : !llvm.ptr -> i64
    %91 = arith.cmpi ult, %90, %c3_i64_46 : i64
    scf.if %91 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %90, %c3_i64_46 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_47 = arith.constant 3 : i64
    %93 = llvm.load %6 : !llvm.ptr -> i64
    %94 = arith.cmpi ult, %93, %c3_i64_47 : i64
    scf.if %94 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %93, %c3_i64_47 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %95 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_48 = arith.constant 1 : i64
    %96 = llvm.load %6 : !llvm.ptr -> i64
    %97 = arith.cmpi ult, %96, %c1_i64_48 : i64
    scf.if %97 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %96, %c1_i64_48 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %c1_i32_49 = arith.constant 1 : i32
    %c3_i64_50 = arith.constant 3 : i64
    %98 = llvm.load %6 : !llvm.ptr -> i64
    %99 = arith.cmpi ult, %98, %c3_i64_50 : i64
    scf.if %99 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %98, %c3_i64_50 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %100 = arith.subi %95, %c1_i32_49 : i32
    %c3_i64_51 = arith.constant 3 : i64
    %101 = llvm.load %6 : !llvm.ptr -> i64
    %102 = arith.cmpi ult, %101, %c3_i64_51 : i64
    scf.if %102 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %101, %c3_i64_51 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %103 = arith.cmpi ult, %92, %100 : i32
    %104 = arith.extui %103 : i1 to i32
    %c1_i64_52 = arith.constant 1 : i64
    %105 = llvm.load %6 : !llvm.ptr -> i64
    %106 = arith.cmpi ult, %105, %c1_i64_52 : i64
    scf.if %106 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %105, %c1_i64_52 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    %c0_i32_53 = arith.constant 0 : i32
    %107 = arith.cmpi ne, %104, %c0_i32_53 : i32
    cf.cond_br %107, ^bb10, ^bb11
  ^bb11:  // pred: ^bb10
    %c1_i64_54 = arith.constant 1 : i64
    %108 = llvm.load %6 : !llvm.ptr -> i64
    %109 = arith.cmpi ult, %108, %c1_i64_54 : i64
    scf.if %109 {
      %c20_i32 = arith.constant 20 : i32
      func.call @dora_fn_wasm_raise_trap(%c20_i32) : (i32) -> ()
    } else {
      %110 = arith.subi %108, %c1_i64_54 : i64
      llvm.store %110, %6 : i64, !llvm.ptr
    }
    cf.br ^bb9
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
