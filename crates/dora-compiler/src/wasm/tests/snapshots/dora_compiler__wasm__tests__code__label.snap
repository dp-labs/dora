---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @block(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func public @loop1(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    llvm.store %c0_i32_0, %0 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb4, ^bb6
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // no predecessors
    cf.br ^bb3(%3 : i32)
  ^bb5:  // 2 preds: ^bb1, ^bb8
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %5 = "wasm.add"(%4, %c1_i32) : (i32, i32) -> i32
    llvm.store %5, %0 : i32, !llvm.ptr
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %7 = "wasm.eq"(%6, %c5_i32) : (i32, i32) -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %8 = arith.cmpi ne, %7, %c0_i32_1 : i32
    cf.cond_br %8, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %9 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb3(%9 : i32)
  ^bb7:  // pred: ^bb5
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb5
  }
  func.func public @loop2(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    llvm.store %c0_i32_0, %0 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb4, ^bb9
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // no predecessors
    cf.br ^bb3(%3 : i32)
  ^bb5:  // 3 preds: ^bb1, ^bb6, ^bb11
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %5 = "wasm.add"(%4, %c1_i32) : (i32, i32) -> i32
    llvm.store %5, %0 : i32, !llvm.ptr
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %7 = "wasm.eq"(%6, %c5_i32) : (i32, i32) -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %8 = arith.cmpi ne, %7, %c0_i32_1 : i32
    cf.cond_br %8, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    cf.br ^bb5
  ^bb7:  // pred: ^bb5
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %10 = "wasm.eq"(%9, %c8_i32) : (i32, i32) -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_2 : i32
    cf.cond_br %11, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %12 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb3(%12 : i32)
  ^bb10:  // pred: ^bb8
    cf.br ^bb11
  ^bb11:  // pred: ^bb10
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    %14 = "wasm.add"(%13, %c1_i32_3) : (i32, i32) -> i32
    llvm.store %14, %0 : i32, !llvm.ptr
    cf.br ^bb5
  }
  func.func public @loop3(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    llvm.store %c0_i32_0, %0 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb4, ^bb6
    cf.br ^bb2(%2 : i32)
  ^bb4(%3: i32):  // pred: ^bb8
    cf.br ^bb3(%3 : i32)
  ^bb5:  // pred: ^bb1
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %5 = "wasm.add"(%4, %c1_i32) : (i32, i32) -> i32
    llvm.store %5, %0 : i32, !llvm.ptr
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %7 = "wasm.eq"(%6, %c5_i32) : (i32, i32) -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %8 = arith.cmpi ne, %7, %c0_i32_1 : i32
    cf.cond_br %8, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %9 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb3(%9 : i32)
  ^bb7:  // pred: ^bb5
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %10 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb4(%10 : i32)
  }
  func.func public @loop4(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %1 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3(%3: i32):  // 2 preds: ^bb4, ^bb6
    cf.br ^bb2(%3 : i32)
  ^bb4(%4: i32):  // no predecessors
    cf.br ^bb3(%4 : i32)
  ^bb5:  // 2 preds: ^bb1, ^bb8
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %7 = "wasm.add"(%5, %6) : (i32, i32) -> i32
    llvm.store %7, %1 : i32, !llvm.ptr
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %10 = "wasm.gtu"(%8, %9) : (i32, i32) -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_1 : i32
    cf.cond_br %11, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %12 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb3(%12 : i32)
  ^bb7:  // pred: ^bb5
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb5
  }
  func.func public @loop5(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    %c1_i32 = arith.constant 1 : i32
    %2 = "wasm.add"(%1, %c1_i32) : (i32, i32) -> i32
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32_0 : i32)
  }
  func.func public @loop6(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %c0_i32, %c0_i32_0 : i32
    cf.cond_br %2, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb3(%c3_i32 : i32)
  }
  func.func public @if(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    llvm.store %c0_i32_0, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c1_i32, %c0_i32_1 : i32
    cf.cond_br %1, ^bb4, ^bb5
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3:  // pred: ^bb18
    %3 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%3 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb6
  ^bb5:  // pred: ^bb1
    cf.br ^bb6
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_2 = arith.constant 1 : i32
    %5 = "wasm.add"(%4, %c1_i32_2) : (i32, i32) -> i32
    llvm.store %5, %0 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c1_i32_3, %c0_i32_4 : i32
    cf.cond_br %6, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    cf.br ^bb9
  ^bb8:  // pred: ^bb6
    %c888_i32 = arith.constant 888 : i32
    llvm.store %c888_i32, %0 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_5 = arith.constant 1 : i32
    %8 = "wasm.add"(%7, %c1_i32_5) : (i32, i32) -> i32
    llvm.store %8, %0 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %c1_i32_6, %c0_i32_7 : i32
    cf.cond_br %9, ^bb10, ^bb11
  ^bb10:  // pred: ^bb9
    cf.br ^bb12
  ^bb11:  // pred: ^bb9
    %c888_i32_8 = arith.constant 888 : i32
    llvm.store %c888_i32_8, %0 : i32, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // 2 preds: ^bb10, ^bb11
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    %11 = "wasm.add"(%10, %c1_i32_9) : (i32, i32) -> i32
    llvm.store %11, %0 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %c0_i32_10, %c0_i32_11 : i32
    cf.cond_br %12, ^bb13, ^bb14
  ^bb13:  // pred: ^bb12
    %c888_i32_12 = arith.constant 888 : i32
    llvm.store %c888_i32_12, %0 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb14:  // pred: ^bb12
    cf.br ^bb15
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_13 = arith.constant 1 : i32
    %14 = "wasm.add"(%13, %c1_i32_13) : (i32, i32) -> i32
    llvm.store %14, %0 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %15 = arith.cmpi ne, %c0_i32_14, %c0_i32_15 : i32
    cf.cond_br %15, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %c888_i32_16 = arith.constant 888 : i32
    llvm.store %c888_i32_16, %0 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb17:  // pred: ^bb15
    cf.br ^bb18
  ^bb18:  // 2 preds: ^bb16, ^bb17
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_17 = arith.constant 1 : i32
    %17 = "wasm.add"(%16, %c1_i32_17) : (i32, i32) -> i32
    llvm.store %17, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func public @if2(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    llvm.store %c0_i32_0, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c1_i32, %c0_i32_1 : i32
    cf.cond_br %1, ^bb4, ^bb5
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3:  // pred: ^bb18
    %3 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%3 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb6
  ^bb5:  // pred: ^bb1
    cf.br ^bb6
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_2 = arith.constant 1 : i32
    %5 = "wasm.add"(%4, %c1_i32_2) : (i32, i32) -> i32
    llvm.store %5, %0 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %c1_i32_3, %c0_i32_4 : i32
    cf.cond_br %6, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    cf.br ^bb9
  ^bb8:  // pred: ^bb6
    %c888_i32 = arith.constant 888 : i32
    llvm.store %c888_i32, %0 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_5 = arith.constant 1 : i32
    %8 = "wasm.add"(%7, %c1_i32_5) : (i32, i32) -> i32
    llvm.store %8, %0 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %c1_i32_6, %c0_i32_7 : i32
    cf.cond_br %9, ^bb10, ^bb11
  ^bb10:  // pred: ^bb9
    cf.br ^bb12
  ^bb11:  // pred: ^bb9
    %c888_i32_8 = arith.constant 888 : i32
    llvm.store %c888_i32_8, %0 : i32, !llvm.ptr
    cf.br ^bb12
  ^bb12:  // 2 preds: ^bb10, ^bb11
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    %11 = "wasm.add"(%10, %c1_i32_9) : (i32, i32) -> i32
    llvm.store %11, %0 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %c0_i32_10, %c0_i32_11 : i32
    cf.cond_br %12, ^bb13, ^bb14
  ^bb13:  // pred: ^bb12
    %c888_i32_12 = arith.constant 888 : i32
    llvm.store %c888_i32_12, %0 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb14:  // pred: ^bb12
    cf.br ^bb15
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_13 = arith.constant 1 : i32
    %14 = "wasm.add"(%13, %c1_i32_13) : (i32, i32) -> i32
    llvm.store %14, %0 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %15 = arith.cmpi ne, %c0_i32_14, %c0_i32_15 : i32
    cf.cond_br %15, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %c888_i32_16 = arith.constant 888 : i32
    llvm.store %c888_i32_16, %0 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb17:  // pred: ^bb15
    cf.br ^bb18
  ^bb18:  // 2 preds: ^bb16, ^bb17
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_17 = arith.constant 1 : i32
    %17 = "wasm.add"(%16, %c1_i32_17) : (i32, i32) -> i32
    llvm.store %17, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func public @switch(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.switch %1 : i32, [
      default: ^bb6,
      0: ^bb5,
      1: ^bb9,
      2: ^bb8,
      3: ^bb7
    ]
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3(%3: i32):  // 2 preds: ^bb4, ^bb7
    cf.br ^bb2(%3 : i32)
  ^bb4(%4: i32):  // 2 preds: ^bb5, ^bb8
    %5 = "wasm.mul"(%c10_i32, %4) : (i32, i32) -> i32
    cf.br ^bb3(%5 : i32)
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %c5_i32 = arith.constant 5 : i32
    cf.br ^bb4(%c5_i32 : i32)
  ^bb6:  // pred: ^bb1
    cf.br ^bb5
  ^bb7:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb3(%c3_i32 : i32)
  ^bb8:  // 2 preds: ^bb1, ^bb9
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb4(%c2_i32 : i32)
  ^bb9:  // pred: ^bb1
    cf.br ^bb8
  }
  func.func public @return(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.switch %1 : i32, [
      default: ^bb4,
      0: ^bb5
    ]
  ^bb2(%2: i32):  // 2 preds: ^bb3, ^bb5
    return %2 : i32
  ^bb3:  // pred: ^bb4
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  }
  func.func public @br_if0(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    llvm.store %c0_i32_0, %0 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c0_i32_1, %c0_i32_2 : i32
    cf.cond_br %1, ^bb4, ^bb5
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3(%3: i32):  // 3 preds: ^bb7, ^bb9, ^bb10
    cf.br ^bb2(%3 : i32)
  ^bb4:  // 3 preds: ^bb1, ^bb5, ^bb6
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %5 = "wasm.or"(%4, %c4_i32) : (i32, i32) -> i32
    llvm.store %5, %0 : i32, !llvm.ptr
    %6 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb7(%6 : i32)
  ^bb5:  // pred: ^bb1
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %8 = "wasm.or"(%7, %c1_i32) : (i32, i32) -> i32
    llvm.store %8, %0 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %c1_i32_3, %c0_i32_4 : i32
    cf.cond_br %9, ^bb4, ^bb6
  ^bb6:  // pred: ^bb5
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %11 = "wasm.or"(%10, %c2_i32) : (i32, i32) -> i32
    llvm.store %11, %0 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb7(%12: i32):  // pred: ^bb4
    %c0_i32_5 = arith.constant 0 : i32
    %c0_i32_6 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %c0_i32_5, %c0_i32_6 : i32
    cf.cond_br %13, ^bb3(%12 : i32), ^bb8(%12 : i32)
  ^bb8(%14: i32):  // pred: ^bb7
    %15 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %16 = "wasm.or"(%15, %c8_i32) : (i32, i32) -> i32
    llvm.store %16, %0 : i32, !llvm.ptr
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %18 = "wasm.or"(%17, %c16_i32) : (i32, i32) -> i32
    llvm.store %18, %0 : i32, !llvm.ptr
    %19 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb9(%19 : i32)
  ^bb9(%20: i32):  // pred: ^bb8
    %c1_i32_7 = arith.constant 1 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %c1_i32_7, %c0_i32_8 : i32
    cf.cond_br %21, ^bb3(%20 : i32), ^bb10(%20 : i32)
  ^bb10(%22: i32):  // pred: ^bb9
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %24 = "wasm.or"(%23, %c32_i32) : (i32, i32) -> i32
    llvm.store %24, %0 : i32, !llvm.ptr
    %25 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb3(%25 : i32)
  }
  func.func public @br_if1(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %3, ^bb3(%2 : i32), ^bb5(%2 : i32)
  ^bb5(%4: i32):  // pred: ^bb4
    %c0_i32_1 = arith.constant 0 : i32
    cf.br ^bb3(%c0_i32_1 : i32)
  }
  func.func public @br_if2(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb4, ^bb5
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb6, ^bb7
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb7(%c1_i32_0 : i32)
  ^bb5:  // pred: ^bb1
    cf.br ^bb6
  ^bb6:  // 2 preds: ^bb5, ^bb8
    %c0_i32_1 = arith.constant 0 : i32
    cf.br ^bb3(%c0_i32_1 : i32)
  ^bb7(%3: i32):  // pred: ^bb4
    %c1_i32_2 = arith.constant 1 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %c1_i32_2, %c0_i32_3 : i32
    cf.cond_br %4, ^bb3(%3 : i32), ^bb8(%3 : i32)
  ^bb8(%5: i32):  // pred: ^bb7
    cf.br ^bb6
  }
  func.func public @br_if3(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb4(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3(%3: i32):  // 2 preds: ^bb5, ^bb6
    %c0_i32_0 = arith.constant 0 : i32
    %4 = "wasm.add"(%3, %c0_i32_0) : (i32, i32) -> i32
    %5 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%5 : i32)
  ^bb4(%6: i32):  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %0 : i32, !llvm.ptr
    %7 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb5(%7 : i32)
  ^bb5(%8: i32):  // pred: ^bb4
    %c0_i32_1 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32_1 : i32
    cf.cond_br %9, ^bb3(%6 : i32), ^bb6(%6 : i32)
  ^bb6(%10: i32):  // pred: ^bb5
    %c0_i32_2 = arith.constant 0 : i32
    cf.br ^bb3(%c0_i32_2 : i32)
  }
  func.func public @br(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb4, ^bb5
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb6, ^bb7
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb7(%c1_i32_0 : i32)
  ^bb5:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    cf.br ^bb9(%c1_i32_1 : i32)
  ^bb6:  // pred: ^bb8
    %c1_i32_2 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32_2 : i32)
  ^bb7(%3: i32):  // pred: ^bb4
    cf.br ^bb3(%3 : i32)
  ^bb8:  // pred: ^bb9
    cf.br ^bb6
  ^bb9(%4: i32):  // pred: ^bb5
    cf.br ^bb8
  }
  func.func public @shadowing(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func public @redefinition(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb4(%c2_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb5(%c3_i32 : i32)
  ^bb5(%3: i32):  // pred: ^bb4
    %4 = "wasm.add"(%2, %3) : (i32, i32) -> i32
    cf.br ^bb3(%4 : i32)
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
