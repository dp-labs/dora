---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @stmt(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c100_i32 = arith.constant 100 : i32
    llvm.store %c100_i32, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    cf.switch %2 : i32, [
      default: ^bb5,
      0: ^bb12,
      1: ^bb11,
      2: ^bb10,
      3: ^bb9,
      4: ^bb8,
      5: ^bb7,
      6: ^bb6,
      7: ^bb4
    ]
  ^bb2(%3: i32):  // 2 preds: ^bb3, ^bb12
    return %3 : i32
  ^bb3:  // 4 preds: ^bb4, ^bb7, ^bb8, ^bb9
    %4 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%4 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %c102_i32 = arith.constant 102 : i32
    llvm.store %c102_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %c101_i32 = arith.constant 101 : i32
    llvm.store %c101_i32, %1 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb1
    %c101_i32_1 = arith.constant 101 : i32
    llvm.store %c101_i32_1, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // pred: ^bb1
    cf.br ^bb3
  ^bb9:  // 2 preds: ^bb1, ^bb10
    %c0_i32_2 = arith.constant 0 : i32
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = arith.subi %c0_i32_2, %5 : i32
    llvm.store %6, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // 2 preds: ^bb1, ^bb11
    cf.br ^bb9
  ^bb11:  // pred: ^bb1
    cf.br ^bb10
  ^bb12:  // pred: ^bb1
    %7 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%7 : i32)
  }
  func.func public @expr(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c100_i64 = arith.constant 100 : i64
    llvm.store %c100_i64, %1 : i64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = arith.trunci %2 : i64 to i32
    cf.switch %3 : i32, [
      default: ^bb5,
      0: ^bb12,
      1: ^bb11,
      2: ^bb10,
      3: ^bb9,
      4: ^bb6,
      5: ^bb7,
      6: ^bb8,
      7: ^bb4
    ]
  ^bb2(%4: i64):  // 2 preds: ^bb3, ^bb12
    return %4 : i64
  ^bb3(%5: i64):  // 3 preds: ^bb4, ^bb5, ^bb9
    cf.br ^bb2(%5 : i64)
  ^bb4:  // pred: ^bb1
    %c-5_i64 = arith.constant -5 : i64
    cf.br ^bb3(%c-5_i64 : i64)
  ^bb5:  // 2 preds: ^bb1, ^bb6
    %6 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb3(%6 : i64)
  ^bb6:  // 2 preds: ^bb1, ^bb7
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb1, ^bb8
    cf.br ^bb6
  ^bb8:  // pred: ^bb1
    %c101_i64 = arith.constant 101 : i64
    llvm.store %c101_i64, %1 : i64, !llvm.ptr
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb1, ^bb10
    %c0_i64_1 = arith.constant 0 : i64
    %7 = llvm.load %0 : !llvm.ptr -> i64
    %8 = arith.subi %c0_i64_1, %7 : i64
    cf.br ^bb3(%8 : i64)
  ^bb10:  // 2 preds: ^bb1, ^bb11
    cf.br ^bb9
  ^bb11:  // pred: ^bb1
    cf.br ^bb10
  ^bb12:  // pred: ^bb1
    %9 = llvm.load %0 : !llvm.ptr -> i64
    cf.br ^bb2(%9 : i64)
  }
  func.func public @arg(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c100_i32 = arith.constant 100 : i32
    %c1000_i32 = arith.constant 1000 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = arith.muli %c2_i32, %1 : i32
    %c3_i32 = arith.constant 3 : i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = arith.andi %c3_i32, %3 : i32
    cf.switch %4 : i32, [
      default: ^bb6(%2 : i32),
      0: ^bb5(%2 : i32),
      1: ^bb4(%2 : i32),
      2: ^bb3(%2 : i32)
    ]
  ^bb2(%5: i32):  // pred: ^bb3
    return %5 : i32
  ^bb3(%6: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%6 : i32)
  ^bb4(%7: i32):  // 2 preds: ^bb1, ^bb5
    %8 = arith.addi %c10_i32, %7 : i32
    cf.br ^bb3(%8 : i32)
  ^bb5(%9: i32):  // 2 preds: ^bb1, ^bb6
    %10 = arith.addi %c100_i32, %9 : i32
    cf.br ^bb4(%10 : i32)
  ^bb6(%11: i32):  // pred: ^bb1
    %12 = arith.addi %c1000_i32, %11 : i32
    cf.br ^bb5(%12 : i32)
  }
  func.func public @corner(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    cf.switch %c0_i32 : i32, [
      default: ^bb3
    ]
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32 : i32)
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
