---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @data(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> i8
    %7 = arith.extui %6 : i8 to i32
    %c65_i32 = arith.constant 65 : i32
    %8 = "wasm.eq"(%7, %c65_i32) : (i32, i32) -> i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i64_0 = arith.constant 0 : i64
    %9 = arith.extui %c3_i32 : i32 to i64
    %10 = arith.addi %9, %c0_i64_0 : i64
    %11 = llvm.getelementptr %2[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i8
    %13 = arith.extui %12 : i8 to i32
    %c167_i32 = arith.constant 167 : i32
    %14 = "wasm.eq"(%13, %c167_i32) : (i32, i32) -> i32
    %15 = "wasm.and"(%8, %14) : (i32, i32) -> i32
    %c6_i32 = arith.constant 6 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %16 = arith.extui %c6_i32 : i32 to i64
    %17 = arith.addi %16, %c0_i64_1 : i64
    %18 = llvm.getelementptr %2[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i8
    %20 = arith.extui %19 : i8 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %21 = "wasm.eq"(%20, %c0_i32_2) : (i32, i32) -> i32
    %c19_i32 = arith.constant 19 : i32
    %c0_i64_3 = arith.constant 0 : i64
    %22 = arith.extui %c19_i32 : i32 to i64
    %23 = arith.addi %22, %c0_i64_3 : i64
    %24 = llvm.getelementptr %2[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load %24 : !llvm.ptr -> i8
    %26 = arith.extui %25 : i8 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %27 = "wasm.eq"(%26, %c0_i32_4) : (i32, i32) -> i32
    %28 = "wasm.and"(%21, %27) : (i32, i32) -> i32
    %29 = "wasm.and"(%15, %28) : (i32, i32) -> i32
    %c20_i32 = arith.constant 20 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %30 = arith.extui %c20_i32 : i32 to i64
    %31 = arith.addi %30, %c0_i64_5 : i64
    %32 = llvm.getelementptr %2[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load %32 : !llvm.ptr -> i8
    %34 = arith.extui %33 : i8 to i32
    %c87_i32 = arith.constant 87 : i32
    %35 = "wasm.eq"(%34, %c87_i32) : (i32, i32) -> i32
    %c23_i32 = arith.constant 23 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %36 = arith.extui %c23_i32 : i32 to i64
    %37 = arith.addi %36, %c0_i64_6 : i64
    %38 = llvm.getelementptr %2[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load %38 : !llvm.ptr -> i8
    %40 = arith.extui %39 : i8 to i32
    %c77_i32 = arith.constant 77 : i32
    %41 = "wasm.eq"(%40, %c77_i32) : (i32, i32) -> i32
    %42 = "wasm.and"(%35, %41) : (i32, i32) -> i32
    %c24_i32 = arith.constant 24 : i32
    %c0_i64_7 = arith.constant 0 : i64
    %43 = arith.extui %c24_i32 : i32 to i64
    %44 = arith.addi %43, %c0_i64_7 : i64
    %45 = llvm.getelementptr %2[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load %45 : !llvm.ptr -> i8
    %47 = arith.extui %46 : i8 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %48 = "wasm.eq"(%47, %c0_i32_8) : (i32, i32) -> i32
    %c1023_i32 = arith.constant 1023 : i32
    %c0_i64_9 = arith.constant 0 : i64
    %49 = arith.extui %c1023_i32 : i32 to i64
    %50 = arith.addi %49, %c0_i64_9 : i64
    %51 = llvm.getelementptr %2[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load %51 : !llvm.ptr -> i8
    %53 = arith.extui %52 : i8 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %54 = "wasm.eq"(%53, %c0_i32_10) : (i32, i32) -> i32
    %55 = "wasm.and"(%48, %54) : (i32, i32) -> i32
    %56 = "wasm.and"(%42, %55) : (i32, i32) -> i32
    %57 = "wasm.and"(%29, %56) : (i32, i32) -> i32
    cf.br ^bb2(%57 : i32)
  ^bb2(%58: i32):  // pred: ^bb1
    return %58 : i32
  }
  func.func public @cast(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %c-12345_i64 = arith.constant -12345 : i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c8_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c-12345_i64, %5 : i64, !llvm.ptr
    %c8_i32_0 = arith.constant 8 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %6 = arith.extui %c8_i32_0 : i32 to i64
    %7 = arith.addi %6, %c0_i64_1 : i64
    %8 = llvm.getelementptr %2[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> f64
    %c-12345_i64_2 = arith.constant -12345 : i64
    %10 = "wasm.f64_reinterpret_i64"(%c-12345_i64_2) : (i64) -> f64
    %11 = "wasm.eq"(%9, %10) : (f64, f64) -> i32
    %c0_i32 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2(%13: f64):  // 2 preds: ^bb3, ^bb5
    return %13 : f64
  ^bb3:  // pred: ^bb1
    %c0_i64_3 = arith.constant 0 : i64
    %14 = arith.bitcast %c0_i64_3 : i64 to f64
    cf.br ^bb2(%14 : f64)
  ^bb4:  // pred: ^bb1
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %c9_i32 = arith.constant 9 : i32
    %c0_i64_4 = arith.constant 0 : i64
    %c0_i64_5 = arith.constant 0 : i64
    %15 = arith.extui %c9_i32 : i32 to i64
    %16 = arith.addi %15, %c0_i64_5 : i64
    %17 = llvm.getelementptr %2[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i64_4, %17 : i64, !llvm.ptr
    %c15_i32 = arith.constant 15 : i32
    %c16453_i32 = arith.constant 16453 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %18 = arith.extui %c15_i32 : i32 to i64
    %19 = arith.addi %18, %c0_i64_6 : i64
    %20 = llvm.getelementptr %2[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = arith.trunci %c16453_i32 : i32 to i16
    llvm.store %21, %20 : i16, !llvm.ptr
    %c9_i32_7 = arith.constant 9 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %22 = arith.extui %c9_i32_7 : i32 to i64
    %23 = arith.addi %22, %c0_i64_8 : i64
    %24 = llvm.getelementptr %2[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load %24 : !llvm.ptr -> f64
    cf.br ^bb2(%25 : f64)
  }
  func.func public @i32_load8_s(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c8_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i32 to i8
    llvm.store %8, %7 : i8, !llvm.ptr
    %c8_i32_0 = arith.constant 8 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %9 = arith.extui %c8_i32_0 : i32 to i64
    %10 = arith.addi %9, %c0_i64_1 : i64
    %11 = llvm.getelementptr %3[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i8
    %13 = arith.extsi %12 : i8 to i32
    cf.br ^bb2(%13 : i32)
  ^bb2(%14: i32):  // pred: ^bb1
    return %14 : i32
  }
  func.func public @i32_load8_u(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c8_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i32 to i8
    llvm.store %8, %7 : i8, !llvm.ptr
    %c8_i32_0 = arith.constant 8 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %9 = arith.extui %c8_i32_0 : i32 to i64
    %10 = arith.addi %9, %c0_i64_1 : i64
    %11 = llvm.getelementptr %3[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i8
    %13 = arith.extui %12 : i8 to i32
    cf.br ^bb2(%13 : i32)
  ^bb2(%14: i32):  // pred: ^bb1
    return %14 : i32
  }
  func.func public @i32_load16_s(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c8_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i32 to i16
    llvm.store %8, %7 : i16, !llvm.ptr
    %c8_i32_0 = arith.constant 8 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %9 = arith.extui %c8_i32_0 : i32 to i64
    %10 = arith.addi %9, %c0_i64_1 : i64
    %11 = llvm.getelementptr %3[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i16
    %13 = arith.extsi %12 : i16 to i32
    cf.br ^bb2(%13 : i32)
  ^bb2(%14: i32):  // pred: ^bb1
    return %14 : i32
  }
  func.func public @i32_load16_u(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c8_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i32 to i16
    llvm.store %8, %7 : i16, !llvm.ptr
    %c8_i32_0 = arith.constant 8 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %9 = arith.extui %c8_i32_0 : i32 to i64
    %10 = arith.addi %9, %c0_i64_1 : i64
    %11 = llvm.getelementptr %3[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i16
    %13 = arith.extui %12 : i16 to i32
    cf.br ^bb2(%13 : i32)
  ^bb2(%14: i32):  // pred: ^bb1
    return %14 : i32
  }
  func.func public @i64_load8_s(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c8_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i64 to i8
    llvm.store %8, %7 : i8, !llvm.ptr
    %c8_i32_0 = arith.constant 8 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %9 = arith.extui %c8_i32_0 : i32 to i64
    %10 = arith.addi %9, %c0_i64_1 : i64
    %11 = llvm.getelementptr %3[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i8
    %13 = arith.extsi %12 : i8 to i64
    cf.br ^bb2(%13 : i64)
  ^bb2(%14: i64):  // pred: ^bb1
    return %14 : i64
  }
  func.func public @i64_load8_u(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c8_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i64 to i8
    llvm.store %8, %7 : i8, !llvm.ptr
    %c8_i32_0 = arith.constant 8 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %9 = arith.extui %c8_i32_0 : i32 to i64
    %10 = arith.addi %9, %c0_i64_1 : i64
    %11 = llvm.getelementptr %3[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i8
    %13 = arith.extui %12 : i8 to i64
    cf.br ^bb2(%13 : i64)
  ^bb2(%14: i64):  // pred: ^bb1
    return %14 : i64
  }
  func.func public @i64_load16_s(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c8_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i64 to i16
    llvm.store %8, %7 : i16, !llvm.ptr
    %c8_i32_0 = arith.constant 8 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %9 = arith.extui %c8_i32_0 : i32 to i64
    %10 = arith.addi %9, %c0_i64_1 : i64
    %11 = llvm.getelementptr %3[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i16
    %13 = arith.extsi %12 : i16 to i64
    cf.br ^bb2(%13 : i64)
  ^bb2(%14: i64):  // pred: ^bb1
    return %14 : i64
  }
  func.func public @i64_load16_u(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c8_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i64 to i16
    llvm.store %8, %7 : i16, !llvm.ptr
    %c8_i32_0 = arith.constant 8 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %9 = arith.extui %c8_i32_0 : i32 to i64
    %10 = arith.addi %9, %c0_i64_1 : i64
    %11 = llvm.getelementptr %3[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i16
    %13 = arith.extui %12 : i16 to i64
    cf.br ^bb2(%13 : i64)
  ^bb2(%14: i64):  // pred: ^bb1
    return %14 : i64
  }
  func.func public @i64_load32_s(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c8_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i64 to i32
    llvm.store %8, %7 : i32, !llvm.ptr
    %c8_i32_0 = arith.constant 8 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %9 = arith.extui %c8_i32_0 : i32 to i64
    %10 = arith.addi %9, %c0_i64_1 : i64
    %11 = llvm.getelementptr %3[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %13 = arith.extsi %12 : i32 to i64
    cf.br ^bb2(%13 : i64)
  ^bb2(%14: i64):  // pred: ^bb1
    return %14 : i64
  }
  func.func public @i64_load32_u(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c8_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = arith.trunci %4 : i64 to i32
    llvm.store %8, %7 : i32, !llvm.ptr
    %c8_i32_0 = arith.constant 8 : i32
    %c0_i64_1 = arith.constant 0 : i64
    %9 = arith.extui %c8_i32_0 : i32 to i64
    %10 = arith.addi %9, %c0_i64_1 : i64
    %11 = llvm.getelementptr %3[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %13 = arith.extui %12 : i32 to i64
    cf.br ^bb2(%13 : i64)
  ^bb2(%14: i64):  // pred: ^bb1
    return %14 : i64
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
