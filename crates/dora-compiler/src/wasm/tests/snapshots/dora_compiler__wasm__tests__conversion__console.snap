---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
---
module {
  func.func public @call(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %20 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    %25 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.load %25 : !llvm.ptr -> i32
    %27 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %21 : !llvm.ptr -> i64
    %29 = arith.trunci %28 : i64 to i32
    %30 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %21 : !llvm.ptr -> i64
    %32 = arith.trunci %31 : i64 to i32
    %33 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.load %21 : !llvm.ptr -> i64
    %35 = arith.trunci %34 : i64 to i32
    %36 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %21 : !llvm.ptr -> i64
    %38 = arith.trunci %37 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1048512_i32 = arith.constant 1048512 : i32
    llvm.store %c1048512_i32, %0 : i32, !llvm.ptr
    %c1048808_i32 = arith.constant 1048808 : i32
    llvm.store %c1048808_i32, %1 : i32, !llvm.ptr
    %c1048536_i32 = arith.constant 1048536 : i32
    llvm.store %c1048536_i32, %2 : i32, !llvm.ptr
    %39 = llvm.load %14 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %40 = arith.subi %39, %c48_i32 : i32
    llvm.store %40, %3 : i32, !llvm.ptr
    llvm.store %40, %14 : i32, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c44_i64 = arith.constant 44 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c44_i64 : i64
    %44 = llvm.getelementptr %17[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %45, %44 {alignment = 1 : i64} : i8, !llvm.ptr
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %c28_i64 = arith.constant 28 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c28_i64 : i64
    %49 = llvm.getelementptr %17[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    llvm.store %c0_i32_12, %4 : i32, !llvm.ptr
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c40_i64 = arith.constant 40 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c40_i64 : i64
    %53 = llvm.getelementptr %17[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %56 = arith.extui %54 : i32 to i64
    %57 = arith.addi %56, %c36_i64 : i64
    %58 = llvm.getelementptr %17[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %60 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %61 = arith.extui %59 : i32 to i64
    %62 = arith.addi %61, %c32_i64 : i64
    %63 = llvm.getelementptr %17[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i32, !llvm.ptr
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c20_i64 : i64
    %67 = llvm.getelementptr %17[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_14, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c12_i64 : i64
    %71 = llvm.getelementptr %17[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_15, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c16_i64 : i64
    %75 = llvm.getelementptr %17[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %5 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %77 = arith.cmpi ne, %76, %c0_i32_16 : i32
    cf.cond_br %77, ^bb7, ^bb8
  ^bb2(%78: i32):  // pred: ^bb3
    return %78 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_17 = arith.constant 48 : i32
    %80 = arith.addi %79, %c48_i32_17 : i32
    llvm.store %80, %14 : i32, !llvm.ptr
    %81 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%81 : i32)
  ^bb4:  // 2 preds: ^bb6, ^bb72
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 5 preds: ^bb20, ^bb29, ^bb44, ^bb61, ^bb74
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 4 preds: ^bb7, ^bb8, ^bb32, ^bb34
    %82 = llvm.load %4 : !llvm.ptr -> i32
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %84 = arith.extui %83 : i32 to i64
    %85 = arith.addi %84, %c4_i64 : i64
    %86 = llvm.getelementptr %17[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i32
    %88 = arith.cmpi uge, %82, %87 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_20 : i32
    cf.cond_br %90, ^bb4, ^bb65
  ^bb7:  // 2 preds: ^bb1, ^bb10
    %91 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_21 = arith.constant 20 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c20_i64_21 : i64
    %94 = llvm.getelementptr %17[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %96 = arith.cmpi eq, %95, %c0_i32_22 : i32
    %97 = arith.extui %96 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %98 = arith.cmpi ne, %97, %c0_i32_23 : i32
    cf.cond_br %98, ^bb6, ^bb33
  ^bb8:  // pred: ^bb1
    %99 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_24 = arith.constant 12 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c12_i64_24 : i64
    %102 = llvm.getelementptr %17[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %103, %0 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %104 = arith.cmpi eq, %103, %c0_i32_25 : i32
    %105 = arith.extui %104 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %106 = arith.cmpi ne, %105, %c0_i32_26 : i32
    cf.cond_br %106, ^bb6, ^bb9
  ^bb9:  // pred: ^bb8
    %107 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c8_i64 : i64
    %110 = llvm.getelementptr %17[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %111, %1 : i32, !llvm.ptr
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_27 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %113 = arith.cmpi ule, %c3_i32_27, %c31_i32 : i32
    %114 = scf.if %113 -> (i32) {
      %472 = arith.shli %112, %c3_i32_27 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %114, %6 : i32, !llvm.ptr
    %115 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %116 = arith.addi %115, %c-1_i32 : i32
    %c536870911_i32 = arith.constant 536870911 : i32
    %117 = arith.andi %116, %c536870911_i32 : i32
    %c1_i32_28 = arith.constant 1 : i32
    %118 = arith.addi %117, %c1_i32_28 : i32
    llvm.store %118, %4 : i32, !llvm.ptr
    %119 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c0_i64 : i64
    %122 = llvm.getelementptr %17[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %123, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb10:  // no predecessors
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb9, ^bb31
    %124 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %125 = arith.addi %124, %c4_i32 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c0_i64_29 : i64
    %128 = llvm.getelementptr %17[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %129 = llvm.load volatile %128 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %129, %7 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %130 = arith.cmpi eq, %129, %c0_i32_30 : i32
    %131 = arith.extui %130 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %132 = arith.cmpi ne, %131, %c0_i32_31 : i32
    cf.cond_br %132, ^bb12, ^bb13
  ^bb12:  // 2 preds: ^bb11, ^bb22
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %134 = arith.extui %133 : i32 to i64
    %135 = arith.addi %134, %c0_i64_32 : i64
    %136 = llvm.getelementptr %17[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = llvm.load volatile %136 {alignment = 1 : i64} : !llvm.ptr -> i32
    %138 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %139 = arith.addi %138, %c12_i32 : i32
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_33 = arith.constant 4 : i64
    %141 = arith.extui %140 : i32 to i64
    %142 = arith.addi %141, %c4_i64_33 : i64
    %143 = llvm.getelementptr %17[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %144 = llvm.load volatile %143 {alignment = 1 : i64} : !llvm.ptr -> i32
    %145 = arith.cmpi ult, %144, %29 : i32
    cf.cond_br %145, ^bb23, ^bb24
  ^bb13:  // pred: ^bb11
    %146 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_34 = arith.constant 32 : i64
    %147 = arith.extui %146 : i32 to i64
    %148 = arith.addi %147, %c32_i64_34 : i64
    %149 = llvm.getelementptr %17[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %150 = llvm.load volatile %149 {alignment = 1 : i64} : !llvm.ptr -> i32
    %151 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c0_i64_35 : i64
    %154 = llvm.getelementptr %17[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i32
    %156 = llvm.load %7 : !llvm.ptr -> i32
    %157 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_36 = arith.constant 36 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c36_i64_36 : i64
    %160 = llvm.getelementptr %17[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_37 = arith.constant 12 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c12_i64_37 : i64
    %164 = llvm.getelementptr %17[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    %166 = arith.cmpi ult, %165, %24 : i32
    cf.cond_br %166, ^bb14, ^bb15
  ^bb14:  // 2 preds: ^bb13, ^bb15
    %167 = llvm.getelementptr inbounds %22[%165] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %168 = llvm.load %167 : !llvm.ptr -> !llvm.ptr
    %169 = llvm.ptrtoint %168 : !llvm.ptr to i64
    %c0_i64_38 = arith.constant 0 : i64
    %170 = arith.cmpi eq, %169, %c0_i64_38 : i64
    cf.cond_br %170, ^bb17, ^bb16
  ^bb15:  // pred: ^bb13
    %c3_i32_39 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_39) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %171 = llvm.getelementptr %168[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %172 = llvm.getelementptr %168[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %173 = llvm.getelementptr %168[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %174 = llvm.load %171 : !llvm.ptr -> !llvm.ptr
    %175 = llvm.load %173 : !llvm.ptr -> !llvm.ptr
    %176 = llvm.ptrtoint %174 : !llvm.ptr to i64
    %c0_i64_40 = arith.constant 0 : i64
    %177 = arith.cmpi eq, %176, %c0_i64_40 : i64
    cf.cond_br %177, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_41 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_41) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %178 = llvm.load %172 : !llvm.ptr -> i32
    %179 = arith.cmpi ne, %19, %178 : i32
    cf.cond_br %179, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_42 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_42) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %180 = llvm.call %174(%175, %150, %155, %156) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %181 = arith.cmpi ne, %180, %c0_i32_43 : i32
    cf.cond_br %181, ^bb5, ^bb22
  ^bb21:  // pred: ^bb18
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    cf.br ^bb12
  ^bb23:  // 2 preds: ^bb12, ^bb24
    %182 = llvm.getelementptr inbounds %27[%144] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %183 = llvm.load %182 : !llvm.ptr -> !llvm.ptr
    %184 = llvm.ptrtoint %183 : !llvm.ptr to i64
    %c0_i64_44 = arith.constant 0 : i64
    %185 = arith.cmpi eq, %184, %c0_i64_44 : i64
    cf.cond_br %185, ^bb26, ^bb25
  ^bb24:  // pred: ^bb12
    %c3_i32_45 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_45) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %186 = llvm.getelementptr %183[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %187 = llvm.getelementptr %183[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %188 = llvm.getelementptr %183[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %189 = llvm.load %186 : !llvm.ptr -> !llvm.ptr
    %190 = llvm.load %188 : !llvm.ptr -> !llvm.ptr
    %191 = llvm.ptrtoint %189 : !llvm.ptr to i64
    %c0_i64_46 = arith.constant 0 : i64
    %192 = arith.cmpi eq, %191, %c0_i64_46 : i64
    cf.cond_br %192, ^bb28, ^bb27
  ^bb26:  // pred: ^bb23
    %c4_i32_47 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_47) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %193 = llvm.load %187 : !llvm.ptr -> i32
    %194 = arith.cmpi ne, %26, %193 : i32
    cf.cond_br %194, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %195 = llvm.call %189(%190, %137, %139) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %196 = arith.cmpi ne, %195, %c0_i32_49 : i32
    cf.cond_br %196, ^bb5, ^bb31
  ^bb30:  // pred: ^bb27
    %c5_i32_50 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_50) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    %197 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %198 = arith.addi %197, %c8_i32 : i32
    llvm.store %198, %1 : i32, !llvm.ptr
    %199 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_51 = arith.constant 8 : i32
    %200 = arith.addi %199, %c8_i32_51 : i32
    llvm.store %200, %0 : i32, !llvm.ptr
    %201 = llvm.load %6 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %202 = arith.addi %201, %c-8_i32 : i32
    llvm.store %202, %6 : i32, !llvm.ptr
    %c0_i32_52 = arith.constant 0 : i32
    %203 = arith.cmpi ne, %202, %c0_i32_52 : i32
    cf.cond_br %203, ^bb11, ^bb32
  ^bb32:  // pred: ^bb31
    cf.br ^bb6
  ^bb33:  // pred: ^bb7
    %204 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32_53 = arith.constant 5 : i32
    %c31_i32_54 = arith.constant 31 : i32
    %205 = arith.cmpi ule, %c5_i32_53, %c31_i32_54 : i32
    %206 = scf.if %205 -> (i32) {
      %472 = arith.shli %204, %c5_i32_53 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %206, %8 : i32, !llvm.ptr
    %207 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_55 = arith.constant -1 : i32
    %208 = arith.addi %207, %c-1_i32_55 : i32
    %c134217727_i32 = arith.constant 134217727 : i32
    %209 = arith.andi %208, %c134217727_i32 : i32
    %c1_i32_56 = arith.constant 1 : i32
    %210 = arith.addi %209, %c1_i32_56 : i32
    llvm.store %210, %4 : i32, !llvm.ptr
    %211 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_57 = arith.constant 8 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c8_i64_57 : i64
    %214 = llvm.getelementptr %17[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load volatile %214 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %215, %9 : i32, !llvm.ptr
    %216 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_58 = arith.constant 0 : i64
    %217 = arith.extui %216 : i32 to i64
    %218 = arith.addi %217, %c0_i64_58 : i64
    %219 = llvm.getelementptr %17[%218] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %220 = llvm.load volatile %219 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %220, %0 : i32, !llvm.ptr
    %c0_i32_59 = arith.constant 0 : i32
    llvm.store %c0_i32_59, %6 : i32, !llvm.ptr
    cf.br ^bb35
  ^bb34:  // pred: ^bb64
    cf.br ^bb6
  ^bb35:  // 2 preds: ^bb33, ^bb63
    %221 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_60 = arith.constant 4 : i32
    %222 = arith.addi %221, %c4_i32_60 : i32
    %c0_i64_61 = arith.constant 0 : i64
    %223 = arith.extui %222 : i32 to i64
    %224 = arith.addi %223, %c0_i64_61 : i64
    %225 = llvm.getelementptr %17[%224] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %226 = llvm.load volatile %225 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %226, %1 : i32, !llvm.ptr
    %c0_i32_62 = arith.constant 0 : i32
    %227 = arith.cmpi eq, %226, %c0_i32_62 : i32
    %228 = arith.extui %227 : i1 to i32
    %c0_i32_63 = arith.constant 0 : i32
    %229 = arith.cmpi ne, %228, %c0_i32_63 : i32
    cf.cond_br %229, ^bb36, ^bb37
  ^bb36:  // 2 preds: ^bb35, ^bb46
    %230 = llvm.load %3 : !llvm.ptr -> i32
    %231 = llvm.load %5 : !llvm.ptr -> i32
    %232 = llvm.load %6 : !llvm.ptr -> i32
    %233 = arith.addi %231, %232 : i32
    llvm.store %233, %1 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %234 = arith.addi %233, %c16_i32 : i32
    %c0_i64_64 = arith.constant 0 : i64
    %235 = arith.extui %234 : i32 to i64
    %236 = arith.addi %235, %c0_i64_64 : i64
    %237 = llvm.getelementptr %17[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %238 = llvm.load volatile %237 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c28_i64_65 = arith.constant 28 : i64
    %239 = arith.extui %230 : i32 to i64
    %240 = arith.addi %239, %c28_i64_65 : i64
    %241 = llvm.getelementptr %17[%240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %238, %241 {alignment = 1 : i64} : i32, !llvm.ptr
    %242 = llvm.load %3 : !llvm.ptr -> i32
    %243 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %244 = arith.addi %243, %c28_i32 : i32
    %c0_i64_66 = arith.constant 0 : i64
    %245 = arith.extui %244 : i32 to i64
    %246 = arith.addi %245, %c0_i64_66 : i64
    %247 = llvm.getelementptr %17[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %248 = llvm.load volatile %247 {alignment = 1 : i64} : !llvm.ptr -> i8
    %249 = arith.extui %248 : i8 to i32
    %c44_i64_67 = arith.constant 44 : i64
    %250 = arith.extui %242 : i32 to i64
    %251 = arith.addi %250, %c44_i64_67 : i64
    %252 = llvm.getelementptr %17[%251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %253 = arith.trunci %249 : i32 to i8
    llvm.store volatile %253, %252 {alignment = 1 : i64} : i8, !llvm.ptr
    %254 = llvm.load %3 : !llvm.ptr -> i32
    %255 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %256 = arith.addi %255, %c24_i32 : i32
    %c0_i64_68 = arith.constant 0 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c0_i64_68 : i64
    %259 = llvm.getelementptr %17[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c40_i64_69 = arith.constant 40 : i64
    %261 = arith.extui %254 : i32 to i64
    %262 = arith.addi %261, %c40_i64_69 : i64
    %263 = llvm.getelementptr %17[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %260, %263 {alignment = 1 : i64} : i32, !llvm.ptr
    %264 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_70 = arith.constant 12 : i32
    %265 = arith.addi %264, %c12_i32_70 : i32
    %c0_i64_71 = arith.constant 0 : i64
    %266 = arith.extui %265 : i32 to i64
    %267 = arith.addi %266, %c0_i64_71 : i64
    %268 = llvm.getelementptr %17[%267] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %269 = llvm.load volatile %268 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %269, %7 : i32, !llvm.ptr
    %c0_i32_72 = arith.constant 0 : i32
    llvm.store %c0_i32_72, %10 : i32, !llvm.ptr
    %c0_i32_73 = arith.constant 0 : i32
    llvm.store %c0_i32_73, %11 : i32, !llvm.ptr
    %270 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_74 = arith.constant 8 : i32
    %271 = arith.addi %270, %c8_i32_74 : i32
    %c0_i64_75 = arith.constant 0 : i64
    %272 = arith.extui %271 : i32 to i64
    %273 = arith.addi %272, %c0_i64_75 : i64
    %274 = llvm.getelementptr %17[%273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %275 = llvm.load volatile %274 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %275 : i32, [
      default: ^bb48,
      0: ^bb48,
      1: ^bb49,
      2: ^bb47
    ]
  ^bb37:  // pred: ^bb35
    %276 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_76 = arith.constant 32 : i64
    %277 = arith.extui %276 : i32 to i64
    %278 = arith.addi %277, %c32_i64_76 : i64
    %279 = llvm.getelementptr %17[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i32
    %281 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_77 = arith.constant 0 : i64
    %282 = arith.extui %281 : i32 to i64
    %283 = arith.addi %282, %c0_i64_77 : i64
    %284 = llvm.getelementptr %17[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %285 = llvm.load volatile %284 {alignment = 1 : i64} : !llvm.ptr -> i32
    %286 = llvm.load %1 : !llvm.ptr -> i32
    %287 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_78 = arith.constant 36 : i64
    %288 = arith.extui %287 : i32 to i64
    %289 = arith.addi %288, %c36_i64_78 : i64
    %290 = llvm.getelementptr %17[%289] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %291 = llvm.load volatile %290 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_79 = arith.constant 12 : i64
    %292 = arith.extui %291 : i32 to i64
    %293 = arith.addi %292, %c12_i64_79 : i64
    %294 = llvm.getelementptr %17[%293] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %295 = llvm.load volatile %294 {alignment = 1 : i64} : !llvm.ptr -> i32
    %296 = arith.cmpi ult, %295, %32 : i32
    cf.cond_br %296, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %297 = llvm.getelementptr inbounds %30[%295] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %298 = llvm.load %297 : !llvm.ptr -> !llvm.ptr
    %299 = llvm.ptrtoint %298 : !llvm.ptr to i64
    %c0_i64_80 = arith.constant 0 : i64
    %300 = arith.cmpi eq, %299, %c0_i64_80 : i64
    cf.cond_br %300, ^bb41, ^bb40
  ^bb39:  // pred: ^bb37
    %c3_i32_81 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_81) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %301 = llvm.getelementptr %298[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %302 = llvm.getelementptr %298[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %303 = llvm.getelementptr %298[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %304 = llvm.load %301 : !llvm.ptr -> !llvm.ptr
    %305 = llvm.load %303 : !llvm.ptr -> !llvm.ptr
    %306 = llvm.ptrtoint %304 : !llvm.ptr to i64
    %c0_i64_82 = arith.constant 0 : i64
    %307 = arith.cmpi eq, %306, %c0_i64_82 : i64
    cf.cond_br %307, ^bb43, ^bb42
  ^bb41:  // pred: ^bb38
    %c4_i32_83 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_83) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %308 = llvm.load %302 : !llvm.ptr -> i32
    %309 = arith.cmpi ne, %19, %308 : i32
    cf.cond_br %309, ^bb45, ^bb44
  ^bb43:  // pred: ^bb40
    %c3_i32_84 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_84) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %310 = llvm.call %304(%305, %280, %285, %286) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_85 = arith.constant 0 : i32
    %311 = arith.cmpi ne, %310, %c0_i32_85 : i32
    cf.cond_br %311, ^bb5, ^bb46
  ^bb45:  // pred: ^bb42
    %c5_i32_86 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_86) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    cf.br ^bb36
  ^bb47:  // 3 preds: ^bb36, ^bb48, ^bb49
    %312 = llvm.load %3 : !llvm.ptr -> i32
    %313 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64_87 = arith.constant 16 : i64
    %314 = arith.extui %312 : i32 to i64
    %315 = arith.addi %314, %c16_i64_87 : i64
    %316 = llvm.getelementptr %17[%315] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %313, %316 {alignment = 1 : i64} : i32, !llvm.ptr
    %317 = llvm.load %3 : !llvm.ptr -> i32
    %318 = llvm.load %11 : !llvm.ptr -> i32
    %c12_i64_88 = arith.constant 12 : i64
    %319 = arith.extui %317 : i32 to i64
    %320 = arith.addi %319, %c12_i64_88 : i64
    %321 = llvm.getelementptr %17[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %318, %321 {alignment = 1 : i64} : i32, !llvm.ptr
    %322 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_89 = arith.constant 4 : i32
    %323 = arith.addi %322, %c4_i32_89 : i32
    %c0_i64_90 = arith.constant 0 : i64
    %324 = arith.extui %323 : i32 to i64
    %325 = arith.addi %324, %c0_i64_90 : i64
    %326 = llvm.getelementptr %17[%325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %327 = llvm.load volatile %326 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %327, %7 : i32, !llvm.ptr
    %328 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_91 = arith.constant 0 : i64
    %329 = arith.extui %328 : i32 to i64
    %330 = arith.addi %329, %c0_i64_91 : i64
    %331 = llvm.getelementptr %17[%330] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %332 = llvm.load volatile %331 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %332 : i32, [
      default: ^bb52,
      0: ^bb52,
      1: ^bb53,
      2: ^bb51
    ]
  ^bb48:  // 3 preds: ^bb36, ^bb36, ^bb50
    %c1_i32_92 = arith.constant 1 : i32
    llvm.store %c1_i32_92, %11 : i32, !llvm.ptr
    cf.br ^bb47
  ^bb49:  // pred: ^bb36
    %333 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_93 = arith.constant 3 : i32
    %c31_i32_94 = arith.constant 31 : i32
    %334 = arith.cmpi ule, %c3_i32_93, %c31_i32_94 : i32
    %335 = scf.if %334 -> (i32) {
      %472 = arith.shli %333, %c3_i32_93 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %335, %12 : i32, !llvm.ptr
    %c0_i32_95 = arith.constant 0 : i32
    llvm.store %c0_i32_95, %11 : i32, !llvm.ptr
    %336 = llvm.load %9 : !llvm.ptr -> i32
    %337 = llvm.load %12 : !llvm.ptr -> i32
    %338 = arith.addi %336, %337 : i32
    llvm.store %338, %12 : i32, !llvm.ptr
    %c4_i64_96 = arith.constant 4 : i64
    %339 = arith.extui %338 : i32 to i64
    %340 = arith.addi %339, %c4_i64_96 : i64
    %341 = llvm.getelementptr %17[%340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %342 = llvm.load volatile %341 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_97 = arith.constant 0 : i32
    %343 = arith.cmpi ne, %342, %c0_i32_97 : i32
    cf.cond_br %343, ^bb47, ^bb50
  ^bb50:  // pred: ^bb49
    %344 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_98 = arith.constant 0 : i64
    %345 = arith.extui %344 : i32 to i64
    %346 = arith.addi %345, %c0_i64_98 : i64
    %347 = llvm.getelementptr %17[%346] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %348 = llvm.load volatile %347 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %348, %7 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb51:  // 3 preds: ^bb47, ^bb52, ^bb53
    %349 = llvm.load %3 : !llvm.ptr -> i32
    %350 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %351 = arith.extui %349 : i32 to i64
    %352 = arith.addi %351, %c24_i64 : i64
    %353 = llvm.getelementptr %17[%352] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %350, %353 {alignment = 1 : i64} : i32, !llvm.ptr
    %354 = llvm.load %3 : !llvm.ptr -> i32
    %355 = llvm.load %10 : !llvm.ptr -> i32
    %c20_i64_99 = arith.constant 20 : i64
    %356 = arith.extui %354 : i32 to i64
    %357 = arith.addi %356, %c20_i64_99 : i64
    %358 = llvm.getelementptr %17[%357] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %355, %358 {alignment = 1 : i64} : i32, !llvm.ptr
    %359 = llvm.load %9 : !llvm.ptr -> i32
    %360 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %361 = arith.addi %360, %c20_i32 : i32
    %c0_i64_100 = arith.constant 0 : i64
    %362 = arith.extui %361 : i32 to i64
    %363 = arith.addi %362, %c0_i64_100 : i64
    %364 = llvm.getelementptr %17[%363] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %365 = llvm.load volatile %364 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32_101 = arith.constant 3 : i32
    %c31_i32_102 = arith.constant 31 : i32
    %366 = arith.cmpi ule, %c3_i32_101, %c31_i32_102 : i32
    %367 = scf.if %366 -> (i32) {
      %472 = arith.shli %365, %c3_i32_101 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    %368 = arith.addi %359, %367 : i32
    llvm.store %368, %1 : i32, !llvm.ptr
    %c0_i64_103 = arith.constant 0 : i64
    %369 = arith.extui %368 : i32 to i64
    %370 = arith.addi %369, %c0_i64_103 : i64
    %371 = llvm.getelementptr %17[%370] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %372 = llvm.load volatile %371 {alignment = 1 : i64} : !llvm.ptr -> i32
    %373 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_104 = arith.constant 12 : i32
    %374 = arith.addi %373, %c12_i32_104 : i32
    %375 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_105 = arith.constant 4 : i64
    %376 = arith.extui %375 : i32 to i64
    %377 = arith.addi %376, %c4_i64_105 : i64
    %378 = llvm.getelementptr %17[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i32
    %380 = arith.cmpi ult, %379, %35 : i32
    cf.cond_br %380, ^bb55, ^bb56
  ^bb52:  // 3 preds: ^bb47, ^bb47, ^bb54
    %c1_i32_106 = arith.constant 1 : i32
    llvm.store %c1_i32_106, %10 : i32, !llvm.ptr
    cf.br ^bb51
  ^bb53:  // pred: ^bb47
    %381 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_107 = arith.constant 3 : i32
    %c31_i32_108 = arith.constant 31 : i32
    %382 = arith.cmpi ule, %c3_i32_107, %c31_i32_108 : i32
    %383 = scf.if %382 -> (i32) {
      %472 = arith.shli %381, %c3_i32_107 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %383, %11 : i32, !llvm.ptr
    %384 = llvm.load %9 : !llvm.ptr -> i32
    %385 = llvm.load %11 : !llvm.ptr -> i32
    %386 = arith.addi %384, %385 : i32
    llvm.store %386, %11 : i32, !llvm.ptr
    %c4_i64_109 = arith.constant 4 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c4_i64_109 : i64
    %389 = llvm.getelementptr %17[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_110 = arith.constant 0 : i32
    %391 = arith.cmpi ne, %390, %c0_i32_110 : i32
    cf.cond_br %391, ^bb51, ^bb54
  ^bb54:  // pred: ^bb53
    %392 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i64_111 = arith.constant 0 : i64
    %393 = arith.extui %392 : i32 to i64
    %394 = arith.addi %393, %c0_i64_111 : i64
    %395 = llvm.getelementptr %17[%394] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %396 = llvm.load volatile %395 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %396, %7 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb55:  // 2 preds: ^bb51, ^bb56
    %397 = llvm.getelementptr inbounds %33[%379] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %398 = llvm.load %397 : !llvm.ptr -> !llvm.ptr
    %399 = llvm.ptrtoint %398 : !llvm.ptr to i64
    %c0_i64_112 = arith.constant 0 : i64
    %400 = arith.cmpi eq, %399, %c0_i64_112 : i64
    cf.cond_br %400, ^bb58, ^bb57
  ^bb56:  // pred: ^bb51
    %c3_i32_113 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_113) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %401 = llvm.getelementptr %398[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %402 = llvm.getelementptr %398[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %403 = llvm.getelementptr %398[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %404 = llvm.load %401 : !llvm.ptr -> !llvm.ptr
    %405 = llvm.load %403 : !llvm.ptr -> !llvm.ptr
    %406 = llvm.ptrtoint %404 : !llvm.ptr to i64
    %c0_i64_114 = arith.constant 0 : i64
    %407 = arith.cmpi eq, %406, %c0_i64_114 : i64
    cf.cond_br %407, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c4_i32_115 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_115) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %408 = llvm.load %402 : !llvm.ptr -> i32
    %409 = arith.cmpi ne, %26, %408 : i32
    cf.cond_br %409, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_116 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_116) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %410 = llvm.call %404(%405, %372, %374) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_117 = arith.constant 0 : i32
    %411 = arith.cmpi ne, %410, %c0_i32_117 : i32
    cf.cond_br %411, ^bb5, ^bb63
  ^bb62:  // pred: ^bb59
    %c5_i32_118 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_118) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // pred: ^bb61
    %412 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_119 = arith.constant 8 : i32
    %413 = arith.addi %412, %c8_i32_119 : i32
    llvm.store %413, %0 : i32, !llvm.ptr
    %414 = llvm.load %8 : !llvm.ptr -> i32
    %415 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_120 = arith.constant 32 : i32
    %416 = arith.addi %415, %c32_i32_120 : i32
    llvm.store %416, %6 : i32, !llvm.ptr
    %417 = arith.cmpi eq, %414, %416 : i32
    %418 = arith.extui %417 : i1 to i32
    %c0_i32_121 = arith.constant 0 : i32
    %419 = arith.cmpi eq, %418, %c0_i32_121 : i32
    %420 = arith.extui %419 : i1 to i32
    %c0_i32_122 = arith.constant 0 : i32
    %421 = arith.cmpi ne, %420, %c0_i32_122 : i32
    cf.cond_br %421, ^bb35, ^bb64
  ^bb64:  // pred: ^bb63
    cf.br ^bb34
  ^bb65:  // pred: ^bb6
    %422 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_123 = arith.constant 32 : i64
    %423 = arith.extui %422 : i32 to i64
    %424 = arith.addi %423, %c32_i64_123 : i64
    %425 = llvm.getelementptr %17[%424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %426 = llvm.load volatile %425 {alignment = 1 : i64} : !llvm.ptr -> i32
    %427 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_124 = arith.constant 0 : i64
    %428 = arith.extui %427 : i32 to i64
    %429 = arith.addi %428, %c0_i64_124 : i64
    %430 = llvm.getelementptr %17[%429] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %431 = llvm.load volatile %430 {alignment = 1 : i64} : !llvm.ptr -> i32
    %432 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_125 = arith.constant 3 : i32
    %c31_i32_126 = arith.constant 31 : i32
    %433 = arith.cmpi ule, %c3_i32_125, %c31_i32_126 : i32
    %434 = scf.if %433 -> (i32) {
      %472 = arith.shli %432, %c3_i32_125 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    %435 = arith.addi %431, %434 : i32
    llvm.store %435, %1 : i32, !llvm.ptr
    %c0_i64_127 = arith.constant 0 : i64
    %436 = arith.extui %435 : i32 to i64
    %437 = arith.addi %436, %c0_i64_127 : i64
    %438 = llvm.getelementptr %17[%437] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %439 = llvm.load volatile %438 {alignment = 1 : i64} : !llvm.ptr -> i32
    %440 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_128 = arith.constant 4 : i64
    %441 = arith.extui %440 : i32 to i64
    %442 = arith.addi %441, %c4_i64_128 : i64
    %443 = llvm.getelementptr %17[%442] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %444 = llvm.load volatile %443 {alignment = 1 : i64} : !llvm.ptr -> i32
    %445 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_129 = arith.constant 36 : i64
    %446 = arith.extui %445 : i32 to i64
    %447 = arith.addi %446, %c36_i64_129 : i64
    %448 = llvm.getelementptr %17[%447] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %449 = llvm.load volatile %448 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_130 = arith.constant 12 : i64
    %450 = arith.extui %449 : i32 to i64
    %451 = arith.addi %450, %c12_i64_130 : i64
    %452 = llvm.getelementptr %17[%451] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %453 = llvm.load volatile %452 {alignment = 1 : i64} : !llvm.ptr -> i32
    %454 = arith.cmpi ult, %453, %38 : i32
    cf.cond_br %454, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %455 = llvm.getelementptr inbounds %36[%453] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %456 = llvm.load %455 : !llvm.ptr -> !llvm.ptr
    %457 = llvm.ptrtoint %456 : !llvm.ptr to i64
    %c0_i64_131 = arith.constant 0 : i64
    %458 = arith.cmpi eq, %457, %c0_i64_131 : i64
    cf.cond_br %458, ^bb69, ^bb68
  ^bb67:  // pred: ^bb65
    %c3_i32_132 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_132) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %459 = llvm.getelementptr %456[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %460 = llvm.getelementptr %456[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %461 = llvm.getelementptr %456[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %462 = llvm.load %459 : !llvm.ptr -> !llvm.ptr
    %463 = llvm.load %461 : !llvm.ptr -> !llvm.ptr
    %464 = llvm.ptrtoint %462 : !llvm.ptr to i64
    %c0_i64_133 = arith.constant 0 : i64
    %465 = arith.cmpi eq, %464, %c0_i64_133 : i64
    cf.cond_br %465, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c4_i32_134 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_134) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %466 = llvm.load %460 : !llvm.ptr -> i32
    %467 = arith.cmpi ne, %19, %466 : i32
    cf.cond_br %467, ^bb73, ^bb72
  ^bb71:  // pred: ^bb68
    %c3_i32_135 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_135) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %468 = llvm.call %462(%463, %426, %439, %444) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_136 = arith.constant 0 : i32
    %469 = arith.cmpi eq, %468, %c0_i32_136 : i32
    %470 = arith.extui %469 : i1 to i32
    %c0_i32_137 = arith.constant 0 : i32
    %471 = arith.cmpi ne, %470, %c0_i32_137 : i32
    cf.cond_br %471, ^bb4, ^bb74
  ^bb73:  // pred: ^bb70
    %c5_i32_138 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_138) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // pred: ^bb72
    cf.br ^bb5
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
