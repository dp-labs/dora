---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @main(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %20 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> i32
    %24 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.load %24 : !llvm.ptr -> i32
    %26 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %21 : !llvm.ptr -> i32
    %28 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %21 : !llvm.ptr -> i32
    %30 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %21 : !llvm.ptr -> i32
    %32 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.load %21 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1048512_i32 = arith.constant 1048512 : i32
    llvm.store %c1048512_i32, %0 : i32, !llvm.ptr
    %c1048808_i32 = arith.constant 1048808 : i32
    llvm.store %c1048808_i32, %1 : i32, !llvm.ptr
    %c1048536_i32 = arith.constant 1048536 : i32
    llvm.store %c1048536_i32, %2 : i32, !llvm.ptr
    %34 = llvm.load %14 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %35 = arith.subi %34, %c48_i32 : i32
    llvm.store %35, %3 : i32, !llvm.ptr
    llvm.store %35, %14 : i32, !llvm.ptr
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c44_i64 = arith.constant 44 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c44_i64 : i64
    %39 = llvm.getelementptr %17[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %40, %39 {alignment = 1 : i64} : i8, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %c28_i64 = arith.constant 28 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c28_i64 : i64
    %44 = llvm.getelementptr %17[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    llvm.store %c0_i32_12, %4 : i32, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c40_i64 = arith.constant 40 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c40_i64 : i64
    %48 = llvm.getelementptr %17[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %50 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %51 = arith.extui %49 : i32 to i64
    %52 = arith.addi %51, %c36_i64 : i64
    %53 = llvm.getelementptr %17[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %56 = arith.extui %54 : i32 to i64
    %57 = arith.addi %56, %c32_i64 : i64
    %58 = llvm.getelementptr %17[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c20_i64 : i64
    %62 = llvm.getelementptr %17[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_14, %62 {alignment = 1 : i64} : i32, !llvm.ptr
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c12_i64 : i64
    %66 = llvm.getelementptr %17[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_15, %66 {alignment = 1 : i64} : i32, !llvm.ptr
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c16_i64 : i64
    %70 = llvm.getelementptr %17[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %71, %5 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_16 : i32
    cf.cond_br %72, ^bb7, ^bb8
  ^bb2(%73: i32):  // pred: ^bb3
    return %73 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %74 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_17 = arith.constant 48 : i32
    %75 = arith.addi %74, %c48_i32_17 : i32
    llvm.store %75, %14 : i32, !llvm.ptr
    %76 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%76 : i32)
  ^bb4:  // 2 preds: ^bb6, ^bb72
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 5 preds: ^bb20, ^bb29, ^bb44, ^bb61, ^bb74
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 4 preds: ^bb7, ^bb8, ^bb32, ^bb34
    %77 = llvm.load %4 : !llvm.ptr -> i32
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c4_i64 : i64
    %81 = llvm.getelementptr %17[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i32
    %83 = arith.cmpi uge, %77, %82 : i32
    %84 = arith.extui %83 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %85 = arith.cmpi ne, %84, %c0_i32_20 : i32
    cf.cond_br %85, ^bb4, ^bb65
  ^bb7:  // 2 preds: ^bb1, ^bb10
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_21 = arith.constant 20 : i64
    %87 = arith.extui %86 : i32 to i64
    %88 = arith.addi %87, %c20_i64_21 : i64
    %89 = llvm.getelementptr %17[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %90 = llvm.load volatile %89 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %90, %1 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %91 = arith.cmpi eq, %90, %c0_i32_22 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_23 : i32
    cf.cond_br %93, ^bb6, ^bb33
  ^bb8:  // pred: ^bb1
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_24 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_24 : i64
    %97 = llvm.getelementptr %17[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %98, %0 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %99 = arith.cmpi eq, %98, %c0_i32_25 : i32
    %100 = arith.extui %99 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %101 = arith.cmpi ne, %100, %c0_i32_26 : i32
    cf.cond_br %101, ^bb6, ^bb9
  ^bb9:  // pred: ^bb8
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c8_i64 : i64
    %105 = llvm.getelementptr %17[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %106, %1 : i32, !llvm.ptr
    %107 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_27 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %108 = arith.cmpi ule, %c3_i32_27, %c31_i32 : i32
    %109 = scf.if %108 -> (i32) {
      %467 = arith.shli %107, %c3_i32_27 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %109, %6 : i32, !llvm.ptr
    %110 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %111 = arith.addi %110, %c-1_i32 : i32
    %c536870911_i32 = arith.constant 536870911 : i32
    %112 = arith.andi %111, %c536870911_i32 : i32
    %c1_i32_28 = arith.constant 1 : i32
    %113 = arith.addi %112, %c1_i32_28 : i32
    llvm.store %113, %4 : i32, !llvm.ptr
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %115 = arith.extui %114 : i32 to i64
    %116 = arith.addi %115, %c0_i64 : i64
    %117 = llvm.getelementptr %17[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %118 = llvm.load volatile %117 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %118, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb10:  // no predecessors
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb9, ^bb31
    %119 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %120 = arith.addi %119, %c4_i32 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64_29 : i64
    %123 = llvm.getelementptr %17[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %124, %7 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %125 = arith.cmpi eq, %124, %c0_i32_30 : i32
    %126 = arith.extui %125 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %127 = arith.cmpi ne, %126, %c0_i32_31 : i32
    cf.cond_br %127, ^bb12, ^bb13
  ^bb12:  // 2 preds: ^bb11, ^bb22
    %128 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c0_i64_32 : i64
    %131 = llvm.getelementptr %17[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load volatile %131 {alignment = 1 : i64} : !llvm.ptr -> i32
    %133 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %134 = arith.addi %133, %c12_i32 : i32
    %135 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_33 = arith.constant 4 : i64
    %136 = arith.extui %135 : i32 to i64
    %137 = arith.addi %136, %c4_i64_33 : i64
    %138 = llvm.getelementptr %17[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load volatile %138 {alignment = 1 : i64} : !llvm.ptr -> i32
    %140 = arith.cmpi ult, %139, %27 : i32
    cf.cond_br %140, ^bb23, ^bb24
  ^bb13:  // pred: ^bb11
    %141 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_34 = arith.constant 32 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c32_i64_34 : i64
    %144 = llvm.getelementptr %17[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %146 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %147 = arith.extui %146 : i32 to i64
    %148 = arith.addi %147, %c0_i64_35 : i64
    %149 = llvm.getelementptr %17[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %150 = llvm.load volatile %149 {alignment = 1 : i64} : !llvm.ptr -> i32
    %151 = llvm.load %7 : !llvm.ptr -> i32
    %152 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_36 = arith.constant 36 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c36_i64_36 : i64
    %155 = llvm.getelementptr %17[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %156 = llvm.load volatile %155 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_37 = arith.constant 12 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c12_i64_37 : i64
    %159 = llvm.getelementptr %17[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i32
    %161 = arith.cmpi ult, %160, %23 : i32
    cf.cond_br %161, ^bb14, ^bb15
  ^bb14:  // 2 preds: ^bb13, ^bb15
    %162 = llvm.getelementptr %22[%160] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %163 = llvm.load %162 : !llvm.ptr -> !llvm.ptr
    %164 = llvm.load %163 : !llvm.ptr -> i32
    %c0_i32_38 = arith.constant 0 : i32
    %165 = arith.cmpi eq, %164, %c0_i32_38 : i32
    cf.cond_br %165, ^bb17, ^bb16
  ^bb15:  // pred: ^bb13
    %c3_i32_39 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_39) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %166 = llvm.getelementptr %163[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %167 = llvm.getelementptr %163[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %168 = llvm.getelementptr %163[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %169 = llvm.load %166 : !llvm.ptr -> !llvm.ptr
    %170 = llvm.load %168 : !llvm.ptr -> !llvm.ptr
    %171 = llvm.load %169 : !llvm.ptr -> i32
    %c0_i32_40 = arith.constant 0 : i32
    %172 = arith.cmpi eq, %171, %c0_i32_40 : i32
    cf.cond_br %172, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_41 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_41) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %173 = llvm.load %167 : !llvm.ptr -> i32
    %174 = arith.cmpi ne, %19, %173 : i32
    cf.cond_br %174, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_42 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_42) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %175 = llvm.call %169(%170, %145, %150, %151) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %176 = arith.cmpi ne, %175, %c0_i32_43 : i32
    cf.cond_br %176, ^bb5, ^bb22
  ^bb21:  // pred: ^bb18
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    cf.br ^bb12
  ^bb23:  // 2 preds: ^bb12, ^bb24
    %177 = llvm.getelementptr %26[%139] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %178 = llvm.load %177 : !llvm.ptr -> !llvm.ptr
    %179 = llvm.load %178 : !llvm.ptr -> i32
    %c0_i32_44 = arith.constant 0 : i32
    %180 = arith.cmpi eq, %179, %c0_i32_44 : i32
    cf.cond_br %180, ^bb26, ^bb25
  ^bb24:  // pred: ^bb12
    %c3_i32_45 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_45) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %181 = llvm.getelementptr %178[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %182 = llvm.getelementptr %178[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %183 = llvm.getelementptr %178[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %184 = llvm.load %181 : !llvm.ptr -> !llvm.ptr
    %185 = llvm.load %183 : !llvm.ptr -> !llvm.ptr
    %186 = llvm.load %184 : !llvm.ptr -> i32
    %c0_i32_46 = arith.constant 0 : i32
    %187 = arith.cmpi eq, %186, %c0_i32_46 : i32
    cf.cond_br %187, ^bb28, ^bb27
  ^bb26:  // pred: ^bb23
    %c4_i32_47 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_47) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %188 = llvm.load %182 : !llvm.ptr -> i32
    %189 = arith.cmpi ne, %25, %188 : i32
    cf.cond_br %189, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %190 = llvm.call %184(%185, %132, %134) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %191 = arith.cmpi ne, %190, %c0_i32_49 : i32
    cf.cond_br %191, ^bb5, ^bb31
  ^bb30:  // pred: ^bb27
    %c5_i32_50 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_50) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    %192 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %193 = arith.addi %192, %c8_i32 : i32
    llvm.store %193, %1 : i32, !llvm.ptr
    %194 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_51 = arith.constant 8 : i32
    %195 = arith.addi %194, %c8_i32_51 : i32
    llvm.store %195, %0 : i32, !llvm.ptr
    %196 = llvm.load %6 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %197 = arith.addi %196, %c-8_i32 : i32
    llvm.store %197, %6 : i32, !llvm.ptr
    %c0_i32_52 = arith.constant 0 : i32
    %198 = arith.cmpi ne, %197, %c0_i32_52 : i32
    cf.cond_br %198, ^bb11, ^bb32
  ^bb32:  // pred: ^bb31
    cf.br ^bb6
  ^bb33:  // pred: ^bb7
    %199 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32_53 = arith.constant 5 : i32
    %c31_i32_54 = arith.constant 31 : i32
    %200 = arith.cmpi ule, %c5_i32_53, %c31_i32_54 : i32
    %201 = scf.if %200 -> (i32) {
      %467 = arith.shli %199, %c5_i32_53 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %201, %8 : i32, !llvm.ptr
    %202 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_55 = arith.constant -1 : i32
    %203 = arith.addi %202, %c-1_i32_55 : i32
    %c134217727_i32 = arith.constant 134217727 : i32
    %204 = arith.andi %203, %c134217727_i32 : i32
    %c1_i32_56 = arith.constant 1 : i32
    %205 = arith.addi %204, %c1_i32_56 : i32
    llvm.store %205, %4 : i32, !llvm.ptr
    %206 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_57 = arith.constant 8 : i64
    %207 = arith.extui %206 : i32 to i64
    %208 = arith.addi %207, %c8_i64_57 : i64
    %209 = llvm.getelementptr %17[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %210 = llvm.load volatile %209 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %210, %9 : i32, !llvm.ptr
    %211 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_58 = arith.constant 0 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c0_i64_58 : i64
    %214 = llvm.getelementptr %17[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load volatile %214 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %215, %0 : i32, !llvm.ptr
    %c0_i32_59 = arith.constant 0 : i32
    llvm.store %c0_i32_59, %6 : i32, !llvm.ptr
    cf.br ^bb35
  ^bb34:  // pred: ^bb64
    cf.br ^bb6
  ^bb35:  // 2 preds: ^bb33, ^bb63
    %216 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_60 = arith.constant 4 : i32
    %217 = arith.addi %216, %c4_i32_60 : i32
    %c0_i64_61 = arith.constant 0 : i64
    %218 = arith.extui %217 : i32 to i64
    %219 = arith.addi %218, %c0_i64_61 : i64
    %220 = llvm.getelementptr %17[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %221 = llvm.load volatile %220 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %221, %1 : i32, !llvm.ptr
    %c0_i32_62 = arith.constant 0 : i32
    %222 = arith.cmpi eq, %221, %c0_i32_62 : i32
    %223 = arith.extui %222 : i1 to i32
    %c0_i32_63 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_63 : i32
    cf.cond_br %224, ^bb36, ^bb37
  ^bb36:  // 2 preds: ^bb35, ^bb46
    %225 = llvm.load %3 : !llvm.ptr -> i32
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %227 = llvm.load %6 : !llvm.ptr -> i32
    %228 = arith.addi %226, %227 : i32
    llvm.store %228, %1 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %229 = arith.addi %228, %c16_i32 : i32
    %c0_i64_64 = arith.constant 0 : i64
    %230 = arith.extui %229 : i32 to i64
    %231 = arith.addi %230, %c0_i64_64 : i64
    %232 = llvm.getelementptr %17[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %233 = llvm.load volatile %232 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c28_i64_65 = arith.constant 28 : i64
    %234 = arith.extui %225 : i32 to i64
    %235 = arith.addi %234, %c28_i64_65 : i64
    %236 = llvm.getelementptr %17[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %233, %236 {alignment = 1 : i64} : i32, !llvm.ptr
    %237 = llvm.load %3 : !llvm.ptr -> i32
    %238 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %239 = arith.addi %238, %c28_i32 : i32
    %c0_i64_66 = arith.constant 0 : i64
    %240 = arith.extui %239 : i32 to i64
    %241 = arith.addi %240, %c0_i64_66 : i64
    %242 = llvm.getelementptr %17[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %243 = llvm.load volatile %242 {alignment = 1 : i64} : !llvm.ptr -> i8
    %244 = arith.extui %243 : i8 to i32
    %c44_i64_67 = arith.constant 44 : i64
    %245 = arith.extui %237 : i32 to i64
    %246 = arith.addi %245, %c44_i64_67 : i64
    %247 = llvm.getelementptr %17[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %248 = arith.trunci %244 : i32 to i8
    llvm.store volatile %248, %247 {alignment = 1 : i64} : i8, !llvm.ptr
    %249 = llvm.load %3 : !llvm.ptr -> i32
    %250 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %251 = arith.addi %250, %c24_i32 : i32
    %c0_i64_68 = arith.constant 0 : i64
    %252 = arith.extui %251 : i32 to i64
    %253 = arith.addi %252, %c0_i64_68 : i64
    %254 = llvm.getelementptr %17[%253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %255 = llvm.load volatile %254 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c40_i64_69 = arith.constant 40 : i64
    %256 = arith.extui %249 : i32 to i64
    %257 = arith.addi %256, %c40_i64_69 : i64
    %258 = llvm.getelementptr %17[%257] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %255, %258 {alignment = 1 : i64} : i32, !llvm.ptr
    %259 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_70 = arith.constant 12 : i32
    %260 = arith.addi %259, %c12_i32_70 : i32
    %c0_i64_71 = arith.constant 0 : i64
    %261 = arith.extui %260 : i32 to i64
    %262 = arith.addi %261, %c0_i64_71 : i64
    %263 = llvm.getelementptr %17[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %264 = llvm.load volatile %263 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %264, %7 : i32, !llvm.ptr
    %c0_i32_72 = arith.constant 0 : i32
    llvm.store %c0_i32_72, %10 : i32, !llvm.ptr
    %c0_i32_73 = arith.constant 0 : i32
    llvm.store %c0_i32_73, %11 : i32, !llvm.ptr
    %265 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_74 = arith.constant 8 : i32
    %266 = arith.addi %265, %c8_i32_74 : i32
    %c0_i64_75 = arith.constant 0 : i64
    %267 = arith.extui %266 : i32 to i64
    %268 = arith.addi %267, %c0_i64_75 : i64
    %269 = llvm.getelementptr %17[%268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %270 = llvm.load volatile %269 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %270 : i32, [
      default: ^bb48,
      0: ^bb48,
      1: ^bb49,
      2: ^bb47
    ]
  ^bb37:  // pred: ^bb35
    %271 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_76 = arith.constant 32 : i64
    %272 = arith.extui %271 : i32 to i64
    %273 = arith.addi %272, %c32_i64_76 : i64
    %274 = llvm.getelementptr %17[%273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %275 = llvm.load volatile %274 {alignment = 1 : i64} : !llvm.ptr -> i32
    %276 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_77 = arith.constant 0 : i64
    %277 = arith.extui %276 : i32 to i64
    %278 = arith.addi %277, %c0_i64_77 : i64
    %279 = llvm.getelementptr %17[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i32
    %281 = llvm.load %1 : !llvm.ptr -> i32
    %282 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_78 = arith.constant 36 : i64
    %283 = arith.extui %282 : i32 to i64
    %284 = arith.addi %283, %c36_i64_78 : i64
    %285 = llvm.getelementptr %17[%284] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %286 = llvm.load volatile %285 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_79 = arith.constant 12 : i64
    %287 = arith.extui %286 : i32 to i64
    %288 = arith.addi %287, %c12_i64_79 : i64
    %289 = llvm.getelementptr %17[%288] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %290 = llvm.load volatile %289 {alignment = 1 : i64} : !llvm.ptr -> i32
    %291 = arith.cmpi ult, %290, %29 : i32
    cf.cond_br %291, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %292 = llvm.getelementptr %28[%290] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %293 = llvm.load %292 : !llvm.ptr -> !llvm.ptr
    %294 = llvm.load %293 : !llvm.ptr -> i32
    %c0_i32_80 = arith.constant 0 : i32
    %295 = arith.cmpi eq, %294, %c0_i32_80 : i32
    cf.cond_br %295, ^bb41, ^bb40
  ^bb39:  // pred: ^bb37
    %c3_i32_81 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_81) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %296 = llvm.getelementptr %293[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %297 = llvm.getelementptr %293[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %298 = llvm.getelementptr %293[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %299 = llvm.load %296 : !llvm.ptr -> !llvm.ptr
    %300 = llvm.load %298 : !llvm.ptr -> !llvm.ptr
    %301 = llvm.load %299 : !llvm.ptr -> i32
    %c0_i32_82 = arith.constant 0 : i32
    %302 = arith.cmpi eq, %301, %c0_i32_82 : i32
    cf.cond_br %302, ^bb43, ^bb42
  ^bb41:  // pred: ^bb38
    %c4_i32_83 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_83) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %303 = llvm.load %297 : !llvm.ptr -> i32
    %304 = arith.cmpi ne, %19, %303 : i32
    cf.cond_br %304, ^bb45, ^bb44
  ^bb43:  // pred: ^bb40
    %c3_i32_84 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_84) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %305 = llvm.call %299(%300, %275, %280, %281) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_85 = arith.constant 0 : i32
    %306 = arith.cmpi ne, %305, %c0_i32_85 : i32
    cf.cond_br %306, ^bb5, ^bb46
  ^bb45:  // pred: ^bb42
    %c5_i32_86 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_86) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    cf.br ^bb36
  ^bb47:  // 3 preds: ^bb36, ^bb48, ^bb49
    %307 = llvm.load %3 : !llvm.ptr -> i32
    %308 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64_87 = arith.constant 16 : i64
    %309 = arith.extui %307 : i32 to i64
    %310 = arith.addi %309, %c16_i64_87 : i64
    %311 = llvm.getelementptr %17[%310] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %308, %311 {alignment = 1 : i64} : i32, !llvm.ptr
    %312 = llvm.load %3 : !llvm.ptr -> i32
    %313 = llvm.load %11 : !llvm.ptr -> i32
    %c12_i64_88 = arith.constant 12 : i64
    %314 = arith.extui %312 : i32 to i64
    %315 = arith.addi %314, %c12_i64_88 : i64
    %316 = llvm.getelementptr %17[%315] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %313, %316 {alignment = 1 : i64} : i32, !llvm.ptr
    %317 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_89 = arith.constant 4 : i32
    %318 = arith.addi %317, %c4_i32_89 : i32
    %c0_i64_90 = arith.constant 0 : i64
    %319 = arith.extui %318 : i32 to i64
    %320 = arith.addi %319, %c0_i64_90 : i64
    %321 = llvm.getelementptr %17[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %322 = llvm.load volatile %321 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %322, %7 : i32, !llvm.ptr
    %323 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_91 = arith.constant 0 : i64
    %324 = arith.extui %323 : i32 to i64
    %325 = arith.addi %324, %c0_i64_91 : i64
    %326 = llvm.getelementptr %17[%325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %327 = llvm.load volatile %326 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %327 : i32, [
      default: ^bb52,
      0: ^bb52,
      1: ^bb53,
      2: ^bb51
    ]
  ^bb48:  // 3 preds: ^bb36, ^bb36, ^bb50
    %c1_i32_92 = arith.constant 1 : i32
    llvm.store %c1_i32_92, %11 : i32, !llvm.ptr
    cf.br ^bb47
  ^bb49:  // pred: ^bb36
    %328 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_93 = arith.constant 3 : i32
    %c31_i32_94 = arith.constant 31 : i32
    %329 = arith.cmpi ule, %c3_i32_93, %c31_i32_94 : i32
    %330 = scf.if %329 -> (i32) {
      %467 = arith.shli %328, %c3_i32_93 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %330, %12 : i32, !llvm.ptr
    %c0_i32_95 = arith.constant 0 : i32
    llvm.store %c0_i32_95, %11 : i32, !llvm.ptr
    %331 = llvm.load %9 : !llvm.ptr -> i32
    %332 = llvm.load %12 : !llvm.ptr -> i32
    %333 = arith.addi %331, %332 : i32
    llvm.store %333, %12 : i32, !llvm.ptr
    %c4_i64_96 = arith.constant 4 : i64
    %334 = arith.extui %333 : i32 to i64
    %335 = arith.addi %334, %c4_i64_96 : i64
    %336 = llvm.getelementptr %17[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %337 = llvm.load volatile %336 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_97 = arith.constant 0 : i32
    %338 = arith.cmpi ne, %337, %c0_i32_97 : i32
    cf.cond_br %338, ^bb47, ^bb50
  ^bb50:  // pred: ^bb49
    %339 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_98 = arith.constant 0 : i64
    %340 = arith.extui %339 : i32 to i64
    %341 = arith.addi %340, %c0_i64_98 : i64
    %342 = llvm.getelementptr %17[%341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %343 = llvm.load volatile %342 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %343, %7 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb51:  // 3 preds: ^bb47, ^bb52, ^bb53
    %344 = llvm.load %3 : !llvm.ptr -> i32
    %345 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %346 = arith.extui %344 : i32 to i64
    %347 = arith.addi %346, %c24_i64 : i64
    %348 = llvm.getelementptr %17[%347] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %345, %348 {alignment = 1 : i64} : i32, !llvm.ptr
    %349 = llvm.load %3 : !llvm.ptr -> i32
    %350 = llvm.load %10 : !llvm.ptr -> i32
    %c20_i64_99 = arith.constant 20 : i64
    %351 = arith.extui %349 : i32 to i64
    %352 = arith.addi %351, %c20_i64_99 : i64
    %353 = llvm.getelementptr %17[%352] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %350, %353 {alignment = 1 : i64} : i32, !llvm.ptr
    %354 = llvm.load %9 : !llvm.ptr -> i32
    %355 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %356 = arith.addi %355, %c20_i32 : i32
    %c0_i64_100 = arith.constant 0 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c0_i64_100 : i64
    %359 = llvm.getelementptr %17[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load volatile %359 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32_101 = arith.constant 3 : i32
    %c31_i32_102 = arith.constant 31 : i32
    %361 = arith.cmpi ule, %c3_i32_101, %c31_i32_102 : i32
    %362 = scf.if %361 -> (i32) {
      %467 = arith.shli %360, %c3_i32_101 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    %363 = arith.addi %354, %362 : i32
    llvm.store %363, %1 : i32, !llvm.ptr
    %c0_i64_103 = arith.constant 0 : i64
    %364 = arith.extui %363 : i32 to i64
    %365 = arith.addi %364, %c0_i64_103 : i64
    %366 = llvm.getelementptr %17[%365] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %367 = llvm.load volatile %366 {alignment = 1 : i64} : !llvm.ptr -> i32
    %368 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_104 = arith.constant 12 : i32
    %369 = arith.addi %368, %c12_i32_104 : i32
    %370 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_105 = arith.constant 4 : i64
    %371 = arith.extui %370 : i32 to i64
    %372 = arith.addi %371, %c4_i64_105 : i64
    %373 = llvm.getelementptr %17[%372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %374 = llvm.load volatile %373 {alignment = 1 : i64} : !llvm.ptr -> i32
    %375 = arith.cmpi ult, %374, %31 : i32
    cf.cond_br %375, ^bb55, ^bb56
  ^bb52:  // 3 preds: ^bb47, ^bb47, ^bb54
    %c1_i32_106 = arith.constant 1 : i32
    llvm.store %c1_i32_106, %10 : i32, !llvm.ptr
    cf.br ^bb51
  ^bb53:  // pred: ^bb47
    %376 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_107 = arith.constant 3 : i32
    %c31_i32_108 = arith.constant 31 : i32
    %377 = arith.cmpi ule, %c3_i32_107, %c31_i32_108 : i32
    %378 = scf.if %377 -> (i32) {
      %467 = arith.shli %376, %c3_i32_107 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %378, %11 : i32, !llvm.ptr
    %379 = llvm.load %9 : !llvm.ptr -> i32
    %380 = llvm.load %11 : !llvm.ptr -> i32
    %381 = arith.addi %379, %380 : i32
    llvm.store %381, %11 : i32, !llvm.ptr
    %c4_i64_109 = arith.constant 4 : i64
    %382 = arith.extui %381 : i32 to i64
    %383 = arith.addi %382, %c4_i64_109 : i64
    %384 = llvm.getelementptr %17[%383] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %385 = llvm.load volatile %384 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_110 = arith.constant 0 : i32
    %386 = arith.cmpi ne, %385, %c0_i32_110 : i32
    cf.cond_br %386, ^bb51, ^bb54
  ^bb54:  // pred: ^bb53
    %387 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i64_111 = arith.constant 0 : i64
    %388 = arith.extui %387 : i32 to i64
    %389 = arith.addi %388, %c0_i64_111 : i64
    %390 = llvm.getelementptr %17[%389] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %391 = llvm.load volatile %390 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %391, %7 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb55:  // 2 preds: ^bb51, ^bb56
    %392 = llvm.getelementptr %30[%374] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %393 = llvm.load %392 : !llvm.ptr -> !llvm.ptr
    %394 = llvm.load %393 : !llvm.ptr -> i32
    %c0_i32_112 = arith.constant 0 : i32
    %395 = arith.cmpi eq, %394, %c0_i32_112 : i32
    cf.cond_br %395, ^bb58, ^bb57
  ^bb56:  // pred: ^bb51
    %c3_i32_113 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_113) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %396 = llvm.getelementptr %393[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %397 = llvm.getelementptr %393[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %398 = llvm.getelementptr %393[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %399 = llvm.load %396 : !llvm.ptr -> !llvm.ptr
    %400 = llvm.load %398 : !llvm.ptr -> !llvm.ptr
    %401 = llvm.load %399 : !llvm.ptr -> i32
    %c0_i32_114 = arith.constant 0 : i32
    %402 = arith.cmpi eq, %401, %c0_i32_114 : i32
    cf.cond_br %402, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c4_i32_115 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_115) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %403 = llvm.load %397 : !llvm.ptr -> i32
    %404 = arith.cmpi ne, %25, %403 : i32
    cf.cond_br %404, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_116 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_116) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %405 = llvm.call %399(%400, %367, %369) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_117 = arith.constant 0 : i32
    %406 = arith.cmpi ne, %405, %c0_i32_117 : i32
    cf.cond_br %406, ^bb5, ^bb63
  ^bb62:  // pred: ^bb59
    %c5_i32_118 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_118) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // pred: ^bb61
    %407 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_119 = arith.constant 8 : i32
    %408 = arith.addi %407, %c8_i32_119 : i32
    llvm.store %408, %0 : i32, !llvm.ptr
    %409 = llvm.load %8 : !llvm.ptr -> i32
    %410 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_120 = arith.constant 32 : i32
    %411 = arith.addi %410, %c32_i32_120 : i32
    llvm.store %411, %6 : i32, !llvm.ptr
    %412 = arith.cmpi eq, %409, %411 : i32
    %413 = arith.extui %412 : i1 to i32
    %c0_i32_121 = arith.constant 0 : i32
    %414 = arith.cmpi eq, %413, %c0_i32_121 : i32
    %415 = arith.extui %414 : i1 to i32
    %c0_i32_122 = arith.constant 0 : i32
    %416 = arith.cmpi ne, %415, %c0_i32_122 : i32
    cf.cond_br %416, ^bb35, ^bb64
  ^bb64:  // pred: ^bb63
    cf.br ^bb34
  ^bb65:  // pred: ^bb6
    %417 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_123 = arith.constant 32 : i64
    %418 = arith.extui %417 : i32 to i64
    %419 = arith.addi %418, %c32_i64_123 : i64
    %420 = llvm.getelementptr %17[%419] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %421 = llvm.load volatile %420 {alignment = 1 : i64} : !llvm.ptr -> i32
    %422 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_124 = arith.constant 0 : i64
    %423 = arith.extui %422 : i32 to i64
    %424 = arith.addi %423, %c0_i64_124 : i64
    %425 = llvm.getelementptr %17[%424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %426 = llvm.load volatile %425 {alignment = 1 : i64} : !llvm.ptr -> i32
    %427 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_125 = arith.constant 3 : i32
    %c31_i32_126 = arith.constant 31 : i32
    %428 = arith.cmpi ule, %c3_i32_125, %c31_i32_126 : i32
    %429 = scf.if %428 -> (i32) {
      %467 = arith.shli %427, %c3_i32_125 : i32
      scf.yield %467 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    %430 = arith.addi %426, %429 : i32
    llvm.store %430, %1 : i32, !llvm.ptr
    %c0_i64_127 = arith.constant 0 : i64
    %431 = arith.extui %430 : i32 to i64
    %432 = arith.addi %431, %c0_i64_127 : i64
    %433 = llvm.getelementptr %17[%432] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %434 = llvm.load volatile %433 {alignment = 1 : i64} : !llvm.ptr -> i32
    %435 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_128 = arith.constant 4 : i64
    %436 = arith.extui %435 : i32 to i64
    %437 = arith.addi %436, %c4_i64_128 : i64
    %438 = llvm.getelementptr %17[%437] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %439 = llvm.load volatile %438 {alignment = 1 : i64} : !llvm.ptr -> i32
    %440 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_129 = arith.constant 36 : i64
    %441 = arith.extui %440 : i32 to i64
    %442 = arith.addi %441, %c36_i64_129 : i64
    %443 = llvm.getelementptr %17[%442] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %444 = llvm.load volatile %443 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_130 = arith.constant 12 : i64
    %445 = arith.extui %444 : i32 to i64
    %446 = arith.addi %445, %c12_i64_130 : i64
    %447 = llvm.getelementptr %17[%446] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %448 = llvm.load volatile %447 {alignment = 1 : i64} : !llvm.ptr -> i32
    %449 = arith.cmpi ult, %448, %33 : i32
    cf.cond_br %449, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %450 = llvm.getelementptr %32[%448] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %451 = llvm.load %450 : !llvm.ptr -> !llvm.ptr
    %452 = llvm.load %451 : !llvm.ptr -> i32
    %c0_i32_131 = arith.constant 0 : i32
    %453 = arith.cmpi eq, %452, %c0_i32_131 : i32
    cf.cond_br %453, ^bb69, ^bb68
  ^bb67:  // pred: ^bb65
    %c3_i32_132 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_132) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %454 = llvm.getelementptr %451[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %455 = llvm.getelementptr %451[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %456 = llvm.getelementptr %451[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %457 = llvm.load %454 : !llvm.ptr -> !llvm.ptr
    %458 = llvm.load %456 : !llvm.ptr -> !llvm.ptr
    %459 = llvm.load %457 : !llvm.ptr -> i32
    %c0_i32_133 = arith.constant 0 : i32
    %460 = arith.cmpi eq, %459, %c0_i32_133 : i32
    cf.cond_br %460, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c4_i32_134 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_134) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %461 = llvm.load %455 : !llvm.ptr -> i32
    %462 = arith.cmpi ne, %19, %461 : i32
    cf.cond_br %462, ^bb73, ^bb72
  ^bb71:  // pred: ^bb68
    %c3_i32_135 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_135) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %463 = llvm.call %457(%458, %421, %434, %439) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_136 = arith.constant 0 : i32
    %464 = arith.cmpi eq, %463, %c0_i32_136 : i32
    %465 = arith.extui %464 : i1 to i32
    %c0_i32_137 = arith.constant 0 : i32
    %466 = arith.cmpi ne, %465, %c0_i32_137 : i32
    cf.cond_br %466, ^bb4, ^bb74
  ^bb73:  // pred: ^bb70
    %c5_i32_138 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_138) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // pred: ^bb72
    cf.br ^bb5
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
