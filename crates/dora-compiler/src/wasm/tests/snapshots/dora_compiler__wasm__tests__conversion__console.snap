---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @main(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %10 = llvm.alloca %c1_i64_9 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i64_10 = arith.constant 1 : i64
    %11 = llvm.alloca %c1_i64_10 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i64_11 = arith.constant 1 : i64
    %12 = llvm.alloca %c1_i64_11 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %20[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %23 : !llvm.ptr -> i32
    %25 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %26 : !llvm.ptr -> i32
    %29 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %30 = llvm.load %29 : !llvm.ptr -> i32
    %31 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %26 : !llvm.ptr -> i32
    %33 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.load %26 : !llvm.ptr -> i32
    %35 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.load %26 : !llvm.ptr -> i32
    %37 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %26 : !llvm.ptr -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1048512_i32 = arith.constant 1048512 : i32
    llvm.store %c1048512_i32, %0 : i32, !llvm.ptr
    %c1048808_i32 = arith.constant 1048808 : i32
    llvm.store %c1048808_i32, %1 : i32, !llvm.ptr
    %c1048544_i32 = arith.constant 1048544 : i32
    llvm.store %c1048544_i32, %2 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %39 = llvm.call %15(%17, %c1_i32) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %40 = llvm.load %19 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %41 = arith.subi %40, %c48_i32 : i32
    llvm.store %41, %3 : i32, !llvm.ptr
    llvm.store %41, %19 : i32, !llvm.ptr
    %42 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c44_i64 = arith.constant 44 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c44_i64 : i64
    %45 = llvm.getelementptr %22[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = arith.trunci %c3_i32 : i32 to i8
    llvm.store %46, %45 : i8, !llvm.ptr
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %c28_i64 = arith.constant 28 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c28_i64 : i64
    %50 = llvm.getelementptr %22[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c32_i32, %50 : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    llvm.store %c0_i32_12, %4 : i32, !llvm.ptr
    %51 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c40_i64 = arith.constant 40 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c40_i64 : i64
    %54 = llvm.getelementptr %22[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_13, %54 : i32, !llvm.ptr
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %57 = arith.extui %55 : i32 to i64
    %58 = arith.addi %57, %c36_i64 : i64
    %59 = llvm.getelementptr %22[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %56, %59 : i32, !llvm.ptr
    %60 = llvm.load %3 : !llvm.ptr -> i32
    %61 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %62 = arith.extui %60 : i32 to i64
    %63 = arith.addi %62, %c32_i64 : i64
    %64 = llvm.getelementptr %22[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %61, %64 : i32, !llvm.ptr
    %65 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c20_i64 : i64
    %68 = llvm.getelementptr %22[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_14, %68 : i32, !llvm.ptr
    %69 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c12_i64 : i64
    %72 = llvm.getelementptr %22[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %c0_i32_15, %72 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %73 = llvm.call %15(%17, %c2_i32) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c16_i64 : i64
    %77 = llvm.getelementptr %22[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load %77 : !llvm.ptr -> i32
    llvm.store %78, %5 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %78, %c0_i32_16 : i32
    cf.cond_br %79, ^bb7, ^bb8
  ^bb2(%80: i32):  // pred: ^bb3
    return %80 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %81 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_17 = arith.constant 48 : i32
    %82 = arith.addi %81, %c48_i32_17 : i32
    llvm.store %82, %19 : i32, !llvm.ptr
    %83 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%83 : i32)
  ^bb4:  // 2 preds: ^bb6, ^bb72
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 5 preds: ^bb20, ^bb29, ^bb44, ^bb61, ^bb74
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 4 preds: ^bb7, ^bb8, ^bb32, ^bb34
    %84 = llvm.load %4 : !llvm.ptr -> i32
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c4_i64 : i64
    %88 = llvm.getelementptr %22[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load %88 : !llvm.ptr -> i32
    %90 = arith.cmpi uge, %84, %89 : i32
    %91 = arith.extui %90 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %92 = arith.cmpi ne, %91, %c0_i32_20 : i32
    cf.cond_br %92, ^bb4, ^bb65
  ^bb7:  // 2 preds: ^bb1, ^bb10
    %93 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_21 = arith.constant 20 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c20_i64_21 : i64
    %96 = llvm.getelementptr %22[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load %96 : !llvm.ptr -> i32
    llvm.store %97, %1 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %98 = arith.cmpi eq, %97, %c0_i32_22 : i32
    %99 = arith.extui %98 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %100 = arith.cmpi ne, %99, %c0_i32_23 : i32
    cf.cond_br %100, ^bb6, ^bb33
  ^bb8:  // pred: ^bb1
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_24 = arith.constant 12 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c12_i64_24 : i64
    %104 = llvm.getelementptr %22[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load %104 : !llvm.ptr -> i32
    llvm.store %105, %0 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %106 = arith.cmpi eq, %105, %c0_i32_25 : i32
    %107 = arith.extui %106 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %108 = arith.cmpi ne, %107, %c0_i32_26 : i32
    cf.cond_br %108, ^bb6, ^bb9
  ^bb9:  // pred: ^bb8
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c8_i64 : i64
    %112 = llvm.getelementptr %22[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = llvm.load %112 : !llvm.ptr -> i32
    llvm.store %113, %1 : i32, !llvm.ptr
    %114 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_27 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %115 = arith.cmpi ule, %c3_i32_27, %c31_i32 : i32
    %116 = scf.if %115 -> (i32) {
      %474 = arith.shli %114, %c3_i32_27 : i32
      scf.yield %474 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %116, %6 : i32, !llvm.ptr
    %117 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %118 = arith.addi %117, %c-1_i32 : i32
    %c536870911_i32 = arith.constant 536870911 : i32
    %119 = arith.andi %118, %c536870911_i32 : i32
    %c1_i32_28 = arith.constant 1 : i32
    %120 = arith.addi %119, %c1_i32_28 : i32
    llvm.store %120, %4 : i32, !llvm.ptr
    %121 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %122 = arith.extui %121 : i32 to i64
    %123 = arith.addi %122, %c0_i64 : i64
    %124 = llvm.getelementptr %22[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %125 = llvm.load %124 : !llvm.ptr -> i32
    llvm.store %125, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb10:  // no predecessors
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb9, ^bb31
    %126 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %127 = arith.addi %126, %c4_i32 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %128 = arith.extui %127 : i32 to i64
    %129 = arith.addi %128, %c0_i64_29 : i64
    %130 = llvm.getelementptr %22[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = llvm.load %130 : !llvm.ptr -> i32
    llvm.store %131, %7 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %132 = arith.cmpi eq, %131, %c0_i32_30 : i32
    %133 = arith.extui %132 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %134 = arith.cmpi ne, %133, %c0_i32_31 : i32
    cf.cond_br %134, ^bb12, ^bb13
  ^bb12:  // 2 preds: ^bb11, ^bb22
    %135 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %136 = arith.extui %135 : i32 to i64
    %137 = arith.addi %136, %c0_i64_32 : i64
    %138 = llvm.getelementptr %22[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load %138 : !llvm.ptr -> i32
    %140 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %141 = arith.addi %140, %c12_i32 : i32
    %142 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_33 = arith.constant 4 : i64
    %143 = arith.extui %142 : i32 to i64
    %144 = arith.addi %143, %c4_i64_33 : i64
    %145 = llvm.getelementptr %22[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %146 = llvm.load %145 : !llvm.ptr -> i32
    %147 = arith.cmpi ult, %146, %32 : i32
    cf.cond_br %147, ^bb23, ^bb24
  ^bb13:  // pred: ^bb11
    %148 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_34 = arith.constant 32 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c32_i64_34 : i64
    %151 = llvm.getelementptr %22[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load %151 : !llvm.ptr -> i32
    %153 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c0_i64_35 : i64
    %156 = llvm.getelementptr %22[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load %156 : !llvm.ptr -> i32
    %158 = llvm.load %7 : !llvm.ptr -> i32
    %159 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_36 = arith.constant 36 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c36_i64_36 : i64
    %162 = llvm.getelementptr %22[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load %162 : !llvm.ptr -> i32
    %c12_i64_37 = arith.constant 12 : i64
    %164 = arith.extui %163 : i32 to i64
    %165 = arith.addi %164, %c12_i64_37 : i64
    %166 = llvm.getelementptr %22[%165] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %167 = llvm.load %166 : !llvm.ptr -> i32
    %168 = arith.cmpi ult, %167, %28 : i32
    cf.cond_br %168, ^bb14, ^bb15
  ^bb14:  // 2 preds: ^bb13, ^bb15
    %169 = llvm.getelementptr %27[%167] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %170 = llvm.load %169 : !llvm.ptr -> !llvm.ptr
    %171 = llvm.load %170 : !llvm.ptr -> i32
    %c0_i32_38 = arith.constant 0 : i32
    %172 = arith.cmpi eq, %171, %c0_i32_38 : i32
    cf.cond_br %172, ^bb17, ^bb16
  ^bb15:  // pred: ^bb13
    %c3_i32_39 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_39) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %173 = llvm.getelementptr %170[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %174 = llvm.getelementptr %170[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %175 = llvm.getelementptr %170[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %176 = llvm.load %173 : !llvm.ptr -> !llvm.ptr
    %177 = llvm.load %175 : !llvm.ptr -> !llvm.ptr
    %178 = llvm.load %176 : !llvm.ptr -> i32
    %c0_i32_40 = arith.constant 0 : i32
    %179 = arith.cmpi eq, %178, %c0_i32_40 : i32
    cf.cond_br %179, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_41 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_41) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %180 = llvm.load %174 : !llvm.ptr -> i32
    %181 = arith.cmpi ne, %24, %180 : i32
    cf.cond_br %181, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_42 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_42) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %182 = llvm.call %176(%177, %152, %157, %158) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %183 = arith.cmpi ne, %182, %c0_i32_43 : i32
    cf.cond_br %183, ^bb5, ^bb22
  ^bb21:  // pred: ^bb18
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    cf.br ^bb12
  ^bb23:  // 2 preds: ^bb12, ^bb24
    %184 = llvm.getelementptr %31[%146] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %185 = llvm.load %184 : !llvm.ptr -> !llvm.ptr
    %186 = llvm.load %185 : !llvm.ptr -> i32
    %c0_i32_44 = arith.constant 0 : i32
    %187 = arith.cmpi eq, %186, %c0_i32_44 : i32
    cf.cond_br %187, ^bb26, ^bb25
  ^bb24:  // pred: ^bb12
    %c3_i32_45 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_45) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %188 = llvm.getelementptr %185[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %189 = llvm.getelementptr %185[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %190 = llvm.getelementptr %185[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %191 = llvm.load %188 : !llvm.ptr -> !llvm.ptr
    %192 = llvm.load %190 : !llvm.ptr -> !llvm.ptr
    %193 = llvm.load %191 : !llvm.ptr -> i32
    %c0_i32_46 = arith.constant 0 : i32
    %194 = arith.cmpi eq, %193, %c0_i32_46 : i32
    cf.cond_br %194, ^bb28, ^bb27
  ^bb26:  // pred: ^bb23
    %c4_i32_47 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_47) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %195 = llvm.load %189 : !llvm.ptr -> i32
    %196 = arith.cmpi ne, %30, %195 : i32
    cf.cond_br %196, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %197 = llvm.call %191(%192, %139, %141) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %198 = arith.cmpi ne, %197, %c0_i32_49 : i32
    cf.cond_br %198, ^bb5, ^bb31
  ^bb30:  // pred: ^bb27
    %c5_i32_50 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_50) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    %199 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %200 = arith.addi %199, %c8_i32 : i32
    llvm.store %200, %1 : i32, !llvm.ptr
    %201 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_51 = arith.constant 8 : i32
    %202 = arith.addi %201, %c8_i32_51 : i32
    llvm.store %202, %0 : i32, !llvm.ptr
    %203 = llvm.load %6 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %204 = arith.addi %203, %c-8_i32 : i32
    llvm.store %204, %6 : i32, !llvm.ptr
    %c0_i32_52 = arith.constant 0 : i32
    %205 = arith.cmpi ne, %204, %c0_i32_52 : i32
    cf.cond_br %205, ^bb11, ^bb32
  ^bb32:  // pred: ^bb31
    cf.br ^bb6
  ^bb33:  // pred: ^bb7
    %206 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32_53 = arith.constant 5 : i32
    %c31_i32_54 = arith.constant 31 : i32
    %207 = arith.cmpi ule, %c5_i32_53, %c31_i32_54 : i32
    %208 = scf.if %207 -> (i32) {
      %474 = arith.shli %206, %c5_i32_53 : i32
      scf.yield %474 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %208, %8 : i32, !llvm.ptr
    %209 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_55 = arith.constant -1 : i32
    %210 = arith.addi %209, %c-1_i32_55 : i32
    %c134217727_i32 = arith.constant 134217727 : i32
    %211 = arith.andi %210, %c134217727_i32 : i32
    %c1_i32_56 = arith.constant 1 : i32
    %212 = arith.addi %211, %c1_i32_56 : i32
    llvm.store %212, %4 : i32, !llvm.ptr
    %213 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_57 = arith.constant 8 : i64
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.addi %214, %c8_i64_57 : i64
    %216 = llvm.getelementptr %22[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load %216 : !llvm.ptr -> i32
    llvm.store %217, %9 : i32, !llvm.ptr
    %218 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_58 = arith.constant 0 : i64
    %219 = arith.extui %218 : i32 to i64
    %220 = arith.addi %219, %c0_i64_58 : i64
    %221 = llvm.getelementptr %22[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %222 = llvm.load %221 : !llvm.ptr -> i32
    llvm.store %222, %0 : i32, !llvm.ptr
    %c0_i32_59 = arith.constant 0 : i32
    llvm.store %c0_i32_59, %6 : i32, !llvm.ptr
    cf.br ^bb35
  ^bb34:  // pred: ^bb64
    cf.br ^bb6
  ^bb35:  // 2 preds: ^bb33, ^bb63
    %223 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_60 = arith.constant 4 : i32
    %224 = arith.addi %223, %c4_i32_60 : i32
    %c0_i64_61 = arith.constant 0 : i64
    %225 = arith.extui %224 : i32 to i64
    %226 = arith.addi %225, %c0_i64_61 : i64
    %227 = llvm.getelementptr %22[%226] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %228 = llvm.load %227 : !llvm.ptr -> i32
    llvm.store %228, %1 : i32, !llvm.ptr
    %c0_i32_62 = arith.constant 0 : i32
    %229 = arith.cmpi eq, %228, %c0_i32_62 : i32
    %230 = arith.extui %229 : i1 to i32
    %c0_i32_63 = arith.constant 0 : i32
    %231 = arith.cmpi ne, %230, %c0_i32_63 : i32
    cf.cond_br %231, ^bb36, ^bb37
  ^bb36:  // 2 preds: ^bb35, ^bb46
    %232 = llvm.load %3 : !llvm.ptr -> i32
    %233 = llvm.load %5 : !llvm.ptr -> i32
    %234 = llvm.load %6 : !llvm.ptr -> i32
    %235 = arith.addi %233, %234 : i32
    llvm.store %235, %1 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %236 = arith.addi %235, %c16_i32 : i32
    %c0_i64_64 = arith.constant 0 : i64
    %237 = arith.extui %236 : i32 to i64
    %238 = arith.addi %237, %c0_i64_64 : i64
    %239 = llvm.getelementptr %22[%238] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %240 = llvm.load %239 : !llvm.ptr -> i32
    %c28_i64_65 = arith.constant 28 : i64
    %241 = arith.extui %232 : i32 to i64
    %242 = arith.addi %241, %c28_i64_65 : i64
    %243 = llvm.getelementptr %22[%242] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %240, %243 : i32, !llvm.ptr
    %244 = llvm.load %3 : !llvm.ptr -> i32
    %245 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %246 = arith.addi %245, %c28_i32 : i32
    %c0_i64_66 = arith.constant 0 : i64
    %247 = arith.extui %246 : i32 to i64
    %248 = arith.addi %247, %c0_i64_66 : i64
    %249 = llvm.getelementptr %22[%248] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %250 = llvm.load %249 : !llvm.ptr -> i8
    %251 = arith.extui %250 : i8 to i32
    %c44_i64_67 = arith.constant 44 : i64
    %252 = arith.extui %244 : i32 to i64
    %253 = arith.addi %252, %c44_i64_67 : i64
    %254 = llvm.getelementptr %22[%253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %255 = arith.trunci %251 : i32 to i8
    llvm.store %255, %254 : i8, !llvm.ptr
    %256 = llvm.load %3 : !llvm.ptr -> i32
    %257 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %258 = arith.addi %257, %c24_i32 : i32
    %c0_i64_68 = arith.constant 0 : i64
    %259 = arith.extui %258 : i32 to i64
    %260 = arith.addi %259, %c0_i64_68 : i64
    %261 = llvm.getelementptr %22[%260] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %262 = llvm.load %261 : !llvm.ptr -> i32
    %c40_i64_69 = arith.constant 40 : i64
    %263 = arith.extui %256 : i32 to i64
    %264 = arith.addi %263, %c40_i64_69 : i64
    %265 = llvm.getelementptr %22[%264] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %262, %265 : i32, !llvm.ptr
    %266 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_70 = arith.constant 12 : i32
    %267 = arith.addi %266, %c12_i32_70 : i32
    %c0_i64_71 = arith.constant 0 : i64
    %268 = arith.extui %267 : i32 to i64
    %269 = arith.addi %268, %c0_i64_71 : i64
    %270 = llvm.getelementptr %22[%269] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %271 = llvm.load %270 : !llvm.ptr -> i32
    llvm.store %271, %7 : i32, !llvm.ptr
    %c0_i32_72 = arith.constant 0 : i32
    llvm.store %c0_i32_72, %10 : i32, !llvm.ptr
    %c0_i32_73 = arith.constant 0 : i32
    llvm.store %c0_i32_73, %11 : i32, !llvm.ptr
    %272 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_74 = arith.constant 8 : i32
    %273 = arith.addi %272, %c8_i32_74 : i32
    %c0_i64_75 = arith.constant 0 : i64
    %274 = arith.extui %273 : i32 to i64
    %275 = arith.addi %274, %c0_i64_75 : i64
    %276 = llvm.getelementptr %22[%275] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %277 = llvm.load %276 : !llvm.ptr -> i32
    cf.switch %277 : i32, [
      default: ^bb48,
      0: ^bb48,
      1: ^bb49,
      2: ^bb47
    ]
  ^bb37:  // pred: ^bb35
    %278 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_76 = arith.constant 32 : i64
    %279 = arith.extui %278 : i32 to i64
    %280 = arith.addi %279, %c32_i64_76 : i64
    %281 = llvm.getelementptr %22[%280] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %282 = llvm.load %281 : !llvm.ptr -> i32
    %283 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_77 = arith.constant 0 : i64
    %284 = arith.extui %283 : i32 to i64
    %285 = arith.addi %284, %c0_i64_77 : i64
    %286 = llvm.getelementptr %22[%285] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %287 = llvm.load %286 : !llvm.ptr -> i32
    %288 = llvm.load %1 : !llvm.ptr -> i32
    %289 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_78 = arith.constant 36 : i64
    %290 = arith.extui %289 : i32 to i64
    %291 = arith.addi %290, %c36_i64_78 : i64
    %292 = llvm.getelementptr %22[%291] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %293 = llvm.load %292 : !llvm.ptr -> i32
    %c12_i64_79 = arith.constant 12 : i64
    %294 = arith.extui %293 : i32 to i64
    %295 = arith.addi %294, %c12_i64_79 : i64
    %296 = llvm.getelementptr %22[%295] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %297 = llvm.load %296 : !llvm.ptr -> i32
    %298 = arith.cmpi ult, %297, %34 : i32
    cf.cond_br %298, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %299 = llvm.getelementptr %33[%297] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %300 = llvm.load %299 : !llvm.ptr -> !llvm.ptr
    %301 = llvm.load %300 : !llvm.ptr -> i32
    %c0_i32_80 = arith.constant 0 : i32
    %302 = arith.cmpi eq, %301, %c0_i32_80 : i32
    cf.cond_br %302, ^bb41, ^bb40
  ^bb39:  // pred: ^bb37
    %c3_i32_81 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_81) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %303 = llvm.getelementptr %300[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %304 = llvm.getelementptr %300[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %305 = llvm.getelementptr %300[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %306 = llvm.load %303 : !llvm.ptr -> !llvm.ptr
    %307 = llvm.load %305 : !llvm.ptr -> !llvm.ptr
    %308 = llvm.load %306 : !llvm.ptr -> i32
    %c0_i32_82 = arith.constant 0 : i32
    %309 = arith.cmpi eq, %308, %c0_i32_82 : i32
    cf.cond_br %309, ^bb43, ^bb42
  ^bb41:  // pred: ^bb38
    %c4_i32_83 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_83) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %310 = llvm.load %304 : !llvm.ptr -> i32
    %311 = arith.cmpi ne, %24, %310 : i32
    cf.cond_br %311, ^bb45, ^bb44
  ^bb43:  // pred: ^bb40
    %c3_i32_84 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_84) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %312 = llvm.call %306(%307, %282, %287, %288) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_85 = arith.constant 0 : i32
    %313 = arith.cmpi ne, %312, %c0_i32_85 : i32
    cf.cond_br %313, ^bb5, ^bb46
  ^bb45:  // pred: ^bb42
    %c5_i32_86 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_86) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    cf.br ^bb36
  ^bb47:  // 3 preds: ^bb36, ^bb48, ^bb49
    %314 = llvm.load %3 : !llvm.ptr -> i32
    %315 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64_87 = arith.constant 16 : i64
    %316 = arith.extui %314 : i32 to i64
    %317 = arith.addi %316, %c16_i64_87 : i64
    %318 = llvm.getelementptr %22[%317] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %315, %318 : i32, !llvm.ptr
    %319 = llvm.load %3 : !llvm.ptr -> i32
    %320 = llvm.load %11 : !llvm.ptr -> i32
    %c12_i64_88 = arith.constant 12 : i64
    %321 = arith.extui %319 : i32 to i64
    %322 = arith.addi %321, %c12_i64_88 : i64
    %323 = llvm.getelementptr %22[%322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %320, %323 : i32, !llvm.ptr
    %324 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_89 = arith.constant 4 : i32
    %325 = arith.addi %324, %c4_i32_89 : i32
    %c0_i64_90 = arith.constant 0 : i64
    %326 = arith.extui %325 : i32 to i64
    %327 = arith.addi %326, %c0_i64_90 : i64
    %328 = llvm.getelementptr %22[%327] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %329 = llvm.load %328 : !llvm.ptr -> i32
    llvm.store %329, %7 : i32, !llvm.ptr
    %330 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_91 = arith.constant 0 : i64
    %331 = arith.extui %330 : i32 to i64
    %332 = arith.addi %331, %c0_i64_91 : i64
    %333 = llvm.getelementptr %22[%332] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %334 = llvm.load %333 : !llvm.ptr -> i32
    cf.switch %334 : i32, [
      default: ^bb52,
      0: ^bb52,
      1: ^bb53,
      2: ^bb51
    ]
  ^bb48:  // 3 preds: ^bb36, ^bb36, ^bb50
    %c1_i32_92 = arith.constant 1 : i32
    llvm.store %c1_i32_92, %11 : i32, !llvm.ptr
    cf.br ^bb47
  ^bb49:  // pred: ^bb36
    %335 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_93 = arith.constant 3 : i32
    %c31_i32_94 = arith.constant 31 : i32
    %336 = arith.cmpi ule, %c3_i32_93, %c31_i32_94 : i32
    %337 = scf.if %336 -> (i32) {
      %474 = arith.shli %335, %c3_i32_93 : i32
      scf.yield %474 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %337, %12 : i32, !llvm.ptr
    %c0_i32_95 = arith.constant 0 : i32
    llvm.store %c0_i32_95, %11 : i32, !llvm.ptr
    %338 = llvm.load %9 : !llvm.ptr -> i32
    %339 = llvm.load %12 : !llvm.ptr -> i32
    %340 = arith.addi %338, %339 : i32
    llvm.store %340, %12 : i32, !llvm.ptr
    %c4_i64_96 = arith.constant 4 : i64
    %341 = arith.extui %340 : i32 to i64
    %342 = arith.addi %341, %c4_i64_96 : i64
    %343 = llvm.getelementptr %22[%342] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %344 = llvm.load %343 : !llvm.ptr -> i32
    %c0_i32_97 = arith.constant 0 : i32
    %345 = arith.cmpi ne, %344, %c0_i32_97 : i32
    cf.cond_br %345, ^bb47, ^bb50
  ^bb50:  // pred: ^bb49
    %346 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_98 = arith.constant 0 : i64
    %347 = arith.extui %346 : i32 to i64
    %348 = arith.addi %347, %c0_i64_98 : i64
    %349 = llvm.getelementptr %22[%348] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %350 = llvm.load %349 : !llvm.ptr -> i32
    llvm.store %350, %7 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb51:  // 3 preds: ^bb47, ^bb52, ^bb53
    %351 = llvm.load %3 : !llvm.ptr -> i32
    %352 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %353 = arith.extui %351 : i32 to i64
    %354 = arith.addi %353, %c24_i64 : i64
    %355 = llvm.getelementptr %22[%354] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %352, %355 : i32, !llvm.ptr
    %356 = llvm.load %3 : !llvm.ptr -> i32
    %357 = llvm.load %10 : !llvm.ptr -> i32
    %c20_i64_99 = arith.constant 20 : i64
    %358 = arith.extui %356 : i32 to i64
    %359 = arith.addi %358, %c20_i64_99 : i64
    %360 = llvm.getelementptr %22[%359] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store %357, %360 : i32, !llvm.ptr
    %361 = llvm.load %9 : !llvm.ptr -> i32
    %362 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %363 = arith.addi %362, %c20_i32 : i32
    %c0_i64_100 = arith.constant 0 : i64
    %364 = arith.extui %363 : i32 to i64
    %365 = arith.addi %364, %c0_i64_100 : i64
    %366 = llvm.getelementptr %22[%365] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %367 = llvm.load %366 : !llvm.ptr -> i32
    %c3_i32_101 = arith.constant 3 : i32
    %c31_i32_102 = arith.constant 31 : i32
    %368 = arith.cmpi ule, %c3_i32_101, %c31_i32_102 : i32
    %369 = scf.if %368 -> (i32) {
      %474 = arith.shli %367, %c3_i32_101 : i32
      scf.yield %474 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    %370 = arith.addi %361, %369 : i32
    llvm.store %370, %1 : i32, !llvm.ptr
    %c0_i64_103 = arith.constant 0 : i64
    %371 = arith.extui %370 : i32 to i64
    %372 = arith.addi %371, %c0_i64_103 : i64
    %373 = llvm.getelementptr %22[%372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %374 = llvm.load %373 : !llvm.ptr -> i32
    %375 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_104 = arith.constant 12 : i32
    %376 = arith.addi %375, %c12_i32_104 : i32
    %377 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_105 = arith.constant 4 : i64
    %378 = arith.extui %377 : i32 to i64
    %379 = arith.addi %378, %c4_i64_105 : i64
    %380 = llvm.getelementptr %22[%379] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %381 = llvm.load %380 : !llvm.ptr -> i32
    %382 = arith.cmpi ult, %381, %36 : i32
    cf.cond_br %382, ^bb55, ^bb56
  ^bb52:  // 3 preds: ^bb47, ^bb47, ^bb54
    %c1_i32_106 = arith.constant 1 : i32
    llvm.store %c1_i32_106, %10 : i32, !llvm.ptr
    cf.br ^bb51
  ^bb53:  // pred: ^bb47
    %383 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_107 = arith.constant 3 : i32
    %c31_i32_108 = arith.constant 31 : i32
    %384 = arith.cmpi ule, %c3_i32_107, %c31_i32_108 : i32
    %385 = scf.if %384 -> (i32) {
      %474 = arith.shli %383, %c3_i32_107 : i32
      scf.yield %474 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %385, %11 : i32, !llvm.ptr
    %386 = llvm.load %9 : !llvm.ptr -> i32
    %387 = llvm.load %11 : !llvm.ptr -> i32
    %388 = arith.addi %386, %387 : i32
    llvm.store %388, %11 : i32, !llvm.ptr
    %c4_i64_109 = arith.constant 4 : i64
    %389 = arith.extui %388 : i32 to i64
    %390 = arith.addi %389, %c4_i64_109 : i64
    %391 = llvm.getelementptr %22[%390] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %392 = llvm.load %391 : !llvm.ptr -> i32
    %c0_i32_110 = arith.constant 0 : i32
    %393 = arith.cmpi ne, %392, %c0_i32_110 : i32
    cf.cond_br %393, ^bb51, ^bb54
  ^bb54:  // pred: ^bb53
    %394 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i64_111 = arith.constant 0 : i64
    %395 = arith.extui %394 : i32 to i64
    %396 = arith.addi %395, %c0_i64_111 : i64
    %397 = llvm.getelementptr %22[%396] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %398 = llvm.load %397 : !llvm.ptr -> i32
    llvm.store %398, %7 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb55:  // 2 preds: ^bb51, ^bb56
    %399 = llvm.getelementptr %35[%381] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %400 = llvm.load %399 : !llvm.ptr -> !llvm.ptr
    %401 = llvm.load %400 : !llvm.ptr -> i32
    %c0_i32_112 = arith.constant 0 : i32
    %402 = arith.cmpi eq, %401, %c0_i32_112 : i32
    cf.cond_br %402, ^bb58, ^bb57
  ^bb56:  // pred: ^bb51
    %c3_i32_113 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_113) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %403 = llvm.getelementptr %400[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %404 = llvm.getelementptr %400[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %405 = llvm.getelementptr %400[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %406 = llvm.load %403 : !llvm.ptr -> !llvm.ptr
    %407 = llvm.load %405 : !llvm.ptr -> !llvm.ptr
    %408 = llvm.load %406 : !llvm.ptr -> i32
    %c0_i32_114 = arith.constant 0 : i32
    %409 = arith.cmpi eq, %408, %c0_i32_114 : i32
    cf.cond_br %409, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c4_i32_115 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_115) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %410 = llvm.load %404 : !llvm.ptr -> i32
    %411 = arith.cmpi ne, %30, %410 : i32
    cf.cond_br %411, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_116 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_116) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %412 = llvm.call %406(%407, %374, %376) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_117 = arith.constant 0 : i32
    %413 = arith.cmpi ne, %412, %c0_i32_117 : i32
    cf.cond_br %413, ^bb5, ^bb63
  ^bb62:  // pred: ^bb59
    %c5_i32_118 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_118) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // pred: ^bb61
    %414 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_119 = arith.constant 8 : i32
    %415 = arith.addi %414, %c8_i32_119 : i32
    llvm.store %415, %0 : i32, !llvm.ptr
    %416 = llvm.load %8 : !llvm.ptr -> i32
    %417 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_120 = arith.constant 32 : i32
    %418 = arith.addi %417, %c32_i32_120 : i32
    llvm.store %418, %6 : i32, !llvm.ptr
    %419 = arith.cmpi eq, %416, %418 : i32
    %420 = arith.extui %419 : i1 to i32
    %c0_i32_121 = arith.constant 0 : i32
    %421 = arith.cmpi eq, %420, %c0_i32_121 : i32
    %422 = arith.extui %421 : i1 to i32
    %c0_i32_122 = arith.constant 0 : i32
    %423 = arith.cmpi ne, %422, %c0_i32_122 : i32
    cf.cond_br %423, ^bb35, ^bb64
  ^bb64:  // pred: ^bb63
    cf.br ^bb34
  ^bb65:  // pred: ^bb6
    %424 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_123 = arith.constant 32 : i64
    %425 = arith.extui %424 : i32 to i64
    %426 = arith.addi %425, %c32_i64_123 : i64
    %427 = llvm.getelementptr %22[%426] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %428 = llvm.load %427 : !llvm.ptr -> i32
    %429 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_124 = arith.constant 0 : i64
    %430 = arith.extui %429 : i32 to i64
    %431 = arith.addi %430, %c0_i64_124 : i64
    %432 = llvm.getelementptr %22[%431] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %433 = llvm.load %432 : !llvm.ptr -> i32
    %434 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_125 = arith.constant 3 : i32
    %c31_i32_126 = arith.constant 31 : i32
    %435 = arith.cmpi ule, %c3_i32_125, %c31_i32_126 : i32
    %436 = scf.if %435 -> (i32) {
      %474 = arith.shli %434, %c3_i32_125 : i32
      scf.yield %474 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    %437 = arith.addi %433, %436 : i32
    llvm.store %437, %1 : i32, !llvm.ptr
    %c0_i64_127 = arith.constant 0 : i64
    %438 = arith.extui %437 : i32 to i64
    %439 = arith.addi %438, %c0_i64_127 : i64
    %440 = llvm.getelementptr %22[%439] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %441 = llvm.load %440 : !llvm.ptr -> i32
    %442 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_128 = arith.constant 4 : i64
    %443 = arith.extui %442 : i32 to i64
    %444 = arith.addi %443, %c4_i64_128 : i64
    %445 = llvm.getelementptr %22[%444] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %446 = llvm.load %445 : !llvm.ptr -> i32
    %447 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_129 = arith.constant 36 : i64
    %448 = arith.extui %447 : i32 to i64
    %449 = arith.addi %448, %c36_i64_129 : i64
    %450 = llvm.getelementptr %22[%449] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %451 = llvm.load %450 : !llvm.ptr -> i32
    %c12_i64_130 = arith.constant 12 : i64
    %452 = arith.extui %451 : i32 to i64
    %453 = arith.addi %452, %c12_i64_130 : i64
    %454 = llvm.getelementptr %22[%453] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %455 = llvm.load %454 : !llvm.ptr -> i32
    %456 = arith.cmpi ult, %455, %38 : i32
    cf.cond_br %456, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %457 = llvm.getelementptr %37[%455] : (!llvm.ptr, i32) -> !llvm.ptr, i8
    %458 = llvm.load %457 : !llvm.ptr -> !llvm.ptr
    %459 = llvm.load %458 : !llvm.ptr -> i32
    %c0_i32_131 = arith.constant 0 : i32
    %460 = arith.cmpi eq, %459, %c0_i32_131 : i32
    cf.cond_br %460, ^bb69, ^bb68
  ^bb67:  // pred: ^bb65
    %c3_i32_132 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_132) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %461 = llvm.getelementptr %458[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %462 = llvm.getelementptr %458[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %463 = llvm.getelementptr %458[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %464 = llvm.load %461 : !llvm.ptr -> !llvm.ptr
    %465 = llvm.load %463 : !llvm.ptr -> !llvm.ptr
    %466 = llvm.load %464 : !llvm.ptr -> i32
    %c0_i32_133 = arith.constant 0 : i32
    %467 = arith.cmpi eq, %466, %c0_i32_133 : i32
    cf.cond_br %467, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c4_i32_134 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_134) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %468 = llvm.load %462 : !llvm.ptr -> i32
    %469 = arith.cmpi ne, %24, %468 : i32
    cf.cond_br %469, ^bb73, ^bb72
  ^bb71:  // pred: ^bb68
    %c3_i32_135 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_135) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %470 = llvm.call %464(%465, %428, %441, %446) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_136 = arith.constant 0 : i32
    %471 = arith.cmpi eq, %470, %c0_i32_136 : i32
    %472 = arith.extui %471 : i1 to i32
    %c0_i32_137 = arith.constant 0 : i32
    %473 = arith.cmpi ne, %472, %c0_i32_137 : i32
    cf.cond_br %473, ^bb4, ^bb74
  ^bb73:  // pred: ^bb70
    %c5_i32_138 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_138) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // pred: ^bb72
    cf.br ^bb5
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
