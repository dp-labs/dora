---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @even(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = "wasm.eq"(%1, %c0_i32) : (i32, i32) -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32_0 : i32
    cf.cond_br %3, ^bb2, ^bb3
  ^bb1(%4: i32):  // pred: ^bb4
    return %4 : i32
  ^bb2:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %6 = "wasm.sub"(%5, %c1_i32_1) : (i32, i32) -> i32
    %7 = call @odd(%arg0, %6) : (!llvm.ptr, i32) -> i32
    cf.br ^bb4(%7 : i32)
  ^bb4(%8: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%8 : i32)
  }
  func.func @odd(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = "wasm.eq"(%1, %c0_i32) : (i32, i32) -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32_0 : i32
    cf.cond_br %3, ^bb2, ^bb3
  ^bb1(%4: i32):  // pred: ^bb4
    return %4 : i32
  ^bb2:  // pred: ^bb0
    %c0_i32_1 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_1 : i32)
  ^bb3:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %6 = "wasm.sub"(%5, %c1_i32) : (i32, i32) -> i32
    %7 = call @even(%arg0, %6) : (!llvm.ptr, i32) -> i32
    cf.br ^bb4(%7 : i32)
  ^bb4(%8: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%8 : i32)
  }
}
