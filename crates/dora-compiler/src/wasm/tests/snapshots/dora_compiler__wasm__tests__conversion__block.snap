---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func @dummy(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @empty(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb3
  ^bb2:  // pred: ^bb4
    return
  ^bb3:  // pred: ^bb1
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    cf.br ^bb2
  }
  func.func public @singular(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb3
  ^bb2(%0: i32):  // pred: ^bb4
    return %0 : i32
  ^bb3:  // pred: ^bb1
    %c7_i32 = arith.constant 7 : i32
    cf.br ^bb4(%c7_i32 : i32)
  ^bb4(%1: i32):  // pred: ^bb3
    cf.br ^bb2(%1 : i32)
  }
  func.func public @multi(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb3
  ^bb2(%0: i32):  // pred: ^bb5
    return %0 : i32
  ^bb3:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c7_i32 = arith.constant 7 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb4(%c7_i32 : i32)
  ^bb4(%1: i32):  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c8_i32 = arith.constant 8 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c7_i64 = arith.constant 7 : i64
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb5(%c8_i32, %c7_i64, %c9_i32 : i32, i64, i32)
  ^bb5(%2: i32, %3: i64, %4: i32):  // pred: ^bb4
    cf.br ^bb2(%2 : i32)
  }
  func.func public @nested(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb5
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb6
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb5
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb6(%c9_i32 : i32)
  ^bb5:  // pred: ^bb1
    cf.br ^bb4
  ^bb6(%2: i32):  // pred: ^bb4
    cf.br ^bb3(%2 : i32)
  }
  func.func public @deep(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c150_i32 = arith.constant 150 : i32
    cf.br ^bb40(%c150_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb5
    cf.br ^bb3(%2 : i32)
  ^bb5(%3: i32):  // pred: ^bb6
    cf.br ^bb4(%3 : i32)
  ^bb6(%4: i32):  // pred: ^bb7
    cf.br ^bb5(%4 : i32)
  ^bb7(%5: i32):  // pred: ^bb8
    cf.br ^bb6(%5 : i32)
  ^bb8(%6: i32):  // pred: ^bb9
    cf.br ^bb7(%6 : i32)
  ^bb9(%7: i32):  // pred: ^bb10
    cf.br ^bb8(%7 : i32)
  ^bb10(%8: i32):  // pred: ^bb11
    cf.br ^bb9(%8 : i32)
  ^bb11(%9: i32):  // pred: ^bb12
    cf.br ^bb10(%9 : i32)
  ^bb12(%10: i32):  // pred: ^bb13
    cf.br ^bb11(%10 : i32)
  ^bb13(%11: i32):  // pred: ^bb14
    cf.br ^bb12(%11 : i32)
  ^bb14(%12: i32):  // pred: ^bb15
    cf.br ^bb13(%12 : i32)
  ^bb15(%13: i32):  // pred: ^bb16
    cf.br ^bb14(%13 : i32)
  ^bb16(%14: i32):  // pred: ^bb17
    cf.br ^bb15(%14 : i32)
  ^bb17(%15: i32):  // pred: ^bb18
    cf.br ^bb16(%15 : i32)
  ^bb18(%16: i32):  // pred: ^bb19
    cf.br ^bb17(%16 : i32)
  ^bb19(%17: i32):  // pred: ^bb20
    cf.br ^bb18(%17 : i32)
  ^bb20(%18: i32):  // pred: ^bb21
    cf.br ^bb19(%18 : i32)
  ^bb21(%19: i32):  // pred: ^bb22
    cf.br ^bb20(%19 : i32)
  ^bb22(%20: i32):  // pred: ^bb23
    cf.br ^bb21(%20 : i32)
  ^bb23(%21: i32):  // pred: ^bb24
    cf.br ^bb22(%21 : i32)
  ^bb24(%22: i32):  // pred: ^bb25
    cf.br ^bb23(%22 : i32)
  ^bb25(%23: i32):  // pred: ^bb26
    cf.br ^bb24(%23 : i32)
  ^bb26(%24: i32):  // pred: ^bb27
    cf.br ^bb25(%24 : i32)
  ^bb27(%25: i32):  // pred: ^bb28
    cf.br ^bb26(%25 : i32)
  ^bb28(%26: i32):  // pred: ^bb29
    cf.br ^bb27(%26 : i32)
  ^bb29(%27: i32):  // pred: ^bb30
    cf.br ^bb28(%27 : i32)
  ^bb30(%28: i32):  // pred: ^bb31
    cf.br ^bb29(%28 : i32)
  ^bb31(%29: i32):  // pred: ^bb32
    cf.br ^bb30(%29 : i32)
  ^bb32(%30: i32):  // pred: ^bb33
    cf.br ^bb31(%30 : i32)
  ^bb33(%31: i32):  // pred: ^bb34
    cf.br ^bb32(%31 : i32)
  ^bb34(%32: i32):  // pred: ^bb35
    cf.br ^bb33(%32 : i32)
  ^bb35(%33: i32):  // pred: ^bb36
    cf.br ^bb34(%33 : i32)
  ^bb36(%34: i32):  // pred: ^bb37
    cf.br ^bb35(%34 : i32)
  ^bb37(%35: i32):  // pred: ^bb38
    cf.br ^bb36(%35 : i32)
  ^bb38(%36: i32):  // pred: ^bb39
    cf.br ^bb37(%36 : i32)
  ^bb39(%37: i32):  // pred: ^bb40
    cf.br ^bb38(%37 : i32)
  ^bb40(%38: i32):  // pred: ^bb1
    cf.br ^bb39(%38 : i32)
  }
  func.func public @"as-select-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %c3_i32, %c0_i32 : i32
    %3 = arith.select %2, %1, %c2_i32 : i32
    cf.br ^bb2(%3 : i32)
  }
  func.func public @"as-select-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %c3_i32, %c0_i32 : i32
    %3 = arith.select %2, %c2_i32, %1 : i32
    cf.br ^bb2(%3 : i32)
  }
  func.func public @"as-select-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    %3 = arith.select %2, %c2_i32, %c3_i32 : i32
    cf.br ^bb2(%3 : i32)
  }
  func.func public @"as-loop-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb5(%2: i32):  // pred: ^bb4
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb3(%2 : i32)
  }
  func.func public @"as-loop-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb5(%2: i32):  // pred: ^bb4
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb3(%2 : i32)
  }
  func.func public @"as-loop-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32 : i32)
  ^bb5(%2: i32):  // pred: ^bb4
    cf.br ^bb3(%2 : i32)
  }
  func.func public @"as-if-condition"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2:  // pred: ^bb6
    return
  ^bb3(%0: i32):  // pred: ^bb1
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %0, %c0_i32 : i32
    cf.cond_br %1, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb6
  ^bb5:  // pred: ^bb3
    cf.br ^bb6
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cf.br ^bb2
  }
  func.func public @"as-if-then"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3, ^bb4
  ^bb2(%1: i32):  // pred: ^bb5
    return %1 : i32
  ^bb3:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb6(%c1_i32_0 : i32)
  ^bb4:  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb5(%c2_i32 : i32)
  ^bb5(%2: i32):  // 2 preds: ^bb4, ^bb6
    cf.br ^bb2(%2 : i32)
  ^bb6(%3: i32):  // pred: ^bb3
    cf.br ^bb5(%3 : i32)
  }
  func.func public @"as-if-else"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %0, ^bb3, ^bb4
  ^bb2(%1: i32):  // pred: ^bb5
    return %1 : i32
  ^bb3:  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb5(%c2_i32 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb6(%c1_i32_0 : i32)
  ^bb5(%2: i32):  // 2 preds: ^bb3, ^bb6
    cf.br ^bb2(%2 : i32)
  ^bb6(%3: i32):  // pred: ^bb4
    cf.br ^bb5(%3 : i32)
  }
  func.func public @"as-br_if-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %c2_i32, %c0_i32 : i32
    cf.cond_br %3, ^bb3(%2 : i32), ^bb5(%2 : i32)
  ^bb5(%4: i32):  // pred: ^bb4
    cf.br ^bb3(%2 : i32)
  }
  func.func public @"as-br_if-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb1
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3(%c2_i32 : i32), ^bb5(%c2_i32 : i32)
  ^bb5(%4: i32):  // pred: ^bb4
    cf.br ^bb3(%c2_i32 : i32)
  }
  func.func public @"as-br_table-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    cf.switch %c2_i32 : i32, [
      default: ^bb3(%2 : i32),
      0: ^bb3(%2 : i32)
    ]
  }
  func.func public @"as-br_table-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // 2 preds: ^bb4, ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb1
    cf.switch %2 : i32, [
      default: ^bb3(%c2_i32 : i32),
      0: ^bb3(%c2_i32 : i32)
    ]
  }
  func.func @func(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"as-call_indirect-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // pred: ^bb11
    cf.br ^bb2(%8 : i32)
  ^bb4(%9: i32):  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %10 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %10, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %11 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.ptrtoint %12 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.cmpi eq, %13, %c0_i64 : i64
    cf.cond_br %14, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_0 : i64
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.load %16 : !llvm.ptr -> i32
    %23 = arith.cmpi ne, %1, %22 : i32
    cf.cond_br %23, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %24 = llvm.call %18(%19, %9, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb3(%24 : i32)
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  }
  func.func public @"as-call_indirect-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // pred: ^bb11
    cf.br ^bb2(%8 : i32)
  ^bb4(%9: i32):  // pred: ^bb1
    %c0_i32 = arith.constant 0 : i32
    %10 = arith.cmpi ult, %c0_i32, %6 : i32
    cf.cond_br %10, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %11 = llvm.getelementptr inbounds %4[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.ptrtoint %12 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.cmpi eq, %13, %c0_i64 : i64
    cf.cond_br %14, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_0 : i64
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.load %16 : !llvm.ptr -> i32
    %23 = arith.cmpi ne, %1, %22 : i32
    cf.cond_br %23, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %24 = llvm.call %18(%19, %c2_i32, %9) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb3(%24 : i32)
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  }
  func.func public @"as-call_indirect-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = llvm.getelementptr %arg0[48] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.load %3 : !llvm.ptr -> i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32 : i32)
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3(%8: i32):  // pred: ^bb11
    cf.br ^bb2(%8 : i32)
  ^bb4(%9: i32):  // pred: ^bb1
    %10 = arith.cmpi ult, %9, %6 : i32
    cf.cond_br %10, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %11 = llvm.getelementptr inbounds %4[%9] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.ptrtoint %12 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.cmpi eq, %13, %c0_i64 : i64
    cf.cond_br %14, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %15 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %12[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.ptrtoint %18 : !llvm.ptr to i64
    %c0_i64_0 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %20, %c0_i64_0 : i64
    cf.cond_br %21, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %22 = llvm.load %16 : !llvm.ptr -> i32
    %23 = arith.cmpi ne, %1, %22 : i32
    cf.cond_br %23, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %24 = llvm.call %18(%19, %c1_i32, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb3(%24 : i32)
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  }
  func.func public @"as-store-first"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2:  // pred: ^bb3
    return
  ^bb3(%3: i32):  // pred: ^bb1
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %3 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %2[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_0, %6 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func public @"as-store-last"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2:  // pred: ^bb3
    return
  ^bb3(%3: i32):  // pred: ^bb1
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c10_i32 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %2[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3, %6 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func public @"as-memory.grow-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    %c0_i32 = arith.constant 0 : i32
    %2 = call @dora_fn_wasm_memory_grow(%arg0, %1, %c0_i32) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%2 : i32)
  }
  func.func @f(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @"as-call-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    %2 = call @f(%arg0, %1) : (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%2 : i32)
  }
  func.func public @"as-return-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-drop-operand"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2:  // pred: ^bb3
    return
  ^bb3(%0: i32):  // pred: ^bb1
    cf.br ^bb2
  }
  func.func public @"as-br-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb4
    cf.br ^bb2(%1 : i32)
  ^bb4(%2: i32):  // pred: ^bb1
    cf.br ^bb3(%2 : i32)
  }
  func.func public @"as-local.set-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32_0 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb1
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%3 : i32)
  }
  func.func public @"as-local.tee-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32_0 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb1
    llvm.store %2, %0 : i32, !llvm.ptr
    cf.br ^bb2(%2 : i32)
  }
  func.func public @"as-global.set-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.load %0 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3(%3: i32):  // pred: ^bb1
    llvm.store %3, %1 : i32, !llvm.ptr
    %4 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%4 : i32)
  }
  func.func public @"as-load-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb3
    return %3 : i32
  ^bb3(%4: i32):  // pred: ^bb1
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %2[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%8 : i32)
  }
  func.func public @"as-unary-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c13_i32 = arith.constant 13 : i32
    cf.br ^bb3(%c13_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    %false = arith.constant false
    %2 = llvm.call_intrinsic "llvm.cttz.i32"(%1, %false) : (i32, i1) -> i32
    cf.br ^bb2(%2 : i32)
  }
  func.func public @"as-binary-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb3(%c3_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb4
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb4(%c4_i32 : i32)
  ^bb4(%2: i32):  // pred: ^bb3
    %3 = arith.muli %1, %2 : i32
    cf.br ^bb2(%3 : i32)
  }
  func.func public @"as-test-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c13_i32 = arith.constant 13 : i32
    cf.br ^bb3(%c13_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi eq, %1, %c0_i32 : i32
    %3 = arith.extui %2 : i1 to i32
    cf.br ^bb2(%3 : i32)
  }
  func.func public @"as-compare-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1077936128_i32 = arith.constant 1077936128 : i32
    %0 = arith.bitcast %c1077936128_i32 : i32 to f32
    cf.br ^bb3(%0 : f32)
  ^bb2(%1: i32):  // pred: ^bb4
    return %1 : i32
  ^bb3(%2: f32):  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1077936128_i32_0 = arith.constant 1077936128 : i32
    %3 = arith.bitcast %c1077936128_i32_0 : i32 to f32
    cf.br ^bb4(%3 : f32)
  ^bb4(%4: f32):  // pred: ^bb3
    %5 = arith.cmpf ogt, %2, %4 : f32
    %6 = arith.extui %5 : i1 to i32
    cf.br ^bb2(%6 : i32)
  }
  func.func public @"as-binary-operands"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb3(%c3_i32, %c4_i32 : i32, i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32, %2: i32):  // pred: ^bb1
    %3 = arith.muli %1, %2 : i32
    cf.br ^bb2(%3 : i32)
  }
  func.func public @"as-compare-operands"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1077936128_i32 = arith.constant 1077936128 : i32
    %0 = arith.bitcast %c1077936128_i32 : i32 to f32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1077936128_i32_0 = arith.constant 1077936128 : i32
    %1 = arith.bitcast %c1077936128_i32_0 : i32 to f32
    cf.br ^bb3(%0, %1 : f32, f32)
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3(%3: f32, %4: f32):  // pred: ^bb1
    %5 = arith.cmpf ogt, %3, %4 : f32
    %6 = arith.extui %5 : i1 to i32
    cf.br ^bb2(%6 : i32)
  }
  func.func public @"as-mixed-operands"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb3(%c3_i32, %c4_i32 : i32, i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32, %2: i32):  // pred: ^bb1
    %c5_i32 = arith.constant 5 : i32
    %3 = arith.addi %2, %c5_i32 : i32
    %4 = arith.muli %1, %3 : i32
    cf.br ^bb2(%4 : i32)
  }
  func.func public @"break-bare"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb3
  ^bb2(%0: i32):  // pred: ^bb7
    return %0 : i32
  ^bb3:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %1, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %c0_i32_0 = arith.constant 0 : i32
    cf.switch %c0_i32_0 : i32, [
      default: ^bb6
    ]
  ^bb5:  // pred: ^bb3
    llvm.unreachable
  ^bb6:  // pred: ^bb4
    %c1_i32_1 = arith.constant 1 : i32
    cf.switch %c1_i32_1 : i32, [
      default: ^bb7,
      0: ^bb7,
      1: ^bb7
    ]
  ^bb7:  // 3 preds: ^bb6, ^bb6, ^bb6
    %c19_i32 = arith.constant 19 : i32
    cf.br ^bb2(%c19_i32 : i32)
  }
  func.func public @"break-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c18_i32 = arith.constant 18 : i32
    cf.br ^bb3(%c18_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"break-multi-value"(%arg0: !llvm.ptr) -> (i32, i32, i64) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c18_i32 = arith.constant 18 : i32
    %c-18_i32 = arith.constant -18 : i32
    %c18_i64 = arith.constant 18 : i64
    cf.br ^bb3(%c18_i32, %c-18_i32, %c18_i64 : i32, i32, i64)
  ^bb2(%0: i32, %1: i32, %2: i64):  // pred: ^bb3
    return %0, %1, %2 : i32, i32, i64
  ^bb3(%3: i32, %4: i32, %5: i64):  // pred: ^bb1
    cf.br ^bb2(%3, %4, %5 : i32, i32, i64)
  }
  func.func public @"break-repeated"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c18_i32 = arith.constant 18 : i32
    cf.br ^bb3(%c18_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // pred: ^bb1
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"break-inner"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    llvm.store %c0_i32_0, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    cf.br ^bb3(%c1_i32_1 : i32)
  ^bb2(%2: i32):  // pred: ^bb8
    return %2 : i32
  ^bb3(%3: i32):  // 2 preds: ^bb1, ^bb4
    %4 = arith.addi %1, %3 : i32
    llvm.store %4, %0 : i32, !llvm.ptr
    %5 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb6
  ^bb4(%6: i32):  // no predecessors
    cf.br ^bb3(%6 : i32)
  ^bb5(%7: i32):  // pred: ^bb6
    %8 = arith.addi %5, %7 : i32
    llvm.store %8, %0 : i32, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb7(%c4_i32 : i32)
  ^bb6:  // pred: ^bb3
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb5(%c2_i32 : i32)
  ^bb7(%10: i32):  // pred: ^bb5
    %11 = arith.addi %9, %10 : i32
    llvm.store %11, %0 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    cf.br ^bb8(%c8_i32 : i32)
  ^bb8(%13: i32):  // 2 preds: ^bb7, ^bb9
    %14 = arith.addi %12, %13 : i32
    llvm.store %14, %0 : i32, !llvm.ptr
    %15 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%15 : i32)
  ^bb9(%16: i32):  // no predecessors
    %false = arith.constant false
    %17 = llvm.call_intrinsic "llvm.cttz.i32"(%16, %false) : (i32, i1) -> i32
    cf.br ^bb8(%17 : i32)
  }
  func.func public @param(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %0 = arith.addi %c1_i32, %c2_i32 : i32
    cf.br ^bb3(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb1
    cf.br ^bb2(%2 : i32)
  }
  func.func public @params(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %0 = arith.addi %c1_i32, %c2_i32 : i32
    cf.br ^bb3(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb1
    cf.br ^bb2(%2 : i32)
  }
  func.func public @"params-id"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb3(%c1_i32, %c2_i32 : i32, i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32, %2: i32):  // pred: ^bb1
    %3 = arith.addi %1, %2 : i32
    cf.br ^bb2(%3 : i32)
  }
  func.func public @"param-break"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %0 = arith.addi %c1_i32, %c2_i32 : i32
    cf.br ^bb3(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb1
    cf.br ^bb2(%2 : i32)
  }
  func.func public @"params-break"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %0 = arith.addi %c1_i32, %c2_i32 : i32
    cf.br ^bb3(%0 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb1
    cf.br ^bb2(%2 : i32)
  }
  func.func public @"params-id-break"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb3(%c1_i32, %c2_i32 : i32, i32)
  ^bb2(%0: i32):  // pred: ^bb3
    return %0 : i32
  ^bb3(%1: i32, %2: i32):  // pred: ^bb1
    %3 = arith.addi %1, %2 : i32
    cf.br ^bb2(%3 : i32)
  }
  func.func public @effects(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %2 = arith.muli %1, %c3_i32 : i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %4 = arith.subi %3, %c5_i32 : i32
    llvm.store %4, %0 : i32, !llvm.ptr
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c7_i32 = arith.constant 7 : i32
    %6 = arith.muli %5, %c7_i32 : i32
    llvm.store %6, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3:  // pred: ^bb1
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c-14_i32 = arith.constant -14 : i32
    %9 = arith.cmpi eq, %8, %c-14_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    cf.br ^bb2(%10 : i32)
  }
  func.func public @"type-use"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb3
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // pred: ^bb1
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32 : i32)
  ^bb4(%0: i32):  // pred: ^bb3
    cf.br ^bb5
  ^bb5:  // pred: ^bb4
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.bitcast %c0_i64 : i64 to f64
    %c0_i32_1 = arith.constant 0 : i32
    cf.br ^bb6(%c0_i32_0, %1, %c0_i32_1 : i32, f64, i32)
  ^bb6(%2: i32, %3: f64, %4: i32):  // pred: ^bb5
    %c0_i32_2 = arith.constant 0 : i32
    cf.br ^bb7(%c0_i32_2 : i32)
  ^bb7(%5: i32):  // pred: ^bb6
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %c0_i32_3 = arith.constant 0 : i32
    %c0_i64_4 = arith.constant 0 : i64
    %6 = arith.bitcast %c0_i64_4 : i64 to f64
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb9(%c0_i32_3, %6, %c0_i32_5 : i32, f64, i32)
  ^bb9(%7: i32, %8: f64, %9: i32):  // pred: ^bb8
    cf.br ^bb2
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
