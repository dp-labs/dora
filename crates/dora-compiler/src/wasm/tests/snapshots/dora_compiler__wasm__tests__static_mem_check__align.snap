---
source: crates/dora-compiler/src/wasm/tests/static_mem_check.rs
assertion_line: 44
expression: op
---
module {
  func.func public @load_i32_8s(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %4, %c1_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i8
    %12 = arith.extsi %11 : i8 to i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_i32_8u(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %4, %c1_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i8
    %12 = arith.extui %11 : i8 to i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_i32_16s(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %5 = arith.addi %4, %c2_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i16
    %12 = arith.extsi %11 : i16 to i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_i32_16u(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %5 = arith.addi %4, %c2_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i16
    %12 = arith.extui %11 : i16 to i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_i32(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %5 = arith.addi %4, %c4_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_i64_8s(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %4, %c1_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i8
    %12 = arith.extsi %11 : i8 to i64
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_i64_8u(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %4, %c1_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i8
    %12 = arith.extui %11 : i8 to i64
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_i64_16s(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %5 = arith.addi %4, %c2_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i16
    %12 = arith.extsi %11 : i16 to i64
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_i64_16u(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %5 = arith.addi %4, %c2_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i16
    %12 = arith.extui %11 : i16 to i64
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_i64_32s(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %5 = arith.addi %4, %c4_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = arith.extsi %11 : i32 to i64
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_i64_32u(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %5 = arith.addi %4, %c4_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = arith.extui %11 : i32 to i64
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_i64(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %5 = arith.addi %4, %c8_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i64
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_f32(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %5 = arith.addi %4, %c4_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> f32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @load_f64(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %5 = arith.addi %4, %c8_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> f64
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @store_i32_8(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c1_i64 = arith.constant 1 : i64
    %5 = arith.addi %4, %c1_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = arith.trunci %c1_i32 : i32 to i8
    llvm.store volatile %11, %10 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @store_i32_16(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %5 = arith.addi %4, %c2_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = arith.trunci %c1_i32 : i32 to i16
    llvm.store volatile %11, %10 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @store_i32(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %5 = arith.addi %4, %c4_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32, %10 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32_1) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @store_i64_8(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c1_i64_0 = arith.constant 1 : i64
    %5 = arith.addi %4, %c1_i64_0 : i64
    %c0_i32_1 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_1) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = arith.trunci %c1_i64 : i64 to i8
    llvm.store volatile %11, %10 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @store_i64_16(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c2_i64 = arith.constant 2 : i64
    %5 = arith.addi %4, %c2_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = arith.trunci %c1_i64 : i64 to i16
    llvm.store volatile %11, %10 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @store_i64_32(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %5 = arith.addi %4, %c4_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = arith.trunci %c1_i64 : i64 to i32
    llvm.store volatile %11, %10 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @store_i64(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %5 = arith.addi %4, %c8_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %6 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %7 = arith.extui %6 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %8 = arith.muli %7, %c65536_i64 : i64
    %9 = arith.cmpi ult, %5, %8 : i64
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr %2[%4] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %10 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @store_f32(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1065353216_i32 = arith.constant 1065353216 : i32
    %3 = arith.bitcast %c1065353216_i32 : i32 to f32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c0_i32 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %c4_i64 = arith.constant 4 : i64
    %6 = arith.addi %5, %c4_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %7 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %8 = arith.extui %7 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %9 = arith.muli %8, %c65536_i64 : i64
    %10 = arith.cmpi ult, %6, %9 : i64
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr %2[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3, %11 {alignment = 1 : i64} : f32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func public @store_f64(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %3 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c0_i32 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.addi %5, %c8_i64 : i64
    %c0_i32_0 = arith.constant 0 : i32
    %7 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %8 = arith.extui %7 : i32 to i64
    %c65536_i64 = arith.constant 65536 : i64
    %9 = arith.muli %8, %c65536_i64 : i64
    %10 = arith.cmpi ult, %6, %9 : i64
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.getelementptr %2[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %3, %11 {alignment = 1 : i64} : f64, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32 = arith.constant 1 : i32
    call @dora_fn_wasm_raise_trap(%c1_i32) : (i32) -> ()
    cf.br ^bb3
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
