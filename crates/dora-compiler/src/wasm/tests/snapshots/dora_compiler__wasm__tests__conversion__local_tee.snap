---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @"type-local-i32"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    llvm.store %c0_i32_0, %0 : i32, !llvm.ptr
    cf.br ^bb2(%c0_i32_0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @"type-local-i64"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    %c0_i64 = arith.constant 0 : i64
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i64_0 = arith.constant 0 : i64
    llvm.store %c0_i64_0, %0 : i64, !llvm.ptr
    cf.br ^bb2(%c0_i64_0 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @"type-local-f32"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %cst, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.bitcast %c0_i32 : i32 to f32
    llvm.store %1, %0 : f32, !llvm.ptr
    cf.br ^bb2(%1 : f32)
  ^bb2(%2: f32):  // pred: ^bb1
    return %2 : f32
  }
  func.func public @"type-local-f64"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %cst, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.bitcast %c0_i64 : i64 to f64
    llvm.store %1, %0 : f64, !llvm.ptr
    cf.br ^bb2(%1 : f64)
  ^bb2(%2: f64):  // pred: ^bb1
    return %2 : f64
  }
  func.func public @"type-param-i32"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    llvm.store %c10_i32, %0 : i32, !llvm.ptr
    cf.br ^bb2(%c10_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @"type-param-i64"(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c11_i64 = arith.constant 11 : i64
    llvm.store %c11_i64, %0 : i64, !llvm.ptr
    cf.br ^bb2(%c11_i64 : i64)
  ^bb2(%1: i64):  // pred: ^bb1
    return %1 : i64
  }
  func.func public @"type-param-f32"(%arg0: !llvm.ptr, %arg1: f32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1093769626_i32 = arith.constant 1093769626 : i32
    %1 = arith.bitcast %c1093769626_i32 : i32 to f32
    llvm.store %1, %0 : f32, !llvm.ptr
    cf.br ^bb2(%1 : f32)
  ^bb2(%2: f32):  // pred: ^bb1
    return %2 : f32
  }
  func.func public @"type-param-f64"(%arg0: !llvm.ptr, %arg1: f64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4623057607486498406_i64 = arith.constant 4623057607486498406 : i64
    %1 = arith.bitcast %c4623057607486498406_i64 : i64 to f64
    llvm.store %1, %0 : f64, !llvm.ptr
    cf.br ^bb2(%1 : f64)
  ^bb2(%2: f64):  // pred: ^bb1
    return %2 : f64
  }
  func.func public @"type-mixed"(%arg0: !llvm.ptr, %arg1: i64, %arg2: f32, %arg3: f64, %arg4: i32, %arg5: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : f64, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x f32 : (i32) -> !llvm.ptr
    llvm.store %cst, %5 : f32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %cst_7 = arith.constant 0.000000e+00 : f64
    %c1_i32_8 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_8 x f64 : (i32) -> !llvm.ptr
    llvm.store %cst_7, %8 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i64_9 = arith.constant 0 : i64
    llvm.store %c0_i64_9, %0 : i64, !llvm.ptr
    %c0_i64_10 = arith.constant 0 : i64
    %9 = arith.cmpi eq, %c0_i64_9, %c0_i64_10 : i64
    %10 = arith.extui %9 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.bitcast %c0_i32 : i32 to f32
    llvm.store %11, %1 : f32, !llvm.ptr
    %12 = arith.negf %11 : f32
    %c0_i64_11 = arith.constant 0 : i64
    %13 = arith.bitcast %c0_i64_11 : i64 to f64
    llvm.store %13, %2 : f64, !llvm.ptr
    %14 = arith.negf %13 : f64
    %c0_i32_12 = arith.constant 0 : i32
    llvm.store %c0_i32_12, %3 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %c0_i32_12, %c0_i32_13 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    llvm.store %c0_i32_14, %4 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %17 = arith.cmpi eq, %c0_i32_14, %c0_i32_15 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %19 = arith.bitcast %c0_i32_16 : i32 to f32
    llvm.store %19, %5 : f32, !llvm.ptr
    %20 = arith.negf %19 : f32
    %c0_i64_17 = arith.constant 0 : i64
    llvm.store %c0_i64_17, %6 : i64, !llvm.ptr
    %c0_i64_18 = arith.constant 0 : i64
    %21 = arith.cmpi eq, %c0_i64_17, %c0_i64_18 : i64
    %22 = arith.extui %21 : i1 to i32
    %c0_i64_19 = arith.constant 0 : i64
    llvm.store %c0_i64_19, %7 : i64, !llvm.ptr
    %c0_i64_20 = arith.constant 0 : i64
    %23 = arith.cmpi eq, %c0_i64_19, %c0_i64_20 : i64
    %24 = arith.extui %23 : i1 to i32
    %c0_i64_21 = arith.constant 0 : i64
    %25 = arith.bitcast %c0_i64_21 : i64 to f64
    llvm.store %25, %8 : f64, !llvm.ptr
    %26 = arith.negf %25 : f64
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @write(%arg0: !llvm.ptr, %arg1: i64, %arg2: f32, %arg3: f64, %arg4: i32, %arg5: i32) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : f64, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x f32 : (i32) -> !llvm.ptr
    llvm.store %cst, %5 : f32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %cst_7 = arith.constant 0.000000e+00 : f64
    %c1_i32_8 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_8 x f64 : (i32) -> !llvm.ptr
    llvm.store %cst_7, %8 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-1097229926_i32 = arith.constant -1097229926 : i32
    %9 = arith.bitcast %c-1097229926_i32 : i32 to f32
    llvm.store %9, %1 : f32, !llvm.ptr
    %c40_i32 = arith.constant 40 : i32
    llvm.store %c40_i32, %3 : i32, !llvm.ptr
    %c-7_i32 = arith.constant -7 : i32
    llvm.store %c-7_i32, %4 : i32, !llvm.ptr
    %c1085276160_i32 = arith.constant 1085276160 : i32
    %10 = arith.bitcast %c1085276160_i32 : i32 to f32
    llvm.store %10, %5 : f32, !llvm.ptr
    %c6_i64 = arith.constant 6 : i64
    llvm.store %c6_i64, %6 : i64, !llvm.ptr
    %c4620693217682128896_i64 = arith.constant 4620693217682128896 : i64
    %11 = arith.bitcast %c4620693217682128896_i64 : i64 to f64
    llvm.store %11, %8 : f64, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i64
    %13 = arith.uitofp %12 : i64 to f64
    %14 = llvm.load %1 : !llvm.ptr -> f32
    %15 = arith.extf %14 : f32 to f64
    %16 = llvm.load %2 : !llvm.ptr -> f64
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = arith.uitofp %17 : i32 to f64
    %19 = llvm.load %4 : !llvm.ptr -> i32
    %20 = arith.sitofp %19 : i32 to f64
    %21 = llvm.load %5 : !llvm.ptr -> f32
    %22 = arith.extf %21 : f32 to f64
    %23 = llvm.load %6 : !llvm.ptr -> i64
    %24 = arith.uitofp %23 : i64 to f64
    %25 = llvm.load %7 : !llvm.ptr -> i64
    %26 = arith.uitofp %25 : i64 to f64
    %27 = llvm.load %8 : !llvm.ptr -> f64
    %28 = arith.addf %26, %27 : f64
    %29 = arith.addf %24, %28 : f64
    %30 = arith.addf %22, %29 : f64
    %31 = arith.addf %20, %30 : f64
    %32 = arith.addf %18, %31 : f64
    %33 = arith.addf %16, %32 : f64
    %34 = arith.addf %15, %33 : f64
    %35 = arith.addf %13, %34 : f64
    %36 = arith.fptosi %35 : f64 to i64
    cf.br ^bb2(%36 : i64)
  ^bb2(%37: i64):  // pred: ^bb1
    return %37 : i64
  }
  func.func public @result(%arg0: !llvm.ptr, %arg1: i64, %arg2: f32, %arg3: f64, %arg4: i32, %arg5: i32) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x f64 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : f64, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x f32 : (i32) -> !llvm.ptr
    llvm.store %cst, %5 : f32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %cst_7 = arith.constant 0.000000e+00 : f64
    %c1_i32_8 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_8 x f64 : (i32) -> !llvm.ptr
    llvm.store %cst_7, %8 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i64 = arith.constant 1 : i64
    llvm.store %c1_i64, %0 : i64, !llvm.ptr
    %9 = arith.uitofp %c1_i64 : i64 to f64
    %c1073741824_i32 = arith.constant 1073741824 : i32
    %10 = arith.bitcast %c1073741824_i32 : i32 to f32
    llvm.store %10, %1 : f32, !llvm.ptr
    %11 = arith.extf %10 : f32 to f64
    %c4614613358185178726_i64 = arith.constant 4614613358185178726 : i64
    %12 = arith.bitcast %c4614613358185178726_i64 : i64 to f64
    llvm.store %12, %2 : f64, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %3 : i32, !llvm.ptr
    %13 = arith.uitofp %c4_i32 : i32 to f64
    %c5_i32 = arith.constant 5 : i32
    llvm.store %c5_i32, %4 : i32, !llvm.ptr
    %14 = arith.sitofp %c5_i32 : i32 to f64
    %c1085276160_i32 = arith.constant 1085276160 : i32
    %15 = arith.bitcast %c1085276160_i32 : i32 to f32
    llvm.store %15, %5 : f32, !llvm.ptr
    %16 = arith.extf %15 : f32 to f64
    %c6_i64 = arith.constant 6 : i64
    llvm.store %c6_i64, %6 : i64, !llvm.ptr
    %17 = arith.uitofp %c6_i64 : i64 to f64
    %c0_i64_9 = arith.constant 0 : i64
    llvm.store %c0_i64_9, %7 : i64, !llvm.ptr
    %18 = arith.uitofp %c0_i64_9 : i64 to f64
    %c4620693217682128896_i64 = arith.constant 4620693217682128896 : i64
    %19 = arith.bitcast %c4620693217682128896_i64 : i64 to f64
    llvm.store %19, %8 : f64, !llvm.ptr
    %20 = arith.addf %18, %19 : f64
    %21 = arith.addf %17, %20 : f64
    %22 = arith.addf %16, %21 : f64
    %23 = arith.addf %14, %22 : f64
    %24 = arith.addf %13, %23 : f64
    %25 = arith.addf %12, %24 : f64
    %26 = arith.addf %11, %25 : f64
    %27 = arith.addf %9, %26 : f64
    cf.br ^bb2(%27 : f64)
  ^bb2(%28: f64):  // pred: ^bb1
    return %28 : f64
  }
  func.func @dummy(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-block-first"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb3(%c1_i32_0 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb1
    cf.br ^bb2(%2 : i32)
  }
  func.func public @"as-block-mid"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb3(%c1_i32_0 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb1
    cf.br ^bb2(%2 : i32)
  }
  func.func public @"as-block-last"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    cf.br ^bb3(%c1_i32_0 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb1
    cf.br ^bb2(%2 : i32)
  }
  func.func public @"as-loop-first"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %0 : i32, !llvm.ptr
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb3(%c3_i32 : i32)
  }
  func.func public @"as-loop-mid"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %0 : i32, !llvm.ptr
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb3(%c4_i32 : i32)
  }
  func.func public @"as-loop-last"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb4
    cf.br ^bb2(%2 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c5_i32 = arith.constant 5 : i32
    llvm.store %c5_i32, %0 : i32, !llvm.ptr
    cf.br ^bb3(%c5_i32 : i32)
  }
  func.func public @"as-br-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i32 = arith.constant 9 : i32
    llvm.store %c9_i32, %0 : i32, !llvm.ptr
    cf.br ^bb3(%c9_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // pred: ^bb1
    cf.br ^bb2(%2 : i32)
  }
  func.func public @"as-br_if-cond"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %1, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    cf.br ^bb3
  }
  func.func public @"as-br_if-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    llvm.store %c8_i32, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c1_i32_0, %c0_i32 : i32
    cf.cond_br %1, ^bb3(%c8_i32 : i32), ^bb4(%c8_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3(%3: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%3 : i32)
  ^bb4(%4: i32):  // pred: ^bb1
    %c7_i32 = arith.constant 7 : i32
    cf.br ^bb3(%c7_i32 : i32)
  }
  func.func public @"as-br_if-value-cond"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c6_i32 = arith.constant 6 : i32
    %c9_i32 = arith.constant 9 : i32
    llvm.store %c9_i32, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c9_i32, %c0_i32 : i32
    cf.cond_br %1, ^bb3(%c6_i32 : i32), ^bb4(%c6_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb3
    return %2 : i32
  ^bb3(%3: i32):  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2(%3 : i32)
  ^bb4(%4: i32):  // pred: ^bb1
    %c7_i32 = arith.constant 7 : i32
    cf.br ^bb3(%c7_i32 : i32)
  }
  func.func public @"as-br_table-index"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.switch %c0_i32 : i32, [
      default: ^bb3,
      0: ^bb3,
      1: ^bb3
    ]
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb1, ^bb1, ^bb1
    cf.br ^bb2
  }
  func.func public @"as-br_table-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    llvm.store %c10_i32, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    cf.switch %c1_i32_0 : i32, [
      default: ^bb3(%c10_i32 : i32),
      0: ^bb3(%c10_i32 : i32),
      1: ^bb3(%c10_i32 : i32)
    ]
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 3 preds: ^bb1, ^bb1, ^bb1
    cf.br ^bb2(%2 : i32)
  }
  func.func public @"as-br_table-value-index"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c6_i32 = arith.constant 6 : i32
    %c11_i32 = arith.constant 11 : i32
    llvm.store %c11_i32, %0 : i32, !llvm.ptr
    cf.switch %c11_i32 : i32, [
      default: ^bb3(%c6_i32 : i32),
      0: ^bb3(%c6_i32 : i32)
    ]
  ^bb2(%1: i32):  // pred: ^bb3
    return %1 : i32
  ^bb3(%2: i32):  // 2 preds: ^bb1, ^bb1
    cf.br ^bb2(%2 : i32)
  }
  func.func public @"as-return-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c7_i32 = arith.constant 7 : i32
    llvm.store %c7_i32, %0 : i32, !llvm.ptr
    cf.br ^bb2(%c7_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @"as-if-cond"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c2_i32, %c0_i32 : i32
    cf.cond_br %1, ^bb3, ^bb4
  ^bb2(%2: i32):  // pred: ^bb5
    return %2 : i32
  ^bb3:  // pred: ^bb1
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb5(%c0_i32_0 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_1 = arith.constant 1 : i32
    cf.br ^bb5(%c1_i32_1 : i32)
  ^bb5(%3: i32):  // 2 preds: ^bb3, ^bb4
    cf.br ^bb2(%3 : i32)
  }
  func.func public @"as-if-then"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb2(%3: i32):  // pred: ^bb5
    return %3 : i32
  ^bb3:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %0 : i32, !llvm.ptr
    cf.br ^bb5(%c3_i32 : i32)
  ^bb4:  // pred: ^bb1
    %4 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb5(%4 : i32)
  ^bb5(%5: i32):  // 2 preds: ^bb3, ^bb4
    cf.br ^bb2(%5 : i32)
  }
  func.func public @"as-if-else"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb3, ^bb4
  ^bb2(%3: i32):  // pred: ^bb5
    return %3 : i32
  ^bb3:  // pred: ^bb1
    %4 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb5(%4 : i32)
  ^bb4:  // pred: ^bb1
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %0 : i32, !llvm.ptr
    cf.br ^bb5(%c4_i32 : i32)
  ^bb5(%5: i32):  // 2 preds: ^bb3, ^bb4
    cf.br ^bb2(%5 : i32)
  }
  func.func public @"as-select-first"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c5_i32 = arith.constant 5 : i32
    llvm.store %c5_i32, %0 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    %5 = arith.select %4, %c5_i32, %2 : i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @"as-select-second"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    llvm.store %c6_i32, %0 : i32, !llvm.ptr
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    %5 = arith.select %4, %2, %c6_i32 : i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @"as-select-cond"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %c7_i32 = arith.constant 7 : i32
    llvm.store %c7_i32, %0 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c7_i32, %c0_i32_1 : i32
    %2 = arith.select %1, %c0_i32, %c1_i32_0 : i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func @f(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb2(%c-1_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"as-call-first"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c12_i32 = arith.constant 12 : i32
    llvm.store %c12_i32, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %1 = call @f(%arg0, %c12_i32, %c2_i32, %c3_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @"as-call-mid"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c13_i32 = arith.constant 13 : i32
    llvm.store %c13_i32, %0 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %1 = call @f(%arg0, %c1_i32_0, %c13_i32, %c3_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @"as-call-last"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c14_i32 = arith.constant 14 : i32
    llvm.store %c14_i32, %0 : i32, !llvm.ptr
    %1 = call @f(%arg0, %c1_i32_0, %c2_i32, %c14_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @"as-call_indirect-first"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %8 = arith.cmpi ult, %c0_i32, %7 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: i32):  // pred: ^bb9
    return %9 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr inbounds %5[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_2 : i64
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %2, %21 : i32
    cf.cond_br %22, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %23 = llvm.call %17(%18, %c1_i32_0, %c2_i32, %c3_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%23 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-call_indirect-mid"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %0 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %8 = arith.cmpi ult, %c0_i32, %7 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: i32):  // pred: ^bb9
    return %9 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr inbounds %5[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_2 : i64
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %2, %21 : i32
    cf.cond_br %22, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %23 = llvm.call %17(%18, %c1_i32_0, %c2_i32, %c3_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%23 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-call_indirect-last"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %8 = arith.cmpi ult, %c0_i32, %7 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: i32):  // pred: ^bb9
    return %9 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr inbounds %5[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_2 : i64
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %2, %21 : i32
    cf.cond_br %22, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %23 = llvm.call %17(%18, %c1_i32_0, %c2_i32, %c3_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%23 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-call_indirect-index"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %8 = arith.cmpi ult, %c0_i32, %7 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: i32):  // pred: ^bb9
    return %9 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.getelementptr inbounds %5[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.cmpi eq, %12, %c0_i64 : i64
    cf.cond_br %13, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32_1 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_1) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %14 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %11[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.ptrtoint %17 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %20 = arith.cmpi eq, %19, %c0_i64_2 : i64
    cf.cond_br %20, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %21 = llvm.load %15 : !llvm.ptr -> i32
    %22 = arith.cmpi ne, %2, %21 : i32
    cf.cond_br %22, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %23 = llvm.call %17(%18, %c1_i32_0, %c2_i32, %c3_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%23 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @"as-local.set-value"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-local.tee-value"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    cf.br ^bb2(%c1_i32_0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @"as-global.set-value"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    llvm.store %c1_i32_0, %2 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-load-address"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c1_i32_0 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %3[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %7 = llvm.load volatile %6 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @"as-loadN-address"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c3_i32 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %3[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %7 = llvm.load volatile %6 {alignment = 1 : i64} : !llvm.ptr -> i8
    %8 = arith.extsi %7 : i8 to i32
    cf.br ^bb2(%8 : i32)
  ^bb2(%9: i32):  // pred: ^bb1
    return %9 : i32
  }
  func.func public @"as-store-address"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c30_i32 = arith.constant 30 : i32
    llvm.store %c30_i32, %0 : i32, !llvm.ptr
    %c7_i32 = arith.constant 7 : i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c30_i32 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %3[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c7_i32, %6 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-store-value"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c2_i32 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %3[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_0, %6 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-storeN-address"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    %c7_i32 = arith.constant 7 : i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c1_i32_0 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %3[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %7 = arith.trunci %c7_i32 : i32 to i8
    llvm.store volatile %7, %6 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-storeN-value"(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c1_i32_0 = arith.constant 1 : i32
    llvm.store %c1_i32_0, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %c2_i32 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %3[%5] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %7 = arith.trunci %c1_i32_0 : i32 to i16
    llvm.store volatile %7, %6 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-unary-operand"(%arg0: !llvm.ptr, %arg1: f32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2139156962_i32 = arith.constant 2139156962 : i32
    %1 = arith.bitcast %c2139156962_i32 : i32 to f32
    llvm.store %1, %0 : f32, !llvm.ptr
    %2 = arith.negf %1 : f32
    cf.br ^bb2(%2 : f32)
  ^bb2(%3: f32):  // pred: ^bb1
    return %3 : f32
  }
  func.func public @"as-binary-left"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %0 : i32, !llvm.ptr
    %c10_i32 = arith.constant 10 : i32
    %1 = arith.addi %c3_i32, %c10_i32 : i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @"as-binary-right"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %0 : i32, !llvm.ptr
    %1 = arith.subi %c10_i32, %c4_i32 : i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @"as-test-operand"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %1 = arith.cmpi eq, %c0_i32, %c0_i32_0 : i32
    %2 = arith.extui %1 : i1 to i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"as-compare-left"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c43_i32 = arith.constant 43 : i32
    llvm.store %c43_i32, %0 : i32, !llvm.ptr
    %c10_i32 = arith.constant 10 : i32
    %1 = arith.cmpi sle, %c43_i32, %c10_i32 : i32
    %2 = arith.extui %1 : i1 to i32
    cf.br ^bb2(%2 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"as-compare-right"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    %c42_i32 = arith.constant 42 : i32
    llvm.store %c42_i32, %0 : i32, !llvm.ptr
    %1 = arith.cmpi eq, %c10_i32, %c42_i32 : i32
    %2 = arith.extui %1 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi eq, %2, %c0_i32 : i32
    %4 = arith.extui %3 : i1 to i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func public @"as-convert-operand"(%arg0: !llvm.ptr, %arg1: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c41_i64 = arith.constant 41 : i64
    llvm.store %c41_i64, %0 : i64, !llvm.ptr
    %1 = arith.trunci %c41_i64 : i64 to i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @"as-memory.grow-size"(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c40_i32 = arith.constant 40 : i32
    llvm.store %c40_i32, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = call @dora_fn_wasm_memory_grow(%arg0, %c40_i32, %c0_i32) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%1 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
