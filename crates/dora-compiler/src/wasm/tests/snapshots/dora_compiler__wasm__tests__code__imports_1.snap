---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @print32(%arg0: !llvm.ptr, %arg1: i32) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f32 : (i32) -> !llvm.ptr
    llvm.store %cst, %1 : f32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %2[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[176] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %7[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.getelementptr %arg0[224] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %17[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.getelementptr %17[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.getelementptr %arg0[128] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.getelementptr %22[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.getelementptr %22[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.load %27 : !llvm.ptr -> i32
    %29 = llvm.getelementptr %arg0[464] : (!llvm.ptr) -> !llvm.ptr, i8
    %30 = llvm.getelementptr %arg0[472] : (!llvm.ptr) -> !llvm.ptr, i8
    %31 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %30 : !llvm.ptr -> i64
    %33 = arith.trunci %32 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %35 = "wasm.f32_convert_i32s"(%34) : (i32) -> f32
    llvm.store %35, %1 : f32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %37 = llvm.call %4(%6, %36) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %39 = "wasm.add"(%38, %c1_i32_1) : (i32, i32) -> i32
    %c1109917696_i32 = arith.constant 1109917696 : i32
    %40 = arith.bitcast %c1109917696_i32 : i32 to f32
    %41 = llvm.call %9(%11, %39, %40) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, f32) -> !llvm.void
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %43 = llvm.call %14(%16, %42) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %45 = llvm.call %19(%21, %44) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %46 = llvm.load %1 : !llvm.ptr -> f32
    %47 = llvm.call %24(%26, %46) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, f32) -> !llvm.void
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %49 = arith.cmpi ult, %c0_i32, %33 : i32
    cf.cond_br %49, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %50 = llvm.getelementptr inbounds %31[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.ptrtoint %51 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %53 = arith.cmpi eq, %52, %c0_i64 : i64
    cf.cond_br %53, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %54 = llvm.getelementptr %51[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %55 = llvm.getelementptr %51[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %56 = llvm.getelementptr %51[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %57 = llvm.load %54 : !llvm.ptr -> !llvm.ptr
    %58 = llvm.load %56 : !llvm.ptr -> !llvm.ptr
    %59 = llvm.ptrtoint %57 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %60 = arith.cmpi eq, %59, %c0_i64_2 : i64
    cf.cond_br %60, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %61 = llvm.load %55 : !llvm.ptr -> i32
    %62 = arith.cmpi ne, %28, %61 : i32
    cf.cond_br %62, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %63 = llvm.call %57(%58, %48) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func public @print64(%arg0: !llvm.ptr, %arg1: i64) attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x f64 : (i32) -> !llvm.ptr
    llvm.store %cst, %1 : f64, !llvm.ptr
    %2 = llvm.getelementptr %arg0[272] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %2[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %7[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[200] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.getelementptr %arg0[104] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %17[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.getelementptr %17[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.getelementptr %arg0[152] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.getelementptr %22[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.getelementptr %22[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.getelementptr %arg0[248] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.getelementptr %27[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.getelementptr %27[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %31 = llvm.load %30 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %33 = llvm.load %32 : !llvm.ptr -> i32
    %34 = llvm.getelementptr %arg0[464] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.getelementptr %arg0[472] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %35 : !llvm.ptr -> i64
    %38 = arith.trunci %37 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %39 = llvm.load %0 : !llvm.ptr -> i64
    %40 = llvm.call %4(%6, %39) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> i64
    %41 = "wasm.f64_convert_i64s"(%40) : (i64) -> f64
    llvm.store %41, %1 : f64, !llvm.ptr
    %42 = llvm.load %0 : !llvm.ptr -> i64
    %43 = llvm.call %9(%11, %42) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> !llvm.void
    %44 = llvm.load %1 : !llvm.ptr -> f64
    %c4607182418800017408_i64 = arith.constant 4607182418800017408 : i64
    %45 = arith.bitcast %c4607182418800017408_i64 : i64 to f64
    %46 = "wasm.add"(%44, %45) : (f64, f64) -> f64
    %c4632655904192331776_i64 = arith.constant 4632655904192331776 : i64
    %47 = arith.bitcast %c4632655904192331776_i64 : i64 to f64
    %48 = llvm.call %14(%16, %46, %47) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, f64, f64) -> !llvm.void
    %49 = llvm.load %0 : !llvm.ptr -> i64
    %50 = llvm.call %19(%21, %49) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i64) -> !llvm.void
    %51 = llvm.load %1 : !llvm.ptr -> f64
    %52 = llvm.call %24(%26, %51) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> !llvm.void
    %53 = llvm.load %1 : !llvm.ptr -> f64
    %54 = llvm.call %29(%31, %53) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> !llvm.void
    %55 = llvm.load %1 : !llvm.ptr -> f64
    %c1_i32_1 = arith.constant 1 : i32
    %56 = arith.cmpi ult, %c1_i32_1, %38 : i32
    cf.cond_br %56, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %57 = llvm.getelementptr inbounds %36[%c1_i32_1] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %58 = llvm.load %57 : !llvm.ptr -> !llvm.ptr
    %59 = llvm.ptrtoint %58 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %60 = arith.cmpi eq, %59, %c0_i64 : i64
    cf.cond_br %60, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %61 = llvm.getelementptr %58[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %62 = llvm.getelementptr %58[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %63 = llvm.getelementptr %58[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %64 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %65 = llvm.load %63 : !llvm.ptr -> !llvm.ptr
    %66 = llvm.ptrtoint %64 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %67 = arith.cmpi eq, %66, %c0_i64_2 : i64
    cf.cond_br %67, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %68 = llvm.load %62 : !llvm.ptr -> i32
    %69 = arith.cmpi ne, %33, %68 : i32
    cf.cond_br %69, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %70 = llvm.call %64(%65, %55) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, f64) -> !llvm.void
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
