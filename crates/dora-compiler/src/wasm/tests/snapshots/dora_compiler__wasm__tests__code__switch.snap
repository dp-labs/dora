---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @f0(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c100_i32 = arith.constant 100 : i32
    llvm.store %c100_i32, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_1 = arith.constant 1 : i64
    %c2_i64 = arith.constant 2 : i64
    %c3_i64 = arith.constant 3 : i64
    %c4_i64 = arith.constant 4 : i64
    %c5_i64 = arith.constant 5 : i64
    %c6_i64 = arith.constant 6 : i64
    %c7_i64 = arith.constant 7 : i64
    cf.switch %2 : i32, [
      default: ^bb4,
      0: ^bb11,
      1: ^bb10,
      2: ^bb9,
      3: ^bb8,
      4: ^bb7,
      5: ^bb6,
      6: ^bb5,
      7: ^bb3
    ]
  ^bb1(%3: i32):  // 2 preds: ^bb2, ^bb11
    return %3 : i32
  ^bb2:  // 4 preds: ^bb3, ^bb6, ^bb7, ^bb8
    %4 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb1(%4 : i32)
  ^bb3:  // 2 preds: ^bb0, ^bb4
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb0, ^bb5
    %c102_i32 = arith.constant 102 : i32
    llvm.store %c102_i32, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb0
    %c101_i32 = arith.constant 101 : i32
    llvm.store %c101_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb0
    %c101_i32_2 = arith.constant 101 : i32
    llvm.store %c101_i32_2, %1 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb7:  // pred: ^bb0
    cf.br ^bb2
  ^bb8:  // 2 preds: ^bb0, ^bb9
    %c0_i32_3 = arith.constant 0 : i32
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = "wasm.sub"(%c0_i32_3, %5) : (i32, i32) -> i32
    llvm.store %6, %1 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // 2 preds: ^bb0, ^bb10
    cf.br ^bb8
  ^bb10:  // pred: ^bb0
    cf.br ^bb9
  ^bb11:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%7 : i32)
  }
  func.func @f1(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %1 : i64, !llvm.ptr
    %c100_i64 = arith.constant 100 : i64
    llvm.store %c100_i64, %1 : i64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = "wasm.i32_wrap_i64"(%2) : (i64) -> i32
    %c0_i64_1 = arith.constant 0 : i64
    %c1_i64_2 = arith.constant 1 : i64
    %c2_i64 = arith.constant 2 : i64
    %c3_i64 = arith.constant 3 : i64
    %c4_i64 = arith.constant 4 : i64
    %c5_i64 = arith.constant 5 : i64
    %c6_i64 = arith.constant 6 : i64
    %c7_i64 = arith.constant 7 : i64
    cf.switch %3 : i32, [
      default: ^bb4,
      0: ^bb11,
      1: ^bb10,
      2: ^bb9,
      3: ^bb8,
      4: ^bb5,
      5: ^bb6,
      6: ^bb7,
      7: ^bb3
    ]
  ^bb1(%4: i64):  // 2 preds: ^bb2, ^bb11
    return %4 : i64
  ^bb2(%5: i64):  // 3 preds: ^bb3, ^bb4, ^bb8
    cf.br ^bb1(%5 : i64)
  ^bb3:  // pred: ^bb0
    %c-5_i64 = arith.constant -5 : i64
    cf.br ^bb2(%c-5_i64 : i64)
  ^bb4:  // 2 preds: ^bb0, ^bb5
    %6 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb2(%6 : i64)
  ^bb5:  // 2 preds: ^bb0, ^bb6
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb0, ^bb7
    cf.br ^bb5
  ^bb7:  // pred: ^bb0
    %c101_i64 = arith.constant 101 : i64
    llvm.store %c101_i64, %1 : i64, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb0, ^bb9
    %c0_i64_3 = arith.constant 0 : i64
    %7 = llvm.load %0 : !llvm.ptr -> i64
    %8 = "wasm.sub"(%c0_i64_3, %7) : (i64, i64) -> i64
    cf.br ^bb2(%8 : i64)
  ^bb9:  // 2 preds: ^bb0, ^bb10
    cf.br ^bb8
  ^bb10:  // pred: ^bb0
    cf.br ^bb9
  ^bb11:  // pred: ^bb0
    %9 = llvm.load %0 : !llvm.ptr -> i64
    cf.br ^bb1(%9 : i64)
  }
  func.func @f2(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c10_i32 = arith.constant 10 : i32
    %c100_i32 = arith.constant 100 : i32
    %c1000_i32 = arith.constant 1000 : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = "wasm.mul"(%c2_i32, %1) : (i32, i32) -> i32
    %c3_i32 = arith.constant 3 : i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = "wasm.and"(%c3_i32, %3) : (i32, i32) -> i32
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_0 = arith.constant 1 : i64
    %c2_i64 = arith.constant 2 : i64
    cf.switch %4 : i32, [
      default: ^bb5(%2 : i32),
      0: ^bb4(%2 : i32),
      1: ^bb3(%2 : i32),
      2: ^bb2(%2 : i32)
    ]
  ^bb1(%5: i32):  // pred: ^bb2
    return %5 : i32
  ^bb2(%6: i32):  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1(%6 : i32)
  ^bb3(%7: i32):  // 2 preds: ^bb0, ^bb4
    %8 = "wasm.add"(%c10_i32, %7) : (i32, i32) -> i32
    cf.br ^bb2(%8 : i32)
  ^bb4(%9: i32):  // 2 preds: ^bb0, ^bb5
    %10 = "wasm.add"(%c100_i32, %9) : (i32, i32) -> i32
    cf.br ^bb3(%10 : i32)
  ^bb5(%11: i32):  // pred: ^bb0
    %12 = "wasm.add"(%c1000_i32, %11) : (i32, i32) -> i32
    cf.br ^bb4(%12 : i32)
  }
  func.func @f3(%arg0: !llvm.ptr) -> i32 {
    %c0_i32 = arith.constant 0 : i32
    cf.switch %c0_i32 : i32, [
      default: ^bb2
    ]
  ^bb1(%0: i32):  // pred: ^bb2
    return %0 : i32
  ^bb2:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb1(%c1_i32 : i32)
  }
}
