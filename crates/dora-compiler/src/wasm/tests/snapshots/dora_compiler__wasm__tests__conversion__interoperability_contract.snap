---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
---
module {
  func.func @f0(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %10 = arith.andi %9, %c1_i32_1 : i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // 2 preds: ^bb3, ^bb4
    return
  ^bb3:  // pred: ^bb1
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c8_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_2 = arith.constant 0 : i64
    %18 = arith.extui %12 : i32 to i64
    %19 = arith.addi %18, %c0_i64_2 : i64
    %20 = llvm.getelementptr %4[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %17, %20 {alignment = 1 : i64} : i64, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %22 = arith.addi %21, %c24_i32 : i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %24 = arith.addi %23, %c32_i32 : i32
    %c0_i64_3 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_3 : i64
    %27 = llvm.getelementptr %4[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_4 = arith.constant 0 : i64
    %29 = arith.extui %22 : i32 to i64
    %30 = arith.addi %29, %c0_i64_4 : i64
    %31 = llvm.getelementptr %4[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %33 = arith.addi %32, %c16_i32 : i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_5 = arith.constant 24 : i32
    %35 = arith.addi %34, %c24_i32_5 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_6 : i64
    %38 = llvm.getelementptr %4[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_7 = arith.constant 0 : i64
    %40 = arith.extui %33 : i32 to i64
    %41 = arith.addi %40, %c0_i64_7 : i64
    %42 = llvm.getelementptr %4[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %42 {alignment = 1 : i64} : i64, !llvm.ptr
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %44 = arith.addi %43, %c8_i32 : i32
    %45 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_8 = arith.constant 16 : i32
    %46 = arith.addi %45, %c16_i32_8 : i32
    %c0_i64_9 = arith.constant 0 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c0_i64_9 : i64
    %49 = llvm.getelementptr %4[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    %51 = arith.extui %44 : i32 to i64
    %52 = arith.addi %51, %c0_i64_10 : i64
    %53 = llvm.getelementptr %4[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %c0_i64_12 = arith.constant 0 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c0_i64_12 : i64
    %57 = llvm.getelementptr %4[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_11, %57 {alignment = 1 : i64} : i64, !llvm.ptr
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_13 = arith.constant 24 : i32
    %59 = arith.addi %58, %c24_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %c0_i64_15 = arith.constant 0 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c0_i64_15 : i64
    %62 = llvm.getelementptr %4[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_14, %62 {alignment = 1 : i64} : i64, !llvm.ptr
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_16 = arith.constant 16 : i32
    %64 = arith.addi %63, %c16_i32_16 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %c0_i64_18 = arith.constant 0 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c0_i64_18 : i64
    %67 = llvm.getelementptr %4[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_17, %67 {alignment = 1 : i64} : i64, !llvm.ptr
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_19 = arith.constant 8 : i32
    %69 = arith.addi %68, %c8_i32_19 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %c0_i64_21 = arith.constant 0 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c0_i64_21 : i64
    %72 = llvm.getelementptr %4[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_20, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f1(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %c1_i32_8 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_7, %8 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_7, %9 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_7, %10 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_7, %11 : i32, !llvm.ptr
    %c1_i32_12 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_12 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_7, %12 : i32, !llvm.ptr
    %c1_i32_13 = arith.constant 1 : i32
    %13 = llvm.alloca %c1_i32_13 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_7, %13 : i32, !llvm.ptr
    %c1_i32_14 = arith.constant 1 : i32
    %14 = llvm.alloca %c1_i32_14 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_7, %14 : i32, !llvm.ptr
    %c1_i32_15 = arith.constant 1 : i32
    %15 = llvm.alloca %c1_i32_15 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_7, %15 : i32, !llvm.ptr
    %c0_i64_16 = arith.constant 0 : i64
    %c1_i32_17 = arith.constant 1 : i32
    %16 = llvm.alloca %c1_i32_17 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64_16, %16 : i64, !llvm.ptr
    %c0_i32_18 = arith.constant 0 : i32
    %c1_i32_19 = arith.constant 1 : i32
    %17 = llvm.alloca %c1_i32_19 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_18, %17 : i32, !llvm.ptr
    %c1_i32_20 = arith.constant 1 : i32
    %18 = llvm.alloca %c1_i32_20 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_18, %18 : i32, !llvm.ptr
    %c1_i32_21 = arith.constant 1 : i32
    %19 = llvm.alloca %c1_i32_21 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_18, %19 : i32, !llvm.ptr
    %c1_i32_22 = arith.constant 1 : i32
    %20 = llvm.alloca %c1_i32_22 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_18, %20 : i32, !llvm.ptr
    %c1_i32_23 = arith.constant 1 : i32
    %21 = llvm.alloca %c1_i32_23 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_18, %21 : i32, !llvm.ptr
    %c1_i32_24 = arith.constant 1 : i32
    %22 = llvm.alloca %c1_i32_24 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_18, %22 : i32, !llvm.ptr
    %23 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.getelementptr %25[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.load %26 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %28 = llvm.load %24 : !llvm.ptr -> i32
    %c496_i32 = arith.constant 496 : i32
    %29 = arith.subi %28, %c496_i32 : i32
    llvm.store %29, %3 : i32, !llvm.ptr
    llvm.store %29, %24 : i32, !llvm.ptr
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_25 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_25 : i32
    cf.cond_br %31, ^bb17, ^bb18
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb4, ^bb17, ^bb20
    %32 = llvm.load %1 : !llvm.ptr -> i32
    call @f103(%arg0, %32) : (!llvm.ptr, i32) -> ()
    %33 = llvm.load %1 : !llvm.ptr -> i32
    call @f104(%arg0, %33) : (!llvm.ptr, i32) -> ()
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c496_i32_26 = arith.constant 496 : i32
    %35 = arith.addi %34, %c496_i32_26 : i32
    llvm.store %35, %24 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 9 preds: ^bb5, ^bb27, ^bb39, ^bb40, ^bb42, ^bb48, ^bb49, ^bb50, ^bb61
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %37 = arith.addi %36, %c8_i32 : i32
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_27 = arith.constant 8 : i32
    %39 = arith.addi %38, %c8_i32_27 : i32
    %c8_i32_28 = arith.constant 8 : i32
    %40 = arith.addi %39, %c8_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c0_i64_29 : i64
    %43 = llvm.getelementptr %27[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %45 = arith.extui %37 : i32 to i64
    %46 = arith.addi %45, %c0_i64_30 : i64
    %47 = llvm.getelementptr %27[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i64, !llvm.ptr
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c8_i64 : i64
    %52 = llvm.getelementptr %27[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_31 = arith.constant 0 : i64
    %54 = arith.extui %48 : i32 to i64
    %55 = arith.addi %54, %c0_i64_31 : i64
    %56 = llvm.getelementptr %27[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb6, ^bb73
    %57 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %58 = arith.addi %57, %c64_i32 : i32
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %60 = arith.addi %59, %c32_i32 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64_32 : i64
    %63 = llvm.getelementptr %27[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    %65 = arith.extui %58 : i32 to i64
    %66 = arith.addi %65, %c0_i64_33 : i64
    %67 = llvm.getelementptr %27[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i64, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %69 = arith.addi %68, %c72_i32 : i32
    %70 = llvm.load %3 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %71 = arith.addi %70, %c40_i32 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c0_i64_34 : i64
    %74 = llvm.getelementptr %27[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = llvm.load volatile %74 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %76 = arith.extui %69 : i32 to i64
    %77 = arith.addi %76, %c0_i64_35 : i64
    %78 = llvm.getelementptr %27[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %75, %78 {alignment = 1 : i64} : i32, !llvm.ptr
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %80 = llvm.load %2 : !llvm.ptr -> i32
    %c52_i64 = arith.constant 52 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c52_i64 : i64
    %83 = llvm.getelementptr %27[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    %84 = llvm.load %3 : !llvm.ptr -> i32
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c24_i64 : i64
    %88 = llvm.getelementptr %27[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load volatile %88 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c56_i64 = arith.constant 56 : i64
    %90 = arith.extui %84 : i32 to i64
    %91 = arith.addi %90, %c56_i64 : i64
    %92 = llvm.getelementptr %27[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %89, %92 {alignment = 1 : i64} : i64, !llvm.ptr
    %93 = llvm.load %3 : !llvm.ptr -> i32
    %c52_i32 = arith.constant 52 : i32
    %94 = arith.addi %93, %c52_i32 : i32
    call @f44(%arg0, %94) : (!llvm.ptr, i32) -> ()
    %95 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c16_i64 = arith.constant 16 : i64
    %96 = arith.extui %95 : i32 to i64
    %97 = arith.addi %96, %c16_i64 : i64
    %98 = llvm.getelementptr %27[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %98 {alignment = 1 : i64} : i64, !llvm.ptr
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_36 = arith.constant 1 : i64
    %c8_i64_37 = arith.constant 8 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c8_i64_37 : i64
    %102 = llvm.getelementptr %27[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_36, %102 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // 3 preds: ^bb7, ^bb66, ^bb67
    %103 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_38 = arith.constant 32 : i32
    %104 = arith.addi %103, %c32_i32_38 : i32
    %105 = llvm.load %3 : !llvm.ptr -> i32
    %c388_i32 = arith.constant 388 : i32
    %106 = arith.addi %105, %c388_i32 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %107 = arith.extui %106 : i32 to i64
    %108 = arith.addi %107, %c0_i64_39 : i64
    %109 = llvm.getelementptr %27[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_40 = arith.constant 0 : i64
    %111 = arith.extui %104 : i32 to i64
    %112 = arith.addi %111, %c0_i64_40 : i64
    %113 = llvm.getelementptr %27[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %110, %113 {alignment = 1 : i64} : i64, !llvm.ptr
    %114 = llvm.load %3 : !llvm.ptr -> i32
    %c40_i32_41 = arith.constant 40 : i32
    %115 = arith.addi %114, %c40_i32_41 : i32
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %c396_i32 = arith.constant 396 : i32
    %117 = arith.addi %116, %c396_i32 : i32
    %c0_i64_42 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_42 : i64
    %120 = llvm.getelementptr %27[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_43 = arith.constant 0 : i64
    %122 = arith.extui %115 : i32 to i64
    %123 = arith.addi %122, %c0_i64_43 : i64
    %124 = llvm.getelementptr %27[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %124 {alignment = 1 : i64} : i32, !llvm.ptr
    %125 = llvm.load %3 : !llvm.ptr -> i32
    %126 = llvm.load %3 : !llvm.ptr -> i32
    %c380_i64 = arith.constant 380 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c380_i64 : i64
    %129 = llvm.getelementptr %27[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c24_i64_44 = arith.constant 24 : i64
    %131 = arith.extui %125 : i32 to i64
    %132 = arith.addi %131, %c24_i64_44 : i64
    %133 = llvm.getelementptr %27[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %133 {alignment = 1 : i64} : i64, !llvm.ptr
    %134 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i64 = arith.constant 376 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c376_i64 : i64
    %137 = llvm.getelementptr %27[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load volatile %137 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %138, %2 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb8, ^bb28
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i32 = arith.constant 376 : i32
    %140 = arith.addi %139, %c376_i32 : i32
    %c8_i32_45 = arith.constant 8 : i32
    %141 = arith.addi %140, %c8_i32_45 : i32
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %c480_i32 = arith.constant 480 : i32
    %143 = arith.addi %142, %c480_i32 : i32
    %c8_i32_46 = arith.constant 8 : i32
    %144 = arith.addi %143, %c8_i32_46 : i32
    %c0_i64_47 = arith.constant 0 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c0_i64_47 : i64
    %147 = llvm.getelementptr %27[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_48 = arith.constant 0 : i64
    %149 = arith.extui %141 : i32 to i64
    %150 = arith.addi %149, %c0_i64_48 : i64
    %151 = llvm.getelementptr %27[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %148, %151 {alignment = 1 : i64} : i32, !llvm.ptr
    %152 = llvm.load %3 : !llvm.ptr -> i32
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %c480_i64 = arith.constant 480 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c480_i64 : i64
    %156 = llvm.getelementptr %27[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load volatile %156 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c376_i64_49 = arith.constant 376 : i64
    %158 = arith.extui %152 : i32 to i64
    %159 = arith.addi %158, %c376_i64_49 : i64
    %160 = llvm.getelementptr %27[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %157, %160 {alignment = 1 : i64} : i64, !llvm.ptr
    %161 = llvm.load %3 : !llvm.ptr -> i32
    %162 = llvm.load %6 : !llvm.ptr -> i32
    %c396_i64 = arith.constant 396 : i64
    %163 = arith.extui %161 : i32 to i64
    %164 = arith.addi %163, %c396_i64 : i64
    %165 = llvm.getelementptr %27[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %162, %165 {alignment = 1 : i64} : i32, !llvm.ptr
    %166 = llvm.load %3 : !llvm.ptr -> i32
    %167 = llvm.load %4 : !llvm.ptr -> i32
    %c394_i64 = arith.constant 394 : i64
    %168 = arith.extui %166 : i32 to i64
    %169 = arith.addi %168, %c394_i64 : i64
    %170 = llvm.getelementptr %27[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = arith.trunci %167 : i32 to i16
    llvm.store volatile %171, %170 {alignment = 1 : i64} : i16, !llvm.ptr
    %172 = llvm.load %3 : !llvm.ptr -> i32
    %173 = llvm.load %17 : !llvm.ptr -> i32
    %c393_i64 = arith.constant 393 : i64
    %174 = arith.extui %172 : i32 to i64
    %175 = arith.addi %174, %c393_i64 : i64
    %176 = llvm.getelementptr %27[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %177 = arith.trunci %173 : i32 to i8
    llvm.store volatile %177, %176 {alignment = 1 : i64} : i8, !llvm.ptr
    %178 = llvm.load %3 : !llvm.ptr -> i32
    %179 = llvm.load %5 : !llvm.ptr -> i32
    %c392_i64 = arith.constant 392 : i64
    %180 = arith.extui %178 : i32 to i64
    %181 = arith.addi %180, %c392_i64 : i64
    %182 = llvm.getelementptr %27[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %183 = arith.trunci %179 : i32 to i8
    llvm.store volatile %183, %182 {alignment = 1 : i64} : i8, !llvm.ptr
    %184 = llvm.load %3 : !llvm.ptr -> i32
    %185 = llvm.load %2 : !llvm.ptr -> i32
    %c388_i64 = arith.constant 388 : i64
    %186 = arith.extui %184 : i32 to i64
    %187 = arith.addi %186, %c388_i64 : i64
    %188 = llvm.getelementptr %27[%187] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %185, %188 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb9, ^bb12, ^bb52
    %189 = llvm.load %3 : !llvm.ptr -> i32
    %190 = llvm.load %8 : !llvm.ptr -> i32
    %c488_i64 = arith.constant 488 : i64
    %191 = arith.extui %189 : i32 to i64
    %192 = arith.addi %191, %c488_i64 : i64
    %193 = llvm.getelementptr %27[%192] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %190, %193 {alignment = 1 : i64} : i32, !llvm.ptr
    %194 = llvm.load %3 : !llvm.ptr -> i32
    %195 = llvm.load %19 : !llvm.ptr -> i32
    %c484_i64 = arith.constant 484 : i64
    %196 = arith.extui %194 : i32 to i64
    %197 = arith.addi %196, %c484_i64 : i64
    %198 = llvm.getelementptr %27[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %195, %198 {alignment = 1 : i64} : i32, !llvm.ptr
    %199 = llvm.load %3 : !llvm.ptr -> i32
    %200 = llvm.load %20 : !llvm.ptr -> i32
    %c480_i64_50 = arith.constant 480 : i64
    %201 = arith.extui %199 : i32 to i64
    %202 = arith.addi %201, %c480_i64_50 : i64
    %203 = llvm.getelementptr %27[%202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %200, %203 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  ^bb9:  // 4 preds: ^bb10, ^bb30, ^bb51, ^bb59
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb11, ^bb54
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32, %20 : i32, !llvm.ptr
    %204 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_51 = arith.constant -2147483648 : i32
    %c456_i64 = arith.constant 456 : i64
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.addi %205, %c456_i64 : i64
    %207 = llvm.getelementptr %27[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_51, %207 {alignment = 1 : i64} : i32, !llvm.ptr
    %208 = llvm.load %19 : !llvm.ptr -> i32
    %c-33_i32 = arith.constant -33 : i32
    %209 = arith.cmpi ugt, %208, %c-33_i32 : i32
    %210 = arith.extui %209 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %211 = arith.cmpi ne, %210, %c0_i32_52 : i32
    cf.cond_br %211, ^bb9, ^bb59
  ^bb11:  // pred: ^bb55
    %212 = llvm.load %22 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %213 = arith.extui %212 : i32 to i64
    %214 = arith.addi %213, %c28_i64 : i64
    %215 = llvm.getelementptr %27[%214] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %216 = llvm.load volatile %215 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %216, %2 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %c31_i32 = arith.constant 31 : i32
    %217 = arith.cmpi ule, %c24_i32, %c31_i32 : i32
    %218 = scf.if %217 -> (i32) {
      %1661 = arith.shli %216, %c24_i32 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %219 = llvm.load %2 : !llvm.ptr -> i32
    %c65280_i32 = arith.constant 65280 : i32
    %220 = arith.andi %219, %c65280_i32 : i32
    %c8_i32_53 = arith.constant 8 : i32
    %c31_i32_54 = arith.constant 31 : i32
    %221 = arith.cmpi ule, %c8_i32_53, %c31_i32_54 : i32
    %222 = scf.if %221 -> (i32) {
      %1661 = arith.shli %220, %c8_i32_53 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %223 = arith.ori %218, %222 : i32
    %224 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_55 = arith.constant 8 : i32
    %c31_i32_56 = arith.constant 31 : i32
    %225 = arith.cmpi ule, %c8_i32_55, %c31_i32_56 : i32
    %226 = scf.if %225 -> (i32) {
      %1661 = arith.shrui %224, %c8_i32_55 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %c65280_i32_57 = arith.constant 65280 : i32
    %227 = arith.andi %226, %c65280_i32_57 : i32
    %228 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_58 = arith.constant 24 : i32
    %c31_i32_59 = arith.constant 31 : i32
    %229 = arith.cmpi ule, %c24_i32_58, %c31_i32_59 : i32
    %230 = scf.if %229 -> (i32) {
      %1661 = arith.shrui %228, %c24_i32_58 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %231 = arith.ori %227, %230 : i32
    %232 = arith.ori %223, %231 : i32
    llvm.store %232, %19 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb37, ^bb58
    %233 = llvm.load %3 : !llvm.ptr -> i32
    %c452_i64 = arith.constant 452 : i64
    %234 = arith.extui %233 : i32 to i64
    %235 = arith.addi %234, %c452_i64 : i64
    %236 = llvm.getelementptr %27[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %237 = llvm.load volatile %236 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %237, %6 : i32, !llvm.ptr
    %238 = llvm.load %3 : !llvm.ptr -> i32
    %c450_i64 = arith.constant 450 : i64
    %239 = arith.extui %238 : i32 to i64
    %240 = arith.addi %239, %c450_i64 : i64
    %241 = llvm.getelementptr %27[%240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %242 = llvm.load volatile %241 {alignment = 1 : i64} : !llvm.ptr -> i16
    %243 = arith.extui %242 : i16 to i32
    llvm.store %243, %4 : i32, !llvm.ptr
    %244 = llvm.load %3 : !llvm.ptr -> i32
    %c449_i64 = arith.constant 449 : i64
    %245 = arith.extui %244 : i32 to i64
    %246 = arith.addi %245, %c449_i64 : i64
    %247 = llvm.getelementptr %27[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %248 = llvm.load volatile %247 {alignment = 1 : i64} : !llvm.ptr -> i8
    %249 = arith.extui %248 : i8 to i32
    llvm.store %249, %17 : i32, !llvm.ptr
    %250 = llvm.load %3 : !llvm.ptr -> i32
    %c448_i64 = arith.constant 448 : i64
    %251 = arith.extui %250 : i32 to i64
    %252 = arith.addi %251, %c448_i64 : i64
    %253 = llvm.getelementptr %27[%252] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %254 = llvm.load volatile %253 {alignment = 1 : i64} : !llvm.ptr -> i8
    %255 = arith.extui %254 : i8 to i32
    llvm.store %255, %5 : i32, !llvm.ptr
    %256 = llvm.load %3 : !llvm.ptr -> i32
    %c444_i64 = arith.constant 444 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c444_i64 : i64
    %259 = llvm.getelementptr %27[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %260, %2 : i32, !llvm.ptr
    %261 = llvm.load %3 : !llvm.ptr -> i32
    %c440_i64 = arith.constant 440 : i64
    %262 = arith.extui %261 : i32 to i64
    %263 = arith.addi %262, %c440_i64 : i64
    %264 = llvm.getelementptr %27[%263] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %265 = llvm.load volatile %264 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %265, %8 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb13:  // 2 preds: ^bb16, ^bb36
    %266 = llvm.load %4 : !llvm.ptr -> i32
    %267 = llvm.load %2 : !llvm.ptr -> i32
    %268 = arith.cmpi uge, %266, %267 : i32
    %269 = arith.extui %268 : i1 to i32
    %c0_i32_60 = arith.constant 0 : i32
    %270 = arith.cmpi ne, %269, %c0_i32_60 : i32
    cf.cond_br %270, ^bb51, ^bb52
  ^bb14:  // pred: ^bb45
    %271 = llvm.load %17 : !llvm.ptr -> i32
    %272 = llvm.load %3 : !llvm.ptr -> i32
    %c136_i64 = arith.constant 136 : i64
    %273 = arith.extui %272 : i32 to i64
    %274 = arith.addi %273, %c136_i64 : i64
    %275 = llvm.getelementptr %27[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %276 = llvm.load volatile %275 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %271, %276) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb15:  // pred: ^bb44
    %277 = llvm.load %5 : !llvm.ptr -> i32
    %278 = llvm.load %3 : !llvm.ptr -> i32
    %c136_i64_61 = arith.constant 136 : i64
    %279 = arith.extui %278 : i32 to i64
    %280 = arith.addi %279, %c136_i64_61 : i64
    %281 = llvm.getelementptr %27[%280] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %282 = llvm.load volatile %281 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %277, %282) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_62 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_62) : (i32) -> ()
    llvm.unreachable
  ^bb16:  // pred: ^bb33
    %283 = llvm.load %5 : !llvm.ptr -> i32
    %c64_i64 = arith.constant 64 : i64
    %284 = arith.extui %283 : i32 to i64
    %285 = arith.addi %284, %c64_i64 : i64
    %286 = llvm.getelementptr %27[%285] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %287 = llvm.load volatile %286 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %287, %2 : i32, !llvm.ptr
    %c24_i32_63 = arith.constant 24 : i32
    %c31_i32_64 = arith.constant 31 : i32
    %288 = arith.cmpi ule, %c24_i32_63, %c31_i32_64 : i32
    %289 = scf.if %288 -> (i32) {
      %1661 = arith.shli %287, %c24_i32_63 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %290 = llvm.load %2 : !llvm.ptr -> i32
    %c65280_i32_65 = arith.constant 65280 : i32
    %291 = arith.andi %290, %c65280_i32_65 : i32
    %c8_i32_66 = arith.constant 8 : i32
    %c31_i32_67 = arith.constant 31 : i32
    %292 = arith.cmpi ule, %c8_i32_66, %c31_i32_67 : i32
    %293 = scf.if %292 -> (i32) {
      %1661 = arith.shli %291, %c8_i32_66 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %294 = arith.ori %289, %293 : i32
    %295 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_68 = arith.constant 8 : i32
    %c31_i32_69 = arith.constant 31 : i32
    %296 = arith.cmpi ule, %c8_i32_68, %c31_i32_69 : i32
    %297 = scf.if %296 -> (i32) {
      %1661 = arith.shrui %295, %c8_i32_68 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %c65280_i32_70 = arith.constant 65280 : i32
    %298 = arith.andi %297, %c65280_i32_70 : i32
    %299 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_71 = arith.constant 24 : i32
    %c31_i32_72 = arith.constant 31 : i32
    %300 = arith.cmpi ule, %c24_i32_71, %c31_i32_72 : i32
    %301 = scf.if %300 -> (i32) {
      %1661 = arith.shrui %299, %c24_i32_71 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %302 = arith.ori %298, %301 : i32
    %303 = arith.ori %294, %302 : i32
    llvm.store %303, %2 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb17:  // 2 preds: ^bb1, ^bb24
    %304 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c8_i64_73 = arith.constant 8 : i64
    %305 = arith.extui %304 : i32 to i64
    %306 = arith.addi %305, %c8_i64_73 : i64
    %307 = llvm.getelementptr %27[%306] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %307 {alignment = 1 : i64} : i32, !llvm.ptr
    %308 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_74 = arith.constant 8 : i32
    %309 = arith.addi %308, %c8_i32_74 : i32
    call @f2(%arg0, %309) : (!llvm.ptr, i32) -> ()
    %310 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_75 = arith.constant 2 : i32
    %c128_i64 = arith.constant 128 : i64
    %311 = arith.extui %310 : i32 to i64
    %312 = arith.addi %311, %c128_i64 : i64
    %313 = llvm.getelementptr %27[%312] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_75, %313 {alignment = 1 : i64} : i32, !llvm.ptr
    %314 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %315 = arith.addi %314, %c128_i32 : i32
    call @f2(%arg0, %315) : (!llvm.ptr, i32) -> ()
    %316 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_76 = arith.constant 1 : i64
    %c8_i64_77 = arith.constant 8 : i64
    %317 = arith.extui %316 : i32 to i64
    %318 = arith.addi %317, %c8_i64_77 : i64
    %319 = llvm.getelementptr %27[%318] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_76, %319 {alignment = 1 : i64} : i64, !llvm.ptr
    %320 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_78 = arith.constant 1 : i64
    %c0_i64_79 = arith.constant 0 : i64
    %321 = arith.extui %320 : i32 to i64
    %322 = arith.addi %321, %c0_i64_79 : i64
    %323 = llvm.getelementptr %27[%322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_78, %323 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb18:  // pred: ^bb1
    %324 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_80 = arith.constant 8 : i64
    %325 = arith.extui %324 : i32 to i64
    %326 = arith.addi %325, %c8_i64_80 : i64
    %327 = llvm.getelementptr %27[%326] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %328 = llvm.load volatile %327 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %328, %2 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %329 = arith.cmpi ugt, %328, %c3_i32 : i32
    %330 = arith.extui %329 : i1 to i32
    %c0_i32_81 = arith.constant 0 : i32
    %331 = arith.cmpi ne, %330, %c0_i32_81 : i32
    cf.cond_br %331, ^bb19, ^bb20
  ^bb19:  // pred: ^bb18
    %332 = llvm.load %2 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %333 = arith.addi %332, %c-4_i32 : i32
    llvm.store %333, %4 : i32, !llvm.ptr
    %334 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %335 = arith.extui %334 : i32 to i64
    %336 = arith.addi %335, %c4_i64 : i64
    %337 = llvm.getelementptr %27[%336] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %338 = llvm.load volatile %337 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %338, %5 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %339 = arith.addi %338, %c4_i32 : i32
    llvm.store %339, %6 : i32, !llvm.ptr
    %340 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_82 = arith.constant 0 : i64
    %341 = arith.extui %340 : i32 to i64
    %342 = arith.addi %341, %c0_i64_82 : i64
    %343 = llvm.getelementptr %27[%342] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %344 = llvm.load volatile %343 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %344, %2 : i32, !llvm.ptr
    %c24_i32_83 = arith.constant 24 : i32
    %c31_i32_84 = arith.constant 31 : i32
    %345 = arith.cmpi ule, %c24_i32_83, %c31_i32_84 : i32
    %346 = scf.if %345 -> (i32) {
      %1661 = arith.shli %344, %c24_i32_83 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %347 = llvm.load %2 : !llvm.ptr -> i32
    %c65280_i32_85 = arith.constant 65280 : i32
    %348 = arith.andi %347, %c65280_i32_85 : i32
    %c8_i32_86 = arith.constant 8 : i32
    %c31_i32_87 = arith.constant 31 : i32
    %349 = arith.cmpi ule, %c8_i32_86, %c31_i32_87 : i32
    %350 = scf.if %349 -> (i32) {
      %1661 = arith.shli %348, %c8_i32_86 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %351 = arith.ori %346, %350 : i32
    %352 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_88 = arith.constant 8 : i32
    %c31_i32_89 = arith.constant 31 : i32
    %353 = arith.cmpi ule, %c8_i32_88, %c31_i32_89 : i32
    %354 = scf.if %353 -> (i32) {
      %1661 = arith.shrui %352, %c8_i32_88 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %c65280_i32_90 = arith.constant 65280 : i32
    %355 = arith.andi %354, %c65280_i32_90 : i32
    %356 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_91 = arith.constant 24 : i32
    %c31_i32_92 = arith.constant 31 : i32
    %357 = arith.cmpi ule, %c24_i32_91, %c31_i32_92 : i32
    %358 = scf.if %357 -> (i32) {
      %1661 = arith.shrui %356, %c24_i32_91 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %359 = arith.ori %355, %358 : i32
    %360 = arith.ori %351, %359 : i32
    llvm.store %360, %2 : i32, !llvm.ptr
    %c-373586750_i32 = arith.constant -373586750 : i32
    %361 = arith.cmpi eq, %360, %c-373586750_i32 : i32
    %362 = arith.extui %361 : i1 to i32
    %c0_i32_93 = arith.constant 0 : i32
    %363 = arith.cmpi ne, %362, %c0_i32_93 : i32
    cf.cond_br %363, ^bb22, ^bb23
  ^bb20:  // pred: ^bb18
    %364 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_94 = arith.constant 2 : i32
    %c128_i64_95 = arith.constant 128 : i64
    %365 = arith.extui %364 : i32 to i64
    %366 = arith.addi %365, %c128_i64_95 : i64
    %367 = llvm.getelementptr %27[%366] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_94, %367 {alignment = 1 : i64} : i32, !llvm.ptr
    %368 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_96 = arith.constant 128 : i32
    %369 = arith.addi %368, %c128_i32_96 : i32
    call @f2(%arg0, %369) : (!llvm.ptr, i32) -> ()
    %370 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_97 = arith.constant 1 : i64
    %c8_i64_98 = arith.constant 8 : i64
    %371 = arith.extui %370 : i32 to i64
    %372 = arith.addi %371, %c8_i64_98 : i64
    %373 = llvm.getelementptr %27[%372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_97, %373 {alignment = 1 : i64} : i64, !llvm.ptr
    %374 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_99 = arith.constant 1 : i64
    %c0_i64_100 = arith.constant 0 : i64
    %375 = arith.extui %374 : i32 to i64
    %376 = arith.addi %375, %c0_i64_100 : i64
    %377 = llvm.getelementptr %27[%376] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_99, %377 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb21:  // pred: ^bb23
    %378 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_101 = arith.constant 128 : i32
    %379 = arith.addi %378, %c128_i32_101 : i32
    %380 = llvm.load %3 : !llvm.ptr -> i32
    %c495_i32 = arith.constant 495 : i32
    %381 = arith.addi %380, %c495_i32 : i32
    call @f54(%arg0, %379, %381) : (!llvm.ptr, i32, i32) -> ()
    %382 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_102 = arith.constant 128 : i32
    %383 = arith.addi %382, %c128_i32_102 : i32
    %c1048680_i32 = arith.constant 1048680 : i32
    %384 = call @f89(%arg0, %383, %c1048680_i32) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_103 = arith.constant 0 : i32
    %385 = arith.cmpi ne, %384, %c0_i32_103 : i32
    cf.cond_br %385, ^bb47, ^bb48
  ^bb22:  // pred: ^bb19
    %386 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_104 = arith.constant 128 : i32
    %387 = arith.addi %386, %c128_i32_104 : i32
    %388 = llvm.load %3 : !llvm.ptr -> i32
    %c495_i32_105 = arith.constant 495 : i32
    %389 = arith.addi %388, %c495_i32_105 : i32
    call @f54(%arg0, %387, %389) : (!llvm.ptr, i32, i32) -> ()
    %390 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_106 = arith.constant 128 : i32
    %391 = arith.addi %390, %c128_i32_106 : i32
    %c1048680_i32_107 = arith.constant 1048680 : i32
    %392 = call @f89(%arg0, %391, %c1048680_i32_107) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_108 = arith.constant 0 : i32
    %393 = arith.cmpi ne, %392, %c0_i32_108 : i32
    cf.cond_br %393, ^bb38, ^bb39
  ^bb23:  // pred: ^bb19
    %394 = llvm.load %2 : !llvm.ptr -> i32
    %c47443244_i32 = arith.constant 47443244 : i32
    %395 = arith.cmpi eq, %394, %c47443244_i32 : i32
    %396 = arith.extui %395 : i1 to i32
    %c0_i32_109 = arith.constant 0 : i32
    %397 = arith.cmpi ne, %396, %c0_i32_109 : i32
    cf.cond_br %397, ^bb21, ^bb24
  ^bb24:  // pred: ^bb23
    %398 = llvm.load %2 : !llvm.ptr -> i32
    %c486504909_i32 = arith.constant 486504909 : i32
    %399 = arith.cmpi eq, %398, %c486504909_i32 : i32
    %400 = arith.extui %399 : i1 to i32
    %c0_i32_110 = arith.constant 0 : i32
    %401 = arith.cmpi eq, %400, %c0_i32_110 : i32
    %402 = arith.extui %401 : i1 to i32
    %c0_i32_111 = arith.constant 0 : i32
    %403 = arith.cmpi ne, %402, %c0_i32_111 : i32
    cf.cond_br %403, ^bb17, ^bb25
  ^bb25:  // pred: ^bb24
    %404 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_112 = arith.constant 128 : i32
    %405 = arith.addi %404, %c128_i32_112 : i32
    %406 = llvm.load %3 : !llvm.ptr -> i32
    %c495_i32_113 = arith.constant 495 : i32
    %407 = arith.addi %406, %c495_i32_113 : i32
    call @f54(%arg0, %405, %407) : (!llvm.ptr, i32, i32) -> ()
    %408 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_114 = arith.constant 128 : i32
    %409 = arith.addi %408, %c128_i32_114 : i32
    %c1048680_i32_115 = arith.constant 1048680 : i32
    %410 = call @f89(%arg0, %409, %c1048680_i32_115) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_116 = arith.constant 0 : i32
    %411 = arith.cmpi ne, %410, %c0_i32_116 : i32
    cf.cond_br %411, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %412 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_117 = arith.constant -2147483648 : i32
    %c376_i64_118 = arith.constant 376 : i64
    %413 = arith.extui %412 : i32 to i64
    %414 = arith.addi %413, %c376_i64_118 : i64
    %415 = llvm.getelementptr %27[%414] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_117, %415 {alignment = 1 : i64} : i32, !llvm.ptr
    %416 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i32_119 = arith.constant 376 : i32
    %417 = arith.addi %416, %c376_i32_119 : i32
    call @f3(%arg0, %417) : (!llvm.ptr, i32) -> ()
    %418 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_120 = arith.constant -2147483648 : i32
    %c456_i64_121 = arith.constant 456 : i64
    %419 = arith.extui %418 : i32 to i64
    %420 = arith.addi %419, %c456_i64_121 : i64
    %421 = llvm.getelementptr %27[%420] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_120, %421 {alignment = 1 : i64} : i32, !llvm.ptr
    %422 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_122 = arith.constant 32 : i32
    %423 = arith.cmpi ult, %422, %c32_i32_122 : i32
    %424 = arith.extui %423 : i1 to i32
    %c0_i32_123 = arith.constant 0 : i32
    %425 = arith.cmpi ne, %424, %c0_i32_123 : i32
    cf.cond_br %425, ^bb28, ^bb29
  ^bb27:  // pred: ^bb25
    %426 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %427 = arith.addi %426, %c20_i32 : i32
    %c0_i32_124 = arith.constant 0 : i32
    %c0_i64_125 = arith.constant 0 : i64
    %428 = arith.extui %427 : i32 to i64
    %429 = arith.addi %428, %c0_i64_125 : i64
    %430 = llvm.getelementptr %27[%429] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_124, %430 {alignment = 1 : i64} : i32, !llvm.ptr
    %431 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c12_i64 = arith.constant 12 : i64
    %432 = arith.extui %431 : i32 to i64
    %433 = arith.addi %432, %c12_i64 : i64
    %434 = llvm.getelementptr %27[%433] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %434 {alignment = 1 : i64} : i64, !llvm.ptr
    %435 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_126 = arith.constant 1 : i32
    %c8_i64_127 = arith.constant 8 : i64
    %436 = arith.extui %435 : i32 to i64
    %437 = arith.addi %436, %c8_i64_127 : i64
    %438 = llvm.getelementptr %27[%437] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_126, %438 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb28:  // pred: ^bb26
    %439 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_128 = arith.constant -2147483648 : i32
    %c480_i64_129 = arith.constant 480 : i64
    %440 = arith.extui %439 : i32 to i64
    %441 = arith.addi %440, %c480_i64_129 : i64
    %442 = llvm.getelementptr %27[%441] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_128, %442 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  ^bb29:  // pred: ^bb26
    %443 = llvm.load %3 : !llvm.ptr -> i32
    %c456_i32 = arith.constant 456 : i32
    %444 = arith.addi %443, %c456_i32 : i32
    call @f4(%arg0, %444) : (!llvm.ptr, i32) -> ()
    %445 = llvm.load %5 : !llvm.ptr -> i32
    %c35_i32 = arith.constant 35 : i32
    %446 = arith.addi %445, %c35_i32 : i32
    %c0_i64_130 = arith.constant 0 : i64
    %447 = arith.extui %446 : i32 to i64
    %448 = arith.addi %447, %c0_i64_130 : i64
    %449 = llvm.getelementptr %27[%448] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %450 = llvm.load volatile %449 {alignment = 1 : i64} : !llvm.ptr -> i8
    %451 = arith.extui %450 : i8 to i64
    llvm.store %451, %7 : i64, !llvm.ptr
    %452 = llvm.load %5 : !llvm.ptr -> i32
    %c30_i32 = arith.constant 30 : i32
    %453 = arith.addi %452, %c30_i32 : i32
    %c0_i64_131 = arith.constant 0 : i64
    %454 = arith.extui %453 : i32 to i64
    %455 = arith.addi %454, %c0_i64_131 : i64
    %456 = llvm.getelementptr %27[%455] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %457 = llvm.load volatile %456 {alignment = 1 : i64} : !llvm.ptr -> i8
    %458 = arith.extui %457 : i8 to i32
    llvm.store %458, %2 : i32, !llvm.ptr
    %459 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64_132 = arith.constant 24 : i64
    %460 = arith.extui %459 : i32 to i64
    %461 = arith.addi %460, %c24_i64_132 : i64
    %462 = llvm.getelementptr %27[%461] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %463 = llvm.load volatile %462 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %463, %8 : i32, !llvm.ptr
    %464 = llvm.load %5 : !llvm.ptr -> i32
    %c22_i64 = arith.constant 22 : i64
    %465 = arith.extui %464 : i32 to i64
    %466 = arith.addi %465, %c22_i64 : i64
    %467 = llvm.getelementptr %27[%466] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %468 = llvm.load volatile %467 {alignment = 1 : i64} : !llvm.ptr -> i16
    %469 = arith.extui %468 : i16 to i32
    llvm.store %469, %9 : i32, !llvm.ptr
    %470 = llvm.load %5 : !llvm.ptr -> i32
    %c21_i64 = arith.constant 21 : i64
    %471 = arith.extui %470 : i32 to i64
    %472 = arith.addi %471, %c21_i64 : i64
    %473 = llvm.getelementptr %27[%472] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %474 = llvm.load volatile %473 {alignment = 1 : i64} : !llvm.ptr -> i8
    %475 = arith.extui %474 : i8 to i32
    llvm.store %475, %10 : i32, !llvm.ptr
    %476 = llvm.load %5 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %477 = arith.extui %476 : i32 to i64
    %478 = arith.addi %477, %c20_i64 : i64
    %479 = llvm.getelementptr %27[%478] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %480 = llvm.load volatile %479 {alignment = 1 : i64} : !llvm.ptr -> i8
    %481 = arith.extui %480 : i8 to i32
    llvm.store %481, %11 : i32, !llvm.ptr
    %482 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i64_133 = arith.constant 16 : i64
    %483 = arith.extui %482 : i32 to i64
    %484 = arith.addi %483, %c16_i64_133 : i64
    %485 = llvm.getelementptr %27[%484] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %486 = llvm.load volatile %485 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %486, %12 : i32, !llvm.ptr
    %487 = llvm.load %5 : !llvm.ptr -> i32
    %c15_i64 = arith.constant 15 : i64
    %488 = arith.extui %487 : i32 to i64
    %489 = arith.addi %488, %c15_i64 : i64
    %490 = llvm.getelementptr %27[%489] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %491 = llvm.load volatile %490 {alignment = 1 : i64} : !llvm.ptr -> i8
    %492 = arith.extui %491 : i8 to i32
    llvm.store %492, %13 : i32, !llvm.ptr
    %493 = llvm.load %5 : !llvm.ptr -> i32
    %c11_i64 = arith.constant 11 : i64
    %494 = arith.extui %493 : i32 to i64
    %495 = arith.addi %494, %c11_i64 : i64
    %496 = llvm.getelementptr %27[%495] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %497 = llvm.load volatile %496 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %497, %14 : i32, !llvm.ptr
    %498 = llvm.load %5 : !llvm.ptr -> i32
    %c7_i64 = arith.constant 7 : i64
    %499 = arith.extui %498 : i32 to i64
    %500 = arith.addi %499, %c7_i64 : i64
    %501 = llvm.getelementptr %27[%500] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %502 = llvm.load volatile %501 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %502, %15 : i32, !llvm.ptr
    %503 = llvm.load %5 : !llvm.ptr -> i32
    %c31_i64 = arith.constant 31 : i64
    %504 = arith.extui %503 : i32 to i64
    %505 = arith.addi %504, %c31_i64 : i64
    %506 = llvm.getelementptr %27[%505] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %507 = llvm.load volatile %506 {alignment = 1 : i64} : !llvm.ptr -> i32
    %508 = arith.extui %507 : i32 to i64
    llvm.store %508, %16 : i64, !llvm.ptr
    %509 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64_134 = arith.constant 28 : i64
    %510 = arith.extui %509 : i32 to i64
    %511 = arith.addi %510, %c28_i64_134 : i64
    %512 = llvm.getelementptr %27[%511] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %513 = llvm.load volatile %512 {alignment = 1 : i64} : !llvm.ptr -> i16
    %514 = arith.extui %513 : i16 to i32
    llvm.store %514, %17 : i32, !llvm.ptr
    %515 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_135 = arith.constant -2147483648 : i32
    %c456_i64_136 = arith.constant 456 : i64
    %516 = arith.extui %515 : i32 to i64
    %517 = arith.addi %516, %c456_i64_136 : i64
    %518 = llvm.getelementptr %27[%517] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_135, %518 {alignment = 1 : i64} : i32, !llvm.ptr
    %519 = llvm.load %4 : !llvm.ptr -> i32
    %c64_i32_137 = arith.constant 64 : i32
    %520 = arith.cmpi ult, %519, %c64_i32_137 : i32
    %521 = arith.extui %520 : i1 to i32
    %c0_i32_138 = arith.constant 0 : i32
    %522 = arith.cmpi ne, %521, %c0_i32_138 : i32
    cf.cond_br %522, ^bb30, ^bb31
  ^bb30:  // pred: ^bb29
    %c-2147483648_i32_139 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32_139, %20 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb31:  // pred: ^bb29
    %523 = llvm.load %17 : !llvm.ptr -> i32
    %524 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32_140 = arith.constant 31 : i32
    %525 = arith.cmpi ule, %c16_i32, %c31_i32_140 : i32
    %526 = scf.if %525 -> (i32) {
      %1661 = arith.shli %524, %c16_i32 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %527 = arith.ori %523, %526 : i32
    llvm.store %527, %18 : i32, !llvm.ptr
    %528 = llvm.load %16 : !llvm.ptr -> i64
    %529 = llvm.load %7 : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %530 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %531 = scf.if %530 -> (i64) {
      %1661 = arith.shli %529, %c32_i64 : i64
      scf.yield %1661 : i64
    } else {
      %c0_i64_508 = arith.constant 0 : i64
      scf.yield %c0_i64_508 : i64
    }
    %532 = arith.ori %528, %531 : i64
    llvm.store %532, %7 : i64, !llvm.ptr
    %533 = llvm.load %5 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %534 = arith.addi %533, %c36_i32 : i32
    llvm.store %534, %19 : i32, !llvm.ptr
    %535 = llvm.load %3 : !llvm.ptr -> i32
    %c456_i32_141 = arith.constant 456 : i32
    %536 = arith.addi %535, %c456_i32_141 : i32
    call @f4(%arg0, %536) : (!llvm.ptr, i32) -> ()
    %c0_i32_142 = arith.constant 0 : i32
    llvm.store %c0_i32_142, %2 : i32, !llvm.ptr
    cf.br ^bb33
  ^bb32:  // pred: ^bb35
    %537 = llvm.load %3 : !llvm.ptr -> i32
    %c432_i32 = arith.constant 432 : i32
    %538 = arith.addi %537, %c432_i32 : i32
    %539 = llvm.load %19 : !llvm.ptr -> i32
    %c32_i32_143 = arith.constant 32 : i32
    %c1048826_i32 = arith.constant 1048826 : i32
    %c14_i32 = arith.constant 14 : i32
    call @f81(%arg0, %538, %539, %c32_i32_143, %c1048826_i32, %c14_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %540 = llvm.load %3 : !llvm.ptr -> i32
    %c432_i64 = arith.constant 432 : i64
    %541 = arith.extui %540 : i32 to i64
    %542 = arith.addi %541, %c432_i64 : i64
    %543 = llvm.getelementptr %27[%542] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %544 = llvm.load volatile %543 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %544, %20 : i32, !llvm.ptr
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %545 = arith.cmpi eq, %544, %c-2147483638_i32 : i32
    %546 = arith.extui %545 : i1 to i32
    %c0_i32_144 = arith.constant 0 : i32
    %547 = arith.cmpi ne, %546, %c0_i32_144 : i32
    cf.cond_br %547, ^bb36, ^bb37
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %548 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %549 = arith.cmpi eq, %548, %c28_i32 : i32
    %550 = arith.extui %549 : i1 to i32
    %c0_i32_145 = arith.constant 0 : i32
    %551 = arith.cmpi ne, %550, %c0_i32_145 : i32
    cf.cond_br %551, ^bb16, ^bb34
  ^bb34:  // pred: ^bb33
    %552 = llvm.load %19 : !llvm.ptr -> i32
    %553 = llvm.load %2 : !llvm.ptr -> i32
    %554 = arith.addi %552, %553 : i32
    llvm.store %554, %17 : i32, !llvm.ptr
    %555 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_146 = arith.constant 1 : i32
    %556 = arith.addi %555, %c1_i32_146 : i32
    llvm.store %556, %2 : i32, !llvm.ptr
    %557 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i64_147 = arith.constant 0 : i64
    %558 = arith.extui %557 : i32 to i64
    %559 = arith.addi %558, %c0_i64_147 : i64
    %560 = llvm.getelementptr %27[%559] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %561 = llvm.load volatile %560 {alignment = 1 : i64} : !llvm.ptr -> i8
    %562 = arith.extui %561 : i8 to i32
    %c0_i32_148 = arith.constant 0 : i32
    %563 = arith.cmpi eq, %562, %c0_i32_148 : i32
    %564 = arith.extui %563 : i1 to i32
    %c0_i32_149 = arith.constant 0 : i32
    %565 = arith.cmpi ne, %564, %c0_i32_149 : i32
    cf.cond_br %565, ^bb33, ^bb35
  ^bb35:  // pred: ^bb34
    cf.br ^bb32
  ^bb36:  // pred: ^bb32
    %566 = llvm.load %3 : !llvm.ptr -> i32
    %c436_i64 = arith.constant 436 : i64
    %567 = arith.extui %566 : i32 to i64
    %568 = arith.addi %567, %c436_i64 : i64
    %569 = llvm.getelementptr %27[%568] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %570 = llvm.load volatile %569 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %570, %2 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb37:  // pred: ^bb32
    %571 = llvm.load %3 : !llvm.ptr -> i32
    %c436_i64_150 = arith.constant 436 : i64
    %572 = arith.extui %571 : i32 to i64
    %573 = arith.addi %572, %c436_i64_150 : i64
    %574 = llvm.getelementptr %27[%573] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %575 = llvm.load volatile %574 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %575, %19 : i32, !llvm.ptr
    cf.br ^bb12
  ^bb38:  // pred: ^bb22
    %576 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_151 = arith.constant -2147483648 : i32
    %c376_i64_152 = arith.constant 376 : i64
    %577 = arith.extui %576 : i32 to i64
    %578 = arith.addi %577, %c376_i64_152 : i64
    %579 = llvm.getelementptr %27[%578] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_151, %579 {alignment = 1 : i64} : i32, !llvm.ptr
    %580 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i32_153 = arith.constant 376 : i32
    %581 = arith.addi %580, %c376_i32_153 : i32
    call @f3(%arg0, %581) : (!llvm.ptr, i32) -> ()
    %582 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_154 = arith.constant 128 : i32
    %583 = arith.addi %582, %c128_i32_154 : i32
    %584 = llvm.load %6 : !llvm.ptr -> i32
    %585 = llvm.load %4 : !llvm.ptr -> i32
    call @f5(%arg0, %583, %584, %585) : (!llvm.ptr, i32, i32, i32) -> ()
    %586 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i64_155 = arith.constant 128 : i64
    %587 = arith.extui %586 : i32 to i64
    %588 = arith.addi %587, %c128_i64_155 : i64
    %589 = llvm.getelementptr %27[%588] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %590 = llvm.load volatile %589 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_156 = arith.constant 0 : i32
    %591 = arith.cmpi ne, %590, %c0_i32_156 : i32
    cf.cond_br %591, ^bb40, ^bb41
  ^bb39:  // pred: ^bb22
    %592 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32_157 = arith.constant 20 : i32
    %593 = arith.addi %592, %c20_i32_157 : i32
    %c0_i32_158 = arith.constant 0 : i32
    %c0_i64_159 = arith.constant 0 : i64
    %594 = arith.extui %593 : i32 to i64
    %595 = arith.addi %594, %c0_i64_159 : i64
    %596 = llvm.getelementptr %27[%595] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_158, %596 {alignment = 1 : i64} : i32, !llvm.ptr
    %597 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_160 = arith.constant 4294967296 : i64
    %c12_i64_161 = arith.constant 12 : i64
    %598 = arith.extui %597 : i32 to i64
    %599 = arith.addi %598, %c12_i64_161 : i64
    %600 = llvm.getelementptr %27[%599] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_160, %600 {alignment = 1 : i64} : i64, !llvm.ptr
    %601 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_162 = arith.constant 1 : i32
    %c8_i64_163 = arith.constant 8 : i64
    %602 = arith.extui %601 : i32 to i64
    %603 = arith.addi %602, %c8_i64_163 : i64
    %604 = llvm.getelementptr %27[%603] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_162, %604 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb40:  // pred: ^bb38
    %605 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32 = arith.constant 104 : i32
    %606 = arith.addi %605, %c104_i32 : i32
    %607 = llvm.load %3 : !llvm.ptr -> i32
    %c148_i32 = arith.constant 148 : i32
    %608 = arith.addi %607, %c148_i32 : i32
    %c0_i64_164 = arith.constant 0 : i64
    %609 = arith.extui %608 : i32 to i64
    %610 = arith.addi %609, %c0_i64_164 : i64
    %611 = llvm.getelementptr %27[%610] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %612 = llvm.load volatile %611 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_165 = arith.constant 0 : i64
    %613 = arith.extui %606 : i32 to i64
    %614 = arith.addi %613, %c0_i64_165 : i64
    %615 = llvm.getelementptr %27[%614] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %612, %615 {alignment = 1 : i64} : i64, !llvm.ptr
    %616 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %617 = arith.addi %616, %c96_i32 : i32
    %618 = llvm.load %3 : !llvm.ptr -> i32
    %c140_i32 = arith.constant 140 : i32
    %619 = arith.addi %618, %c140_i32 : i32
    %c0_i64_166 = arith.constant 0 : i64
    %620 = arith.extui %619 : i32 to i64
    %621 = arith.addi %620, %c0_i64_166 : i64
    %622 = llvm.getelementptr %27[%621] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %623 = llvm.load volatile %622 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_167 = arith.constant 0 : i64
    %624 = arith.extui %617 : i32 to i64
    %625 = arith.addi %624, %c0_i64_167 : i64
    %626 = llvm.getelementptr %27[%625] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %623, %626 {alignment = 1 : i64} : i64, !llvm.ptr
    %627 = llvm.load %3 : !llvm.ptr -> i32
    %628 = llvm.load %3 : !llvm.ptr -> i32
    %c132_i64 = arith.constant 132 : i64
    %629 = arith.extui %628 : i32 to i64
    %630 = arith.addi %629, %c132_i64 : i64
    %631 = llvm.getelementptr %27[%630] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %632 = llvm.load volatile %631 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c88_i64 = arith.constant 88 : i64
    %633 = arith.extui %627 : i32 to i64
    %634 = arith.addi %633, %c88_i64 : i64
    %635 = llvm.getelementptr %27[%634] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %632, %635 {alignment = 1 : i64} : i64, !llvm.ptr
    %636 = llvm.load %3 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %637 = arith.addi %636, %c88_i32 : i32
    call @f44(%arg0, %637) : (!llvm.ptr, i32) -> ()
    %638 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_168 = arith.constant 1 : i64
    %c16_i64_169 = arith.constant 16 : i64
    %639 = arith.extui %638 : i32 to i64
    %640 = arith.addi %639, %c16_i64_169 : i64
    %641 = llvm.getelementptr %27[%640] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_168, %641 {alignment = 1 : i64} : i64, !llvm.ptr
    %642 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_170 = arith.constant 1 : i64
    %c8_i64_171 = arith.constant 8 : i64
    %643 = arith.extui %642 : i32 to i64
    %644 = arith.addi %643, %c8_i64_171 : i64
    %645 = llvm.getelementptr %27[%644] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_170, %645 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb4
  ^bb41:  // pred: ^bb38
    %646 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32 = arith.constant 264 : i32
    %647 = arith.addi %646, %c264_i32 : i32
    %c16_i32_172 = arith.constant 16 : i32
    %648 = arith.addi %647, %c16_i32_172 : i32
    %649 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_173 = arith.constant 128 : i32
    %650 = arith.addi %649, %c128_i32_173 : i32
    %c24_i32_174 = arith.constant 24 : i32
    %651 = arith.addi %650, %c24_i32_174 : i32
    %c0_i64_175 = arith.constant 0 : i64
    %652 = arith.extui %651 : i32 to i64
    %653 = arith.addi %652, %c0_i64_175 : i64
    %654 = llvm.getelementptr %27[%653] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %655 = llvm.load volatile %654 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_176 = arith.constant 0 : i64
    %656 = arith.extui %648 : i32 to i64
    %657 = arith.addi %656, %c0_i64_176 : i64
    %658 = llvm.getelementptr %27[%657] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %655, %658 {alignment = 1 : i64} : i32, !llvm.ptr
    %659 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_177 = arith.constant 264 : i32
    %660 = arith.addi %659, %c264_i32_177 : i32
    %c8_i32_178 = arith.constant 8 : i32
    %661 = arith.addi %660, %c8_i32_178 : i32
    %662 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_179 = arith.constant 128 : i32
    %663 = arith.addi %662, %c128_i32_179 : i32
    %c16_i32_180 = arith.constant 16 : i32
    %664 = arith.addi %663, %c16_i32_180 : i32
    %c0_i64_181 = arith.constant 0 : i64
    %665 = arith.extui %664 : i32 to i64
    %666 = arith.addi %665, %c0_i64_181 : i64
    %667 = llvm.getelementptr %27[%666] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %668 = llvm.load volatile %667 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_182 = arith.constant 0 : i64
    %669 = arith.extui %661 : i32 to i64
    %670 = arith.addi %669, %c0_i64_182 : i64
    %671 = llvm.getelementptr %27[%670] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %668, %671 {alignment = 1 : i64} : i64, !llvm.ptr
    %672 = llvm.load %3 : !llvm.ptr -> i32
    %c288_i32 = arith.constant 288 : i32
    %673 = arith.addi %672, %c288_i32 : i32
    %c8_i32_183 = arith.constant 8 : i32
    %674 = arith.addi %673, %c8_i32_183 : i32
    %675 = llvm.load %3 : !llvm.ptr -> i32
    %c168_i32 = arith.constant 168 : i32
    %676 = arith.addi %675, %c168_i32 : i32
    %c0_i64_184 = arith.constant 0 : i64
    %677 = arith.extui %676 : i32 to i64
    %678 = arith.addi %677, %c0_i64_184 : i64
    %679 = llvm.getelementptr %27[%678] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %680 = llvm.load volatile %679 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_185 = arith.constant 0 : i64
    %681 = arith.extui %674 : i32 to i64
    %682 = arith.addi %681, %c0_i64_185 : i64
    %683 = llvm.getelementptr %27[%682] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %680, %683 {alignment = 1 : i64} : i64, !llvm.ptr
    %684 = llvm.load %3 : !llvm.ptr -> i32
    %c288_i32_186 = arith.constant 288 : i32
    %685 = arith.addi %684, %c288_i32_186 : i32
    %c16_i32_187 = arith.constant 16 : i32
    %686 = arith.addi %685, %c16_i32_187 : i32
    %687 = llvm.load %3 : !llvm.ptr -> i32
    %c176_i32 = arith.constant 176 : i32
    %688 = arith.addi %687, %c176_i32 : i32
    %c0_i64_188 = arith.constant 0 : i64
    %689 = arith.extui %688 : i32 to i64
    %690 = arith.addi %689, %c0_i64_188 : i64
    %691 = llvm.getelementptr %27[%690] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %692 = llvm.load volatile %691 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_189 = arith.constant 0 : i64
    %693 = arith.extui %686 : i32 to i64
    %694 = arith.addi %693, %c0_i64_189 : i64
    %695 = llvm.getelementptr %27[%694] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %692, %695 {alignment = 1 : i64} : i64, !llvm.ptr
    %696 = llvm.load %3 : !llvm.ptr -> i32
    %c288_i32_190 = arith.constant 288 : i32
    %697 = arith.addi %696, %c288_i32_190 : i32
    %c24_i32_191 = arith.constant 24 : i32
    %698 = arith.addi %697, %c24_i32_191 : i32
    %699 = llvm.load %3 : !llvm.ptr -> i32
    %c184_i32 = arith.constant 184 : i32
    %700 = arith.addi %699, %c184_i32 : i32
    %c0_i64_192 = arith.constant 0 : i64
    %701 = arith.extui %700 : i32 to i64
    %702 = arith.addi %701, %c0_i64_192 : i64
    %703 = llvm.getelementptr %27[%702] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %704 = llvm.load volatile %703 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_193 = arith.constant 0 : i64
    %705 = arith.extui %698 : i32 to i64
    %706 = arith.addi %705, %c0_i64_193 : i64
    %707 = llvm.getelementptr %27[%706] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %704, %707 {alignment = 1 : i64} : i64, !llvm.ptr
    %708 = llvm.load %3 : !llvm.ptr -> i32
    %709 = llvm.load %3 : !llvm.ptr -> i32
    %c136_i64_194 = arith.constant 136 : i64
    %710 = arith.extui %709 : i32 to i64
    %711 = arith.addi %710, %c136_i64_194 : i64
    %712 = llvm.getelementptr %27[%711] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %713 = llvm.load volatile %712 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c264_i64 = arith.constant 264 : i64
    %714 = arith.extui %708 : i32 to i64
    %715 = arith.addi %714, %c264_i64 : i64
    %716 = llvm.getelementptr %27[%715] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %713, %716 {alignment = 1 : i64} : i64, !llvm.ptr
    %717 = llvm.load %3 : !llvm.ptr -> i32
    %718 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i64 = arith.constant 160 : i64
    %719 = arith.extui %718 : i32 to i64
    %720 = arith.addi %719, %c160_i64 : i64
    %721 = llvm.getelementptr %27[%720] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %722 = llvm.load volatile %721 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c288_i64 = arith.constant 288 : i64
    %723 = arith.extui %717 : i32 to i64
    %724 = arith.addi %723, %c288_i64 : i64
    %725 = llvm.getelementptr %27[%724] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %722, %725 {alignment = 1 : i64} : i64, !llvm.ptr
    %726 = llvm.load %3 : !llvm.ptr -> i32
    %c116_i32 = arith.constant 116 : i32
    %727 = arith.addi %726, %c116_i32 : i32
    %728 = llvm.load %3 : !llvm.ptr -> i32
    %c495_i32_195 = arith.constant 495 : i32
    %729 = arith.addi %728, %c495_i32_195 : i32
    %730 = llvm.load %3 : !llvm.ptr -> i32
    %c264_i32_196 = arith.constant 264 : i32
    %731 = arith.addi %730, %c264_i32_196 : i32
    %732 = llvm.load %3 : !llvm.ptr -> i32
    %c288_i32_197 = arith.constant 288 : i32
    %733 = arith.addi %732, %c288_i32_197 : i32
    call @f49(%arg0, %727, %729, %731, %733) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %734 = llvm.load %3 : !llvm.ptr -> i32
    %c116_i64 = arith.constant 116 : i64
    %735 = arith.extui %734 : i32 to i64
    %736 = arith.addi %735, %c116_i64 : i64
    %737 = llvm.getelementptr %27[%736] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %738 = llvm.load volatile %737 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32_198 = arith.constant -2147483648 : i32
    %739 = arith.cmpi eq, %738, %c-2147483648_i32_198 : i32
    %740 = arith.extui %739 : i1 to i32
    %c0_i32_199 = arith.constant 0 : i32
    %741 = arith.cmpi eq, %740, %c0_i32_199 : i32
    %742 = arith.extui %741 : i1 to i32
    %c0_i32_200 = arith.constant 0 : i32
    %743 = arith.cmpi ne, %742, %c0_i32_200 : i32
    cf.cond_br %743, ^bb43, ^bb44
  ^bb42:  // 2 preds: ^bb43, ^bb46
    %744 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32_201 = arith.constant 20 : i32
    %745 = arith.addi %744, %c20_i32_201 : i32
    %746 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_202 = arith.constant 32 : i32
    %747 = arith.addi %746, %c32_i32_202 : i32
    %c0_i64_203 = arith.constant 0 : i64
    %748 = arith.extui %747 : i32 to i64
    %749 = arith.addi %748, %c0_i64_203 : i64
    %750 = llvm.getelementptr %27[%749] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %751 = llvm.load volatile %750 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_204 = arith.constant 0 : i64
    %752 = arith.extui %745 : i32 to i64
    %753 = arith.addi %752, %c0_i64_204 : i64
    %754 = llvm.getelementptr %27[%753] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %751, %754 {alignment = 1 : i64} : i32, !llvm.ptr
    %755 = llvm.load %3 : !llvm.ptr -> i32
    %756 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_205 = arith.constant 8 : i64
    %757 = arith.extui %755 : i32 to i64
    %758 = arith.addi %757, %c8_i64_205 : i64
    %759 = llvm.getelementptr %27[%758] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %756, %759 {alignment = 1 : i64} : i32, !llvm.ptr
    %760 = llvm.load %3 : !llvm.ptr -> i32
    %761 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64_206 = arith.constant 24 : i64
    %762 = arith.extui %761 : i32 to i64
    %763 = arith.addi %762, %c24_i64_206 : i64
    %764 = llvm.getelementptr %27[%763] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %765 = llvm.load volatile %764 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c12_i64_207 = arith.constant 12 : i64
    %766 = arith.extui %760 : i32 to i64
    %767 = arith.addi %766, %c12_i64_207 : i64
    %768 = llvm.getelementptr %27[%767] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %765, %768 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb4
  ^bb43:  // pred: ^bb41
    %769 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_208 = arith.constant 24 : i32
    %770 = arith.addi %769, %c24_i32_208 : i32
    %c8_i32_209 = arith.constant 8 : i32
    %771 = arith.addi %770, %c8_i32_209 : i32
    %772 = llvm.load %3 : !llvm.ptr -> i32
    %c116_i32_210 = arith.constant 116 : i32
    %773 = arith.addi %772, %c116_i32_210 : i32
    %c8_i32_211 = arith.constant 8 : i32
    %774 = arith.addi %773, %c8_i32_211 : i32
    %c0_i64_212 = arith.constant 0 : i64
    %775 = arith.extui %774 : i32 to i64
    %776 = arith.addi %775, %c0_i64_212 : i64
    %777 = llvm.getelementptr %27[%776] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %778 = llvm.load volatile %777 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_213 = arith.constant 0 : i64
    %779 = arith.extui %771 : i32 to i64
    %780 = arith.addi %779, %c0_i64_213 : i64
    %781 = llvm.getelementptr %27[%780] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %778, %781 {alignment = 1 : i64} : i32, !llvm.ptr
    %782 = llvm.load %3 : !llvm.ptr -> i32
    %783 = llvm.load %3 : !llvm.ptr -> i32
    %c116_i64_214 = arith.constant 116 : i64
    %784 = arith.extui %783 : i32 to i64
    %785 = arith.addi %784, %c116_i64_214 : i64
    %786 = llvm.getelementptr %27[%785] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %787 = llvm.load volatile %786 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c24_i64_215 = arith.constant 24 : i64
    %788 = arith.extui %782 : i32 to i64
    %789 = arith.addi %788, %c24_i64_215 : i64
    %790 = llvm.getelementptr %27[%789] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %787, %790 {alignment = 1 : i64} : i64, !llvm.ptr
    %c1_i32_216 = arith.constant 1 : i32
    llvm.store %c1_i32_216, %2 : i32, !llvm.ptr
    cf.br ^bb42
  ^bb44:  // pred: ^bb41
    %791 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_217 = arith.constant 128 : i32
    %792 = arith.addi %791, %c128_i32_217 : i32
    %c0_i32_218 = arith.constant 0 : i32
    %c0_i32_219 = arith.constant 0 : i32
    %c1_i32_220 = arith.constant 1 : i32
    %c32_i32_221 = arith.constant 32 : i32
    call @f102(%arg0, %792, %c0_i32_218, %c0_i32_219, %c1_i32_220, %c32_i32_221) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %793 = llvm.load %3 : !llvm.ptr -> i32
    %c132_i64_222 = arith.constant 132 : i64
    %794 = arith.extui %793 : i32 to i64
    %795 = arith.addi %794, %c132_i64_222 : i64
    %796 = llvm.getelementptr %27[%795] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %797 = llvm.load volatile %796 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %797, %5 : i32, !llvm.ptr
    %798 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i64_223 = arith.constant 128 : i64
    %799 = arith.extui %798 : i32 to i64
    %800 = arith.addi %799, %c128_i64_223 : i64
    %801 = llvm.getelementptr %27[%800] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %802 = llvm.load volatile %801 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_224 = arith.constant 1 : i32
    %803 = arith.cmpi eq, %802, %c1_i32_224 : i32
    %804 = arith.extui %803 : i1 to i32
    %c0_i32_225 = arith.constant 0 : i32
    %805 = arith.cmpi ne, %804, %c0_i32_225 : i32
    cf.cond_br %805, ^bb15, ^bb45
  ^bb45:  // pred: ^bb44
    %806 = llvm.load %3 : !llvm.ptr -> i32
    %c136_i64_226 = arith.constant 136 : i64
    %807 = arith.extui %806 : i32 to i64
    %808 = arith.addi %807, %c136_i64_226 : i64
    %809 = llvm.getelementptr %27[%808] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %810 = llvm.load volatile %809 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %810, %4 : i32, !llvm.ptr
    %811 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_227 = arith.constant 128 : i32
    %812 = arith.addi %811, %c128_i32_227 : i32
    %c4_i32_228 = arith.constant 4 : i32
    %c0_i32_229 = arith.constant 0 : i32
    %c4_i32_230 = arith.constant 4 : i32
    %c4_i32_231 = arith.constant 4 : i32
    call @f102(%arg0, %812, %c4_i32_228, %c0_i32_229, %c4_i32_230, %c4_i32_231) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %813 = llvm.load %3 : !llvm.ptr -> i32
    %c132_i64_232 = arith.constant 132 : i64
    %814 = arith.extui %813 : i32 to i64
    %815 = arith.addi %814, %c132_i64_232 : i64
    %816 = llvm.getelementptr %27[%815] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %817 = llvm.load volatile %816 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %817, %17 : i32, !llvm.ptr
    %818 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i64_233 = arith.constant 128 : i64
    %819 = arith.extui %818 : i32 to i64
    %820 = arith.addi %819, %c128_i64_233 : i64
    %821 = llvm.getelementptr %27[%820] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %822 = llvm.load volatile %821 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_234 = arith.constant 1 : i32
    %823 = arith.cmpi eq, %822, %c1_i32_234 : i32
    %824 = arith.extui %823 : i1 to i32
    %c0_i32_235 = arith.constant 0 : i32
    %825 = arith.cmpi ne, %824, %c0_i32_235 : i32
    cf.cond_br %825, ^bb14, ^bb46
  ^bb46:  // pred: ^bb45
    %c0_i32_236 = arith.constant 0 : i32
    llvm.store %c0_i32_236, %2 : i32, !llvm.ptr
    %826 = llvm.load %3 : !llvm.ptr -> i32
    %c136_i64_237 = arith.constant 136 : i64
    %827 = arith.extui %826 : i32 to i64
    %828 = arith.addi %827, %c136_i64_237 : i64
    %829 = llvm.getelementptr %27[%828] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %830 = llvm.load volatile %829 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %830, %6 : i32, !llvm.ptr
    %c0_i32_238 = arith.constant 0 : i32
    %c0_i64_239 = arith.constant 0 : i64
    %831 = arith.extui %830 : i32 to i64
    %832 = arith.addi %831, %c0_i64_239 : i64
    %833 = llvm.getelementptr %27[%832] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_238, %833 {alignment = 1 : i64} : i32, !llvm.ptr
    %834 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_240 = arith.constant 128 : i32
    %835 = arith.addi %834, %c128_i32_240 : i32
    %c8_i32_241 = arith.constant 8 : i32
    %836 = arith.addi %835, %c8_i32_241 : i32
    %c0_i32_242 = arith.constant 0 : i32
    %c0_i64_243 = arith.constant 0 : i64
    %837 = arith.extui %836 : i32 to i64
    %838 = arith.addi %837, %c0_i64_243 : i64
    %839 = llvm.getelementptr %27[%838] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_242, %839 {alignment = 1 : i64} : i32, !llvm.ptr
    %840 = llvm.load %3 : !llvm.ptr -> i32
    %841 = llvm.load %4 : !llvm.ptr -> i32
    %c132_i64_244 = arith.constant 132 : i64
    %842 = arith.extui %840 : i32 to i64
    %843 = arith.addi %842, %c132_i64_244 : i64
    %844 = llvm.getelementptr %27[%843] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %841, %844 {alignment = 1 : i64} : i32, !llvm.ptr
    %845 = llvm.load %3 : !llvm.ptr -> i32
    %846 = llvm.load %5 : !llvm.ptr -> i32
    %c128_i64_245 = arith.constant 128 : i64
    %847 = arith.extui %845 : i32 to i64
    %848 = arith.addi %847, %c128_i64_245 : i64
    %849 = llvm.getelementptr %27[%848] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %846, %849 {alignment = 1 : i64} : i32, !llvm.ptr
    %850 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_246 = arith.constant 0 : i32
    %c148_i64 = arith.constant 148 : i64
    %851 = arith.extui %850 : i32 to i64
    %852 = arith.addi %851, %c148_i64 : i64
    %853 = llvm.getelementptr %27[%852] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_246, %853 {alignment = 1 : i64} : i32, !llvm.ptr
    %854 = llvm.load %3 : !llvm.ptr -> i32
    %855 = llvm.load %6 : !llvm.ptr -> i32
    %c144_i64 = arith.constant 144 : i64
    %856 = arith.extui %854 : i32 to i64
    %857 = arith.addi %856, %c144_i64 : i64
    %858 = llvm.getelementptr %27[%857] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %855, %858 {alignment = 1 : i64} : i32, !llvm.ptr
    %859 = llvm.load %3 : !llvm.ptr -> i32
    %860 = llvm.load %17 : !llvm.ptr -> i32
    %c140_i64 = arith.constant 140 : i64
    %861 = arith.extui %859 : i32 to i64
    %862 = arith.addi %861, %c140_i64 : i64
    %863 = llvm.getelementptr %27[%862] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %860, %863 {alignment = 1 : i64} : i32, !llvm.ptr
    %864 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i32_247 = arith.constant 376 : i32
    %865 = arith.addi %864, %c376_i32_247 : i32
    %c8_i32_248 = arith.constant 8 : i32
    %866 = arith.addi %865, %c8_i32_248 : i32
    %c0_i32_249 = arith.constant 0 : i32
    %c0_i64_250 = arith.constant 0 : i64
    %867 = arith.extui %866 : i32 to i64
    %868 = arith.addi %867, %c0_i64_250 : i64
    %869 = llvm.getelementptr %27[%868] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_249, %869 {alignment = 1 : i64} : i32, !llvm.ptr
    %870 = llvm.load %3 : !llvm.ptr -> i32
    %871 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i64_251 = arith.constant 128 : i64
    %872 = arith.extui %871 : i32 to i64
    %873 = arith.addi %872, %c128_i64_251 : i64
    %874 = llvm.getelementptr %27[%873] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %875 = llvm.load volatile %874 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c376_i64_252 = arith.constant 376 : i64
    %876 = arith.extui %870 : i32 to i64
    %877 = arith.addi %876, %c376_i64_252 : i64
    %878 = llvm.getelementptr %27[%877] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %875, %878 {alignment = 1 : i64} : i64, !llvm.ptr
    %879 = llvm.load %3 : !llvm.ptr -> i32
    %c140_i32_253 = arith.constant 140 : i32
    %880 = arith.addi %879, %c140_i32_253 : i32
    llvm.store %880, %5 : i32, !llvm.ptr
    call @f77(%arg0, %880) : (!llvm.ptr, i32) -> ()
    %881 = llvm.load %5 : !llvm.ptr -> i32
    call @f78(%arg0, %881) : (!llvm.ptr, i32) -> ()
    %882 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_254 = arith.constant 24 : i32
    %883 = arith.addi %882, %c24_i32_254 : i32
    %884 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i32_255 = arith.constant 376 : i32
    %885 = arith.addi %884, %c376_i32_255 : i32
    call @f72(%arg0, %883, %885) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb42
  ^bb47:  // pred: ^bb21
    %886 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_256 = arith.constant -2147483648 : i32
    %c376_i64_257 = arith.constant 376 : i64
    %887 = arith.extui %886 : i32 to i64
    %888 = arith.addi %887, %c376_i64_257 : i64
    %889 = llvm.getelementptr %27[%888] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_256, %889 {alignment = 1 : i64} : i32, !llvm.ptr
    %890 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i32_258 = arith.constant 376 : i32
    %891 = arith.addi %890, %c376_i32_258 : i32
    call @f3(%arg0, %891) : (!llvm.ptr, i32) -> ()
    %892 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_259 = arith.constant 128 : i32
    %893 = arith.addi %892, %c128_i32_259 : i32
    %894 = llvm.load %6 : !llvm.ptr -> i32
    %895 = llvm.load %4 : !llvm.ptr -> i32
    call @f5(%arg0, %893, %894, %895) : (!llvm.ptr, i32, i32, i32) -> ()
    %896 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i64_260 = arith.constant 128 : i64
    %897 = arith.extui %896 : i32 to i64
    %898 = arith.addi %897, %c128_i64_260 : i64
    %899 = llvm.getelementptr %27[%898] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %900 = llvm.load volatile %899 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_261 = arith.constant 0 : i32
    %901 = arith.cmpi ne, %900, %c0_i32_261 : i32
    cf.cond_br %901, ^bb49, ^bb50
  ^bb48:  // pred: ^bb21
    %902 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32_262 = arith.constant 20 : i32
    %903 = arith.addi %902, %c20_i32_262 : i32
    %c0_i32_263 = arith.constant 0 : i32
    %c0_i64_264 = arith.constant 0 : i64
    %904 = arith.extui %903 : i32 to i64
    %905 = arith.addi %904, %c0_i64_264 : i64
    %906 = llvm.getelementptr %27[%905] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_263, %906 {alignment = 1 : i64} : i32, !llvm.ptr
    %907 = llvm.load %3 : !llvm.ptr -> i32
    %c4294967296_i64_265 = arith.constant 4294967296 : i64
    %c12_i64_266 = arith.constant 12 : i64
    %908 = arith.extui %907 : i32 to i64
    %909 = arith.addi %908, %c12_i64_266 : i64
    %910 = llvm.getelementptr %27[%909] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_265, %910 {alignment = 1 : i64} : i64, !llvm.ptr
    %911 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_267 = arith.constant 1 : i32
    %c8_i64_268 = arith.constant 8 : i64
    %912 = arith.extui %911 : i32 to i64
    %913 = arith.addi %912, %c8_i64_268 : i64
    %914 = llvm.getelementptr %27[%913] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_267, %914 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb49:  // pred: ^bb47
    %915 = llvm.load %3 : !llvm.ptr -> i32
    %c208_i32 = arith.constant 208 : i32
    %916 = arith.addi %915, %c208_i32 : i32
    %917 = llvm.load %3 : !llvm.ptr -> i32
    %c148_i32_269 = arith.constant 148 : i32
    %918 = arith.addi %917, %c148_i32_269 : i32
    %c0_i64_270 = arith.constant 0 : i64
    %919 = arith.extui %918 : i32 to i64
    %920 = arith.addi %919, %c0_i64_270 : i64
    %921 = llvm.getelementptr %27[%920] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %922 = llvm.load volatile %921 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_271 = arith.constant 0 : i64
    %923 = arith.extui %916 : i32 to i64
    %924 = arith.addi %923, %c0_i64_271 : i64
    %925 = llvm.getelementptr %27[%924] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %922, %925 {alignment = 1 : i64} : i64, !llvm.ptr
    %926 = llvm.load %3 : !llvm.ptr -> i32
    %c200_i32 = arith.constant 200 : i32
    %927 = arith.addi %926, %c200_i32 : i32
    %928 = llvm.load %3 : !llvm.ptr -> i32
    %c140_i32_272 = arith.constant 140 : i32
    %929 = arith.addi %928, %c140_i32_272 : i32
    %c0_i64_273 = arith.constant 0 : i64
    %930 = arith.extui %929 : i32 to i64
    %931 = arith.addi %930, %c0_i64_273 : i64
    %932 = llvm.getelementptr %27[%931] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %933 = llvm.load volatile %932 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_274 = arith.constant 0 : i64
    %934 = arith.extui %927 : i32 to i64
    %935 = arith.addi %934, %c0_i64_274 : i64
    %936 = llvm.getelementptr %27[%935] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %933, %936 {alignment = 1 : i64} : i64, !llvm.ptr
    %937 = llvm.load %3 : !llvm.ptr -> i32
    %938 = llvm.load %3 : !llvm.ptr -> i32
    %c132_i64_275 = arith.constant 132 : i64
    %939 = arith.extui %938 : i32 to i64
    %940 = arith.addi %939, %c132_i64_275 : i64
    %941 = llvm.getelementptr %27[%940] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %942 = llvm.load volatile %941 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c192_i64 = arith.constant 192 : i64
    %943 = arith.extui %937 : i32 to i64
    %944 = arith.addi %943, %c192_i64 : i64
    %945 = llvm.getelementptr %27[%944] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %942, %945 {alignment = 1 : i64} : i64, !llvm.ptr
    %946 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %947 = arith.addi %946, %c192_i32 : i32
    call @f44(%arg0, %947) : (!llvm.ptr, i32) -> ()
    %948 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_276 = arith.constant 1 : i64
    %c16_i64_277 = arith.constant 16 : i64
    %949 = arith.extui %948 : i32 to i64
    %950 = arith.addi %949, %c16_i64_277 : i64
    %951 = llvm.getelementptr %27[%950] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_276, %951 {alignment = 1 : i64} : i64, !llvm.ptr
    %952 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64_278 = arith.constant 1 : i64
    %c8_i64_279 = arith.constant 8 : i64
    %953 = arith.extui %952 : i32 to i64
    %954 = arith.addi %953, %c8_i64_279 : i64
    %955 = llvm.getelementptr %27[%954] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_278, %955 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb4
  ^bb50:  // pred: ^bb47
    %956 = llvm.load %3 : !llvm.ptr -> i32
    %c320_i32 = arith.constant 320 : i32
    %957 = arith.addi %956, %c320_i32 : i32
    %c16_i32_280 = arith.constant 16 : i32
    %958 = arith.addi %957, %c16_i32_280 : i32
    %959 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_281 = arith.constant 128 : i32
    %960 = arith.addi %959, %c128_i32_281 : i32
    %c24_i32_282 = arith.constant 24 : i32
    %961 = arith.addi %960, %c24_i32_282 : i32
    %c0_i64_283 = arith.constant 0 : i64
    %962 = arith.extui %961 : i32 to i64
    %963 = arith.addi %962, %c0_i64_283 : i64
    %964 = llvm.getelementptr %27[%963] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %965 = llvm.load volatile %964 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_284 = arith.constant 0 : i64
    %966 = arith.extui %958 : i32 to i64
    %967 = arith.addi %966, %c0_i64_284 : i64
    %968 = llvm.getelementptr %27[%967] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %965, %968 {alignment = 1 : i64} : i32, !llvm.ptr
    %969 = llvm.load %3 : !llvm.ptr -> i32
    %c320_i32_285 = arith.constant 320 : i32
    %970 = arith.addi %969, %c320_i32_285 : i32
    %c8_i32_286 = arith.constant 8 : i32
    %971 = arith.addi %970, %c8_i32_286 : i32
    %972 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_287 = arith.constant 128 : i32
    %973 = arith.addi %972, %c128_i32_287 : i32
    %c16_i32_288 = arith.constant 16 : i32
    %974 = arith.addi %973, %c16_i32_288 : i32
    %c0_i64_289 = arith.constant 0 : i64
    %975 = arith.extui %974 : i32 to i64
    %976 = arith.addi %975, %c0_i64_289 : i64
    %977 = llvm.getelementptr %27[%976] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %978 = llvm.load volatile %977 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_290 = arith.constant 0 : i64
    %979 = arith.extui %971 : i32 to i64
    %980 = arith.addi %979, %c0_i64_290 : i64
    %981 = llvm.getelementptr %27[%980] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %978, %981 {alignment = 1 : i64} : i64, !llvm.ptr
    %982 = llvm.load %3 : !llvm.ptr -> i32
    %c344_i32 = arith.constant 344 : i32
    %983 = arith.addi %982, %c344_i32 : i32
    %c8_i32_291 = arith.constant 8 : i32
    %984 = arith.addi %983, %c8_i32_291 : i32
    %985 = llvm.load %3 : !llvm.ptr -> i32
    %c168_i32_292 = arith.constant 168 : i32
    %986 = arith.addi %985, %c168_i32_292 : i32
    %c0_i64_293 = arith.constant 0 : i64
    %987 = arith.extui %986 : i32 to i64
    %988 = arith.addi %987, %c0_i64_293 : i64
    %989 = llvm.getelementptr %27[%988] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %990 = llvm.load volatile %989 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_294 = arith.constant 0 : i64
    %991 = arith.extui %984 : i32 to i64
    %992 = arith.addi %991, %c0_i64_294 : i64
    %993 = llvm.getelementptr %27[%992] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %990, %993 {alignment = 1 : i64} : i64, !llvm.ptr
    %994 = llvm.load %3 : !llvm.ptr -> i32
    %c344_i32_295 = arith.constant 344 : i32
    %995 = arith.addi %994, %c344_i32_295 : i32
    %c16_i32_296 = arith.constant 16 : i32
    %996 = arith.addi %995, %c16_i32_296 : i32
    %997 = llvm.load %3 : !llvm.ptr -> i32
    %c176_i32_297 = arith.constant 176 : i32
    %998 = arith.addi %997, %c176_i32_297 : i32
    %c0_i64_298 = arith.constant 0 : i64
    %999 = arith.extui %998 : i32 to i64
    %1000 = arith.addi %999, %c0_i64_298 : i64
    %1001 = llvm.getelementptr %27[%1000] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1002 = llvm.load volatile %1001 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_299 = arith.constant 0 : i64
    %1003 = arith.extui %996 : i32 to i64
    %1004 = arith.addi %1003, %c0_i64_299 : i64
    %1005 = llvm.getelementptr %27[%1004] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1002, %1005 {alignment = 1 : i64} : i64, !llvm.ptr
    %1006 = llvm.load %3 : !llvm.ptr -> i32
    %c344_i32_300 = arith.constant 344 : i32
    %1007 = arith.addi %1006, %c344_i32_300 : i32
    %c24_i32_301 = arith.constant 24 : i32
    %1008 = arith.addi %1007, %c24_i32_301 : i32
    %1009 = llvm.load %3 : !llvm.ptr -> i32
    %c184_i32_302 = arith.constant 184 : i32
    %1010 = arith.addi %1009, %c184_i32_302 : i32
    %c0_i64_303 = arith.constant 0 : i64
    %1011 = arith.extui %1010 : i32 to i64
    %1012 = arith.addi %1011, %c0_i64_303 : i64
    %1013 = llvm.getelementptr %27[%1012] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1014 = llvm.load volatile %1013 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_304 = arith.constant 0 : i64
    %1015 = arith.extui %1008 : i32 to i64
    %1016 = arith.addi %1015, %c0_i64_304 : i64
    %1017 = llvm.getelementptr %27[%1016] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1014, %1017 {alignment = 1 : i64} : i64, !llvm.ptr
    %1018 = llvm.load %3 : !llvm.ptr -> i32
    %1019 = llvm.load %3 : !llvm.ptr -> i32
    %c136_i64_305 = arith.constant 136 : i64
    %1020 = arith.extui %1019 : i32 to i64
    %1021 = arith.addi %1020, %c136_i64_305 : i64
    %1022 = llvm.getelementptr %27[%1021] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1023 = llvm.load volatile %1022 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c320_i64 = arith.constant 320 : i64
    %1024 = arith.extui %1018 : i32 to i64
    %1025 = arith.addi %1024, %c320_i64 : i64
    %1026 = llvm.getelementptr %27[%1025] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1023, %1026 {alignment = 1 : i64} : i64, !llvm.ptr
    %1027 = llvm.load %3 : !llvm.ptr -> i32
    %1028 = llvm.load %3 : !llvm.ptr -> i32
    %c160_i64_306 = arith.constant 160 : i64
    %1029 = arith.extui %1028 : i32 to i64
    %1030 = arith.addi %1029, %c160_i64_306 : i64
    %1031 = llvm.getelementptr %27[%1030] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1032 = llvm.load volatile %1031 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c344_i64 = arith.constant 344 : i64
    %1033 = arith.extui %1027 : i32 to i64
    %1034 = arith.addi %1033, %c344_i64 : i64
    %1035 = llvm.getelementptr %27[%1034] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1032, %1035 {alignment = 1 : i64} : i64, !llvm.ptr
    %1036 = llvm.load %3 : !llvm.ptr -> i32
    %c216_i32 = arith.constant 216 : i32
    %1037 = arith.addi %1036, %c216_i32 : i32
    %1038 = llvm.load %3 : !llvm.ptr -> i32
    %c495_i32_307 = arith.constant 495 : i32
    %1039 = arith.addi %1038, %c495_i32_307 : i32
    %1040 = llvm.load %3 : !llvm.ptr -> i32
    %c320_i32_308 = arith.constant 320 : i32
    %1041 = arith.addi %1040, %c320_i32_308 : i32
    %1042 = llvm.load %3 : !llvm.ptr -> i32
    %c344_i32_309 = arith.constant 344 : i32
    %1043 = arith.addi %1042, %c344_i32_309 : i32
    call @f6(%arg0, %1037, %1039, %1041, %1043) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %1044 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_310 = arith.constant 128 : i32
    %1045 = arith.addi %1044, %c128_i32_310 : i32
    %1046 = llvm.load %3 : !llvm.ptr -> i32
    %c216_i32_311 = arith.constant 216 : i32
    %1047 = arith.addi %1046, %c216_i32_311 : i32
    call @f7(%arg0, %1045, %1047) : (!llvm.ptr, i32, i32) -> ()
    %1048 = llvm.load %3 : !llvm.ptr -> i32
    %c216_i32_312 = arith.constant 216 : i32
    %1049 = arith.addi %1048, %c216_i32_312 : i32
    call @f103(%arg0, %1049) : (!llvm.ptr, i32) -> ()
    %1050 = llvm.load %3 : !llvm.ptr -> i32
    %c216_i32_313 = arith.constant 216 : i32
    %1051 = arith.addi %1050, %c216_i32_313 : i32
    call @f104(%arg0, %1051) : (!llvm.ptr, i32) -> ()
    %1052 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32_314 = arith.constant 20 : i32
    %1053 = arith.addi %1052, %c20_i32_314 : i32
    %1054 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_315 = arith.constant 128 : i32
    %1055 = arith.addi %1054, %c128_i32_315 : i32
    %c8_i32_316 = arith.constant 8 : i32
    %1056 = arith.addi %1055, %c8_i32_316 : i32
    %c0_i64_317 = arith.constant 0 : i64
    %1057 = arith.extui %1056 : i32 to i64
    %1058 = arith.addi %1057, %c0_i64_317 : i64
    %1059 = llvm.getelementptr %27[%1058] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1060 = llvm.load volatile %1059 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_318 = arith.constant 0 : i64
    %1061 = arith.extui %1053 : i32 to i64
    %1062 = arith.addi %1061, %c0_i64_318 : i64
    %1063 = llvm.getelementptr %27[%1062] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1060, %1063 {alignment = 1 : i64} : i32, !llvm.ptr
    %1064 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_319 = arith.constant 0 : i32
    %c8_i64_320 = arith.constant 8 : i64
    %1065 = arith.extui %1064 : i32 to i64
    %1066 = arith.addi %1065, %c8_i64_320 : i64
    %1067 = llvm.getelementptr %27[%1066] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_319, %1067 {alignment = 1 : i64} : i32, !llvm.ptr
    %1068 = llvm.load %3 : !llvm.ptr -> i32
    %1069 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i64_321 = arith.constant 128 : i64
    %1070 = arith.extui %1069 : i32 to i64
    %1071 = arith.addi %1070, %c128_i64_321 : i64
    %1072 = llvm.getelementptr %27[%1071] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1073 = llvm.load volatile %1072 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c12_i64_322 = arith.constant 12 : i64
    %1074 = arith.extui %1068 : i32 to i64
    %1075 = arith.addi %1074, %c12_i64_322 : i64
    %1076 = llvm.getelementptr %27[%1075] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1073, %1076 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb4
  ^bb51:  // pred: ^bb13
    %c-2147483648_i32_323 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32_323, %20 : i32, !llvm.ptr
    %1077 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_324 = arith.constant -2147483648 : i32
    %c456_i64_325 = arith.constant 456 : i64
    %1078 = arith.extui %1077 : i32 to i64
    %1079 = arith.addi %1078, %c456_i64_325 : i64
    %1080 = llvm.getelementptr %27[%1079] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_324, %1080 {alignment = 1 : i64} : i32, !llvm.ptr
    %1081 = llvm.load %4 : !llvm.ptr -> i32
    %1082 = llvm.load %2 : !llvm.ptr -> i32
    %1083 = arith.subi %1081, %1082 : i32
    llvm.store %1083, %21 : i32, !llvm.ptr
    %c32_i32_326 = arith.constant 32 : i32
    %1084 = arith.cmpi ult, %1083, %c32_i32_326 : i32
    %1085 = arith.extui %1084 : i1 to i32
    %c0_i32_327 = arith.constant 0 : i32
    %1086 = arith.cmpi ne, %1085, %c0_i32_327 : i32
    cf.cond_br %1086, ^bb9, ^bb53
  ^bb52:  // pred: ^bb13
    %c16_i32_328 = arith.constant 16 : i32
    llvm.store %c16_i32_328, %19 : i32, !llvm.ptr
    %c-2147483648_i32_329 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32_329, %20 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb53:  // pred: ^bb51
    %1087 = llvm.load %6 : !llvm.ptr -> i32
    %1088 = llvm.load %2 : !llvm.ptr -> i32
    %1089 = arith.addi %1087, %1088 : i32
    llvm.store %1089, %22 : i32, !llvm.ptr
    %1090 = llvm.load %5 : !llvm.ptr -> i32
    %1091 = llvm.load %2 : !llvm.ptr -> i32
    %1092 = arith.addi %1090, %1091 : i32
    llvm.store %1092, %17 : i32, !llvm.ptr
    %1093 = llvm.load %3 : !llvm.ptr -> i32
    %c456_i32_330 = arith.constant 456 : i32
    %1094 = arith.addi %1093, %c456_i32_330 : i32
    call @f4(%arg0, %1094) : (!llvm.ptr, i32) -> ()
    %c4_i32_331 = arith.constant 4 : i32
    llvm.store %c4_i32_331, %2 : i32, !llvm.ptr
    cf.br ^bb55
  ^bb54:  // pred: ^bb57
    %1095 = llvm.load %3 : !llvm.ptr -> i32
    %c432_i32_332 = arith.constant 432 : i32
    %1096 = arith.addi %1095, %c432_i32_332 : i32
    %1097 = llvm.load %22 : !llvm.ptr -> i32
    %c32_i32_333 = arith.constant 32 : i32
    %c1048826_i32_334 = arith.constant 1048826 : i32
    %c14_i32_335 = arith.constant 14 : i32
    call @f81(%arg0, %1096, %1097, %c32_i32_333, %c1048826_i32_334, %c14_i32_335) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %1098 = llvm.load %3 : !llvm.ptr -> i32
    %c436_i64_336 = arith.constant 436 : i64
    %1099 = arith.extui %1098 : i32 to i64
    %1100 = arith.addi %1099, %c436_i64_336 : i64
    %1101 = llvm.getelementptr %27[%1100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1102 = llvm.load volatile %1101 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1102, %19 : i32, !llvm.ptr
    %1103 = llvm.load %3 : !llvm.ptr -> i32
    %c432_i64_337 = arith.constant 432 : i64
    %1104 = arith.extui %1103 : i32 to i64
    %1105 = arith.addi %1104, %c432_i64_337 : i64
    %1106 = llvm.getelementptr %27[%1105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1107 = llvm.load volatile %1106 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1107, %20 : i32, !llvm.ptr
    %c-2147483638_i32_338 = arith.constant -2147483638 : i32
    %1108 = arith.cmpi eq, %1107, %c-2147483638_i32_338 : i32
    %1109 = arith.extui %1108 : i1 to i32
    %c0_i32_339 = arith.constant 0 : i32
    %1110 = arith.cmpi ne, %1109, %c0_i32_339 : i32
    cf.cond_br %1110, ^bb10, ^bb58
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %1111 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_340 = arith.constant 32 : i32
    %1112 = arith.cmpi eq, %1111, %c32_i32_340 : i32
    %1113 = arith.extui %1112 : i1 to i32
    %c0_i32_341 = arith.constant 0 : i32
    %1114 = arith.cmpi ne, %1113, %c0_i32_341 : i32
    cf.cond_br %1114, ^bb11, ^bb56
  ^bb56:  // pred: ^bb55
    %1115 = llvm.load %17 : !llvm.ptr -> i32
    %1116 = llvm.load %2 : !llvm.ptr -> i32
    %1117 = arith.addi %1115, %1116 : i32
    llvm.store %1117, %5 : i32, !llvm.ptr
    %1118 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_342 = arith.constant 1 : i32
    %1119 = arith.addi %1118, %c1_i32_342 : i32
    llvm.store %1119, %2 : i32, !llvm.ptr
    %1120 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_343 = arith.constant 0 : i64
    %1121 = arith.extui %1120 : i32 to i64
    %1122 = arith.addi %1121, %c0_i64_343 : i64
    %1123 = llvm.getelementptr %27[%1122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1124 = llvm.load volatile %1123 {alignment = 1 : i64} : !llvm.ptr -> i8
    %1125 = arith.extui %1124 : i8 to i32
    %c0_i32_344 = arith.constant 0 : i32
    %1126 = arith.cmpi eq, %1125, %c0_i32_344 : i32
    %1127 = arith.extui %1126 : i1 to i32
    %c0_i32_345 = arith.constant 0 : i32
    %1128 = arith.cmpi ne, %1127, %c0_i32_345 : i32
    cf.cond_br %1128, ^bb55, ^bb57
  ^bb57:  // pred: ^bb56
    cf.br ^bb54
  ^bb58:  // pred: ^bb54
    cf.br ^bb12
  ^bb59:  // pred: ^bb10
    %1129 = llvm.load %21 : !llvm.ptr -> i32
    %1130 = llvm.load %19 : !llvm.ptr -> i32
    %c32_i32_346 = arith.constant 32 : i32
    %1131 = arith.addi %1130, %c32_i32_346 : i32
    %1132 = arith.cmpi ult, %1129, %1131 : i32
    %1133 = arith.extui %1132 : i1 to i32
    %c0_i32_347 = arith.constant 0 : i32
    %1134 = arith.cmpi ne, %1133, %c0_i32_347 : i32
    cf.cond_br %1134, ^bb9, ^bb60
  ^bb60:  // pred: ^bb59
    %1135 = llvm.load %3 : !llvm.ptr -> i32
    %c456_i32_348 = arith.constant 456 : i32
    %1136 = arith.addi %1135, %c456_i32_348 : i32
    call @f4(%arg0, %1136) : (!llvm.ptr, i32) -> ()
    %1137 = llvm.load %3 : !llvm.ptr -> i32
    %1138 = llvm.load %14 : !llvm.ptr -> i32
    %c487_i64 = arith.constant 487 : i64
    %1139 = arith.extui %1137 : i32 to i64
    %1140 = arith.addi %1139, %c487_i64 : i64
    %1141 = llvm.getelementptr %27[%1140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1138, %1141 {alignment = 1 : i64} : i32, !llvm.ptr
    %1142 = llvm.load %3 : !llvm.ptr -> i32
    %1143 = llvm.load %13 : !llvm.ptr -> i32
    %c491_i64 = arith.constant 491 : i64
    %1144 = arith.extui %1142 : i32 to i64
    %1145 = arith.addi %1144, %c491_i64 : i64
    %1146 = llvm.getelementptr %27[%1145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1147 = arith.trunci %1143 : i32 to i8
    llvm.store volatile %1147, %1146 {alignment = 1 : i64} : i8, !llvm.ptr
    %1148 = llvm.load %3 : !llvm.ptr -> i32
    %c416_i32 = arith.constant 416 : i32
    %1149 = arith.addi %1148, %c416_i32 : i32
    %c8_i32_349 = arith.constant 8 : i32
    %1150 = arith.addi %1149, %c8_i32_349 : i32
    %1151 = llvm.load %3 : !llvm.ptr -> i32
    %c480_i32_350 = arith.constant 480 : i32
    %1152 = arith.addi %1151, %c480_i32_350 : i32
    %c8_i32_351 = arith.constant 8 : i32
    %1153 = arith.addi %1152, %c8_i32_351 : i32
    %c0_i64_352 = arith.constant 0 : i64
    %1154 = arith.extui %1153 : i32 to i64
    %1155 = arith.addi %1154, %c0_i64_352 : i64
    %1156 = llvm.getelementptr %27[%1155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1157 = llvm.load volatile %1156 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1157, %2 : i32, !llvm.ptr
    %c0_i64_353 = arith.constant 0 : i64
    %1158 = arith.extui %1150 : i32 to i64
    %1159 = arith.addi %1158, %c0_i64_353 : i64
    %1160 = llvm.getelementptr %27[%1159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1157, %1160 {alignment = 1 : i64} : i32, !llvm.ptr
    %1161 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_354 = arith.constant 128 : i32
    %1162 = arith.addi %1161, %c128_i32_354 : i32
    %c8_i32_355 = arith.constant 8 : i32
    %1163 = arith.addi %1162, %c8_i32_355 : i32
    %1164 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_356 = arith.constant 0 : i64
    %1165 = arith.extui %1163 : i32 to i64
    %1166 = arith.addi %1165, %c0_i64_356 : i64
    %1167 = llvm.getelementptr %27[%1166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1164, %1167 {alignment = 1 : i64} : i32, !llvm.ptr
    %1168 = llvm.load %3 : !llvm.ptr -> i32
    %1169 = llvm.load %15 : !llvm.ptr -> i32
    %c483_i64 = arith.constant 483 : i64
    %1170 = arith.extui %1168 : i32 to i64
    %1171 = arith.addi %1170, %c483_i64 : i64
    %1172 = llvm.getelementptr %27[%1171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1169, %1172 {alignment = 1 : i64} : i32, !llvm.ptr
    %1173 = llvm.load %3 : !llvm.ptr -> i32
    %1174 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_357 = arith.constant 2 : i32
    %1175 = arith.addi %1174, %c2_i32_357 : i32
    %c0_i64_358 = arith.constant 0 : i64
    %1176 = arith.extui %1175 : i32 to i64
    %1177 = arith.addi %1176, %c0_i64_358 : i64
    %1178 = llvm.getelementptr %27[%1177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1179 = llvm.load volatile %1178 {alignment = 1 : i64} : !llvm.ptr -> i8
    %1180 = arith.extui %1179 : i8 to i32
    %c482_i64 = arith.constant 482 : i64
    %1181 = arith.extui %1173 : i32 to i64
    %1182 = arith.addi %1181, %c482_i64 : i64
    %1183 = llvm.getelementptr %27[%1182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1184 = arith.trunci %1180 : i32 to i8
    llvm.store volatile %1184, %1183 {alignment = 1 : i64} : i8, !llvm.ptr
    %1185 = llvm.load %3 : !llvm.ptr -> i32
    %1186 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_359 = arith.constant 0 : i64
    %1187 = arith.extui %1186 : i32 to i64
    %1188 = arith.addi %1187, %c0_i64_359 : i64
    %1189 = llvm.getelementptr %27[%1188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1190 = llvm.load volatile %1189 {alignment = 1 : i64} : !llvm.ptr -> i16
    %1191 = arith.extui %1190 : i16 to i32
    %c480_i64_360 = arith.constant 480 : i64
    %1192 = arith.extui %1185 : i32 to i64
    %1193 = arith.addi %1192, %c480_i64_360 : i64
    %1194 = llvm.getelementptr %27[%1193] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1195 = arith.trunci %1191 : i32 to i16
    llvm.store volatile %1195, %1194 {alignment = 1 : i64} : i16, !llvm.ptr
    %1196 = llvm.load %3 : !llvm.ptr -> i32
    %1197 = llvm.load %12 : !llvm.ptr -> i32
    %c140_i64_361 = arith.constant 140 : i64
    %1198 = arith.extui %1196 : i32 to i64
    %1199 = arith.addi %1198, %c140_i64_361 : i64
    %1200 = llvm.getelementptr %27[%1199] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1197, %1200 {alignment = 1 : i64} : i32, !llvm.ptr
    %1201 = llvm.load %3 : !llvm.ptr -> i32
    %1202 = llvm.load %8 : !llvm.ptr -> i32
    %c148_i64_362 = arith.constant 148 : i64
    %1203 = arith.extui %1201 : i32 to i64
    %1204 = arith.addi %1203, %c148_i64_362 : i64
    %1205 = llvm.getelementptr %27[%1204] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1202, %1205 {alignment = 1 : i64} : i32, !llvm.ptr
    %1206 = llvm.load %3 : !llvm.ptr -> i32
    %1207 = llvm.load %9 : !llvm.ptr -> i32
    %c146_i64 = arith.constant 146 : i64
    %1208 = arith.extui %1206 : i32 to i64
    %1209 = arith.addi %1208, %c146_i64 : i64
    %1210 = llvm.getelementptr %27[%1209] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1211 = arith.trunci %1207 : i32 to i16
    llvm.store volatile %1211, %1210 {alignment = 1 : i64} : i16, !llvm.ptr
    %1212 = llvm.load %3 : !llvm.ptr -> i32
    %1213 = llvm.load %10 : !llvm.ptr -> i32
    %c145_i64 = arith.constant 145 : i64
    %1214 = arith.extui %1212 : i32 to i64
    %1215 = arith.addi %1214, %c145_i64 : i64
    %1216 = llvm.getelementptr %27[%1215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1217 = arith.trunci %1213 : i32 to i8
    llvm.store volatile %1217, %1216 {alignment = 1 : i64} : i8, !llvm.ptr
    %1218 = llvm.load %3 : !llvm.ptr -> i32
    %1219 = llvm.load %11 : !llvm.ptr -> i32
    %c144_i64_363 = arith.constant 144 : i64
    %1220 = arith.extui %1218 : i32 to i64
    %1221 = arith.addi %1220, %c144_i64_363 : i64
    %1222 = llvm.getelementptr %27[%1221] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1223 = arith.trunci %1219 : i32 to i8
    llvm.store volatile %1223, %1222 {alignment = 1 : i64} : i8, !llvm.ptr
    %1224 = llvm.load %3 : !llvm.ptr -> i32
    %1225 = llvm.load %22 : !llvm.ptr -> i32
    %c32_i32_364 = arith.constant 32 : i32
    %1226 = arith.addi %1225, %c32_i32_364 : i32
    %c160_i64_365 = arith.constant 160 : i64
    %1227 = arith.extui %1224 : i32 to i64
    %1228 = arith.addi %1227, %c160_i64_365 : i64
    %1229 = llvm.getelementptr %27[%1228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1226, %1229 {alignment = 1 : i64} : i32, !llvm.ptr
    %1230 = llvm.load %3 : !llvm.ptr -> i32
    %1231 = llvm.load %7 : !llvm.ptr -> i64
    %c24_i64_366 = arith.constant 24 : i64
    %c63_i64_367 = arith.constant 63 : i64
    %1232 = arith.cmpi ule, %c24_i64_366, %c63_i64_367 : i64
    %1233 = scf.if %1232 -> (i64) {
      %1661 = arith.shli %1231, %c24_i64_366 : i64
      scf.yield %1661 : i64
    } else {
      %c0_i64_508 = arith.constant 0 : i64
      scf.yield %c0_i64_508 : i64
    }
    %1234 = llvm.load %18 : !llvm.ptr -> i32
    %1235 = arith.extui %1234 : i32 to i64
    %c16777215_i64 = arith.constant 16777215 : i64
    %1236 = arith.andi %1235, %c16777215_i64 : i64
    %1237 = arith.ori %1233, %1236 : i64
    %c152_i64 = arith.constant 152 : i64
    %1238 = arith.extui %1230 : i32 to i64
    %1239 = arith.addi %1238, %c152_i64 : i64
    %1240 = llvm.getelementptr %27[%1239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1237, %1240 {alignment = 1 : i64} : i64, !llvm.ptr
    %1241 = llvm.load %3 : !llvm.ptr -> i32
    %1242 = llvm.load %3 : !llvm.ptr -> i32
    %c480_i64_368 = arith.constant 480 : i64
    %1243 = arith.extui %1242 : i32 to i64
    %1244 = arith.addi %1243, %c480_i64_368 : i64
    %1245 = llvm.getelementptr %27[%1244] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1246 = llvm.load volatile %1245 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c128_i64_369 = arith.constant 128 : i64
    %1247 = arith.extui %1241 : i32 to i64
    %1248 = arith.addi %1247, %c128_i64_369 : i64
    %1249 = llvm.getelementptr %27[%1248] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1246, %1249 {alignment = 1 : i64} : i64, !llvm.ptr
    %1250 = llvm.load %3 : !llvm.ptr -> i32
    %1251 = llvm.load %19 : !llvm.ptr -> i32
    %c164_i64 = arith.constant 164 : i64
    %1252 = arith.extui %1250 : i32 to i64
    %1253 = arith.addi %1252, %c164_i64 : i64
    %1254 = llvm.getelementptr %27[%1253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1251, %1254 {alignment = 1 : i64} : i32, !llvm.ptr
    %1255 = llvm.load %3 : !llvm.ptr -> i32
    %c456_i32_370 = arith.constant 456 : i32
    %1256 = arith.addi %1255, %c456_i32_370 : i32
    %1257 = llvm.load %19 : !llvm.ptr -> i32
    %c31_i32_371 = arith.constant 31 : i32
    %1258 = arith.addi %1257, %c31_i32_371 : i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_372 = arith.constant 31 : i32
    %1259 = arith.cmpi ule, %c5_i32, %c31_i32_372 : i32
    %1260 = scf.if %1259 -> (i32) {
      %1661 = arith.shrui %1258, %c5_i32 : i32
      scf.yield %1661 : i32
    } else {
      %c0_i32_508 = arith.constant 0 : i32
      scf.yield %c0_i32_508 : i32
    }
    %c4_i32_373 = arith.constant 4 : i32
    %1261 = arith.addi %1260, %c4_i32_373 : i32
    %c0_i32_374 = arith.constant 0 : i32
    %c1_i32_375 = arith.constant 1 : i32
    %c32_i32_376 = arith.constant 32 : i32
    call @f102(%arg0, %1256, %1261, %c0_i32_374, %c1_i32_375, %c32_i32_376) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %1262 = llvm.load %3 : !llvm.ptr -> i32
    %c460_i64 = arith.constant 460 : i64
    %1263 = arith.extui %1262 : i32 to i64
    %1264 = arith.addi %1263, %c460_i64 : i64
    %1265 = llvm.getelementptr %27[%1264] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1266 = llvm.load volatile %1265 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1266, %5 : i32, !llvm.ptr
    %1267 = llvm.load %3 : !llvm.ptr -> i32
    %c456_i64_377 = arith.constant 456 : i64
    %1268 = arith.extui %1267 : i32 to i64
    %1269 = arith.addi %1268, %c456_i64_377 : i64
    %1270 = llvm.getelementptr %27[%1269] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1271 = llvm.load volatile %1270 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_378 = arith.constant 1 : i32
    %1272 = arith.cmpi eq, %1271, %c1_i32_378 : i32
    %1273 = arith.extui %1272 : i1 to i32
    %c0_i32_379 = arith.constant 0 : i32
    %1274 = arith.cmpi ne, %1273, %c0_i32_379 : i32
    cf.cond_br %1274, ^bb63, ^bb64
  ^bb61:  // 2 preds: ^bb69, ^bb70
    %1275 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_380 = arith.constant 128 : i32
    %1276 = arith.addi %1275, %c128_i32_380 : i32
    %c8_i32_381 = arith.constant 8 : i32
    %1277 = arith.addi %1276, %c8_i32_381 : i32
    llvm.store %1277, %2 : i32, !llvm.ptr
    %1278 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i32_382 = arith.constant 376 : i32
    %1279 = arith.addi %1278, %c376_i32_382 : i32
    %c20_i32_383 = arith.constant 20 : i32
    %1280 = arith.addi %1279, %c20_i32_383 : i32
    %c0_i64_384 = arith.constant 0 : i64
    %1281 = arith.extui %1280 : i32 to i64
    %1282 = arith.addi %1281, %c0_i64_384 : i64
    %1283 = llvm.getelementptr %27[%1282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1284 = llvm.load volatile %1283 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_385 = arith.constant 0 : i64
    %1285 = arith.extui %1277 : i32 to i64
    %1286 = arith.addi %1285, %c0_i64_385 : i64
    %1287 = llvm.getelementptr %27[%1286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1284, %1287 {alignment = 1 : i64} : i64, !llvm.ptr
    %1288 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_386 = arith.constant 128 : i32
    %1289 = arith.addi %1288, %c128_i32_386 : i32
    %c16_i32_387 = arith.constant 16 : i32
    %1290 = arith.addi %1289, %c16_i32_387 : i32
    %1291 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i32_388 = arith.constant 376 : i32
    %1292 = arith.addi %1291, %c376_i32_388 : i32
    %c28_i32_389 = arith.constant 28 : i32
    %1293 = arith.addi %1292, %c28_i32_389 : i32
    %c0_i64_390 = arith.constant 0 : i64
    %1294 = arith.extui %1293 : i32 to i64
    %1295 = arith.addi %1294, %c0_i64_390 : i64
    %1296 = llvm.getelementptr %27[%1295] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1297 = llvm.load volatile %1296 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_391 = arith.constant 0 : i64
    %1298 = arith.extui %1290 : i32 to i64
    %1299 = arith.addi %1298, %c0_i64_391 : i64
    %1300 = llvm.getelementptr %27[%1299] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1297, %1300 {alignment = 1 : i64} : i32, !llvm.ptr
    %1301 = llvm.load %3 : !llvm.ptr -> i32
    %1302 = llvm.load %3 : !llvm.ptr -> i32
    %c388_i64_392 = arith.constant 388 : i64
    %1303 = arith.extui %1302 : i32 to i64
    %1304 = arith.addi %1303, %c388_i64_392 : i64
    %1305 = llvm.getelementptr %27[%1304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1306 = llvm.load volatile %1305 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c128_i64_393 = arith.constant 128 : i64
    %1307 = arith.extui %1301 : i32 to i64
    %1308 = arith.addi %1307, %c128_i64_393 : i64
    %1309 = llvm.getelementptr %27[%1308] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1306, %1309 {alignment = 1 : i64} : i64, !llvm.ptr
    %1310 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_394 = arith.constant 128 : i32
    %1311 = arith.addi %1310, %c128_i32_394 : i32
    %c20_i32_395 = arith.constant 20 : i32
    %1312 = arith.addi %1311, %c20_i32_395 : i32
    llvm.store %1312, %5 : i32, !llvm.ptr
    %1313 = llvm.load %17 : !llvm.ptr -> i32
    %1314 = llvm.load %3 : !llvm.ptr -> i32
    %c412_i64 = arith.constant 412 : i64
    %1315 = arith.extui %1314 : i32 to i64
    %1316 = arith.addi %1315, %c412_i64 : i64
    %1317 = llvm.getelementptr %27[%1316] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1318 = llvm.load volatile %1317 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f10(%arg0, %1312, %1313, %1318) : (!llvm.ptr, i32, i32, i32) -> ()
    %1319 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %1320 = arith.addi %1319, %c48_i32 : i32
    %1321 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_396 = arith.constant 128 : i32
    %1322 = arith.addi %1321, %c128_i32_396 : i32
    %c28_i32_397 = arith.constant 28 : i32
    %1323 = arith.addi %1322, %c28_i32_397 : i32
    %c0_i64_398 = arith.constant 0 : i64
    %1324 = arith.extui %1323 : i32 to i64
    %1325 = arith.addi %1324, %c0_i64_398 : i64
    %1326 = llvm.getelementptr %27[%1325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1327 = llvm.load volatile %1326 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1327, %17 : i32, !llvm.ptr
    %c0_i64_399 = arith.constant 0 : i64
    %1328 = arith.extui %1320 : i32 to i64
    %1329 = arith.addi %1328, %c0_i64_399 : i64
    %1330 = llvm.getelementptr %27[%1329] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1327, %1330 {alignment = 1 : i64} : i32, !llvm.ptr
    %1331 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_400 = arith.constant 24 : i32
    %1332 = arith.addi %1331, %c24_i32_400 : i32
    %c16_i32_401 = arith.constant 16 : i32
    %1333 = arith.addi %1332, %c16_i32_401 : i32
    %1334 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_402 = arith.constant 0 : i64
    %1335 = arith.extui %1334 : i32 to i64
    %1336 = arith.addi %1335, %c0_i64_402 : i64
    %1337 = llvm.getelementptr %27[%1336] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1338 = llvm.load volatile %1337 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %1338, %7 : i64, !llvm.ptr
    %c0_i64_403 = arith.constant 0 : i64
    %1339 = arith.extui %1333 : i32 to i64
    %1340 = arith.addi %1339, %c0_i64_403 : i64
    %1341 = llvm.getelementptr %27[%1340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1338, %1341 {alignment = 1 : i64} : i64, !llvm.ptr
    %1342 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_404 = arith.constant 24 : i32
    %1343 = arith.addi %1342, %c24_i32_404 : i32
    %c8_i32_405 = arith.constant 8 : i32
    %1344 = arith.addi %1343, %c8_i32_405 : i32
    %1345 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_406 = arith.constant 128 : i32
    %1346 = arith.addi %1345, %c128_i32_406 : i32
    %c12_i32 = arith.constant 12 : i32
    %1347 = arith.addi %1346, %c12_i32 : i32
    %c0_i64_407 = arith.constant 0 : i64
    %1348 = arith.extui %1347 : i32 to i64
    %1349 = arith.addi %1348, %c0_i64_407 : i64
    %1350 = llvm.getelementptr %27[%1349] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1351 = llvm.load volatile %1350 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %1351, %16 : i64, !llvm.ptr
    %c0_i64_408 = arith.constant 0 : i64
    %1352 = arith.extui %1344 : i32 to i64
    %1353 = arith.addi %1352, %c0_i64_408 : i64
    %1354 = llvm.getelementptr %27[%1353] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1351, %1354 {alignment = 1 : i64} : i64, !llvm.ptr
    %1355 = llvm.load %3 : !llvm.ptr -> i32
    %c228_i32 = arith.constant 228 : i32
    %1356 = arith.addi %1355, %c228_i32 : i32
    %c12_i32_409 = arith.constant 12 : i32
    %1357 = arith.addi %1356, %c12_i32_409 : i32
    %1358 = llvm.load %16 : !llvm.ptr -> i64
    %c0_i64_410 = arith.constant 0 : i64
    %1359 = arith.extui %1357 : i32 to i64
    %1360 = arith.addi %1359, %c0_i64_410 : i64
    %1361 = llvm.getelementptr %27[%1360] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1358, %1361 {alignment = 1 : i64} : i64, !llvm.ptr
    %1362 = llvm.load %3 : !llvm.ptr -> i32
    %c248_i32 = arith.constant 248 : i32
    %1363 = arith.addi %1362, %c248_i32 : i32
    %c8_i32_411 = arith.constant 8 : i32
    %1364 = arith.addi %1363, %c8_i32_411 : i32
    %1365 = llvm.load %17 : !llvm.ptr -> i32
    %c0_i64_412 = arith.constant 0 : i64
    %1366 = arith.extui %1364 : i32 to i64
    %1367 = arith.addi %1366, %c0_i64_412 : i64
    %1368 = llvm.getelementptr %27[%1367] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1365, %1368 {alignment = 1 : i64} : i32, !llvm.ptr
    %1369 = llvm.load %3 : !llvm.ptr -> i32
    %1370 = llvm.load %3 : !llvm.ptr -> i32
    %c132_i64_413 = arith.constant 132 : i64
    %1371 = arith.extui %1370 : i32 to i64
    %1372 = arith.addi %1371, %c132_i64_413 : i64
    %1373 = llvm.getelementptr %27[%1372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1374 = llvm.load volatile %1373 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %1374, %16 : i64, !llvm.ptr
    %c24_i64_414 = arith.constant 24 : i64
    %1375 = arith.extui %1369 : i32 to i64
    %1376 = arith.addi %1375, %c24_i64_414 : i64
    %1377 = llvm.getelementptr %27[%1376] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1374, %1377 {alignment = 1 : i64} : i64, !llvm.ptr
    %1378 = llvm.load %3 : !llvm.ptr -> i32
    %1379 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i64_415 = arith.constant 128 : i64
    %1380 = arith.extui %1379 : i32 to i64
    %1381 = arith.addi %1380, %c128_i64_415 : i64
    %1382 = llvm.getelementptr %27[%1381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1383 = llvm.load volatile %1382 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c228_i64 = arith.constant 228 : i64
    %1384 = arith.extui %1378 : i32 to i64
    %1385 = arith.addi %1384, %c228_i64 : i64
    %1386 = llvm.getelementptr %27[%1385] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1383, %1386 {alignment = 1 : i64} : i32, !llvm.ptr
    %1387 = llvm.load %3 : !llvm.ptr -> i32
    %1388 = llvm.load %16 : !llvm.ptr -> i64
    %c232_i64 = arith.constant 232 : i64
    %1389 = arith.extui %1387 : i32 to i64
    %1390 = arith.addi %1389, %c232_i64 : i64
    %1391 = llvm.getelementptr %27[%1390] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1388, %1391 {alignment = 1 : i64} : i64, !llvm.ptr
    %1392 = llvm.load %3 : !llvm.ptr -> i32
    %1393 = llvm.load %7 : !llvm.ptr -> i64
    %c248_i64 = arith.constant 248 : i64
    %1394 = arith.extui %1392 : i32 to i64
    %1395 = arith.addi %1394, %c248_i64 : i64
    %1396 = llvm.getelementptr %27[%1395] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1393, %1396 {alignment = 1 : i64} : i64, !llvm.ptr
    %1397 = llvm.load %3 : !llvm.ptr -> i32
    %c76_i32 = arith.constant 76 : i32
    %1398 = arith.addi %1397, %c76_i32 : i32
    %1399 = llvm.load %3 : !llvm.ptr -> i32
    %c495_i32_416 = arith.constant 495 : i32
    %1400 = arith.addi %1399, %c495_i32_416 : i32
    %1401 = llvm.load %3 : !llvm.ptr -> i32
    %c228_i32_417 = arith.constant 228 : i32
    %1402 = arith.addi %1401, %c228_i32_417 : i32
    %1403 = llvm.load %3 : !llvm.ptr -> i32
    %c248_i32_418 = arith.constant 248 : i32
    %1404 = arith.addi %1403, %c248_i32_418 : i32
    call @f11(%arg0, %1398, %1400, %1402, %1404) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %1405 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_419 = arith.constant 128 : i32
    %1406 = arith.addi %1405, %c128_i32_419 : i32
    %1407 = llvm.load %3 : !llvm.ptr -> i32
    %c76_i32_420 = arith.constant 76 : i32
    %1408 = arith.addi %1407, %c76_i32_420 : i32
    call @f7(%arg0, %1406, %1408) : (!llvm.ptr, i32, i32) -> ()
    %1409 = llvm.load %3 : !llvm.ptr -> i32
    %c76_i32_421 = arith.constant 76 : i32
    %1410 = arith.addi %1409, %c76_i32_421 : i32
    call @f103(%arg0, %1410) : (!llvm.ptr, i32) -> ()
    %1411 = llvm.load %3 : !llvm.ptr -> i32
    %c76_i32_422 = arith.constant 76 : i32
    %1412 = arith.addi %1411, %c76_i32_422 : i32
    call @f104(%arg0, %1412) : (!llvm.ptr, i32) -> ()
    %1413 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_423 = arith.constant 8 : i32
    %1414 = arith.addi %1413, %c8_i32_423 : i32
    %c12_i32_424 = arith.constant 12 : i32
    %1415 = arith.addi %1414, %c12_i32_424 : i32
    %1416 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_425 = arith.constant 0 : i64
    %1417 = arith.extui %1416 : i32 to i64
    %1418 = arith.addi %1417, %c0_i64_425 : i64
    %1419 = llvm.getelementptr %27[%1418] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1420 = llvm.load volatile %1419 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_426 = arith.constant 0 : i64
    %1421 = arith.extui %1415 : i32 to i64
    %1422 = arith.addi %1421, %c0_i64_426 : i64
    %1423 = llvm.getelementptr %27[%1422] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1420, %1423 {alignment = 1 : i64} : i32, !llvm.ptr
    %1424 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_427 = arith.constant 0 : i32
    %c8_i64_428 = arith.constant 8 : i64
    %1425 = arith.extui %1424 : i32 to i64
    %1426 = arith.addi %1425, %c8_i64_428 : i64
    %1427 = llvm.getelementptr %27[%1426] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_427, %1427 {alignment = 1 : i64} : i32, !llvm.ptr
    %1428 = llvm.load %3 : !llvm.ptr -> i32
    %1429 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i64_429 = arith.constant 128 : i64
    %1430 = arith.extui %1429 : i32 to i64
    %1431 = arith.addi %1430, %c128_i64_429 : i64
    %1432 = llvm.getelementptr %27[%1431] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1433 = llvm.load volatile %1432 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c12_i64_430 = arith.constant 12 : i64
    %1434 = arith.extui %1428 : i32 to i64
    %1435 = arith.addi %1434, %c12_i64_430 : i64
    %1436 = llvm.getelementptr %27[%1435] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1433, %1436 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb4
  ^bb62:  // pred: ^bb64
    %1437 = llvm.load %17 : !llvm.ptr -> i32
    %1438 = llvm.load %3 : !llvm.ptr -> i32
    %c464_i64 = arith.constant 464 : i64
    %1439 = arith.extui %1438 : i32 to i64
    %1440 = arith.addi %1439, %c464_i64 : i64
    %1441 = llvm.getelementptr %27[%1440] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1442 = llvm.load volatile %1441 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %1437, %1442) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_431 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_431) : (i32) -> ()
    llvm.unreachable
  ^bb63:  // pred: ^bb60
    %1443 = llvm.load %5 : !llvm.ptr -> i32
    %1444 = llvm.load %3 : !llvm.ptr -> i32
    %c464_i64_432 = arith.constant 464 : i64
    %1445 = arith.extui %1444 : i32 to i64
    %1446 = arith.addi %1445, %c464_i64_432 : i64
    %1447 = llvm.getelementptr %27[%1446] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1448 = llvm.load volatile %1447 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %1443, %1448) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_433 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_433) : (i32) -> ()
    llvm.unreachable
  ^bb64:  // pred: ^bb60
    %1449 = llvm.load %3 : !llvm.ptr -> i32
    %c464_i64_434 = arith.constant 464 : i64
    %1450 = arith.extui %1449 : i32 to i64
    %1451 = arith.addi %1450, %c464_i64_434 : i64
    %1452 = llvm.getelementptr %27[%1451] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1453 = llvm.load volatile %1452 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1453, %19 : i32, !llvm.ptr
    %1454 = llvm.load %3 : !llvm.ptr -> i32
    %c456_i32_435 = arith.constant 456 : i32
    %1455 = arith.addi %1454, %c456_i32_435 : i32
    %c4_i32_436 = arith.constant 4 : i32
    %c0_i32_437 = arith.constant 0 : i32
    %c4_i32_438 = arith.constant 4 : i32
    %c4_i32_439 = arith.constant 4 : i32
    call @f102(%arg0, %1455, %c4_i32_436, %c0_i32_437, %c4_i32_438, %c4_i32_439) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %1456 = llvm.load %3 : !llvm.ptr -> i32
    %c460_i64_440 = arith.constant 460 : i64
    %1457 = arith.extui %1456 : i32 to i64
    %1458 = arith.addi %1457, %c460_i64_440 : i64
    %1459 = llvm.getelementptr %27[%1458] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1460 = llvm.load volatile %1459 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1460, %17 : i32, !llvm.ptr
    %1461 = llvm.load %3 : !llvm.ptr -> i32
    %c456_i64_441 = arith.constant 456 : i64
    %1462 = arith.extui %1461 : i32 to i64
    %1463 = arith.addi %1462, %c456_i64_441 : i64
    %1464 = llvm.getelementptr %27[%1463] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1465 = llvm.load volatile %1464 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_442 = arith.constant 1 : i32
    %1466 = arith.cmpi eq, %1465, %c1_i32_442 : i32
    %1467 = arith.extui %1466 : i1 to i32
    %c0_i32_443 = arith.constant 0 : i32
    %1468 = arith.cmpi ne, %1467, %c0_i32_443 : i32
    cf.cond_br %1468, ^bb62, ^bb65
  ^bb65:  // pred: ^bb64
    %1469 = llvm.load %3 : !llvm.ptr -> i32
    %c432_i32_444 = arith.constant 432 : i32
    %1470 = arith.addi %1469, %c432_i32_444 : i32
    %c16_i32_445 = arith.constant 16 : i32
    %1471 = arith.addi %1470, %c16_i32_445 : i32
    llvm.store %1471, %20 : i32, !llvm.ptr
    %1472 = llvm.load %3 : !llvm.ptr -> i32
    %c464_i64_446 = arith.constant 464 : i64
    %1473 = arith.extui %1472 : i32 to i64
    %1474 = arith.addi %1473, %c464_i64_446 : i64
    %1475 = llvm.getelementptr %27[%1474] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1476 = llvm.load volatile %1475 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_447 = arith.constant 0 : i64
    %1477 = arith.extui %1471 : i32 to i64
    %1478 = arith.addi %1477, %c0_i64_447 : i64
    %1479 = llvm.getelementptr %27[%1478] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1476, %1479 {alignment = 1 : i64} : i32, !llvm.ptr
    %1480 = llvm.load %3 : !llvm.ptr -> i32
    %c432_i32_448 = arith.constant 432 : i32
    %1481 = arith.addi %1480, %c432_i32_448 : i32
    %c8_i32_449 = arith.constant 8 : i32
    %1482 = arith.addi %1481, %c8_i32_449 : i32
    llvm.store %1482, %2 : i32, !llvm.ptr
    %c0_i32_450 = arith.constant 0 : i32
    %c0_i64_451 = arith.constant 0 : i64
    %1483 = arith.extui %1482 : i32 to i64
    %1484 = arith.addi %1483, %c0_i64_451 : i64
    %1485 = llvm.getelementptr %27[%1484] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_450, %1485 {alignment = 1 : i64} : i32, !llvm.ptr
    %1486 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_452 = arith.constant 0 : i32
    %c452_i64_453 = arith.constant 452 : i64
    %1487 = arith.extui %1486 : i32 to i64
    %1488 = arith.addi %1487, %c452_i64_453 : i64
    %1489 = llvm.getelementptr %27[%1488] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_452, %1489 {alignment = 1 : i64} : i32, !llvm.ptr
    %1490 = llvm.load %3 : !llvm.ptr -> i32
    %1491 = llvm.load %17 : !llvm.ptr -> i32
    %c444_i64_454 = arith.constant 444 : i64
    %1492 = arith.extui %1490 : i32 to i64
    %1493 = arith.addi %1492, %c444_i64_454 : i64
    %1494 = llvm.getelementptr %27[%1493] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1491, %1494 {alignment = 1 : i64} : i32, !llvm.ptr
    %1495 = llvm.load %3 : !llvm.ptr -> i32
    %1496 = llvm.load %19 : !llvm.ptr -> i32
    %c436_i64_455 = arith.constant 436 : i64
    %1497 = arith.extui %1495 : i32 to i64
    %1498 = arith.addi %1497, %c436_i64_455 : i64
    %1499 = llvm.getelementptr %27[%1498] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1496, %1499 {alignment = 1 : i64} : i32, !llvm.ptr
    %1500 = llvm.load %3 : !llvm.ptr -> i32
    %1501 = llvm.load %5 : !llvm.ptr -> i32
    %c432_i64_456 = arith.constant 432 : i64
    %1502 = arith.extui %1500 : i32 to i64
    %1503 = arith.addi %1502, %c432_i64_456 : i64
    %1504 = llvm.getelementptr %27[%1503] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1501, %1504 {alignment = 1 : i64} : i32, !llvm.ptr
    %1505 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_457 = arith.constant 128 : i32
    %1506 = arith.addi %1505, %c128_i32_457 : i32
    %1507 = llvm.load %3 : !llvm.ptr -> i32
    %c432_i32_458 = arith.constant 432 : i32
    %1508 = arith.addi %1507, %c432_i32_458 : i32
    call @f8(%arg0, %1506, %1508) : (!llvm.ptr, i32, i32) -> ()
    %1509 = llvm.load %3 : !llvm.ptr -> i32
    %c456_i32_459 = arith.constant 456 : i32
    %1510 = arith.addi %1509, %c456_i32_459 : i32
    %c16_i32_460 = arith.constant 16 : i32
    %1511 = arith.addi %1510, %c16_i32_460 : i32
    %1512 = llvm.load %20 : !llvm.ptr -> i32
    %c0_i64_461 = arith.constant 0 : i64
    %1513 = arith.extui %1512 : i32 to i64
    %1514 = arith.addi %1513, %c0_i64_461 : i64
    %1515 = llvm.getelementptr %27[%1514] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1516 = llvm.load volatile %1515 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_462 = arith.constant 0 : i64
    %1517 = arith.extui %1511 : i32 to i64
    %1518 = arith.addi %1517, %c0_i64_462 : i64
    %1519 = llvm.getelementptr %27[%1518] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1516, %1519 {alignment = 1 : i64} : i64, !llvm.ptr
    %1520 = llvm.load %3 : !llvm.ptr -> i32
    %c456_i32_463 = arith.constant 456 : i32
    %1521 = arith.addi %1520, %c456_i32_463 : i32
    %c8_i32_464 = arith.constant 8 : i32
    %1522 = arith.addi %1521, %c8_i32_464 : i32
    %1523 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_465 = arith.constant 0 : i64
    %1524 = arith.extui %1523 : i32 to i64
    %1525 = arith.addi %1524, %c0_i64_465 : i64
    %1526 = llvm.getelementptr %27[%1525] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1527 = llvm.load volatile %1526 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_466 = arith.constant 0 : i64
    %1528 = arith.extui %1522 : i32 to i64
    %1529 = arith.addi %1528, %c0_i64_466 : i64
    %1530 = llvm.getelementptr %27[%1529] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1527, %1530 {alignment = 1 : i64} : i64, !llvm.ptr
    %1531 = llvm.load %3 : !llvm.ptr -> i32
    %1532 = llvm.load %3 : !llvm.ptr -> i32
    %c432_i64_467 = arith.constant 432 : i64
    %1533 = arith.extui %1532 : i32 to i64
    %1534 = arith.addi %1533, %c432_i64_467 : i64
    %1535 = llvm.getelementptr %27[%1534] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1536 = llvm.load volatile %1535 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %1536, %7 : i64, !llvm.ptr
    %c456_i64_468 = arith.constant 456 : i64
    %1537 = arith.extui %1531 : i32 to i64
    %1538 = arith.addi %1537, %c456_i64_468 : i64
    %1539 = llvm.getelementptr %27[%1538] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1536, %1539 {alignment = 1 : i64} : i64, !llvm.ptr
    %1540 = llvm.load %3 : !llvm.ptr -> i32
    %c480_i32_469 = arith.constant 480 : i32
    %1541 = arith.addi %1540, %c480_i32_469 : i32
    %c8_i32_470 = arith.constant 8 : i32
    %1542 = arith.addi %1541, %c8_i32_470 : i32
    %1543 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_471 = arith.constant 0 : i64
    %1544 = arith.extui %1543 : i32 to i64
    %1545 = arith.addi %1544, %c0_i64_471 : i64
    %1546 = llvm.getelementptr %27[%1545] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1547 = llvm.load volatile %1546 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_472 = arith.constant 0 : i64
    %1548 = arith.extui %1542 : i32 to i64
    %1549 = arith.addi %1548, %c0_i64_472 : i64
    %1550 = llvm.getelementptr %27[%1549] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1547, %1550 {alignment = 1 : i64} : i32, !llvm.ptr
    %1551 = llvm.load %3 : !llvm.ptr -> i32
    %1552 = llvm.load %7 : !llvm.ptr -> i64
    %c480_i64_473 = arith.constant 480 : i64
    %1553 = arith.extui %1551 : i32 to i64
    %1554 = arith.addi %1553, %c480_i64_473 : i64
    %1555 = llvm.getelementptr %27[%1554] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1552, %1555 {alignment = 1 : i64} : i64, !llvm.ptr
    %1556 = llvm.load %3 : !llvm.ptr -> i32
    %c468_i32 = arith.constant 468 : i32
    %1557 = arith.addi %1556, %c468_i32 : i32
    llvm.store %1557, %2 : i32, !llvm.ptr
    call @f77(%arg0, %1557) : (!llvm.ptr, i32) -> ()
    %1558 = llvm.load %2 : !llvm.ptr -> i32
    call @f78(%arg0, %1558) : (!llvm.ptr, i32) -> ()
    %1559 = llvm.load %3 : !llvm.ptr -> i32
    %c416_i32_474 = arith.constant 416 : i32
    %1560 = arith.addi %1559, %c416_i32_474 : i32
    %1561 = llvm.load %3 : !llvm.ptr -> i32
    %c480_i32_475 = arith.constant 480 : i32
    %1562 = arith.addi %1561, %c480_i32_475 : i32
    call @f72(%arg0, %1560, %1562) : (!llvm.ptr, i32, i32) -> ()
    %1563 = llvm.load %3 : !llvm.ptr -> i32
    %c420_i64 = arith.constant 420 : i64
    %1564 = arith.extui %1563 : i32 to i64
    %1565 = arith.addi %1564, %c420_i64 : i64
    %1566 = llvm.getelementptr %27[%1565] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1567 = llvm.load volatile %1566 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1568 = llvm.load %3 : !llvm.ptr -> i32
    %c424_i64 = arith.constant 424 : i64
    %1569 = arith.extui %1568 : i32 to i64
    %1570 = arith.addi %1569, %c424_i64 : i64
    %1571 = llvm.getelementptr %27[%1570] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1572 = llvm.load volatile %1571 {alignment = 1 : i64} : !llvm.ptr -> i32
    %1573 = llvm.load %6 : !llvm.ptr -> i32
    %1574 = llvm.load %4 : !llvm.ptr -> i32
    %1575 = call @f99(%arg0, %1567, %1572, %1573, %1574) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %1575, %2 : i32, !llvm.ptr
    %1576 = llvm.load %3 : !llvm.ptr -> i32
    %c416_i32_476 = arith.constant 416 : i32
    %1577 = arith.addi %1576, %c416_i32_476 : i32
    call @f103(%arg0, %1577) : (!llvm.ptr, i32) -> ()
    %1578 = llvm.load %3 : !llvm.ptr -> i32
    %c416_i32_477 = arith.constant 416 : i32
    %1579 = arith.addi %1578, %c416_i32_477 : i32
    call @f104(%arg0, %1579) : (!llvm.ptr, i32) -> ()
    %1580 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_478 = arith.constant 0 : i32
    %1581 = arith.cmpi ne, %1580, %c0_i32_478 : i32
    cf.cond_br %1581, ^bb66, ^bb67
  ^bb66:  // pred: ^bb65
    %1582 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i32_479 = arith.constant 376 : i32
    %1583 = arith.addi %1582, %c376_i32_479 : i32
    %1584 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_480 = arith.constant 128 : i32
    %1585 = arith.addi %1584, %c128_i32_480 : i32
    %c40_i32_481 = arith.constant 40 : i32
    %1586 = call @f187(%arg0, %1583, %1585, %c40_i32_481) : (!llvm.ptr, i32, i32, i32) -> i32
    %1587 = llvm.load %3 : !llvm.ptr -> i32
    %c408_i64 = arith.constant 408 : i64
    %1588 = arith.extui %1587 : i32 to i64
    %1589 = arith.addi %1588, %c408_i64 : i64
    %1590 = llvm.getelementptr %27[%1589] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1591 = llvm.load volatile %1590 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1591, %17 : i32, !llvm.ptr
    %c0_i32_482 = arith.constant 0 : i32
    %1592 = arith.cmpi eq, %1591, %c0_i32_482 : i32
    %1593 = arith.extui %1592 : i1 to i32
    %c0_i32_483 = arith.constant 0 : i32
    %1594 = arith.cmpi ne, %1593, %c0_i32_483 : i32
    cf.cond_br %1594, ^bb6, ^bb68
  ^bb67:  // pred: ^bb65
    %1595 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483645_i32 = arith.constant -2147483645 : i32
    %c376_i64_484 = arith.constant 376 : i64
    %1596 = arith.extui %1595 : i32 to i64
    %1597 = arith.addi %1596, %c376_i64_484 : i64
    %1598 = llvm.getelementptr %27[%1597] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483645_i32, %1598 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb68:  // pred: ^bb66
    %c0_i32_485 = arith.constant 0 : i32
    llvm.store %c0_i32_485, %2 : i32, !llvm.ptr
    cf.br ^bb70
  ^bb69:  // pred: ^bb72
    %1599 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_486 = arith.constant 128 : i32
    %1600 = arith.addi %1599, %c128_i32_486 : i32
    %1601 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i32_487 = arith.constant 376 : i32
    %1602 = arith.addi %1601, %c376_i32_487 : i32
    call @f9(%arg0, %1600, %1602) : (!llvm.ptr, i32, i32) -> ()
    %1603 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i64_488 = arith.constant 128 : i64
    %1604 = arith.extui %1603 : i32 to i64
    %1605 = arith.addi %1604, %c128_i64_488 : i64
    %1606 = llvm.getelementptr %27[%1605] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1607 = llvm.load volatile %1606 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1607, %2 : i32, !llvm.ptr
    %c-2147483638_i32_489 = arith.constant -2147483638 : i32
    %1608 = arith.cmpi eq, %1607, %c-2147483638_i32_489 : i32
    %1609 = arith.extui %1608 : i1 to i32
    %c0_i32_490 = arith.constant 0 : i32
    %1610 = arith.cmpi ne, %1609, %c0_i32_490 : i32
    cf.cond_br %1610, ^bb61, ^bb73
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %1611 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_491 = arith.constant 12 : i32
    %1612 = arith.cmpi eq, %1611, %c12_i32_491 : i32
    %1613 = arith.extui %1612 : i1 to i32
    %c0_i32_492 = arith.constant 0 : i32
    %1614 = arith.cmpi ne, %1613, %c0_i32_492 : i32
    cf.cond_br %1614, ^bb61, ^bb71
  ^bb71:  // pred: ^bb70
    %1615 = llvm.load %3 : !llvm.ptr -> i32
    %c376_i32_493 = arith.constant 376 : i32
    %1616 = arith.addi %1615, %c376_i32_493 : i32
    %1617 = llvm.load %2 : !llvm.ptr -> i32
    %1618 = arith.addi %1616, %1617 : i32
    llvm.store %1618, %5 : i32, !llvm.ptr
    %1619 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_494 = arith.constant 1 : i32
    %1620 = arith.addi %1619, %c1_i32_494 : i32
    llvm.store %1620, %2 : i32, !llvm.ptr
    %1621 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_495 = arith.constant 0 : i64
    %1622 = arith.extui %1621 : i32 to i64
    %1623 = arith.addi %1622, %c0_i64_495 : i64
    %1624 = llvm.getelementptr %27[%1623] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1625 = llvm.load volatile %1624 {alignment = 1 : i64} : !llvm.ptr -> i8
    %1626 = arith.extui %1625 : i8 to i32
    %c0_i32_496 = arith.constant 0 : i32
    %1627 = arith.cmpi eq, %1626, %c0_i32_496 : i32
    %1628 = arith.extui %1627 : i1 to i32
    %c0_i32_497 = arith.constant 0 : i32
    %1629 = arith.cmpi ne, %1628, %c0_i32_497 : i32
    cf.cond_br %1629, ^bb70, ^bb72
  ^bb72:  // pred: ^bb71
    cf.br ^bb69
  ^bb73:  // pred: ^bb69
    %1630 = llvm.load %3 : !llvm.ptr -> i32
    %c40_i32_498 = arith.constant 40 : i32
    %1631 = arith.addi %1630, %c40_i32_498 : i32
    %1632 = llvm.load %3 : !llvm.ptr -> i32
    %c148_i32_499 = arith.constant 148 : i32
    %1633 = arith.addi %1632, %c148_i32_499 : i32
    %c0_i64_500 = arith.constant 0 : i64
    %1634 = arith.extui %1633 : i32 to i64
    %1635 = arith.addi %1634, %c0_i64_500 : i64
    %1636 = llvm.getelementptr %27[%1635] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1637 = llvm.load volatile %1636 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_501 = arith.constant 0 : i64
    %1638 = arith.extui %1631 : i32 to i64
    %1639 = arith.addi %1638, %c0_i64_501 : i64
    %1640 = llvm.getelementptr %27[%1639] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1637, %1640 {alignment = 1 : i64} : i32, !llvm.ptr
    %1641 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_502 = arith.constant 32 : i32
    %1642 = arith.addi %1641, %c32_i32_502 : i32
    %1643 = llvm.load %3 : !llvm.ptr -> i32
    %c140_i32_503 = arith.constant 140 : i32
    %1644 = arith.addi %1643, %c140_i32_503 : i32
    %c0_i64_504 = arith.constant 0 : i64
    %1645 = arith.extui %1644 : i32 to i64
    %1646 = arith.addi %1645, %c0_i64_504 : i64
    %1647 = llvm.getelementptr %27[%1646] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1648 = llvm.load volatile %1647 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_505 = arith.constant 0 : i64
    %1649 = arith.extui %1642 : i32 to i64
    %1650 = arith.addi %1649, %c0_i64_505 : i64
    %1651 = llvm.getelementptr %27[%1650] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1648, %1651 {alignment = 1 : i64} : i64, !llvm.ptr
    %1652 = llvm.load %3 : !llvm.ptr -> i32
    %1653 = llvm.load %3 : !llvm.ptr -> i32
    %c132_i64_506 = arith.constant 132 : i64
    %1654 = arith.extui %1653 : i32 to i64
    %1655 = arith.addi %1654, %c132_i64_506 : i64
    %1656 = llvm.getelementptr %27[%1655] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1657 = llvm.load volatile %1656 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c24_i64_507 = arith.constant 24 : i64
    %1658 = arith.extui %1652 : i32 to i64
    %1659 = arith.addi %1658, %c24_i64_507 : i64
    %1660 = llvm.getelementptr %27[%1659] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1657, %1660 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb5
  }
  func.func @f2(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %9 = arith.cmpi eq, %8, %c2_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %13 = arith.addi %12, %c4_i32 : i32
    llvm.store %13, %0 : i32, !llvm.ptr
    call @f103(%arg0, %13) : (!llvm.ptr, i32) -> ()
    %14 = llvm.load %0 : !llvm.ptr -> i32
    call @f104(%arg0, %14) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  }
  func.func @f3(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %9 = arith.cmpi eq, %8, %c-2147483648_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %0 : !llvm.ptr -> i32
    call @f103(%arg0, %12) : (!llvm.ptr, i32) -> ()
    %13 = llvm.load %0 : !llvm.ptr -> i32
    call @f104(%arg0, %13) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  }
  func.func @f4(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> i32
    %7 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %8 : !llvm.ptr -> i64
    %11 = arith.trunci %10 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %4[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %1 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %17 = arith.addi %16, %c-2147483647_i32 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %19 = arith.cmpi slt, %18, %c-2147483638_i32 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_2 : i32
    %22 = arith.select %21, %17, %c0_i32_1 : i32
    llvm.store %22, %1 : i32, !llvm.ptr
    %c9_i32 = arith.constant 9 : i32
    %23 = arith.cmpi ugt, %22, %c9_i32 : i32
    %24 = arith.extui %23 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_3 : i32
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // 3 preds: ^bb3, ^bb6, ^bb15
    return
  ^bb3:  // pred: ^bb1
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %27 = arith.addi %26, %c4_i32 : i32
    call @f27(%arg0, %27) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_4 = arith.constant 1 : i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %29 = arith.cmpi ule, %28, %c31_i32 : i32
    %30 = scf.if %29 -> (i32) {
      %82 = arith.shli %c1_i32_4, %28 : i32
      scf.yield %82 : i32
    } else {
      %c0_i32_14 = arith.constant 0 : i32
      scf.yield %c0_i32_14 : i32
    }
    %c894_i32 = arith.constant 894 : i32
    %31 = arith.andi %30, %c894_i32 : i32
    %c0_i32_5 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_5 : i32
    cf.cond_br %32, ^bb6, ^bb7
  ^bb5:  // pred: ^bb7
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c12_i64 : i64
    %36 = llvm.getelementptr %4[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %37, %0 : i32, !llvm.ptr
    call @f77(%arg0, %37) : (!llvm.ptr, i32) -> ()
    %38 = llvm.load %0 : !llvm.ptr -> i32
    call @f79(%arg0, %38) : (!llvm.ptr, i32) -> ()
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %40 = arith.addi %39, %c24_i32 : i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c16_i64 : i64
    %44 = llvm.getelementptr %4[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c20_i64 : i64
    %49 = llvm.getelementptr %4[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i32
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_6 = arith.constant 12 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c12_i64_6 : i64
    %54 = llvm.getelementptr %4[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c16_i64_7 = arith.constant 16 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c16_i64_7 : i64
    %58 = llvm.getelementptr %4[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi ult, %59, %11 : i32
    cf.cond_br %60, ^bb9, ^bb10
  ^bb6:  // 2 preds: ^bb4, ^bb8
    cf.br ^bb2
  ^bb7:  // pred: ^bb4
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_8 : i32
    cf.cond_br %62, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %64 = arith.addi %63, %c12_i32 : i32
    call @f27(%arg0, %64) : (!llvm.ptr, i32) -> ()
    %65 = llvm.load %0 : !llvm.ptr -> i32
    call @f103(%arg0, %65) : (!llvm.ptr, i32) -> ()
    %66 = llvm.load %0 : !llvm.ptr -> i32
    call @f104(%arg0, %66) : (!llvm.ptr, i32) -> ()
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb5, ^bb10
    %67 = llvm.getelementptr inbounds %9[%59] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %68 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64_9 = arith.constant 0 : i64
    %70 = arith.cmpi eq, %69, %c0_i64_9 : i64
    cf.cond_br %70, ^bb12, ^bb11
  ^bb10:  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %71 = llvm.getelementptr %68[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %72 = llvm.getelementptr %68[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %73 = llvm.getelementptr %68[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %74 = llvm.load %71 : !llvm.ptr -> !llvm.ptr
    %75 = llvm.load %73 : !llvm.ptr -> !llvm.ptr
    %76 = llvm.ptrtoint %74 : !llvm.ptr to i64
    %c0_i64_10 = arith.constant 0 : i64
    %77 = arith.cmpi eq, %76, %c0_i64_10 : i64
    cf.cond_br %77, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c4_i32_11 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_11) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %78 = llvm.load %72 : !llvm.ptr -> i32
    %79 = arith.cmpi ne, %6, %78 : i32
    cf.cond_br %79, ^bb16, ^bb15
  ^bb14:  // pred: ^bb11
    %c3_i32_12 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_12) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %80 = llvm.call %74(%75, %40, %45, %50) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %c4_i32_13 = arith.constant 4 : i32
    call @f56(%arg0, %81, %c28_i32, %c4_i32_13) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb16:  // pred: ^bb13
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb15
  }
  func.func @f5(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1_i32_7 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %7 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %8 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %9 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %10 : i32, !llvm.ptr
    %11 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %16 = llvm.load %12 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %17 = arith.subi %16, %c192_i32 : i32
    llvm.store %17, %3 : i32, !llvm.ptr
    llvm.store %17, %12 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32, %4 : i32, !llvm.ptr
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_11 = arith.constant -2147483648 : i32
    %c8_i64 = arith.constant 8 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c8_i64 : i64
    %21 = llvm.getelementptr %15[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_11, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %23 = arith.cmpi ult, %22, %c32_i32 : i32
    %24 = arith.extui %23 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_12 : i32
    cf.cond_br %25, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb13
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32_13 = arith.constant 192 : i32
    %27 = arith.addi %26, %c192_i32_13 : i32
    llvm.store %27, %12 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb1, ^bb7, ^bb11
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c12_i64 : i64
    %32 = llvm.getelementptr %15[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %34 = arith.addi %33, %c20_i32 : i32
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %36 = arith.addi %35, %c8_i32 : i32
    %c20_i32_14 = arith.constant 20 : i32
    %37 = arith.addi %36, %c20_i32_14 : i32
    %c0_i64_15 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_15 : i64
    %40 = llvm.getelementptr %15[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %42 = arith.extui %34 : i32 to i64
    %43 = arith.addi %42, %c0_i64_16 : i64
    %44 = llvm.getelementptr %15[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %46 = arith.addi %45, %c12_i32 : i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_17 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32_17 : i32
    %c12_i32_18 = arith.constant 12 : i32
    %49 = arith.addi %48, %c12_i32_18 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64_19 : i64
    %52 = llvm.getelementptr %15[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_20 = arith.constant 0 : i64
    %54 = arith.extui %46 : i32 to i64
    %55 = arith.addi %54, %c0_i64_20 : i64
    %56 = llvm.getelementptr %15[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_21 = arith.constant 12 : i64
    %59 = arith.extui %58 : i32 to i64
    %60 = arith.addi %59, %c12_i64_21 : i64
    %61 = llvm.getelementptr %15[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = llvm.load volatile %61 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c4_i64 = arith.constant 4 : i64
    %63 = arith.extui %57 : i32 to i64
    %64 = arith.addi %63, %c4_i64 : i64
    %65 = llvm.getelementptr %15[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %62, %65 {alignment = 1 : i64} : i64, !llvm.ptr
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %c0_i64_23 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_23 : i64
    %69 = llvm.getelementptr %15[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_22, %69 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %70 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_24 = arith.constant 8 : i32
    %71 = arith.addi %70, %c8_i32_24 : i32
    call @f4(%arg0, %71) : (!llvm.ptr, i32) -> ()
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c7_i64 = arith.constant 7 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c7_i64 : i64
    %75 = llvm.getelementptr %15[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %5 : i32, !llvm.ptr
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i64 = arith.constant 3 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c3_i64 : i64
    %80 = llvm.getelementptr %15[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %4 : i32, !llvm.ptr
    %82 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483648_i32_25 = arith.constant -2147483648 : i32
    %c8_i64_26 = arith.constant 8 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c8_i64_26 : i64
    %85 = llvm.getelementptr %15[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32_25, %85 {alignment = 1 : i64} : i32, !llvm.ptr
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %87 = arith.cmpi uge, %86, %c64_i32 : i32
    %88 = arith.extui %87 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %89 = arith.cmpi ne, %88, %c0_i32_27 : i32
    cf.cond_br %89, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_28 = arith.constant 8 : i32
    %91 = arith.addi %90, %c8_i32_28 : i32
    call @f4(%arg0, %91) : (!llvm.ptr, i32) -> ()
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32 = arith.constant 104 : i32
    %93 = arith.addi %92, %c104_i32 : i32
    %c34_i32 = arith.constant 34 : i32
    %94 = arith.addi %93, %c34_i32 : i32
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %c34_i32_29 = arith.constant 34 : i32
    %96 = arith.addi %95, %c34_i32_29 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c0_i64_30 : i64
    %99 = llvm.getelementptr %15[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i8
    %101 = arith.extui %100 : i8 to i32
    %c0_i64_31 = arith.constant 0 : i64
    %102 = arith.extui %94 : i32 to i64
    %103 = arith.addi %102, %c0_i64_31 : i64
    %104 = llvm.getelementptr %15[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = arith.trunci %101 : i32 to i8
    llvm.store volatile %105, %104 {alignment = 1 : i64} : i8, !llvm.ptr
    %106 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_32 = arith.constant 104 : i32
    %107 = arith.addi %106, %c104_i32_32 : i32
    %c2_i32 = arith.constant 2 : i32
    %108 = arith.addi %107, %c2_i32 : i32
    %109 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32_33 = arith.constant 2 : i32
    %110 = arith.addi %109, %c2_i32_33 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %111 = arith.extui %110 : i32 to i64
    %112 = arith.addi %111, %c0_i64_34 : i64
    %113 = llvm.getelementptr %15[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = llvm.load volatile %113 {alignment = 1 : i64} : !llvm.ptr -> i8
    %115 = arith.extui %114 : i8 to i32
    %c0_i64_35 = arith.constant 0 : i64
    %116 = arith.extui %108 : i32 to i64
    %117 = arith.addi %116, %c0_i64_35 : i64
    %118 = llvm.getelementptr %15[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = arith.trunci %115 : i32 to i8
    llvm.store volatile %119, %118 {alignment = 1 : i64} : i8, !llvm.ptr
    %120 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_36 = arith.constant 104 : i32
    %121 = arith.addi %120, %c104_i32_36 : i32
    %c19_i32 = arith.constant 19 : i32
    %122 = arith.addi %121, %c19_i32 : i32
    %123 = llvm.load %1 : !llvm.ptr -> i32
    %c19_i32_37 = arith.constant 19 : i32
    %124 = arith.addi %123, %c19_i32_37 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c0_i64_38 : i64
    %127 = llvm.getelementptr %15[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %128 = llvm.load volatile %127 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %129 = arith.extui %122 : i32 to i64
    %130 = arith.addi %129, %c0_i64_39 : i64
    %131 = llvm.getelementptr %15[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %128, %131 {alignment = 1 : i64} : i64, !llvm.ptr
    %132 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_40 = arith.constant 104 : i32
    %133 = arith.addi %132, %c104_i32_40 : i32
    %c31_i32 = arith.constant 31 : i32
    %134 = arith.addi %133, %c31_i32 : i32
    %135 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32_41 = arith.constant 31 : i32
    %136 = arith.addi %135, %c31_i32_41 : i32
    %c0_i64_42 = arith.constant 0 : i64
    %137 = arith.extui %136 : i32 to i64
    %138 = arith.addi %137, %c0_i64_42 : i64
    %139 = llvm.getelementptr %15[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = llvm.load volatile %139 {alignment = 1 : i64} : !llvm.ptr -> i8
    %141 = arith.extui %140 : i8 to i32
    %c0_i64_43 = arith.constant 0 : i64
    %142 = arith.extui %134 : i32 to i64
    %143 = arith.addi %142, %c0_i64_43 : i64
    %144 = llvm.getelementptr %15[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = arith.trunci %141 : i32 to i8
    llvm.store volatile %145, %144 {alignment = 1 : i64} : i8, !llvm.ptr
    %146 = llvm.load %3 : !llvm.ptr -> i32
    %147 = llvm.load %5 : !llvm.ptr -> i32
    %c111_i64 = arith.constant 111 : i64
    %148 = arith.extui %146 : i32 to i64
    %149 = arith.addi %148, %c111_i64 : i64
    %150 = llvm.getelementptr %15[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %147, %150 {alignment = 1 : i64} : i32, !llvm.ptr
    %151 = llvm.load %3 : !llvm.ptr -> i32
    %152 = llvm.load %4 : !llvm.ptr -> i32
    %c107_i64 = arith.constant 107 : i64
    %153 = arith.extui %151 : i32 to i64
    %154 = arith.addi %153, %c107_i64 : i64
    %155 = llvm.getelementptr %15[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %152, %155 {alignment = 1 : i64} : i32, !llvm.ptr
    %156 = llvm.load %3 : !llvm.ptr -> i32
    %157 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c32_i64 : i64
    %160 = llvm.getelementptr %15[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i16
    %162 = arith.extui %161 : i16 to i32
    %c136_i64 = arith.constant 136 : i64
    %163 = arith.extui %156 : i32 to i64
    %164 = arith.addi %163, %c136_i64 : i64
    %165 = llvm.getelementptr %15[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %166 = arith.trunci %162 : i32 to i16
    llvm.store volatile %166, %165 {alignment = 1 : i64} : i16, !llvm.ptr
    %167 = llvm.load %3 : !llvm.ptr -> i32
    %168 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %169 = arith.extui %168 : i32 to i64
    %170 = arith.addi %169, %c0_i64_44 : i64
    %171 = llvm.getelementptr %15[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %172 = llvm.load volatile %171 {alignment = 1 : i64} : !llvm.ptr -> i16
    %173 = arith.extui %172 : i16 to i32
    %c104_i64 = arith.constant 104 : i64
    %174 = arith.extui %167 : i32 to i64
    %175 = arith.addi %174, %c104_i64 : i64
    %176 = llvm.getelementptr %15[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %177 = arith.trunci %173 : i32 to i16
    llvm.store volatile %177, %176 {alignment = 1 : i64} : i16, !llvm.ptr
    %178 = llvm.load %3 : !llvm.ptr -> i32
    %179 = llvm.load %1 : !llvm.ptr -> i32
    %c11_i64 = arith.constant 11 : i64
    %180 = arith.extui %179 : i32 to i64
    %181 = arith.addi %180, %c11_i64 : i64
    %182 = llvm.getelementptr %15[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %183 = llvm.load volatile %182 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c115_i64 = arith.constant 115 : i64
    %184 = arith.extui %178 : i32 to i64
    %185 = arith.addi %184, %c115_i64 : i64
    %186 = llvm.getelementptr %15[%185] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %183, %186 {alignment = 1 : i64} : i64, !llvm.ptr
    %187 = llvm.load %3 : !llvm.ptr -> i32
    %188 = llvm.load %1 : !llvm.ptr -> i32
    %c27_i64 = arith.constant 27 : i64
    %189 = arith.extui %188 : i32 to i64
    %190 = arith.addi %189, %c27_i64 : i64
    %191 = llvm.getelementptr %15[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %192 = llvm.load volatile %191 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c131_i64 = arith.constant 131 : i64
    %193 = arith.extui %187 : i32 to i64
    %194 = arith.addi %193, %c131_i64 : i64
    %195 = llvm.getelementptr %15[%194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %192, %195 {alignment = 1 : i64} : i32, !llvm.ptr
    %196 = llvm.load %1 : !llvm.ptr -> i32
    %c35_i64 = arith.constant 35 : i64
    %197 = arith.extui %196 : i32 to i64
    %198 = arith.addi %197, %c35_i64 : i64
    %199 = llvm.getelementptr %15[%198] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %200 = llvm.load volatile %199 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %200, %6 : i64, !llvm.ptr
    %201 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_45 = arith.constant 104 : i32
    %202 = arith.addi %201, %c104_i32_45 : i32
    %c51_i32 = arith.constant 51 : i32
    %203 = arith.addi %202, %c51_i32 : i32
    %204 = llvm.load %1 : !llvm.ptr -> i32
    %c51_i32_46 = arith.constant 51 : i32
    %205 = arith.addi %204, %c51_i32_46 : i32
    %c0_i64_47 = arith.constant 0 : i64
    %206 = arith.extui %205 : i32 to i64
    %207 = arith.addi %206, %c0_i64_47 : i64
    %208 = llvm.getelementptr %15[%207] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %209 = llvm.load volatile %208 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_48 = arith.constant 0 : i64
    %210 = arith.extui %203 : i32 to i64
    %211 = arith.addi %210, %c0_i64_48 : i64
    %212 = llvm.getelementptr %15[%211] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %209, %212 {alignment = 1 : i64} : i64, !llvm.ptr
    %213 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_49 = arith.constant 104 : i32
    %214 = arith.addi %213, %c104_i32_49 : i32
    %c63_i32 = arith.constant 63 : i32
    %215 = arith.addi %214, %c63_i32 : i32
    %216 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_50 = arith.constant 63 : i32
    %217 = arith.addi %216, %c63_i32_50 : i32
    %c0_i64_51 = arith.constant 0 : i64
    %218 = arith.extui %217 : i32 to i64
    %219 = arith.addi %218, %c0_i64_51 : i64
    %220 = llvm.getelementptr %15[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %221 = llvm.load volatile %220 {alignment = 1 : i64} : !llvm.ptr -> i8
    %222 = arith.extui %221 : i8 to i32
    %c0_i64_52 = arith.constant 0 : i64
    %223 = arith.extui %215 : i32 to i64
    %224 = arith.addi %223, %c0_i64_52 : i64
    %225 = llvm.getelementptr %15[%224] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %226 = arith.trunci %222 : i32 to i8
    llvm.store volatile %226, %225 {alignment = 1 : i64} : i8, !llvm.ptr
    %227 = llvm.load %3 : !llvm.ptr -> i32
    %228 = llvm.load %6 : !llvm.ptr -> i64
    %c139_i64 = arith.constant 139 : i64
    %229 = arith.extui %227 : i32 to i64
    %230 = arith.addi %229, %c139_i64 : i64
    %231 = llvm.getelementptr %15[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %228, %231 {alignment = 1 : i64} : i64, !llvm.ptr
    %232 = llvm.load %3 : !llvm.ptr -> i32
    %233 = llvm.load %1 : !llvm.ptr -> i32
    %c43_i64 = arith.constant 43 : i64
    %234 = arith.extui %233 : i32 to i64
    %235 = arith.addi %234, %c43_i64 : i64
    %236 = llvm.getelementptr %15[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %237 = llvm.load volatile %236 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c147_i64 = arith.constant 147 : i64
    %238 = arith.extui %232 : i32 to i64
    %239 = arith.addi %238, %c147_i64 : i64
    %240 = llvm.getelementptr %15[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %237, %240 {alignment = 1 : i64} : i64, !llvm.ptr
    %241 = llvm.load %3 : !llvm.ptr -> i32
    %242 = llvm.load %1 : !llvm.ptr -> i32
    %c59_i64 = arith.constant 59 : i64
    %243 = arith.extui %242 : i32 to i64
    %244 = arith.addi %243, %c59_i64 : i64
    %245 = llvm.getelementptr %15[%244] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %246 = llvm.load volatile %245 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c163_i64 = arith.constant 163 : i64
    %247 = arith.extui %241 : i32 to i64
    %248 = arith.addi %247, %c163_i64 : i64
    %249 = llvm.getelementptr %15[%248] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %246, %249 {alignment = 1 : i64} : i32, !llvm.ptr
    %250 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_53 = arith.constant 8 : i32
    %251 = arith.addi %250, %c8_i32_53 : i32
    %c2_i32_54 = arith.constant 2 : i32
    %c0_i32_55 = arith.constant 0 : i32
    %c1_i32_56 = arith.constant 1 : i32
    %c32_i32_57 = arith.constant 32 : i32
    call @f102(%arg0, %251, %c2_i32_54, %c0_i32_55, %c1_i32_56, %c32_i32_57) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %252 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_58 = arith.constant 12 : i64
    %253 = arith.extui %252 : i32 to i64
    %254 = arith.addi %253, %c12_i64_58 : i64
    %255 = llvm.getelementptr %15[%254] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %256 = llvm.load volatile %255 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %256, %7 : i32, !llvm.ptr
    %257 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_59 = arith.constant 8 : i64
    %258 = arith.extui %257 : i32 to i64
    %259 = arith.addi %258, %c8_i64_59 : i64
    %260 = llvm.getelementptr %15[%259] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %261 = llvm.load volatile %260 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_60 = arith.constant 1 : i32
    %262 = arith.cmpi eq, %261, %c1_i32_60 : i32
    %263 = arith.extui %262 : i1 to i32
    %c0_i32_61 = arith.constant 0 : i32
    %264 = arith.cmpi ne, %263, %c0_i32_61 : i32
    cf.cond_br %264, ^bb9, ^bb10
  ^bb7:  // pred: ^bb5
    %c-2147483648_i32_62 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32_62, %4 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb8:  // pred: ^bb10
    %265 = llvm.load %9 : !llvm.ptr -> i32
    %266 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %267 = arith.extui %266 : i32 to i64
    %268 = arith.addi %267, %c16_i64 : i64
    %269 = llvm.getelementptr %15[%268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %270 = llvm.load volatile %269 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %265, %270) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb9:  // pred: ^bb6
    %271 = llvm.load %7 : !llvm.ptr -> i32
    %272 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64_63 = arith.constant 16 : i64
    %273 = arith.extui %272 : i32 to i64
    %274 = arith.addi %273, %c16_i64_63 : i64
    %275 = llvm.getelementptr %15[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %276 = llvm.load volatile %275 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %271, %276) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_64 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_64) : (i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb6
    %277 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64_65 = arith.constant 16 : i64
    %278 = arith.extui %277 : i32 to i64
    %279 = arith.addi %278, %c16_i64_65 : i64
    %280 = llvm.getelementptr %15[%279] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %281 = llvm.load volatile %280 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %281, %8 : i32, !llvm.ptr
    %282 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_66 = arith.constant 8 : i32
    %283 = arith.addi %282, %c8_i32_66 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_67 = arith.constant 0 : i32
    %c4_i32_68 = arith.constant 4 : i32
    %c4_i32_69 = arith.constant 4 : i32
    call @f102(%arg0, %283, %c4_i32, %c0_i32_67, %c4_i32_68, %c4_i32_69) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %284 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_70 = arith.constant 12 : i64
    %285 = arith.extui %284 : i32 to i64
    %286 = arith.addi %285, %c12_i64_70 : i64
    %287 = llvm.getelementptr %15[%286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %288 = llvm.load volatile %287 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %288, %9 : i32, !llvm.ptr
    %289 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_71 = arith.constant 8 : i64
    %290 = arith.extui %289 : i32 to i64
    %291 = arith.addi %290, %c8_i64_71 : i64
    %292 = llvm.getelementptr %15[%291] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %293 = llvm.load volatile %292 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_72 = arith.constant 1 : i32
    %294 = arith.cmpi eq, %293, %c1_i32_72 : i32
    %295 = arith.extui %294 : i1 to i32
    %c0_i32_73 = arith.constant 0 : i32
    %296 = arith.cmpi ne, %295, %c0_i32_73 : i32
    cf.cond_br %296, ^bb8, ^bb11
  ^bb11:  // pred: ^bb10
    %297 = llvm.load %3 : !llvm.ptr -> i32
    %c168_i32 = arith.constant 168 : i32
    %298 = arith.addi %297, %c168_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %299 = arith.addi %298, %c16_i32 : i32
    llvm.store %299, %10 : i32, !llvm.ptr
    %300 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64_74 = arith.constant 16 : i64
    %301 = arith.extui %300 : i32 to i64
    %302 = arith.addi %301, %c16_i64_74 : i64
    %303 = llvm.getelementptr %15[%302] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %304 = llvm.load volatile %303 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_75 = arith.constant 0 : i64
    %305 = arith.extui %299 : i32 to i64
    %306 = arith.addi %305, %c0_i64_75 : i64
    %307 = llvm.getelementptr %15[%306] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %304, %307 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_76 = arith.constant 0 : i32
    llvm.store %c0_i32_76, %5 : i32, !llvm.ptr
    %308 = llvm.load %3 : !llvm.ptr -> i32
    %c168_i32_77 = arith.constant 168 : i32
    %309 = arith.addi %308, %c168_i32_77 : i32
    %c8_i32_78 = arith.constant 8 : i32
    %310 = arith.addi %309, %c8_i32_78 : i32
    llvm.store %310, %4 : i32, !llvm.ptr
    %c0_i32_79 = arith.constant 0 : i32
    %c0_i64_80 = arith.constant 0 : i64
    %311 = arith.extui %310 : i32 to i64
    %312 = arith.addi %311, %c0_i64_80 : i64
    %313 = llvm.getelementptr %15[%312] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_79, %313 {alignment = 1 : i64} : i32, !llvm.ptr
    %314 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_81 = arith.constant 0 : i32
    %c188_i64 = arith.constant 188 : i64
    %315 = arith.extui %314 : i32 to i64
    %316 = arith.addi %315, %c188_i64 : i64
    %317 = llvm.getelementptr %15[%316] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_81, %317 {alignment = 1 : i64} : i32, !llvm.ptr
    %318 = llvm.load %3 : !llvm.ptr -> i32
    %319 = llvm.load %9 : !llvm.ptr -> i32
    %c180_i64 = arith.constant 180 : i64
    %320 = arith.extui %318 : i32 to i64
    %321 = arith.addi %320, %c180_i64 : i64
    %322 = llvm.getelementptr %15[%321] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %319, %322 {alignment = 1 : i64} : i32, !llvm.ptr
    %323 = llvm.load %3 : !llvm.ptr -> i32
    %324 = llvm.load %8 : !llvm.ptr -> i32
    %c172_i64 = arith.constant 172 : i64
    %325 = arith.extui %323 : i32 to i64
    %326 = arith.addi %325, %c172_i64 : i64
    %327 = llvm.getelementptr %15[%326] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %324, %327 {alignment = 1 : i64} : i32, !llvm.ptr
    %328 = llvm.load %3 : !llvm.ptr -> i32
    %329 = llvm.load %7 : !llvm.ptr -> i32
    %c168_i64 = arith.constant 168 : i64
    %330 = arith.extui %328 : i32 to i64
    %331 = arith.addi %330, %c168_i64 : i64
    %332 = llvm.getelementptr %15[%331] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %329, %332 {alignment = 1 : i64} : i32, !llvm.ptr
    %333 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_82 = arith.constant 104 : i32
    %334 = arith.addi %333, %c104_i32_82 : i32
    %335 = llvm.load %3 : !llvm.ptr -> i32
    %c168_i32_83 = arith.constant 168 : i32
    %336 = arith.addi %335, %c168_i32_83 : i32
    call @f13(%arg0, %334, %336) : (!llvm.ptr, i32, i32) -> ()
    %337 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_84 = arith.constant 8 : i32
    %338 = arith.addi %337, %c8_i32_84 : i32
    %c16_i32_85 = arith.constant 16 : i32
    %339 = arith.addi %338, %c16_i32_85 : i32
    %340 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_86 = arith.constant 0 : i64
    %341 = arith.extui %340 : i32 to i64
    %342 = arith.addi %341, %c0_i64_86 : i64
    %343 = llvm.getelementptr %15[%342] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %344 = llvm.load volatile %343 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_87 = arith.constant 0 : i64
    %345 = arith.extui %339 : i32 to i64
    %346 = arith.addi %345, %c0_i64_87 : i64
    %347 = llvm.getelementptr %15[%346] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %344, %347 {alignment = 1 : i64} : i64, !llvm.ptr
    %348 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_88 = arith.constant 8 : i32
    %349 = arith.addi %348, %c8_i32_88 : i32
    %c8_i32_89 = arith.constant 8 : i32
    %350 = arith.addi %349, %c8_i32_89 : i32
    %351 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_90 = arith.constant 0 : i64
    %352 = arith.extui %351 : i32 to i64
    %353 = arith.addi %352, %c0_i64_90 : i64
    %354 = llvm.getelementptr %15[%353] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %355 = llvm.load volatile %354 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_91 = arith.constant 0 : i64
    %356 = arith.extui %350 : i32 to i64
    %357 = arith.addi %356, %c0_i64_91 : i64
    %358 = llvm.getelementptr %15[%357] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %355, %358 {alignment = 1 : i64} : i64, !llvm.ptr
    %359 = llvm.load %3 : !llvm.ptr -> i32
    %360 = llvm.load %3 : !llvm.ptr -> i32
    %c168_i64_92 = arith.constant 168 : i64
    %361 = arith.extui %360 : i32 to i64
    %362 = arith.addi %361, %c168_i64_92 : i64
    %363 = llvm.getelementptr %15[%362] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %364 = llvm.load volatile %363 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %364, %6 : i64, !llvm.ptr
    %c8_i64_93 = arith.constant 8 : i64
    %365 = arith.extui %359 : i32 to i64
    %366 = arith.addi %365, %c8_i64_93 : i64
    %367 = llvm.getelementptr %15[%366] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %364, %367 {alignment = 1 : i64} : i64, !llvm.ptr
    %368 = llvm.load %3 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %369 = arith.addi %368, %c88_i32 : i32
    %c8_i32_94 = arith.constant 8 : i32
    %370 = arith.addi %369, %c8_i32_94 : i32
    %371 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_95 = arith.constant 0 : i64
    %372 = arith.extui %371 : i32 to i64
    %373 = arith.addi %372, %c0_i64_95 : i64
    %374 = llvm.getelementptr %15[%373] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %375 = llvm.load volatile %374 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_96 = arith.constant 0 : i64
    %376 = arith.extui %370 : i32 to i64
    %377 = arith.addi %376, %c0_i64_96 : i64
    %378 = llvm.getelementptr %15[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %375, %378 {alignment = 1 : i64} : i32, !llvm.ptr
    %379 = llvm.load %3 : !llvm.ptr -> i32
    %380 = llvm.load %6 : !llvm.ptr -> i64
    %c88_i64 = arith.constant 88 : i64
    %381 = arith.extui %379 : i32 to i64
    %382 = arith.addi %381, %c88_i64 : i64
    %383 = llvm.getelementptr %15[%382] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %380, %383 {alignment = 1 : i64} : i64, !llvm.ptr
    %384 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_97 = arith.constant 8 : i32
    %385 = arith.addi %384, %c8_i32_97 : i32
    %c12_i32_98 = arith.constant 12 : i32
    %386 = arith.addi %385, %c12_i32_98 : i32
    llvm.store %386, %4 : i32, !llvm.ptr
    call @f77(%arg0, %386) : (!llvm.ptr, i32) -> ()
    %387 = llvm.load %4 : !llvm.ptr -> i32
    call @f78(%arg0, %387) : (!llvm.ptr, i32) -> ()
    %388 = llvm.load %3 : !llvm.ptr -> i32
    %c76_i32 = arith.constant 76 : i32
    %389 = arith.addi %388, %c76_i32 : i32
    %390 = llvm.load %3 : !llvm.ptr -> i32
    %c88_i32_99 = arith.constant 88 : i32
    %391 = arith.addi %390, %c88_i32_99 : i32
    call @f72(%arg0, %389, %391) : (!llvm.ptr, i32, i32) -> ()
    %392 = llvm.load %3 : !llvm.ptr -> i32
    %c80_i64 = arith.constant 80 : i64
    %393 = arith.extui %392 : i32 to i64
    %394 = arith.addi %393, %c80_i64 : i64
    %395 = llvm.getelementptr %15[%394] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %396 = llvm.load volatile %395 {alignment = 1 : i64} : !llvm.ptr -> i32
    %397 = llvm.load %3 : !llvm.ptr -> i32
    %c84_i64 = arith.constant 84 : i64
    %398 = arith.extui %397 : i32 to i64
    %399 = arith.addi %398, %c84_i64 : i64
    %400 = llvm.getelementptr %15[%399] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %401 = llvm.load volatile %400 {alignment = 1 : i64} : !llvm.ptr -> i32
    %402 = llvm.load %1 : !llvm.ptr -> i32
    %403 = llvm.load %2 : !llvm.ptr -> i32
    %404 = call @f99(%arg0, %396, %401, %402, %403) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %404, %1 : i32, !llvm.ptr
    %405 = llvm.load %3 : !llvm.ptr -> i32
    %c76_i32_100 = arith.constant 76 : i32
    %406 = arith.addi %405, %c76_i32_100 : i32
    call @f103(%arg0, %406) : (!llvm.ptr, i32) -> ()
    %407 = llvm.load %3 : !llvm.ptr -> i32
    %c76_i32_101 = arith.constant 76 : i32
    %408 = arith.addi %407, %c76_i32_101 : i32
    call @f104(%arg0, %408) : (!llvm.ptr, i32) -> ()
    %c-2147483645_i32 = arith.constant -2147483645 : i32
    llvm.store %c-2147483645_i32, %4 : i32, !llvm.ptr
    %409 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_102 = arith.constant 0 : i32
    %410 = arith.cmpi eq, %409, %c0_i32_102 : i32
    %411 = arith.extui %410 : i1 to i32
    %c0_i32_103 = arith.constant 0 : i32
    %412 = arith.cmpi ne, %411, %c0_i32_103 : i32
    cf.cond_br %412, ^bb4, ^bb12
  ^bb12:  // pred: ^bb11
    %413 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_104 = arith.constant 8 : i32
    %414 = arith.addi %413, %c8_i32_104 : i32
    %c1_i32_105 = arith.constant 1 : i32
    %415 = arith.ori %414, %c1_i32_105 : i32
    %416 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_106 = arith.constant 104 : i32
    %417 = arith.addi %416, %c104_i32_106 : i32
    %c64_i32_107 = arith.constant 64 : i32
    %418 = call @f187(%arg0, %415, %417, %c64_i32_107) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %418, %2 : i32, !llvm.ptr
    %419 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_108 = arith.constant 0 : i32
    %c8_i64_109 = arith.constant 8 : i64
    %420 = arith.extui %419 : i32 to i64
    %421 = arith.addi %420, %c8_i64_109 : i64
    %422 = llvm.getelementptr %15[%421] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %423 = arith.trunci %c0_i32_108 : i32 to i8
    llvm.store volatile %423, %422 {alignment = 1 : i64} : i8, !llvm.ptr
    %424 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_110 = arith.constant 104 : i32
    %425 = arith.addi %424, %c104_i32_110 : i32
    %426 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_111 = arith.constant 64 : i32
    %427 = call @f187(%arg0, %425, %426, %c64_i32_111) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb17
  ^bb13:  // 2 preds: ^bb14, ^bb15
    %428 = llvm.load %0 : !llvm.ptr -> i32
    %429 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_112 = arith.constant 0 : i64
    %430 = arith.extui %428 : i32 to i64
    %431 = arith.addi %430, %c0_i64_112 : i64
    %432 = llvm.getelementptr %15[%431] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %429, %432 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb16
    %433 = llvm.load %0 : !llvm.ptr -> i32
    %434 = llvm.load %3 : !llvm.ptr -> i32
    %c172_i64_113 = arith.constant 172 : i64
    %435 = arith.extui %434 : i32 to i64
    %436 = arith.addi %435, %c172_i64_113 : i64
    %437 = llvm.getelementptr %15[%436] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %438 = llvm.load volatile %437 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_114 = arith.constant 8 : i64
    %439 = arith.extui %433 : i32 to i64
    %440 = arith.addi %439, %c8_i64_114 : i64
    %441 = llvm.getelementptr %15[%440] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %438, %441 {alignment = 1 : i64} : i64, !llvm.ptr
    %442 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %443 = arith.addi %442, %c24_i32 : i32
    %444 = llvm.load %3 : !llvm.ptr -> i32
    %c188_i32 = arith.constant 188 : i32
    %445 = arith.addi %444, %c188_i32 : i32
    %c0_i64_115 = arith.constant 0 : i64
    %446 = arith.extui %445 : i32 to i64
    %447 = arith.addi %446, %c0_i64_115 : i64
    %448 = llvm.getelementptr %15[%447] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %449 = llvm.load volatile %448 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_116 = arith.constant 0 : i64
    %450 = arith.extui %443 : i32 to i64
    %451 = arith.addi %450, %c0_i64_116 : i64
    %452 = llvm.getelementptr %15[%451] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %449, %452 {alignment = 1 : i64} : i32, !llvm.ptr
    %453 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_117 = arith.constant 16 : i32
    %454 = arith.addi %453, %c16_i32_117 : i32
    %455 = llvm.load %3 : !llvm.ptr -> i32
    %c180_i32 = arith.constant 180 : i32
    %456 = arith.addi %455, %c180_i32 : i32
    %c0_i64_118 = arith.constant 0 : i64
    %457 = arith.extui %456 : i32 to i64
    %458 = arith.addi %457, %c0_i64_118 : i64
    %459 = llvm.getelementptr %15[%458] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %460 = llvm.load volatile %459 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_119 = arith.constant 0 : i64
    %461 = arith.extui %454 : i32 to i64
    %462 = arith.addi %461, %c0_i64_119 : i64
    %463 = llvm.getelementptr %15[%462] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %460, %463 {alignment = 1 : i64} : i64, !llvm.ptr
    %464 = llvm.load %0 : !llvm.ptr -> i32
    %465 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i64_120 = arith.constant 4 : i64
    %466 = arith.extui %464 : i32 to i64
    %467 = arith.addi %466, %c4_i64_120 : i64
    %468 = llvm.getelementptr %15[%467] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %465, %468 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_121 = arith.constant 1 : i32
    llvm.store %c1_i32_121, %5 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb17, ^bb20
    %469 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_122 = arith.constant 8 : i32
    %470 = arith.addi %469, %c8_i32_122 : i32
    %471 = llvm.load %2 : !llvm.ptr -> i32
    call @f15(%arg0, %470, %471) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_123 = arith.constant 0 : i32
    llvm.store %c0_i32_123, %5 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb19
    %472 = llvm.load %3 : !llvm.ptr -> i32
    %c168_i32_124 = arith.constant 168 : i32
    %473 = arith.addi %472, %c168_i32_124 : i32
    %474 = llvm.load %2 : !llvm.ptr -> i32
    call @f14(%arg0, %473, %474) : (!llvm.ptr, i32, i32) -> ()
    %475 = llvm.load %3 : !llvm.ptr -> i32
    %c168_i64_125 = arith.constant 168 : i64
    %476 = arith.extui %475 : i32 to i64
    %477 = arith.addi %476, %c168_i64_125 : i64
    %478 = llvm.getelementptr %15[%477] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %479 = llvm.load volatile %478 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %479, %5 : i32, !llvm.ptr
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %480 = arith.cmpi eq, %479, %c-2147483638_i32 : i32
    %481 = arith.extui %480 : i1 to i32
    %c0_i32_126 = arith.constant 0 : i32
    %482 = arith.cmpi eq, %481, %c0_i32_126 : i32
    %483 = arith.extui %482 : i1 to i32
    %c0_i32_127 = arith.constant 0 : i32
    %484 = arith.cmpi ne, %483, %c0_i32_127 : i32
    cf.cond_br %484, ^bb14, ^bb20
  ^bb17:  // 2 preds: ^bb12, ^bb18
    %485 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i32_128 = arith.constant 12 : i32
    %486 = arith.cmpi eq, %485, %c12_i32_128 : i32
    %487 = arith.extui %486 : i1 to i32
    %c0_i32_129 = arith.constant 0 : i32
    %488 = arith.cmpi ne, %487, %c0_i32_129 : i32
    cf.cond_br %488, ^bb15, ^bb18
  ^bb18:  // pred: ^bb17
    %489 = llvm.load %3 : !llvm.ptr -> i32
    %c104_i32_130 = arith.constant 104 : i32
    %490 = arith.addi %489, %c104_i32_130 : i32
    %491 = llvm.load %5 : !llvm.ptr -> i32
    %492 = arith.addi %490, %491 : i32
    llvm.store %492, %1 : i32, !llvm.ptr
    %493 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_131 = arith.constant 1 : i32
    %494 = arith.addi %493, %c1_i32_131 : i32
    llvm.store %494, %5 : i32, !llvm.ptr
    %495 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_132 = arith.constant 0 : i64
    %496 = arith.extui %495 : i32 to i64
    %497 = arith.addi %496, %c0_i64_132 : i64
    %498 = llvm.getelementptr %15[%497] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %499 = llvm.load volatile %498 {alignment = 1 : i64} : !llvm.ptr -> i8
    %500 = arith.extui %499 : i8 to i32
    %c0_i32_133 = arith.constant 0 : i32
    %501 = arith.cmpi eq, %500, %c0_i32_133 : i32
    %502 = arith.extui %501 : i1 to i32
    %c0_i32_134 = arith.constant 0 : i32
    %503 = arith.cmpi ne, %502, %c0_i32_134 : i32
    cf.cond_br %503, ^bb17, ^bb19
  ^bb19:  // pred: ^bb18
    cf.br ^bb16
  ^bb20:  // pred: ^bb16
    cf.br ^bb15
  }
  func.func @f6(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %8 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %14 = arith.subi %13, %c128_i32 : i32
    llvm.store %14, %4 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    llvm.store %c0_i32_7, %5 : i32, !llvm.ptr
    %15 = llvm.load %4 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %16 = arith.addi %15, %c96_i32 : i32
    %c36_i32 = arith.constant 36 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1_i32_9 = arith.constant 1 : i32
    %c1_i32_10 = arith.constant 1 : i32
    call @f102(%arg0, %16, %c36_i32, %c0_i32_8, %c1_i32_9, %c1_i32_10) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %17 = llvm.load %4 : !llvm.ptr -> i32
    %c100_i64 = arith.constant 100 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c100_i64 : i64
    %20 = llvm.getelementptr %12[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %6 : i32, !llvm.ptr
    %22 = llvm.load %4 : !llvm.ptr -> i32
    %c96_i64 = arith.constant 96 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c96_i64 : i64
    %25 = llvm.getelementptr %12[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %27 = arith.cmpi eq, %26, %c1_i32_11 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_12 : i32
    cf.cond_br %29, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // pred: ^bb1
    %30 = llvm.load %6 : !llvm.ptr -> i32
    %31 = llvm.load %4 : !llvm.ptr -> i32
    %c104_i64 = arith.constant 104 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c104_i64 : i64
    %34 = llvm.getelementptr %12[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %30, %35) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %36 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c28_i64 = arith.constant 28 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c28_i64 : i64
    %39 = llvm.getelementptr %12[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %41 = llvm.load %4 : !llvm.ptr -> i32
    %c104_i64_14 = arith.constant 104 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c104_i64_14 : i64
    %44 = llvm.getelementptr %12[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %40 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %12[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %4 : !llvm.ptr -> i32
    %50 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %51 = arith.extui %49 : i32 to i64
    %52 = arith.addi %51, %c20_i64 : i64
    %53 = llvm.getelementptr %12[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %55 = arith.addi %54, %c20_i32 : i32
    %c1048728_i32 = arith.constant 1048728 : i32
    call @f61(%arg0, %55, %c1048728_i32) : (!llvm.ptr, i32, i32) -> ()
    %56 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i32_15 = arith.constant 20 : i32
    %57 = arith.addi %56, %c20_i32_15 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f96(%arg0, %57, %c32_i32) : (!llvm.ptr, i32, i32) -> ()
    %58 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_16 = arith.constant 32 : i32
    %59 = arith.addi %58, %c32_i32_16 : i32
    %c24_i32 = arith.constant 24 : i32
    %60 = arith.addi %59, %c24_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %c0_i64_17 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64_17 : i64
    %63 = llvm.getelementptr %12[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %64 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_18 = arith.constant 32 : i32
    %65 = arith.addi %64, %c32_i32_18 : i32
    %c16_i32 = arith.constant 16 : i32
    %66 = arith.addi %65, %c16_i32 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %c0_i64_20 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_20 : i64
    %69 = llvm.getelementptr %12[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_19, %69 {alignment = 1 : i64} : i64, !llvm.ptr
    %70 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_21 = arith.constant 32 : i32
    %71 = arith.addi %70, %c32_i32_21 : i32
    %c8_i32 = arith.constant 8 : i32
    %72 = arith.addi %71, %c8_i32 : i32
    %c0_i64_22 = arith.constant 0 : i64
    %c0_i64_23 = arith.constant 0 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c0_i64_23 : i64
    %75 = llvm.getelementptr %12[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_22, %75 {alignment = 1 : i64} : i64, !llvm.ptr
    %76 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %c32_i64 = arith.constant 32 : i64
    %77 = arith.extui %76 : i32 to i64
    %78 = arith.addi %77, %c32_i64 : i64
    %79 = llvm.getelementptr %12[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_24, %79 {alignment = 1 : i64} : i64, !llvm.ptr
    %80 = llvm.load %4 : !llvm.ptr -> i32
    %c96_i32_25 = arith.constant 96 : i32
    %81 = arith.addi %80, %c96_i32_25 : i32
    %c24_i32_26 = arith.constant 24 : i32
    %82 = arith.addi %81, %c24_i32_26 : i32
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_27 = arith.constant 24 : i32
    %84 = arith.addi %83, %c24_i32_27 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_28 : i64
    %87 = llvm.getelementptr %12[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_29 = arith.constant 0 : i64
    %89 = arith.extui %82 : i32 to i64
    %90 = arith.addi %89, %c0_i64_29 : i64
    %91 = llvm.getelementptr %12[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i64, !llvm.ptr
    %92 = llvm.load %4 : !llvm.ptr -> i32
    %c96_i32_30 = arith.constant 96 : i32
    %93 = arith.addi %92, %c96_i32_30 : i32
    %c16_i32_31 = arith.constant 16 : i32
    %94 = arith.addi %93, %c16_i32_31 : i32
    %95 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_32 = arith.constant 16 : i32
    %96 = arith.addi %95, %c16_i32_32 : i32
    %c0_i64_33 = arith.constant 0 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c0_i64_33 : i64
    %99 = llvm.getelementptr %12[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_34 = arith.constant 0 : i64
    %101 = arith.extui %94 : i32 to i64
    %102 = arith.addi %101, %c0_i64_34 : i64
    %103 = llvm.getelementptr %12[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %100, %103 {alignment = 1 : i64} : i64, !llvm.ptr
    %104 = llvm.load %4 : !llvm.ptr -> i32
    %c96_i32_35 = arith.constant 96 : i32
    %105 = arith.addi %104, %c96_i32_35 : i32
    %c8_i32_36 = arith.constant 8 : i32
    %106 = arith.addi %105, %c8_i32_36 : i32
    %107 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_37 = arith.constant 8 : i32
    %108 = arith.addi %107, %c8_i32_37 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %109 = arith.extui %108 : i32 to i64
    %110 = arith.addi %109, %c0_i64_38 : i64
    %111 = llvm.getelementptr %12[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %112 = llvm.load volatile %111 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %113 = arith.extui %106 : i32 to i64
    %114 = arith.addi %113, %c0_i64_39 : i64
    %115 = llvm.getelementptr %12[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i64, !llvm.ptr
    %116 = llvm.load %4 : !llvm.ptr -> i32
    %117 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_40 : i64
    %120 = llvm.getelementptr %12[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c96_i64_41 = arith.constant 96 : i64
    %122 = arith.extui %116 : i32 to i64
    %123 = arith.addi %122, %c96_i64_41 : i64
    %124 = llvm.getelementptr %12[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %124 {alignment = 1 : i64} : i64, !llvm.ptr
    %125 = llvm.load %4 : !llvm.ptr -> i32
    %c127_i32 = arith.constant 127 : i32
    %126 = arith.addi %125, %c127_i32 : i32
    llvm.store %126, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    %127 = llvm.load %4 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %128 = arith.addi %127, %c64_i32 : i32
    %c24_i32_42 = arith.constant 24 : i32
    %129 = arith.addi %128, %c24_i32_42 : i32
    %130 = llvm.load %4 : !llvm.ptr -> i32
    %c96_i32_43 = arith.constant 96 : i32
    %131 = arith.addi %130, %c96_i32_43 : i32
    %c24_i32_44 = arith.constant 24 : i32
    %132 = arith.addi %131, %c24_i32_44 : i32
    llvm.store %132, %3 : i32, !llvm.ptr
    %c0_i64_45 = arith.constant 0 : i64
    %133 = arith.extui %132 : i32 to i64
    %134 = arith.addi %133, %c0_i64_45 : i64
    %135 = llvm.getelementptr %12[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %136 = llvm.load volatile %135 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_46 = arith.constant 0 : i64
    %137 = arith.extui %129 : i32 to i64
    %138 = arith.addi %137, %c0_i64_46 : i64
    %139 = llvm.getelementptr %12[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %139 {alignment = 1 : i64} : i64, !llvm.ptr
    %140 = llvm.load %4 : !llvm.ptr -> i32
    %c64_i32_47 = arith.constant 64 : i32
    %141 = arith.addi %140, %c64_i32_47 : i32
    %c16_i32_48 = arith.constant 16 : i32
    %142 = arith.addi %141, %c16_i32_48 : i32
    %143 = llvm.load %4 : !llvm.ptr -> i32
    %c96_i32_49 = arith.constant 96 : i32
    %144 = arith.addi %143, %c96_i32_49 : i32
    %c16_i32_50 = arith.constant 16 : i32
    %145 = arith.addi %144, %c16_i32_50 : i32
    llvm.store %145, %5 : i32, !llvm.ptr
    %c0_i64_51 = arith.constant 0 : i64
    %146 = arith.extui %145 : i32 to i64
    %147 = arith.addi %146, %c0_i64_51 : i64
    %148 = llvm.getelementptr %12[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %149 = llvm.load volatile %148 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_52 = arith.constant 0 : i64
    %150 = arith.extui %142 : i32 to i64
    %151 = arith.addi %150, %c0_i64_52 : i64
    %152 = llvm.getelementptr %12[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %149, %152 {alignment = 1 : i64} : i64, !llvm.ptr
    %153 = llvm.load %4 : !llvm.ptr -> i32
    %c64_i32_53 = arith.constant 64 : i32
    %154 = arith.addi %153, %c64_i32_53 : i32
    %c8_i32_54 = arith.constant 8 : i32
    %155 = arith.addi %154, %c8_i32_54 : i32
    %156 = llvm.load %4 : !llvm.ptr -> i32
    %c96_i32_55 = arith.constant 96 : i32
    %157 = arith.addi %156, %c96_i32_55 : i32
    %c8_i32_56 = arith.constant 8 : i32
    %158 = arith.addi %157, %c8_i32_56 : i32
    llvm.store %158, %6 : i32, !llvm.ptr
    %c0_i64_57 = arith.constant 0 : i64
    %159 = arith.extui %158 : i32 to i64
    %160 = arith.addi %159, %c0_i64_57 : i64
    %161 = llvm.getelementptr %12[%160] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %162 = llvm.load volatile %161 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_58 = arith.constant 0 : i64
    %163 = arith.extui %155 : i32 to i64
    %164 = arith.addi %163, %c0_i64_58 : i64
    %165 = llvm.getelementptr %12[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %162, %165 {alignment = 1 : i64} : i64, !llvm.ptr
    %166 = llvm.load %4 : !llvm.ptr -> i32
    %167 = llvm.load %4 : !llvm.ptr -> i32
    %c96_i64_59 = arith.constant 96 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c96_i64_59 : i64
    %170 = llvm.getelementptr %12[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %172 = arith.extui %166 : i32 to i64
    %173 = arith.addi %172, %c64_i64 : i64
    %174 = llvm.getelementptr %12[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %171, %174 {alignment = 1 : i64} : i64, !llvm.ptr
    %175 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_60 = arith.constant 32 : i32
    %176 = arith.addi %175, %c32_i32_60 : i32
    %c32_i32_61 = arith.constant 32 : i32
    %177 = llvm.load %4 : !llvm.ptr -> i32
    %c64_i32_62 = arith.constant 64 : i32
    %178 = arith.addi %177, %c64_i32_62 : i32
    %c32_i32_63 = arith.constant 32 : i32
    %c1048712_i32 = arith.constant 1048712 : i32
    call @f105(%arg0, %176, %c32_i32_61, %178, %c32_i32_63, %c1048712_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %179 = llvm.load %6 : !llvm.ptr -> i32
    %180 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_64 = arith.constant 32 : i32
    %181 = arith.addi %180, %c32_i32_64 : i32
    %c8_i32_65 = arith.constant 8 : i32
    %182 = arith.addi %181, %c8_i32_65 : i32
    %c0_i64_66 = arith.constant 0 : i64
    %183 = arith.extui %182 : i32 to i64
    %184 = arith.addi %183, %c0_i64_66 : i64
    %185 = llvm.getelementptr %12[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = llvm.load volatile %185 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_67 = arith.constant 0 : i64
    %187 = arith.extui %179 : i32 to i64
    %188 = arith.addi %187, %c0_i64_67 : i64
    %189 = llvm.getelementptr %12[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %186, %189 {alignment = 1 : i64} : i64, !llvm.ptr
    %190 = llvm.load %5 : !llvm.ptr -> i32
    %191 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_68 = arith.constant 32 : i32
    %192 = arith.addi %191, %c32_i32_68 : i32
    %c16_i32_69 = arith.constant 16 : i32
    %193 = arith.addi %192, %c16_i32_69 : i32
    %c0_i64_70 = arith.constant 0 : i64
    %194 = arith.extui %193 : i32 to i64
    %195 = arith.addi %194, %c0_i64_70 : i64
    %196 = llvm.getelementptr %12[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %197 = llvm.load volatile %196 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_71 = arith.constant 0 : i64
    %198 = arith.extui %190 : i32 to i64
    %199 = arith.addi %198, %c0_i64_71 : i64
    %200 = llvm.getelementptr %12[%199] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %197, %200 {alignment = 1 : i64} : i64, !llvm.ptr
    %201 = llvm.load %3 : !llvm.ptr -> i32
    %202 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_72 = arith.constant 32 : i32
    %203 = arith.addi %202, %c32_i32_72 : i32
    %c24_i32_73 = arith.constant 24 : i32
    %204 = arith.addi %203, %c24_i32_73 : i32
    %c0_i64_74 = arith.constant 0 : i64
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.addi %205, %c0_i64_74 : i64
    %207 = llvm.getelementptr %12[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %208 = llvm.load volatile %207 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_75 = arith.constant 0 : i64
    %209 = arith.extui %201 : i32 to i64
    %210 = arith.addi %209, %c0_i64_75 : i64
    %211 = llvm.getelementptr %12[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %208, %211 {alignment = 1 : i64} : i64, !llvm.ptr
    %212 = llvm.load %4 : !llvm.ptr -> i32
    %213 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i64_76 = arith.constant 32 : i64
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.addi %214, %c32_i64_76 : i64
    %216 = llvm.getelementptr %12[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c96_i64_77 = arith.constant 96 : i64
    %218 = arith.extui %212 : i32 to i64
    %219 = arith.addi %218, %c96_i64_77 : i64
    %220 = llvm.getelementptr %12[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %217, %220 {alignment = 1 : i64} : i64, !llvm.ptr
    %221 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_78 = arith.constant 32 : i32
    %222 = arith.addi %221, %c32_i32_78 : i32
    %223 = llvm.load %4 : !llvm.ptr -> i32
    %c96_i32_79 = arith.constant 96 : i32
    %224 = arith.addi %223, %c96_i32_79 : i32
    call @f12(%arg0, %222, %224) : (!llvm.ptr, i32, i32) -> ()
    %225 = llvm.load %4 : !llvm.ptr -> i32
    %226 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i64_80 = arith.constant 32 : i64
    %227 = arith.extui %226 : i32 to i64
    %228 = arith.addi %227, %c32_i64_80 : i64
    %229 = llvm.getelementptr %12[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %230 = llvm.load volatile %229 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c72_i64 = arith.constant 72 : i64
    %231 = arith.extui %225 : i32 to i64
    %232 = arith.addi %231, %c72_i64 : i64
    %233 = llvm.getelementptr %12[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %230, %233 {alignment = 1 : i64} : i32, !llvm.ptr
    %234 = llvm.load %4 : !llvm.ptr -> i32
    %235 = llvm.load %4 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %236 = arith.extui %235 : i32 to i64
    %237 = arith.addi %236, %c36_i64 : i64
    %238 = llvm.getelementptr %12[%237] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %239 = llvm.load volatile %238 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %239, %3 : i32, !llvm.ptr
    %c64_i64_81 = arith.constant 64 : i64
    %240 = arith.extui %234 : i32 to i64
    %241 = arith.addi %240, %c64_i64_81 : i64
    %242 = llvm.getelementptr %12[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %239, %242 {alignment = 1 : i64} : i32, !llvm.ptr
    %243 = llvm.load %4 : !llvm.ptr -> i32
    %244 = llvm.load %3 : !llvm.ptr -> i32
    %c68_i64 = arith.constant 68 : i64
    %245 = arith.extui %243 : i32 to i64
    %246 = arith.addi %245, %c68_i64 : i64
    %247 = llvm.getelementptr %12[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %244, %247 {alignment = 1 : i64} : i32, !llvm.ptr
    %248 = llvm.load %4 : !llvm.ptr -> i32
    %249 = llvm.load %3 : !llvm.ptr -> i32
    %250 = llvm.load %4 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %251 = arith.extui %250 : i32 to i64
    %252 = arith.addi %251, %c40_i64 : i64
    %253 = llvm.getelementptr %12[%252] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %254 = llvm.load volatile %253 {alignment = 1 : i64} : !llvm.ptr -> i32
    %255 = arith.addi %249, %254 : i32
    %c76_i64 = arith.constant 76 : i64
    %256 = arith.extui %248 : i32 to i64
    %257 = arith.addi %256, %c76_i64 : i64
    %258 = llvm.getelementptr %12[%257] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %255, %258 {alignment = 1 : i64} : i32, !llvm.ptr
    %259 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i32_82 = arith.constant 20 : i32
    %260 = arith.addi %259, %c20_i32_82 : i32
    %261 = llvm.load %4 : !llvm.ptr -> i32
    %c64_i32_83 = arith.constant 64 : i32
    %262 = arith.addi %261, %c64_i32_83 : i32
    call @f60(%arg0, %260, %262) : (!llvm.ptr, i32, i32) -> ()
    %263 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_84 = arith.constant 8 : i32
    %264 = arith.addi %263, %c8_i32_84 : i32
    %c8_i32_85 = arith.constant 8 : i32
    %265 = arith.addi %264, %c8_i32_85 : i32
    %266 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i32_86 = arith.constant 20 : i32
    %267 = arith.addi %266, %c20_i32_86 : i32
    %c8_i32_87 = arith.constant 8 : i32
    %268 = arith.addi %267, %c8_i32_87 : i32
    %c0_i64_88 = arith.constant 0 : i64
    %269 = arith.extui %268 : i32 to i64
    %270 = arith.addi %269, %c0_i64_88 : i64
    %271 = llvm.getelementptr %12[%270] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %272 = llvm.load volatile %271 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_89 = arith.constant 0 : i64
    %273 = arith.extui %265 : i32 to i64
    %274 = arith.addi %273, %c0_i64_89 : i64
    %275 = llvm.getelementptr %12[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %272, %275 {alignment = 1 : i64} : i32, !llvm.ptr
    %276 = llvm.load %4 : !llvm.ptr -> i32
    %277 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i64_90 = arith.constant 20 : i64
    %278 = arith.extui %277 : i32 to i64
    %279 = arith.addi %278, %c20_i64_90 : i64
    %280 = llvm.getelementptr %12[%279] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %281 = llvm.load volatile %280 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64 = arith.constant 8 : i64
    %282 = arith.extui %276 : i32 to i64
    %283 = arith.addi %282, %c8_i64 : i64
    %284 = llvm.getelementptr %12[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %281, %284 {alignment = 1 : i64} : i64, !llvm.ptr
    %285 = llvm.load %0 : !llvm.ptr -> i32
    %286 = llvm.load %1 : !llvm.ptr -> i32
    %287 = llvm.load %2 : !llvm.ptr -> i32
    %288 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_91 = arith.constant 8 : i32
    %289 = arith.addi %288, %c8_i32_91 : i32
    call @f11(%arg0, %285, %286, %287, %289) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %290 = llvm.load %4 : !llvm.ptr -> i32
    %c128_i32_92 = arith.constant 128 : i32
    %291 = arith.addi %290, %c128_i32_92 : i32
    llvm.store %291, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %292 = llvm.load %4 : !llvm.ptr -> i32
    %c96_i32_93 = arith.constant 96 : i32
    %293 = arith.addi %292, %c96_i32_93 : i32
    %294 = llvm.load %5 : !llvm.ptr -> i32
    %295 = arith.addi %293, %294 : i32
    llvm.store %295, %6 : i32, !llvm.ptr
    %c0_i64_94 = arith.constant 0 : i64
    %296 = arith.extui %295 : i32 to i64
    %297 = arith.addi %296, %c0_i64_94 : i64
    %298 = llvm.getelementptr %12[%297] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %299 = llvm.load volatile %298 {alignment = 1 : i64} : !llvm.ptr -> i8
    %300 = arith.extui %299 : i8 to i32
    llvm.store %300, %7 : i32, !llvm.ptr
    %301 = llvm.load %6 : !llvm.ptr -> i32
    %302 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_95 = arith.constant 0 : i64
    %303 = arith.extui %302 : i32 to i64
    %304 = arith.addi %303, %c0_i64_95 : i64
    %305 = llvm.getelementptr %12[%304] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %306 = llvm.load volatile %305 {alignment = 1 : i64} : !llvm.ptr -> i8
    %307 = arith.extui %306 : i8 to i32
    %c0_i64_96 = arith.constant 0 : i64
    %308 = arith.extui %301 : i32 to i64
    %309 = arith.addi %308, %c0_i64_96 : i64
    %310 = llvm.getelementptr %12[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = arith.trunci %307 : i32 to i8
    llvm.store volatile %311, %310 {alignment = 1 : i64} : i8, !llvm.ptr
    %312 = llvm.load %3 : !llvm.ptr -> i32
    %313 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_97 = arith.constant 0 : i64
    %314 = arith.extui %312 : i32 to i64
    %315 = arith.addi %314, %c0_i64_97 : i64
    %316 = llvm.getelementptr %12[%315] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %317 = arith.trunci %313 : i32 to i8
    llvm.store volatile %317, %316 {alignment = 1 : i64} : i8, !llvm.ptr
    %318 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %319 = arith.addi %318, %c-1_i32 : i32
    llvm.store %319, %3 : i32, !llvm.ptr
    %320 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_98 = arith.constant 1 : i32
    %321 = arith.addi %320, %c1_i32_98 : i32
    llvm.store %321, %5 : i32, !llvm.ptr
    %c16_i32_99 = arith.constant 16 : i32
    %322 = arith.cmpi eq, %321, %c16_i32_99 : i32
    %323 = arith.extui %322 : i1 to i32
    %c0_i32_100 = arith.constant 0 : i32
    %324 = arith.cmpi eq, %323, %c0_i32_100 : i32
    %325 = arith.extui %324 : i1 to i32
    %c0_i32_101 = arith.constant 0 : i32
    %326 = arith.cmpi ne, %325, %c0_i32_101 : i32
    cf.cond_br %326, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func @f7(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %14 = arith.subi %13, %c80_i32 : i32
    llvm.store %14, %2 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    call @f43(%arg0, %15, %16) : (!llvm.ptr, i32, i32) -> ()
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %12[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %22, %1 : i32, !llvm.ptr
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %17 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %12[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_7 = arith.constant 0 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c0_i64_7 : i64
    %30 = llvm.getelementptr %12[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %32 = arith.extui %26 : i32 to i64
    %33 = arith.addi %32, %c8_i64 : i64
    %34 = llvm.getelementptr %12[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %36 = arith.addi %35, %c40_i32 : i32
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %38 = arith.addi %37, %c31_i32 : i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_8 = arith.constant 31 : i32
    %39 = arith.cmpi ule, %c5_i32, %c31_i32_8 : i32
    %40 = scf.if %39 -> (i32) {
      %182 = arith.shrui %38, %c5_i32 : i32
      scf.yield %182 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c3_i32 = arith.constant 3 : i32
    %41 = arith.addi %40, %c3_i32 : i32
    %c0_i32_9 = arith.constant 0 : i32
    %c1_i32_10 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f102(%arg0, %36, %41, %c0_i32_9, %c1_i32_10, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c44_i64 : i64
    %45 = llvm.getelementptr %12[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %46, %3 : i32, !llvm.ptr
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c40_i64 : i64
    %50 = llvm.getelementptr %12[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %52 = arith.cmpi eq, %51, %c1_i32_11 : i32
    %53 = arith.extui %52 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %54 = arith.cmpi ne, %53, %c0_i32_12 : i32
    cf.cond_br %54, ^bb4, ^bb5
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // pred: ^bb5
    %55 = llvm.load %5 : !llvm.ptr -> i32
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64 = arith.constant 48 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c48_i64 : i64
    %59 = llvm.getelementptr %12[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %55, %60) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %61 = llvm.load %3 : !llvm.ptr -> i32
    %62 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_13 = arith.constant 48 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c48_i64_13 : i64
    %65 = llvm.getelementptr %12[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %61, %66) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_14 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_14) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_15 = arith.constant 48 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c48_i64_15 : i64
    %70 = llvm.getelementptr %12[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %71, %4 : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_16 = arith.constant 40 : i32
    %73 = arith.addi %72, %c40_i32_16 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %c4_i32_18 = arith.constant 4 : i32
    %c4_i32_19 = arith.constant 4 : i32
    call @f102(%arg0, %73, %c4_i32, %c0_i32_17, %c4_i32_18, %c4_i32_19) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64_20 = arith.constant 44 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c44_i64_20 : i64
    %77 = llvm.getelementptr %12[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %78, %5 : i32, !llvm.ptr
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_21 = arith.constant 40 : i64
    %80 = arith.extui %79 : i32 to i64
    %81 = arith.addi %80, %c40_i64_21 : i64
    %82 = llvm.getelementptr %12[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %83 = llvm.load volatile %82 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %84 = arith.cmpi eq, %83, %c1_i32_22 : i32
    %85 = arith.extui %84 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %85, %c0_i32_23 : i32
    cf.cond_br %86, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %87 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %88 = arith.addi %87, %c16_i32 : i32
    %c16_i32_24 = arith.constant 16 : i32
    %89 = arith.addi %88, %c16_i32_24 : i32
    llvm.store %89, %6 : i32, !llvm.ptr
    %90 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_25 = arith.constant 48 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c48_i64_25 : i64
    %93 = llvm.getelementptr %12[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %95 = arith.extui %89 : i32 to i64
    %96 = arith.addi %95, %c0_i64_26 : i64
    %97 = llvm.getelementptr %12[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %94, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_27 = arith.constant 16 : i32
    %99 = arith.addi %98, %c16_i32_27 : i32
    %c8_i32 = arith.constant 8 : i32
    %100 = arith.addi %99, %c8_i32 : i32
    llvm.store %100, %1 : i32, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_29 : i64
    %103 = llvm.getelementptr %12[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_28, %103 {alignment = 1 : i64} : i32, !llvm.ptr
    %104 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_30 = arith.constant 0 : i32
    %c36_i64 = arith.constant 36 : i64
    %105 = arith.extui %104 : i32 to i64
    %106 = arith.addi %105, %c36_i64 : i64
    %107 = llvm.getelementptr %12[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_30, %107 {alignment = 1 : i64} : i32, !llvm.ptr
    %108 = llvm.load %2 : !llvm.ptr -> i32
    %109 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %110 = arith.extui %108 : i32 to i64
    %111 = arith.addi %110, %c28_i64 : i64
    %112 = llvm.getelementptr %12[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %112 {alignment = 1 : i64} : i32, !llvm.ptr
    %113 = llvm.load %2 : !llvm.ptr -> i32
    %114 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %115 = arith.extui %113 : i32 to i64
    %116 = arith.addi %115, %c20_i64 : i64
    %117 = llvm.getelementptr %12[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %114, %117 {alignment = 1 : i64} : i32, !llvm.ptr
    %118 = llvm.load %2 : !llvm.ptr -> i32
    %119 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %120 = arith.extui %118 : i32 to i64
    %121 = arith.addi %120, %c16_i64 : i64
    %122 = llvm.getelementptr %12[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %119, %122 {alignment = 1 : i64} : i32, !llvm.ptr
    %123 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_31 = arith.constant 8 : i32
    %124 = arith.addi %123, %c8_i32_31 : i32
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_32 = arith.constant 16 : i32
    %126 = arith.addi %125, %c16_i32_32 : i32
    call @f82(%arg0, %124, %126) : (!llvm.ptr, i32, i32) -> ()
    %127 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_33 = arith.constant 40 : i32
    %128 = arith.addi %127, %c40_i32_33 : i32
    %c16_i32_34 = arith.constant 16 : i32
    %129 = arith.addi %128, %c16_i32_34 : i32
    %130 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c0_i64_35 : i64
    %133 = llvm.getelementptr %12[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_36 = arith.constant 0 : i64
    %135 = arith.extui %129 : i32 to i64
    %136 = arith.addi %135, %c0_i64_36 : i64
    %137 = llvm.getelementptr %12[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %137 {alignment = 1 : i64} : i64, !llvm.ptr
    %138 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_37 = arith.constant 40 : i32
    %139 = arith.addi %138, %c40_i32_37 : i32
    %c8_i32_38 = arith.constant 8 : i32
    %140 = arith.addi %139, %c8_i32_38 : i32
    %141 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_39 = arith.constant 0 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c0_i64_39 : i64
    %144 = llvm.getelementptr %12[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_40 = arith.constant 0 : i64
    %146 = arith.extui %140 : i32 to i64
    %147 = arith.addi %146, %c0_i64_40 : i64
    %148 = llvm.getelementptr %12[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %145, %148 {alignment = 1 : i64} : i64, !llvm.ptr
    %149 = llvm.load %2 : !llvm.ptr -> i32
    %150 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_41 = arith.constant 16 : i64
    %151 = arith.extui %150 : i32 to i64
    %152 = arith.addi %151, %c16_i64_41 : i64
    %153 = llvm.getelementptr %12[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %154, %7 : i64, !llvm.ptr
    %c40_i64_42 = arith.constant 40 : i64
    %155 = arith.extui %149 : i32 to i64
    %156 = arith.addi %155, %c40_i64_42 : i64
    %157 = llvm.getelementptr %12[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %154, %157 {alignment = 1 : i64} : i64, !llvm.ptr
    %158 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %159 = arith.addi %158, %c64_i32 : i32
    %c8_i32_43 = arith.constant 8 : i32
    %160 = arith.addi %159, %c8_i32_43 : i32
    %161 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c0_i64_44 : i64
    %164 = llvm.getelementptr %12[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_45 = arith.constant 0 : i64
    %166 = arith.extui %160 : i32 to i64
    %167 = arith.addi %166, %c0_i64_45 : i64
    %168 = llvm.getelementptr %12[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %165, %168 {alignment = 1 : i64} : i32, !llvm.ptr
    %169 = llvm.load %2 : !llvm.ptr -> i32
    %170 = llvm.load %7 : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %171 = arith.extui %169 : i32 to i64
    %172 = arith.addi %171, %c64_i64 : i64
    %173 = llvm.getelementptr %12[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %170, %173 {alignment = 1 : i64} : i64, !llvm.ptr
    %174 = llvm.load %2 : !llvm.ptr -> i32
    %c52_i32 = arith.constant 52 : i32
    %175 = arith.addi %174, %c52_i32 : i32
    llvm.store %175, %1 : i32, !llvm.ptr
    call @f77(%arg0, %175) : (!llvm.ptr, i32) -> ()
    %176 = llvm.load %1 : !llvm.ptr -> i32
    call @f78(%arg0, %176) : (!llvm.ptr, i32) -> ()
    %177 = llvm.load %0 : !llvm.ptr -> i32
    %178 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_46 = arith.constant 64 : i32
    %179 = arith.addi %178, %c64_i32_46 : i32
    call @f72(%arg0, %177, %179) : (!llvm.ptr, i32, i32) -> ()
    %180 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_47 = arith.constant 80 : i32
    %181 = arith.addi %180, %c80_i32_47 : i32
    llvm.store %181, %9 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f8(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %15 = llvm.load %11 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %16 = arith.subi %15, %c80_i32 : i32
    llvm.store %16, %2 : i32, !llvm.ptr
    llvm.store %16, %11 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c20_i64 : i64
    %20 = llvm.getelementptr %14[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %3 : i32, !llvm.ptr
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %14[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = arith.cmpi eq, %21, %26 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_9 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_10 : i32
    cf.cond_br %31, ^bb3, ^bb4
  ^bb2:  // pred: ^bb16
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %32 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c16_i64 : i64
    %35 = llvm.getelementptr %14[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %37 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %38 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %39 = scf.if %38 -> (i32) {
      %554 = arith.shli %37, %c2_i32 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %40 = arith.addi %36, %39 : i32
    %c64_i32 = arith.constant 64 : i32
    %c0_i64 = arith.constant 0 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c0_i64 : i64
    %43 = llvm.getelementptr %14[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c64_i32, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %46 = arith.addi %45, %c1_i32_11 : i32
    %c20_i64_12 = arith.constant 20 : i64
    %47 = arith.extui %44 : i32 to i64
    %48 = arith.addi %47, %c20_i64_12 : i64
    %49 = llvm.getelementptr %14[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %46, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    %50 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c8_i64 : i64
    %53 = llvm.getelementptr %14[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %4 : i32, !llvm.ptr
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64_13 : i64
    %58 = llvm.getelementptr %14[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi eq, %54, %59 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_14 : i32
    %63 = arith.extui %62 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_15 : i32
    cf.cond_br %64, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %65 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %66 = arith.addi %65, %c12_i32 : i32
    call @f73(%arg0, %66) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %67 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c4_i64 : i64
    %70 = llvm.getelementptr %14[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i32
    %72 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_16 = arith.constant 31 : i32
    %73 = arith.cmpi ule, %c5_i32, %c31_i32_16 : i32
    %74 = scf.if %73 -> (i32) {
      %554 = arith.shli %72, %c5_i32 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %75 = arith.addi %71, %74 : i32
    llvm.store %75, %3 : i32, !llvm.ptr
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %77 = arith.extui %76 : i32 to i64
    %78 = arith.addi %77, %c0_i64_17 : i64
    %79 = llvm.getelementptr %14[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_18 = arith.constant 0 : i64
    %81 = arith.extui %75 : i32 to i64
    %82 = arith.addi %81, %c0_i64_18 : i64
    %83 = llvm.getelementptr %14[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i64, !llvm.ptr
    %84 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %85 = arith.addi %84, %c24_i32 : i32
    %86 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_19 = arith.constant 24 : i32
    %87 = arith.addi %86, %c24_i32_19 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c0_i64_20 : i64
    %90 = llvm.getelementptr %14[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load volatile %90 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %92 = arith.extui %85 : i32 to i64
    %93 = arith.addi %92, %c0_i64_21 : i64
    %94 = llvm.getelementptr %14[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %91, %94 {alignment = 1 : i64} : i64, !llvm.ptr
    %95 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %96 = arith.addi %95, %c16_i32 : i32
    %97 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_22 = arith.constant 16 : i32
    %98 = arith.addi %97, %c16_i32_22 : i32
    %c0_i64_23 = arith.constant 0 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c0_i64_23 : i64
    %101 = llvm.getelementptr %14[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_24 = arith.constant 0 : i64
    %103 = arith.extui %96 : i32 to i64
    %104 = arith.addi %103, %c0_i64_24 : i64
    %105 = llvm.getelementptr %14[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %102, %105 {alignment = 1 : i64} : i64, !llvm.ptr
    %106 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %107 = arith.addi %106, %c8_i32 : i32
    %108 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_25 = arith.constant 8 : i32
    %109 = arith.addi %108, %c8_i32_25 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c0_i64_26 : i64
    %112 = llvm.getelementptr %14[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = llvm.load volatile %112 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_27 = arith.constant 0 : i64
    %114 = arith.extui %107 : i32 to i64
    %115 = arith.addi %114, %c0_i64_27 : i64
    %116 = llvm.getelementptr %14[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %113, %116 {alignment = 1 : i64} : i64, !llvm.ptr
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %118 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_28 = arith.constant 1 : i32
    %119 = arith.addi %118, %c1_i32_28 : i32
    llvm.store %119, %5 : i32, !llvm.ptr
    %c8_i64_29 = arith.constant 8 : i64
    %120 = arith.extui %117 : i32 to i64
    %121 = arith.addi %120, %c8_i64_29 : i64
    %122 = llvm.getelementptr %14[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %119, %122 {alignment = 1 : i64} : i32, !llvm.ptr
    %123 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_30 = arith.constant 20 : i64
    %124 = arith.extui %123 : i32 to i64
    %125 = arith.addi %124, %c20_i64_30 : i64
    %126 = llvm.getelementptr %14[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = llvm.load volatile %126 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32_31 = arith.constant 2 : i32
    %c31_i32_32 = arith.constant 31 : i32
    %128 = arith.cmpi ule, %c2_i32_31, %c31_i32_32 : i32
    %129 = scf.if %128 -> (i32) {
      %554 = arith.shli %127, %c2_i32_31 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %130 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_33 = arith.constant 16 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c16_i64_33 : i64
    %133 = llvm.getelementptr %14[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i32
    %135 = arith.addi %129, %134 : i32
    %c-4_i32 = arith.constant -4 : i32
    %136 = arith.addi %135, %c-4_i32 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %137 = arith.extui %136 : i32 to i64
    %138 = arith.addi %137, %c0_i64_34 : i64
    %139 = llvm.getelementptr %14[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = llvm.load volatile %139 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %140, %3 : i32, !llvm.ptr
    %141 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %142 = arith.addi %141, %c40_i32 : i32
    %c24_i32_35 = arith.constant 24 : i32
    %143 = arith.addi %142, %c24_i32_35 : i32
    llvm.store %143, %6 : i32, !llvm.ptr
    %c0_i64_36 = arith.constant 0 : i64
    %c0_i64_37 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_37 : i64
    %146 = llvm.getelementptr %14[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_36, %146 {alignment = 1 : i64} : i64, !llvm.ptr
    %147 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_38 = arith.constant 40 : i32
    %148 = arith.addi %147, %c40_i32_38 : i32
    %c16_i32_39 = arith.constant 16 : i32
    %149 = arith.addi %148, %c16_i32_39 : i32
    llvm.store %149, %7 : i32, !llvm.ptr
    %c0_i64_40 = arith.constant 0 : i64
    %c0_i64_41 = arith.constant 0 : i64
    %150 = arith.extui %149 : i32 to i64
    %151 = arith.addi %150, %c0_i64_41 : i64
    %152 = llvm.getelementptr %14[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_40, %152 {alignment = 1 : i64} : i64, !llvm.ptr
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_42 = arith.constant 40 : i32
    %154 = arith.addi %153, %c40_i32_42 : i32
    %c8_i32_43 = arith.constant 8 : i32
    %155 = arith.addi %154, %c8_i32_43 : i32
    llvm.store %155, %8 : i32, !llvm.ptr
    %c0_i64_44 = arith.constant 0 : i64
    %c0_i64_45 = arith.constant 0 : i64
    %156 = arith.extui %155 : i32 to i64
    %157 = arith.addi %156, %c0_i64_45 : i64
    %158 = llvm.getelementptr %14[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_44, %158 {alignment = 1 : i64} : i64, !llvm.ptr
    %159 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_46 = arith.constant 0 : i64
    %c40_i64 = arith.constant 40 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c40_i64 : i64
    %162 = llvm.getelementptr %14[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_46, %162 {alignment = 1 : i64} : i64, !llvm.ptr
    %163 = llvm.load %2 : !llvm.ptr -> i32
    %164 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_47 = arith.constant 24 : i32
    %c31_i32_48 = arith.constant 31 : i32
    %165 = arith.cmpi ule, %c24_i32_47, %c31_i32_48 : i32
    %166 = scf.if %165 -> (i32) {
      %554 = arith.shli %164, %c24_i32_47 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %167 = llvm.load %3 : !llvm.ptr -> i32
    %c65280_i32 = arith.constant 65280 : i32
    %168 = arith.andi %167, %c65280_i32 : i32
    %c8_i32_49 = arith.constant 8 : i32
    %c31_i32_50 = arith.constant 31 : i32
    %169 = arith.cmpi ule, %c8_i32_49, %c31_i32_50 : i32
    %170 = scf.if %169 -> (i32) {
      %554 = arith.shli %168, %c8_i32_49 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %171 = arith.ori %166, %170 : i32
    %172 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_51 = arith.constant 8 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %173 = arith.cmpi ule, %c8_i32_51, %c31_i32_52 : i32
    %174 = scf.if %173 -> (i32) {
      %554 = arith.shrui %172, %c8_i32_51 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %c65280_i32_53 = arith.constant 65280 : i32
    %175 = arith.andi %174, %c65280_i32_53 : i32
    %176 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_54 = arith.constant 24 : i32
    %c31_i32_55 = arith.constant 31 : i32
    %177 = arith.cmpi ule, %c24_i32_54, %c31_i32_55 : i32
    %178 = scf.if %177 -> (i32) {
      %554 = arith.shrui %176, %c24_i32_54 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %179 = arith.ori %175, %178 : i32
    %180 = arith.ori %171, %179 : i32
    %c76_i64 = arith.constant 76 : i64
    %181 = arith.extui %163 : i32 to i64
    %182 = arith.addi %181, %c76_i64 : i64
    %183 = llvm.getelementptr %14[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %180, %183 {alignment = 1 : i64} : i32, !llvm.ptr
    %184 = llvm.load %2 : !llvm.ptr -> i32
    %c68_i32 = arith.constant 68 : i32
    %185 = arith.addi %184, %c68_i32 : i32
    %c4_i32 = arith.constant 4 : i32
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %c76_i32 = arith.constant 76 : i32
    %187 = arith.addi %186, %c76_i32 : i32
    %c4_i32_56 = arith.constant 4 : i32
    %c1048840_i32 = arith.constant 1048840 : i32
    call @f105(%arg0, %185, %c4_i32, %187, %c4_i32_56, %c1048840_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %188 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_57 = arith.constant 8 : i32
    %189 = arith.addi %188, %c8_i32_57 : i32
    %c8_i32_58 = arith.constant 8 : i32
    %190 = arith.addi %189, %c8_i32_58 : i32
    llvm.store %190, %9 : i32, !llvm.ptr
    %191 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_59 = arith.constant 0 : i64
    %192 = arith.extui %191 : i32 to i64
    %193 = arith.addi %192, %c0_i64_59 : i64
    %194 = llvm.getelementptr %14[%193] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %195 = llvm.load volatile %194 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_60 = arith.constant 0 : i64
    %196 = arith.extui %190 : i32 to i64
    %197 = arith.addi %196, %c0_i64_60 : i64
    %198 = llvm.getelementptr %14[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %195, %198 {alignment = 1 : i64} : i64, !llvm.ptr
    %199 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_61 = arith.constant 8 : i32
    %200 = arith.addi %199, %c8_i32_61 : i32
    %c16_i32_62 = arith.constant 16 : i32
    %201 = arith.addi %200, %c16_i32_62 : i32
    llvm.store %201, %8 : i32, !llvm.ptr
    %202 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_63 = arith.constant 0 : i64
    %203 = arith.extui %202 : i32 to i64
    %204 = arith.addi %203, %c0_i64_63 : i64
    %205 = llvm.getelementptr %14[%204] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %206 = llvm.load volatile %205 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_64 = arith.constant 0 : i64
    %207 = arith.extui %201 : i32 to i64
    %208 = arith.addi %207, %c0_i64_64 : i64
    %209 = llvm.getelementptr %14[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %206, %209 {alignment = 1 : i64} : i64, !llvm.ptr
    %210 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_65 = arith.constant 8 : i32
    %211 = arith.addi %210, %c8_i32_65 : i32
    %c24_i32_66 = arith.constant 24 : i32
    %212 = arith.addi %211, %c24_i32_66 : i32
    llvm.store %212, %7 : i32, !llvm.ptr
    %213 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_67 = arith.constant 0 : i64
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.addi %214, %c0_i64_67 : i64
    %216 = llvm.getelementptr %14[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_68 = arith.constant 0 : i64
    %218 = arith.extui %212 : i32 to i64
    %219 = arith.addi %218, %c0_i64_68 : i64
    %220 = llvm.getelementptr %14[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %217, %220 {alignment = 1 : i64} : i64, !llvm.ptr
    %221 = llvm.load %2 : !llvm.ptr -> i32
    %222 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_69 = arith.constant 40 : i64
    %223 = arith.extui %222 : i32 to i64
    %224 = arith.addi %223, %c40_i64_69 : i64
    %225 = llvm.getelementptr %14[%224] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %226 = llvm.load volatile %225 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_70 = arith.constant 8 : i64
    %227 = arith.extui %221 : i32 to i64
    %228 = arith.addi %227, %c8_i64_70 : i64
    %229 = llvm.getelementptr %14[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %226, %229 {alignment = 1 : i64} : i64, !llvm.ptr
    %230 = llvm.load %5 : !llvm.ptr -> i32
    %231 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_71 = arith.constant 0 : i64
    %232 = arith.extui %231 : i32 to i64
    %233 = arith.addi %232, %c0_i64_71 : i64
    %234 = llvm.getelementptr %14[%233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %235 = llvm.load volatile %234 {alignment = 1 : i64} : !llvm.ptr -> i32
    %236 = arith.cmpi eq, %230, %235 : i32
    %237 = arith.extui %236 : i1 to i32
    %c0_i32_72 = arith.constant 0 : i32
    %238 = arith.cmpi eq, %237, %c0_i32_72 : i32
    %239 = arith.extui %238 : i1 to i32
    %c0_i32_73 = arith.constant 0 : i32
    %240 = arith.cmpi ne, %239, %c0_i32_73 : i32
    cf.cond_br %240, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %241 = llvm.load %1 : !llvm.ptr -> i32
    call @f74(%arg0, %241) : (!llvm.ptr, i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %242 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_74 = arith.constant 4 : i64
    %243 = arith.extui %242 : i32 to i64
    %244 = arith.addi %243, %c4_i64_74 : i64
    %245 = llvm.getelementptr %14[%244] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %246 = llvm.load volatile %245 {alignment = 1 : i64} : !llvm.ptr -> i32
    %247 = llvm.load %5 : !llvm.ptr -> i32
    %c5_i32_75 = arith.constant 5 : i32
    %c31_i32_76 = arith.constant 31 : i32
    %248 = arith.cmpi ule, %c5_i32_75, %c31_i32_76 : i32
    %249 = scf.if %248 -> (i32) {
      %554 = arith.shli %247, %c5_i32_75 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %250 = arith.addi %246, %249 : i32
    llvm.store %250, %3 : i32, !llvm.ptr
    %251 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_77 = arith.constant 8 : i64
    %252 = arith.extui %251 : i32 to i64
    %253 = arith.addi %252, %c8_i64_77 : i64
    %254 = llvm.getelementptr %14[%253] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %255 = llvm.load volatile %254 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_78 = arith.constant 0 : i64
    %256 = arith.extui %250 : i32 to i64
    %257 = arith.addi %256, %c0_i64_78 : i64
    %258 = llvm.getelementptr %14[%257] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %255, %258 {alignment = 1 : i64} : i64, !llvm.ptr
    %259 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_79 = arith.constant 24 : i32
    %260 = arith.addi %259, %c24_i32_79 : i32
    %261 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_80 = arith.constant 0 : i64
    %262 = arith.extui %261 : i32 to i64
    %263 = arith.addi %262, %c0_i64_80 : i64
    %264 = llvm.getelementptr %14[%263] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %265 = llvm.load volatile %264 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_81 = arith.constant 0 : i64
    %266 = arith.extui %260 : i32 to i64
    %267 = arith.addi %266, %c0_i64_81 : i64
    %268 = llvm.getelementptr %14[%267] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %265, %268 {alignment = 1 : i64} : i64, !llvm.ptr
    %269 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_82 = arith.constant 16 : i32
    %270 = arith.addi %269, %c16_i32_82 : i32
    %271 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_83 = arith.constant 0 : i64
    %272 = arith.extui %271 : i32 to i64
    %273 = arith.addi %272, %c0_i64_83 : i64
    %274 = llvm.getelementptr %14[%273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %275 = llvm.load volatile %274 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_84 = arith.constant 0 : i64
    %276 = arith.extui %270 : i32 to i64
    %277 = arith.addi %276, %c0_i64_84 : i64
    %278 = llvm.getelementptr %14[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %275, %278 {alignment = 1 : i64} : i64, !llvm.ptr
    %279 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_85 = arith.constant 8 : i32
    %280 = arith.addi %279, %c8_i32_85 : i32
    %281 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i64_86 = arith.constant 0 : i64
    %282 = arith.extui %281 : i32 to i64
    %283 = arith.addi %282, %c0_i64_86 : i64
    %284 = llvm.getelementptr %14[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %285 = llvm.load volatile %284 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_87 = arith.constant 0 : i64
    %286 = arith.extui %280 : i32 to i64
    %287 = arith.addi %286, %c0_i64_87 : i64
    %288 = llvm.getelementptr %14[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %285, %288 {alignment = 1 : i64} : i64, !llvm.ptr
    %289 = llvm.load %1 : !llvm.ptr -> i32
    %290 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_88 = arith.constant 2 : i32
    %291 = arith.addi %290, %c2_i32_88 : i32
    llvm.store %291, %4 : i32, !llvm.ptr
    %c8_i64_89 = arith.constant 8 : i64
    %292 = arith.extui %289 : i32 to i64
    %293 = arith.addi %292, %c8_i64_89 : i64
    %294 = llvm.getelementptr %14[%293] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %291, %294 {alignment = 1 : i64} : i32, !llvm.ptr
    %295 = llvm.load %0 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %296 = arith.extui %295 : i32 to i64
    %297 = arith.addi %296, %c36_i64 : i64
    %298 = llvm.getelementptr %14[%297] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %299 = llvm.load volatile %298 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %299, %3 : i32, !llvm.ptr
    %c31_i32_90 = arith.constant 31 : i32
    %300 = arith.addi %299, %c31_i32_90 : i32
    llvm.store %300, %5 : i32, !llvm.ptr
    %301 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_91 = arith.constant 20 : i64
    %302 = arith.extui %301 : i32 to i64
    %303 = arith.addi %302, %c20_i64_91 : i64
    %304 = llvm.getelementptr %14[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %305 = llvm.load volatile %304 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %305, %6 : i32, !llvm.ptr
    %c0_i32_92 = arith.constant 0 : i32
    %306 = arith.cmpi eq, %305, %c0_i32_92 : i32
    %307 = arith.extui %306 : i1 to i32
    %c0_i32_93 = arith.constant 0 : i32
    %308 = arith.cmpi ne, %307, %c0_i32_93 : i32
    cf.cond_br %308, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %309 = llvm.load %1 : !llvm.ptr -> i32
    call @f74(%arg0, %309) : (!llvm.ptr, i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %310 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %311 = arith.extui %310 : i32 to i64
    %312 = arith.addi %311, %c32_i64 : i64
    %313 = llvm.getelementptr %14[%312] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %314 = llvm.load volatile %313 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %314, %9 : i32, !llvm.ptr
    %315 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_94 = arith.constant 40 : i32
    %316 = arith.addi %315, %c40_i32_94 : i32
    %c24_i32_95 = arith.constant 24 : i32
    %317 = arith.addi %316, %c24_i32_95 : i32
    llvm.store %317, %0 : i32, !llvm.ptr
    %c0_i64_96 = arith.constant 0 : i64
    %c0_i64_97 = arith.constant 0 : i64
    %318 = arith.extui %317 : i32 to i64
    %319 = arith.addi %318, %c0_i64_97 : i64
    %320 = llvm.getelementptr %14[%319] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_96, %320 {alignment = 1 : i64} : i64, !llvm.ptr
    %321 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_98 = arith.constant 40 : i32
    %322 = arith.addi %321, %c40_i32_98 : i32
    %c16_i32_99 = arith.constant 16 : i32
    %323 = arith.addi %322, %c16_i32_99 : i32
    llvm.store %323, %6 : i32, !llvm.ptr
    %c0_i64_100 = arith.constant 0 : i64
    %c0_i64_101 = arith.constant 0 : i64
    %324 = arith.extui %323 : i32 to i64
    %325 = arith.addi %324, %c0_i64_101 : i64
    %326 = llvm.getelementptr %14[%325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_100, %326 {alignment = 1 : i64} : i64, !llvm.ptr
    %327 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_102 = arith.constant 40 : i32
    %328 = arith.addi %327, %c40_i32_102 : i32
    %c8_i32_103 = arith.constant 8 : i32
    %329 = arith.addi %328, %c8_i32_103 : i32
    llvm.store %329, %7 : i32, !llvm.ptr
    %c0_i64_104 = arith.constant 0 : i64
    %c0_i64_105 = arith.constant 0 : i64
    %330 = arith.extui %329 : i32 to i64
    %331 = arith.addi %330, %c0_i64_105 : i64
    %332 = llvm.getelementptr %14[%331] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_104, %332 {alignment = 1 : i64} : i64, !llvm.ptr
    %333 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_106 = arith.constant 0 : i64
    %c40_i64_107 = arith.constant 40 : i64
    %334 = arith.extui %333 : i32 to i64
    %335 = arith.addi %334, %c40_i64_107 : i64
    %336 = llvm.getelementptr %14[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_106, %336 {alignment = 1 : i64} : i64, !llvm.ptr
    %337 = llvm.load %2 : !llvm.ptr -> i32
    %338 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_108 = arith.constant 24 : i32
    %c31_i32_109 = arith.constant 31 : i32
    %339 = arith.cmpi ule, %c24_i32_108, %c31_i32_109 : i32
    %340 = scf.if %339 -> (i32) {
      %554 = arith.shli %338, %c24_i32_108 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %341 = llvm.load %3 : !llvm.ptr -> i32
    %c65280_i32_110 = arith.constant 65280 : i32
    %342 = arith.andi %341, %c65280_i32_110 : i32
    %c8_i32_111 = arith.constant 8 : i32
    %c31_i32_112 = arith.constant 31 : i32
    %343 = arith.cmpi ule, %c8_i32_111, %c31_i32_112 : i32
    %344 = scf.if %343 -> (i32) {
      %554 = arith.shli %342, %c8_i32_111 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %345 = arith.ori %340, %344 : i32
    %346 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_113 = arith.constant 8 : i32
    %c31_i32_114 = arith.constant 31 : i32
    %347 = arith.cmpi ule, %c8_i32_113, %c31_i32_114 : i32
    %348 = scf.if %347 -> (i32) {
      %554 = arith.shrui %346, %c8_i32_113 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %c65280_i32_115 = arith.constant 65280 : i32
    %349 = arith.andi %348, %c65280_i32_115 : i32
    %350 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_116 = arith.constant 24 : i32
    %c31_i32_117 = arith.constant 31 : i32
    %351 = arith.cmpi ule, %c24_i32_116, %c31_i32_117 : i32
    %352 = scf.if %351 -> (i32) {
      %554 = arith.shrui %350, %c24_i32_116 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %353 = arith.ori %349, %352 : i32
    %354 = arith.ori %345, %353 : i32
    %c76_i64_118 = arith.constant 76 : i64
    %355 = arith.extui %337 : i32 to i64
    %356 = arith.addi %355, %c76_i64_118 : i64
    %357 = llvm.getelementptr %14[%356] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %354, %357 {alignment = 1 : i64} : i32, !llvm.ptr
    %358 = llvm.load %2 : !llvm.ptr -> i32
    %c68_i32_119 = arith.constant 68 : i32
    %359 = arith.addi %358, %c68_i32_119 : i32
    %c4_i32_120 = arith.constant 4 : i32
    %360 = llvm.load %2 : !llvm.ptr -> i32
    %c76_i32_121 = arith.constant 76 : i32
    %361 = arith.addi %360, %c76_i32_121 : i32
    %c4_i32_122 = arith.constant 4 : i32
    %c1048840_i32_123 = arith.constant 1048840 : i32
    call @f105(%arg0, %359, %c4_i32_120, %361, %c4_i32_122, %c1048840_i32_123) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %362 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_124 = arith.constant 8 : i32
    %363 = arith.addi %362, %c8_i32_124 : i32
    %c8_i32_125 = arith.constant 8 : i32
    %364 = arith.addi %363, %c8_i32_125 : i32
    llvm.store %364, %8 : i32, !llvm.ptr
    %365 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_126 = arith.constant 0 : i64
    %366 = arith.extui %365 : i32 to i64
    %367 = arith.addi %366, %c0_i64_126 : i64
    %368 = llvm.getelementptr %14[%367] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %369 = llvm.load volatile %368 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_127 = arith.constant 0 : i64
    %370 = arith.extui %364 : i32 to i64
    %371 = arith.addi %370, %c0_i64_127 : i64
    %372 = llvm.getelementptr %14[%371] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %369, %372 {alignment = 1 : i64} : i64, !llvm.ptr
    %373 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_128 = arith.constant 8 : i32
    %374 = arith.addi %373, %c8_i32_128 : i32
    %c16_i32_129 = arith.constant 16 : i32
    %375 = arith.addi %374, %c16_i32_129 : i32
    llvm.store %375, %7 : i32, !llvm.ptr
    %376 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_130 = arith.constant 0 : i64
    %377 = arith.extui %376 : i32 to i64
    %378 = arith.addi %377, %c0_i64_130 : i64
    %379 = llvm.getelementptr %14[%378] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %380 = llvm.load volatile %379 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_131 = arith.constant 0 : i64
    %381 = arith.extui %375 : i32 to i64
    %382 = arith.addi %381, %c0_i64_131 : i64
    %383 = llvm.getelementptr %14[%382] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %380, %383 {alignment = 1 : i64} : i64, !llvm.ptr
    %384 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_132 = arith.constant 8 : i32
    %385 = arith.addi %384, %c8_i32_132 : i32
    %c24_i32_133 = arith.constant 24 : i32
    %386 = arith.addi %385, %c24_i32_133 : i32
    llvm.store %386, %6 : i32, !llvm.ptr
    %387 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_134 = arith.constant 0 : i64
    %388 = arith.extui %387 : i32 to i64
    %389 = arith.addi %388, %c0_i64_134 : i64
    %390 = llvm.getelementptr %14[%389] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %391 = llvm.load volatile %390 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_135 = arith.constant 0 : i64
    %392 = arith.extui %386 : i32 to i64
    %393 = arith.addi %392, %c0_i64_135 : i64
    %394 = llvm.getelementptr %14[%393] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %391, %394 {alignment = 1 : i64} : i64, !llvm.ptr
    %395 = llvm.load %2 : !llvm.ptr -> i32
    %396 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_136 = arith.constant 40 : i64
    %397 = arith.extui %396 : i32 to i64
    %398 = arith.addi %397, %c40_i64_136 : i64
    %399 = llvm.getelementptr %14[%398] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %400 = llvm.load volatile %399 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_137 = arith.constant 8 : i64
    %401 = arith.extui %395 : i32 to i64
    %402 = arith.addi %401, %c8_i64_137 : i64
    %403 = llvm.getelementptr %14[%402] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %400, %403 {alignment = 1 : i64} : i64, !llvm.ptr
    %404 = llvm.load %4 : !llvm.ptr -> i32
    %405 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_138 = arith.constant 0 : i64
    %406 = arith.extui %405 : i32 to i64
    %407 = arith.addi %406, %c0_i64_138 : i64
    %408 = llvm.getelementptr %14[%407] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %409 = llvm.load volatile %408 {alignment = 1 : i64} : !llvm.ptr -> i32
    %410 = arith.cmpi eq, %404, %409 : i32
    %411 = arith.extui %410 : i1 to i32
    %c0_i32_139 = arith.constant 0 : i32
    %412 = arith.cmpi eq, %411, %c0_i32_139 : i32
    %413 = arith.extui %412 : i1 to i32
    %c0_i32_140 = arith.constant 0 : i32
    %414 = arith.cmpi ne, %413, %c0_i32_140 : i32
    cf.cond_br %414, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %415 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_141 = arith.constant 2 : i32
    %c31_i32_142 = arith.constant 31 : i32
    %416 = arith.cmpi ule, %c2_i32_141, %c31_i32_142 : i32
    %417 = scf.if %416 -> (i32) {
      %554 = arith.shli %415, %c2_i32_141 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %418 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_143 = arith.constant 16 : i64
    %419 = arith.extui %418 : i32 to i64
    %420 = arith.addi %419, %c16_i64_143 : i64
    %421 = llvm.getelementptr %14[%420] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %422 = llvm.load volatile %421 {alignment = 1 : i64} : !llvm.ptr -> i32
    %423 = arith.addi %417, %422 : i32
    %c-4_i32_144 = arith.constant -4 : i32
    %424 = arith.addi %423, %c-4_i32_144 : i32
    llvm.store %424, %4 : i32, !llvm.ptr
    %425 = llvm.load %5 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %426 = arith.andi %425, %c-32_i32 : i32
    %427 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_145 = arith.constant 0 : i64
    %428 = arith.extui %427 : i32 to i64
    %429 = arith.addi %428, %c0_i64_145 : i64
    %430 = llvm.getelementptr %14[%429] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %431 = llvm.load volatile %430 {alignment = 1 : i64} : !llvm.ptr -> i32
    %432 = arith.addi %426, %431 : i32
    %c32_i32 = arith.constant 32 : i32
    %433 = arith.addi %432, %c32_i32 : i32
    %c0_i64_146 = arith.constant 0 : i64
    %434 = arith.extui %424 : i32 to i64
    %435 = arith.addi %434, %c0_i64_146 : i64
    %436 = llvm.getelementptr %14[%435] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %433, %436 {alignment = 1 : i64} : i32, !llvm.ptr
    %437 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_147 = arith.constant 8 : i64
    %438 = arith.extui %437 : i32 to i64
    %439 = arith.addi %438, %c8_i64_147 : i64
    %440 = llvm.getelementptr %14[%439] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %441 = llvm.load volatile %440 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %441, %4 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %442 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_148 = arith.constant 4 : i64
    %443 = arith.extui %442 : i32 to i64
    %444 = arith.addi %443, %c4_i64_148 : i64
    %445 = llvm.getelementptr %14[%444] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %446 = llvm.load volatile %445 {alignment = 1 : i64} : !llvm.ptr -> i32
    %447 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32_149 = arith.constant 5 : i32
    %c31_i32_150 = arith.constant 31 : i32
    %448 = arith.cmpi ule, %c5_i32_149, %c31_i32_150 : i32
    %449 = scf.if %448 -> (i32) {
      %554 = arith.shli %447, %c5_i32_149 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %450 = arith.addi %446, %449 : i32
    llvm.store %450, %0 : i32, !llvm.ptr
    %451 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_151 = arith.constant 8 : i64
    %452 = arith.extui %451 : i32 to i64
    %453 = arith.addi %452, %c8_i64_151 : i64
    %454 = llvm.getelementptr %14[%453] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %455 = llvm.load volatile %454 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_152 = arith.constant 0 : i64
    %456 = arith.extui %450 : i32 to i64
    %457 = arith.addi %456, %c0_i64_152 : i64
    %458 = llvm.getelementptr %14[%457] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %455, %458 {alignment = 1 : i64} : i64, !llvm.ptr
    %459 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_153 = arith.constant 24 : i32
    %460 = arith.addi %459, %c24_i32_153 : i32
    %461 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_154 = arith.constant 0 : i64
    %462 = arith.extui %461 : i32 to i64
    %463 = arith.addi %462, %c0_i64_154 : i64
    %464 = llvm.getelementptr %14[%463] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %465 = llvm.load volatile %464 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_155 = arith.constant 0 : i64
    %466 = arith.extui %460 : i32 to i64
    %467 = arith.addi %466, %c0_i64_155 : i64
    %468 = llvm.getelementptr %14[%467] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %465, %468 {alignment = 1 : i64} : i64, !llvm.ptr
    %469 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_156 = arith.constant 16 : i32
    %470 = arith.addi %469, %c16_i32_156 : i32
    %471 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_157 = arith.constant 0 : i64
    %472 = arith.extui %471 : i32 to i64
    %473 = arith.addi %472, %c0_i64_157 : i64
    %474 = llvm.getelementptr %14[%473] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %475 = llvm.load volatile %474 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_158 = arith.constant 0 : i64
    %476 = arith.extui %470 : i32 to i64
    %477 = arith.addi %476, %c0_i64_158 : i64
    %478 = llvm.getelementptr %14[%477] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %475, %478 {alignment = 1 : i64} : i64, !llvm.ptr
    %479 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_159 = arith.constant 8 : i32
    %480 = arith.addi %479, %c8_i32_159 : i32
    %481 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_160 = arith.constant 0 : i64
    %482 = arith.extui %481 : i32 to i64
    %483 = arith.addi %482, %c0_i64_160 : i64
    %484 = llvm.getelementptr %14[%483] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %485 = llvm.load volatile %484 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_161 = arith.constant 0 : i64
    %486 = arith.extui %480 : i32 to i64
    %487 = arith.addi %486, %c0_i64_161 : i64
    %488 = llvm.getelementptr %14[%487] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %485, %488 {alignment = 1 : i64} : i64, !llvm.ptr
    %489 = llvm.load %1 : !llvm.ptr -> i32
    %490 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_162 = arith.constant 1 : i32
    %491 = arith.addi %490, %c1_i32_162 : i32
    %c8_i64_163 = arith.constant 8 : i64
    %492 = arith.extui %489 : i32 to i64
    %493 = arith.addi %492, %c8_i64_163 : i64
    %494 = llvm.getelementptr %14[%493] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %491, %494 {alignment = 1 : i64} : i32, !llvm.ptr
    %495 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_164 = arith.constant 0 : i32
    %496 = arith.cmpi eq, %495, %c0_i32_164 : i32
    %497 = arith.extui %496 : i1 to i32
    %c0_i32_165 = arith.constant 0 : i32
    %498 = arith.cmpi ne, %497, %c0_i32_165 : i32
    cf.cond_br %498, ^bb13, ^bb14
  ^bb12:  // pred: ^bb9
    %499 = llvm.load %1 : !llvm.ptr -> i32
    call @f74(%arg0, %499) : (!llvm.ptr, i32) -> ()
    cf.br ^bb11
  ^bb13:  // 3 preds: ^bb11, ^bb14, ^bb15
    %500 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_166 = arith.constant 20 : i64
    %501 = arith.extui %500 : i32 to i64
    %502 = arith.addi %501, %c20_i64_166 : i64
    %503 = llvm.getelementptr %14[%502] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %504 = llvm.load volatile %503 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %504, %3 : i32, !llvm.ptr
    %c0_i32_167 = arith.constant 0 : i32
    %505 = arith.cmpi eq, %504, %c0_i32_167 : i32
    %506 = arith.extui %505 : i1 to i32
    %c0_i32_168 = arith.constant 0 : i32
    %507 = arith.cmpi ne, %506, %c0_i32_168 : i32
    cf.cond_br %507, ^bb16, ^bb17
  ^bb14:  // pred: ^bb11
    %508 = llvm.load %1 : !llvm.ptr -> i32
    %509 = llvm.load %5 : !llvm.ptr -> i32
    %c5_i32_169 = arith.constant 5 : i32
    %c31_i32_170 = arith.constant 31 : i32
    %510 = arith.cmpi ule, %c5_i32_169, %c31_i32_170 : i32
    %511 = scf.if %510 -> (i32) {
      %554 = arith.shrui %509, %c5_i32_169 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    llvm.store %511, %0 : i32, !llvm.ptr
    call @f71(%arg0, %508, %511) : (!llvm.ptr, i32, i32) -> ()
    %512 = llvm.load %1 : !llvm.ptr -> i32
    %513 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_171 = arith.constant 8 : i64
    %514 = arith.extui %513 : i32 to i64
    %515 = arith.addi %514, %c8_i64_171 : i64
    %516 = llvm.getelementptr %14[%515] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %517 = llvm.load volatile %516 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %517, %4 : i32, !llvm.ptr
    %518 = llvm.load %0 : !llvm.ptr -> i32
    %519 = arith.addi %517, %518 : i32
    %c8_i64_172 = arith.constant 8 : i64
    %520 = arith.extui %512 : i32 to i64
    %521 = arith.addi %520, %c8_i64_172 : i64
    %522 = llvm.getelementptr %14[%521] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %519, %522 {alignment = 1 : i64} : i32, !llvm.ptr
    %523 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_173 = arith.constant 4 : i64
    %524 = arith.extui %523 : i32 to i64
    %525 = arith.addi %524, %c4_i64_173 : i64
    %526 = llvm.getelementptr %14[%525] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %527 = llvm.load volatile %526 {alignment = 1 : i64} : !llvm.ptr -> i32
    %528 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32_174 = arith.constant 5 : i32
    %c31_i32_175 = arith.constant 31 : i32
    %529 = arith.cmpi ule, %c5_i32_174, %c31_i32_175 : i32
    %530 = scf.if %529 -> (i32) {
      %554 = arith.shli %528, %c5_i32_174 : i32
      scf.yield %554 : i32
    } else {
      %c0_i32_183 = arith.constant 0 : i32
      scf.yield %c0_i32_183 : i32
    }
    %531 = arith.addi %527, %530 : i32
    %532 = llvm.load %9 : !llvm.ptr -> i32
    %533 = llvm.load %3 : !llvm.ptr -> i32
    %534 = call @f187(%arg0, %531, %532, %533) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %534, %0 : i32, !llvm.ptr
    %535 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32_176 = arith.constant 31 : i32
    %536 = arith.andi %535, %c31_i32_176 : i32
    llvm.store %536, %4 : i32, !llvm.ptr
    %c0_i32_177 = arith.constant 0 : i32
    %537 = arith.cmpi eq, %536, %c0_i32_177 : i32
    %538 = arith.extui %537 : i1 to i32
    %c0_i32_178 = arith.constant 0 : i32
    %539 = arith.cmpi ne, %538, %c0_i32_178 : i32
    cf.cond_br %539, ^bb13, ^bb15
  ^bb15:  // pred: ^bb14
    %540 = llvm.load %0 : !llvm.ptr -> i32
    %541 = llvm.load %3 : !llvm.ptr -> i32
    %542 = arith.addi %540, %541 : i32
    %c0_i32_179 = arith.constant 0 : i32
    %c32_i32_180 = arith.constant 32 : i32
    %543 = llvm.load %4 : !llvm.ptr -> i32
    %544 = arith.subi %c32_i32_180, %543 : i32
    %545 = call @f186(%arg0, %542, %c0_i32_179, %544) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb13
  ^bb16:  // 2 preds: ^bb13, ^bb17
    %546 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_181 = arith.constant 80 : i32
    %547 = arith.addi %546, %c80_i32_181 : i32
    llvm.store %547, %11 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb17:  // pred: ^bb13
    %548 = llvm.load %1 : !llvm.ptr -> i32
    %549 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %550 = arith.addi %549, %c-1_i32 : i32
    %c20_i64_182 = arith.constant 20 : i64
    %551 = arith.extui %548 : i32 to i64
    %552 = arith.addi %551, %c20_i64_182 : i64
    %553 = llvm.getelementptr %14[%552] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %550, %553 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb16
  }
  func.func @f9(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %15 = arith.subi %14, %c80_i32 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %17 = arith.addi %16, %c40_i32 : i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c36_i64 : i64
    %21 = llvm.getelementptr %13[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %23 = arith.addi %22, %c31_i32 : i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_8 = arith.constant 31 : i32
    %24 = arith.cmpi ule, %c5_i32, %c31_i32_8 : i32
    %25 = scf.if %24 -> (i32) {
      %182 = arith.shrui %23, %c5_i32 : i32
      scf.yield %182 : i32
    } else {
      %c0_i32_52 = arith.constant 0 : i32
      scf.yield %c0_i32_52 : i32
    }
    %c5_i32_9 = arith.constant 5 : i32
    %26 = arith.addi %25, %c5_i32_9 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %c1_i32_11 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f102(%arg0, %17, %26, %c0_i32_10, %c1_i32_11, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c44_i64 : i64
    %30 = llvm.getelementptr %13[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %31, %3 : i32, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c40_i64 : i64
    %35 = llvm.getelementptr %13[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_12 = arith.constant 1 : i32
    %37 = arith.cmpi eq, %36, %c1_i32_12 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_13 : i32
    cf.cond_br %39, ^bb4, ^bb5
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // pred: ^bb5
    %40 = llvm.load %5 : !llvm.ptr -> i32
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64 = arith.constant 48 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c48_i64 : i64
    %44 = llvm.getelementptr %13[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %40, %45) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_14 = arith.constant 48 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c48_i64_14 : i64
    %50 = llvm.getelementptr %13[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %46, %51) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_15 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_15) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_16 = arith.constant 48 : i64
    %53 = arith.extui %52 : i32 to i64
    %54 = arith.addi %53, %c48_i64_16 : i64
    %55 = llvm.getelementptr %13[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = llvm.load volatile %55 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %56, %4 : i32, !llvm.ptr
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_17 = arith.constant 40 : i32
    %58 = arith.addi %57, %c40_i32_17 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_18 = arith.constant 0 : i32
    %c4_i32_19 = arith.constant 4 : i32
    %c4_i32_20 = arith.constant 4 : i32
    call @f102(%arg0, %58, %c4_i32, %c0_i32_18, %c4_i32_19, %c4_i32_20) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64_21 = arith.constant 44 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c44_i64_21 : i64
    %62 = llvm.getelementptr %13[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %63, %5 : i32, !llvm.ptr
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_22 = arith.constant 40 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c40_i64_22 : i64
    %67 = llvm.getelementptr %13[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_23 = arith.constant 1 : i32
    %69 = arith.cmpi eq, %68, %c1_i32_23 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_24 : i32
    cf.cond_br %71, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %73 = arith.addi %72, %c16_i32 : i32
    %c16_i32_25 = arith.constant 16 : i32
    %74 = arith.addi %73, %c16_i32_25 : i32
    llvm.store %74, %6 : i32, !llvm.ptr
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_26 = arith.constant 48 : i64
    %76 = arith.extui %75 : i32 to i64
    %77 = arith.addi %76, %c48_i64_26 : i64
    %78 = llvm.getelementptr %13[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %79 = llvm.load volatile %78 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_27 = arith.constant 0 : i64
    %80 = arith.extui %74 : i32 to i64
    %81 = arith.addi %80, %c0_i64_27 : i64
    %82 = llvm.getelementptr %13[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %79, %82 {alignment = 1 : i64} : i32, !llvm.ptr
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_28 = arith.constant 16 : i32
    %84 = arith.addi %83, %c16_i32_28 : i32
    %c8_i32 = arith.constant 8 : i32
    %85 = arith.addi %84, %c8_i32 : i32
    llvm.store %85, %7 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c0_i64_30 : i64
    %88 = llvm.getelementptr %13[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_29, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_31 = arith.constant 0 : i32
    %c36_i64_32 = arith.constant 36 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c36_i64_32 : i64
    %92 = llvm.getelementptr %13[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_31, %92 {alignment = 1 : i64} : i32, !llvm.ptr
    %93 = llvm.load %2 : !llvm.ptr -> i32
    %94 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %95 = arith.extui %93 : i32 to i64
    %96 = arith.addi %95, %c28_i64 : i64
    %97 = llvm.getelementptr %13[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %94, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %99 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %100 = arith.extui %98 : i32 to i64
    %101 = arith.addi %100, %c20_i64 : i64
    %102 = llvm.getelementptr %13[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %99, %102 {alignment = 1 : i64} : i32, !llvm.ptr
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %104 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %105 = arith.extui %103 : i32 to i64
    %106 = arith.addi %105, %c16_i64 : i64
    %107 = llvm.getelementptr %13[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %104, %107 {alignment = 1 : i64} : i32, !llvm.ptr
    %108 = llvm.load %1 : !llvm.ptr -> i32
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_33 = arith.constant 16 : i32
    %110 = arith.addi %109, %c16_i32_33 : i32
    call @f16(%arg0, %108, %110) : (!llvm.ptr, i32, i32) -> ()
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_34 = arith.constant 40 : i32
    %112 = arith.addi %111, %c40_i32_34 : i32
    %c16_i32_35 = arith.constant 16 : i32
    %113 = arith.addi %112, %c16_i32_35 : i32
    %114 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %115 = arith.extui %114 : i32 to i64
    %116 = arith.addi %115, %c0_i64_36 : i64
    %117 = llvm.getelementptr %13[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %118 = llvm.load volatile %117 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_37 = arith.constant 0 : i64
    %119 = arith.extui %113 : i32 to i64
    %120 = arith.addi %119, %c0_i64_37 : i64
    %121 = llvm.getelementptr %13[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %118, %121 {alignment = 1 : i64} : i64, !llvm.ptr
    %122 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_38 = arith.constant 40 : i32
    %123 = arith.addi %122, %c40_i32_38 : i32
    %c8_i32_39 = arith.constant 8 : i32
    %124 = arith.addi %123, %c8_i32_39 : i32
    %125 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c0_i64_40 : i64
    %128 = llvm.getelementptr %13[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %129 = llvm.load volatile %128 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %130 = arith.extui %124 : i32 to i64
    %131 = arith.addi %130, %c0_i64_41 : i64
    %132 = llvm.getelementptr %13[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %129, %132 {alignment = 1 : i64} : i64, !llvm.ptr
    %133 = llvm.load %2 : !llvm.ptr -> i32
    %134 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_42 = arith.constant 16 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c16_i64_42 : i64
    %137 = llvm.getelementptr %13[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load volatile %137 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %138, %8 : i64, !llvm.ptr
    %c40_i64_43 = arith.constant 40 : i64
    %139 = arith.extui %133 : i32 to i64
    %140 = arith.addi %139, %c40_i64_43 : i64
    %141 = llvm.getelementptr %13[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %141 {alignment = 1 : i64} : i64, !llvm.ptr
    %142 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %143 = arith.addi %142, %c64_i32 : i32
    %c8_i32_44 = arith.constant 8 : i32
    %144 = arith.addi %143, %c8_i32_44 : i32
    %145 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_45 = arith.constant 0 : i64
    %146 = arith.extui %145 : i32 to i64
    %147 = arith.addi %146, %c0_i64_45 : i64
    %148 = llvm.getelementptr %13[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %149 = llvm.load volatile %148 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_46 = arith.constant 0 : i64
    %150 = arith.extui %144 : i32 to i64
    %151 = arith.addi %150, %c0_i64_46 : i64
    %152 = llvm.getelementptr %13[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %149, %152 {alignment = 1 : i64} : i32, !llvm.ptr
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %154 = llvm.load %8 : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %155 = arith.extui %153 : i32 to i64
    %156 = arith.addi %155, %c64_i64 : i64
    %157 = llvm.getelementptr %13[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %154, %157 {alignment = 1 : i64} : i64, !llvm.ptr
    %158 = llvm.load %2 : !llvm.ptr -> i32
    %c52_i32 = arith.constant 52 : i32
    %159 = arith.addi %158, %c52_i32 : i32
    llvm.store %159, %1 : i32, !llvm.ptr
    call @f77(%arg0, %159) : (!llvm.ptr, i32) -> ()
    %160 = llvm.load %1 : !llvm.ptr -> i32
    call @f78(%arg0, %160) : (!llvm.ptr, i32) -> ()
    %161 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_47 = arith.constant 4 : i32
    %162 = arith.addi %161, %c4_i32_47 : i32
    %163 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_48 = arith.constant 64 : i32
    %164 = arith.addi %163, %c64_i32_48 : i32
    call @f72(%arg0, %162, %164) : (!llvm.ptr, i32, i32) -> ()
    %165 = llvm.load %0 : !llvm.ptr -> i32
    %166 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %167 = arith.extui %166 : i32 to i64
    %168 = arith.addi %167, %c8_i64 : i64
    %169 = llvm.getelementptr %13[%168] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %170 = llvm.load volatile %169 {alignment = 1 : i64} : !llvm.ptr -> i32
    %171 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %172 = arith.extui %171 : i32 to i64
    %173 = arith.addi %172, %c12_i64 : i64
    %174 = llvm.getelementptr %13[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %175 = llvm.load volatile %174 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1048856_i32 = arith.constant 1048856 : i32
    %c15_i32 = arith.constant 15 : i32
    call @f81(%arg0, %165, %170, %175, %c1048856_i32, %c15_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %176 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_49 = arith.constant 4 : i32
    %177 = arith.addi %176, %c4_i32_49 : i32
    call @f103(%arg0, %177) : (!llvm.ptr, i32) -> ()
    %178 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_50 = arith.constant 4 : i32
    %179 = arith.addi %178, %c4_i32_50 : i32
    call @f104(%arg0, %179) : (!llvm.ptr, i32) -> ()
    %180 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_51 = arith.constant 80 : i32
    %181 = arith.addi %180, %c80_i32_51 : i32
    llvm.store %181, %10 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f10(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %11 = arith.subi %10, %c16_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %13 = arith.addi %12, %c4_i32 : i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %c1_i32_6 = arith.constant 1 : i32
    call @f102(%arg0, %13, %14, %c0_i32_4, %c1_i32_5, %c1_i32_6) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c8_i64 : i64
    %18 = llvm.getelementptr %9[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %19, %4 : i32, !llvm.ptr
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64 : i64
    %23 = llvm.getelementptr %9[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_7 = arith.constant 1 : i32
    %25 = arith.cmpi eq, %24, %c1_i32_7 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %27 = arith.cmpi eq, %26, %c0_i32_8 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_9 : i32
    cf.cond_br %29, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c12_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %37 = call @f187(%arg0, %34, %35, %36) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %37, %1 : i32, !llvm.ptr
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_10 = arith.constant 8 : i64
    %40 = arith.extui %38 : i32 to i64
    %41 = arith.addi %40, %c8_i64_10 : i64
    %42 = llvm.getelementptr %9[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_11 = arith.constant 4 : i64
    %45 = arith.extui %43 : i32 to i64
    %46 = arith.addi %45, %c4_i64_11 : i64
    %47 = llvm.getelementptr %9[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i32, !llvm.ptr
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %49 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %50 = arith.extui %48 : i32 to i64
    %51 = arith.addi %50, %c0_i64 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i32, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_12 = arith.constant 16 : i32
    %54 = arith.addi %53, %c16_i32_12 : i32
    llvm.store %54, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %55 = llvm.load %4 : !llvm.ptr -> i32
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_13 = arith.constant 12 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c12_i64_13 : i64
    %59 = llvm.getelementptr %9[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %55, %60) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f11(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %11 = arith.subi %10, %c80_i32 : i32
    llvm.store %11, %4 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %13 = arith.addi %12, %c32_i32 : i32
    call @f62(%arg0, %13) : (!llvm.ptr, i32) -> ()
    %14 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %15 = arith.addi %14, %c8_i32 : i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_4 = arith.constant 32 : i32
    %18 = arith.addi %17, %c32_i32_4 : i32
    %c1050028_i32 = arith.constant 1050028 : i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64 : i64
    %23 = llvm.getelementptr %9[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c8_i64 : i64
    %28 = llvm.getelementptr %9[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f48(%arg0, %15, %16, %18, %c1050028_i32, %19, %24, %29) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32) -> ()
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_5 = arith.constant 8 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c8_i64_5 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483637_i32 = arith.constant -2147483637 : i32
    %35 = arith.cmpi eq, %34, %c-2147483637_i32 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_6 : i32
    cf.cond_br %37, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %39 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c12_i64 : i64
    %42 = llvm.getelementptr %9[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %44 = arith.extui %38 : i32 to i64
    %45 = arith.addi %44, %c0_i64 : i64
    %46 = llvm.getelementptr %9[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %43, %46 {alignment = 1 : i64} : i64, !llvm.ptr
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_7 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32_7 : i32
    %49 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %50 = arith.addi %49, %c20_i32 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c0_i64_8 : i64
    %53 = llvm.getelementptr %9[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %55 = arith.extui %48 : i32 to i64
    %56 = arith.addi %55, %c0_i64_9 : i64
    %57 = llvm.getelementptr %9[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %57 {alignment = 1 : i64} : i32, !llvm.ptr
    %58 = llvm.load %3 : !llvm.ptr -> i32
    call @f103(%arg0, %58) : (!llvm.ptr, i32) -> ()
    %59 = llvm.load %3 : !llvm.ptr -> i32
    call @f104(%arg0, %59) : (!llvm.ptr, i32) -> ()
    %60 = llvm.load %4 : !llvm.ptr -> i32
    %c80_i32_10 = arith.constant 80 : i32
    %61 = arith.addi %60, %c80_i32_10 : i32
    llvm.store %61, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %62 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_11 = arith.constant 32 : i32
    %63 = arith.addi %62, %c32_i32_11 : i32
    %c16_i32 = arith.constant 16 : i32
    %64 = arith.addi %63, %c16_i32 : i32
    %65 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_12 = arith.constant 8 : i32
    %66 = arith.addi %65, %c8_i32_12 : i32
    %c16_i32_13 = arith.constant 16 : i32
    %67 = arith.addi %66, %c16_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_14 : i64
    %70 = llvm.getelementptr %9[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %72 = arith.extui %64 : i32 to i64
    %73 = arith.addi %72, %c0_i64_15 : i64
    %74 = llvm.getelementptr %9[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %71, %74 {alignment = 1 : i64} : i64, !llvm.ptr
    %75 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_16 = arith.constant 32 : i32
    %76 = arith.addi %75, %c32_i32_16 : i32
    %c8_i32_17 = arith.constant 8 : i32
    %77 = arith.addi %76, %c8_i32_17 : i32
    %78 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %79 = arith.addi %78, %c8_i32_18 : i32
    %c8_i32_19 = arith.constant 8 : i32
    %80 = arith.addi %79, %c8_i32_19 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c0_i64_20 : i64
    %83 = llvm.getelementptr %9[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load volatile %83 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %85 = arith.extui %77 : i32 to i64
    %86 = arith.addi %85, %c0_i64_21 : i64
    %87 = llvm.getelementptr %9[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %84, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %4 : !llvm.ptr -> i32
    %89 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_22 = arith.constant 8 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c8_i64_22 : i64
    %92 = llvm.getelementptr %9[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %94 = arith.extui %88 : i32 to i64
    %95 = arith.addi %94, %c32_i64 : i64
    %96 = llvm.getelementptr %9[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %96 {alignment = 1 : i64} : i64, !llvm.ptr
    %c1049392_i32 = arith.constant 1049392 : i32
    %c43_i32 = arith.constant 43 : i32
    %97 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_23 = arith.constant 32 : i32
    %98 = arith.addi %97, %c32_i32_23 : i32
    %c1049436_i32 = arith.constant 1049436 : i32
    %c1050048_i32 = arith.constant 1050048 : i32
    call @f154(%arg0, %c1049392_i32, %c43_i32, %98, %c1049436_i32, %c1050048_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f12(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %15 = arith.subi %14, %c64_i32 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %17 = arith.addi %16, %c24_i32 : i32
    %c1_i32_8 = arith.constant 1 : i32
    %c0_i32_9 = arith.constant 0 : i32
    %c1_i32_10 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f102(%arg0, %17, %c1_i32_8, %c0_i32_9, %c1_i32_10, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c28_i64 : i64
    %21 = llvm.getelementptr %13[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %22, %3 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c24_i64 : i64
    %26 = llvm.getelementptr %13[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %28 = arith.cmpi eq, %27, %c1_i32_11 : i32
    %29 = arith.extui %28 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %30 = arith.cmpi ne, %29, %c0_i32_12 : i32
    cf.cond_br %30, ^bb4, ^bb5
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // pred: ^bb5
    %31 = llvm.load %5 : !llvm.ptr -> i32
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c32_i64 : i64
    %35 = llvm.getelementptr %13[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %31, %36) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %37 = llvm.load %3 : !llvm.ptr -> i32
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_13 = arith.constant 32 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c32_i64_13 : i64
    %41 = llvm.getelementptr %13[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %37, %42) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_14 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_14) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_15 = arith.constant 32 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c32_i64_15 : i64
    %46 = llvm.getelementptr %13[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %47, %4 : i32, !llvm.ptr
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_16 = arith.constant 24 : i32
    %49 = arith.addi %48, %c24_i32_16 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %c4_i32_18 = arith.constant 4 : i32
    %c4_i32_19 = arith.constant 4 : i32
    call @f102(%arg0, %49, %c4_i32, %c0_i32_17, %c4_i32_18, %c4_i32_19) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_20 = arith.constant 28 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c28_i64_20 : i64
    %53 = llvm.getelementptr %13[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %5 : i32, !llvm.ptr
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_21 = arith.constant 24 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c24_i64_21 : i64
    %58 = llvm.getelementptr %13[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %60 = arith.cmpi eq, %59, %c1_i32_22 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_23 : i32
    cf.cond_br %62, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %63 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %64 = arith.addi %63, %c16_i32 : i32
    llvm.store %64, %6 : i32, !llvm.ptr
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_24 = arith.constant 32 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c32_i64_24 : i64
    %68 = llvm.getelementptr %13[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %70 = arith.extui %64 : i32 to i64
    %71 = arith.addi %70, %c0_i64_25 : i64
    %72 = llvm.getelementptr %13[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i32, !llvm.ptr
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %74 = arith.addi %73, %c8_i32 : i32
    llvm.store %74, %7 : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c0_i64_27 : i64
    %77 = llvm.getelementptr %13[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_26, %77 {alignment = 1 : i64} : i32, !llvm.ptr
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_28 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c20_i64 : i64
    %81 = llvm.getelementptr %13[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_28, %81 {alignment = 1 : i64} : i32, !llvm.ptr
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %83 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c12_i64 : i64
    %86 = llvm.getelementptr %13[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %2 : !llvm.ptr -> i32
    %88 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64 : i64
    %91 = llvm.getelementptr %13[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %2 : !llvm.ptr -> i32
    %93 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_29 = arith.constant 0 : i64
    %94 = arith.extui %92 : i32 to i64
    %95 = arith.addi %94, %c0_i64_29 : i64
    %96 = llvm.getelementptr %13[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %96 {alignment = 1 : i64} : i32, !llvm.ptr
    %97 = llvm.load %1 : !llvm.ptr -> i32
    %98 = llvm.load %2 : !llvm.ptr -> i32
    call @f83(%arg0, %97, %98) : (!llvm.ptr, i32, i32) -> ()
    %99 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_30 = arith.constant 24 : i32
    %100 = arith.addi %99, %c24_i32_30 : i32
    %c16_i32_31 = arith.constant 16 : i32
    %101 = arith.addi %100, %c16_i32_31 : i32
    %102 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c0_i64_32 : i64
    %105 = llvm.getelementptr %13[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    %107 = arith.extui %101 : i32 to i64
    %108 = arith.addi %107, %c0_i64_33 : i64
    %109 = llvm.getelementptr %13[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %106, %109 {alignment = 1 : i64} : i64, !llvm.ptr
    %110 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_34 = arith.constant 24 : i32
    %111 = arith.addi %110, %c24_i32_34 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %112 = arith.addi %111, %c8_i32_35 : i32
    %113 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %114 = arith.extui %113 : i32 to i64
    %115 = arith.addi %114, %c0_i64_36 : i64
    %116 = llvm.getelementptr %13[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %117 = llvm.load volatile %116 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_37 = arith.constant 0 : i64
    %118 = arith.extui %112 : i32 to i64
    %119 = arith.addi %118, %c0_i64_37 : i64
    %120 = llvm.getelementptr %13[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %117, %120 {alignment = 1 : i64} : i64, !llvm.ptr
    %121 = llvm.load %2 : !llvm.ptr -> i32
    %122 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_38 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_38 : i64
    %125 = llvm.getelementptr %13[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %126, %8 : i64, !llvm.ptr
    %c24_i64_39 = arith.constant 24 : i64
    %127 = arith.extui %121 : i32 to i64
    %128 = arith.addi %127, %c24_i64_39 : i64
    %129 = llvm.getelementptr %13[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %129 {alignment = 1 : i64} : i64, !llvm.ptr
    %130 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %131 = arith.addi %130, %c48_i32 : i32
    %c8_i32_40 = arith.constant 8 : i32
    %132 = arith.addi %131, %c8_i32_40 : i32
    %133 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_41 = arith.constant 0 : i64
    %134 = arith.extui %133 : i32 to i64
    %135 = arith.addi %134, %c0_i64_41 : i64
    %136 = llvm.getelementptr %13[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = llvm.load volatile %136 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %138 = arith.extui %132 : i32 to i64
    %139 = arith.addi %138, %c0_i64_42 : i64
    %140 = llvm.getelementptr %13[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %137, %140 {alignment = 1 : i64} : i32, !llvm.ptr
    %141 = llvm.load %2 : !llvm.ptr -> i32
    %142 = llvm.load %8 : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %143 = arith.extui %141 : i32 to i64
    %144 = arith.addi %143, %c48_i64 : i64
    %145 = llvm.getelementptr %13[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %142, %145 {alignment = 1 : i64} : i64, !llvm.ptr
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %147 = arith.addi %146, %c36_i32 : i32
    llvm.store %147, %7 : i32, !llvm.ptr
    call @f77(%arg0, %147) : (!llvm.ptr, i32) -> ()
    %148 = llvm.load %7 : !llvm.ptr -> i32
    call @f78(%arg0, %148) : (!llvm.ptr, i32) -> ()
    %149 = llvm.load %0 : !llvm.ptr -> i32
    %150 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_43 = arith.constant 48 : i32
    %151 = arith.addi %150, %c48_i32_43 : i32
    call @f72(%arg0, %149, %151) : (!llvm.ptr, i32, i32) -> ()
    %152 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_44 = arith.constant 64 : i32
    %153 = arith.addi %152, %c64_i32_44 : i32
    llvm.store %153, %10 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f13(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c20_i64 : i64
    %11 = llvm.getelementptr %7[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load volatile %11 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %12, %2 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c12_i64 : i64
    %16 = llvm.getelementptr %7[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = arith.cmpi eq, %12, %17 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_4 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_5 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c16_i64 : i64
    %26 = llvm.getelementptr %7[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %29 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %30 = scf.if %29 -> (i32) {
      %199 = arith.shli %28, %c2_i32 : i32
      scf.yield %199 : i32
    } else {
      %c0_i32_51 = arith.constant 0 : i32
      scf.yield %c0_i32_51 : i32
    }
    %31 = arith.addi %27, %30 : i32
    %c64_i32 = arith.constant 64 : i32
    %c0_i64 = arith.constant 0 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c0_i64 : i64
    %34 = llvm.getelementptr %7[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c64_i32, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %37 = arith.addi %36, %c1_i32_6 : i32
    %c20_i64_7 = arith.constant 20 : i64
    %38 = arith.extui %35 : i32 to i64
    %39 = arith.addi %38, %c20_i64_7 : i64
    %40 = llvm.getelementptr %7[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %37, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c8_i64 : i64
    %44 = llvm.getelementptr %7[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %45, %3 : i32, !llvm.ptr
    %46 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c0_i64_8 : i64
    %49 = llvm.getelementptr %7[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i32
    %51 = arith.cmpi eq, %45, %50 : i32
    %52 = arith.extui %51 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %53 = arith.cmpi eq, %52, %c0_i32_9 : i32
    %54 = arith.extui %53 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_10 : i32
    cf.cond_br %55, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %57 = arith.addi %56, %c12_i32 : i32
    call @f73(%arg0, %57) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %59 = arith.addi %58, %c32_i32 : i32
    llvm.store %59, %2 : i32, !llvm.ptr
    %60 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c4_i64 : i64
    %63 = llvm.getelementptr %7[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i32
    %65 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_11 = arith.constant 31 : i32
    %66 = arith.cmpi ule, %c5_i32, %c31_i32_11 : i32
    %67 = scf.if %66 -> (i32) {
      %199 = arith.shli %65, %c5_i32 : i32
      scf.yield %199 : i32
    } else {
      %c0_i32_51 = arith.constant 0 : i32
      scf.yield %c0_i32_51 : i32
    }
    %68 = arith.addi %64, %67 : i32
    llvm.store %68, %4 : i32, !llvm.ptr
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c0_i64_12 : i64
    %72 = llvm.getelementptr %7[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_13 = arith.constant 0 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c0_i64_13 : i64
    %76 = llvm.getelementptr %7[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i64, !llvm.ptr
    %77 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %78 = arith.addi %77, %c24_i32 : i32
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_14 = arith.constant 24 : i32
    %80 = arith.addi %79, %c24_i32_14 : i32
    %c0_i64_15 = arith.constant 0 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c0_i64_15 : i64
    %83 = llvm.getelementptr %7[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load volatile %83 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %85 = arith.extui %78 : i32 to i64
    %86 = arith.addi %85, %c0_i64_16 : i64
    %87 = llvm.getelementptr %7[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %84, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %89 = arith.addi %88, %c16_i32 : i32
    %90 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_17 = arith.constant 16 : i32
    %91 = arith.addi %90, %c16_i32_17 : i32
    %c0_i64_18 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_18 : i64
    %94 = llvm.getelementptr %7[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_19 = arith.constant 0 : i64
    %96 = arith.extui %89 : i32 to i64
    %97 = arith.addi %96, %c0_i64_19 : i64
    %98 = llvm.getelementptr %7[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %98 {alignment = 1 : i64} : i64, !llvm.ptr
    %99 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %100 = arith.addi %99, %c8_i32 : i32
    %101 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_20 = arith.constant 8 : i32
    %102 = arith.addi %101, %c8_i32_20 : i32
    %c0_i64_21 = arith.constant 0 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c0_i64_21 : i64
    %105 = llvm.getelementptr %7[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_22 = arith.constant 0 : i64
    %107 = arith.extui %100 : i32 to i64
    %108 = arith.addi %107, %c0_i64_22 : i64
    %109 = llvm.getelementptr %7[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %106, %109 {alignment = 1 : i64} : i64, !llvm.ptr
    %110 = llvm.load %1 : !llvm.ptr -> i32
    %111 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_23 = arith.constant 1 : i32
    %112 = arith.addi %111, %c1_i32_23 : i32
    llvm.store %112, %0 : i32, !llvm.ptr
    %c8_i64_24 = arith.constant 8 : i64
    %113 = arith.extui %110 : i32 to i64
    %114 = arith.addi %113, %c8_i64_24 : i64
    %115 = llvm.getelementptr %7[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    %116 = llvm.load %0 : !llvm.ptr -> i32
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_25 : i64
    %120 = llvm.getelementptr %7[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i32
    %122 = arith.cmpi eq, %116, %121 : i32
    %123 = arith.extui %122 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %124 = arith.cmpi eq, %123, %c0_i32_26 : i32
    %125 = arith.extui %124 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %126 = arith.cmpi ne, %125, %c0_i32_27 : i32
    cf.cond_br %126, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %127 = llvm.load %1 : !llvm.ptr -> i32
    call @f74(%arg0, %127) : (!llvm.ptr, i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %128 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_28 = arith.constant 4 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c4_i64_28 : i64
    %131 = llvm.getelementptr %7[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load volatile %131 {alignment = 1 : i64} : !llvm.ptr -> i32
    %133 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i32_29 = arith.constant 5 : i32
    %c31_i32_30 = arith.constant 31 : i32
    %134 = arith.cmpi ule, %c5_i32_29, %c31_i32_30 : i32
    %135 = scf.if %134 -> (i32) {
      %199 = arith.shli %133, %c5_i32_29 : i32
      scf.yield %199 : i32
    } else {
      %c0_i32_51 = arith.constant 0 : i32
      scf.yield %c0_i32_51 : i32
    }
    %136 = arith.addi %132, %135 : i32
    llvm.store %136, %0 : i32, !llvm.ptr
    %137 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %138 = arith.extui %137 : i32 to i64
    %139 = arith.addi %138, %c0_i64_31 : i64
    %140 = llvm.getelementptr %7[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = llvm.load volatile %140 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_32 = arith.constant 0 : i64
    %142 = arith.extui %136 : i32 to i64
    %143 = arith.addi %142, %c0_i64_32 : i64
    %144 = llvm.getelementptr %7[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %141, %144 {alignment = 1 : i64} : i64, !llvm.ptr
    %145 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_33 = arith.constant 24 : i32
    %146 = arith.addi %145, %c24_i32_33 : i32
    %147 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_34 = arith.constant 24 : i32
    %148 = arith.addi %147, %c24_i32_34 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c0_i64_35 : i64
    %151 = llvm.getelementptr %7[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_36 = arith.constant 0 : i64
    %153 = arith.extui %146 : i32 to i64
    %154 = arith.addi %153, %c0_i64_36 : i64
    %155 = llvm.getelementptr %7[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %152, %155 {alignment = 1 : i64} : i64, !llvm.ptr
    %156 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_37 = arith.constant 16 : i32
    %157 = arith.addi %156, %c16_i32_37 : i32
    %158 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_38 = arith.constant 16 : i32
    %159 = arith.addi %158, %c16_i32_38 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c0_i64_39 : i64
    %162 = llvm.getelementptr %7[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_40 = arith.constant 0 : i64
    %164 = arith.extui %157 : i32 to i64
    %165 = arith.addi %164, %c0_i64_40 : i64
    %166 = llvm.getelementptr %7[%165] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %163, %166 {alignment = 1 : i64} : i64, !llvm.ptr
    %167 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_41 = arith.constant 8 : i32
    %168 = arith.addi %167, %c8_i32_41 : i32
    %169 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_42 = arith.constant 8 : i32
    %170 = arith.addi %169, %c8_i32_42 : i32
    %c0_i64_43 = arith.constant 0 : i64
    %171 = arith.extui %170 : i32 to i64
    %172 = arith.addi %171, %c0_i64_43 : i64
    %173 = llvm.getelementptr %7[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %174 = llvm.load volatile %173 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_44 = arith.constant 0 : i64
    %175 = arith.extui %168 : i32 to i64
    %176 = arith.addi %175, %c0_i64_44 : i64
    %177 = llvm.getelementptr %7[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %174, %177 {alignment = 1 : i64} : i64, !llvm.ptr
    %178 = llvm.load %1 : !llvm.ptr -> i32
    %179 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_45 = arith.constant 2 : i32
    %180 = arith.addi %179, %c2_i32_45 : i32
    %c8_i64_46 = arith.constant 8 : i64
    %181 = arith.extui %178 : i32 to i64
    %182 = arith.addi %181, %c8_i64_46 : i64
    %183 = llvm.getelementptr %7[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %180, %183 {alignment = 1 : i64} : i32, !llvm.ptr
    %184 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_47 = arith.constant 20 : i64
    %185 = arith.extui %184 : i32 to i64
    %186 = arith.addi %185, %c20_i64_47 : i64
    %187 = llvm.getelementptr %7[%186] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %188 = llvm.load volatile %187 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %188, %0 : i32, !llvm.ptr
    %c0_i32_48 = arith.constant 0 : i32
    %189 = arith.cmpi eq, %188, %c0_i32_48 : i32
    %190 = arith.extui %189 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %191 = arith.cmpi ne, %190, %c0_i32_49 : i32
    cf.cond_br %191, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %192 = llvm.load %1 : !llvm.ptr -> i32
    call @f74(%arg0, %192) : (!llvm.ptr, i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %193 = llvm.load %1 : !llvm.ptr -> i32
    %194 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %195 = arith.addi %194, %c-1_i32 : i32
    %c20_i64_50 = arith.constant 20 : i64
    %196 = arith.extui %193 : i32 to i64
    %197 = arith.addi %196, %c20_i64_50 : i64
    %198 = llvm.getelementptr %7[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %195, %198 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb9
  }
  func.func @f14(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %15 = arith.subi %14, %c80_i32 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %17 = arith.addi %16, %c40_i32 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1_i32_9 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f102(%arg0, %17, %c2_i32, %c0_i32_8, %c1_i32_9, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c44_i64 : i64
    %21 = llvm.getelementptr %13[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %22, %3 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c40_i64 : i64
    %26 = llvm.getelementptr %13[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_10 = arith.constant 1 : i32
    %28 = arith.cmpi eq, %27, %c1_i32_10 : i32
    %29 = arith.extui %28 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %30 = arith.cmpi ne, %29, %c0_i32_11 : i32
    cf.cond_br %30, ^bb4, ^bb5
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // pred: ^bb5
    %31 = llvm.load %5 : !llvm.ptr -> i32
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64 = arith.constant 48 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c48_i64 : i64
    %35 = llvm.getelementptr %13[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %31, %36) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %37 = llvm.load %3 : !llvm.ptr -> i32
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_12 = arith.constant 48 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c48_i64_12 : i64
    %41 = llvm.getelementptr %13[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %37, %42) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_13 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_13) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_14 = arith.constant 48 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c48_i64_14 : i64
    %46 = llvm.getelementptr %13[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %47, %4 : i32, !llvm.ptr
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_15 = arith.constant 40 : i32
    %49 = arith.addi %48, %c40_i32_15 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_16 = arith.constant 0 : i32
    %c4_i32_17 = arith.constant 4 : i32
    %c4_i32_18 = arith.constant 4 : i32
    call @f102(%arg0, %49, %c4_i32, %c0_i32_16, %c4_i32_17, %c4_i32_18) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i64_19 = arith.constant 44 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c44_i64_19 : i64
    %53 = llvm.getelementptr %13[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %5 : i32, !llvm.ptr
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_20 = arith.constant 40 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c40_i64_20 : i64
    %58 = llvm.getelementptr %13[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_21 = arith.constant 1 : i32
    %60 = arith.cmpi eq, %59, %c1_i32_21 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_22 : i32
    cf.cond_br %62, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %63 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %64 = arith.addi %63, %c16_i32 : i32
    %c16_i32_23 = arith.constant 16 : i32
    %65 = arith.addi %64, %c16_i32_23 : i32
    llvm.store %65, %6 : i32, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i64_24 = arith.constant 48 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c48_i64_24 : i64
    %69 = llvm.getelementptr %13[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %71 = arith.extui %65 : i32 to i64
    %72 = arith.addi %71, %c0_i64_25 : i64
    %73 = llvm.getelementptr %13[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %70, %73 {alignment = 1 : i64} : i32, !llvm.ptr
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_26 = arith.constant 16 : i32
    %75 = arith.addi %74, %c16_i32_26 : i32
    %c8_i32 = arith.constant 8 : i32
    %76 = arith.addi %75, %c8_i32 : i32
    llvm.store %76, %7 : i32, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %77 = arith.extui %76 : i32 to i64
    %78 = arith.addi %77, %c0_i64_28 : i64
    %79 = llvm.getelementptr %13[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_27, %79 {alignment = 1 : i64} : i32, !llvm.ptr
    %80 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_29 = arith.constant 0 : i32
    %c36_i64 = arith.constant 36 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c36_i64 : i64
    %83 = llvm.getelementptr %13[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_29, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %85 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c28_i64 : i64
    %88 = llvm.getelementptr %13[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %90 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %91 = arith.extui %89 : i32 to i64
    %92 = arith.addi %91, %c20_i64 : i64
    %93 = llvm.getelementptr %13[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %93 {alignment = 1 : i64} : i32, !llvm.ptr
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %95 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %96 = arith.extui %94 : i32 to i64
    %97 = arith.addi %96, %c16_i64 : i64
    %98 = llvm.getelementptr %13[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_30 = arith.constant 16 : i32
    %101 = arith.addi %100, %c16_i32_30 : i32
    call @f17(%arg0, %99, %101) : (!llvm.ptr, i32, i32) -> ()
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_31 = arith.constant 40 : i32
    %103 = arith.addi %102, %c40_i32_31 : i32
    %c16_i32_32 = arith.constant 16 : i32
    %104 = arith.addi %103, %c16_i32_32 : i32
    %105 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %106 = arith.extui %105 : i32 to i64
    %107 = arith.addi %106, %c0_i64_33 : i64
    %108 = llvm.getelementptr %13[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %109 = llvm.load volatile %108 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_34 = arith.constant 0 : i64
    %110 = arith.extui %104 : i32 to i64
    %111 = arith.addi %110, %c0_i64_34 : i64
    %112 = llvm.getelementptr %13[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %112 {alignment = 1 : i64} : i64, !llvm.ptr
    %113 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_35 = arith.constant 40 : i32
    %114 = arith.addi %113, %c40_i32_35 : i32
    %c8_i32_36 = arith.constant 8 : i32
    %115 = arith.addi %114, %c8_i32_36 : i32
    %116 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %117 = arith.extui %116 : i32 to i64
    %118 = arith.addi %117, %c0_i64_37 : i64
    %119 = llvm.getelementptr %13[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %120 = llvm.load volatile %119 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_38 = arith.constant 0 : i64
    %121 = arith.extui %115 : i32 to i64
    %122 = arith.addi %121, %c0_i64_38 : i64
    %123 = llvm.getelementptr %13[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %120, %123 {alignment = 1 : i64} : i64, !llvm.ptr
    %124 = llvm.load %2 : !llvm.ptr -> i32
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64_39 = arith.constant 16 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c16_i64_39 : i64
    %128 = llvm.getelementptr %13[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %129 = llvm.load volatile %128 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %129, %8 : i64, !llvm.ptr
    %c40_i64_40 = arith.constant 40 : i64
    %130 = arith.extui %124 : i32 to i64
    %131 = arith.addi %130, %c40_i64_40 : i64
    %132 = llvm.getelementptr %13[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %129, %132 {alignment = 1 : i64} : i64, !llvm.ptr
    %133 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %134 = arith.addi %133, %c64_i32 : i32
    %c8_i32_41 = arith.constant 8 : i32
    %135 = arith.addi %134, %c8_i32_41 : i32
    %136 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %137 = arith.extui %136 : i32 to i64
    %138 = arith.addi %137, %c0_i64_42 : i64
    %139 = llvm.getelementptr %13[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = llvm.load volatile %139 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_43 = arith.constant 0 : i64
    %141 = arith.extui %135 : i32 to i64
    %142 = arith.addi %141, %c0_i64_43 : i64
    %143 = llvm.getelementptr %13[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %140, %143 {alignment = 1 : i64} : i32, !llvm.ptr
    %144 = llvm.load %2 : !llvm.ptr -> i32
    %145 = llvm.load %8 : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %146 = arith.extui %144 : i32 to i64
    %147 = arith.addi %146, %c64_i64 : i64
    %148 = llvm.getelementptr %13[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %145, %148 {alignment = 1 : i64} : i64, !llvm.ptr
    %149 = llvm.load %2 : !llvm.ptr -> i32
    %c52_i32 = arith.constant 52 : i32
    %150 = arith.addi %149, %c52_i32 : i32
    llvm.store %150, %7 : i32, !llvm.ptr
    call @f77(%arg0, %150) : (!llvm.ptr, i32) -> ()
    %151 = llvm.load %7 : !llvm.ptr -> i32
    call @f78(%arg0, %151) : (!llvm.ptr, i32) -> ()
    %152 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_44 = arith.constant 4 : i32
    %153 = arith.addi %152, %c4_i32_44 : i32
    %154 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_45 = arith.constant 64 : i32
    %155 = arith.addi %154, %c64_i32_45 : i32
    call @f72(%arg0, %153, %155) : (!llvm.ptr, i32, i32) -> ()
    %156 = llvm.load %0 : !llvm.ptr -> i32
    %157 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c8_i64 : i64
    %160 = llvm.getelementptr %13[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i32
    %162 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %163 = arith.extui %162 : i32 to i64
    %164 = arith.addi %163, %c12_i64 : i64
    %165 = llvm.getelementptr %13[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %166 = llvm.load volatile %165 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1049116_i32 = arith.constant 1049116 : i32
    %c17_i32 = arith.constant 17 : i32
    call @f81(%arg0, %156, %161, %166, %c1049116_i32, %c17_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %167 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_46 = arith.constant 4 : i32
    %168 = arith.addi %167, %c4_i32_46 : i32
    call @f103(%arg0, %168) : (!llvm.ptr, i32) -> ()
    %169 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_47 = arith.constant 4 : i32
    %170 = arith.addi %169, %c4_i32_47 : i32
    call @f104(%arg0, %170) : (!llvm.ptr, i32) -> ()
    %171 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_48 = arith.constant 80 : i32
    %172 = arith.addi %171, %c80_i32_48 : i32
    llvm.store %172, %10 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f15(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %14 = arith.subi %13, %c96_i32 : i32
    llvm.store %14, %2 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %3 : i32, !llvm.ptr
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_7 = arith.constant 24 : i32
    %16 = arith.addi %15, %c24_i32_7 : i32
    llvm.store %16, %4 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %18 = arith.addi %17, %c56_i32 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64_8 : i64
    %21 = llvm.getelementptr %12[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_9 = arith.constant 0 : i64
    %23 = arith.extui %16 : i32 to i64
    %24 = arith.addi %23, %c0_i64_9 : i64
    %25 = llvm.getelementptr %12[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i64, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %27 = arith.addi %26, %c16_i32 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %29 = arith.addi %28, %c48_i32 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64_10 : i64
    %32 = llvm.getelementptr %12[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %34 = arith.extui %27 : i32 to i64
    %35 = arith.addi %34, %c0_i64_11 : i64
    %36 = llvm.getelementptr %12[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i64, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %38 = arith.addi %37, %c8_i32 : i32
    llvm.store %38, %6 : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %40 = arith.addi %39, %c40_i32 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c0_i64_12 : i64
    %43 = llvm.getelementptr %12[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_13 = arith.constant 0 : i64
    %45 = arith.extui %38 : i32 to i64
    %46 = arith.addi %45, %c0_i64_13 : i64
    %47 = llvm.getelementptr %12[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i64, !llvm.ptr
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c32_i64 : i64
    %52 = llvm.getelementptr %12[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_14 = arith.constant 0 : i64
    %54 = arith.extui %48 : i32 to i64
    %55 = arith.addi %54, %c0_i64_14 : i64
    %56 = llvm.getelementptr %12[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c0_i32_16 = arith.constant 0 : i32
    call @f70(%arg0, %57, %c0_i32_15, %c0_i32_16) : (!llvm.ptr, i32, i32, i32) -> ()
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %59 = arith.addi %58, %c64_i32 : i32
    %c8_i32_17 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32_17 : i32
    %c0_i64_18 = arith.constant 0 : i64
    %c0_i64_19 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64_19 : i64
    %63 = llvm.getelementptr %12[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_18, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_20 = arith.constant 64 : i32
    %65 = arith.addi %64, %c64_i32_20 : i32
    %c16_i32_21 = arith.constant 16 : i32
    %66 = arith.addi %65, %c16_i32_21 : i32
    %c0_i64_22 = arith.constant 0 : i64
    %c0_i64_23 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_23 : i64
    %69 = llvm.getelementptr %12[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_22, %69 {alignment = 1 : i64} : i64, !llvm.ptr
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_24 = arith.constant 64 : i32
    %71 = arith.addi %70, %c64_i32_24 : i32
    %c24_i32_25 = arith.constant 24 : i32
    %72 = arith.addi %71, %c24_i32_25 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %c0_i64_27 = arith.constant 0 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c0_i64_27 : i64
    %75 = llvm.getelementptr %12[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_26, %75 {alignment = 1 : i64} : i64, !llvm.ptr
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %77 = arith.addi %76, %c32_i32 : i32
    %c24_i32_28 = arith.constant 24 : i32
    %78 = arith.addi %77, %c24_i32_28 : i32
    %79 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_29 = arith.constant 0 : i64
    %80 = arith.extui %79 : i32 to i64
    %81 = arith.addi %80, %c0_i64_29 : i64
    %82 = llvm.getelementptr %12[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %83 = llvm.load volatile %82 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %84 = arith.extui %78 : i32 to i64
    %85 = arith.addi %84, %c0_i64_30 : i64
    %86 = llvm.getelementptr %12[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i64, !llvm.ptr
    %87 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_31 = arith.constant 32 : i32
    %88 = arith.addi %87, %c32_i32_31 : i32
    %c16_i32_32 = arith.constant 16 : i32
    %89 = arith.addi %88, %c16_i32_32 : i32
    %90 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64_33 : i64
    %93 = llvm.getelementptr %12[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_34 = arith.constant 0 : i64
    %95 = arith.extui %89 : i32 to i64
    %96 = arith.addi %95, %c0_i64_34 : i64
    %97 = llvm.getelementptr %12[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %94, %97 {alignment = 1 : i64} : i64, !llvm.ptr
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_35 = arith.constant 32 : i32
    %99 = arith.addi %98, %c32_i32_35 : i32
    %c8_i32_36 = arith.constant 8 : i32
    %100 = arith.addi %99, %c8_i32_36 : i32
    %101 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_37 : i64
    %104 = llvm.getelementptr %12[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_38 = arith.constant 0 : i64
    %106 = arith.extui %100 : i32 to i64
    %107 = arith.addi %106, %c0_i64_38 : i64
    %108 = llvm.getelementptr %12[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %108 {alignment = 1 : i64} : i64, !llvm.ptr
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_39 = arith.constant 0 : i64
    %c64_i64 = arith.constant 64 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c64_i64 : i64
    %112 = llvm.getelementptr %12[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_39, %112 {alignment = 1 : i64} : i64, !llvm.ptr
    %113 = llvm.load %2 : !llvm.ptr -> i32
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %115 = arith.extui %114 : i32 to i64
    %116 = arith.addi %115, %c0_i64_40 : i64
    %117 = llvm.getelementptr %12[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %118 = llvm.load volatile %117 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64_41 = arith.constant 32 : i64
    %119 = arith.extui %113 : i32 to i64
    %120 = arith.addi %119, %c32_i64_41 : i64
    %121 = llvm.getelementptr %12[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %118, %121 {alignment = 1 : i64} : i64, !llvm.ptr
    %122 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_42 = arith.constant 64 : i32
    %123 = arith.addi %122, %c64_i32_42 : i32
    llvm.store %123, %4 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %124 = llvm.load %0 : !llvm.ptr -> i32
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i64_43 = arith.constant 64 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c64_i64_43 : i64
    %128 = llvm.getelementptr %12[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %129 = llvm.load volatile %128 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c24_i64 = arith.constant 24 : i64
    %130 = arith.extui %124 : i32 to i64
    %131 = arith.addi %130, %c24_i64 : i64
    %132 = llvm.getelementptr %12[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %129, %132 {alignment = 1 : i64} : i64, !llvm.ptr
    %133 = llvm.load %0 : !llvm.ptr -> i32
    %134 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c12_i64 : i64
    %137 = llvm.getelementptr %12[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load volatile %137 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_44 = arith.constant 0 : i64
    %139 = arith.extui %133 : i32 to i64
    %140 = arith.addi %139, %c0_i64_44 : i64
    %141 = llvm.getelementptr %12[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %141 {alignment = 1 : i64} : i64, !llvm.ptr
    %142 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_45 = arith.constant 16 : i32
    %143 = arith.addi %142, %c16_i32_45 : i32
    %144 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %145 = arith.addi %144, %c28_i32 : i32
    %c0_i64_46 = arith.constant 0 : i64
    %146 = arith.extui %145 : i32 to i64
    %147 = arith.addi %146, %c0_i64_46 : i64
    %148 = llvm.getelementptr %12[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %149 = llvm.load volatile %148 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %150 = arith.extui %143 : i32 to i64
    %151 = arith.addi %150, %c0_i64_47 : i64
    %152 = llvm.getelementptr %12[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %149, %152 {alignment = 1 : i64} : i32, !llvm.ptr
    %153 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_48 = arith.constant 8 : i32
    %154 = arith.addi %153, %c8_i32_48 : i32
    %155 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %156 = arith.addi %155, %c20_i32 : i32
    %c0_i64_49 = arith.constant 0 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c0_i64_49 : i64
    %159 = llvm.getelementptr %12[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_50 = arith.constant 0 : i64
    %161 = arith.extui %154 : i32 to i64
    %162 = arith.addi %161, %c0_i64_50 : i64
    %163 = llvm.getelementptr %12[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %160, %163 {alignment = 1 : i64} : i64, !llvm.ptr
    %164 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32_51 = arith.constant 32 : i32
    %165 = arith.addi %164, %c32_i32_51 : i32
    %166 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_52 = arith.constant 64 : i32
    %167 = arith.addi %166, %c64_i32_52 : i32
    %c8_i32_53 = arith.constant 8 : i32
    %168 = arith.addi %167, %c8_i32_53 : i32
    %c0_i64_54 = arith.constant 0 : i64
    %169 = arith.extui %168 : i32 to i64
    %170 = arith.addi %169, %c0_i64_54 : i64
    %171 = llvm.getelementptr %12[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %172 = llvm.load volatile %171 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_55 = arith.constant 0 : i64
    %173 = arith.extui %165 : i32 to i64
    %174 = arith.addi %173, %c0_i64_55 : i64
    %175 = llvm.getelementptr %12[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %172, %175 {alignment = 1 : i64} : i64, !llvm.ptr
    %176 = llvm.load %0 : !llvm.ptr -> i32
    %c40_i32_56 = arith.constant 40 : i32
    %177 = arith.addi %176, %c40_i32_56 : i32
    %178 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_57 = arith.constant 64 : i32
    %179 = arith.addi %178, %c64_i32_57 : i32
    %c16_i32_58 = arith.constant 16 : i32
    %180 = arith.addi %179, %c16_i32_58 : i32
    %c0_i64_59 = arith.constant 0 : i64
    %181 = arith.extui %180 : i32 to i64
    %182 = arith.addi %181, %c0_i64_59 : i64
    %183 = llvm.getelementptr %12[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %184 = llvm.load volatile %183 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_60 = arith.constant 0 : i64
    %185 = arith.extui %177 : i32 to i64
    %186 = arith.addi %185, %c0_i64_60 : i64
    %187 = llvm.getelementptr %12[%186] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %184, %187 {alignment = 1 : i64} : i64, !llvm.ptr
    %188 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32_61 = arith.constant 48 : i32
    %189 = arith.addi %188, %c48_i32_61 : i32
    %190 = llvm.load %2 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %191 = arith.addi %190, %c88_i32 : i32
    %c0_i64_62 = arith.constant 0 : i64
    %192 = arith.extui %191 : i32 to i64
    %193 = arith.addi %192, %c0_i64_62 : i64
    %194 = llvm.getelementptr %12[%193] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %195 = llvm.load volatile %194 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_63 = arith.constant 0 : i64
    %196 = arith.extui %189 : i32 to i64
    %197 = arith.addi %196, %c0_i64_63 : i64
    %198 = llvm.getelementptr %12[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %195, %198 {alignment = 1 : i64} : i64, !llvm.ptr
    %199 = llvm.load %2 : !llvm.ptr -> i32
    %c96_i32_64 = arith.constant 96 : i32
    %200 = arith.addi %199, %c96_i32_64 : i32
    llvm.store %200, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %201 = llvm.load %4 : !llvm.ptr -> i32
    %202 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_65 = arith.constant 32 : i32
    %203 = arith.addi %202, %c32_i32_65 : i32
    %204 = llvm.load %3 : !llvm.ptr -> i32
    %205 = arith.addi %203, %204 : i32
    %c0_i64_66 = arith.constant 0 : i64
    %206 = arith.extui %205 : i32 to i64
    %207 = arith.addi %206, %c0_i64_66 : i64
    %208 = llvm.getelementptr %12[%207] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %209 = llvm.load volatile %208 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %209, %7 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %210 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %211 = scf.if %210 -> (i64) {
      %258 = arith.shli %209, %c56_i64 : i64
      scf.yield %258 : i64
    } else {
      %c0_i64_87 = arith.constant 0 : i64
      scf.yield %c0_i64_87 : i64
    }
    %212 = llvm.load %7 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %213 = arith.andi %212, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_67 = arith.constant 63 : i64
    %214 = arith.cmpi ule, %c40_i64, %c63_i64_67 : i64
    %215 = scf.if %214 -> (i64) {
      %258 = arith.shli %213, %c40_i64 : i64
      scf.yield %258 : i64
    } else {
      %c0_i64_87 = arith.constant 0 : i64
      scf.yield %c0_i64_87 : i64
    }
    %216 = arith.ori %211, %215 : i64
    %217 = llvm.load %7 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %218 = arith.andi %217, %c16711680_i64 : i64
    %c24_i64_68 = arith.constant 24 : i64
    %c63_i64_69 = arith.constant 63 : i64
    %219 = arith.cmpi ule, %c24_i64_68, %c63_i64_69 : i64
    %220 = scf.if %219 -> (i64) {
      %258 = arith.shli %218, %c24_i64_68 : i64
      scf.yield %258 : i64
    } else {
      %c0_i64_87 = arith.constant 0 : i64
      scf.yield %c0_i64_87 : i64
    }
    %221 = llvm.load %7 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %222 = arith.andi %221, %c4278190080_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %c63_i64_70 = arith.constant 63 : i64
    %223 = arith.cmpi ule, %c8_i64, %c63_i64_70 : i64
    %224 = scf.if %223 -> (i64) {
      %258 = arith.shli %222, %c8_i64 : i64
      scf.yield %258 : i64
    } else {
      %c0_i64_87 = arith.constant 0 : i64
      scf.yield %c0_i64_87 : i64
    }
    %225 = arith.ori %220, %224 : i64
    %226 = arith.ori %216, %225 : i64
    %227 = llvm.load %7 : !llvm.ptr -> i64
    %c8_i64_71 = arith.constant 8 : i64
    %c63_i64_72 = arith.constant 63 : i64
    %228 = arith.cmpi ule, %c8_i64_71, %c63_i64_72 : i64
    %229 = scf.if %228 -> (i64) {
      %258 = arith.shrui %227, %c8_i64_71 : i64
      scf.yield %258 : i64
    } else {
      %c0_i64_87 = arith.constant 0 : i64
      scf.yield %c0_i64_87 : i64
    }
    %c4278190080_i64_73 = arith.constant 4278190080 : i64
    %230 = arith.andi %229, %c4278190080_i64_73 : i64
    %231 = llvm.load %7 : !llvm.ptr -> i64
    %c24_i64_74 = arith.constant 24 : i64
    %c63_i64_75 = arith.constant 63 : i64
    %232 = arith.cmpi ule, %c24_i64_74, %c63_i64_75 : i64
    %233 = scf.if %232 -> (i64) {
      %258 = arith.shrui %231, %c24_i64_74 : i64
      scf.yield %258 : i64
    } else {
      %c0_i64_87 = arith.constant 0 : i64
      scf.yield %c0_i64_87 : i64
    }
    %c16711680_i64_76 = arith.constant 16711680 : i64
    %234 = arith.andi %233, %c16711680_i64_76 : i64
    %235 = arith.ori %230, %234 : i64
    %236 = llvm.load %7 : !llvm.ptr -> i64
    %c40_i64_77 = arith.constant 40 : i64
    %c63_i64_78 = arith.constant 63 : i64
    %237 = arith.cmpi ule, %c40_i64_77, %c63_i64_78 : i64
    %238 = scf.if %237 -> (i64) {
      %258 = arith.shrui %236, %c40_i64_77 : i64
      scf.yield %258 : i64
    } else {
      %c0_i64_87 = arith.constant 0 : i64
      scf.yield %c0_i64_87 : i64
    }
    %c65280_i64_79 = arith.constant 65280 : i64
    %239 = arith.andi %238, %c65280_i64_79 : i64
    %240 = llvm.load %7 : !llvm.ptr -> i64
    %c56_i64_80 = arith.constant 56 : i64
    %c63_i64_81 = arith.constant 63 : i64
    %241 = arith.cmpi ule, %c56_i64_80, %c63_i64_81 : i64
    %242 = scf.if %241 -> (i64) {
      %258 = arith.shrui %240, %c56_i64_80 : i64
      scf.yield %258 : i64
    } else {
      %c0_i64_87 = arith.constant 0 : i64
      scf.yield %c0_i64_87 : i64
    }
    %243 = arith.ori %239, %242 : i64
    %244 = arith.ori %235, %243 : i64
    %245 = arith.ori %226, %244 : i64
    %c0_i64_82 = arith.constant 0 : i64
    %246 = arith.extui %201 : i32 to i64
    %247 = arith.addi %246, %c0_i64_82 : i64
    %248 = llvm.getelementptr %12[%247] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %245, %248 {alignment = 1 : i64} : i64, !llvm.ptr
    %249 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_83 = arith.constant 8 : i32
    %250 = arith.addi %249, %c8_i32_83 : i32
    llvm.store %250, %4 : i32, !llvm.ptr
    %251 = llvm.load %3 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %252 = arith.addi %251, %c-8_i32 : i32
    llvm.store %252, %3 : i32, !llvm.ptr
    %c-8_i32_84 = arith.constant -8 : i32
    %253 = arith.cmpi eq, %252, %c-8_i32_84 : i32
    %254 = arith.extui %253 : i1 to i32
    %c0_i32_85 = arith.constant 0 : i32
    %255 = arith.cmpi eq, %254, %c0_i32_85 : i32
    %256 = arith.extui %255 : i1 to i32
    %c0_i32_86 = arith.constant 0 : i32
    %257 = arith.cmpi ne, %256, %c0_i32_86 : i32
    cf.cond_br %257, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f16(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %8 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %14 = arith.subi %13, %c80_i32 : i32
    llvm.store %14, %2 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c20_i64 : i64
    %18 = llvm.getelementptr %12[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %19, %3 : i32, !llvm.ptr
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c12_i64 : i64
    %23 = llvm.getelementptr %12[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %25 = arith.cmpi eq, %19, %24 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %27 = arith.cmpi eq, %26, %c0_i32_7 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_8 : i32
    cf.cond_br %29, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c16_i64 : i64
    %33 = llvm.getelementptr %12[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %36 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %37 = scf.if %36 -> (i32) {
      %272 = arith.shli %35, %c2_i32 : i32
      scf.yield %272 : i32
    } else {
      %c0_i32_77 = arith.constant 0 : i32
      scf.yield %c0_i32_77 : i32
    }
    llvm.store %37, %4 : i32, !llvm.ptr
    %38 = arith.addi %34, %37 : i32
    %c32_i32 = arith.constant 32 : i32
    %c0_i64 = arith.constant 0 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c0_i64 : i64
    %41 = llvm.getelementptr %12[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %41 {alignment = 1 : i64} : i32, !llvm.ptr
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    %44 = arith.addi %43, %c1_i32_9 : i32
    %c20_i64_10 = arith.constant 20 : i64
    %45 = arith.extui %42 : i32 to i64
    %46 = arith.addi %45, %c20_i64_10 : i64
    %47 = llvm.getelementptr %12[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i32, !llvm.ptr
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_11 = arith.constant 16 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c16_i64_11 : i64
    %51 = llvm.getelementptr %12[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    %53 = llvm.load %4 : !llvm.ptr -> i32
    %54 = arith.addi %52, %53 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c0_i64_12 : i64
    %57 = llvm.getelementptr %12[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %58, %3 : i32, !llvm.ptr
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %60 = arith.addi %59, %c40_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %61 = arith.addi %60, %c24_i32 : i32
    llvm.store %61, %4 : i32, !llvm.ptr
    %c0_i64_13 = arith.constant 0 : i64
    %c0_i64_14 = arith.constant 0 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c0_i64_14 : i64
    %64 = llvm.getelementptr %12[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_13, %64 {alignment = 1 : i64} : i64, !llvm.ptr
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_15 = arith.constant 40 : i32
    %66 = arith.addi %65, %c40_i32_15 : i32
    %c16_i32 = arith.constant 16 : i32
    %67 = arith.addi %66, %c16_i32 : i32
    llvm.store %67, %5 : i32, !llvm.ptr
    %c0_i64_16 = arith.constant 0 : i64
    %c0_i64_17 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_17 : i64
    %70 = llvm.getelementptr %12[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_16, %70 {alignment = 1 : i64} : i64, !llvm.ptr
    %71 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_18 = arith.constant 40 : i32
    %72 = arith.addi %71, %c40_i32_18 : i32
    %c8_i32 = arith.constant 8 : i32
    %73 = arith.addi %72, %c8_i32 : i32
    llvm.store %73, %6 : i32, !llvm.ptr
    %c0_i64_19 = arith.constant 0 : i64
    %c0_i64_20 = arith.constant 0 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c0_i64_20 : i64
    %76 = llvm.getelementptr %12[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_19, %76 {alignment = 1 : i64} : i64, !llvm.ptr
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %c40_i64 = arith.constant 40 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c40_i64 : i64
    %80 = llvm.getelementptr %12[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_21, %80 {alignment = 1 : i64} : i64, !llvm.ptr
    %81 = llvm.load %2 : !llvm.ptr -> i32
    %82 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_22 = arith.constant 24 : i32
    %c31_i32_23 = arith.constant 31 : i32
    %83 = arith.cmpi ule, %c24_i32_22, %c31_i32_23 : i32
    %84 = scf.if %83 -> (i32) {
      %272 = arith.shli %82, %c24_i32_22 : i32
      scf.yield %272 : i32
    } else {
      %c0_i32_77 = arith.constant 0 : i32
      scf.yield %c0_i32_77 : i32
    }
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %c65280_i32 = arith.constant 65280 : i32
    %86 = arith.andi %85, %c65280_i32 : i32
    %c8_i32_24 = arith.constant 8 : i32
    %c31_i32_25 = arith.constant 31 : i32
    %87 = arith.cmpi ule, %c8_i32_24, %c31_i32_25 : i32
    %88 = scf.if %87 -> (i32) {
      %272 = arith.shli %86, %c8_i32_24 : i32
      scf.yield %272 : i32
    } else {
      %c0_i32_77 = arith.constant 0 : i32
      scf.yield %c0_i32_77 : i32
    }
    %89 = arith.ori %84, %88 : i32
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_26 = arith.constant 8 : i32
    %c31_i32_27 = arith.constant 31 : i32
    %91 = arith.cmpi ule, %c8_i32_26, %c31_i32_27 : i32
    %92 = scf.if %91 -> (i32) {
      %272 = arith.shrui %90, %c8_i32_26 : i32
      scf.yield %272 : i32
    } else {
      %c0_i32_77 = arith.constant 0 : i32
      scf.yield %c0_i32_77 : i32
    }
    %c65280_i32_28 = arith.constant 65280 : i32
    %93 = arith.andi %92, %c65280_i32_28 : i32
    %94 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_29 = arith.constant 24 : i32
    %c31_i32_30 = arith.constant 31 : i32
    %95 = arith.cmpi ule, %c24_i32_29, %c31_i32_30 : i32
    %96 = scf.if %95 -> (i32) {
      %272 = arith.shrui %94, %c24_i32_29 : i32
      scf.yield %272 : i32
    } else {
      %c0_i32_77 = arith.constant 0 : i32
      scf.yield %c0_i32_77 : i32
    }
    %97 = arith.ori %93, %96 : i32
    %98 = arith.ori %89, %97 : i32
    %c76_i64 = arith.constant 76 : i64
    %99 = arith.extui %81 : i32 to i64
    %100 = arith.addi %99, %c76_i64 : i64
    %101 = llvm.getelementptr %12[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %98, %101 {alignment = 1 : i64} : i32, !llvm.ptr
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %c68_i32 = arith.constant 68 : i32
    %103 = arith.addi %102, %c68_i32 : i32
    %c4_i32 = arith.constant 4 : i32
    %104 = llvm.load %2 : !llvm.ptr -> i32
    %c76_i32 = arith.constant 76 : i32
    %105 = arith.addi %104, %c76_i32 : i32
    %c4_i32_31 = arith.constant 4 : i32
    %c1048840_i32 = arith.constant 1048840 : i32
    call @f105(%arg0, %103, %c4_i32, %105, %c4_i32_31, %c1048840_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_32 = arith.constant 8 : i32
    %107 = arith.addi %106, %c8_i32_32 : i32
    %c8_i32_33 = arith.constant 8 : i32
    %108 = arith.addi %107, %c8_i32_33 : i32
    llvm.store %108, %7 : i32, !llvm.ptr
    %109 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c0_i64_34 : i64
    %112 = llvm.getelementptr %12[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = llvm.load volatile %112 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_35 = arith.constant 0 : i64
    %114 = arith.extui %108 : i32 to i64
    %115 = arith.addi %114, %c0_i64_35 : i64
    %116 = llvm.getelementptr %12[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %113, %116 {alignment = 1 : i64} : i64, !llvm.ptr
    %117 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_36 = arith.constant 8 : i32
    %118 = arith.addi %117, %c8_i32_36 : i32
    %c16_i32_37 = arith.constant 16 : i32
    %119 = arith.addi %118, %c16_i32_37 : i32
    llvm.store %119, %6 : i32, !llvm.ptr
    %120 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_38 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64_38 : i64
    %123 = llvm.getelementptr %12[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %125 = arith.extui %119 : i32 to i64
    %126 = arith.addi %125, %c0_i64_39 : i64
    %127 = llvm.getelementptr %12[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %124, %127 {alignment = 1 : i64} : i64, !llvm.ptr
    %128 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_40 = arith.constant 8 : i32
    %129 = arith.addi %128, %c8_i32_40 : i32
    %c24_i32_41 = arith.constant 24 : i32
    %130 = arith.addi %129, %c24_i32_41 : i32
    llvm.store %130, %5 : i32, !llvm.ptr
    %131 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_42 : i64
    %134 = llvm.getelementptr %12[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_43 = arith.constant 0 : i64
    %136 = arith.extui %130 : i32 to i64
    %137 = arith.addi %136, %c0_i64_43 : i64
    %138 = llvm.getelementptr %12[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %135, %138 {alignment = 1 : i64} : i64, !llvm.ptr
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %140 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_44 = arith.constant 40 : i64
    %141 = arith.extui %140 : i32 to i64
    %142 = arith.addi %141, %c40_i64_44 : i64
    %143 = llvm.getelementptr %12[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %144 = llvm.load volatile %143 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64 = arith.constant 8 : i64
    %145 = arith.extui %139 : i32 to i64
    %146 = arith.addi %145, %c8_i64 : i64
    %147 = llvm.getelementptr %12[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %144, %147 {alignment = 1 : i64} : i64, !llvm.ptr
    %148 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_45 = arith.constant 8 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c8_i64_45 : i64
    %151 = llvm.getelementptr %12[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %152, %4 : i32, !llvm.ptr
    %153 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_46 = arith.constant 0 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c0_i64_46 : i64
    %156 = llvm.getelementptr %12[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load volatile %156 {alignment = 1 : i64} : !llvm.ptr -> i32
    %158 = arith.cmpi eq, %152, %157 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %160 = arith.cmpi eq, %159, %c0_i32_47 : i32
    %161 = arith.extui %160 : i1 to i32
    %c0_i32_48 = arith.constant 0 : i32
    %162 = arith.cmpi ne, %161, %c0_i32_48 : i32
    cf.cond_br %162, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %163 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %164 = arith.addi %163, %c12_i32 : i32
    call @f73(%arg0, %164) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %165 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c4_i64 : i64
    %168 = llvm.getelementptr %12[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %169 = llvm.load volatile %168 {alignment = 1 : i64} : !llvm.ptr -> i32
    %170 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_49 = arith.constant 31 : i32
    %171 = arith.cmpi ule, %c5_i32, %c31_i32_49 : i32
    %172 = scf.if %171 -> (i32) {
      %272 = arith.shli %170, %c5_i32 : i32
      scf.yield %272 : i32
    } else {
      %c0_i32_77 = arith.constant 0 : i32
      scf.yield %c0_i32_77 : i32
    }
    %173 = arith.addi %169, %172 : i32
    llvm.store %173, %3 : i32, !llvm.ptr
    %174 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_50 = arith.constant 8 : i64
    %175 = arith.extui %174 : i32 to i64
    %176 = arith.addi %175, %c8_i64_50 : i64
    %177 = llvm.getelementptr %12[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %178 = llvm.load volatile %177 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_51 = arith.constant 0 : i64
    %179 = arith.extui %173 : i32 to i64
    %180 = arith.addi %179, %c0_i64_51 : i64
    %181 = llvm.getelementptr %12[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %178, %181 {alignment = 1 : i64} : i64, !llvm.ptr
    %182 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_52 = arith.constant 24 : i32
    %183 = arith.addi %182, %c24_i32_52 : i32
    %184 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_53 = arith.constant 0 : i64
    %185 = arith.extui %184 : i32 to i64
    %186 = arith.addi %185, %c0_i64_53 : i64
    %187 = llvm.getelementptr %12[%186] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %188 = llvm.load volatile %187 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_54 = arith.constant 0 : i64
    %189 = arith.extui %183 : i32 to i64
    %190 = arith.addi %189, %c0_i64_54 : i64
    %191 = llvm.getelementptr %12[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %188, %191 {alignment = 1 : i64} : i64, !llvm.ptr
    %192 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_55 = arith.constant 16 : i32
    %193 = arith.addi %192, %c16_i32_55 : i32
    %194 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_56 = arith.constant 0 : i64
    %195 = arith.extui %194 : i32 to i64
    %196 = arith.addi %195, %c0_i64_56 : i64
    %197 = llvm.getelementptr %12[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = llvm.load volatile %197 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_57 = arith.constant 0 : i64
    %199 = arith.extui %193 : i32 to i64
    %200 = arith.addi %199, %c0_i64_57 : i64
    %201 = llvm.getelementptr %12[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %198, %201 {alignment = 1 : i64} : i64, !llvm.ptr
    %202 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_58 = arith.constant 8 : i32
    %203 = arith.addi %202, %c8_i32_58 : i32
    %204 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_59 = arith.constant 0 : i64
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.addi %205, %c0_i64_59 : i64
    %207 = llvm.getelementptr %12[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %208 = llvm.load volatile %207 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_60 = arith.constant 0 : i64
    %209 = arith.extui %203 : i32 to i64
    %210 = arith.addi %209, %c0_i64_60 : i64
    %211 = llvm.getelementptr %12[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %208, %211 {alignment = 1 : i64} : i64, !llvm.ptr
    %212 = llvm.load %1 : !llvm.ptr -> i32
    %213 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_61 = arith.constant 1 : i32
    %214 = arith.addi %213, %c1_i32_61 : i32
    %c8_i64_62 = arith.constant 8 : i64
    %215 = arith.extui %212 : i32 to i64
    %216 = arith.addi %215, %c8_i64_62 : i64
    %217 = llvm.getelementptr %12[%216] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %214, %217 {alignment = 1 : i64} : i32, !llvm.ptr
    %218 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_63 = arith.constant 20 : i64
    %219 = arith.extui %218 : i32 to i64
    %220 = arith.addi %219, %c20_i64_63 : i64
    %221 = llvm.getelementptr %12[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %222 = llvm.load volatile %221 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %222, %3 : i32, !llvm.ptr
    %c0_i32_64 = arith.constant 0 : i32
    %223 = arith.cmpi eq, %222, %c0_i32_64 : i32
    %224 = arith.extui %223 : i1 to i32
    %c0_i32_65 = arith.constant 0 : i32
    %225 = arith.cmpi ne, %224, %c0_i32_65 : i32
    cf.cond_br %225, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %226 = llvm.load %1 : !llvm.ptr -> i32
    call @f74(%arg0, %226) : (!llvm.ptr, i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %227 = llvm.load %0 : !llvm.ptr -> i32
    %228 = llvm.load %1 : !llvm.ptr -> i32
    call @f8(%arg0, %227, %228) : (!llvm.ptr, i32, i32) -> ()
    %229 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_66 = arith.constant 20 : i64
    %230 = arith.extui %229 : i32 to i64
    %231 = arith.addi %230, %c20_i64_66 : i64
    %232 = llvm.getelementptr %12[%231] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %233 = llvm.load volatile %232 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %233, %3 : i32, !llvm.ptr
    %c0_i32_67 = arith.constant 0 : i32
    %234 = arith.cmpi eq, %233, %c0_i32_67 : i32
    %235 = arith.extui %234 : i1 to i32
    %c0_i32_68 = arith.constant 0 : i32
    %236 = arith.cmpi ne, %235, %c0_i32_68 : i32
    cf.cond_br %236, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %237 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_69 = arith.constant 2 : i32
    %c31_i32_70 = arith.constant 31 : i32
    %238 = arith.cmpi ule, %c2_i32_69, %c31_i32_70 : i32
    %239 = scf.if %238 -> (i32) {
      %272 = arith.shli %237, %c2_i32_69 : i32
      scf.yield %272 : i32
    } else {
      %c0_i32_77 = arith.constant 0 : i32
      scf.yield %c0_i32_77 : i32
    }
    %240 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_71 = arith.constant 16 : i64
    %241 = arith.extui %240 : i32 to i64
    %242 = arith.addi %241, %c16_i64_71 : i64
    %243 = llvm.getelementptr %12[%242] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %244 = llvm.load volatile %243 {alignment = 1 : i64} : !llvm.ptr -> i32
    %245 = arith.addi %239, %244 : i32
    %c-4_i32 = arith.constant -4 : i32
    %246 = arith.addi %245, %c-4_i32 : i32
    llvm.store %246, %3 : i32, !llvm.ptr
    %247 = llvm.load %0 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %248 = arith.extui %247 : i32 to i64
    %249 = arith.addi %248, %c36_i64 : i64
    %250 = llvm.getelementptr %12[%249] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %251 = llvm.load volatile %250 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c31_i32_72 = arith.constant 31 : i32
    %252 = arith.addi %251, %c31_i32_72 : i32
    %c-32_i32 = arith.constant -32 : i32
    %253 = arith.andi %252, %c-32_i32 : i32
    %254 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_73 = arith.constant 0 : i64
    %255 = arith.extui %254 : i32 to i64
    %256 = arith.addi %255, %c0_i64_73 : i64
    %257 = llvm.getelementptr %12[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %258 = llvm.load volatile %257 {alignment = 1 : i64} : !llvm.ptr -> i32
    %259 = arith.addi %253, %258 : i32
    %c96_i32 = arith.constant 96 : i32
    %260 = arith.addi %259, %c96_i32 : i32
    %c0_i64_74 = arith.constant 0 : i64
    %261 = arith.extui %246 : i32 to i64
    %262 = arith.addi %261, %c0_i64_74 : i64
    %263 = llvm.getelementptr %12[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %260, %263 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %264 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_75 = arith.constant 80 : i32
    %265 = arith.addi %264, %c80_i32_75 : i32
    llvm.store %265, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %266 = llvm.load %1 : !llvm.ptr -> i32
    %267 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %268 = arith.addi %267, %c-1_i32 : i32
    %c20_i64_76 = arith.constant 20 : i64
    %269 = arith.extui %266 : i32 to i64
    %270 = arith.addi %269, %c20_i64_76 : i64
    %271 = llvm.getelementptr %12[%270] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %268, %271 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb9
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c20_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %11, %2 : i32, !llvm.ptr
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c12_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %17 = arith.cmpi eq, %11, %16 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_3 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_4 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c16_i64 : i64
    %25 = llvm.getelementptr %6[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %28 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %29 = scf.if %28 -> (i32) {
      %196 = arith.shli %27, %c2_i32 : i32
      scf.yield %196 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %30 = arith.addi %26, %29 : i32
    %c64_i32 = arith.constant 64 : i32
    %c0_i64 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64 : i64
    %33 = llvm.getelementptr %6[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c64_i32, %33 {alignment = 1 : i64} : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_5 = arith.constant 1 : i32
    %36 = arith.addi %35, %c1_i32_5 : i32
    %c20_i64_6 = arith.constant 20 : i64
    %37 = arith.extui %34 : i32 to i64
    %38 = arith.addi %37, %c20_i64_6 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c8_i64 : i64
    %43 = llvm.getelementptr %6[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %44, %2 : i32, !llvm.ptr
    %45 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_7 = arith.constant 0 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c0_i64_7 : i64
    %48 = llvm.getelementptr %6[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i32
    %50 = arith.cmpi eq, %44, %49 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %52 = arith.cmpi eq, %51, %c0_i32_8 : i32
    %53 = arith.extui %52 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %54 = arith.cmpi ne, %53, %c0_i32_9 : i32
    cf.cond_br %54, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %56 = arith.addi %55, %c12_i32 : i32
    call @f73(%arg0, %56) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c4_i64 : i64
    %60 = llvm.getelementptr %6[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    %62 = llvm.load %2 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_10 = arith.constant 31 : i32
    %63 = arith.cmpi ule, %c5_i32, %c31_i32_10 : i32
    %64 = scf.if %63 -> (i32) {
      %196 = arith.shli %62, %c5_i32 : i32
      scf.yield %196 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %65 = arith.addi %61, %64 : i32
    llvm.store %65, %3 : i32, !llvm.ptr
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_11 : i64
    %69 = llvm.getelementptr %6[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    %71 = arith.extui %65 : i32 to i64
    %72 = arith.addi %71, %c0_i64_12 : i64
    %73 = llvm.getelementptr %6[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %70, %73 {alignment = 1 : i64} : i64, !llvm.ptr
    %74 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %75 = arith.addi %74, %c24_i32 : i32
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_13 = arith.constant 24 : i32
    %77 = arith.addi %76, %c24_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_14 : i64
    %80 = llvm.getelementptr %6[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %82 = arith.extui %75 : i32 to i64
    %83 = arith.addi %82, %c0_i64_15 : i64
    %84 = llvm.getelementptr %6[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %81, %84 {alignment = 1 : i64} : i64, !llvm.ptr
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %86 = arith.addi %85, %c16_i32 : i32
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_16 = arith.constant 16 : i32
    %88 = arith.addi %87, %c16_i32_16 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_17 : i64
    %91 = llvm.getelementptr %6[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_18 = arith.constant 0 : i64
    %93 = arith.extui %86 : i32 to i64
    %94 = arith.addi %93, %c0_i64_18 : i64
    %95 = llvm.getelementptr %6[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %96 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %97 = arith.addi %96, %c8_i32 : i32
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_19 = arith.constant 8 : i32
    %99 = arith.addi %98, %c8_i32_19 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c0_i64_20 : i64
    %102 = llvm.getelementptr %6[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %104 = arith.extui %97 : i32 to i64
    %105 = arith.addi %104, %c0_i64_21 : i64
    %106 = llvm.getelementptr %6[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %103, %106 {alignment = 1 : i64} : i64, !llvm.ptr
    %107 = llvm.load %1 : !llvm.ptr -> i32
    %108 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %109 = arith.addi %108, %c1_i32_22 : i32
    llvm.store %109, %3 : i32, !llvm.ptr
    %c8_i64_23 = arith.constant 8 : i64
    %110 = arith.extui %107 : i32 to i64
    %111 = arith.addi %110, %c8_i64_23 : i64
    %112 = llvm.getelementptr %6[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %112 {alignment = 1 : i64} : i32, !llvm.ptr
    %113 = llvm.load %3 : !llvm.ptr -> i32
    %114 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %115 = arith.extui %114 : i32 to i64
    %116 = arith.addi %115, %c0_i64_24 : i64
    %117 = llvm.getelementptr %6[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %118 = llvm.load volatile %117 {alignment = 1 : i64} : !llvm.ptr -> i32
    %119 = arith.cmpi eq, %113, %118 : i32
    %120 = arith.extui %119 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %121 = arith.cmpi eq, %120, %c0_i32_25 : i32
    %122 = arith.extui %121 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %123 = arith.cmpi ne, %122, %c0_i32_26 : i32
    cf.cond_br %123, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %124 = llvm.load %1 : !llvm.ptr -> i32
    call @f74(%arg0, %124) : (!llvm.ptr, i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %125 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_27 = arith.constant 4 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c4_i64_27 : i64
    %128 = llvm.getelementptr %6[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %129 = llvm.load volatile %128 {alignment = 1 : i64} : !llvm.ptr -> i32
    %130 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32_28 = arith.constant 5 : i32
    %c31_i32_29 = arith.constant 31 : i32
    %131 = arith.cmpi ule, %c5_i32_28, %c31_i32_29 : i32
    %132 = scf.if %131 -> (i32) {
      %196 = arith.shli %130, %c5_i32_28 : i32
      scf.yield %196 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %133 = arith.addi %129, %132 : i32
    llvm.store %133, %3 : i32, !llvm.ptr
    %134 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c32_i64 : i64
    %137 = llvm.getelementptr %6[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load volatile %137 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %139 = arith.extui %133 : i32 to i64
    %140 = arith.addi %139, %c0_i64_30 : i64
    %141 = llvm.getelementptr %6[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %141 {alignment = 1 : i64} : i64, !llvm.ptr
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_31 = arith.constant 24 : i32
    %143 = arith.addi %142, %c24_i32_31 : i32
    %144 = llvm.load %0 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %145 = arith.addi %144, %c56_i32 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %146 = arith.extui %145 : i32 to i64
    %147 = arith.addi %146, %c0_i64_32 : i64
    %148 = llvm.getelementptr %6[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %149 = llvm.load volatile %148 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    %150 = arith.extui %143 : i32 to i64
    %151 = arith.addi %150, %c0_i64_33 : i64
    %152 = llvm.getelementptr %6[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %149, %152 {alignment = 1 : i64} : i64, !llvm.ptr
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_34 = arith.constant 16 : i32
    %154 = arith.addi %153, %c16_i32_34 : i32
    %155 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %156 = arith.addi %155, %c48_i32 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c0_i64_35 : i64
    %159 = llvm.getelementptr %6[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_36 = arith.constant 0 : i64
    %161 = arith.extui %154 : i32 to i64
    %162 = arith.addi %161, %c0_i64_36 : i64
    %163 = llvm.getelementptr %6[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %160, %163 {alignment = 1 : i64} : i64, !llvm.ptr
    %164 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_37 = arith.constant 8 : i32
    %165 = arith.addi %164, %c8_i32_37 : i32
    %166 = llvm.load %0 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %167 = arith.addi %166, %c40_i32 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c0_i64_38 : i64
    %170 = llvm.getelementptr %6[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %172 = arith.extui %165 : i32 to i64
    %173 = arith.addi %172, %c0_i64_39 : i64
    %174 = llvm.getelementptr %6[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %171, %174 {alignment = 1 : i64} : i64, !llvm.ptr
    %175 = llvm.load %1 : !llvm.ptr -> i32
    %176 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_40 = arith.constant 2 : i32
    %177 = arith.addi %176, %c2_i32_40 : i32
    %c8_i64_41 = arith.constant 8 : i64
    %178 = arith.extui %175 : i32 to i64
    %179 = arith.addi %178, %c8_i64_41 : i64
    %180 = llvm.getelementptr %6[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %177, %180 {alignment = 1 : i64} : i32, !llvm.ptr
    %181 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_42 = arith.constant 20 : i64
    %182 = arith.extui %181 : i32 to i64
    %183 = arith.addi %182, %c20_i64_42 : i64
    %184 = llvm.getelementptr %6[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %185 = llvm.load volatile %184 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %185, %0 : i32, !llvm.ptr
    %c0_i32_43 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %185, %c0_i32_43 : i32
    %187 = arith.extui %186 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %188 = arith.cmpi ne, %187, %c0_i32_44 : i32
    cf.cond_br %188, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %189 = llvm.load %1 : !llvm.ptr -> i32
    call @f74(%arg0, %189) : (!llvm.ptr, i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %190 = llvm.load %1 : !llvm.ptr -> i32
    %191 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %192 = arith.addi %191, %c-1_i32 : i32
    %c20_i64_45 = arith.constant 20 : i64
    %193 = arith.extui %190 : i32 to i64
    %194 = arith.addi %193, %c20_i64_45 : i64
    %195 = llvm.getelementptr %6[%194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %192, %195 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb9
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %14, %0 : i32, !llvm.ptr
    %c0_i64_2 = arith.constant 0 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c0_i64_2 : i64
    %17 = llvm.getelementptr %7[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_3 : i32
    cf.cond_br %19, ^bb4, ^bb5
  ^bb2(%20: i32):  // pred: ^bb3
    return %20 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %22 = arith.addi %21, %c16_i32_4 : i32
    llvm.store %22, %4 : i32, !llvm.ptr
    %23 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%23 : i32)
  ^bb4:  // pred: ^bb1
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %26 = arith.addi %25, %c8_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %27 = arith.extui %24 : i32 to i64
    %28 = arith.addi %27, %c12_i64 : i64
    %29 = llvm.getelementptr %7[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %26, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %c1049972_i32 = arith.constant 1049972 : i32
    %c10_i32 = arith.constant 10 : i32
    %c1049982_i32 = arith.constant 1049982 : i32
    %c6_i32 = arith.constant 6 : i32
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %c1049956_i32 = arith.constant 1049956 : i32
    %c1049988_i32 = arith.constant 1049988 : i32
    %c14_i32 = arith.constant 14 : i32
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %33 = arith.addi %32, %c12_i32 : i32
    %c1049828_i32 = arith.constant 1049828 : i32
    %34 = call @f172(%arg0, %30, %c1049972_i32, %c10_i32, %c1049982_i32, %c6_i32, %31, %c1049956_i32, %c1049988_i32, %c14_i32, %33, %c1049828_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %34, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %c1049939_i32 = arith.constant 1049939 : i32
    %c16_i32_5 = arith.constant 16 : i32
    %36 = call @f170(%arg0, %35, %c1049939_i32, %c16_i32_5) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %36, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f19(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %0 : i32, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c4_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c8_i64 : i64
    %17 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %20 = call @f20(%arg0, %13, %18, %19) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%20 : i32)
  ^bb2(%21: i32):  // pred: ^bb1
    return %21 : i32
  }
  func.func @f20(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %3 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %12 = arith.addi %11, %c4_i32 : i32
    %13 = llvm.load %2 : !llvm.ptr -> i32
    call @f175(%arg0, %12, %13) : (!llvm.ptr, i32, i32) -> ()
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_3 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2(%18: i32):  // pred: ^bb3
    return %18 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb5
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_5 = arith.constant 4 : i32
    %20 = arith.addi %19, %c4_i32_5 : i32
    %21 = call @f165(%arg0, %20) : (!llvm.ptr, i32) -> i32
    llvm.store %21, %0 : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_6 = arith.constant 16 : i32
    %23 = arith.addi %22, %c16_i32_6 : i32
    llvm.store %23, %5 : i32, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%24 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %27 = arith.extui %25 : i32 to i64
    %28 = arith.addi %27, %c12_i64 : i64
    %29 = llvm.getelementptr %8[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %26, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_7 = arith.constant 4 : i32
    %31 = arith.addi %30, %c4_i32_7 : i32
    %32 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %33 = arith.addi %32, %c12_i32 : i32
    %c1049376_i32 = arith.constant 1049376 : i32
    %34 = call @f164(%arg0, %31, %33, %c1049376_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_8 = arith.constant 1 : i32
    %36 = arith.addi %35, %c1_i32_8 : i32
    llvm.store %36, %0 : i32, !llvm.ptr
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %38 = arith.addi %37, %c-1_i32 : i32
    llvm.store %38, %1 : i32, !llvm.ptr
    %c0_i32_9 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_9 : i32
    cf.cond_br %39, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func @f21(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %11 = call @f63(%arg0, %9, %10, %c1_i32_1) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%11 : i32)
  ^bb2(%12: i32):  // pred: ^bb1
    return %12 : i32
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %0 : i32, !llvm.ptr
    %c0_i64_3 = arith.constant 0 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c0_i64_3 : i64
    %18 = llvm.getelementptr %8[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %19, %3 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %20 = arith.addi %19, %c-2147483647_i32 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %21 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %22 = arith.cmpi slt, %21, %c-2147483638_i32 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_5 : i32
    %25 = arith.select %24, %20, %c0_i32_4 : i32
    cf.switch %25 : i32, [
      default: ^bb14,
      0: ^bb14,
      1: ^bb13,
      2: ^bb12,
      3: ^bb11,
      4: ^bb10,
      5: ^bb9,
      6: ^bb8,
      7: ^bb7,
      8: ^bb6,
      9: ^bb5,
      10: ^bb4
    ]
  ^bb2(%26: i32):  // pred: ^bb3
    return %26 : i32
  ^bb3:  // 11 preds: ^bb4, ^bb5, ^bb6, ^bb7, ^bb8, ^bb9, ^bb10, ^bb11, ^bb12, ^bb13, ^bb14
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_6 = arith.constant 16 : i32
    %28 = arith.addi %27, %c16_i32_6 : i32
    llvm.store %28, %5 : i32, !llvm.ptr
    %29 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%29 : i32)
  ^bb4:  // pred: ^bb1
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %32 = arith.addi %31, %c4_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %33 = arith.extui %30 : i32 to i64
    %34 = arith.addi %33, %c12_i64 : i64
    %35 = llvm.getelementptr %8[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c1049820_i32 = arith.constant 1049820 : i32
    %c5_i32 = arith.constant 5 : i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %38 = arith.addi %37, %c12_i32 : i32
    %c1049804_i32 = arith.constant 1049804 : i32
    %39 = call @f174(%arg0, %36, %c1049820_i32, %c5_i32, %38, %c1049804_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    llvm.store %39, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_7 = arith.constant 4 : i32
    %42 = arith.addi %41, %c4_i32_7 : i32
    %c12_i64_8 = arith.constant 12 : i64
    %43 = arith.extui %40 : i32 to i64
    %44 = arith.addi %43, %c12_i64_8 : i64
    %45 = llvm.getelementptr %8[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %42, %45 {alignment = 1 : i64} : i32, !llvm.ptr
    %46 = llvm.load %1 : !llvm.ptr -> i32
    %c1049792_i32 = arith.constant 1049792 : i32
    %c12_i32_9 = arith.constant 12 : i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_10 = arith.constant 12 : i32
    %48 = arith.addi %47, %c12_i32_10 : i32
    %c1049776_i32 = arith.constant 1049776 : i32
    %49 = call @f174(%arg0, %46, %c1049792_i32, %c12_i32_9, %48, %c1049776_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    llvm.store %49, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb1
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_11 = arith.constant 12 : i32
    %52 = arith.addi %51, %c12_i32_11 : i32
    %c12_i64_12 = arith.constant 12 : i64
    %53 = arith.extui %50 : i32 to i64
    %54 = arith.addi %53, %c12_i64_12 : i64
    %55 = llvm.getelementptr %8[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i32, !llvm.ptr
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c1049752_i32 = arith.constant 1049752 : i32
    %c15_i32 = arith.constant 15 : i32
    %c1049692_i32 = arith.constant 1049692 : i32
    %c4_i32_13 = arith.constant 4 : i32
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_14 = arith.constant 4 : i32
    %58 = arith.addi %57, %c4_i32_14 : i32
    %c1049644_i32 = arith.constant 1049644 : i32
    %c1049767_i32 = arith.constant 1049767 : i32
    %c8_i32 = arith.constant 8 : i32
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_15 = arith.constant 12 : i32
    %60 = arith.addi %59, %c12_i32_15 : i32
    %c1049736_i32 = arith.constant 1049736 : i32
    %61 = call @f172(%arg0, %56, %c1049752_i32, %c15_i32, %c1049692_i32, %c4_i32_13, %58, %c1049644_i32, %c1049767_i32, %c8_i32, %60, %c1049736_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %61, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb7:  // pred: ^bb1
    %62 = llvm.load %2 : !llvm.ptr -> i32
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_16 = arith.constant 12 : i32
    %64 = arith.addi %63, %c12_i32_16 : i32
    %c12_i64_17 = arith.constant 12 : i64
    %65 = arith.extui %62 : i32 to i64
    %66 = arith.addi %65, %c12_i64_17 : i64
    %67 = llvm.getelementptr %8[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c1049720_i32 = arith.constant 1049720 : i32
    %c10_i32 = arith.constant 10 : i32
    %c1049692_i32_18 = arith.constant 1049692 : i32
    %c4_i32_19 = arith.constant 4 : i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_20 = arith.constant 4 : i32
    %70 = arith.addi %69, %c4_i32_20 : i32
    %c1049644_i32_21 = arith.constant 1049644 : i32
    %c1049730_i32 = arith.constant 1049730 : i32
    %c3_i32 = arith.constant 3 : i32
    %71 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_22 = arith.constant 12 : i32
    %72 = arith.addi %71, %c12_i32_22 : i32
    %c1049704_i32 = arith.constant 1049704 : i32
    %73 = call @f172(%arg0, %68, %c1049720_i32, %c10_i32, %c1049692_i32_18, %c4_i32_19, %70, %c1049644_i32_21, %c1049730_i32, %c3_i32, %72, %c1049704_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %73, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // pred: ^bb1
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %75 = llvm.load %0 : !llvm.ptr -> i32
    %c13_i32 = arith.constant 13 : i32
    %76 = arith.addi %75, %c13_i32 : i32
    %c12_i64_23 = arith.constant 12 : i64
    %77 = arith.extui %74 : i32 to i64
    %78 = arith.addi %77, %c12_i64_23 : i64
    %79 = llvm.getelementptr %8[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %76, %79 {alignment = 1 : i64} : i32, !llvm.ptr
    %80 = llvm.load %1 : !llvm.ptr -> i32
    %c1049676_i32 = arith.constant 1049676 : i32
    %c16_i32_24 = arith.constant 16 : i32
    %c1049692_i32_25 = arith.constant 1049692 : i32
    %c4_i32_26 = arith.constant 4 : i32
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_27 = arith.constant 4 : i32
    %82 = arith.addi %81, %c4_i32_27 : i32
    %c1049644_i32_28 = arith.constant 1049644 : i32
    %c1049696_i32 = arith.constant 1049696 : i32
    %c5_i32_29 = arith.constant 5 : i32
    %83 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_30 = arith.constant 12 : i32
    %84 = arith.addi %83, %c12_i32_30 : i32
    %c1049660_i32 = arith.constant 1049660 : i32
    %c1049701_i32 = arith.constant 1049701 : i32
    %c3_i32_31 = arith.constant 3 : i32
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_32 = arith.constant 12 : i32
    %86 = arith.addi %85, %c12_i32_32 : i32
    %c1049376_i32 = arith.constant 1049376 : i32
    %87 = call @f173(%arg0, %80, %c1049676_i32, %c16_i32_24, %c1049692_i32_25, %c4_i32_26, %82, %c1049644_i32_28, %c1049696_i32, %c5_i32_29, %84, %c1049660_i32, %c1049701_i32, %c3_i32_31, %86, %c1049376_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %87, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb9:  // pred: ^bb1
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %89 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_33 = arith.constant 4 : i32
    %90 = arith.addi %89, %c4_i32_33 : i32
    %c12_i64_34 = arith.constant 12 : i64
    %91 = arith.extui %88 : i32 to i64
    %92 = arith.addi %91, %c12_i64_34 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %93 {alignment = 1 : i64} : i32, !llvm.ptr
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c1049622_i32 = arith.constant 1049622 : i32
    %c22_i32 = arith.constant 22 : i32
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_35 = arith.constant 12 : i32
    %96 = arith.addi %95, %c12_i32_35 : i32
    %c1049376_i32_36 = arith.constant 1049376 : i32
    %97 = call @f174(%arg0, %94, %c1049622_i32, %c22_i32, %96, %c1049376_i32_36) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    llvm.store %97, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // pred: ^bb1
    %98 = llvm.load %1 : !llvm.ptr -> i32
    %c1049609_i32 = arith.constant 1049609 : i32
    %c13_i32_37 = arith.constant 13 : i32
    %99 = call @f170(%arg0, %98, %c1049609_i32, %c13_i32_37) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %99, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb11:  // pred: ^bb1
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c1049595_i32 = arith.constant 1049595 : i32
    %c14_i32 = arith.constant 14 : i32
    %101 = call @f170(%arg0, %100, %c1049595_i32, %c14_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %101, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb1
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %103 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_38 = arith.constant 4 : i32
    %104 = arith.addi %103, %c4_i32_38 : i32
    %c12_i64_39 = arith.constant 12 : i64
    %105 = arith.extui %102 : i32 to i64
    %106 = arith.addi %105, %c12_i64_39 : i64
    %107 = llvm.getelementptr %8[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %104, %107 {alignment = 1 : i64} : i32, !llvm.ptr
    %108 = llvm.load %1 : !llvm.ptr -> i32
    %c1049588_i32 = arith.constant 1049588 : i32
    %c7_i32 = arith.constant 7 : i32
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_40 = arith.constant 12 : i32
    %110 = arith.addi %109, %c12_i32_40 : i32
    %c1049572_i32 = arith.constant 1049572 : i32
    %111 = call @f174(%arg0, %108, %c1049588_i32, %c7_i32, %110, %c1049572_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    llvm.store %111, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb1
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c1049562_i32 = arith.constant 1049562 : i32
    %c7_i32_41 = arith.constant 7 : i32
    %113 = call @f170(%arg0, %112, %c1049562_i32, %c7_i32_41) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %113, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // 2 preds: ^bb1, ^bb1
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %115 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_42 = arith.constant 12 : i64
    %116 = arith.extui %114 : i32 to i64
    %117 = arith.addi %116, %c12_i64_42 : i64
    %118 = llvm.getelementptr %8[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %115, %118 {alignment = 1 : i64} : i32, !llvm.ptr
    %119 = llvm.load %1 : !llvm.ptr -> i32
    %c1049532_i32 = arith.constant 1049532 : i32
    %c13_i32_43 = arith.constant 13 : i32
    %c1049545_i32 = arith.constant 1049545 : i32
    %c13_i32_44 = arith.constant 13 : i32
    %120 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_45 = arith.constant 12 : i32
    %121 = arith.addi %120, %c12_i32_45 : i32
    %c1049500_i32 = arith.constant 1049500 : i32
    %c1049558_i32 = arith.constant 1049558 : i32
    %c4_i32_46 = arith.constant 4 : i32
    %122 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_47 = arith.constant 12 : i32
    %123 = arith.addi %122, %c12_i32_47 : i32
    %c1049516_i32 = arith.constant 1049516 : i32
    %124 = call @f172(%arg0, %119, %c1049532_i32, %c13_i32_43, %c1049545_i32, %c13_i32_44, %121, %c1049500_i32, %c1049558_i32, %c4_i32_46, %123, %c1049516_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %124, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f23(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %11 = call @f143(%arg0, %9, %10) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%11 : i32)
  ^bb2(%12: i32):  // pred: ^bb1
    return %12 : i32
  }
  func.func @f24(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %7[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %16 = arith.extui %10 : i32 to i64
    %17 = arith.addi %16, %c12_i64 : i64
    %18 = llvm.getelementptr %7[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %15, %18 {alignment = 1 : i64} : i32, !llvm.ptr
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c1049920_i32 = arith.constant 1049920 : i32
    %c15_i32 = arith.constant 15 : i32
    %c1049935_i32 = arith.constant 1049935 : i32
    %c4_i32 = arith.constant 4 : i32
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %21 = arith.addi %20, %c12_i32 : i32
    %c1049904_i32 = arith.constant 1049904 : i32
    %22 = call @f171(%arg0, %19, %c1049920_i32, %c15_i32, %c1049935_i32, %c4_i32, %21, %c1049904_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %22, %0 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_2 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32_2 : i32
    llvm.store %24, %4 : i32, !llvm.ptr
    %25 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%25 : i32)
  ^bb2(%26: i32):  // pred: ^bb1
    return %26 : i32
  }
  func.func @f25(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c28_i64 : i64
    %9 = llvm.getelementptr %5[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %10, %2 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %11 = arith.andi %10, %c16_i32 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2(%13: i32):  // 3 preds: ^bb3, ^bb5, ^bb6
    return %13 : i32
  ^bb3:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %16 = call @f183(%arg0, %14, %15) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb4:  // pred: ^bb1
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %18 = arith.andi %17, %c32_i32 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_3 : i32
    cf.cond_br %19, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %22 = call @f180(%arg0, %20, %21) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%22 : i32)
  ^bb6:  // pred: ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %25 = call @f153(%arg0, %23, %24) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%25 : i32)
  }
  func.func @f26(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c28_i64 : i64
    %9 = llvm.getelementptr %5[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %10, %2 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %11 = arith.andi %10, %c16_i32 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2(%13: i32):  // 3 preds: ^bb3, ^bb5, ^bb6
    return %13 : i32
  ^bb3:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %16 = call @f159(%arg0, %14, %15) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb4:  // pred: ^bb1
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %18 = arith.andi %17, %c32_i32 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_3 : i32
    cf.cond_br %19, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %22 = call @f151(%arg0, %20, %21) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%22 : i32)
  ^bb6:  // pred: ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %25 = call @f142(%arg0, %23, %24) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%25 : i32)
  }
  func.func @f27(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %9 = arith.cmpi eq, %8, %c-2147483648_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %0 : !llvm.ptr -> i32
    call @f103(%arg0, %12) : (!llvm.ptr, i32) -> ()
    %13 = llvm.load %0 : !llvm.ptr -> i32
    call @f104(%arg0, %13) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  }
  func.func @f28(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %9 = arith.cmpi eq, %8, %c-2147483638_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_0 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // 2 preds: ^bb3, ^bb4
    return
  ^bb3:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    call @f4(%arg0, %14) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %15 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %16 = arith.addi %15, %c4_i32 : i32
    llvm.store %16, %0 : i32, !llvm.ptr
    call @f103(%arg0, %16) : (!llvm.ptr, i32) -> ()
    %17 = llvm.load %0 : !llvm.ptr -> i32
    call @f104(%arg0, %17) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  }
  func.func @f29(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %12 = arith.extui %10 : i32 to i64
    %13 = arith.addi %12, %c12_i64 : i64
    %14 = llvm.getelementptr %7[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %11, %14 {alignment = 1 : i64} : i32, !llvm.ptr
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c1049484_i32 = arith.constant 1049484 : i32
    %c6_i32 = arith.constant 6 : i32
    %c1049490_i32 = arith.constant 1049490 : i32
    %c4_i32 = arith.constant 4 : i32
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_2 = arith.constant 4 : i32
    %17 = arith.addi %16, %c4_i32_2 : i32
    %c1049452_i32 = arith.constant 1049452 : i32
    %c1049494_i32 = arith.constant 1049494 : i32
    %c5_i32 = arith.constant 5 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %19 = arith.addi %18, %c12_i32 : i32
    %c1049468_i32 = arith.constant 1049468 : i32
    %20 = call @f172(%arg0, %15, %c1049484_i32, %c6_i32, %c1049490_i32, %c4_i32, %17, %c1049452_i32, %c1049494_i32, %c5_i32, %19, %c1049468_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %20, %0 : i32, !llvm.ptr
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_3 = arith.constant 16 : i32
    %22 = arith.addi %21, %c16_i32_3 : i32
    llvm.store %22, %4 : i32, !llvm.ptr
    %23 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%23 : i32)
  ^bb2(%24: i32):  // pred: ^bb1
    return %24 : i32
  }
  func.func @f30(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %15 = arith.cmpi eq, %14, %c-2147483638_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %17 = arith.cmpi eq, %16, %c0_i32_2 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_3 : i32
    cf.cond_br %19, ^bb4, ^bb5
  ^bb2(%20: i32):  // pred: ^bb3
    return %20 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %22 = arith.addi %21, %c16_i32_4 : i32
    llvm.store %22, %4 : i32, !llvm.ptr
    %23 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%23 : i32)
  ^bb4:  // pred: ^bb1
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %24 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %28 = llvm.getelementptr %7[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %25, %28 {alignment = 1 : i64} : i32, !llvm.ptr
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c1049884_i32 = arith.constant 1049884 : i32
    %c17_i32 = arith.constant 17 : i32
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %31 = arith.addi %30, %c12_i32 : i32
    %c1049868_i32 = arith.constant 1049868 : i32
    %32 = call @f174(%arg0, %29, %c1049884_i32, %c17_i32, %31, %c1049868_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    llvm.store %32, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %35 = arith.addi %34, %c4_i32 : i32
    %c8_i64 = arith.constant 8 : i64
    %36 = arith.extui %33 : i32 to i64
    %37 = arith.addi %36, %c8_i64 : i64
    %38 = llvm.getelementptr %7[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c1049860_i32 = arith.constant 1049860 : i32
    %c6_i32 = arith.constant 6 : i32
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %41 = arith.addi %40, %c8_i32 : i32
    %c1049844_i32 = arith.constant 1049844 : i32
    %42 = call @f174(%arg0, %39, %c1049860_i32, %c6_i32, %41, %c1049844_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    llvm.store %42, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f31(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c40_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i64
    cf.br ^bb2(%8 : i64)
  ^bb2(%9: i64):  // pred: ^bb1
    return %9 : i64
  }
  func.func public @deploy(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @mark_used(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @f34(%arg0) : (!llvm.ptr) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f34(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1050012_i32 = arith.constant 1050012 : i32
    call @f158(%arg0, %c1050012_i32) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func public @user_entrypoint(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %12 = arith.subi %11, %c48_i32 : i32
    llvm.store %12, %1 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    llvm.store %c1_i32_5, %2 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c47_i32 = arith.constant 47 : i32
    %14 = arith.addi %13, %c47_i32 : i32
    %15 = call @f53(%arg0, %14) : (!llvm.ptr, i32) -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_6 : i32
    cf.cond_br %16, ^bb3, ^bb4
  ^bb2(%17: i32):  // pred: ^bb3
    return %17 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb5
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32_7 = arith.constant 48 : i32
    %19 = arith.addi %18, %c48_i32_7 : i32
    llvm.store %19, %7 : i32, !llvm.ptr
    %20 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%20 : i32)
  ^bb4:  // pred: ^bb1
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %22 = arith.addi %21, %c4_i32 : i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c47_i32_8 = arith.constant 47 : i32
    %24 = arith.addi %23, %c47_i32_8 : i32
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c47_i32_9 = arith.constant 47 : i32
    %26 = arith.addi %25, %c47_i32_9 : i32
    %27 = call @f58(%arg0, %26) : (!llvm.ptr, i32) -> i32
    call @f51(%arg0, %22, %24, %27) : (!llvm.ptr, i32, i32, i32) -> ()
    %c0_i32_10 = arith.constant 0 : i32
    llvm.store %c0_i32_10, %2 : i32, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %29 = arith.addi %28, %c28_i32 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_11 = arith.constant 4 : i32
    %31 = arith.addi %30, %c4_i32_11 : i32
    %c0_i32_12 = arith.constant 0 : i32
    call @f1(%arg0, %29, %31, %c0_i32_12) : (!llvm.ptr, i32, i32, i32) -> ()
    %32 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c28_i64 : i64
    %35 = llvm.getelementptr %10[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %36, %3 : i32, !llvm.ptr
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %38 = arith.addi %37, %c24_i32 : i32
    llvm.store %38, %4 : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %40 = arith.addi %39, %c40_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c0_i64 : i64
    %43 = llvm.getelementptr %10[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %45 = arith.extui %38 : i32 to i64
    %46 = arith.addi %45, %c0_i64_13 : i64
    %47 = llvm.getelementptr %10[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i32, !llvm.ptr
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c32_i64 : i64
    %52 = llvm.getelementptr %10[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %54 = arith.extui %48 : i32 to i64
    %55 = arith.addi %54, %c16_i64 : i64
    %56 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %c47_i32_14 = arith.constant 47 : i32
    %58 = arith.addi %57, %c47_i32_14 : i32
    %c0_i32_15 = arith.constant 0 : i32
    call @f52(%arg0, %58, %c0_i32_15) : (!llvm.ptr, i32, i32) -> ()
    %59 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c0_i64_16 : i64
    %62 = llvm.getelementptr %10[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %63, %4 : i32, !llvm.ptr
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c20_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %68, %5 : i32, !llvm.ptr
    %69 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %70 = arith.cmpi ne, %69, %c0_i32_17 : i32
    cf.cond_br %70, ^bb6, ^bb7
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %71 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %72 = arith.addi %71, %c16_i32 : i32
    call @f103(%arg0, %72) : (!llvm.ptr, i32) -> ()
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_18 = arith.constant 16 : i32
    %74 = arith.addi %73, %c16_i32_18 : i32
    call @f104(%arg0, %74) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb6:  // pred: ^bb4
    %75 = llvm.load %5 : !llvm.ptr -> i32
    %76 = llvm.load %4 : !llvm.ptr -> i32
    call @f47(%arg0, %75, %76) : (!llvm.ptr, i32, i32) -> ()
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %2 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb4
    %77 = llvm.load %5 : !llvm.ptr -> i32
    %78 = llvm.load %4 : !llvm.ptr -> i32
    call @f46(%arg0, %77, %78) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb5
  }
  func.func public @call(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %0 = call @user_entrypoint(%arg0, %c0_i32) : (!llvm.ptr, i32) -> i32
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f37(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @f131(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f38(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.call %2(%4) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func @f39(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f40(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %8 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %18 = arith.subi %17, %c96_i32 : i32
    llvm.store %18, %1 : i32, !llvm.ptr
    llvm.store %18, %8 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %2 : i32, !llvm.ptr
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_6 = arith.constant 24 : i32
    %20 = arith.addi %19, %c24_i32_6 : i32
    llvm.store %20, %3 : i32, !llvm.ptr
    %c0_i64_7 = arith.constant 0 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64_8 : i64
    %23 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_7, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %25 = arith.addi %24, %c16_i32 : i32
    llvm.store %25, %4 : i32, !llvm.ptr
    %c0_i64_9 = arith.constant 0 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64_10 : i64
    %28 = llvm.getelementptr %11[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_9, %28 {alignment = 1 : i64} : i64, !llvm.ptr
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %30 = arith.addi %29, %c8_i32 : i32
    llvm.store %30, %5 : i32, !llvm.ptr
    %c0_i64_11 = arith.constant 0 : i64
    %c0_i64_12 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_12 : i64
    %33 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_11, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %c0_i64_14 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_14 : i64
    %37 = llvm.getelementptr %11[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_13, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %39 = llvm.call %14(%16, %38) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %41 = arith.addi %40, %c32_i32 : i32
    %c24_i32_15 = arith.constant 24 : i32
    %42 = arith.addi %41, %c24_i32_15 : i32
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_16 : i64
    %46 = llvm.getelementptr %11[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %48 = arith.extui %42 : i32 to i64
    %49 = arith.addi %48, %c0_i64_17 : i64
    %50 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i64, !llvm.ptr
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_18 = arith.constant 32 : i32
    %52 = arith.addi %51, %c32_i32_18 : i32
    %c16_i32_19 = arith.constant 16 : i32
    %53 = arith.addi %52, %c16_i32_19 : i32
    %54 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c0_i64_20 : i64
    %57 = llvm.getelementptr %11[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %59 = arith.extui %53 : i32 to i64
    %60 = arith.addi %59, %c0_i64_21 : i64
    %61 = llvm.getelementptr %11[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i64, !llvm.ptr
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_22 = arith.constant 32 : i32
    %63 = arith.addi %62, %c32_i32_22 : i32
    %c8_i32_23 = arith.constant 8 : i32
    %64 = arith.addi %63, %c8_i32_23 : i32
    %65 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c0_i64_24 : i64
    %68 = llvm.getelementptr %11[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %70 = arith.extui %64 : i32 to i64
    %71 = arith.addi %70, %c0_i64_25 : i64
    %72 = llvm.getelementptr %11[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c0_i64_26 : i64
    %77 = llvm.getelementptr %11[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %79 = arith.extui %73 : i32 to i64
    %80 = arith.addi %79, %c32_i64 : i64
    %81 = llvm.getelementptr %11[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %81 {alignment = 1 : i64} : i64, !llvm.ptr
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %83 = arith.addi %82, %c64_i32 : i32
    %c24_i32_27 = arith.constant 24 : i32
    %84 = arith.addi %83, %c24_i32_27 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %c0_i64_29 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_29 : i64
    %87 = llvm.getelementptr %11[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_28, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_30 = arith.constant 64 : i32
    %89 = arith.addi %88, %c64_i32_30 : i32
    %c16_i32_31 = arith.constant 16 : i32
    %90 = arith.addi %89, %c16_i32_31 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %c0_i64_33 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64_33 : i64
    %93 = llvm.getelementptr %11[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_32, %93 {alignment = 1 : i64} : i64, !llvm.ptr
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_34 = arith.constant 64 : i32
    %95 = arith.addi %94, %c64_i32_34 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %96 = arith.addi %95, %c8_i32_35 : i32
    %c0_i64_36 = arith.constant 0 : i64
    %c0_i64_37 = arith.constant 0 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c0_i64_37 : i64
    %99 = llvm.getelementptr %11[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_36, %99 {alignment = 1 : i64} : i64, !llvm.ptr
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_38 = arith.constant 0 : i64
    %c64_i64 = arith.constant 64 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c64_i64 : i64
    %103 = llvm.getelementptr %11[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_38, %103 {alignment = 1 : i64} : i64, !llvm.ptr
    %104 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_39 = arith.constant 64 : i32
    %105 = arith.addi %104, %c64_i32_39 : i32
    llvm.store %105, %3 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %106 = llvm.load %0 : !llvm.ptr -> i32
    %107 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i64_40 = arith.constant 64 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c64_i64_40 : i64
    %110 = llvm.getelementptr %11[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %112 = arith.extui %106 : i32 to i64
    %113 = arith.addi %112, %c0_i64_41 : i64
    %114 = llvm.getelementptr %11[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %111, %114 {alignment = 1 : i64} : i64, !llvm.ptr
    %115 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_42 = arith.constant 24 : i32
    %116 = arith.addi %115, %c24_i32_42 : i32
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_43 = arith.constant 64 : i32
    %118 = arith.addi %117, %c64_i32_43 : i32
    %c24_i32_44 = arith.constant 24 : i32
    %119 = arith.addi %118, %c24_i32_44 : i32
    %c0_i64_45 = arith.constant 0 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c0_i64_45 : i64
    %122 = llvm.getelementptr %11[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_46 = arith.constant 0 : i64
    %124 = arith.extui %116 : i32 to i64
    %125 = arith.addi %124, %c0_i64_46 : i64
    %126 = llvm.getelementptr %11[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %123, %126 {alignment = 1 : i64} : i64, !llvm.ptr
    %127 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_47 = arith.constant 16 : i32
    %128 = arith.addi %127, %c16_i32_47 : i32
    %129 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_48 = arith.constant 64 : i32
    %130 = arith.addi %129, %c64_i32_48 : i32
    %c16_i32_49 = arith.constant 16 : i32
    %131 = arith.addi %130, %c16_i32_49 : i32
    %c0_i64_50 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_50 : i64
    %134 = llvm.getelementptr %11[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_51 = arith.constant 0 : i64
    %136 = arith.extui %128 : i32 to i64
    %137 = arith.addi %136, %c0_i64_51 : i64
    %138 = llvm.getelementptr %11[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %135, %138 {alignment = 1 : i64} : i64, !llvm.ptr
    %139 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_52 = arith.constant 8 : i32
    %140 = arith.addi %139, %c8_i32_52 : i32
    %141 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_53 = arith.constant 64 : i32
    %142 = arith.addi %141, %c64_i32_53 : i32
    %c8_i32_54 = arith.constant 8 : i32
    %143 = arith.addi %142, %c8_i32_54 : i32
    %c0_i64_55 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_55 : i64
    %146 = llvm.getelementptr %11[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_56 = arith.constant 0 : i64
    %148 = arith.extui %140 : i32 to i64
    %149 = arith.addi %148, %c0_i64_56 : i64
    %150 = llvm.getelementptr %11[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %147, %150 {alignment = 1 : i64} : i64, !llvm.ptr
    %151 = llvm.load %1 : !llvm.ptr -> i32
    %c96_i32_57 = arith.constant 96 : i32
    %152 = arith.addi %151, %c96_i32_57 : i32
    llvm.store %152, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_58 = arith.constant 32 : i32
    %155 = arith.addi %154, %c32_i32_58 : i32
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %157 = arith.addi %155, %156 : i32
    %c0_i64_59 = arith.constant 0 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c0_i64_59 : i64
    %160 = llvm.getelementptr %11[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %161, %6 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %162 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %163 = scf.if %162 -> (i64) {
      %210 = arith.shli %161, %c56_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %164 = llvm.load %6 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %165 = arith.andi %164, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_60 = arith.constant 63 : i64
    %166 = arith.cmpi ule, %c40_i64, %c63_i64_60 : i64
    %167 = scf.if %166 -> (i64) {
      %210 = arith.shli %165, %c40_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %168 = arith.ori %163, %167 : i64
    %169 = llvm.load %6 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %170 = arith.andi %169, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_61 = arith.constant 63 : i64
    %171 = arith.cmpi ule, %c24_i64, %c63_i64_61 : i64
    %172 = scf.if %171 -> (i64) {
      %210 = arith.shli %170, %c24_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %173 = llvm.load %6 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %174 = arith.andi %173, %c4278190080_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %c63_i64_62 = arith.constant 63 : i64
    %175 = arith.cmpi ule, %c8_i64, %c63_i64_62 : i64
    %176 = scf.if %175 -> (i64) {
      %210 = arith.shli %174, %c8_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %177 = arith.ori %172, %176 : i64
    %178 = arith.ori %168, %177 : i64
    %179 = llvm.load %6 : !llvm.ptr -> i64
    %c8_i64_63 = arith.constant 8 : i64
    %c63_i64_64 = arith.constant 63 : i64
    %180 = arith.cmpi ule, %c8_i64_63, %c63_i64_64 : i64
    %181 = scf.if %180 -> (i64) {
      %210 = arith.shrui %179, %c8_i64_63 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %c4278190080_i64_65 = arith.constant 4278190080 : i64
    %182 = arith.andi %181, %c4278190080_i64_65 : i64
    %183 = llvm.load %6 : !llvm.ptr -> i64
    %c24_i64_66 = arith.constant 24 : i64
    %c63_i64_67 = arith.constant 63 : i64
    %184 = arith.cmpi ule, %c24_i64_66, %c63_i64_67 : i64
    %185 = scf.if %184 -> (i64) {
      %210 = arith.shrui %183, %c24_i64_66 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %c16711680_i64_68 = arith.constant 16711680 : i64
    %186 = arith.andi %185, %c16711680_i64_68 : i64
    %187 = arith.ori %182, %186 : i64
    %188 = llvm.load %6 : !llvm.ptr -> i64
    %c40_i64_69 = arith.constant 40 : i64
    %c63_i64_70 = arith.constant 63 : i64
    %189 = arith.cmpi ule, %c40_i64_69, %c63_i64_70 : i64
    %190 = scf.if %189 -> (i64) {
      %210 = arith.shrui %188, %c40_i64_69 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %c65280_i64_71 = arith.constant 65280 : i64
    %191 = arith.andi %190, %c65280_i64_71 : i64
    %192 = llvm.load %6 : !llvm.ptr -> i64
    %c56_i64_72 = arith.constant 56 : i64
    %c63_i64_73 = arith.constant 63 : i64
    %193 = arith.cmpi ule, %c56_i64_72, %c63_i64_73 : i64
    %194 = scf.if %193 -> (i64) {
      %210 = arith.shrui %192, %c56_i64_72 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %195 = arith.ori %191, %194 : i64
    %196 = arith.ori %187, %195 : i64
    %197 = arith.ori %178, %196 : i64
    %c0_i64_74 = arith.constant 0 : i64
    %198 = arith.extui %153 : i32 to i64
    %199 = arith.addi %198, %c0_i64_74 : i64
    %200 = llvm.getelementptr %11[%199] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %197, %200 {alignment = 1 : i64} : i64, !llvm.ptr
    %201 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_75 = arith.constant 8 : i32
    %202 = arith.addi %201, %c8_i32_75 : i32
    llvm.store %202, %3 : i32, !llvm.ptr
    %203 = llvm.load %2 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %204 = arith.addi %203, %c-8_i32 : i32
    llvm.store %204, %2 : i32, !llvm.ptr
    %c-8_i32_76 = arith.constant -8 : i32
    %205 = arith.cmpi eq, %204, %c-8_i32_76 : i32
    %206 = arith.extui %205 : i1 to i32
    %c0_i32_77 = arith.constant 0 : i32
    %207 = arith.cmpi eq, %206, %c0_i32_77 : i32
    %208 = arith.extui %207 : i1 to i32
    %c0_i32_78 = arith.constant 0 : i32
    %209 = arith.cmpi ne, %208, %c0_i32_78 : i32
    cf.cond_br %209, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f41(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %9 = arith.cmpi eq, %8, %c-2147483648_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %0 : !llvm.ptr -> i32
    call @f103(%arg0, %12) : (!llvm.ptr, i32) -> ()
    %13 = llvm.load %0 : !llvm.ptr -> i32
    call @f104(%arg0, %13) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  }
  func.func @f42(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> i32
    %7 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %8 : !llvm.ptr -> i64
    %11 = arith.trunci %10 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %4[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %1 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %17 = arith.addi %16, %c-2147483647_i32 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %19 = arith.cmpi slt, %18, %c-2147483638_i32 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_2 : i32
    %22 = arith.select %21, %17, %c0_i32_1 : i32
    llvm.store %22, %1 : i32, !llvm.ptr
    %c9_i32 = arith.constant 9 : i32
    %23 = arith.cmpi ugt, %22, %c9_i32 : i32
    %24 = arith.extui %23 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_3 : i32
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // 3 preds: ^bb3, ^bb6, ^bb15
    return
  ^bb3:  // pred: ^bb1
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %27 = arith.addi %26, %c4_i32 : i32
    call @f41(%arg0, %27) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_4 = arith.constant 1 : i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %29 = arith.cmpi ule, %28, %c31_i32 : i32
    %30 = scf.if %29 -> (i32) {
      %81 = arith.shli %c1_i32_4, %28 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_13 = arith.constant 0 : i32
      scf.yield %c0_i32_13 : i32
    }
    %c894_i32 = arith.constant 894 : i32
    %31 = arith.andi %30, %c894_i32 : i32
    %c0_i32_5 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_5 : i32
    cf.cond_br %32, ^bb6, ^bb7
  ^bb5:  // pred: ^bb7
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c12_i64 : i64
    %36 = llvm.getelementptr %4[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %37, %0 : i32, !llvm.ptr
    call @f77(%arg0, %37) : (!llvm.ptr, i32) -> ()
    %38 = llvm.load %0 : !llvm.ptr -> i32
    call @f79(%arg0, %38) : (!llvm.ptr, i32) -> ()
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %40 = arith.addi %39, %c24_i32 : i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c16_i64 : i64
    %44 = llvm.getelementptr %4[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c20_i64 : i64
    %49 = llvm.getelementptr %4[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i32
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_6 = arith.constant 12 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c12_i64_6 : i64
    %54 = llvm.getelementptr %4[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c16_i64_7 = arith.constant 16 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c16_i64_7 : i64
    %58 = llvm.getelementptr %4[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi ult, %59, %11 : i32
    cf.cond_br %60, ^bb9, ^bb10
  ^bb6:  // 2 preds: ^bb4, ^bb8
    cf.br ^bb2
  ^bb7:  // pred: ^bb4
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_8 : i32
    cf.cond_br %62, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %64 = arith.addi %63, %c12_i32 : i32
    call @f41(%arg0, %64) : (!llvm.ptr, i32) -> ()
    %65 = llvm.load %0 : !llvm.ptr -> i32
    call @f103(%arg0, %65) : (!llvm.ptr, i32) -> ()
    %66 = llvm.load %0 : !llvm.ptr -> i32
    call @f104(%arg0, %66) : (!llvm.ptr, i32) -> ()
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb5, ^bb10
    %67 = llvm.getelementptr inbounds %9[%59] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %68 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64_9 = arith.constant 0 : i64
    %70 = arith.cmpi eq, %69, %c0_i64_9 : i64
    cf.cond_br %70, ^bb12, ^bb11
  ^bb10:  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %71 = llvm.getelementptr %68[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %72 = llvm.getelementptr %68[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %73 = llvm.getelementptr %68[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %74 = llvm.load %71 : !llvm.ptr -> !llvm.ptr
    %75 = llvm.load %73 : !llvm.ptr -> !llvm.ptr
    %76 = llvm.ptrtoint %74 : !llvm.ptr to i64
    %c0_i64_10 = arith.constant 0 : i64
    %77 = arith.cmpi eq, %76, %c0_i64_10 : i64
    cf.cond_br %77, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c4_i32_11 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_11) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %78 = llvm.load %72 : !llvm.ptr -> i32
    %79 = arith.cmpi ne, %6, %78 : i32
    cf.cond_br %79, ^bb16, ^bb15
  ^bb14:  // pred: ^bb11
    %c3_i32_12 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_12) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %80 = llvm.call %74(%75, %40, %45, %50) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    cf.br ^bb2
  ^bb16:  // pred: ^bb13
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb15
  }
  func.func @f43(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c4_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %5 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f44(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f42(%arg0, %1) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f45(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1_i32_7 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %7 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %8 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %9 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %10 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_6, %11 : i32, !llvm.ptr
    %12 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.getelementptr %arg0[256] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %17[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.getelementptr %17[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.getelementptr %arg0[280] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.getelementptr %22[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.getelementptr %22[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.load %25 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.getelementptr %27[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.getelementptr %27[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %31 = llvm.load %30 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %33 = llvm.getelementptr %32[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %34 = llvm.load %33 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.getelementptr %32[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %37 = llvm.load %13 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %38 = arith.subi %37, %c80_i32 : i32
    llvm.store %38, %5 : i32, !llvm.ptr
    llvm.store %38, %13 : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c8_i64 : i64
    %42 = llvm.getelementptr %16[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %43, %6 : i64, !llvm.ptr
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c0_i64_12 : i64
    %47 = llvm.getelementptr %16[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %48, %7 : i32, !llvm.ptr
    %49 = llvm.load %5 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %50 = arith.addi %49, %c72_i32 : i32
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %52 = arith.addi %51, %c48_i32 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %53 = arith.extui %52 : i32 to i64
    %54 = arith.addi %53, %c0_i64_13 : i64
    %55 = llvm.getelementptr %16[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = llvm.load volatile %55 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_14 = arith.constant 0 : i64
    %57 = arith.extui %50 : i32 to i64
    %58 = arith.addi %57, %c0_i64_14 : i64
    %59 = llvm.getelementptr %16[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %56, %59 {alignment = 1 : i64} : i64, !llvm.ptr
    %60 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32_15 = arith.constant 48 : i32
    %61 = arith.addi %60, %c48_i32_15 : i32
    %c16_i32 = arith.constant 16 : i32
    %62 = arith.addi %61, %c16_i32 : i32
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %64 = arith.addi %63, %c40_i32 : i32
    %c0_i64_16 = arith.constant 0 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c0_i64_16 : i64
    %67 = llvm.getelementptr %16[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %69 = arith.extui %62 : i32 to i64
    %70 = arith.addi %69, %c0_i64_17 : i64
    %71 = llvm.getelementptr %16[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %71 {alignment = 1 : i64} : i64, !llvm.ptr
    %72 = llvm.load %5 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %73 = arith.addi %72, %c56_i32 : i32
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %75 = arith.addi %74, %c32_i32 : i32
    %c0_i64_18 = arith.constant 0 : i64
    %76 = arith.extui %75 : i32 to i64
    %77 = arith.addi %76, %c0_i64_18 : i64
    %78 = llvm.getelementptr %16[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %79 = llvm.load volatile %78 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_19 = arith.constant 0 : i64
    %80 = arith.extui %73 : i32 to i64
    %81 = arith.addi %80, %c0_i64_19 : i64
    %82 = llvm.getelementptr %16[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %79, %82 {alignment = 1 : i64} : i64, !llvm.ptr
    %83 = llvm.load %5 : !llvm.ptr -> i32
    %84 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c24_i64 : i64
    %87 = llvm.getelementptr %16[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %89 = arith.extui %83 : i32 to i64
    %90 = arith.addi %89, %c48_i64 : i64
    %91 = llvm.getelementptr %16[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i64, !llvm.ptr
    %92 = llvm.load %5 : !llvm.ptr -> i32
    %c79_i32 = arith.constant 79 : i32
    %93 = arith.addi %92, %c79_i32 : i32
    llvm.store %93, %8 : i32, !llvm.ptr
    %c0_i32_20 = arith.constant 0 : i32
    llvm.store %c0_i32_20, %9 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // pred: ^bb5
    %94 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %95 = arith.addi %94, %c24_i32 : i32
    %96 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32_21 = arith.constant 48 : i32
    %97 = arith.addi %96, %c48_i32_21 : i32
    %c24_i32_22 = arith.constant 24 : i32
    %98 = arith.addi %97, %c24_i32_22 : i32
    %c0_i64_23 = arith.constant 0 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c0_i64_23 : i64
    %101 = llvm.getelementptr %16[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_24 = arith.constant 0 : i64
    %103 = arith.extui %95 : i32 to i64
    %104 = arith.addi %103, %c0_i64_24 : i64
    %105 = llvm.getelementptr %16[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %102, %105 {alignment = 1 : i64} : i64, !llvm.ptr
    %106 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_25 = arith.constant 16 : i32
    %107 = arith.addi %106, %c16_i32_25 : i32
    %108 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32_26 = arith.constant 48 : i32
    %109 = arith.addi %108, %c48_i32_26 : i32
    %c16_i32_27 = arith.constant 16 : i32
    %110 = arith.addi %109, %c16_i32_27 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %111 = arith.extui %110 : i32 to i64
    %112 = arith.addi %111, %c0_i64_28 : i64
    %113 = llvm.getelementptr %16[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = llvm.load volatile %113 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_29 = arith.constant 0 : i64
    %115 = arith.extui %107 : i32 to i64
    %116 = arith.addi %115, %c0_i64_29 : i64
    %117 = llvm.getelementptr %16[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %114, %117 {alignment = 1 : i64} : i64, !llvm.ptr
    %118 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %119 = arith.addi %118, %c8_i32 : i32
    %120 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32_30 = arith.constant 48 : i32
    %121 = arith.addi %120, %c48_i32_30 : i32
    %c8_i32_31 = arith.constant 8 : i32
    %122 = arith.addi %121, %c8_i32_31 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_32 : i64
    %125 = llvm.getelementptr %16[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    %127 = arith.extui %119 : i32 to i64
    %128 = arith.addi %127, %c0_i64_33 : i64
    %129 = llvm.getelementptr %16[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %129 {alignment = 1 : i64} : i64, !llvm.ptr
    %130 = llvm.load %5 : !llvm.ptr -> i32
    %131 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i64_34 = arith.constant 48 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c48_i64_34 : i64
    %134 = llvm.getelementptr %16[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_35 = arith.constant 0 : i64
    %136 = arith.extui %130 : i32 to i64
    %137 = arith.addi %136, %c0_i64_35 : i64
    %138 = llvm.getelementptr %16[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %135, %138 {alignment = 1 : i64} : i64, !llvm.ptr
    %139 = llvm.load %6 : !llvm.ptr -> i64
    %c-1_i64 = arith.constant -1 : i64
    %140 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_36 = arith.constant 1 : i32
    %141 = arith.andi %140, %c1_i32_36 : i32
    %c0_i32_37 = arith.constant 0 : i32
    %142 = arith.cmpi ne, %141, %c0_i32_37 : i32
    %143 = arith.select %142, %139, %c-1_i64 : i64
    llvm.store %143, %6 : i64, !llvm.ptr
    %144 = llvm.load %1 : !llvm.ptr -> i32
    %c60_i64 = arith.constant 60 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c60_i64 : i64
    %147 = llvm.getelementptr %16[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i8
    %149 = arith.extui %148 : i8 to i32
    cf.switch %149 : i32, [
      default: ^bb11,
      0: ^bb11,
      1: ^bb10,
      2: ^bb9
    ]
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %150 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32_38 = arith.constant 48 : i32
    %151 = arith.addi %150, %c48_i32_38 : i32
    %152 = llvm.load %9 : !llvm.ptr -> i32
    %153 = arith.addi %151, %152 : i32
    llvm.store %153, %10 : i32, !llvm.ptr
    %c0_i64_39 = arith.constant 0 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c0_i64_39 : i64
    %156 = llvm.getelementptr %16[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load volatile %156 {alignment = 1 : i64} : !llvm.ptr -> i8
    %158 = arith.extui %157 : i8 to i32
    llvm.store %158, %11 : i32, !llvm.ptr
    %159 = llvm.load %10 : !llvm.ptr -> i32
    %160 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %161 = arith.extui %160 : i32 to i64
    %162 = arith.addi %161, %c0_i64_40 : i64
    %163 = llvm.getelementptr %16[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = llvm.load volatile %163 {alignment = 1 : i64} : !llvm.ptr -> i8
    %165 = arith.extui %164 : i8 to i32
    %c0_i64_41 = arith.constant 0 : i64
    %166 = arith.extui %159 : i32 to i64
    %167 = arith.addi %166, %c0_i64_41 : i64
    %168 = llvm.getelementptr %16[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %169 = arith.trunci %165 : i32 to i8
    llvm.store volatile %169, %168 {alignment = 1 : i64} : i8, !llvm.ptr
    %170 = llvm.load %8 : !llvm.ptr -> i32
    %171 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %172 = arith.extui %170 : i32 to i64
    %173 = arith.addi %172, %c0_i64_42 : i64
    %174 = llvm.getelementptr %16[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %175 = arith.trunci %171 : i32 to i8
    llvm.store volatile %175, %174 {alignment = 1 : i64} : i8, !llvm.ptr
    %176 = llvm.load %8 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %177 = arith.addi %176, %c-1_i32 : i32
    llvm.store %177, %8 : i32, !llvm.ptr
    %178 = llvm.load %9 : !llvm.ptr -> i32
    %c1_i32_43 = arith.constant 1 : i32
    %179 = arith.addi %178, %c1_i32_43 : i32
    llvm.store %179, %9 : i32, !llvm.ptr
    %c16_i32_44 = arith.constant 16 : i32
    %180 = arith.cmpi eq, %179, %c16_i32_44 : i32
    %181 = arith.extui %180 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %182 = arith.cmpi eq, %181, %c0_i32_45 : i32
    %183 = arith.extui %182 : i1 to i32
    %c0_i32_46 = arith.constant 0 : i32
    %184 = arith.cmpi ne, %183, %c0_i32_46 : i32
    cf.cond_br %184, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb7, ^bb8
    %c0_i32_47 = arith.constant 0 : i32
    %c1_i32_48 = arith.constant 1 : i32
    %c1054136_i64 = arith.constant 1054136 : i64
    %185 = arith.extui %c0_i32_47 : i32 to i64
    %186 = arith.addi %185, %c1054136_i64 : i64
    %187 = llvm.getelementptr %16[%186] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %188 = arith.trunci %c1_i32_48 : i32 to i8
    llvm.store volatile %188, %187 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_49 = arith.constant 0 : i32
    %189 = llvm.load %9 : !llvm.ptr -> i32
    %c1054132_i64 = arith.constant 1054132 : i64
    %190 = arith.extui %c0_i32_49 : i32 to i64
    %191 = arith.addi %190, %c1054132_i64 : i64
    %192 = llvm.getelementptr %16[%191] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %189, %192 {alignment = 1 : i64} : i32, !llvm.ptr
    %193 = llvm.load %5 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %194 = arith.addi %193, %c36_i32 : i32
    %195 = llvm.load %8 : !llvm.ptr -> i32
    %196 = llvm.load %1 : !llvm.ptr -> i32
    %c56_i64 = arith.constant 56 : i64
    %197 = arith.extui %196 : i32 to i64
    %198 = arith.addi %197, %c56_i64 : i64
    %199 = llvm.getelementptr %16[%198] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %200 = llvm.load volatile %199 {alignment = 1 : i64} : !llvm.ptr -> i32
    %201 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %202 = arith.extui %201 : i32 to i64
    %203 = arith.addi %202, %c16_i64 : i64
    %204 = llvm.getelementptr %16[%203] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %205 = llvm.load volatile %204 {alignment = 1 : i64} : !llvm.ptr -> i32
    %206 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %207 = arith.extui %206 : i32 to i64
    %208 = arith.addi %207, %c20_i64 : i64
    %209 = llvm.getelementptr %16[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %210 = llvm.load volatile %209 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f50(%arg0, %194, %195, %200, %205, %210) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %211 = llvm.load %0 : !llvm.ptr -> i32
    %212 = llvm.load %8 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %213 = arith.andi %212, %c255_i32 : i32
    %c0_i32_50 = arith.constant 0 : i32
    %214 = arith.cmpi eq, %213, %c0_i32_50 : i32
    %215 = arith.extui %214 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %216 = arith.cmpi eq, %215, %c0_i32_51 : i32
    %217 = arith.extui %216 : i1 to i32
    %c0_i64_52 = arith.constant 0 : i64
    %218 = arith.extui %211 : i32 to i64
    %219 = arith.addi %218, %c0_i64_52 : i64
    %220 = llvm.getelementptr %16[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %217, %220 {alignment = 1 : i64} : i32, !llvm.ptr
    %221 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %222 = arith.addi %221, %c12_i32 : i32
    %223 = llvm.load %5 : !llvm.ptr -> i32
    %c44_i32 = arith.constant 44 : i32
    %224 = arith.addi %223, %c44_i32 : i32
    %c0_i64_53 = arith.constant 0 : i64
    %225 = arith.extui %224 : i32 to i64
    %226 = arith.addi %225, %c0_i64_53 : i64
    %227 = llvm.getelementptr %16[%226] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %228 = llvm.load volatile %227 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_54 = arith.constant 0 : i64
    %229 = arith.extui %222 : i32 to i64
    %230 = arith.addi %229, %c0_i64_54 : i64
    %231 = llvm.getelementptr %16[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %228, %231 {alignment = 1 : i64} : i32, !llvm.ptr
    %232 = llvm.load %0 : !llvm.ptr -> i32
    %233 = llvm.load %5 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %234 = arith.extui %233 : i32 to i64
    %235 = arith.addi %234, %c36_i64 : i64
    %236 = llvm.getelementptr %16[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %237 = llvm.load volatile %236 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c4_i64 = arith.constant 4 : i64
    %238 = arith.extui %232 : i32 to i64
    %239 = arith.addi %238, %c4_i64 : i64
    %240 = llvm.getelementptr %16[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %237, %240 {alignment = 1 : i64} : i64, !llvm.ptr
    %241 = llvm.load %5 : !llvm.ptr -> i32
    %c80_i32_55 = arith.constant 80 : i32
    %242 = arith.addi %241, %c80_i32_55 : i32
    llvm.store %242, %13 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb7:  // 3 preds: ^bb9, ^bb10, ^bb12
    %c0_i32_56 = arith.constant 0 : i32
    llvm.store %c0_i32_56, %9 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb11, ^bb13, ^bb14
    %c0_i32_57 = arith.constant 0 : i32
    llvm.store %c0_i32_57, %8 : i32, !llvm.ptr
    %243 = llvm.call %34(%36) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    llvm.store %243, %9 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // pred: ^bb3
    %244 = llvm.load %6 : !llvm.ptr -> i64
    %245 = llvm.load %2 : !llvm.ptr -> i32
    %246 = llvm.load %3 : !llvm.ptr -> i32
    %247 = llvm.load %4 : !llvm.ptr -> i32
    %248 = llvm.call %29(%31, %244, %245, %246, %247) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i64, i32, i32, i32) -> i32
    llvm.store %248, %8 : i32, !llvm.ptr
    %c0_i32_58 = arith.constant 0 : i32
    %249 = arith.cmpi ne, %248, %c0_i32_58 : i32
    cf.cond_br %249, ^bb7, ^bb14
  ^bb10:  // pred: ^bb3
    %250 = llvm.load %6 : !llvm.ptr -> i64
    %251 = llvm.load %2 : !llvm.ptr -> i32
    %252 = llvm.load %3 : !llvm.ptr -> i32
    %253 = llvm.load %4 : !llvm.ptr -> i32
    %254 = llvm.call %24(%26, %250, %251, %252, %253) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i64, i32, i32, i32) -> i32
    llvm.store %254, %8 : i32, !llvm.ptr
    %c0_i32_59 = arith.constant 0 : i32
    %255 = arith.cmpi ne, %254, %c0_i32_59 : i32
    cf.cond_br %255, ^bb7, ^bb13
  ^bb11:  // 2 preds: ^bb3, ^bb3
    %256 = llvm.load %6 : !llvm.ptr -> i64
    %257 = llvm.load %2 : !llvm.ptr -> i32
    %258 = llvm.load %5 : !llvm.ptr -> i32
    %259 = llvm.load %3 : !llvm.ptr -> i32
    %260 = llvm.load %4 : !llvm.ptr -> i32
    %261 = llvm.call %19(%21, %256, %257, %258, %259, %260) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i64, i32, i32, i32, i32) -> i32
    llvm.store %261, %8 : i32, !llvm.ptr
    %c0_i32_60 = arith.constant 0 : i32
    %262 = arith.cmpi eq, %261, %c0_i32_60 : i32
    %263 = arith.extui %262 : i1 to i32
    %c0_i32_61 = arith.constant 0 : i32
    %264 = arith.cmpi ne, %263, %c0_i32_61 : i32
    cf.cond_br %264, ^bb8, ^bb12
  ^bb12:  // pred: ^bb11
    cf.br ^bb7
  ^bb13:  // pred: ^bb10
    cf.br ^bb8
  ^bb14:  // pred: ^bb9
    cf.br ^bb8
  }
  func.func @f46(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[184] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %2[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %9 = llvm.call %4(%6, %7, %8) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f47(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[208] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %2[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %9 = llvm.call %4(%6, %7, %8) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f48(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg7, %6 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %9 : i64, !llvm.ptr
    %10 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> i32
    %17 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %18 : !llvm.ptr -> i64
    %21 = arith.trunci %20 : i64 to i32
    %22 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.load %22 : !llvm.ptr -> i32
    %24 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %18 : !llvm.ptr -> i64
    %26 = arith.trunci %25 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %27 = llvm.load %11 : !llvm.ptr -> i32
    %c112_i32 = arith.constant 112 : i32
    %28 = arith.subi %27, %c112_i32 : i32
    llvm.store %28, %7 : i32, !llvm.ptr
    llvm.store %28, %11 : i32, !llvm.ptr
    %29 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %30 = arith.addi %29, %c8_i32 : i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c16_i64 : i64
    %35 = llvm.getelementptr %14[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %37 = arith.cmpi ult, %36, %21 : i32
    cf.cond_br %37, ^bb3, ^bb4
  ^bb2:  // pred: ^bb17
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %38 = llvm.getelementptr inbounds %19[%36] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %39 = llvm.load %38 : !llvm.ptr -> !llvm.ptr
    %40 = llvm.ptrtoint %39 : !llvm.ptr to i64
    %c0_i64_9 = arith.constant 0 : i64
    %41 = arith.cmpi eq, %40, %c0_i64_9 : i64
    cf.cond_br %41, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %42 = llvm.getelementptr %39[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %43 = llvm.getelementptr %39[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %44 = llvm.getelementptr %39[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %45 = llvm.load %42 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %47 = llvm.ptrtoint %45 : !llvm.ptr to i64
    %c0_i64_10 = arith.constant 0 : i64
    %48 = arith.cmpi eq, %47, %c0_i64_10 : i64
    cf.cond_br %48, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %49 = llvm.load %43 : !llvm.ptr -> i32
    %50 = arith.cmpi ne, %16, %49 : i32
    cf.cond_br %50, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_11 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_11) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %51 = llvm.call %45(%46, %30, %31) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %52 = llvm.load %7 : !llvm.ptr -> i32
    %c104_i32 = arith.constant 104 : i32
    %53 = arith.addi %52, %c104_i32 : i32
    %54 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %55 = arith.addi %54, %c32_i32 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64_12 : i64
    %58 = llvm.getelementptr %14[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_13 = arith.constant 0 : i64
    %60 = arith.extui %53 : i32 to i64
    %61 = arith.addi %60, %c0_i64_13 : i64
    %62 = llvm.getelementptr %14[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %62 {alignment = 1 : i64} : i64, !llvm.ptr
    %63 = llvm.load %7 : !llvm.ptr -> i32
    %c76_i32 = arith.constant 76 : i32
    %64 = arith.addi %63, %c76_i32 : i32
    %c20_i32 = arith.constant 20 : i32
    %65 = arith.addi %64, %c20_i32 : i32
    %66 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %67 = arith.addi %66, %c24_i32 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_14 : i64
    %70 = llvm.getelementptr %14[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %72 = arith.extui %65 : i32 to i64
    %73 = arith.addi %72, %c0_i64_15 : i64
    %74 = llvm.getelementptr %14[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %71, %74 {alignment = 1 : i64} : i64, !llvm.ptr
    %75 = llvm.load %7 : !llvm.ptr -> i32
    %c76_i32_16 = arith.constant 76 : i32
    %76 = arith.addi %75, %c76_i32_16 : i32
    %c12_i32 = arith.constant 12 : i32
    %77 = arith.addi %76, %c12_i32 : i32
    llvm.store %77, %8 : i32, !llvm.ptr
    %78 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %79 = arith.addi %78, %c16_i32 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %80 = arith.extui %79 : i32 to i64
    %81 = arith.addi %80, %c0_i64_17 : i64
    %82 = llvm.getelementptr %14[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %83 = llvm.load volatile %82 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_18 = arith.constant 0 : i64
    %84 = arith.extui %77 : i32 to i64
    %85 = arith.addi %84, %c0_i64_18 : i64
    %86 = llvm.getelementptr %14[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i64, !llvm.ptr
    %87 = llvm.load %7 : !llvm.ptr -> i32
    %88 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c8_i64 : i64
    %91 = llvm.getelementptr %14[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c80_i64 = arith.constant 80 : i64
    %93 = arith.extui %87 : i32 to i64
    %94 = arith.addi %93, %c80_i64 : i64
    %95 = llvm.getelementptr %14[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %97 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c12_i64 : i64
    %100 = llvm.getelementptr %14[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    %102 = arith.cmpi ult, %101, %26 : i32
    cf.cond_br %102, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %103 = llvm.getelementptr inbounds %24[%101] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %104 = llvm.load %103 : !llvm.ptr -> !llvm.ptr
    %105 = llvm.ptrtoint %104 : !llvm.ptr to i64
    %c0_i64_19 = arith.constant 0 : i64
    %106 = arith.cmpi eq, %105, %c0_i64_19 : i64
    cf.cond_br %106, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_20 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_20) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %107 = llvm.getelementptr %104[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %108 = llvm.getelementptr %104[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %109 = llvm.getelementptr %104[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %110 = llvm.load %107 : !llvm.ptr -> !llvm.ptr
    %111 = llvm.load %109 : !llvm.ptr -> !llvm.ptr
    %112 = llvm.ptrtoint %110 : !llvm.ptr to i64
    %c0_i64_21 = arith.constant 0 : i64
    %113 = arith.cmpi eq, %112, %c0_i64_21 : i64
    cf.cond_br %113, ^bb16, ^bb15
  ^bb14:  // pred: ^bb11
    %c4_i32_22 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_22) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %114 = llvm.load %108 : !llvm.ptr -> i32
    %115 = arith.cmpi ne, %23, %114 : i32
    cf.cond_br %115, ^bb18, ^bb17
  ^bb16:  // pred: ^bb13
    %c3_i32_23 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_23) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // 2 preds: ^bb15, ^bb18
    %116 = llvm.call %110(%111, %96) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i64
    llvm.store %116, %9 : i64, !llvm.ptr
    %117 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_24 = arith.constant 0 : i32
    %c24_i64 = arith.constant 24 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c24_i64 : i64
    %120 = llvm.getelementptr %14[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_24, %120 {alignment = 1 : i64} : i32, !llvm.ptr
    %121 = llvm.load %7 : !llvm.ptr -> i32
    %122 = llvm.load %9 : !llvm.ptr -> i64
    %c16_i64_25 = arith.constant 16 : i64
    %123 = arith.extui %121 : i32 to i64
    %124 = arith.addi %123, %c16_i64_25 : i64
    %125 = llvm.getelementptr %14[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %122, %125 {alignment = 1 : i64} : i64, !llvm.ptr
    %126 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c8_i64_26 = arith.constant 8 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c8_i64_26 : i64
    %129 = llvm.getelementptr %14[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %129 {alignment = 1 : i64} : i64, !llvm.ptr
    %130 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_27 = arith.constant 8 : i32
    %131 = arith.addi %130, %c8_i32_27 : i32
    %c20_i32_28 = arith.constant 20 : i32
    %132 = arith.addi %131, %c20_i32_28 : i32
    %133 = llvm.load %7 : !llvm.ptr -> i32
    %c76_i32_29 = arith.constant 76 : i32
    %134 = arith.addi %133, %c76_i32_29 : i32
    %c36_i32 = arith.constant 36 : i32
    %135 = call @f187(%arg0, %132, %134, %c36_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %136 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_30 = arith.constant 0 : i32
    %c68_i64 = arith.constant 68 : i64
    %137 = arith.extui %136 : i32 to i64
    %138 = arith.addi %137, %c68_i64 : i64
    %139 = llvm.getelementptr %14[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = arith.trunci %c0_i32_30 : i32 to i16
    llvm.store volatile %140, %139 {alignment = 1 : i64} : i16, !llvm.ptr
    %141 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_31 = arith.constant 0 : i32
    %c64_i64 = arith.constant 64 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c64_i64 : i64
    %144 = llvm.getelementptr %14[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_31, %144 {alignment = 1 : i64} : i32, !llvm.ptr
    %145 = llvm.load %7 : !llvm.ptr -> i32
    %c76_i32_32 = arith.constant 76 : i32
    %146 = arith.addi %145, %c76_i32_32 : i32
    %147 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_33 = arith.constant 8 : i32
    %148 = arith.addi %147, %c8_i32_33 : i32
    %149 = llvm.load %4 : !llvm.ptr -> i32
    %150 = llvm.load %5 : !llvm.ptr -> i32
    %151 = llvm.load %6 : !llvm.ptr -> i32
    call @f45(%arg0, %146, %148, %149, %150, %151) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %152 = llvm.load %0 : !llvm.ptr -> i32
    %153 = llvm.load %7 : !llvm.ptr -> i32
    %c80_i64_34 = arith.constant 80 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c80_i64_34 : i64
    %156 = llvm.getelementptr %14[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load volatile %156 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c4_i64 = arith.constant 4 : i64
    %158 = arith.extui %152 : i32 to i64
    %159 = arith.addi %158, %c4_i64 : i64
    %160 = llvm.getelementptr %14[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %157, %160 {alignment = 1 : i64} : i64, !llvm.ptr
    %161 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_35 = arith.constant 12 : i32
    %162 = arith.addi %161, %c12_i32_35 : i32
    %163 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %164 = arith.extui %163 : i32 to i64
    %165 = arith.addi %164, %c0_i64_36 : i64
    %166 = llvm.getelementptr %14[%165] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %167 = llvm.load volatile %166 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %168 = arith.extui %162 : i32 to i64
    %169 = arith.addi %168, %c0_i64_37 : i64
    %170 = llvm.getelementptr %14[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %167, %170 {alignment = 1 : i64} : i32, !llvm.ptr
    %171 = llvm.load %0 : !llvm.ptr -> i32
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %c-2147483637_i32 = arith.constant -2147483637 : i32
    %172 = llvm.load %7 : !llvm.ptr -> i32
    %c76_i64 = arith.constant 76 : i64
    %173 = arith.extui %172 : i32 to i64
    %174 = arith.addi %173, %c76_i64 : i64
    %175 = llvm.getelementptr %14[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = llvm.load volatile %175 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_38 = arith.constant 0 : i32
    %177 = arith.cmpi ne, %176, %c0_i32_38 : i32
    %178 = arith.select %177, %c-2147483638_i32, %c-2147483637_i32 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %179 = arith.extui %171 : i32 to i64
    %180 = arith.addi %179, %c0_i64_39 : i64
    %181 = llvm.getelementptr %14[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %178, %181 {alignment = 1 : i64} : i32, !llvm.ptr
    %182 = llvm.load %7 : !llvm.ptr -> i32
    %c112_i32_40 = arith.constant 112 : i32
    %183 = arith.addi %182, %c112_i32_40 : i32
    llvm.store %183, %11 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb18:  // pred: ^bb15
    %c5_i32_41 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_41) : (i32) -> ()
    cf.br ^bb17
  }
  func.func @f49(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c112_i32 = arith.constant 112 : i32
    %11 = arith.subi %10, %c112_i32 : i32
    llvm.store %11, %4 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %4 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %13 = arith.addi %12, %c80_i32 : i32
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %15 = arith.addi %14, %c8_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c0_i64 : i64
    %18 = llvm.getelementptr %9[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_4 = arith.constant 0 : i64
    %20 = arith.extui %13 : i32 to i64
    %21 = arith.addi %20, %c0_i64_4 : i64
    %22 = llvm.getelementptr %9[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %19, %22 {alignment = 1 : i64} : i64, !llvm.ptr
    %23 = llvm.load %4 : !llvm.ptr -> i32
    %c88_i32 = arith.constant 88 : i32
    %24 = arith.addi %23, %c88_i32 : i32
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %26 = arith.addi %25, %c16_i32 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c0_i64_5 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %31 = arith.extui %24 : i32 to i64
    %32 = arith.addi %31, %c0_i64_6 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %30, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %4 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %35 = arith.addi %34, %c96_i32 : i32
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %37 = arith.addi %36, %c24_i32 : i32
    %c0_i64_7 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_7 : i64
    %40 = llvm.getelementptr %9[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    %42 = arith.extui %35 : i32 to i64
    %43 = arith.addi %42, %c0_i64_8 : i64
    %44 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c64_i64 = arith.constant 64 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c64_i64 : i64
    %48 = llvm.getelementptr %9[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %48 {alignment = 1 : i64} : i64, !llvm.ptr
    %49 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %c48_i64 = arith.constant 48 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c48_i64 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_9, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %c108_i64 = arith.constant 108 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c108_i64 : i64
    %56 = llvm.getelementptr %9[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = arith.trunci %c0_i32_10 : i32 to i16
    llvm.store volatile %57, %56 {alignment = 1 : i64} : i16, !llvm.ptr
    %58 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %c104_i64 = arith.constant 104 : i64
    %59 = arith.extui %58 : i32 to i64
    %60 = arith.addi %59, %c104_i64 : i64
    %61 = llvm.getelementptr %9[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_11, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %62 = llvm.load %4 : !llvm.ptr -> i32
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c0_i64_12 : i64
    %66 = llvm.getelementptr %9[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c72_i64 = arith.constant 72 : i64
    %68 = arith.extui %62 : i32 to i64
    %69 = arith.addi %68, %c72_i64 : i64
    %70 = llvm.getelementptr %9[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %67, %70 {alignment = 1 : i64} : i64, !llvm.ptr
    %71 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %72 = arith.addi %71, %c32_i32 : i32
    %73 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %74 = arith.addi %73, %c48_i32 : i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_13 = arith.constant 1 : i32
    %c0_i32_14 = arith.constant 0 : i32
    call @f45(%arg0, %72, %74, %75, %c1_i32_13, %c0_i32_14) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %76 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32_15 = arith.constant 16 : i32
    %77 = arith.addi %76, %c16_i32_15 : i32
    %c8_i32_16 = arith.constant 8 : i32
    %78 = arith.addi %77, %c8_i32_16 : i32
    llvm.store %78, %3 : i32, !llvm.ptr
    %79 = llvm.load %4 : !llvm.ptr -> i32
    %c44_i32 = arith.constant 44 : i32
    %80 = arith.addi %79, %c44_i32 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c0_i64_17 : i64
    %83 = llvm.getelementptr %9[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load volatile %83 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %85 = arith.extui %78 : i32 to i64
    %86 = arith.addi %85, %c0_i64_18 : i64
    %87 = llvm.getelementptr %9[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %84, %87 {alignment = 1 : i64} : i32, !llvm.ptr
    %88 = llvm.load %4 : !llvm.ptr -> i32
    %89 = llvm.load %4 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c36_i64 : i64
    %92 = llvm.getelementptr %9[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %94 = arith.extui %88 : i32 to i64
    %95 = arith.addi %94, %c16_i64 : i64
    %96 = llvm.getelementptr %9[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %96 {alignment = 1 : i64} : i64, !llvm.ptr
    %97 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c32_i64 : i64
    %100 = llvm.getelementptr %9[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %102 = arith.cmpi ne, %101, %c0_i32_19 : i32
    cf.cond_br %102, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %103 = llvm.load %4 : !llvm.ptr -> i32
    %c112_i32_20 = arith.constant 112 : i32
    %104 = arith.addi %103, %c112_i32_20 : i32
    llvm.store %104, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %106 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i64_21 = arith.constant 16 : i64
    %107 = arith.extui %106 : i32 to i64
    %108 = arith.addi %107, %c16_i64_21 : i64
    %109 = llvm.getelementptr %9[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_22 = arith.constant 0 : i64
    %111 = arith.extui %105 : i32 to i64
    %112 = arith.addi %111, %c0_i64_22 : i64
    %113 = llvm.getelementptr %9[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %110, %113 {alignment = 1 : i64} : i64, !llvm.ptr
    %114 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_23 = arith.constant 8 : i32
    %115 = arith.addi %114, %c8_i32_23 : i32
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %117 = arith.extui %116 : i32 to i64
    %118 = arith.addi %117, %c0_i64_24 : i64
    %119 = llvm.getelementptr %9[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %120 = llvm.load volatile %119 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %121 = arith.extui %115 : i32 to i64
    %122 = arith.addi %121, %c0_i64_25 : i64
    %123 = llvm.getelementptr %9[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %120, %123 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %124 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_26 = arith.constant 8 : i32
    %125 = arith.addi %124, %c8_i32_26 : i32
    %126 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_27 = arith.constant 0 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c0_i64_27 : i64
    %129 = llvm.getelementptr %9[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_28 = arith.constant 0 : i64
    %131 = arith.extui %125 : i32 to i64
    %132 = arith.addi %131, %c0_i64_28 : i64
    %133 = llvm.getelementptr %9[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %133 {alignment = 1 : i64} : i32, !llvm.ptr
    %134 = llvm.load %4 : !llvm.ptr -> i32
    %135 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i64_29 = arith.constant 16 : i64
    %136 = arith.extui %135 : i32 to i64
    %137 = arith.addi %136, %c16_i64_29 : i64
    %138 = llvm.getelementptr %9[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load volatile %138 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %140 = arith.extui %134 : i32 to i64
    %141 = arith.addi %140, %c0_i64_30 : i64
    %142 = llvm.getelementptr %9[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %139, %142 {alignment = 1 : i64} : i64, !llvm.ptr
    %143 = llvm.load %4 : !llvm.ptr -> i32
    call @f103(%arg0, %143) : (!llvm.ptr, i32) -> ()
    %144 = llvm.load %4 : !llvm.ptr -> i32
    call @f104(%arg0, %144) : (!llvm.ptr, i32) -> ()
    %145 = llvm.load %0 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c0_i64_31 = arith.constant 0 : i64
    %146 = arith.extui %145 : i32 to i64
    %147 = arith.addi %146, %c0_i64_31 : i64
    %148 = llvm.getelementptr %9[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %148 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f50(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    %19 = llvm.getelementptr %arg0[232] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %19[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.getelementptr %19[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.load %22 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %24 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %25 = arith.subi %24, %c16_i32 : i32
    llvm.store %25, %5 : i32, !llvm.ptr
    llvm.store %25, %8 : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %27 = arith.andi %26, %c1_i32_6 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_7 : i32
    cf.cond_br %28, ^bb3, ^bb4
  ^bb2:  // pred: ^bb18
    return
  ^bb3:  // 2 preds: ^bb1, ^bb5
    %29 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %30 = arith.addi %29, %c4_i32 : i32
    %31 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1_i32_9 = arith.constant 1 : i32
    %c1_i32_10 = arith.constant 1 : i32
    call @f102(%arg0, %30, %31, %c0_i32_8, %c1_i32_9, %c1_i32_10) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %32 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c8_i64 : i64
    %35 = llvm.getelementptr %11[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %36, %6 : i32, !llvm.ptr
    %37 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c4_i64 : i64
    %40 = llvm.getelementptr %11[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %42 = arith.cmpi eq, %41, %c1_i32_11 : i32
    %43 = arith.extui %42 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_12 : i32
    cf.cond_br %44, ^bb16, ^bb17
  ^bb4:  // pred: ^bb1
    %c0_i32_13 = arith.constant 0 : i32
    %c1054136_i64 = arith.constant 1054136 : i64
    %45 = arith.extui %c0_i32_13 : i32 to i64
    %46 = arith.addi %45, %c1054136_i64 : i64
    %47 = llvm.getelementptr %11[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i8
    %49 = arith.extui %48 : i8 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_14 : i32
    cf.cond_br %50, ^bb6, ^bb7
  ^bb5:  // 2 preds: ^bb6, ^bb14
    %c0_i32_15 = arith.constant 0 : i32
    %51 = llvm.load %4 : !llvm.ptr -> i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = arith.subi %51, %52 : i32
    llvm.store %53, %3 : i32, !llvm.ptr
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %55 = llvm.load %4 : !llvm.ptr -> i32
    %56 = arith.cmpi ugt, %54, %55 : i32
    %57 = arith.extui %56 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_16 : i32
    %59 = arith.select %58, %c0_i32_15, %53 : i32
    llvm.store %59, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb4
    %c0_i32_17 = arith.constant 0 : i32
    %c1054132_i64 = arith.constant 1054132 : i64
    %60 = arith.extui %c0_i32_17 : i32 to i64
    %61 = arith.addi %60, %c1054132_i64 : i64
    %62 = llvm.getelementptr %11[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %63, %4 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb4
    %c0_i32_18 = arith.constant 0 : i32
    %c1054128_i64 = arith.constant 1054128 : i64
    %64 = arith.extui %c0_i32_18 : i32 to i64
    %65 = arith.addi %64, %c1054128_i64 : i64
    %66 = llvm.getelementptr %11[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i32
    %68 = arith.cmpi ult, %67, %18 : i32
    cf.cond_br %68, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb9
    %69 = llvm.getelementptr inbounds %16[%67] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %70 = llvm.load %69 : !llvm.ptr -> !llvm.ptr
    %71 = llvm.ptrtoint %70 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %72 = arith.cmpi eq, %71, %c0_i64 : i64
    cf.cond_br %72, ^bb11, ^bb10
  ^bb9:  // pred: ^bb7
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %73 = llvm.getelementptr %70[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %74 = llvm.getelementptr %70[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %75 = llvm.getelementptr %70[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %76 = llvm.load %73 : !llvm.ptr -> !llvm.ptr
    %77 = llvm.load %75 : !llvm.ptr -> !llvm.ptr
    %78 = llvm.ptrtoint %76 : !llvm.ptr to i64
    %c0_i64_19 = arith.constant 0 : i64
    %79 = arith.cmpi eq, %78, %c0_i64_19 : i64
    cf.cond_br %79, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c4_i32_20 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_20) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %80 = llvm.load %74 : !llvm.ptr -> i32
    %81 = arith.cmpi ne, %13, %80 : i32
    cf.cond_br %81, ^bb15, ^bb14
  ^bb13:  // pred: ^bb10
    %c3_i32_21 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_21) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %82 = llvm.call %76(%77) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    llvm.store %82, %4 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %c1_i32_23 = arith.constant 1 : i32
    %c1054136_i64_24 = arith.constant 1054136 : i64
    %83 = arith.extui %c0_i32_22 : i32 to i64
    %84 = arith.addi %83, %c1054136_i64_24 : i64
    %85 = llvm.getelementptr %11[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = arith.trunci %c1_i32_23 : i32 to i8
    llvm.store volatile %86, %85 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %87 = llvm.load %4 : !llvm.ptr -> i32
    %c1054132_i64_26 = arith.constant 1054132 : i64
    %88 = arith.extui %c0_i32_25 : i32 to i64
    %89 = arith.addi %88, %c1054132_i64_26 : i64
    %90 = llvm.getelementptr %11[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %90 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb15:  // pred: ^bb12
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // pred: ^bb3
    %91 = llvm.load %6 : !llvm.ptr -> i32
    %92 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c12_i64 : i64
    %95 = llvm.getelementptr %11[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %91, %96) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb17:  // pred: ^bb3
    %97 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64_27 = arith.constant 12 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c12_i64_27 : i64
    %100 = llvm.getelementptr %11[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %101, %3 : i32, !llvm.ptr
    %102 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_28 = arith.constant 0 : i32
    %103 = arith.cmpi eq, %102, %c0_i32_28 : i32
    %104 = arith.extui %103 : i1 to i32
    %c0_i32_29 = arith.constant 0 : i32
    %105 = arith.cmpi ne, %104, %c0_i32_29 : i32
    cf.cond_br %105, ^bb18, ^bb19
  ^bb18:  // 2 preds: ^bb17, ^bb19
    %106 = llvm.load %0 : !llvm.ptr -> i32
    %107 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_30 = arith.constant 8 : i64
    %108 = arith.extui %106 : i32 to i64
    %109 = arith.addi %108, %c8_i64_30 : i64
    %110 = llvm.getelementptr %11[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %107, %110 {alignment = 1 : i64} : i32, !llvm.ptr
    %111 = llvm.load %0 : !llvm.ptr -> i32
    %112 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_31 = arith.constant 4 : i64
    %113 = arith.extui %111 : i32 to i64
    %114 = arith.addi %113, %c4_i64_31 : i64
    %115 = llvm.getelementptr %11[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    %116 = llvm.load %0 : !llvm.ptr -> i32
    %117 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %118 = arith.extui %116 : i32 to i64
    %119 = arith.addi %118, %c0_i64_32 : i64
    %120 = llvm.getelementptr %11[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %117, %120 {alignment = 1 : i64} : i32, !llvm.ptr
    %121 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_33 = arith.constant 16 : i32
    %122 = arith.addi %121, %c16_i32_33 : i32
    llvm.store %122, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb19:  // pred: ^bb17
    %123 = llvm.load %3 : !llvm.ptr -> i32
    %124 = llvm.load %2 : !llvm.ptr -> i32
    %125 = llvm.load %4 : !llvm.ptr -> i32
    %126 = llvm.call %21(%23, %123, %124, %125) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    cf.br ^bb18
  }
  func.func @f51(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[136] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %16 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %17 = arith.subi %16, %c16_i32 : i32
    llvm.store %17, %3 : i32, !llvm.ptr
    llvm.store %17, %7 : i32, !llvm.ptr
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %19 = arith.addi %18, %c4_i32 : i32
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %c1_i32_7 = arith.constant 1 : i32
    call @f102(%arg0, %19, %20, %c0_i32_5, %c1_i32_6, %c1_i32_7) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %21 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c8_i64 : i64
    %24 = llvm.getelementptr %10[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load volatile %24 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %25, %4 : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c4_i64 : i64
    %29 = llvm.getelementptr %10[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_8 = arith.constant 1 : i32
    %31 = arith.cmpi eq, %30, %c1_i32_8 : i32
    %32 = arith.extui %31 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %33 = arith.cmpi eq, %32, %c0_i32_9 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_10 : i32
    cf.cond_br %35, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c12_i64 : i64
    %39 = llvm.getelementptr %10[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %40, %5 : i32, !llvm.ptr
    %c0_i32_11 = arith.constant 0 : i32
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %42 = llvm.call %13(%15, %40, %c0_i32_11, %41) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_12 = arith.constant 8 : i64
    %45 = arith.extui %43 : i32 to i64
    %46 = arith.addi %45, %c8_i64_12 : i64
    %47 = llvm.getelementptr %10[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i32, !llvm.ptr
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %49 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i64_13 = arith.constant 4 : i64
    %50 = arith.extui %48 : i32 to i64
    %51 = arith.addi %50, %c4_i64_13 : i64
    %52 = llvm.getelementptr %10[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i32, !llvm.ptr
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %54 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %55 = arith.extui %53 : i32 to i64
    %56 = arith.addi %55, %c0_i64 : i64
    %57 = llvm.getelementptr %10[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %57 {alignment = 1 : i64} : i32, !llvm.ptr
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_14 = arith.constant 16 : i32
    %59 = arith.addi %58, %c16_i32_14 : i32
    llvm.store %59, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %60 = llvm.load %4 : !llvm.ptr -> i32
    %61 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_15 = arith.constant 12 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c12_i64_15 : i64
    %64 = llvm.getelementptr %10[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %60, %65) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f52(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f53(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_1 = arith.constant 0 : i32
    %c1054192_i64 = arith.constant 1054192 : i64
    %5 = arith.extui %c0_i32_1 : i32 to i64
    %6 = arith.addi %5, %c1054192_i64 : i64
    %7 = llvm.getelementptr %4[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_2 : i32
    cf.cond_br %10, ^bb4, ^bb5
  ^bb2(%11: i32):  // pred: ^bb3
    return %11 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    %13 = arith.andi %12, %c1_i32_3 : i32
    cf.br ^bb2(%13 : i32)
  ^bb4:  // pred: ^bb1
    %c0_i32_4 = arith.constant 0 : i32
    %c1054188_i64 = arith.constant 1054188 : i64
    %14 = arith.extui %c0_i32_4 : i32 to i64
    %15 = arith.addi %14, %c1054188_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i8
    %18 = arith.extui %17 : i8 to i32
    llvm.store %18, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %c0_i32_5 = arith.constant 0 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %c1054192_i64_7 = arith.constant 1054192 : i64
    %19 = arith.extui %c0_i32_5 : i32 to i64
    %20 = arith.addi %19, %c1054192_i64_7 : i64
    %21 = llvm.getelementptr %4[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = arith.trunci %c1_i32_6 : i32 to i8
    llvm.store volatile %22, %21 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    %23 = call @f39(%arg0) : (!llvm.ptr) -> i32
    llvm.store %23, %1 : i32, !llvm.ptr
    %c1054188_i64_9 = arith.constant 1054188 : i64
    %24 = arith.extui %c0_i32_8 : i32 to i64
    %25 = arith.addi %24, %c1054188_i64_9 : i64
    %26 = llvm.getelementptr %4[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = arith.trunci %23 : i32 to i8
    llvm.store volatile %27, %26 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f54(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %3 : i64, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %19 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %20 = arith.subi %19, %c32_i32 : i32
    llvm.store %20, %2 : i32, !llvm.ptr
    llvm.store %20, %8 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1054180_i64 = arith.constant 1054180 : i64
    %21 = arith.extui %c0_i32_6 : i32 to i64
    %22 = arith.addi %21, %c1054180_i64 : i64
    %23 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i8
    %25 = arith.extui %24 : i8 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_7 : i32
    cf.cond_br %26, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb12
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_8 = arith.constant 32 : i32
    %28 = arith.addi %27, %c32_i32_8 : i32
    llvm.store %28, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %30 = arith.addi %29, %c24_i32 : i32
    %c0_i32_9 = arith.constant 0 : i32
    %c1054168_i64 = arith.constant 1054168 : i64
    %31 = arith.extui %c0_i32_9 : i32 to i64
    %32 = arith.addi %31, %c1054168_i64 : i64
    %33 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    %35 = arith.extui %30 : i32 to i64
    %36 = arith.addi %35, %c0_i64_10 : i64
    %37 = llvm.getelementptr %11[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %34, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %39 = arith.addi %38, %c16_i32 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %c1054160_i64 = arith.constant 1054160 : i64
    %40 = arith.extui %c0_i32_11 : i32 to i64
    %41 = arith.addi %40, %c1054160_i64 : i64
    %42 = llvm.getelementptr %11[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    %44 = arith.extui %39 : i32 to i64
    %45 = arith.addi %44, %c0_i64_12 : i64
    %46 = llvm.getelementptr %11[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %43, %46 {alignment = 1 : i64} : i64, !llvm.ptr
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %c1054152_i64 = arith.constant 1054152 : i64
    %49 = arith.extui %c0_i32_13 : i32 to i64
    %50 = arith.addi %49, %c1054152_i64 : i64
    %51 = llvm.getelementptr %11[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_14 = arith.constant 0 : i64
    %53 = arith.extui %48 : i32 to i64
    %54 = arith.addi %53, %c0_i64_14 : i64
    %55 = llvm.getelementptr %11[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c1054144_i64 = arith.constant 1054144 : i64
    %57 = arith.extui %c0_i32_15 : i32 to i64
    %58 = arith.addi %57, %c1054144_i64 : i64
    %59 = llvm.getelementptr %11[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %61 = arith.extui %56 : i32 to i64
    %62 = arith.addi %61, %c0_i64_16 : i64
    %63 = llvm.getelementptr %11[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %c1054176_i64 = arith.constant 1054176 : i64
    %65 = arith.extui %c0_i32_17 : i32 to i64
    %66 = arith.addi %65, %c1054176_i64 : i64
    %67 = llvm.getelementptr %11[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    %69 = arith.cmpi ult, %68, %18 : i32
    cf.cond_br %69, ^bb6, ^bb7
  ^bb6:  // 2 preds: ^bb5, ^bb7
    %70 = llvm.getelementptr inbounds %16[%68] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    %72 = llvm.ptrtoint %71 : !llvm.ptr to i64
    %c0_i64_18 = arith.constant 0 : i64
    %73 = arith.cmpi eq, %72, %c0_i64_18 : i64
    cf.cond_br %73, ^bb9, ^bb8
  ^bb7:  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %74 = llvm.getelementptr %71[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %75 = llvm.getelementptr %71[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %76 = llvm.getelementptr %71[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %77 = llvm.load %74 : !llvm.ptr -> !llvm.ptr
    %78 = llvm.load %76 : !llvm.ptr -> !llvm.ptr
    %79 = llvm.ptrtoint %77 : !llvm.ptr to i64
    %c0_i64_19 = arith.constant 0 : i64
    %80 = arith.cmpi eq, %79, %c0_i64_19 : i64
    cf.cond_br %80, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %81 = llvm.load %75 : !llvm.ptr -> i32
    %82 = arith.cmpi ne, %13, %81 : i32
    cf.cond_br %82, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_20 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_20) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %83 = llvm.call %77(%78, %64) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %c0_i32_21 = arith.constant 0 : i32
    %c1_i32_22 = arith.constant 1 : i32
    %c1054180_i64_23 = arith.constant 1054180 : i64
    %84 = arith.extui %c0_i32_21 : i32 to i64
    %85 = arith.addi %84, %c1054180_i64_23 : i64
    %86 = llvm.getelementptr %11[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = arith.trunci %c1_i32_22 : i32 to i8
    llvm.store volatile %87, %86 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_25 = arith.constant 24 : i32
    %89 = arith.addi %88, %c24_i32_25 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c0_i64_26 : i64
    %92 = llvm.getelementptr %11[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %93, %3 : i64, !llvm.ptr
    %c1054168_i64_27 = arith.constant 1054168 : i64
    %94 = arith.extui %c0_i32_24 : i32 to i64
    %95 = arith.addi %94, %c1054168_i64_27 : i64
    %96 = llvm.getelementptr %11[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %96 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_29 = arith.constant 16 : i32
    %98 = arith.addi %97, %c16_i32_29 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c0_i64_30 : i64
    %101 = llvm.getelementptr %11[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %102, %4 : i64, !llvm.ptr
    %c1054160_i64_31 = arith.constant 1054160 : i64
    %103 = arith.extui %c0_i32_28 : i32 to i64
    %104 = arith.addi %103, %c1054160_i64_31 : i64
    %105 = llvm.getelementptr %11[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %102, %105 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_33 = arith.constant 8 : i32
    %107 = arith.addi %106, %c8_i32_33 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c0_i64_34 : i64
    %110 = llvm.getelementptr %11[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %111, %5 : i64, !llvm.ptr
    %c1054152_i64_35 = arith.constant 1054152 : i64
    %112 = arith.extui %c0_i32_32 : i32 to i64
    %113 = arith.addi %112, %c1054152_i64_35 : i64
    %114 = llvm.getelementptr %11[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %111, %114 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_36 = arith.constant 0 : i32
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c0_i64_37 : i64
    %118 = llvm.getelementptr %11[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %119, %6 : i64, !llvm.ptr
    %c1054144_i64_38 = arith.constant 1054144 : i64
    %120 = arith.extui %c0_i32_36 : i32 to i64
    %121 = arith.addi %120, %c1054144_i64_38 : i64
    %122 = llvm.getelementptr %11[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %119, %122 {alignment = 1 : i64} : i64, !llvm.ptr
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %124 = llvm.load %6 : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %125 = arith.extui %123 : i32 to i64
    %126 = arith.addi %125, %c0_i64_39 : i64
    %127 = llvm.getelementptr %11[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %124, %127 {alignment = 1 : i64} : i64, !llvm.ptr
    %128 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_40 = arith.constant 8 : i32
    %129 = arith.addi %128, %c8_i32_40 : i32
    %130 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %131 = arith.extui %129 : i32 to i64
    %132 = arith.addi %131, %c0_i64_41 : i64
    %133 = llvm.getelementptr %11[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %133 {alignment = 1 : i64} : i64, !llvm.ptr
    %134 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_42 = arith.constant 16 : i32
    %135 = arith.addi %134, %c16_i32_42 : i32
    %136 = llvm.load %4 : !llvm.ptr -> i64
    %c0_i64_43 = arith.constant 0 : i64
    %137 = arith.extui %135 : i32 to i64
    %138 = arith.addi %137, %c0_i64_43 : i64
    %139 = llvm.getelementptr %11[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %139 {alignment = 1 : i64} : i64, !llvm.ptr
    %140 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_44 = arith.constant 24 : i32
    %141 = arith.addi %140, %c24_i32_44 : i32
    %142 = llvm.load %3 : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    %143 = arith.extui %141 : i32 to i64
    %144 = arith.addi %143, %c0_i64_45 : i64
    %145 = llvm.getelementptr %11[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %142, %145 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func @f55(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1050064_i32 = arith.constant 1050064 : i32
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = call @f59(%arg0, %c1050064_i32, %2, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f56(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f57(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1050064_i32 = arith.constant 1050064 : i32
    %4 = llvm.load %2 : !llvm.ptr -> i32
    %5 = llvm.load %3 : !llvm.ptr -> i32
    %6 = call @f59(%arg0, %c1050064_i32, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %6, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi eq, %6, %c0_i32 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32_3 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: i32):  // pred: ^bb3
    return %10 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%11 : i32)
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %2 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = arith.cmpi ult, %16, %17 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_4 : i32
    %21 = arith.select %20, %14, %15 : i32
    %22 = call @f187(%arg0, %12, %13, %21) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3
  }
  func.func @f58(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[160] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %1[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.call %3(%5) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f59(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %3 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1054196_i64 = arith.constant 1054196 : i64
    %9 = arith.extui %c0_i32_6 : i32 to i64
    %10 = arith.addi %9, %c1054196_i64 : i64
    %11 = llvm.getelementptr %8[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load volatile %11 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %12, %4 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_7 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: i32):  // pred: ^bb5
    return %14 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %15 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = arith.subi %c0_i32_8, %16 : i32
    %18 = arith.andi %15, %17 : i32
    llvm.store %18, %4 : i32, !llvm.ptr
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %20 = arith.cmpi ult, %18, %19 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_9 : i32
    cf.cond_br %22, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c0_i32_10 = arith.constant 0 : i32
    %23 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    llvm.store %23, %5 : i32, !llvm.ptr
    %c0_i32_11 = arith.constant 0 : i32
    %c0_i32_12 = arith.constant 0 : i32
    %c1054240_i32 = arith.constant 1054240 : i32
    %24 = arith.subi %c0_i32_12, %c1054240_i32 : i32
    llvm.store %24, %4 : i32, !llvm.ptr
    %c1054196_i64_13 = arith.constant 1054196 : i64
    %25 = arith.extui %c0_i32_11 : i32 to i64
    %26 = arith.addi %25, %c1054196_i64_13 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %c1_i32_15 = arith.constant 1 : i32
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32 = arith.constant 31 : i32
    %29 = arith.cmpi ule, %c16_i32, %c31_i32 : i32
    %30 = scf.if %29 -> (i32) {
      %81 = arith.shli %28, %c16_i32 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_38 = arith.constant 0 : i32
      scf.yield %c0_i32_38 : i32
    }
    %31 = arith.subi %c1_i32_15, %30 : i32
    %c1054200_i64 = arith.constant 1054200 : i64
    %32 = arith.extui %c0_i32_14 : i32 to i64
    %33 = arith.addi %32, %c1054200_i64 : i64
    %34 = llvm.getelementptr %8[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb7, ^bb8
    %35 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb2(%35 : i32)
  ^bb6:  // pred: ^bb3
    %c0_i32_16 = arith.constant 0 : i32
    llvm.store %c0_i32_16, %3 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %c1054200_i64_18 = arith.constant 1054200 : i64
    %36 = arith.extui %c0_i32_17 : i32 to i64
    %37 = arith.addi %36, %c1054200_i64_18 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %39, %1 : i32, !llvm.ptr
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %42 = arith.subi %40, %41 : i32
    llvm.store %42, %2 : i32, !llvm.ptr
    %c1_i32_19 = arith.constant 1 : i32
    %43 = arith.addi %42, %c1_i32_19 : i32
    llvm.store %43, %5 : i32, !llvm.ptr
    %44 = arith.cmpi ule, %39, %43 : i32
    %45 = arith.extui %44 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_20 : i32
    cf.cond_br %46, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb9
    %c0_i32_21 = arith.constant 0 : i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c1054196_i64_22 = arith.constant 1054196 : i64
    %48 = arith.extui %c0_i32_21 : i32 to i64
    %49 = arith.addi %48, %c1054196_i64_22 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_23 = arith.constant 0 : i32
    %51 = llvm.load %4 : !llvm.ptr -> i32
    %52 = arith.subi %c0_i32_23, %51 : i32
    llvm.store %52, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb6
    %c0_i32_24 = arith.constant 0 : i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %54 = llvm.load %5 : !llvm.ptr -> i32
    %55 = arith.subi %53, %54 : i32
    llvm.store %55, %5 : i32, !llvm.ptr
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = arith.cmpi ugt, %56, %57 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_25 : i32
    %61 = arith.select %60, %c0_i32_24, %55 : i32
    %c-1_i32 = arith.constant -1 : i32
    %62 = arith.addi %61, %c-1_i32 : i32
    %c16_i32_26 = arith.constant 16 : i32
    %c31_i32_27 = arith.constant 31 : i32
    %63 = arith.cmpi ule, %c16_i32_26, %c31_i32_27 : i32
    %64 = scf.if %63 -> (i32) {
      %81 = arith.shrui %62, %c16_i32_26 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_38 = arith.constant 0 : i32
      scf.yield %c0_i32_38 : i32
    }
    %c1_i32_28 = arith.constant 1 : i32
    %65 = arith.addi %64, %c1_i32_28 : i32
    llvm.store %65, %1 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    %66 = call @dora_fn_wasm_memory_grow(%arg0, %65, %c0_i32_29) : (!llvm.ptr, i32, i32) -> i32
    %c-1_i32_30 = arith.constant -1 : i32
    %67 = arith.cmpi eq, %66, %c-1_i32_30 : i32
    %68 = arith.extui %67 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_31 : i32
    cf.cond_br %69, ^bb5, ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i32_32 = arith.constant 0 : i32
    %c0_i32_33 = arith.constant 0 : i32
    %c1054200_i64_34 = arith.constant 1054200 : i64
    %70 = arith.extui %c0_i32_33 : i32 to i64
    %71 = arith.addi %70, %c1054200_i64_34 : i64
    %72 = llvm.getelementptr %8[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_35 = arith.constant 16 : i32
    %c31_i32_36 = arith.constant 31 : i32
    %75 = arith.cmpi ule, %c16_i32_35, %c31_i32_36 : i32
    %76 = scf.if %75 -> (i32) {
      %81 = arith.shli %74, %c16_i32_35 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_38 = arith.constant 0 : i32
      scf.yield %c0_i32_38 : i32
    }
    %77 = arith.subi %73, %76 : i32
    %c1054200_i64_37 = arith.constant 1054200 : i64
    %78 = arith.extui %c0_i32_32 : i32 to i64
    %79 = arith.addi %78, %c1054200_i64_37 : i64
    %80 = llvm.getelementptr %8[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %80 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  }
  func.func @f60(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %11 = arith.subi %10, %c16_i32 : i32
    llvm.store %11, %2 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c12_i64 : i64
    %16 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %22, %3 : i32, !llvm.ptr
    %23 = arith.subi %17, %22 : i32
    llvm.store %23, %4 : i32, !llvm.ptr
    call @f96(%arg0, %12, %23) : (!llvm.ptr, i32, i32) -> ()
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_4 = arith.constant 4 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c4_i64_4 : i64
    %27 = llvm.getelementptr %9[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c8_i64 : i64
    %32 = llvm.getelementptr %9[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    %34 = arith.addi %28, %33 : i32
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %36 = llvm.load %4 : !llvm.ptr -> i32
    %37 = call @f187(%arg0, %34, %35, %36) : (!llvm.ptr, i32, i32, i32) -> i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_5 = arith.constant 12 : i64
    %40 = arith.extui %38 : i32 to i64
    %41 = arith.addi %40, %c12_i64_5 : i64
    %42 = llvm.getelementptr %9[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_6 = arith.constant 8 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c8_i64_6 : i64
    %47 = llvm.getelementptr %9[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i32
    %49 = llvm.load %4 : !llvm.ptr -> i32
    %50 = arith.addi %48, %49 : i32
    %c8_i64_7 = arith.constant 8 : i64
    %51 = arith.extui %43 : i32 to i64
    %52 = arith.addi %51, %c8_i64_7 : i64
    %53 = llvm.getelementptr %9[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_8 = arith.constant 12 : i64
    %60 = arith.extui %54 : i32 to i64
    %61 = arith.addi %60, %c12_i64_8 : i64
    %62 = llvm.getelementptr %9[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %62 {alignment = 1 : i64} : i32, !llvm.ptr
    %63 = llvm.load %2 : !llvm.ptr -> i32
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_9 = arith.constant 8 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c8_i64_9 : i64
    %67 = llvm.getelementptr %9[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c8_i64_10 = arith.constant 8 : i64
    %69 = arith.extui %63 : i32 to i64
    %70 = arith.addi %69, %c8_i64_10 : i64
    %71 = llvm.getelementptr %9[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %73 = arith.addi %72, %c8_i32 : i32
    call @f104(%arg0, %73) : (!llvm.ptr, i32) -> ()
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_11 = arith.constant 16 : i32
    %75 = arith.addi %74, %c16_i32_11 : i32
    llvm.store %75, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f61(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %5 = arith.addi %4, %c4_i32 : i32
    call @f94(%arg0, %2, %3, %5) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f62(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %c0_i64_0 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64_0 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %7 {alignment = 1 : i64} : i64, !llvm.ptr
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i64 = arith.constant -1 : i64
    %c40_i64 = arith.constant 40 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c40_i64 : i64
    %11 = llvm.getelementptr %3[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-1_i64, %11 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f63(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %11 = arith.subi %10, %c16_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %15 {alignment = 1 : i64} : i64, !llvm.ptr
    %16 = llvm.load %3 : !llvm.ptr -> i32
    %c30768_i32 = arith.constant 30768 : i32
    %c6_i64 = arith.constant 6 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c6_i64 : i64
    %19 = llvm.getelementptr %9[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = arith.trunci %c30768_i32 : i32 to i16
    llvm.store volatile %20, %19 {alignment = 1 : i64} : i16, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32 : i32
    llvm.store %23, %4 : i32, !llvm.ptr
    call @f91(%arg0, %21, %c4_i32, %23) : (!llvm.ptr, i32, i32, i32) -> ()
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %26 = arith.addi %25, %c6_i32 : i32
    %27 = llvm.load %4 : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_4 : i32
    %30 = arith.select %29, %26, %27 : i32
    %c10_i32 = arith.constant 10 : i32
    %c8_i32_5 = arith.constant 8 : i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_6 : i32
    %33 = arith.select %32, %c10_i32, %c8_i32_5 : i32
    %34 = call @f170(%arg0, %24, %30, %33) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %34, %2 : i32, !llvm.ptr
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_7 = arith.constant 16 : i32
    %36 = arith.addi %35, %c16_i32_7 : i32
    llvm.store %36, %6 : i32, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%37 : i32)
  ^bb2(%38: i32):  // pred: ^bb1
    return %38 : i32
  }
  func.func @f64(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %0 : i32, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c4_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c8_i64 : i64
    %17 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %20 = call @f176(%arg0, %13, %18, %19) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%20 : i32)
  ^bb2(%21: i32):  // pred: ^bb1
    return %21 : i32
  }
  func.func @f65(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %10 = arith.subi %9, %c80_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %0 : i32, !llvm.ptr
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %17 = arith.addi %16, %c16_i32 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %c64_i32 = arith.constant 64 : i32
    %18 = call @f186(%arg0, %17, %c0_i32_3, %c64_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c30768_i32 = arith.constant 30768 : i32
    %c14_i64 = arith.constant 14 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c14_i64 : i64
    %22 = llvm.getelementptr %8[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = arith.trunci %c30768_i32 : i32 to i16
    llvm.store volatile %23, %22 {alignment = 1 : i64} : i16, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %25 = llvm.load %3 : !llvm.ptr -> i32
    call @f91(%arg0, %24, %c32_i32, %25) : (!llvm.ptr, i32, i32, i32) -> ()
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c14_i32 = arith.constant 14 : i32
    %28 = arith.addi %27, %c14_i32 : i32
    %c66_i32 = arith.constant 66 : i32
    %29 = call @f170(%arg0, %26, %28, %c66_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %29, %0 : i32, !llvm.ptr
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_4 = arith.constant 80 : i32
    %31 = arith.addi %30, %c80_i32_4 : i32
    llvm.store %31, %5 : i32, !llvm.ptr
    %32 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%32 : i32)
  ^bb2(%33: i32):  // pred: ^bb1
    return %33 : i32
  }
  func.func @f66(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %7[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_2 = arith.constant 0 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c0_i64_2 : i64
    %18 = llvm.getelementptr %7[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %19, %0 : i32, !llvm.ptr
    %c12_i32 = arith.constant 12 : i32
    %20 = arith.addi %19, %c12_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %21 = arith.extui %10 : i32 to i64
    %22 = arith.addi %21, %c12_i64 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %20, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c1050112_i32 = arith.constant 1050112 : i32
    %c7_i32 = arith.constant 7 : i32
    %c1050119_i32 = arith.constant 1050119 : i32
    %c6_i32 = arith.constant 6 : i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c1050080_i32 = arith.constant 1050080 : i32
    %c1050125_i32 = arith.constant 1050125 : i32
    %c4_i32 = arith.constant 4 : i32
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_3 = arith.constant 12 : i32
    %27 = arith.addi %26, %c12_i32_3 : i32
    %c1050096_i32 = arith.constant 1050096 : i32
    %28 = call @f172(%arg0, %24, %c1050112_i32, %c7_i32, %c1050119_i32, %c6_i32, %25, %c1050080_i32, %c1050125_i32, %c4_i32, %27, %c1050096_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %28, %0 : i32, !llvm.ptr
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %30 = arith.addi %29, %c16_i32_4 : i32
    llvm.store %30, %4 : i32, !llvm.ptr
    %31 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%31 : i32)
  ^bb2(%32: i32):  // pred: ^bb1
    return %32 : i32
  }
  func.func @f67(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %11 = call @f92(%arg0, %9, %10) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%11 : i32)
  ^bb2(%12: i32):  // pred: ^bb1
    return %12 : i32
  }
  func.func @f68(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %3 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %12 = arith.addi %11, %c4_i32 : i32
    %13 = llvm.load %2 : !llvm.ptr -> i32
    call @f175(%arg0, %12, %13) : (!llvm.ptr, i32, i32) -> ()
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_3 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2(%18: i32):  // pred: ^bb3
    return %18 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb5
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_5 = arith.constant 4 : i32
    %20 = arith.addi %19, %c4_i32_5 : i32
    %21 = call @f165(%arg0, %20) : (!llvm.ptr, i32) -> i32
    llvm.store %21, %0 : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_6 = arith.constant 16 : i32
    %23 = arith.addi %22, %c16_i32_6 : i32
    llvm.store %23, %5 : i32, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%24 : i32)
  ^bb4:  // pred: ^bb1
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32 = arith.constant 31 : i32
    %26 = arith.cmpi ule, %c5_i32, %c31_i32 : i32
    %27 = scf.if %26 -> (i32) {
      %43 = arith.shli %25, %c5_i32 : i32
      scf.yield %43 : i32
    } else {
      %c0_i32_9 = arith.constant 0 : i32
      scf.yield %c0_i32_9 : i32
    }
    llvm.store %27, %1 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c12_i64 : i64
    %32 = llvm.getelementptr %8[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %33 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_7 = arith.constant 4 : i32
    %34 = arith.addi %33, %c4_i32_7 : i32
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %36 = arith.addi %35, %c12_i32 : i32
    %c1050064_i32 = arith.constant 1050064 : i32
    %37 = call @f164(%arg0, %34, %36, %c1050064_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %39 = arith.addi %38, %c32_i32 : i32
    llvm.store %39, %0 : i32, !llvm.ptr
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %41 = arith.addi %40, %c-32_i32 : i32
    llvm.store %41, %1 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_8 : i32
    cf.cond_br %42, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func @f69(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_0 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f101(%arg0, %1, %c1_i32_0, %c32_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f70(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi eq, %3, %c0_i32 : i32
    %5 = arith.extui %4 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32_2 : i32
    cf.cond_br %6, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %8 = llvm.load %2 : !llvm.ptr -> i32
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %10 = call @f186(%arg0, %7, %8, %9) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3
  }
  func.func @f71(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %5[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c8_i64 : i64
    %14 = llvm.getelementptr %5[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = arith.subi %10, %15 : i32
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = arith.cmpi uge, %16, %17 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_2 : i32
    cf.cond_br %20, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f95(%arg0, %21, %22, %23, %c1_i32_3, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f72(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c4_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c4_i64_1 = arith.constant 4 : i64
    %11 = arith.extui %5 : i32 to i64
    %12 = arith.addi %11, %c4_i64_1 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i32, !llvm.ptr
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c8_i64 : i64
    %18 = llvm.getelementptr %4[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32 = arith.constant 31 : i32
    %20 = arith.cmpi ule, %c5_i32, %c31_i32 : i32
    %21 = scf.if %20 -> (i32) {
      %36 = arith.shli %19, %c5_i32 : i32
      scf.yield %36 : i32
    } else {
      %c0_i32 = arith.constant 0 : i32
      scf.yield %c0_i32 : i32
    }
    %c8_i64_2 = arith.constant 8 : i64
    %22 = arith.extui %14 : i32 to i64
    %23 = arith.addi %22, %c8_i64_2 : i64
    %24 = llvm.getelementptr %4[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %24 {alignment = 1 : i64} : i32, !llvm.ptr
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c0_i64 : i64
    %29 = llvm.getelementptr %4[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c5_i32_3 = arith.constant 5 : i32
    %c31_i32_4 = arith.constant 31 : i32
    %31 = arith.cmpi ule, %c5_i32_3, %c31_i32_4 : i32
    %32 = scf.if %31 -> (i32) {
      %36 = arith.shli %30, %c5_i32_3 : i32
      scf.yield %36 : i32
    } else {
      %c0_i32 = arith.constant 0 : i32
      scf.yield %c0_i32 : i32
    }
    %c0_i64_5 = arith.constant 0 : i64
    %33 = arith.extui %25 : i32 to i64
    %34 = arith.addi %33, %c0_i64_5 : i64
    %35 = llvm.getelementptr %4[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f73(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %8 = arith.subi %7, %c16_i32 : i32
    llvm.store %8, %1 : i32, !llvm.ptr
    llvm.store %8, %3 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %10 = arith.addi %9, %c8_i32 : i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %c4_i32 = arith.constant 4 : i32
    %c4_i32_2 = arith.constant 4 : i32
    call @f98(%arg0, %10, %11, %16, %c1_i32_1, %c4_i32, %c4_i32_2) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> ()
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c8_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %0 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %22 = arith.cmpi eq, %21, %c-2147483647_i32 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_3 : i32
    cf.cond_br %24, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %26 = arith.addi %25, %c16_i32_4 : i32
    llvm.store %26, %3 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c12_i64 : i64
    %31 = llvm.getelementptr %6[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %27, %32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f74(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %8 = arith.subi %7, %c16_i32 : i32
    llvm.store %8, %1 : i32, !llvm.ptr
    llvm.store %8, %3 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %10 = arith.addi %9, %c8_i32 : i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f98(%arg0, %10, %11, %16, %c1_i32_1, %c1_i32_2, %c32_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> ()
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c8_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %0 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %22 = arith.cmpi eq, %21, %c-2147483647_i32 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_3 : i32
    cf.cond_br %24, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %26 = arith.addi %25, %c16_i32_4 : i32
    llvm.store %26, %3 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c12_i64 : i64
    %31 = llvm.getelementptr %6[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %27, %32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f75(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c4_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c8_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %16 = call @f176(%arg0, %9, %14, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f76(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c4_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c8_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %16 = call @f68(%arg0, %9, %14, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f77(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f78(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c4_i32_0 = arith.constant 4 : i32
    call @f101(%arg0, %1, %c4_i32, %c4_i32_0) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f79(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_0 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    call @f101(%arg0, %1, %c1_i32_0, %c32_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f80(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %13 = arith.subi %12, %c16_i32 : i32
    llvm.store %13, %3 : i32, !llvm.ptr
    llvm.store %13, %8 : i32, !llvm.ptr
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %15 = arith.addi %14, %c4_i32 : i32
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %17 = arith.cmpi ule, %c1_i32_6, %c31_i32 : i32
    %18 = scf.if %17 -> (i32) {
      %64 = arith.shli %16, %c1_i32_6 : i32
      scf.yield %64 : i32
    } else {
      %c0_i32_17 = arith.constant 0 : i32
      scf.yield %c0_i32_17 : i32
    }
    llvm.store %18, %4 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %c1_i32_8 = arith.constant 1 : i32
    %c1_i32_9 = arith.constant 1 : i32
    call @f102(%arg0, %15, %18, %c0_i32_7, %c1_i32_8, %c1_i32_9) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c8_i64 : i64
    %22 = llvm.getelementptr %11[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %23, %5 : i32, !llvm.ptr
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c4_i64 : i64
    %27 = llvm.getelementptr %11[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_10 = arith.constant 1 : i32
    %29 = arith.cmpi eq, %28, %c1_i32_10 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %31 = arith.cmpi eq, %30, %c0_i32_11 : i32
    %32 = arith.extui %31 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %33 = arith.cmpi ne, %32, %c0_i32_12 : i32
    cf.cond_br %33, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c12_i64 : i64
    %39 = llvm.getelementptr %11[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %40, %6 : i32, !llvm.ptr
    call @f91(%arg0, %34, %35, %40) : (!llvm.ptr, i32, i32, i32) -> ()
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %42 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_13 = arith.constant 8 : i64
    %43 = arith.extui %41 : i32 to i64
    %44 = arith.addi %43, %c8_i64_13 : i64
    %45 = llvm.getelementptr %11[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %42, %45 {alignment = 1 : i64} : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %6 : !llvm.ptr -> i32
    %c4_i64_14 = arith.constant 4 : i64
    %48 = arith.extui %46 : i32 to i64
    %49 = arith.addi %48, %c4_i64_14 : i64
    %50 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i32, !llvm.ptr
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %52 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %53 = arith.extui %51 : i32 to i64
    %54 = arith.addi %53, %c0_i64 : i64
    %55 = llvm.getelementptr %11[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i32, !llvm.ptr
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_15 = arith.constant 16 : i32
    %57 = arith.addi %56, %c16_i32_15 : i32
    llvm.store %57, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %58 = llvm.load %5 : !llvm.ptr -> i32
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_16 = arith.constant 12 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c12_i64_16 : i64
    %62 = llvm.getelementptr %11[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %58, %63) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f81(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %10 = llvm.load %2 : !llvm.ptr -> i32
    call @f80(%arg0, %8, %9, %10) : (!llvm.ptr, i32, i32, i32) -> ()
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %12 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %13 = arith.extui %11 : i32 to i64
    %14 = arith.addi %13, %c20_i64 : i64
    %15 = llvm.getelementptr %7[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %12, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %18 = arith.extui %16 : i32 to i64
    %19 = arith.addi %18, %c16_i64 : i64
    %20 = llvm.getelementptr %7[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %17, %20 {alignment = 1 : i64} : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c12_i64 = arith.constant 12 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c12_i64 : i64
    %24 = llvm.getelementptr %7[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %24 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f82(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %15 = llvm.load %11 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %16 = arith.subi %15, %c80_i32 : i32
    llvm.store %16, %2 : i32, !llvm.ptr
    llvm.store %16, %11 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c20_i64 : i64
    %20 = llvm.getelementptr %14[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %3 : i32, !llvm.ptr
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %14[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = arith.cmpi eq, %21, %26 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_9 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_10 : i32
    cf.cond_br %31, ^bb3, ^bb4
  ^bb2:  // pred: ^bb16
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %32 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c16_i64 : i64
    %35 = llvm.getelementptr %14[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %37 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %38 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %39 = scf.if %38 -> (i32) {
      %492 = arith.shli %37, %c2_i32 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    llvm.store %39, %4 : i32, !llvm.ptr
    %40 = arith.addi %36, %39 : i32
    %c32_i32 = arith.constant 32 : i32
    %c0_i64 = arith.constant 0 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c0_i64 : i64
    %43 = llvm.getelementptr %14[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %46 = arith.addi %45, %c1_i32_11 : i32
    %c20_i64_12 = arith.constant 20 : i64
    %47 = arith.extui %44 : i32 to i64
    %48 = arith.addi %47, %c20_i64_12 : i64
    %49 = llvm.getelementptr %14[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %46, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    %50 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_13 = arith.constant 16 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c16_i64_13 : i64
    %53 = llvm.getelementptr %14[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    %55 = llvm.load %4 : !llvm.ptr -> i32
    %56 = arith.addi %54, %55 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c0_i64_14 : i64
    %59 = llvm.getelementptr %14[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %60, %3 : i32, !llvm.ptr
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %62 = arith.addi %61, %c40_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %63 = arith.addi %62, %c24_i32 : i32
    llvm.store %63, %4 : i32, !llvm.ptr
    %c0_i64_15 = arith.constant 0 : i64
    %c0_i64_16 = arith.constant 0 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c0_i64_16 : i64
    %66 = llvm.getelementptr %14[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_15, %66 {alignment = 1 : i64} : i64, !llvm.ptr
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_17 = arith.constant 40 : i32
    %68 = arith.addi %67, %c40_i32_17 : i32
    %c16_i32 = arith.constant 16 : i32
    %69 = arith.addi %68, %c16_i32 : i32
    llvm.store %69, %5 : i32, !llvm.ptr
    %c0_i64_18 = arith.constant 0 : i64
    %c0_i64_19 = arith.constant 0 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c0_i64_19 : i64
    %72 = llvm.getelementptr %14[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_18, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_20 = arith.constant 40 : i32
    %74 = arith.addi %73, %c40_i32_20 : i32
    %c8_i32 = arith.constant 8 : i32
    %75 = arith.addi %74, %c8_i32 : i32
    llvm.store %75, %6 : i32, !llvm.ptr
    %c0_i64_21 = arith.constant 0 : i64
    %c0_i64_22 = arith.constant 0 : i64
    %76 = arith.extui %75 : i32 to i64
    %77 = arith.addi %76, %c0_i64_22 : i64
    %78 = llvm.getelementptr %14[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_21, %78 {alignment = 1 : i64} : i64, !llvm.ptr
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_23 = arith.constant 0 : i64
    %c40_i64 = arith.constant 40 : i64
    %80 = arith.extui %79 : i32 to i64
    %81 = arith.addi %80, %c40_i64 : i64
    %82 = llvm.getelementptr %14[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_23, %82 {alignment = 1 : i64} : i64, !llvm.ptr
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %84 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_24 = arith.constant 24 : i32
    %c31_i32_25 = arith.constant 31 : i32
    %85 = arith.cmpi ule, %c24_i32_24, %c31_i32_25 : i32
    %86 = scf.if %85 -> (i32) {
      %492 = arith.shli %84, %c24_i32_24 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    %87 = llvm.load %3 : !llvm.ptr -> i32
    %c65280_i32 = arith.constant 65280 : i32
    %88 = arith.andi %87, %c65280_i32 : i32
    %c8_i32_26 = arith.constant 8 : i32
    %c31_i32_27 = arith.constant 31 : i32
    %89 = arith.cmpi ule, %c8_i32_26, %c31_i32_27 : i32
    %90 = scf.if %89 -> (i32) {
      %492 = arith.shli %88, %c8_i32_26 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    %91 = arith.ori %86, %90 : i32
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_28 = arith.constant 8 : i32
    %c31_i32_29 = arith.constant 31 : i32
    %93 = arith.cmpi ule, %c8_i32_28, %c31_i32_29 : i32
    %94 = scf.if %93 -> (i32) {
      %492 = arith.shrui %92, %c8_i32_28 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    %c65280_i32_30 = arith.constant 65280 : i32
    %95 = arith.andi %94, %c65280_i32_30 : i32
    %96 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_31 = arith.constant 24 : i32
    %c31_i32_32 = arith.constant 31 : i32
    %97 = arith.cmpi ule, %c24_i32_31, %c31_i32_32 : i32
    %98 = scf.if %97 -> (i32) {
      %492 = arith.shrui %96, %c24_i32_31 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    %99 = arith.ori %95, %98 : i32
    %100 = arith.ori %91, %99 : i32
    %c76_i64 = arith.constant 76 : i64
    %101 = arith.extui %83 : i32 to i64
    %102 = arith.addi %101, %c76_i64 : i64
    %103 = llvm.getelementptr %14[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %100, %103 {alignment = 1 : i64} : i32, !llvm.ptr
    %104 = llvm.load %2 : !llvm.ptr -> i32
    %c68_i32 = arith.constant 68 : i32
    %105 = arith.addi %104, %c68_i32 : i32
    %c4_i32 = arith.constant 4 : i32
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c76_i32 = arith.constant 76 : i32
    %107 = arith.addi %106, %c76_i32 : i32
    %c4_i32_33 = arith.constant 4 : i32
    %c1050224_i32 = arith.constant 1050224 : i32
    call @f105(%arg0, %105, %c4_i32, %107, %c4_i32_33, %c1050224_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %108 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_34 = arith.constant 8 : i32
    %109 = arith.addi %108, %c8_i32_34 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %110 = arith.addi %109, %c8_i32_35 : i32
    llvm.store %110, %7 : i32, !llvm.ptr
    %111 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c0_i64_36 : i64
    %114 = llvm.getelementptr %14[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %115 = llvm.load volatile %114 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_37 = arith.constant 0 : i64
    %116 = arith.extui %110 : i32 to i64
    %117 = arith.addi %116, %c0_i64_37 : i64
    %118 = llvm.getelementptr %14[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %115, %118 {alignment = 1 : i64} : i64, !llvm.ptr
    %119 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_38 = arith.constant 8 : i32
    %120 = arith.addi %119, %c8_i32_38 : i32
    %c16_i32_39 = arith.constant 16 : i32
    %121 = arith.addi %120, %c16_i32_39 : i32
    llvm.store %121, %6 : i32, !llvm.ptr
    %122 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_40 : i64
    %125 = llvm.getelementptr %14[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %127 = arith.extui %121 : i32 to i64
    %128 = arith.addi %127, %c0_i64_41 : i64
    %129 = llvm.getelementptr %14[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %129 {alignment = 1 : i64} : i64, !llvm.ptr
    %130 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_42 = arith.constant 8 : i32
    %131 = arith.addi %130, %c8_i32_42 : i32
    %c24_i32_43 = arith.constant 24 : i32
    %132 = arith.addi %131, %c24_i32_43 : i32
    llvm.store %132, %5 : i32, !llvm.ptr
    %133 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %134 = arith.extui %133 : i32 to i64
    %135 = arith.addi %134, %c0_i64_44 : i64
    %136 = llvm.getelementptr %14[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = llvm.load volatile %136 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    %138 = arith.extui %132 : i32 to i64
    %139 = arith.addi %138, %c0_i64_45 : i64
    %140 = llvm.getelementptr %14[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %137, %140 {alignment = 1 : i64} : i64, !llvm.ptr
    %141 = llvm.load %2 : !llvm.ptr -> i32
    %142 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_46 = arith.constant 40 : i64
    %143 = arith.extui %142 : i32 to i64
    %144 = arith.addi %143, %c40_i64_46 : i64
    %145 = llvm.getelementptr %14[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %146 = llvm.load volatile %145 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64 = arith.constant 8 : i64
    %147 = arith.extui %141 : i32 to i64
    %148 = arith.addi %147, %c8_i64 : i64
    %149 = llvm.getelementptr %14[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %146, %149 {alignment = 1 : i64} : i64, !llvm.ptr
    %150 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_47 = arith.constant 8 : i64
    %151 = arith.extui %150 : i32 to i64
    %152 = arith.addi %151, %c8_i64_47 : i64
    %153 = llvm.getelementptr %14[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %154, %4 : i32, !llvm.ptr
    %155 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_48 = arith.constant 0 : i64
    %156 = arith.extui %155 : i32 to i64
    %157 = arith.addi %156, %c0_i64_48 : i64
    %158 = llvm.getelementptr %14[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %159 = llvm.load volatile %158 {alignment = 1 : i64} : !llvm.ptr -> i32
    %160 = arith.cmpi eq, %154, %159 : i32
    %161 = arith.extui %160 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %162 = arith.cmpi eq, %161, %c0_i32_49 : i32
    %163 = arith.extui %162 : i1 to i32
    %c0_i32_50 = arith.constant 0 : i32
    %164 = arith.cmpi ne, %163, %c0_i32_50 : i32
    cf.cond_br %164, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %165 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %166 = arith.addi %165, %c12_i32 : i32
    call @f73(%arg0, %166) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %167 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c4_i64 : i64
    %170 = llvm.getelementptr %14[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i32
    %172 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_51 = arith.constant 31 : i32
    %173 = arith.cmpi ule, %c5_i32, %c31_i32_51 : i32
    %174 = scf.if %173 -> (i32) {
      %492 = arith.shli %172, %c5_i32 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    %175 = arith.addi %171, %174 : i32
    llvm.store %175, %3 : i32, !llvm.ptr
    %176 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_52 = arith.constant 8 : i64
    %177 = arith.extui %176 : i32 to i64
    %178 = arith.addi %177, %c8_i64_52 : i64
    %179 = llvm.getelementptr %14[%178] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %180 = llvm.load volatile %179 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_53 = arith.constant 0 : i64
    %181 = arith.extui %175 : i32 to i64
    %182 = arith.addi %181, %c0_i64_53 : i64
    %183 = llvm.getelementptr %14[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %180, %183 {alignment = 1 : i64} : i64, !llvm.ptr
    %184 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_54 = arith.constant 24 : i32
    %185 = arith.addi %184, %c24_i32_54 : i32
    %186 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_55 = arith.constant 0 : i64
    %187 = arith.extui %186 : i32 to i64
    %188 = arith.addi %187, %c0_i64_55 : i64
    %189 = llvm.getelementptr %14[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %190 = llvm.load volatile %189 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_56 = arith.constant 0 : i64
    %191 = arith.extui %185 : i32 to i64
    %192 = arith.addi %191, %c0_i64_56 : i64
    %193 = llvm.getelementptr %14[%192] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %190, %193 {alignment = 1 : i64} : i64, !llvm.ptr
    %194 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_57 = arith.constant 16 : i32
    %195 = arith.addi %194, %c16_i32_57 : i32
    %196 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_58 = arith.constant 0 : i64
    %197 = arith.extui %196 : i32 to i64
    %198 = arith.addi %197, %c0_i64_58 : i64
    %199 = llvm.getelementptr %14[%198] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %200 = llvm.load volatile %199 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_59 = arith.constant 0 : i64
    %201 = arith.extui %195 : i32 to i64
    %202 = arith.addi %201, %c0_i64_59 : i64
    %203 = llvm.getelementptr %14[%202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %200, %203 {alignment = 1 : i64} : i64, !llvm.ptr
    %204 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_60 = arith.constant 8 : i32
    %205 = arith.addi %204, %c8_i32_60 : i32
    %206 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_61 = arith.constant 0 : i64
    %207 = arith.extui %206 : i32 to i64
    %208 = arith.addi %207, %c0_i64_61 : i64
    %209 = llvm.getelementptr %14[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %210 = llvm.load volatile %209 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_62 = arith.constant 0 : i64
    %211 = arith.extui %205 : i32 to i64
    %212 = arith.addi %211, %c0_i64_62 : i64
    %213 = llvm.getelementptr %14[%212] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %210, %213 {alignment = 1 : i64} : i64, !llvm.ptr
    %214 = llvm.load %1 : !llvm.ptr -> i32
    %215 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_63 = arith.constant 1 : i32
    %216 = arith.addi %215, %c1_i32_63 : i32
    llvm.store %216, %4 : i32, !llvm.ptr
    %c8_i64_64 = arith.constant 8 : i64
    %217 = arith.extui %214 : i32 to i64
    %218 = arith.addi %217, %c8_i64_64 : i64
    %219 = llvm.getelementptr %14[%218] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %216, %219 {alignment = 1 : i64} : i32, !llvm.ptr
    %220 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_65 = arith.constant 4 : i64
    %221 = arith.extui %220 : i32 to i64
    %222 = arith.addi %221, %c4_i64_65 : i64
    %223 = llvm.getelementptr %14[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %224 = llvm.load volatile %223 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %224, %3 : i32, !llvm.ptr
    %c31_i32_66 = arith.constant 31 : i32
    %225 = arith.addi %224, %c31_i32_66 : i32
    llvm.store %225, %5 : i32, !llvm.ptr
    %226 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_67 = arith.constant 20 : i64
    %227 = arith.extui %226 : i32 to i64
    %228 = arith.addi %227, %c20_i64_67 : i64
    %229 = llvm.getelementptr %14[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %230 = llvm.load volatile %229 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %230, %6 : i32, !llvm.ptr
    %c0_i32_68 = arith.constant 0 : i32
    %231 = arith.cmpi eq, %230, %c0_i32_68 : i32
    %232 = arith.extui %231 : i1 to i32
    %c0_i32_69 = arith.constant 0 : i32
    %233 = arith.cmpi ne, %232, %c0_i32_69 : i32
    cf.cond_br %233, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %234 = llvm.load %1 : !llvm.ptr -> i32
    call @f74(%arg0, %234) : (!llvm.ptr, i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %235 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_70 = arith.constant 0 : i64
    %236 = arith.extui %235 : i32 to i64
    %237 = arith.addi %236, %c0_i64_70 : i64
    %238 = llvm.getelementptr %14[%237] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %239 = llvm.load volatile %238 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %239, %8 : i32, !llvm.ptr
    %240 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_71 = arith.constant 40 : i32
    %241 = arith.addi %240, %c40_i32_71 : i32
    %c24_i32_72 = arith.constant 24 : i32
    %242 = arith.addi %241, %c24_i32_72 : i32
    llvm.store %242, %0 : i32, !llvm.ptr
    %c0_i64_73 = arith.constant 0 : i64
    %c0_i64_74 = arith.constant 0 : i64
    %243 = arith.extui %242 : i32 to i64
    %244 = arith.addi %243, %c0_i64_74 : i64
    %245 = llvm.getelementptr %14[%244] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_73, %245 {alignment = 1 : i64} : i64, !llvm.ptr
    %246 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_75 = arith.constant 40 : i32
    %247 = arith.addi %246, %c40_i32_75 : i32
    %c16_i32_76 = arith.constant 16 : i32
    %248 = arith.addi %247, %c16_i32_76 : i32
    llvm.store %248, %6 : i32, !llvm.ptr
    %c0_i64_77 = arith.constant 0 : i64
    %c0_i64_78 = arith.constant 0 : i64
    %249 = arith.extui %248 : i32 to i64
    %250 = arith.addi %249, %c0_i64_78 : i64
    %251 = llvm.getelementptr %14[%250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_77, %251 {alignment = 1 : i64} : i64, !llvm.ptr
    %252 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_79 = arith.constant 40 : i32
    %253 = arith.addi %252, %c40_i32_79 : i32
    %c8_i32_80 = arith.constant 8 : i32
    %254 = arith.addi %253, %c8_i32_80 : i32
    llvm.store %254, %7 : i32, !llvm.ptr
    %c0_i64_81 = arith.constant 0 : i64
    %c0_i64_82 = arith.constant 0 : i64
    %255 = arith.extui %254 : i32 to i64
    %256 = arith.addi %255, %c0_i64_82 : i64
    %257 = llvm.getelementptr %14[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_81, %257 {alignment = 1 : i64} : i64, !llvm.ptr
    %258 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_83 = arith.constant 0 : i64
    %c40_i64_84 = arith.constant 40 : i64
    %259 = arith.extui %258 : i32 to i64
    %260 = arith.addi %259, %c40_i64_84 : i64
    %261 = llvm.getelementptr %14[%260] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_83, %261 {alignment = 1 : i64} : i64, !llvm.ptr
    %262 = llvm.load %2 : !llvm.ptr -> i32
    %263 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_85 = arith.constant 24 : i32
    %c31_i32_86 = arith.constant 31 : i32
    %264 = arith.cmpi ule, %c24_i32_85, %c31_i32_86 : i32
    %265 = scf.if %264 -> (i32) {
      %492 = arith.shli %263, %c24_i32_85 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    %266 = llvm.load %3 : !llvm.ptr -> i32
    %c65280_i32_87 = arith.constant 65280 : i32
    %267 = arith.andi %266, %c65280_i32_87 : i32
    %c8_i32_88 = arith.constant 8 : i32
    %c31_i32_89 = arith.constant 31 : i32
    %268 = arith.cmpi ule, %c8_i32_88, %c31_i32_89 : i32
    %269 = scf.if %268 -> (i32) {
      %492 = arith.shli %267, %c8_i32_88 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    %270 = arith.ori %265, %269 : i32
    %271 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_90 = arith.constant 8 : i32
    %c31_i32_91 = arith.constant 31 : i32
    %272 = arith.cmpi ule, %c8_i32_90, %c31_i32_91 : i32
    %273 = scf.if %272 -> (i32) {
      %492 = arith.shrui %271, %c8_i32_90 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    %c65280_i32_92 = arith.constant 65280 : i32
    %274 = arith.andi %273, %c65280_i32_92 : i32
    %275 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_93 = arith.constant 24 : i32
    %c31_i32_94 = arith.constant 31 : i32
    %276 = arith.cmpi ule, %c24_i32_93, %c31_i32_94 : i32
    %277 = scf.if %276 -> (i32) {
      %492 = arith.shrui %275, %c24_i32_93 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    %278 = arith.ori %274, %277 : i32
    %279 = arith.ori %270, %278 : i32
    %c76_i64_95 = arith.constant 76 : i64
    %280 = arith.extui %262 : i32 to i64
    %281 = arith.addi %280, %c76_i64_95 : i64
    %282 = llvm.getelementptr %14[%281] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %279, %282 {alignment = 1 : i64} : i32, !llvm.ptr
    %283 = llvm.load %2 : !llvm.ptr -> i32
    %c68_i32_96 = arith.constant 68 : i32
    %284 = arith.addi %283, %c68_i32_96 : i32
    %c4_i32_97 = arith.constant 4 : i32
    %285 = llvm.load %2 : !llvm.ptr -> i32
    %c76_i32_98 = arith.constant 76 : i32
    %286 = arith.addi %285, %c76_i32_98 : i32
    %c4_i32_99 = arith.constant 4 : i32
    %c1050224_i32_100 = arith.constant 1050224 : i32
    call @f105(%arg0, %284, %c4_i32_97, %286, %c4_i32_99, %c1050224_i32_100) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %287 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_101 = arith.constant 8 : i32
    %288 = arith.addi %287, %c8_i32_101 : i32
    %c8_i32_102 = arith.constant 8 : i32
    %289 = arith.addi %288, %c8_i32_102 : i32
    llvm.store %289, %9 : i32, !llvm.ptr
    %290 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_103 = arith.constant 0 : i64
    %291 = arith.extui %290 : i32 to i64
    %292 = arith.addi %291, %c0_i64_103 : i64
    %293 = llvm.getelementptr %14[%292] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %294 = llvm.load volatile %293 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_104 = arith.constant 0 : i64
    %295 = arith.extui %289 : i32 to i64
    %296 = arith.addi %295, %c0_i64_104 : i64
    %297 = llvm.getelementptr %14[%296] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %294, %297 {alignment = 1 : i64} : i64, !llvm.ptr
    %298 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_105 = arith.constant 8 : i32
    %299 = arith.addi %298, %c8_i32_105 : i32
    %c16_i32_106 = arith.constant 16 : i32
    %300 = arith.addi %299, %c16_i32_106 : i32
    llvm.store %300, %7 : i32, !llvm.ptr
    %301 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_107 = arith.constant 0 : i64
    %302 = arith.extui %301 : i32 to i64
    %303 = arith.addi %302, %c0_i64_107 : i64
    %304 = llvm.getelementptr %14[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %305 = llvm.load volatile %304 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_108 = arith.constant 0 : i64
    %306 = arith.extui %300 : i32 to i64
    %307 = arith.addi %306, %c0_i64_108 : i64
    %308 = llvm.getelementptr %14[%307] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %305, %308 {alignment = 1 : i64} : i64, !llvm.ptr
    %309 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_109 = arith.constant 8 : i32
    %310 = arith.addi %309, %c8_i32_109 : i32
    %c24_i32_110 = arith.constant 24 : i32
    %311 = arith.addi %310, %c24_i32_110 : i32
    llvm.store %311, %6 : i32, !llvm.ptr
    %312 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_111 = arith.constant 0 : i64
    %313 = arith.extui %312 : i32 to i64
    %314 = arith.addi %313, %c0_i64_111 : i64
    %315 = llvm.getelementptr %14[%314] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %316 = llvm.load volatile %315 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_112 = arith.constant 0 : i64
    %317 = arith.extui %311 : i32 to i64
    %318 = arith.addi %317, %c0_i64_112 : i64
    %319 = llvm.getelementptr %14[%318] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %316, %319 {alignment = 1 : i64} : i64, !llvm.ptr
    %320 = llvm.load %2 : !llvm.ptr -> i32
    %321 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_113 = arith.constant 40 : i64
    %322 = arith.extui %321 : i32 to i64
    %323 = arith.addi %322, %c40_i64_113 : i64
    %324 = llvm.getelementptr %14[%323] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %325 = llvm.load volatile %324 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_114 = arith.constant 8 : i64
    %326 = arith.extui %320 : i32 to i64
    %327 = arith.addi %326, %c8_i64_114 : i64
    %328 = llvm.getelementptr %14[%327] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %325, %328 {alignment = 1 : i64} : i64, !llvm.ptr
    %329 = llvm.load %4 : !llvm.ptr -> i32
    %330 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_115 = arith.constant 0 : i64
    %331 = arith.extui %330 : i32 to i64
    %332 = arith.addi %331, %c0_i64_115 : i64
    %333 = llvm.getelementptr %14[%332] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %334 = llvm.load volatile %333 {alignment = 1 : i64} : !llvm.ptr -> i32
    %335 = arith.cmpi eq, %329, %334 : i32
    %336 = arith.extui %335 : i1 to i32
    %c0_i32_116 = arith.constant 0 : i32
    %337 = arith.cmpi eq, %336, %c0_i32_116 : i32
    %338 = arith.extui %337 : i1 to i32
    %c0_i32_117 = arith.constant 0 : i32
    %339 = arith.cmpi ne, %338, %c0_i32_117 : i32
    cf.cond_br %339, ^bb9, ^bb10
  ^bb8:  // pred: ^bb5
    %340 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_118 = arith.constant 2 : i32
    %c31_i32_119 = arith.constant 31 : i32
    %341 = arith.cmpi ule, %c2_i32_118, %c31_i32_119 : i32
    %342 = scf.if %341 -> (i32) {
      %492 = arith.shli %340, %c2_i32_118 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    %343 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_120 = arith.constant 16 : i64
    %344 = arith.extui %343 : i32 to i64
    %345 = arith.addi %344, %c16_i64_120 : i64
    %346 = llvm.getelementptr %14[%345] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %347 = llvm.load volatile %346 {alignment = 1 : i64} : !llvm.ptr -> i32
    %348 = arith.addi %342, %347 : i32
    %c-4_i32 = arith.constant -4 : i32
    %349 = arith.addi %348, %c-4_i32 : i32
    llvm.store %349, %4 : i32, !llvm.ptr
    %350 = llvm.load %5 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %351 = arith.andi %350, %c-32_i32 : i32
    %352 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_121 = arith.constant 0 : i64
    %353 = arith.extui %352 : i32 to i64
    %354 = arith.addi %353, %c0_i64_121 : i64
    %355 = llvm.getelementptr %14[%354] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %356 = llvm.load volatile %355 {alignment = 1 : i64} : !llvm.ptr -> i32
    %357 = arith.addi %351, %356 : i32
    %c32_i32_122 = arith.constant 32 : i32
    %358 = arith.addi %357, %c32_i32_122 : i32
    %c0_i64_123 = arith.constant 0 : i64
    %359 = arith.extui %349 : i32 to i64
    %360 = arith.addi %359, %c0_i64_123 : i64
    %361 = llvm.getelementptr %14[%360] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %358, %361 {alignment = 1 : i64} : i32, !llvm.ptr
    %362 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_124 = arith.constant 8 : i64
    %363 = arith.extui %362 : i32 to i64
    %364 = arith.addi %363, %c8_i64_124 : i64
    %365 = llvm.getelementptr %14[%364] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %366 = llvm.load volatile %365 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %366, %4 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %367 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_125 = arith.constant 4 : i64
    %368 = arith.extui %367 : i32 to i64
    %369 = arith.addi %368, %c4_i64_125 : i64
    %370 = llvm.getelementptr %14[%369] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %371 = llvm.load volatile %370 {alignment = 1 : i64} : !llvm.ptr -> i32
    %372 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32_126 = arith.constant 5 : i32
    %c31_i32_127 = arith.constant 31 : i32
    %373 = arith.cmpi ule, %c5_i32_126, %c31_i32_127 : i32
    %374 = scf.if %373 -> (i32) {
      %492 = arith.shli %372, %c5_i32_126 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    %375 = arith.addi %371, %374 : i32
    llvm.store %375, %0 : i32, !llvm.ptr
    %376 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_128 = arith.constant 8 : i64
    %377 = arith.extui %376 : i32 to i64
    %378 = arith.addi %377, %c8_i64_128 : i64
    %379 = llvm.getelementptr %14[%378] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %380 = llvm.load volatile %379 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_129 = arith.constant 0 : i64
    %381 = arith.extui %375 : i32 to i64
    %382 = arith.addi %381, %c0_i64_129 : i64
    %383 = llvm.getelementptr %14[%382] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %380, %383 {alignment = 1 : i64} : i64, !llvm.ptr
    %384 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_130 = arith.constant 24 : i32
    %385 = arith.addi %384, %c24_i32_130 : i32
    %386 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_131 = arith.constant 0 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c0_i64_131 : i64
    %389 = llvm.getelementptr %14[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_132 = arith.constant 0 : i64
    %391 = arith.extui %385 : i32 to i64
    %392 = arith.addi %391, %c0_i64_132 : i64
    %393 = llvm.getelementptr %14[%392] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %390, %393 {alignment = 1 : i64} : i64, !llvm.ptr
    %394 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_133 = arith.constant 16 : i32
    %395 = arith.addi %394, %c16_i32_133 : i32
    %396 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_134 = arith.constant 0 : i64
    %397 = arith.extui %396 : i32 to i64
    %398 = arith.addi %397, %c0_i64_134 : i64
    %399 = llvm.getelementptr %14[%398] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %400 = llvm.load volatile %399 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_135 = arith.constant 0 : i64
    %401 = arith.extui %395 : i32 to i64
    %402 = arith.addi %401, %c0_i64_135 : i64
    %403 = llvm.getelementptr %14[%402] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %400, %403 {alignment = 1 : i64} : i64, !llvm.ptr
    %404 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_136 = arith.constant 8 : i32
    %405 = arith.addi %404, %c8_i32_136 : i32
    %406 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i64_137 = arith.constant 0 : i64
    %407 = arith.extui %406 : i32 to i64
    %408 = arith.addi %407, %c0_i64_137 : i64
    %409 = llvm.getelementptr %14[%408] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %410 = llvm.load volatile %409 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_138 = arith.constant 0 : i64
    %411 = arith.extui %405 : i32 to i64
    %412 = arith.addi %411, %c0_i64_138 : i64
    %413 = llvm.getelementptr %14[%412] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %410, %413 {alignment = 1 : i64} : i64, !llvm.ptr
    %414 = llvm.load %1 : !llvm.ptr -> i32
    %415 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_139 = arith.constant 1 : i32
    %416 = arith.addi %415, %c1_i32_139 : i32
    llvm.store %416, %4 : i32, !llvm.ptr
    %c8_i64_140 = arith.constant 8 : i64
    %417 = arith.extui %414 : i32 to i64
    %418 = arith.addi %417, %c8_i64_140 : i64
    %419 = llvm.getelementptr %14[%418] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %416, %419 {alignment = 1 : i64} : i32, !llvm.ptr
    %420 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_141 = arith.constant 0 : i32
    %421 = arith.cmpi eq, %420, %c0_i32_141 : i32
    %422 = arith.extui %421 : i1 to i32
    %c0_i32_142 = arith.constant 0 : i32
    %423 = arith.cmpi ne, %422, %c0_i32_142 : i32
    cf.cond_br %423, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %424 = llvm.load %1 : !llvm.ptr -> i32
    call @f74(%arg0, %424) : (!llvm.ptr, i32) -> ()
    cf.br ^bb9
  ^bb11:  // 3 preds: ^bb9, ^bb13, ^bb15
    %425 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_143 = arith.constant 20 : i64
    %426 = arith.extui %425 : i32 to i64
    %427 = arith.addi %426, %c20_i64_143 : i64
    %428 = llvm.getelementptr %14[%427] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %429 = llvm.load volatile %428 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %429, %3 : i32, !llvm.ptr
    %c0_i32_144 = arith.constant 0 : i32
    %430 = arith.cmpi eq, %429, %c0_i32_144 : i32
    %431 = arith.extui %430 : i1 to i32
    %c0_i32_145 = arith.constant 0 : i32
    %432 = arith.cmpi ne, %431, %c0_i32_145 : i32
    cf.cond_br %432, ^bb16, ^bb17
  ^bb12:  // pred: ^bb9
    %433 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_146 = arith.constant 0 : i64
    %434 = arith.extui %433 : i32 to i64
    %435 = arith.addi %434, %c0_i64_146 : i64
    %436 = llvm.getelementptr %14[%435] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %437 = llvm.load volatile %436 {alignment = 1 : i64} : !llvm.ptr -> i32
    %438 = llvm.load %4 : !llvm.ptr -> i32
    %439 = arith.subi %437, %438 : i32
    %440 = llvm.load %5 : !llvm.ptr -> i32
    %c5_i32_147 = arith.constant 5 : i32
    %c31_i32_148 = arith.constant 31 : i32
    %441 = arith.cmpi ule, %c5_i32_147, %c31_i32_148 : i32
    %442 = scf.if %441 -> (i32) {
      %492 = arith.shrui %440, %c5_i32_147 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    llvm.store %442, %0 : i32, !llvm.ptr
    %443 = arith.cmpi uge, %439, %442 : i32
    %444 = arith.extui %443 : i1 to i32
    %c0_i32_149 = arith.constant 0 : i32
    %445 = arith.cmpi ne, %444, %c0_i32_149 : i32
    cf.cond_br %445, ^bb13, ^bb14
  ^bb13:  // 2 preds: ^bb12, ^bb14
    %446 = llvm.load %1 : !llvm.ptr -> i32
    %447 = llvm.load %4 : !llvm.ptr -> i32
    %448 = llvm.load %0 : !llvm.ptr -> i32
    %449 = arith.addi %447, %448 : i32
    %c8_i64_150 = arith.constant 8 : i64
    %450 = arith.extui %446 : i32 to i64
    %451 = arith.addi %450, %c8_i64_150 : i64
    %452 = llvm.getelementptr %14[%451] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %449, %452 {alignment = 1 : i64} : i32, !llvm.ptr
    %453 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_151 = arith.constant 4 : i64
    %454 = arith.extui %453 : i32 to i64
    %455 = arith.addi %454, %c4_i64_151 : i64
    %456 = llvm.getelementptr %14[%455] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %457 = llvm.load volatile %456 {alignment = 1 : i64} : !llvm.ptr -> i32
    %458 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32_152 = arith.constant 5 : i32
    %c31_i32_153 = arith.constant 31 : i32
    %459 = arith.cmpi ule, %c5_i32_152, %c31_i32_153 : i32
    %460 = scf.if %459 -> (i32) {
      %492 = arith.shli %458, %c5_i32_152 : i32
      scf.yield %492 : i32
    } else {
      %c0_i32_164 = arith.constant 0 : i32
      scf.yield %c0_i32_164 : i32
    }
    %461 = arith.addi %457, %460 : i32
    %462 = llvm.load %8 : !llvm.ptr -> i32
    %463 = llvm.load %3 : !llvm.ptr -> i32
    %464 = call @f187(%arg0, %461, %462, %463) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %464, %4 : i32, !llvm.ptr
    %465 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32_154 = arith.constant 31 : i32
    %466 = arith.andi %465, %c31_i32_154 : i32
    llvm.store %466, %0 : i32, !llvm.ptr
    %c0_i32_155 = arith.constant 0 : i32
    %467 = arith.cmpi eq, %466, %c0_i32_155 : i32
    %468 = arith.extui %467 : i1 to i32
    %c0_i32_156 = arith.constant 0 : i32
    %469 = arith.cmpi ne, %468, %c0_i32_156 : i32
    cf.cond_br %469, ^bb11, ^bb15
  ^bb14:  // pred: ^bb12
    %470 = llvm.load %1 : !llvm.ptr -> i32
    %471 = llvm.load %4 : !llvm.ptr -> i32
    %472 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_157 = arith.constant 1 : i32
    %c32_i32_158 = arith.constant 32 : i32
    call @f95(%arg0, %470, %471, %472, %c1_i32_157, %c32_i32_158) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %473 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_159 = arith.constant 8 : i64
    %474 = arith.extui %473 : i32 to i64
    %475 = arith.addi %474, %c8_i64_159 : i64
    %476 = llvm.getelementptr %14[%475] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %477 = llvm.load volatile %476 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %477, %4 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb15:  // pred: ^bb13
    %478 = llvm.load %4 : !llvm.ptr -> i32
    %479 = llvm.load %3 : !llvm.ptr -> i32
    %480 = arith.addi %478, %479 : i32
    %c0_i32_160 = arith.constant 0 : i32
    %c32_i32_161 = arith.constant 32 : i32
    %481 = llvm.load %0 : !llvm.ptr -> i32
    %482 = arith.subi %c32_i32_161, %481 : i32
    %483 = call @f186(%arg0, %480, %c0_i32_160, %482) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb11
  ^bb16:  // 2 preds: ^bb11, ^bb17
    %484 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_162 = arith.constant 80 : i32
    %485 = arith.addi %484, %c80_i32_162 : i32
    llvm.store %485, %11 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb17:  // pred: ^bb11
    %486 = llvm.load %1 : !llvm.ptr -> i32
    %487 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %488 = arith.addi %487, %c-1_i32 : i32
    %c20_i64_163 = arith.constant 20 : i64
    %489 = arith.extui %486 : i32 to i64
    %490 = arith.addi %489, %c20_i64_163 : i64
    %491 = llvm.getelementptr %14[%490] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %488, %491 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb16
  }
  func.func @f83(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c20_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %11, %2 : i32, !llvm.ptr
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c12_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %17 = arith.cmpi eq, %11, %16 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_3 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_4 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c16_i64 : i64
    %25 = llvm.getelementptr %6[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %28 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %29 = scf.if %28 -> (i32) {
      %128 = arith.shli %27, %c2_i32 : i32
      scf.yield %128 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    %30 = arith.addi %26, %29 : i32
    %c32_i32 = arith.constant 32 : i32
    %c0_i64 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64 : i64
    %33 = llvm.getelementptr %6[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %33 {alignment = 1 : i64} : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_5 = arith.constant 1 : i32
    %36 = arith.addi %35, %c1_i32_5 : i32
    %c20_i64_6 = arith.constant 20 : i64
    %37 = arith.extui %34 : i32 to i64
    %38 = arith.addi %37, %c20_i64_6 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c8_i64 : i64
    %43 = llvm.getelementptr %6[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %44, %3 : i32, !llvm.ptr
    %45 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_7 = arith.constant 0 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c0_i64_7 : i64
    %48 = llvm.getelementptr %6[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i32
    %50 = arith.cmpi eq, %44, %49 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %52 = arith.cmpi eq, %51, %c0_i32_8 : i32
    %53 = arith.extui %52 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %54 = arith.cmpi ne, %53, %c0_i32_9 : i32
    cf.cond_br %54, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %56 = arith.addi %55, %c12_i32 : i32
    call @f73(%arg0, %56) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c4_i64 : i64
    %60 = llvm.getelementptr %6[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    %62 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_10 = arith.constant 31 : i32
    %63 = arith.cmpi ule, %c5_i32, %c31_i32_10 : i32
    %64 = scf.if %63 -> (i32) {
      %128 = arith.shli %62, %c5_i32 : i32
      scf.yield %128 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    %65 = arith.addi %61, %64 : i32
    llvm.store %65, %2 : i32, !llvm.ptr
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_11 : i64
    %69 = llvm.getelementptr %6[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    %71 = arith.extui %65 : i32 to i64
    %72 = arith.addi %71, %c0_i64_12 : i64
    %73 = llvm.getelementptr %6[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %70, %73 {alignment = 1 : i64} : i64, !llvm.ptr
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %75 = arith.addi %74, %c24_i32 : i32
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_13 = arith.constant 24 : i32
    %77 = arith.addi %76, %c24_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_14 : i64
    %80 = llvm.getelementptr %6[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %82 = arith.extui %75 : i32 to i64
    %83 = arith.addi %82, %c0_i64_15 : i64
    %84 = llvm.getelementptr %6[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %81, %84 {alignment = 1 : i64} : i64, !llvm.ptr
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %86 = arith.addi %85, %c16_i32 : i32
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_16 = arith.constant 16 : i32
    %88 = arith.addi %87, %c16_i32_16 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_17 : i64
    %91 = llvm.getelementptr %6[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_18 = arith.constant 0 : i64
    %93 = arith.extui %86 : i32 to i64
    %94 = arith.addi %93, %c0_i64_18 : i64
    %95 = llvm.getelementptr %6[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %97 = arith.addi %96, %c8_i32 : i32
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_19 = arith.constant 8 : i32
    %99 = arith.addi %98, %c8_i32_19 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c0_i64_20 : i64
    %102 = llvm.getelementptr %6[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %104 = arith.extui %97 : i32 to i64
    %105 = arith.addi %104, %c0_i64_21 : i64
    %106 = llvm.getelementptr %6[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %103, %106 {alignment = 1 : i64} : i64, !llvm.ptr
    %107 = llvm.load %1 : !llvm.ptr -> i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %109 = arith.addi %108, %c1_i32_22 : i32
    %c8_i64_23 = arith.constant 8 : i64
    %110 = arith.extui %107 : i32 to i64
    %111 = arith.addi %110, %c8_i64_23 : i64
    %112 = llvm.getelementptr %6[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %112 {alignment = 1 : i64} : i32, !llvm.ptr
    %113 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_24 = arith.constant 20 : i64
    %114 = arith.extui %113 : i32 to i64
    %115 = arith.addi %114, %c20_i64_24 : i64
    %116 = llvm.getelementptr %6[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %117 = llvm.load volatile %116 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %117, %0 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %118 = arith.cmpi eq, %117, %c0_i32_25 : i32
    %119 = arith.extui %118 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %120 = arith.cmpi ne, %119, %c0_i32_26 : i32
    cf.cond_br %120, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %121 = llvm.load %1 : !llvm.ptr -> i32
    call @f74(%arg0, %121) : (!llvm.ptr, i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    cf.br ^bb2
  ^bb8:  // pred: ^bb5
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %124 = arith.addi %123, %c-1_i32 : i32
    %c20_i64_27 = arith.constant 20 : i64
    %125 = arith.extui %122 : i32 to i64
    %126 = arith.addi %125, %c20_i64_27 : i64
    %127 = llvm.getelementptr %6[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %124, %127 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  }
  func.func @f84(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %5[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %10, %0 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c28_i64 : i64
    %14 = llvm.getelementptr %5[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %16 = arith.andi %15, %c16_i32 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_2 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2(%18: i32):  // 3 preds: ^bb3, ^bb5, ^bb6
    return %18 : i32
  ^bb3:  // pred: ^bb1
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %21 = call @f159(%arg0, %19, %20) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%21 : i32)
  ^bb4:  // pred: ^bb1
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %23 = arith.andi %22, %c32_i32 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_3 : i32
    cf.cond_br %24, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = call @f151(%arg0, %25, %26) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%27 : i32)
  ^bb6:  // pred: ^bb4
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %30 = call @f142(%arg0, %28, %29) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%30 : i32)
  }
  func.func @f85(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %3 : i32, !llvm.ptr
    %c0_i64_3 = arith.constant 0 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c0_i64_3 : i64
    %18 = llvm.getelementptr %8[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %19, %0 : i32, !llvm.ptr
    %c-1114111_i32 = arith.constant -1114111 : i32
    %20 = arith.addi %19, %c-1114111_i32 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c2097150_i32 = arith.constant 2097150 : i32
    %22 = arith.andi %21, %c2097150_i32 : i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %23 = arith.cmpi eq, %22, %c1114112_i32 : i32
    %24 = arith.extui %23 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_5 : i32
    %26 = arith.select %25, %20, %c0_i32_4 : i32
    cf.switch %26 : i32, [
      default: ^bb6,
      0: ^bb6,
      1: ^bb5,
      2: ^bb4
    ]
  ^bb2(%27: i32):  // pred: ^bb3
    return %27 : i32
  ^bb3:  // 3 preds: ^bb4, ^bb5, ^bb6
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_6 = arith.constant 16 : i32
    %29 = arith.addi %28, %c16_i32_6 : i32
    llvm.store %29, %5 : i32, !llvm.ptr
    %30 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%30 : i32)
  ^bb4:  // pred: ^bb1
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %c1050306_i32 = arith.constant 1050306 : i32
    %c19_i32 = arith.constant 19 : i32
    %32 = call @f170(%arg0, %31, %c1050306_i32, %c19_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %32, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c1050297_i32 = arith.constant 1050297 : i32
    %c9_i32 = arith.constant 9 : i32
    %34 = call @f170(%arg0, %33, %c1050297_i32, %c9_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %34, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb1, ^bb1
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %37 = arith.addi %36, %c4_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %38 = arith.extui %35 : i32 to i64
    %39 = arith.addi %38, %c12_i64 : i64
    %40 = llvm.getelementptr %8[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %37, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c1050272_i32 = arith.constant 1050272 : i32
    %c19_i32_7 = arith.constant 19 : i32
    %c1050291_i32 = arith.constant 1050291 : i32
    %c1_i32_8 = arith.constant 1 : i32
    %42 = llvm.load %3 : !llvm.ptr -> i32
    %c1050256_i32 = arith.constant 1050256 : i32
    %c1050292_i32 = arith.constant 1050292 : i32
    %c5_i32 = arith.constant 5 : i32
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %44 = arith.addi %43, %c12_i32 : i32
    %c1050240_i32 = arith.constant 1050240 : i32
    %45 = call @f172(%arg0, %41, %c1050272_i32, %c19_i32_7, %c1050291_i32, %c1_i32_8, %42, %c1050256_i32, %c1050292_i32, %c5_i32, %44, %c1050240_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %45, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f86(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c4_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %16 = call @f176(%arg0, %9, %14, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f87(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %0 : i32, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c4_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c8_i64 : i64
    %17 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %20 = call @f176(%arg0, %13, %18, %19) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%20 : i32)
  ^bb2(%21: i32):  // pred: ^bb1
    return %21 : i32
  }
  func.func @f88(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %5[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %10, %0 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c28_i64 : i64
    %14 = llvm.getelementptr %5[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %16 = arith.andi %15, %c16_i32 : i32
    %c0_i32_2 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_2 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2(%18: i32):  // 3 preds: ^bb3, ^bb5, ^bb6
    return %18 : i32
  ^bb3:  // pred: ^bb1
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %21 = call @f183(%arg0, %19, %20) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%21 : i32)
  ^bb4:  // pred: ^bb1
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %23 = arith.andi %22, %c32_i32 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_3 : i32
    cf.cond_br %24, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = call @f180(%arg0, %25, %26) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%27 : i32)
  ^bb6:  // pred: ^bb4
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %30 = call @f153(%arg0, %28, %29) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%30 : i32)
  }
  func.func @f89(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %4 = call @f185(%arg0, %2, %3, %c32_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32 = arith.constant 0 : i32
    %5 = arith.cmpi eq, %4, %c0_i32 : i32
    %6 = arith.extui %5 : i1 to i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f90(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %13 = arith.subi %12, %c16_i32 : i32
    llvm.store %13, %3 : i32, !llvm.ptr
    llvm.store %13, %8 : i32, !llvm.ptr
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %15 = arith.addi %14, %c4_i32 : i32
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %17 = arith.cmpi ule, %c1_i32_6, %c31_i32 : i32
    %18 = scf.if %17 -> (i32) {
      %71 = arith.shli %16, %c1_i32_6 : i32
      scf.yield %71 : i32
    } else {
      %c0_i32_19 = arith.constant 0 : i32
      scf.yield %c0_i32_19 : i32
    }
    %c2_i32 = arith.constant 2 : i32
    %19 = arith.addi %18, %c2_i32 : i32
    llvm.store %19, %4 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %c1_i32_8 = arith.constant 1 : i32
    %c1_i32_9 = arith.constant 1 : i32
    call @f102(%arg0, %15, %19, %c0_i32_7, %c1_i32_8, %c1_i32_9) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c8_i64 : i64
    %23 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %5 : i32, !llvm.ptr
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c4_i64 : i64
    %28 = llvm.getelementptr %11[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_10 = arith.constant 1 : i32
    %30 = arith.cmpi eq, %29, %c1_i32_10 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %32 = arith.cmpi eq, %31, %c0_i32_11 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_12 : i32
    cf.cond_br %34, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c12_i64 : i64
    %38 = llvm.getelementptr %11[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %39, %6 : i32, !llvm.ptr
    %c30768_i32 = arith.constant 30768 : i32
    %c0_i64 = arith.constant 0 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c0_i64 : i64
    %42 = llvm.getelementptr %11[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = arith.trunci %c30768_i32 : i32 to i16
    llvm.store volatile %43, %42 {alignment = 1 : i64} : i16, !llvm.ptr
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %46 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_13 = arith.constant 2 : i32
    %47 = arith.addi %46, %c2_i32_13 : i32
    call @f91(%arg0, %44, %45, %47) : (!llvm.ptr, i32, i32, i32) -> ()
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %49 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_14 = arith.constant 8 : i64
    %50 = arith.extui %48 : i32 to i64
    %51 = arith.addi %50, %c8_i64_14 : i64
    %52 = llvm.getelementptr %11[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i32, !llvm.ptr
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %54 = llvm.load %6 : !llvm.ptr -> i32
    %c4_i64_15 = arith.constant 4 : i64
    %55 = arith.extui %53 : i32 to i64
    %56 = arith.addi %55, %c4_i64_15 : i64
    %57 = llvm.getelementptr %11[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %57 {alignment = 1 : i64} : i32, !llvm.ptr
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %59 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %60 = arith.extui %58 : i32 to i64
    %61 = arith.addi %60, %c0_i64_16 : i64
    %62 = llvm.getelementptr %11[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %62 {alignment = 1 : i64} : i32, !llvm.ptr
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_17 = arith.constant 16 : i32
    %64 = arith.addi %63, %c16_i32_17 : i32
    llvm.store %64, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %65 = llvm.load %5 : !llvm.ptr -> i32
    %66 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_18 = arith.constant 12 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c12_i64_18 : i64
    %69 = llvm.getelementptr %11[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %65, %70) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f91(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %8 = arith.cmpi eq, %7, %c0_i32_3 : i32
    %9 = arith.extui %8 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_4 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb5
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %11 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_5 = arith.constant 1 : i32
    %12 = arith.addi %11, %c1_i32_5 : i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i8
    %18 = arith.extui %17 : i8 to i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %c15_i32 = arith.constant 15 : i32
    %19 = arith.andi %18, %c15_i32 : i32
    %c1050325_i32 = arith.constant 1050325 : i32
    %20 = arith.addi %19, %c1050325_i32 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64_6 : i64
    %23 = llvm.getelementptr %6[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i8
    %25 = arith.extui %24 : i8 to i32
    %c0_i64_7 = arith.constant 0 : i64
    %26 = arith.extui %12 : i32 to i64
    %27 = arith.addi %26, %c0_i64_7 : i64
    %28 = llvm.getelementptr %6[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = arith.trunci %25 : i32 to i8
    llvm.store volatile %29, %28 {alignment = 1 : i64} : i8, !llvm.ptr
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %31 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c31_i32 = arith.constant 31 : i32
    %32 = arith.cmpi ule, %c4_i32, %c31_i32 : i32
    %33 = scf.if %32 -> (i32) {
      %51 = arith.shrui %31, %c4_i32 : i32
      scf.yield %51 : i32
    } else {
      %c0_i32_13 = arith.constant 0 : i32
      scf.yield %c0_i32_13 : i32
    }
    %c1050325_i32_8 = arith.constant 1050325 : i32
    %34 = arith.addi %33, %c1050325_i32_8 : i32
    %c0_i64_9 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_9 : i64
    %37 = llvm.getelementptr %6[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i8
    %39 = arith.extui %38 : i8 to i32
    %c0_i64_10 = arith.constant 0 : i64
    %40 = arith.extui %30 : i32 to i64
    %41 = arith.addi %40, %c0_i64_10 : i64
    %42 = llvm.getelementptr %6[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = arith.trunci %39 : i32 to i8
    llvm.store volatile %43, %42 {alignment = 1 : i64} : i8, !llvm.ptr
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %45 = arith.addi %44, %c2_i32 : i32
    llvm.store %45, %2 : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %47 = arith.addi %46, %c1_i32_11 : i32
    llvm.store %47, %0 : i32, !llvm.ptr
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %49 = arith.addi %48, %c-1_i32 : i32
    llvm.store %49, %1 : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_12 : i32
    cf.cond_br %50, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func @f92(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f93(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f93(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %11 = arith.addi %10, %c4_i32 : i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c4_i64 : i64
    %15 = llvm.getelementptr %7[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c8_i64 : i64
    %20 = llvm.getelementptr %7[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f90(%arg0, %11, %16, %21) : (!llvm.ptr, i32, i32, i32) -> ()
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_2 = arith.constant 8 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c8_i64_2 : i64
    %26 = llvm.getelementptr %7[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c12_i64 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    %33 = call @f139(%arg0, %22, %27, %32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %33, %0 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_3 = arith.constant 4 : i32
    %35 = arith.addi %34, %c4_i32_3 : i32
    call @f103(%arg0, %35) : (!llvm.ptr, i32) -> ()
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_4 = arith.constant 4 : i32
    %37 = arith.addi %36, %c4_i32_4 : i32
    call @f104(%arg0, %37) : (!llvm.ptr, i32) -> ()
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_5 = arith.constant 16 : i32
    %39 = arith.addi %38, %c16_i32_5 : i32
    llvm.store %39, %4 : i32, !llvm.ptr
    %40 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%40 : i32)
  ^bb2(%41: i32):  // pred: ^bb1
    return %41 : i32
  }
  func.func @f94(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = arith.subi %11, %16 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %20 = arith.subi %18, %19 : i32
    llvm.store %20, %2 : i32, !llvm.ptr
    %21 = arith.cmpi uge, %17, %20 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_3 : i32
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c4_i64 : i64
    %27 = llvm.getelementptr %6[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %29 = llvm.load %3 : !llvm.ptr -> i32
    %30 = arith.addi %28, %29 : i32
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = call @f187(%arg0, %30, %31, %32) : (!llvm.ptr, i32, i32, i32) -> i32
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %37 = arith.addi %35, %36 : i32
    %c8_i64_4 = arith.constant 8 : i64
    %38 = arith.extui %34 : i32 to i64
    %39 = arith.addi %38, %c8_i64_4 : i64
    %40 = llvm.getelementptr %6[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %37, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %42 = llvm.load %3 : !llvm.ptr -> i32
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_5 = arith.constant 1 : i32
    %c1_i32_6 = arith.constant 1 : i32
    call @f95(%arg0, %41, %42, %43, %c1_i32_5, %c1_i32_6) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_7 = arith.constant 8 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c8_i64_7 : i64
    %47 = llvm.getelementptr %6[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %48, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f95(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %12 = arith.subi %11, %c16_i32 : i32
    llvm.store %12, %5 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %14 = arith.addi %13, %c8_i32 : i32
    %15 = llvm.load %0 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %19 = llvm.load %4 : !llvm.ptr -> i32
    call @f98(%arg0, %14, %15, %16, %17, %18, %19) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> ()
    %20 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c8_i64 : i64
    %23 = llvm.getelementptr %10[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %4 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %25 = arith.cmpi eq, %24, %c-2147483647_i32 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_5 : i32
    cf.cond_br %27, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_6 = arith.constant 16 : i32
    %29 = arith.addi %28, %c16_i32_6 : i32
    llvm.store %29, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %31 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c12_i64 : i64
    %34 = llvm.getelementptr %10[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %30, %35) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f96(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %5[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c8_i64 : i64
    %14 = llvm.getelementptr %5[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = arith.subi %10, %15 : i32
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = arith.cmpi uge, %16, %17 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_2 : i32
    cf.cond_br %20, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    %c1_i32_4 = arith.constant 1 : i32
    call @f95(%arg0, %21, %22, %23, %c1_i32_3, %c1_i32_4) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f97(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %10 = arith.cmpi slt, %9, %c0_i32_5 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_6 : i32
    cf.cond_br %12, ^bb7, ^bb8
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb17
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %13 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %17 = llvm.getelementptr %8[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %14, %17 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb7, ^bb16
    %c1_i32_7 = arith.constant 1 : i32
    llvm.store %c1_i32_7, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb6, ^bb9, ^bb12
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_8 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_9 : i32
    cf.cond_br %21, ^bb16, ^bb17
  ^bb6:  // 2 preds: ^bb10, ^bb13
    %22 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %22, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb1
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_10, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb8:  // pred: ^bb1
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_11 = arith.constant 4 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c4_i64_11 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %32 = arith.cmpi eq, %31, %c0_i32_12 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_13 : i32
    cf.cond_br %34, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb14, ^bb15
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %37 = call @f55(%arg0, %35, %36) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %37, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb10:  // pred: ^bb8
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %39 = arith.cmpi eq, %38, %c0_i32_14 : i32
    %40 = arith.extui %39 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %41 = arith.cmpi ne, %40, %c0_i32_15 : i32
    cf.cond_br %41, ^bb6, ^bb15
  ^bb11:  // pred: ^bb8
    %42 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c8_i64 : i64
    %45 = llvm.getelementptr %8[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %46, %5 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %47 = arith.cmpi ne, %46, %c0_i32_16 : i32
    cf.cond_br %47, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %48 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_17 : i64
    %51 = llvm.getelementptr %8[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    %53 = llvm.load %5 : !llvm.ptr -> i32
    %54 = llvm.load %1 : !llvm.ptr -> i32
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %56 = call @f57(%arg0, %52, %53, %54, %55) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %56, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb13:  // pred: ^bb11
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %58 = arith.cmpi eq, %57, %c0_i32_18 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_19 : i32
    cf.cond_br %60, ^bb6, ^bb14
  ^bb14:  // pred: ^bb13
    %c0_i32_20 = arith.constant 0 : i32
    %c1054185_i64 = arith.constant 1054185 : i64
    %61 = arith.extui %c0_i32_20 : i32 to i64
    %62 = arith.addi %61, %c1054185_i64 : i64
    %63 = llvm.getelementptr %8[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i8
    %65 = arith.extui %64 : i8 to i32
    cf.br ^bb9
  ^bb15:  // pred: ^bb10
    %c0_i32_21 = arith.constant 0 : i32
    %c1054185_i64_22 = arith.constant 1054185 : i64
    %66 = arith.extui %c0_i32_21 : i32 to i64
    %67 = arith.addi %66, %c1054185_i64_22 : i64
    %68 = llvm.getelementptr %8[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i8
    %70 = arith.extui %69 : i8 to i32
    cf.br ^bb9
  ^bb16:  // pred: ^bb5
    %71 = llvm.load %0 : !llvm.ptr -> i32
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_23 = arith.constant 8 : i64
    %73 = arith.extui %71 : i32 to i64
    %74 = arith.addi %73, %c8_i64_23 : i64
    %75 = llvm.getelementptr %8[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %72, %75 {alignment = 1 : i64} : i32, !llvm.ptr
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_24 = arith.constant 4 : i64
    %78 = arith.extui %76 : i32 to i64
    %79 = arith.addi %78, %c4_i64_24 : i64
    %80 = llvm.getelementptr %8[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %80 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb17:  // pred: ^bb5
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_25 = arith.constant 8 : i64
    %83 = arith.extui %81 : i32 to i64
    %84 = arith.addi %83, %c8_i64_25 : i64
    %85 = llvm.getelementptr %8[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %85 {alignment = 1 : i64} : i32, !llvm.ptr
    %86 = llvm.load %0 : !llvm.ptr -> i32
    %87 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_26 = arith.constant 4 : i64
    %88 = arith.extui %86 : i32 to i64
    %89 = arith.addi %88, %c4_i64_26 : i64
    %90 = llvm.getelementptr %8[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %90 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    llvm.store %c0_i32_27, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f98(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %10 : i64, !llvm.ptr
    %11 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %16 = llvm.load %12 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %17 = arith.subi %16, %c32_i32 : i32
    llvm.store %17, %6 : i32, !llvm.ptr
    llvm.store %17, %12 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    llvm.store %c0_i32_10, %7 : i32, !llvm.ptr
    %18 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_11 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_12 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 5 preds: ^bb4, ^bb5, ^bb7, ^bb12, ^bb13
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %23 = llvm.load %8 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %22 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %15[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %23, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %29 = arith.extui %27 : i32 to i64
    %30 = arith.addi %29, %c0_i64_13 : i64
    %31 = llvm.getelementptr %15[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_14 = arith.constant 32 : i32
    %33 = arith.addi %32, %c32_i32_14 : i32
    llvm.store %33, %12 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb6
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %36 = arith.addi %34, %35 : i32
    llvm.store %36, %3 : i32, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %38 = arith.cmpi ult, %36, %37 : i32
    %39 = arith.extui %38 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_15 : i32
    cf.cond_br %40, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %c0_i32_16 = arith.constant 0 : i32
    llvm.store %c0_i32_16, %7 : i32, !llvm.ptr
    %41 = llvm.load %4 : !llvm.ptr -> i32
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %43 = arith.addi %41, %42 : i32
    %c-1_i32 = arith.constant -1 : i32
    %44 = arith.addi %43, %c-1_i32 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %45 = llvm.load %4 : !llvm.ptr -> i32
    %46 = arith.subi %c0_i32_17, %45 : i32
    %47 = arith.andi %44, %46 : i32
    %48 = arith.extui %47 : i32 to i64
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %c1_i32_18 = arith.constant 1 : i32
    %49 = llvm.load %5 : !llvm.ptr -> i32
    %c1025_i32 = arith.constant 1025 : i32
    %50 = arith.cmpi ult, %49, %c1025_i32 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %52 = arith.cmpi ne, %51, %c0_i32_19 : i32
    %53 = arith.select %52, %c4_i32, %c1_i32_18 : i32
    %54 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %55 = arith.cmpi eq, %54, %c1_i32_20 : i32
    %56 = arith.extui %55 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %57 = arith.cmpi ne, %56, %c0_i32_21 : i32
    %58 = arith.select %57, %c8_i32, %53 : i32
    llvm.store %58, %8 : i32, !llvm.ptr
    %59 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c0_i64_22 : i64
    %62 = llvm.getelementptr %15[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %63, %9 : i32, !llvm.ptr
    %c1_i32_23 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %64 = arith.cmpi ule, %c1_i32_23, %c31_i32 : i32
    %65 = scf.if %64 -> (i32) {
      %154 = arith.shli %63, %c1_i32_23 : i32
      scf.yield %154 : i32
    } else {
      %c0_i32_36 = arith.constant 0 : i32
      scf.yield %c0_i32_36 : i32
    }
    llvm.store %65, %2 : i32, !llvm.ptr
    %66 = llvm.load %3 : !llvm.ptr -> i32
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = arith.cmpi ugt, %67, %68 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_24 : i32
    %72 = arith.select %71, %65, %66 : i32
    llvm.store %72, %2 : i32, !llvm.ptr
    %73 = llvm.load %8 : !llvm.ptr -> i32
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %75 = arith.cmpi ugt, %73, %74 : i32
    %76 = arith.extui %75 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %77 = arith.cmpi ne, %76, %c0_i32_25 : i32
    %78 = arith.select %77, %58, %72 : i32
    llvm.store %78, %2 : i32, !llvm.ptr
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.muli %48, %79 : i64
    llvm.store %80, %10 : i64, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %81 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %82 = scf.if %81 -> (i64) {
      %154 = arith.shrui %80, %c32_i64 : i64
      scf.yield %154 : i64
    } else {
      %c0_i64_36 = arith.constant 0 : i64
      scf.yield %c0_i64_36 : i64
    }
    %83 = arith.trunci %82 : i64 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_26 : i32
    cf.cond_br %84, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %85 = llvm.load %10 : !llvm.ptr -> i64
    %86 = arith.trunci %85 : i64 to i32
    llvm.store %86, %3 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %87 = llvm.load %4 : !llvm.ptr -> i32
    %88 = arith.subi %c-2147483648_i32, %87 : i32
    %89 = arith.cmpi ugt, %86, %88 : i32
    %90 = arith.extui %89 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %91 = arith.cmpi ne, %90, %c0_i32_27 : i32
    cf.cond_br %91, ^bb3, ^bb8
  ^bb8:  // pred: ^bb7
    %92 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_28 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_28 : i32
    cf.cond_br %93, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb10, ^bb11
    %94 = llvm.load %6 : !llvm.ptr -> i32
    %95 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %96 = arith.extui %94 : i32 to i64
    %97 = arith.addi %96, %c24_i64 : i64
    %98 = llvm.getelementptr %15[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %99 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i32_29 = arith.constant 8 : i32
    %100 = arith.addi %99, %c8_i32_29 : i32
    %101 = llvm.load %4 : !llvm.ptr -> i32
    %102 = llvm.load %3 : !llvm.ptr -> i32
    %103 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %104 = arith.addi %103, %c20_i32 : i32
    %105 = llvm.load %6 : !llvm.ptr -> i32
    call @f97(%arg0, %100, %101, %102, %104, %105) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %106 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %107 = arith.extui %106 : i32 to i64
    %108 = arith.addi %107, %c8_i64 : i64
    %109 = llvm.getelementptr %15[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_30 = arith.constant 0 : i32
    %111 = arith.cmpi ne, %110, %c0_i32_30 : i32
    cf.cond_br %111, ^bb12, ^bb13
  ^bb10:  // pred: ^bb8
    %112 = llvm.load %6 : !llvm.ptr -> i32
    %113 = llvm.load %9 : !llvm.ptr -> i32
    %114 = llvm.load %5 : !llvm.ptr -> i32
    %115 = arith.muli %113, %114 : i32
    %c28_i64 = arith.constant 28 : i64
    %116 = arith.extui %112 : i32 to i64
    %117 = arith.addi %116, %c28_i64 : i64
    %118 = llvm.getelementptr %15[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %115, %118 {alignment = 1 : i64} : i32, !llvm.ptr
    %119 = llvm.load %6 : !llvm.ptr -> i32
    %120 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_31 = arith.constant 4 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c4_i64_31 : i64
    %123 = llvm.getelementptr %15[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %125 = arith.extui %119 : i32 to i64
    %126 = arith.addi %125, %c20_i64 : i64
    %127 = llvm.getelementptr %15[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %124, %127 {alignment = 1 : i64} : i32, !llvm.ptr
    %128 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %128, %5 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // pred: ^bb8
    %c0_i32_32 = arith.constant 0 : i32
    llvm.store %c0_i32_32, %5 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb9
    %129 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %130 = arith.extui %129 : i32 to i64
    %131 = arith.addi %130, %c16_i64 : i64
    %132 = llvm.getelementptr %15[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %133 = llvm.load volatile %132 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %133, %8 : i32, !llvm.ptr
    %134 = llvm.load %6 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c12_i64 : i64
    %137 = llvm.getelementptr %15[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load volatile %137 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %138, %7 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb9
    %139 = llvm.load %6 : !llvm.ptr -> i32
    %c12_i64_33 = arith.constant 12 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c12_i64_33 : i64
    %142 = llvm.getelementptr %15[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %143, %5 : i32, !llvm.ptr
    %144 = llvm.load %1 : !llvm.ptr -> i32
    %145 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %146 = arith.extui %144 : i32 to i64
    %147 = arith.addi %146, %c0_i64_34 : i64
    %148 = llvm.getelementptr %15[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %145, %148 {alignment = 1 : i64} : i32, !llvm.ptr
    %149 = llvm.load %1 : !llvm.ptr -> i32
    %150 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i64_35 = arith.constant 4 : i64
    %151 = arith.extui %149 : i32 to i64
    %152 = arith.addi %151, %c4_i64_35 : i64
    %153 = llvm.getelementptr %15[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %150, %153 {alignment = 1 : i64} : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    llvm.store %c-2147483647_i32, %7 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f99(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_4 = arith.constant 0 : i32
    llvm.store %c0_i32_4, %4 : i32, !llvm.ptr
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %3 : !llvm.ptr -> i32
    %7 = arith.cmpi eq, %5, %6 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %9 = arith.cmpi eq, %8, %c0_i32_5 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_6 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%13 : i32)
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = call @f185(%arg0, %14, %15, %16) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_7 : i32
    %19 = arith.extui %18 : i1 to i32
    llvm.store %19, %4 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f100(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %c1050341_i32 = arith.constant 1050341 : i32
    %c2_i32 = arith.constant 2 : i32
    %3 = call @f139(%arg0, %2, %c1050341_i32, %c2_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func @f101(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %8 = arith.cmpi eq, %7, %c0_i32_3 : i32
    %9 = arith.extui %8 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_4 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb1, ^bb4, ^bb5
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %6[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %3 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %16 = arith.cmpi eq, %15, %c0_i32_5 : i32
    %17 = arith.extui %16 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %18 = arith.cmpi ne, %17, %c0_i32_6 : i32
    cf.cond_br %18, ^bb3, ^bb5
  ^bb5:  // pred: ^bb4
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c4_i64 : i64
    %22 = llvm.getelementptr %6[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %26 = arith.muli %24, %25 : i32
    %27 = llvm.load %1 : !llvm.ptr -> i32
    call @f56(%arg0, %23, %26, %27) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f102(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %3 : !llvm.ptr -> i32
    %10 = llvm.load %4 : !llvm.ptr -> i32
    %11 = arith.addi %9, %10 : i32
    %c-1_i32 = arith.constant -1 : i32
    %12 = arith.addi %11, %c-1_i32 : i32
    %c0_i32 = arith.constant 0 : i32
    %13 = llvm.load %3 : !llvm.ptr -> i32
    %14 = arith.subi %c0_i32, %13 : i32
    %15 = arith.andi %12, %14 : i32
    %16 = arith.extui %15 : i32 to i64
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.muli %16, %18 : i64
    llvm.store %19, %5 : i64, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %20 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %21 = scf.if %20 -> (i64) {
      %88 = arith.shrui %19, %c32_i64 : i64
      scf.yield %88 : i64
    } else {
      %c0_i64_24 = arith.constant 0 : i64
      scf.yield %c0_i64_24 : i64
    }
    %22 = arith.trunci %21 : i64 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_5 : i32
    cf.cond_br %23, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 4 preds: ^bb4, ^bb8, ^bb12, ^bb13
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_6 = arith.constant 0 : i64
    %26 = arith.extui %24 : i32 to i64
    %27 = arith.addi %26, %c0_i64_6 : i64
    %28 = llvm.getelementptr %8[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %25, %28 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %c4_i64 = arith.constant 4 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c4_i64 : i64
    %32 = llvm.getelementptr %8[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_7, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    llvm.store %c1_i32_8, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %33 = llvm.load %5 : !llvm.ptr -> i64
    %34 = arith.trunci %33 : i64 to i32
    llvm.store %34, %4 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %36 = arith.subi %c-2147483648_i32, %35 : i32
    %37 = arith.cmpi ugt, %34, %36 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_9 : i32
    cf.cond_br %39, ^bb4, ^bb6
  ^bb6:  // pred: ^bb5
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %41 = arith.cmpi ne, %40, %c0_i32_10 : i32
    cf.cond_br %41, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    %c0_i32_11 = arith.constant 0 : i32
    %c1054185_i64 = arith.constant 1054185 : i64
    %42 = arith.extui %c0_i32_11 : i32 to i64
    %43 = arith.addi %42, %c1054185_i64 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i8
    %46 = arith.extui %45 : i8 to i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_12 : i32
    cf.cond_br %48, ^bb10, ^bb11
  ^bb8:  // pred: ^bb6
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %51 = arith.extui %49 : i32 to i64
    %52 = arith.addi %51, %c8_i64 : i64
    %53 = llvm.getelementptr %8[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %3 : i32, !llvm.ptr
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %c4_i64_15 = arith.constant 4 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c4_i64_15 : i64
    %57 = llvm.getelementptr %8[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_14, %57 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb9:  // 2 preds: ^bb10, ^bb11
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %59 = arith.cmpi eq, %58, %c0_i32_16 : i32
    %60 = arith.extui %59 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %61 = arith.cmpi ne, %60, %c0_i32_17 : i32
    cf.cond_br %61, ^bb12, ^bb13
  ^bb10:  // pred: ^bb7
    %62 = llvm.load %4 : !llvm.ptr -> i32
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = call @f55(%arg0, %62, %63) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %64, %2 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // pred: ^bb7
    %65 = llvm.load %4 : !llvm.ptr -> i32
    %66 = llvm.load %3 : !llvm.ptr -> i32
    %67 = call @f55(%arg0, %65, %66) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %67, %2 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb9
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %69 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_18 = arith.constant 8 : i64
    %70 = arith.extui %68 : i32 to i64
    %71 = arith.addi %70, %c8_i64_18 : i64
    %72 = llvm.getelementptr %8[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i32, !llvm.ptr
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %74 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_19 = arith.constant 4 : i64
    %75 = arith.extui %73 : i32 to i64
    %76 = arith.addi %75, %c4_i64_19 : i64
    %77 = llvm.getelementptr %8[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %74, %77 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_20 = arith.constant 1 : i32
    llvm.store %c1_i32_20, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb9
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_21 = arith.constant 8 : i64
    %80 = arith.extui %78 : i32 to i64
    %81 = arith.addi %80, %c8_i64_21 : i64
    %82 = llvm.getelementptr %8[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %79, %82 {alignment = 1 : i64} : i32, !llvm.ptr
    %83 = llvm.load %0 : !llvm.ptr -> i32
    %84 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_22 = arith.constant 4 : i64
    %85 = arith.extui %83 : i32 to i64
    %86 = arith.addi %85, %c4_i64_22 : i64
    %87 = llvm.getelementptr %8[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %84, %87 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f103(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f104(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f56(%arg0, %17, %18, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f105(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %3 : !llvm.ptr -> i32
    %7 = arith.cmpi eq, %5, %6 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %11 = llvm.load %2 : !llvm.ptr -> i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %13 = call @f187(%arg0, %10, %11, %12) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %16 = llvm.load %4 : !llvm.ptr -> i32
    call @f179(%arg0, %14, %15, %16) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f106(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c7199936582794304877_i64 = arith.constant 7199936582794304877 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c7199936582794304877_i64, %8 {alignment = 1 : i64} : i64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c-5076933981314334344_i64 = arith.constant -5076933981314334344 : i64
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-5076933981314334344_i64, %12 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f107(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c-235516408301547304_i64 = arith.constant -235516408301547304 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-235516408301547304_i64, %8 {alignment = 1 : i64} : i64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c799433722634398613_i64 = arith.constant 799433722634398613 : i64
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c799433722634398613_i64, %12 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f108(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %9 : i64, !llvm.ptr
    %10 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %15 = llvm.load %11 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %16 = arith.subi %15, %c32_i32 : i32
    llvm.store %16, %5 : i32, !llvm.ptr
    llvm.store %16, %11 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.addi %17, %18 : i32
    llvm.store %19, %2 : i32, !llvm.ptr
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %21 = arith.cmpi uge, %19, %20 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_9 : i32
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // pred: ^bb1
    %c0_i32_10 = arith.constant 0 : i32
    llvm.store %c0_i32_10, %6 : i32, !llvm.ptr
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %25 = llvm.load %4 : !llvm.ptr -> i32
    %26 = arith.addi %24, %25 : i32
    %c-1_i32 = arith.constant -1 : i32
    %27 = arith.addi %26, %c-1_i32 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.subi %c0_i32_11, %28 : i32
    %30 = arith.andi %27, %29 : i32
    %31 = arith.extui %30 : i32 to i64
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_12 = arith.constant 1 : i32
    %33 = arith.cmpi eq, %32, %c1_i32_12 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_13 : i32
    %36 = arith.select %35, %c8_i32, %c4_i32 : i32
    llvm.store %36, %7 : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_14 : i64
    %40 = llvm.getelementptr %14[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %41, %1 : i32, !llvm.ptr
    %c1_i32_15 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %42 = arith.cmpi ule, %c1_i32_15, %c31_i32 : i32
    %43 = scf.if %42 -> (i32) {
      %141 = arith.shli %41, %c1_i32_15 : i32
      scf.yield %141 : i32
    } else {
      %c0_i32_37 = arith.constant 0 : i32
      scf.yield %c0_i32_37 : i32
    }
    llvm.store %43, %8 : i32, !llvm.ptr
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %45 = llvm.load %8 : !llvm.ptr -> i32
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %47 = arith.cmpi ugt, %45, %46 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_16 : i32
    %50 = arith.select %49, %43, %44 : i32
    llvm.store %50, %2 : i32, !llvm.ptr
    %51 = llvm.load %7 : !llvm.ptr -> i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = arith.cmpi ugt, %51, %52 : i32
    %54 = arith.extui %53 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_17 : i32
    %56 = arith.select %55, %36, %50 : i32
    llvm.store %56, %7 : i32, !llvm.ptr
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.muli %31, %57 : i64
    llvm.store %58, %9 : i64, !llvm.ptr
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %59 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %60 = scf.if %59 -> (i64) {
      %141 = arith.shrui %58, %c32_i64 : i64
      scf.yield %141 : i64
    } else {
      %c0_i64_37 = arith.constant 0 : i64
      scf.yield %c0_i64_37 : i64
    }
    %61 = arith.trunci %60 : i64 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_18 : i32
    %63 = arith.extui %62 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_19 : i32
    cf.cond_br %64, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c0_i32_20 = arith.constant 0 : i32
    %c0_i32_21 = arith.constant 0 : i32
    call @f134(%arg0, %c0_i32_20, %c0_i32_21) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb3
    %65 = llvm.load %9 : !llvm.ptr -> i64
    %66 = arith.trunci %65 : i64 to i32
    llvm.store %66, %2 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %67 = llvm.load %3 : !llvm.ptr -> i32
    %68 = arith.subi %c-2147483648_i32, %67 : i32
    %69 = arith.cmpi ugt, %66, %68 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_22 : i32
    cf.cond_br %71, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %c0_i32_23 = arith.constant 0 : i32
    %c0_i32_24 = arith.constant 0 : i32
    call @f134(%arg0, %c0_i32_23, %c0_i32_24) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_25 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_25) : (i32) -> ()
    llvm.unreachable
  ^bb7:  // pred: ^bb10
    %72 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c12_i64 : i64
    %75 = llvm.getelementptr %14[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %3 : i32, !llvm.ptr
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %78 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %79 = arith.extui %77 : i32 to i64
    %80 = arith.addi %79, %c0_i64_26 : i64
    %81 = llvm.getelementptr %14[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %81 {alignment = 1 : i64} : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c4_i64 : i64
    %86 = llvm.getelementptr %14[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32_27 = arith.constant 32 : i32
    %88 = arith.addi %87, %c32_i32_27 : i32
    llvm.store %88, %11 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb8:  // 2 preds: ^bb5, ^bb13
    %89 = llvm.load %6 : !llvm.ptr -> i32
    %90 = llvm.load %8 : !llvm.ptr -> i32
    call @f134(%arg0, %89, %90) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_28 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_28) : (i32) -> ()
    llvm.unreachable
  ^bb9:  // pred: ^bb5
    %91 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_29 = arith.constant 0 : i32
    %92 = arith.cmpi ne, %91, %c0_i32_29 : i32
    cf.cond_br %92, ^bb11, ^bb12
  ^bb10:  // 2 preds: ^bb11, ^bb12
    %93 = llvm.load %5 : !llvm.ptr -> i32
    %94 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %95 = arith.extui %93 : i32 to i64
    %96 = arith.addi %95, %c24_i64 : i64
    %97 = llvm.getelementptr %14[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %94, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    %98 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_30 = arith.constant 8 : i32
    %99 = arith.addi %98, %c8_i32_30 : i32
    %100 = llvm.load %3 : !llvm.ptr -> i32
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %102 = llvm.load %5 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %103 = arith.addi %102, %c20_i32 : i32
    call @f116(%arg0, %99, %100, %101, %103) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %104 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %105 = arith.extui %104 : i32 to i64
    %106 = arith.addi %105, %c8_i64 : i64
    %107 = llvm.getelementptr %14[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %108 = llvm.load volatile %107 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_31 = arith.constant 1 : i32
    %109 = arith.cmpi eq, %108, %c1_i32_31 : i32
    %110 = arith.extui %109 : i1 to i32
    %c0_i32_32 = arith.constant 0 : i32
    %111 = arith.cmpi eq, %110, %c0_i32_32 : i32
    %112 = arith.extui %111 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %113 = arith.cmpi ne, %112, %c0_i32_33 : i32
    cf.cond_br %113, ^bb7, ^bb13
  ^bb11:  // pred: ^bb9
    %114 = llvm.load %5 : !llvm.ptr -> i32
    %115 = llvm.load %1 : !llvm.ptr -> i32
    %116 = llvm.load %4 : !llvm.ptr -> i32
    %117 = arith.muli %115, %116 : i32
    %c28_i64 = arith.constant 28 : i64
    %118 = arith.extui %114 : i32 to i64
    %119 = arith.addi %118, %c28_i64 : i64
    %120 = llvm.getelementptr %14[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %117, %120 {alignment = 1 : i64} : i32, !llvm.ptr
    %121 = llvm.load %5 : !llvm.ptr -> i32
    %122 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_34 = arith.constant 4 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c4_i64_34 : i64
    %125 = llvm.getelementptr %14[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %127 = arith.extui %121 : i32 to i64
    %128 = arith.addi %127, %c20_i64 : i64
    %129 = llvm.getelementptr %14[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %129 {alignment = 1 : i64} : i32, !llvm.ptr
    %130 = llvm.load %3 : !llvm.ptr -> i32
    llvm.store %130, %4 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb12:  // pred: ^bb9
    %c0_i32_35 = arith.constant 0 : i32
    llvm.store %c0_i32_35, %4 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb13:  // pred: ^bb10
    %131 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c16_i64 : i64
    %134 = llvm.getelementptr %14[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %135, %8 : i32, !llvm.ptr
    %136 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64_36 = arith.constant 12 : i64
    %137 = arith.extui %136 : i32 to i64
    %138 = arith.addi %137, %c12_i64_36 : i64
    %139 = llvm.getelementptr %14[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = llvm.load volatile %139 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %140, %6 : i32, !llvm.ptr
    cf.br ^bb8
  }
  func.func @f109(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1050344_i32 = arith.constant 1050344 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f146(%arg0, %2, %c1050344_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f110(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f56(%arg0, %17, %18, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f111(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %10 = arith.ori %9, %c-2147483648_i32 : i32
    %c-2147483648_i32_1 = arith.constant -2147483648 : i32
    %11 = arith.cmpi eq, %10, %c-2147483648_i32_1 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_2 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c4_i64 : i64
    %17 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f56(%arg0, %18, %19, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f112(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32, %8 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f113(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %12 = arith.cmpi ult, %11, %c128_i32 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb4, ^bb5
  ^bb2(%15: i32):  // pred: ^bb3
    return %15 : i32
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %17 = arith.addi %16, %c16_i32_4 : i32
    llvm.store %17, %5 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // pred: ^bb1
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c8_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %22, %3 : i32, !llvm.ptr
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = arith.cmpi eq, %22, %27 : i32
    %29 = arith.extui %28 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %30 = arith.cmpi eq, %29, %c0_i32_6 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_7 : i32
    cf.cond_br %32, ^bb13, ^bb14
  ^bb5:  // pred: ^bb1
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c12_i64 : i64
    %36 = llvm.getelementptr %8[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_8, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %38 = arith.cmpi ult, %37, %c2048_i32 : i32
    %39 = arith.extui %38 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_9 : i32
    cf.cond_br %40, ^bb7, ^bb8
  ^bb6:  // 3 preds: ^bb7, ^bb9, ^bb10
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_10 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64_10 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_11 = arith.constant 8 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c8_i64_11 : i64
    %49 = llvm.getelementptr %8[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %50, %3 : i32, !llvm.ptr
    %51 = arith.subi %45, %50 : i32
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %53 = arith.cmpi uge, %51, %52 : i32
    %54 = arith.extui %53 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_12 : i32
    cf.cond_br %55, ^bb11, ^bb12
  ^bb7:  // pred: ^bb5
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %58 = arith.andi %57, %c63_i32 : i32
    %c128_i32_13 = arith.constant 128 : i32
    %59 = arith.ori %58, %c128_i32_13 : i32
    %c13_i64 = arith.constant 13 : i64
    %60 = arith.extui %56 : i32 to i64
    %61 = arith.addi %60, %c13_i64 : i64
    %62 = llvm.getelementptr %8[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = arith.trunci %59 : i32 to i8
    llvm.store volatile %63, %62 {alignment = 1 : i64} : i8, !llvm.ptr
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %65 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32 = arith.constant 31 : i32
    %66 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %67 = scf.if %66 -> (i32) {
      %186 = arith.shrui %65, %c6_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c192_i32 = arith.constant 192 : i32
    %68 = arith.ori %67, %c192_i32 : i32
    %c12_i64_14 = arith.constant 12 : i64
    %69 = arith.extui %64 : i32 to i64
    %70 = arith.addi %69, %c12_i64_14 : i64
    %71 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = arith.trunci %68 : i32 to i8
    llvm.store volatile %72, %71 {alignment = 1 : i64} : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // pred: ^bb5
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %74 = arith.cmpi ult, %73, %c65536_i32 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_15 : i32
    cf.cond_br %76, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_16 = arith.constant 63 : i32
    %79 = arith.andi %78, %c63_i32_16 : i32
    %c128_i32_17 = arith.constant 128 : i32
    %80 = arith.ori %79, %c128_i32_17 : i32
    %c14_i64 = arith.constant 14 : i64
    %81 = arith.extui %77 : i32 to i64
    %82 = arith.addi %81, %c14_i64 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = arith.trunci %80 : i32 to i8
    llvm.store volatile %84, %83 {alignment = 1 : i64} : i8, !llvm.ptr
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %86 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_18 = arith.constant 31 : i32
    %87 = arith.cmpi ule, %c12_i32, %c31_i32_18 : i32
    %88 = scf.if %87 -> (i32) {
      %186 = arith.shrui %86, %c12_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c224_i32 = arith.constant 224 : i32
    %89 = arith.ori %88, %c224_i32 : i32
    %c12_i64_19 = arith.constant 12 : i64
    %90 = arith.extui %85 : i32 to i64
    %91 = arith.addi %90, %c12_i64_19 : i64
    %92 = llvm.getelementptr %8[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = arith.trunci %89 : i32 to i8
    llvm.store volatile %93, %92 {alignment = 1 : i64} : i8, !llvm.ptr
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_20 = arith.constant 6 : i32
    %c31_i32_21 = arith.constant 31 : i32
    %96 = arith.cmpi ule, %c6_i32_20, %c31_i32_21 : i32
    %97 = scf.if %96 -> (i32) {
      %186 = arith.shrui %95, %c6_i32_20 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c63_i32_22 = arith.constant 63 : i32
    %98 = arith.andi %97, %c63_i32_22 : i32
    %c128_i32_23 = arith.constant 128 : i32
    %99 = arith.ori %98, %c128_i32_23 : i32
    %c13_i64_24 = arith.constant 13 : i64
    %100 = arith.extui %94 : i32 to i64
    %101 = arith.addi %100, %c13_i64_24 : i64
    %102 = llvm.getelementptr %8[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = arith.trunci %99 : i32 to i8
    llvm.store volatile %103, %102 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb10:  // pred: ^bb8
    %104 = llvm.load %2 : !llvm.ptr -> i32
    %105 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_25 = arith.constant 63 : i32
    %106 = arith.andi %105, %c63_i32_25 : i32
    %c128_i32_26 = arith.constant 128 : i32
    %107 = arith.ori %106, %c128_i32_26 : i32
    %c15_i64 = arith.constant 15 : i64
    %108 = arith.extui %104 : i32 to i64
    %109 = arith.addi %108, %c15_i64 : i64
    %110 = llvm.getelementptr %8[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = arith.trunci %107 : i32 to i8
    llvm.store volatile %111, %110 {alignment = 1 : i64} : i8, !llvm.ptr
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %113 = llvm.load %1 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_27 = arith.constant 31 : i32
    %114 = arith.cmpi ule, %c18_i32, %c31_i32_27 : i32
    %115 = scf.if %114 -> (i32) {
      %186 = arith.shrui %113, %c18_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c240_i32 = arith.constant 240 : i32
    %116 = arith.ori %115, %c240_i32 : i32
    %c12_i64_28 = arith.constant 12 : i64
    %117 = arith.extui %112 : i32 to i64
    %118 = arith.addi %117, %c12_i64_28 : i64
    %119 = llvm.getelementptr %8[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %120 = arith.trunci %116 : i32 to i8
    llvm.store volatile %120, %119 {alignment = 1 : i64} : i8, !llvm.ptr
    %121 = llvm.load %2 : !llvm.ptr -> i32
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_29 = arith.constant 6 : i32
    %c31_i32_30 = arith.constant 31 : i32
    %123 = arith.cmpi ule, %c6_i32_29, %c31_i32_30 : i32
    %124 = scf.if %123 -> (i32) {
      %186 = arith.shrui %122, %c6_i32_29 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c63_i32_31 = arith.constant 63 : i32
    %125 = arith.andi %124, %c63_i32_31 : i32
    %c128_i32_32 = arith.constant 128 : i32
    %126 = arith.ori %125, %c128_i32_32 : i32
    %c14_i64_33 = arith.constant 14 : i64
    %127 = arith.extui %121 : i32 to i64
    %128 = arith.addi %127, %c14_i64_33 : i64
    %129 = llvm.getelementptr %8[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = arith.trunci %126 : i32 to i8
    llvm.store volatile %130, %129 {alignment = 1 : i64} : i8, !llvm.ptr
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %132 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_34 = arith.constant 12 : i32
    %c31_i32_35 = arith.constant 31 : i32
    %133 = arith.cmpi ule, %c12_i32_34, %c31_i32_35 : i32
    %134 = scf.if %133 -> (i32) {
      %186 = arith.shrui %132, %c12_i32_34 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_48 = arith.constant 0 : i32
      scf.yield %c0_i32_48 : i32
    }
    %c63_i32_36 = arith.constant 63 : i32
    %135 = arith.andi %134, %c63_i32_36 : i32
    %c128_i32_37 = arith.constant 128 : i32
    %136 = arith.ori %135, %c128_i32_37 : i32
    %c13_i64_38 = arith.constant 13 : i64
    %137 = arith.extui %131 : i32 to i64
    %138 = arith.addi %137, %c13_i64_38 : i64
    %139 = llvm.getelementptr %8[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = arith.trunci %136 : i32 to i8
    llvm.store volatile %140, %139 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %141 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c4_i64 : i64
    %144 = llvm.getelementptr %8[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %146 = llvm.load %3 : !llvm.ptr -> i32
    %147 = arith.addi %145, %146 : i32
    %148 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_39 = arith.constant 12 : i32
    %149 = arith.addi %148, %c12_i32_39 : i32
    %150 = llvm.load %1 : !llvm.ptr -> i32
    %151 = call @f187(%arg0, %147, %149, %150) : (!llvm.ptr, i32, i32, i32) -> i32
    %152 = llvm.load %0 : !llvm.ptr -> i32
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %155 = arith.addi %153, %154 : i32
    %c8_i64_40 = arith.constant 8 : i64
    %156 = arith.extui %152 : i32 to i64
    %157 = arith.addi %156, %c8_i64_40 : i64
    %158 = llvm.getelementptr %8[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %155, %158 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %159 = llvm.load %0 : !llvm.ptr -> i32
    %160 = llvm.load %3 : !llvm.ptr -> i32
    %161 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_41 = arith.constant 1 : i32
    %c1_i32_42 = arith.constant 1 : i32
    call @f108(%arg0, %159, %160, %161, %c1_i32_41, %c1_i32_42) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %162 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_43 = arith.constant 8 : i64
    %163 = arith.extui %162 : i32 to i64
    %164 = arith.addi %163, %c8_i64_43 : i64
    %165 = llvm.getelementptr %8[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %166 = llvm.load volatile %165 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %166, %3 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %167 = llvm.load %0 : !llvm.ptr -> i32
    %168 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_44 = arith.constant 1 : i32
    %169 = arith.addi %168, %c1_i32_44 : i32
    %c8_i64_45 = arith.constant 8 : i64
    %170 = arith.extui %167 : i32 to i64
    %171 = arith.addi %170, %c8_i64_45 : i64
    %172 = llvm.getelementptr %8[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %169, %172 {alignment = 1 : i64} : i32, !llvm.ptr
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_46 = arith.constant 4 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c4_i64_46 : i64
    %176 = llvm.getelementptr %8[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %177 = llvm.load volatile %176 {alignment = 1 : i64} : !llvm.ptr -> i32
    %178 = llvm.load %3 : !llvm.ptr -> i32
    %179 = arith.addi %177, %178 : i32
    %180 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %181 = arith.extui %179 : i32 to i64
    %182 = arith.addi %181, %c0_i64_47 : i64
    %183 = llvm.getelementptr %8[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %184 = arith.trunci %180 : i32 to i8
    llvm.store volatile %184, %183 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %185 = llvm.load %0 : !llvm.ptr -> i32
    call @f114(%arg0, %185) : (!llvm.ptr, i32) -> ()
    cf.br ^bb13
  }
  func.func @f114(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %11 = arith.subi %10, %c32_i32 : i32
    llvm.store %11, %1 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %17 = arith.cmpi eq, %16, %c-1_i32 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_4 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_5 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // pred: ^bb10
    return
  ^bb3:  // pred: ^bb1
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %23 = arith.cmpi ule, %c1_i32_6, %c31_i32 : i32
    %24 = scf.if %23 -> (i32) {
      %104 = arith.shli %22, %c1_i32_6 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_31 = arith.constant 0 : i32
      scf.yield %c0_i32_31 : i32
    }
    llvm.store %24, %3 : i32, !llvm.ptr
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_7 = arith.constant 1 : i32
    %26 = arith.addi %25, %c1_i32_7 : i32
    llvm.store %26, %4 : i32, !llvm.ptr
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = arith.cmpi ugt, %27, %28 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_8 : i32
    %32 = arith.select %31, %24, %26 : i32
    llvm.store %32, %3 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %33 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %34 = arith.cmpi ugt, %33, %c8_i32_9 : i32
    %35 = arith.extui %34 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %36 = arith.cmpi ne, %35, %c0_i32_10 : i32
    %37 = arith.select %36, %32, %c8_i32 : i32
    llvm.store %37, %3 : i32, !llvm.ptr
    %c0_i32_11 = arith.constant 0 : i32
    %38 = arith.cmpi sge, %37, %c0_i32_11 : i32
    %39 = arith.extui %38 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_12 : i32
    cf.cond_br %40, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c0_i32_13 = arith.constant 0 : i32
    %c0_i32_14 = arith.constant 0 : i32
    call @f134(%arg0, %c0_i32_13, %c0_i32_14) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb3
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_15 : i32
    cf.cond_br %42, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %c0_i32_16 = arith.constant 0 : i32
    %c0_i32_17 = arith.constant 0 : i32
    call @f134(%arg0, %c0_i32_16, %c0_i32_17) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_18 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_18) : (i32) -> ()
    llvm.unreachable
  ^bb7:  // 2 preds: ^bb8, ^bb9
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %45 = arith.extui %43 : i32 to i64
    %46 = arith.addi %45, %c24_i64 : i64
    %47 = llvm.getelementptr %9[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i32, !llvm.ptr
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_19 = arith.constant 8 : i32
    %49 = arith.addi %48, %c8_i32_19 : i32
    %c1_i32_20 = arith.constant 1 : i32
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %52 = arith.addi %51, %c20_i32 : i32
    call @f116(%arg0, %49, %c1_i32_20, %50, %52) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c8_i64 : i64
    %56 = llvm.getelementptr %9[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_21 = arith.constant 1 : i32
    %58 = arith.cmpi eq, %57, %c1_i32_21 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_22 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_23 : i32
    cf.cond_br %62, ^bb10, ^bb11
  ^bb8:  // pred: ^bb5
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %9[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %9[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %9[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_24 = arith.constant 1 : i32
    llvm.store %c1_i32_24, %2 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb9:  // pred: ^bb5
    %c0_i32_25 = arith.constant 0 : i32
    llvm.store %c0_i32_25, %2 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb10:  // pred: ^bb7
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %9[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_26 : i64
    %86 = llvm.getelementptr %9[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_27 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_27 : i64
    %91 = llvm.getelementptr %9[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_28 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_28 : i32
    llvm.store %93, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb11:  // pred: ^bb7
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_29 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_29 : i64
    %97 = llvm.getelementptr %9[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %9[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f134(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_30 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_30) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f115(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = arith.subi %11, %16 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_3 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = call @f187(%arg0, %29, %30, %31) : (!llvm.ptr, i32, i32, i32) -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = arith.addi %34, %35 : i32
    %c8_i64_4 = arith.constant 8 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c8_i64_4 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // pred: ^bb1
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c1_i32_7 = arith.constant 1 : i32
    call @f108(%arg0, %40, %41, %42, %c1_i32_6, %c1_i32_7) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_8 = arith.constant 8 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c8_i64_8 : i64
    %46 = llvm.getelementptr %6[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %47, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f116(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %9 = arith.cmpi slt, %8, %c0_i32_4 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_5 : i32
    cf.cond_br %11, ^bb4, ^bb5
  ^bb2:  // 2 preds: ^bb3, ^bb17
    return
  ^bb3:  // 2 preds: ^bb4, ^bb16
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %7[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_6, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_7, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_8 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64_8 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %25 = arith.cmpi eq, %24, %c0_i32_9 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_10 : i32
    cf.cond_br %27, ^bb8, ^bb9
  ^bb6:  // 4 preds: ^bb7, ^bb10, ^bb13, ^bb15
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_11 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_12 : i32
    cf.cond_br %31, ^bb16, ^bb17
  ^bb7:  // 2 preds: ^bb12, ^bb14
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %34 = call @f55(%arg0, %32, %33) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %34, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // pred: ^bb5
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %36 = arith.cmpi ne, %35, %c0_i32_13 : i32
    cf.cond_br %36, ^bb14, ^bb15
  ^bb9:  // pred: ^bb5
    %37 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c8_i64 : i64
    %40 = llvm.getelementptr %7[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %41, %4 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_14 : i32
    cf.cond_br %42, ^bb10, ^bb11
  ^bb10:  // pred: ^bb9
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_15 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_15 : i64
    %46 = llvm.getelementptr %7[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    %48 = llvm.load %4 : !llvm.ptr -> i32
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %51 = call @f57(%arg0, %47, %48, %49, %50) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %51, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb11:  // pred: ^bb9
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_16 : i32
    cf.cond_br %53, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %c0_i32_17 = arith.constant 0 : i32
    %c1054185_i64 = arith.constant 1054185 : i64
    %54 = arith.extui %c0_i32_17 : i32 to i64
    %55 = arith.addi %54, %c1054185_i64 : i64
    %56 = llvm.getelementptr %7[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i8
    %58 = arith.extui %57 : i8 to i32
    cf.br ^bb7
  ^bb13:  // pred: ^bb11
    %59 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %59, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb14:  // pred: ^bb8
    %c0_i32_18 = arith.constant 0 : i32
    %c1054185_i64_19 = arith.constant 1054185 : i64
    %60 = arith.extui %c0_i32_18 : i32 to i64
    %61 = arith.addi %60, %c1054185_i64_19 : i64
    %62 = llvm.getelementptr %7[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i8
    %64 = arith.extui %63 : i8 to i32
    cf.br ^bb7
  ^bb15:  // pred: ^bb8
    %65 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %65, %3 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb16:  // pred: ^bb6
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_20 = arith.constant 8 : i64
    %68 = arith.extui %66 : i32 to i64
    %69 = arith.addi %68, %c8_i64_20 : i64
    %70 = llvm.getelementptr %7[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %67, %70 {alignment = 1 : i64} : i32, !llvm.ptr
    %71 = llvm.load %0 : !llvm.ptr -> i32
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_21 = arith.constant 4 : i64
    %73 = arith.extui %71 : i32 to i64
    %74 = arith.addi %73, %c4_i64_21 : i64
    %75 = llvm.getelementptr %7[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %72, %75 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb17:  // pred: ^bb6
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_22 = arith.constant 8 : i64
    %78 = arith.extui %76 : i32 to i64
    %79 = arith.addi %78, %c8_i64_22 : i64
    %80 = llvm.getelementptr %7[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %80 {alignment = 1 : i64} : i32, !llvm.ptr
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %82 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_23 = arith.constant 4 : i64
    %83 = arith.extui %81 : i32 to i64
    %84 = arith.addi %83, %c4_i64_23 : i64
    %85 = llvm.getelementptr %7[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %85 {alignment = 1 : i64} : i32, !llvm.ptr
    %86 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_24 = arith.constant 0 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %87 = arith.extui %86 : i32 to i64
    %88 = arith.addi %87, %c0_i64_25 : i64
    %89 = llvm.getelementptr %7[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_24, %89 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f117(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f118(%arg0, %1) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f118(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %1 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %c12_i64 = arith.constant 12 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c12_i64 : i64
    %18 = llvm.getelementptr %8[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %19, %3 : i32, !llvm.ptr
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64 : i64
    %23 = llvm.getelementptr %8[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %24 : i32, [
      default: ^bb4,
      0: ^bb6,
      1: ^bb5
    ]
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb7, ^bb8
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_3 = arith.constant 4 : i64
    %27 = arith.extui %25 : i32 to i64
    %28 = arith.addi %27, %c4_i64_3 : i64
    %29 = llvm.getelementptr %8[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %26, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %32 = arith.extui %30 : i32 to i64
    %33 = arith.addi %32, %c0_i64_4 : i64
    %34 = llvm.getelementptr %8[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %c1050484_i32 = arith.constant 1050484 : i32
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c4_i64_5 : i64
    %39 = llvm.getelementptr %8[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c8_i64 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %45, %0 : i32, !llvm.ptr
    %c8_i64_6 = arith.constant 8 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c8_i64_6 : i64
    %48 = llvm.getelementptr %8[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i8
    %50 = arith.extui %49 : i8 to i32
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c9_i64 = arith.constant 9 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c9_i64 : i64
    %54 = llvm.getelementptr %8[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i8
    %56 = arith.extui %55 : i8 to i32
    call @f129(%arg0, %35, %c1050484_i32, %40, %50, %56) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // 3 preds: ^bb1, ^bb5, ^bb6
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c0_i64_7 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64_7 : i64
    %60 = llvm.getelementptr %8[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %60 {alignment = 1 : i64} : i32, !llvm.ptr
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_8 = arith.constant 12 : i64
    %63 = arith.extui %61 : i32 to i64
    %64 = arith.addi %63, %c12_i64_8 : i64
    %65 = llvm.getelementptr %8[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %62, %65 {alignment = 1 : i64} : i32, !llvm.ptr
    %66 = llvm.load %1 : !llvm.ptr -> i32
    %c1050512_i32 = arith.constant 1050512 : i32
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_9 = arith.constant 4 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c4_i64_9 : i64
    %70 = llvm.getelementptr %8[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i32
    %72 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_10 = arith.constant 8 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c8_i64_10 : i64
    %75 = llvm.getelementptr %8[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %0 : i32, !llvm.ptr
    %c8_i64_11 = arith.constant 8 : i64
    %77 = arith.extui %76 : i32 to i64
    %78 = arith.addi %77, %c8_i64_11 : i64
    %79 = llvm.getelementptr %8[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i8
    %81 = arith.extui %80 : i8 to i32
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %c9_i64_12 = arith.constant 9 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c9_i64_12 : i64
    %85 = llvm.getelementptr %8[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i8
    %87 = arith.extui %86 : i8 to i32
    call @f129(%arg0, %66, %c1050512_i32, %71, %81, %87) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32_13 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_13) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %88 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %89 = arith.cmpi ne, %88, %c0_i32_14 : i32
    cf.cond_br %89, ^bb4, ^bb8
  ^bb6:  // pred: ^bb1
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %91 = arith.cmpi ne, %90, %c0_i32_15 : i32
    cf.cond_br %91, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %c1_i32_16 = arith.constant 1 : i32
    llvm.store %c1_i32_16, %2 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    llvm.store %c0_i32_17, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // pred: ^bb5
    %92 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c0_i64_18 : i64
    %95 = llvm.getelementptr %8[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %96, %2 : i32, !llvm.ptr
    %c4_i64_19 = arith.constant 4 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c4_i64_19 : i64
    %99 = llvm.getelementptr %8[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %100, %3 : i32, !llvm.ptr
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_20 : i64
    %104 = llvm.getelementptr %8[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %105, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f119(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %9 = arith.subi %8, %c48_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %c0_i32_2 = arith.constant 0 : i32
    %c1054184_i64 = arith.constant 1054184 : i64
    %10 = arith.extui %c0_i32_2 : i32 to i64
    %11 = arith.addi %10, %c1054184_i64 : i64
    %12 = llvm.getelementptr %7[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i8
    %14 = arith.extui %13 : i8 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_3 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_5 = arith.constant 48 : i32
    %19 = arith.addi %18, %c48_i32_5 : i32
    llvm.store %19, %4 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c12_i64 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c1050404_i32 = arith.constant 1050404 : i32
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050404_i32, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c20_i64 = arith.constant 20 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c20_i64 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %34 = arith.extui %32 : i32 to i64
    %35 = arith.addi %34, %c44_i64 : i64
    %36 = llvm.getelementptr %7[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %38 = arith.extui %c31_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %39 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %40 = scf.if %39 -> (i64) {
      %56 = arith.shli %38, %c32_i64 : i64
      scf.yield %56 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i32 = arith.constant 44 : i32
    %42 = arith.addi %41, %c44_i32 : i32
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.ori %40, %43 : i64
    %c32_i64_6 = arith.constant 32 : i64
    %45 = arith.extui %37 : i32 to i64
    %46 = arith.addi %45, %c32_i64_6 : i64
    %47 = llvm.getelementptr %7[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i64, !llvm.ptr
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %50 = arith.addi %49, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %51 = arith.extui %48 : i32 to i64
    %52 = arith.addi %51, %c16_i64 : i64
    %53 = llvm.getelementptr %7[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %55 = arith.addi %54, %c8_i32 : i32
    %c1050436_i32 = arith.constant 1050436 : i32
    call @f141(%arg0, %55, %c1050436_i32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f120(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_2 = arith.constant 0 : i32
    llvm.store %c0_i32_2, %1 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %c1054220_i64 = arith.constant 1054220 : i64
    %6 = arith.extui %c0_i32_4 : i32 to i64
    %7 = arith.addi %6, %c1054220_i64 : i64
    %8 = llvm.getelementptr %5[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %2 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %10 = arith.addi %9, %c1_i32_5 : i32
    %c1054220_i64_6 = arith.constant 1054220 : i64
    %11 = arith.extui %c0_i32_3 : i32 to i64
    %12 = arith.addi %11, %c1054220_i64_6 : i64
    %13 = llvm.getelementptr %5[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i32, !llvm.ptr
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %15 = arith.cmpi slt, %14, %c0_i32_7 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_8 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2(%18: i32):  // pred: ^bb3
    return %18 : i32
  ^bb3:  // 3 preds: ^bb1, ^bb4, ^bb5
    %19 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%19 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_9 = arith.constant 1 : i32
    llvm.store %c1_i32_9, %1 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c1054228_i64 = arith.constant 1054228 : i64
    %20 = arith.extui %c0_i32_10 : i32 to i64
    %21 = arith.addi %20, %c1054228_i64 : i64
    %22 = llvm.getelementptr %5[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i8
    %24 = arith.extui %23 : i8 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_11 : i32
    cf.cond_br %25, ^bb3, ^bb5
  ^bb5:  // pred: ^bb4
    %c0_i32_12 = arith.constant 0 : i32
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c1054228_i64_13 = arith.constant 1054228 : i64
    %27 = arith.extui %c0_i32_12 : i32 to i64
    %28 = arith.addi %27, %c1054228_i64_13 : i64
    %29 = llvm.getelementptr %5[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = arith.trunci %26 : i32 to i8
    llvm.store volatile %30, %29 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %c1054224_i64 = arith.constant 1054224 : i64
    %31 = arith.extui %c0_i32_15 : i32 to i64
    %32 = arith.addi %31, %c1054224_i64 : i64
    %33 = llvm.getelementptr %5[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %35 = arith.addi %34, %c1_i32_16 : i32
    %c1054224_i64_17 = arith.constant 1054224 : i64
    %36 = arith.extui %c0_i32_14 : i32 to i64
    %37 = arith.addi %36, %c1054224_i64_17 : i64
    %38 = llvm.getelementptr %5[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f121(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %2 : i64, !llvm.ptr
    %3 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %1 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_2 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64_2 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %14, %2 : i64, !llvm.ptr
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %17 = arith.extui %15 : i32 to i64
    %18 = arith.addi %17, %c12_i64 : i64
    %19 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %16, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %21 = llvm.load %2 : !llvm.ptr -> i64
    %c4_i64 = arith.constant 4 : i64
    %22 = arith.extui %20 : i32 to i64
    %23 = arith.addi %22, %c4_i64 : i64
    %24 = llvm.getelementptr %7[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %24 {alignment = 1 : i64} : i64, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %26 = arith.addi %25, %c4_i32 : i32
    call @f117(%arg0, %26) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f122(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %12 = arith.subi %11, %c64_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %18 = arith.cmpi eq, %17, %c-2147483648_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb5
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64_8 : i64
    %26 = llvm.getelementptr %10[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %27, %5 : i64, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c0_i64_9 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %33 = arith.addi %32, %c8_i32 : i32
    llvm.store %33, %3 : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_10 = arith.constant 8 : i32
    %35 = arith.addi %34, %c8_i32_10 : i32
    llvm.store %35, %1 : i32, !llvm.ptr
    %c0_i64_11 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_11 : i64
    %38 = llvm.getelementptr %10[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %40 = arith.extui %33 : i32 to i64
    %41 = arith.addi %40, %c0_i64_12 : i64
    %42 = llvm.getelementptr %10[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_14 : i64
    %46 = llvm.getelementptr %10[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %46 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %c1054185_i64 = arith.constant 1054185 : i64
    %47 = arith.extui %c0_i32_15 : i32 to i64
    %48 = arith.addi %47, %c1054185_i64 : i64
    %49 = llvm.getelementptr %10[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i8
    %51 = arith.extui %50 : i8 to i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %54 = arith.extui %52 : i32 to i64
    %55 = arith.addi %54, %c0_i64_16 : i64
    %56 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %c12_i32 = arith.constant 12 : i32
    %c4_i32 = arith.constant 4 : i32
    %57 = call @f55(%arg0, %c12_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %57, %1 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_17 : i32
    cf.cond_br %58, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %59 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c12_i64 : i64
    %62 = llvm.getelementptr %10[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %63, %3 : i32, !llvm.ptr
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %65 = arith.addi %64, %c28_i32 : i32
    %c8_i32_18 = arith.constant 8 : i32
    %66 = arith.addi %65, %c8_i32_18 : i32
    llvm.store %66, %4 : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_20 : i64
    %69 = llvm.getelementptr %10[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_19, %69 {alignment = 1 : i64} : i32, !llvm.ptr
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64_21 = arith.constant 4294967296 : i64
    %c28_i64 = arith.constant 28 : i64
    %71 = arith.extui %70 : i32 to i64
    %72 = arith.addi %71, %c28_i64 : i64
    %73 = llvm.getelementptr %10[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_21, %73 {alignment = 1 : i64} : i64, !llvm.ptr
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %75 = arith.addi %74, %c40_i32 : i32
    %c8_i32_22 = arith.constant 8 : i32
    %76 = arith.addi %75, %c8_i32_22 : i32
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_23 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_23 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %3 : i32, !llvm.ptr
    %c8_i32_24 = arith.constant 8 : i32
    %82 = arith.addi %81, %c8_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c0_i64_25 : i64
    %85 = llvm.getelementptr %10[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_26 = arith.constant 0 : i64
    %87 = arith.extui %76 : i32 to i64
    %88 = arith.addi %87, %c0_i64_26 : i64
    %89 = llvm.getelementptr %10[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %86, %89 {alignment = 1 : i64} : i64, !llvm.ptr
    %90 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_27 = arith.constant 40 : i32
    %91 = arith.addi %90, %c40_i32_27 : i32
    %c16_i32 = arith.constant 16 : i32
    %92 = arith.addi %91, %c16_i32 : i32
    %93 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_28 = arith.constant 16 : i32
    %94 = arith.addi %93, %c16_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c0_i64_29 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %99 = arith.extui %92 : i32 to i64
    %100 = arith.addi %99, %c0_i64_30 : i64
    %101 = llvm.getelementptr %10[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %98, %101 {alignment = 1 : i64} : i64, !llvm.ptr
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %103 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_31 : i64
    %106 = llvm.getelementptr %10[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c40_i64 = arith.constant 40 : i64
    %108 = arith.extui %102 : i32 to i64
    %109 = arith.addi %108, %c40_i64 : i64
    %110 = llvm.getelementptr %10[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %107, %110 {alignment = 1 : i64} : i64, !llvm.ptr
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32_32 = arith.constant 28 : i32
    %112 = arith.addi %111, %c28_i32_32 : i32
    %c1050344_i32 = arith.constant 1050344 : i32
    %113 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_33 = arith.constant 40 : i32
    %114 = arith.addi %113, %c40_i32_33 : i32
    %115 = call @f146(%arg0, %112, %c1050344_i32, %114) : (!llvm.ptr, i32, i32, i32) -> i32
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_34 = arith.constant 16 : i32
    %117 = arith.addi %116, %c16_i32_34 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %118 = arith.addi %117, %c8_i32_35 : i32
    %119 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c0_i64_36 : i64
    %122 = llvm.getelementptr %10[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %123, %3 : i32, !llvm.ptr
    %c0_i64_37 = arith.constant 0 : i64
    %124 = arith.extui %118 : i32 to i64
    %125 = arith.addi %124, %c0_i64_37 : i64
    %126 = llvm.getelementptr %10[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %123, %126 {alignment = 1 : i64} : i32, !llvm.ptr
    %127 = llvm.load %2 : !llvm.ptr -> i32
    %128 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_38 = arith.constant 28 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c28_i64_38 : i64
    %131 = llvm.getelementptr %10[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load volatile %131 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %132, %5 : i64, !llvm.ptr
    %c16_i64 = arith.constant 16 : i64
    %133 = arith.extui %127 : i32 to i64
    %134 = arith.addi %133, %c16_i64 : i64
    %135 = llvm.getelementptr %10[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %132, %135 {alignment = 1 : i64} : i64, !llvm.ptr
    %136 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_39 = arith.constant 8 : i32
    %137 = arith.addi %136, %c8_i32_39 : i32
    %138 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %139 = arith.extui %137 : i32 to i64
    %140 = arith.addi %139, %c0_i64_40 : i64
    %141 = llvm.getelementptr %10[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %141 {alignment = 1 : i64} : i32, !llvm.ptr
    %142 = llvm.load %1 : !llvm.ptr -> i32
    %143 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %144 = arith.extui %142 : i32 to i64
    %145 = arith.addi %144, %c0_i64_41 : i64
    %146 = llvm.getelementptr %10[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %146 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb3
    %147 = llvm.load %1 : !llvm.ptr -> i32
    %148 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c0_i64_42 : i64
    %151 = llvm.getelementptr %10[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_43 = arith.constant 0 : i64
    %153 = arith.extui %147 : i32 to i64
    %154 = arith.addi %153, %c0_i64_43 : i64
    %155 = llvm.getelementptr %10[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %152, %155 {alignment = 1 : i64} : i64, !llvm.ptr
    %156 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_44 = arith.constant 8 : i32
    %157 = arith.addi %156, %c8_i32_44 : i32
    %158 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_45 = arith.constant 0 : i64
    %159 = arith.extui %158 : i32 to i64
    %160 = arith.addi %159, %c0_i64_45 : i64
    %161 = llvm.getelementptr %10[%160] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %162 = llvm.load volatile %161 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_46 = arith.constant 0 : i64
    %163 = arith.extui %157 : i32 to i64
    %164 = arith.addi %163, %c0_i64_46 : i64
    %165 = llvm.getelementptr %10[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %162, %165 {alignment = 1 : i64} : i32, !llvm.ptr
    %166 = llvm.load %0 : !llvm.ptr -> i32
    %c1050452_i32 = arith.constant 1050452 : i32
    %c4_i64 = arith.constant 4 : i64
    %167 = arith.extui %166 : i32 to i64
    %168 = arith.addi %167, %c4_i64 : i64
    %169 = llvm.getelementptr %10[%168] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050452_i32, %169 {alignment = 1 : i64} : i32, !llvm.ptr
    %170 = llvm.load %0 : !llvm.ptr -> i32
    %171 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %172 = arith.extui %170 : i32 to i64
    %173 = arith.addi %172, %c0_i64_47 : i64
    %174 = llvm.getelementptr %10[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %171, %174 {alignment = 1 : i64} : i32, !llvm.ptr
    %175 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_48 = arith.constant 64 : i32
    %176 = arith.addi %175, %c64_i32_48 : i32
    llvm.store %176, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb6:  // pred: ^bb3
    %c4_i32_49 = arith.constant 4 : i32
    %c12_i32_50 = arith.constant 12 : i32
    call @f135(%arg0, %c4_i32_49, %c12_i32_50) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f123(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %12 = arith.subi %11, %c48_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %18 = arith.cmpi eq, %17, %c-2147483648_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c1050452_i32 = arith.constant 1050452 : i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %10[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050452_i32, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %29 = arith.extui %27 : i32 to i64
    %30 = arith.addi %29, %c0_i64_8 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_9 = arith.constant 48 : i32
    %33 = arith.addi %32, %c48_i32_9 : i32
    llvm.store %33, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c12_i64 : i64
    %37 = llvm.getelementptr %10[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %40 = arith.addi %39, %c12_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %41 = arith.addi %40, %c8_i32 : i32
    llvm.store %41, %4 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64_11 : i64
    %44 = llvm.getelementptr %10[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_10, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c12_i64_12 = arith.constant 12 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c12_i64_12 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %48 {alignment = 1 : i64} : i64, !llvm.ptr
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %50 = arith.addi %49, %c24_i32 : i32
    %c8_i32_13 = arith.constant 8 : i32
    %51 = arith.addi %50, %c8_i32_13 : i32
    %52 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %53 = arith.extui %52 : i32 to i64
    %54 = arith.addi %53, %c0_i64_14 : i64
    %55 = llvm.getelementptr %10[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = llvm.load volatile %55 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %56, %3 : i32, !llvm.ptr
    %c8_i32_15 = arith.constant 8 : i32
    %57 = arith.addi %56, %c8_i32_15 : i32
    %c0_i64_16 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64_16 : i64
    %60 = llvm.getelementptr %10[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %62 = arith.extui %51 : i32 to i64
    %63 = arith.addi %62, %c0_i64_17 : i64
    %64 = llvm.getelementptr %10[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %61, %64 {alignment = 1 : i64} : i64, !llvm.ptr
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_18 = arith.constant 24 : i32
    %66 = arith.addi %65, %c24_i32_18 : i32
    %c16_i32 = arith.constant 16 : i32
    %67 = arith.addi %66, %c16_i32 : i32
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_19 = arith.constant 16 : i32
    %69 = arith.addi %68, %c16_i32_19 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c0_i64_20 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %74 = arith.extui %67 : i32 to i64
    %75 = arith.addi %74, %c0_i64_21 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i64, !llvm.ptr
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c0_i64_22 : i64
    %81 = llvm.getelementptr %10[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c24_i64 = arith.constant 24 : i64
    %83 = arith.extui %77 : i32 to i64
    %84 = arith.addi %83, %c24_i64 : i64
    %85 = llvm.getelementptr %10[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %85 {alignment = 1 : i64} : i64, !llvm.ptr
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_23 = arith.constant 12 : i32
    %87 = arith.addi %86, %c12_i32_23 : i32
    %c1050344_i32 = arith.constant 1050344 : i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_24 = arith.constant 24 : i32
    %89 = arith.addi %88, %c24_i32_24 : i32
    %90 = call @f146(%arg0, %87, %c1050344_i32, %89) : (!llvm.ptr, i32, i32, i32) -> i32
    %91 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_25 = arith.constant 8 : i32
    %92 = arith.addi %91, %c8_i32_25 : i32
    %93 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c0_i64_26 : i64
    %96 = llvm.getelementptr %10[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %97, %3 : i32, !llvm.ptr
    %c0_i64_27 = arith.constant 0 : i64
    %98 = arith.extui %92 : i32 to i64
    %99 = arith.addi %98, %c0_i64_27 : i64
    %100 = llvm.getelementptr %10[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %97, %100 {alignment = 1 : i64} : i32, !llvm.ptr
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_28 = arith.constant 12 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c12_i64_28 : i64
    %105 = llvm.getelementptr %10[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %106, %5 : i64, !llvm.ptr
    %c0_i64_29 = arith.constant 0 : i64
    %107 = arith.extui %101 : i32 to i64
    %108 = arith.addi %107, %c0_i64_29 : i64
    %109 = llvm.getelementptr %10[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %106, %109 {alignment = 1 : i64} : i64, !llvm.ptr
    %110 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_30 = arith.constant 8 : i32
    %111 = arith.addi %110, %c8_i32_30 : i32
    %112 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %113 = arith.extui %111 : i32 to i64
    %114 = arith.addi %113, %c0_i64_31 : i64
    %115 = llvm.getelementptr %10[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i32, !llvm.ptr
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %117 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_32 = arith.constant 0 : i64
    %118 = arith.extui %116 : i32 to i64
    %119 = arith.addi %118, %c0_i64_32 : i64
    %120 = llvm.getelementptr %10[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %117, %120 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f124(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %15 = arith.cmpi eq, %14, %c-2147483648_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_2 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb3
    return %18 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_3 = arith.constant 32 : i32
    %20 = arith.addi %19, %c32_i32_3 : i32
    llvm.store %20, %4 : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%21 : i32)
  ^bb4:  // pred: ^bb1
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32 : i32
    %c8_i32_4 = arith.constant 8 : i32
    %24 = arith.addi %23, %c8_i32_4 : i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %28 = llvm.getelementptr %7[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64_5 : i64
    %32 = llvm.getelementptr %7[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %33, %0 : i32, !llvm.ptr
    %c8_i32_6 = arith.constant 8 : i32
    %34 = arith.addi %33, %c8_i32_6 : i32
    %c0_i64_7 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_7 : i64
    %37 = llvm.getelementptr %7[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    %39 = arith.extui %24 : i32 to i64
    %40 = arith.addi %39, %c0_i64_8 : i64
    %41 = llvm.getelementptr %7[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %38, %41 {alignment = 1 : i64} : i64, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %43 = arith.addi %42, %c8_i32_9 : i32
    %c16_i32 = arith.constant 16 : i32
    %44 = arith.addi %43, %c16_i32 : i32
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_10 = arith.constant 16 : i32
    %46 = arith.addi %45, %c16_i32_10 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c0_i64_11 : i64
    %49 = llvm.getelementptr %7[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    %51 = arith.extui %44 : i32 to i64
    %52 = arith.addi %51, %c0_i64_12 : i64
    %53 = llvm.getelementptr %7[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i64, !llvm.ptr
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64_13 : i64
    %58 = llvm.getelementptr %7[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64 = arith.constant 8 : i64
    %60 = arith.extui %54 : i32 to i64
    %61 = arith.addi %60, %c8_i64 : i64
    %62 = llvm.getelementptr %7[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %62 {alignment = 1 : i64} : i64, !llvm.ptr
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c20_i64 : i64
    %66 = llvm.getelementptr %7[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i32
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c24_i64 : i64
    %71 = llvm.getelementptr %7[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i32
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_14 = arith.constant 8 : i32
    %74 = arith.addi %73, %c8_i32_14 : i32
    %75 = call @f146(%arg0, %67, %72, %74) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %75, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %76 = llvm.load %1 : !llvm.ptr -> i32
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c4_i64 : i64
    %80 = llvm.getelementptr %7[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_15 = arith.constant 8 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c8_i64_15 : i64
    %85 = llvm.getelementptr %7[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i32
    %87 = call @f170(%arg0, %76, %81, %86) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %87, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f125(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_3 = arith.constant 0 : i32
    %c1054185_i64 = arith.constant 1054185 : i64
    %7 = arith.extui %c0_i32_3 : i32 to i64
    %8 = arith.addi %7, %c1054185_i64 : i64
    %9 = llvm.getelementptr %6[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i8
    %11 = arith.extui %10 : i8 to i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c4_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %3 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %22 = call @f55(%arg0, %c8_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %22, %1 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_4 : i32
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %26 = arith.extui %24 : i32 to i64
    %27 = arith.addi %26, %c4_i64_5 : i64
    %28 = llvm.getelementptr %6[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %25, %28 {alignment = 1 : i64} : i32, !llvm.ptr
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_6 = arith.constant 0 : i64
    %31 = arith.extui %29 : i32 to i64
    %32 = arith.addi %31, %c0_i64_6 : i64
    %33 = llvm.getelementptr %6[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %30, %33 {alignment = 1 : i64} : i32, !llvm.ptr
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c1050468_i32 = arith.constant 1050468 : i32
    %c4_i64_7 = arith.constant 4 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c4_i64_7 : i64
    %37 = llvm.getelementptr %6[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050468_i32, %37 {alignment = 1 : i64} : i32, !llvm.ptr
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %40 = arith.extui %38 : i32 to i64
    %41 = arith.addi %40, %c0_i64_8 : i64
    %42 = llvm.getelementptr %6[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c4_i32_9 = arith.constant 4 : i32
    %c8_i32_10 = arith.constant 8 : i32
    call @f135(%arg0, %c4_i32_9, %c8_i32_10) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f126(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c1050468_i32 = arith.constant 1050468 : i32
    %c4_i64 = arith.constant 4 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c4_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050468_i32, %8 {alignment = 1 : i64} : i32, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %9 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f127(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1 = arith.constant 0 : i64
    %11 = arith.extui %5 : i32 to i64
    %12 = arith.addi %11, %c0_i64_1 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f128(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c4_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %16 = call @f170(%arg0, %5, %10, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f129(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    %19 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %15 : !llvm.ptr -> i64
    %21 = arith.trunci %20 : i64 to i32
    %22 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %15 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %25 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %26 = arith.subi %25, %c32_i32 : i32
    llvm.store %26, %5 : i32, !llvm.ptr
    llvm.store %26, %8 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %27 = call @f120(%arg0, %c1_i32_6) : (!llvm.ptr, i32) -> i32
    %c255_i32 = arith.constant 255 : i32
    %28 = arith.andi %27, %c255_i32 : i32
    llvm.store %28, %6 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %29 = arith.cmpi eq, %28, %c2_i32 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_7 : i32
    cf.cond_br %31, ^bb4, ^bb5
  ^bb2:  // no predecessors
    return
  ^bb3:  // 4 preds: ^bb4, ^bb5, ^bb16, ^bb34
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c0_i32_8 = arith.constant 0 : i32
    %c1054208_i64 = arith.constant 1054208 : i64
    %32 = arith.extui %c0_i32_8 : i32 to i64
    %33 = arith.addi %32, %c1054208_i64 : i64
    %34 = llvm.getelementptr %11[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %35, %6 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %36 = arith.cmpi sle, %35, %c-1_i32 : i32
    %37 = arith.extui %36 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_9 : i32
    cf.cond_br %38, ^bb3, ^bb15
  ^bb5:  // pred: ^bb1
    %39 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_10 = arith.constant 1 : i32
    %40 = arith.andi %39, %c1_i32_10 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %41 = arith.cmpi eq, %40, %c0_i32_11 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_12 : i32
    cf.cond_br %43, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %44 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %45 = arith.addi %44, %c8_i32 : i32
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c24_i64 : i64
    %50 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i32
    %52 = arith.cmpi ult, %51, %18 : i32
    cf.cond_br %52, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %53 = llvm.getelementptr inbounds %16[%51] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %54 = llvm.load %53 : !llvm.ptr -> !llvm.ptr
    %55 = llvm.ptrtoint %54 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %56 = arith.cmpi eq, %55, %c0_i64 : i64
    cf.cond_br %56, ^bb10, ^bb9
  ^bb8:  // pred: ^bb6
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %57 = llvm.getelementptr %54[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %58 = llvm.getelementptr %54[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %59 = llvm.getelementptr %54[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %60 = llvm.load %57 : !llvm.ptr -> !llvm.ptr
    %61 = llvm.load %59 : !llvm.ptr -> !llvm.ptr
    %62 = llvm.ptrtoint %60 : !llvm.ptr to i64
    %c0_i64_13 = arith.constant 0 : i64
    %63 = arith.cmpi eq, %62, %c0_i64_13 : i64
    cf.cond_br %63, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %64 = llvm.load %58 : !llvm.ptr -> i32
    %65 = arith.cmpi ne, %13, %64 : i32
    cf.cond_br %65, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_14 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_14) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %66 = llvm.call %60(%61, %45, %46) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c9_i32_15 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_15) : (i32) -> ()
    llvm.unreachable
  ^bb14:  // pred: ^bb11
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb4
    %c0_i32_16 = arith.constant 0 : i32
    %67 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_17 = arith.constant 1 : i32
    %68 = arith.addi %67, %c1_i32_17 : i32
    %c1054208_i64_18 = arith.constant 1054208 : i64
    %69 = arith.extui %c0_i32_16 : i32 to i64
    %70 = arith.addi %69, %c1054208_i64_18 : i64
    %71 = llvm.getelementptr %11[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    %c1054212_i64 = arith.constant 1054212 : i64
    %72 = arith.extui %c0_i32_19 : i32 to i64
    %73 = arith.addi %72, %c1054212_i64 : i64
    %74 = llvm.getelementptr %11[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = llvm.load volatile %74 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %76 = arith.cmpi eq, %75, %c0_i32_20 : i32
    %77 = arith.extui %76 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %78 = arith.cmpi ne, %77, %c0_i32_21 : i32
    cf.cond_br %78, ^bb16, ^bb17
  ^bb16:  // 2 preds: ^bb15, ^bb32
    %c0_i32_22 = arith.constant 0 : i32
    %79 = llvm.load %6 : !llvm.ptr -> i32
    %c1054208_i64_23 = arith.constant 1054208 : i64
    %80 = arith.extui %c0_i32_22 : i32 to i64
    %81 = arith.addi %80, %c1054208_i64_23 : i64
    %82 = llvm.getelementptr %11[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %79, %82 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    %c0_i32_25 = arith.constant 0 : i32
    %c1054228_i64 = arith.constant 1054228 : i64
    %83 = arith.extui %c0_i32_24 : i32 to i64
    %84 = arith.addi %83, %c1054228_i64 : i64
    %85 = llvm.getelementptr %11[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = arith.trunci %c0_i32_25 : i32 to i8
    llvm.store volatile %86, %85 {alignment = 1 : i64} : i8, !llvm.ptr
    %87 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %88 = arith.cmpi eq, %87, %c0_i32_26 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_27 : i32
    cf.cond_br %90, ^bb3, ^bb34
  ^bb17:  // pred: ^bb15
    %91 = llvm.load %5 : !llvm.ptr -> i32
    %92 = llvm.load %0 : !llvm.ptr -> i32
    %93 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c20_i64 : i64
    %96 = llvm.getelementptr %11[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    %98 = arith.cmpi ult, %97, %21 : i32
    cf.cond_br %98, ^bb18, ^bb19
  ^bb18:  // 2 preds: ^bb17, ^bb19
    %99 = llvm.getelementptr inbounds %19[%97] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %100 = llvm.load %99 : !llvm.ptr -> !llvm.ptr
    %101 = llvm.ptrtoint %100 : !llvm.ptr to i64
    %c0_i64_28 = arith.constant 0 : i64
    %102 = arith.cmpi eq, %101, %c0_i64_28 : i64
    cf.cond_br %102, ^bb21, ^bb20
  ^bb19:  // pred: ^bb17
    %c3_i32_29 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_29) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %103 = llvm.getelementptr %100[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %104 = llvm.getelementptr %100[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %105 = llvm.getelementptr %100[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %106 = llvm.load %103 : !llvm.ptr -> !llvm.ptr
    %107 = llvm.load %105 : !llvm.ptr -> !llvm.ptr
    %108 = llvm.ptrtoint %106 : !llvm.ptr to i64
    %c0_i64_30 = arith.constant 0 : i64
    %109 = arith.cmpi eq, %108, %c0_i64_30 : i64
    cf.cond_br %109, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c4_i32_31 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_31) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %110 = llvm.load %104 : !llvm.ptr -> i32
    %111 = arith.cmpi ne, %13, %110 : i32
    cf.cond_br %111, ^bb25, ^bb24
  ^bb23:  // pred: ^bb20
    %c3_i32_32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_32) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %112 = llvm.call %106(%107, %91, %92) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %113 = llvm.load %5 : !llvm.ptr -> i32
    %114 = llvm.load %4 : !llvm.ptr -> i32
    %c29_i64 = arith.constant 29 : i64
    %115 = arith.extui %113 : i32 to i64
    %116 = arith.addi %115, %c29_i64 : i64
    %117 = llvm.getelementptr %11[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %118 = arith.trunci %114 : i32 to i8
    llvm.store volatile %118, %117 {alignment = 1 : i64} : i8, !llvm.ptr
    %119 = llvm.load %5 : !llvm.ptr -> i32
    %120 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %121 = arith.extui %119 : i32 to i64
    %122 = arith.addi %121, %c28_i64 : i64
    %123 = llvm.getelementptr %11[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = arith.trunci %120 : i32 to i8
    llvm.store volatile %124, %123 {alignment = 1 : i64} : i8, !llvm.ptr
    %125 = llvm.load %5 : !llvm.ptr -> i32
    %126 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_33 = arith.constant 24 : i64
    %127 = arith.extui %125 : i32 to i64
    %128 = arith.addi %127, %c24_i64_33 : i64
    %129 = llvm.getelementptr %11[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %129 {alignment = 1 : i64} : i32, !llvm.ptr
    %130 = llvm.load %5 : !llvm.ptr -> i32
    %131 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_34 : i64
    %134 = llvm.getelementptr %11[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %136 = arith.extui %130 : i32 to i64
    %137 = arith.addi %136, %c16_i64 : i64
    %138 = llvm.getelementptr %11[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %135, %138 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_35 = arith.constant 0 : i32
    %c1054212_i64_36 = arith.constant 1054212 : i64
    %139 = arith.extui %c0_i32_35 : i32 to i64
    %140 = arith.addi %139, %c1054212_i64_36 : i64
    %141 = llvm.getelementptr %11[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %142 = llvm.load volatile %141 {alignment = 1 : i64} : !llvm.ptr -> i32
    %143 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %144 = arith.addi %143, %c16_i32 : i32
    %c0_i32_37 = arith.constant 0 : i32
    %c1054216_i64 = arith.constant 1054216 : i64
    %145 = arith.extui %c0_i32_37 : i32 to i64
    %146 = arith.addi %145, %c1054216_i64 : i64
    %147 = llvm.getelementptr %11[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64_38 = arith.constant 20 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c20_i64_38 : i64
    %151 = llvm.getelementptr %11[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    %153 = arith.cmpi ult, %152, %24 : i32
    cf.cond_br %153, ^bb26, ^bb27
  ^bb25:  // pred: ^bb22
    %c5_i32_39 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_39) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %154 = llvm.getelementptr inbounds %22[%152] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %155 = llvm.load %154 : !llvm.ptr -> !llvm.ptr
    %156 = llvm.ptrtoint %155 : !llvm.ptr to i64
    %c0_i64_40 = arith.constant 0 : i64
    %157 = arith.cmpi eq, %156, %c0_i64_40 : i64
    cf.cond_br %157, ^bb29, ^bb28
  ^bb27:  // pred: ^bb24
    %c3_i32_41 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_41) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %158 = llvm.getelementptr %155[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %159 = llvm.getelementptr %155[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %160 = llvm.getelementptr %155[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %161 = llvm.load %158 : !llvm.ptr -> !llvm.ptr
    %162 = llvm.load %160 : !llvm.ptr -> !llvm.ptr
    %163 = llvm.ptrtoint %161 : !llvm.ptr to i64
    %c0_i64_42 = arith.constant 0 : i64
    %164 = arith.cmpi eq, %163, %c0_i64_42 : i64
    cf.cond_br %164, ^bb31, ^bb30
  ^bb29:  // pred: ^bb26
    %c4_i32_43 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_43) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %165 = llvm.load %159 : !llvm.ptr -> i32
    %166 = arith.cmpi ne, %13, %165 : i32
    cf.cond_br %166, ^bb33, ^bb32
  ^bb31:  // pred: ^bb28
    %c3_i32_44 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_44) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %167 = llvm.call %161(%162, %142, %144) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c0_i32_45 = arith.constant 0 : i32
    %c1054208_i64_46 = arith.constant 1054208 : i64
    %168 = arith.extui %c0_i32_45 : i32 to i64
    %169 = arith.addi %168, %c1054208_i64_46 : i64
    %170 = llvm.getelementptr %11[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-1_i32_47 = arith.constant -1 : i32
    %172 = arith.addi %171, %c-1_i32_47 : i32
    llvm.store %172, %6 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb33:  // pred: ^bb30
    %c5_i32_48 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_48) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // pred: ^bb16
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %174 = llvm.load %1 : !llvm.ptr -> i32
    call @f130(%arg0, %173, %174) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f130(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f132(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> i32
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f131(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %c1054204_i64 = arith.constant 1054204 : i64
    %15 = arith.extui %c0_i32_2 : i32 to i64
    %16 = arith.addi %15, %c1054204_i64 : i64
    %17 = llvm.getelementptr %5[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %18, %2 : i32, !llvm.ptr
    %c32_i32 = arith.constant 32 : i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_3 : i32
    %21 = arith.select %20, %18, %c32_i32 : i32
    %22 = arith.cmpi ult, %21, %12 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.getelementptr inbounds %10[%21] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.ptrtoint %24 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.cmpi eq, %25, %c0_i64 : i64
    cf.cond_br %26, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %27 = llvm.getelementptr %24[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.getelementptr %24[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.getelementptr %24[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %30 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.ptrtoint %30 : !llvm.ptr to i64
    %c0_i64_4 = arith.constant 0 : i64
    %33 = arith.cmpi eq, %32, %c0_i64_4 : i64
    cf.cond_br %33, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %34 = llvm.load %28 : !llvm.ptr -> i32
    %35 = arith.cmpi ne, %7, %34 : i32
    cf.cond_br %35, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_5 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_5) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %36 = llvm.call %30(%31, %13, %14) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f132(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2(%2: i32):  // no predecessors
    return %2 : i32
  }
  func.func @f133(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %7 = arith.subi %6, %c32_i32 : i32
    llvm.store %7, %0 : i32, !llvm.ptr
    llvm.store %7, %2 : i32, !llvm.ptr
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %c24_i64 = arith.constant 24 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c24_i64 : i64
    %11 = llvm.getelementptr %5[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_0, %11 {alignment = 1 : i64} : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %c12_i64 = arith.constant 12 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c12_i64 : i64
    %15 = llvm.getelementptr %5[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c1050560_i32 = arith.constant 1050560 : i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %19 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050560_i32, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %c16_i64 = arith.constant 16 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c16_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %25 = arith.addi %24, %c8_i32 : i32
    %c1050588_i32 = arith.constant 1050588 : i32
    call @f141(%arg0, %25, %c1050588_i32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f134(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // pred: ^bb1
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %5 = llvm.load %1 : !llvm.ptr -> i32
    call @f135(%arg0, %4, %5) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    call @f133(%arg0) : (!llvm.ptr) -> ()
    %c9_i32_1 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_1) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f135(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    call @f37(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f136(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c0_i64_4 : i64
    %16 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c1051212_i32 = arith.constant 1051212 : i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051212_i32, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c20_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %35 = arith.extui %c31_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %36 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %37 = scf.if %36 -> (i64) {
      %62 = arith.shli %35, %c32_i64 : i64
      scf.yield %62 : i64
    } else {
      %c0_i64_6 = arith.constant 0 : i64
      scf.yield %c0_i64_6 : i64
    }
    llvm.store %37, %4 : i64, !llvm.ptr
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %39 = arith.addi %38, %c4_i32 : i32
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.ori %37, %40 : i64
    %c40_i64 = arith.constant 40 : i64
    %42 = arith.extui %34 : i32 to i64
    %43 = arith.addi %42, %c40_i64 : i64
    %44 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %4 : !llvm.ptr -> i64
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.ori %46, %48 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %50 = arith.extui %45 : i32 to i64
    %51 = arith.addi %50, %c32_i64_5 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %55 = arith.addi %54, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c16_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    call @f141(%arg0, %60, %61) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f137(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c0_i64_4 : i64
    %21 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c1050784_i32 = arith.constant 1050784 : i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050784_i32, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c20_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %35 = arith.extui %c31_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %36 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %37 = scf.if %36 -> (i64) {
      %62 = arith.shli %35, %c32_i64 : i64
      scf.yield %62 : i64
    } else {
      %c0_i64_6 = arith.constant 0 : i64
      scf.yield %c0_i64_6 : i64
    }
    llvm.store %37, %4 : i64, !llvm.ptr
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.ori %37, %39 : i64
    %c40_i64 = arith.constant 40 : i64
    %41 = arith.extui %34 : i32 to i64
    %42 = arith.addi %41, %c40_i64 : i64
    %43 = llvm.getelementptr %9[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i64, !llvm.ptr
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %45 = llvm.load %4 : !llvm.ptr -> i64
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %47 = arith.addi %46, %c4_i32 : i32
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.ori %45, %48 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %50 = arith.extui %44 : i32 to i64
    %51 = arith.addi %50, %c32_i64_5 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %55 = arith.addi %54, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c16_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    call @f141(%arg0, %60, %61) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f138(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c0_i64_4 : i64
    %16 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c1051244_i32 = arith.constant 1051244 : i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051244_i32, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c20_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %35 = arith.extui %c31_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %36 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %37 = scf.if %36 -> (i64) {
      %62 = arith.shli %35, %c32_i64 : i64
      scf.yield %62 : i64
    } else {
      %c0_i64_6 = arith.constant 0 : i64
      scf.yield %c0_i64_6 : i64
    }
    llvm.store %37, %4 : i64, !llvm.ptr
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %39 = arith.addi %38, %c4_i32 : i32
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.ori %37, %40 : i64
    %c40_i64 = arith.constant 40 : i64
    %42 = arith.extui %34 : i32 to i64
    %43 = arith.addi %42, %c40_i64 : i64
    %44 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %4 : !llvm.ptr -> i64
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.ori %46, %48 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %50 = arith.extui %45 : i32 to i64
    %51 = arith.addi %50, %c32_i64_5 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %55 = arith.addi %54, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c16_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    call @f141(%arg0, %60, %61) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f139(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    %19 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %19 : !llvm.ptr -> i32
    %21 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %15 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    %24 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %15 : !llvm.ptr -> i64
    %26 = arith.trunci %25 : i64 to i32
    %27 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %15 : !llvm.ptr -> i64
    %29 = arith.trunci %28 : i64 to i32
    %30 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %15 : !llvm.ptr -> i64
    %32 = arith.trunci %31 : i64 to i32
    %33 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.load %15 : !llvm.ptr -> i64
    %35 = arith.trunci %34 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c8_i64 : i64
    %39 = llvm.getelementptr %11[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %40, %3 : i32, !llvm.ptr
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64 : i64
    %44 = llvm.getelementptr %11[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %45, %4 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_8 : i32
    cf.cond_br %46, ^bb4, ^bb5
  ^bb2(%47: i32):  // 7 preds: ^bb41, ^bb64, ^bb82, ^bb93, ^bb94, ^bb97, ^bb113
    return %47 : i32
  ^bb3:  // pred: ^bb5
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c20_i64 : i64
    %51 = llvm.getelementptr %11[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c24_i64 : i64
    %58 = llvm.getelementptr %11[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c12_i64 : i64
    %62 = llvm.getelementptr %11[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i32
    %64 = arith.cmpi ult, %63, %35 : i32
    cf.cond_br %64, ^bb107, ^bb108
  ^bb4:  // 2 preds: ^bb1, ^bb6
    %65 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    %66 = arith.andi %65, %c1_i32_9 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %67 = arith.cmpi eq, %66, %c0_i32_10 : i32
    %68 = arith.extui %67 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_11 : i32
    cf.cond_br %69, ^bb7, ^bb8
  ^bb5:  // pred: ^bb1
    %70 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_12 = arith.constant 1 : i32
    %71 = arith.andi %70, %c1_i32_12 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %72 = arith.cmpi eq, %71, %c0_i32_13 : i32
    %73 = arith.extui %72 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %74 = arith.cmpi ne, %73, %c0_i32_14 : i32
    cf.cond_br %74, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    cf.br ^bb4
  ^bb7:  // 4 preds: ^bb4, ^bb9, ^bb13, ^bb26
    %75 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_15 : i32
    cf.cond_br %76, ^bb33, ^bb34
  ^bb8:  // pred: ^bb4
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %79 = arith.addi %77, %78 : i32
    llvm.store %79, %5 : i32, !llvm.ptr
    %80 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_16 = arith.constant 12 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c12_i64_16 : i64
    %83 = llvm.getelementptr %11[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load volatile %83 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %84, %6 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %85 = arith.cmpi ne, %84, %c0_i32_17 : i32
    cf.cond_br %85, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %86 = llvm.load %8 : !llvm.ptr -> i32
    %87 = llvm.load %5 : !llvm.ptr -> i32
    %88 = arith.cmpi eq, %86, %87 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_18 : i32
    cf.cond_br %90, ^bb7, ^bb23
  ^bb10:  // pred: ^bb8
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %7 : i32, !llvm.ptr
    %91 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %91, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c0_i32_20 = arith.constant 0 : i32
    llvm.store %c0_i32_20, %7 : i32, !llvm.ptr
    %92 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %92, %8 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb22
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb15
    %93 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %93, %3 : i32, !llvm.ptr
    %94 = llvm.load %5 : !llvm.ptr -> i32
    %95 = arith.cmpi eq, %93, %94 : i32
    %96 = arith.extui %95 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %97 = arith.cmpi ne, %96, %c0_i32_21 : i32
    cf.cond_br %97, ^bb7, ^bb14
  ^bb14:  // pred: ^bb13
    %98 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c0_i64_22 : i64
    %101 = llvm.getelementptr %11[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i8
    %103 = arith.extsi %102 : i8 to i32
    llvm.store %103, %8 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %104 = arith.cmpi sle, %103, %c-1_i32 : i32
    %105 = arith.extui %104 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %106 = arith.cmpi ne, %105, %c0_i32_23 : i32
    cf.cond_br %106, ^bb16, ^bb17
  ^bb15:  // 4 preds: ^bb17, ^bb19, ^bb20, ^bb21
    %107 = llvm.load %8 : !llvm.ptr -> i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %109 = arith.subi %107, %108 : i32
    %110 = llvm.load %7 : !llvm.ptr -> i32
    %111 = arith.addi %109, %110 : i32
    llvm.store %111, %7 : i32, !llvm.ptr
    %112 = llvm.load %6 : !llvm.ptr -> i32
    %c-1_i32_24 = arith.constant -1 : i32
    %113 = arith.addi %112, %c-1_i32_24 : i32
    llvm.store %113, %6 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %114 = arith.cmpi ne, %113, %c0_i32_25 : i32
    cf.cond_br %114, ^bb13, ^bb22
  ^bb16:  // pred: ^bb14
    %115 = llvm.load %8 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %116 = arith.cmpi uge, %115, %c-32_i32 : i32
    %117 = arith.extui %116 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %118 = arith.cmpi ne, %117, %c0_i32_26 : i32
    cf.cond_br %118, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %119 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_27 = arith.constant 1 : i32
    %120 = arith.addi %119, %c1_i32_27 : i32
    llvm.store %120, %8 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb18:  // pred: ^bb16
    %121 = llvm.load %8 : !llvm.ptr -> i32
    %c-16_i32 = arith.constant -16 : i32
    %122 = arith.cmpi uge, %121, %c-16_i32 : i32
    %123 = arith.extui %122 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %124 = arith.cmpi ne, %123, %c0_i32_28 : i32
    cf.cond_br %124, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %125 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %126 = arith.addi %125, %c2_i32 : i32
    llvm.store %126, %8 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb20:  // pred: ^bb18
    %127 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %128 = arith.addi %127, %c4_i32 : i32
    llvm.store %128, %8 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb21:  // pred: ^bb18
    %129 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %130 = arith.addi %129, %c3_i32 : i32
    llvm.store %130, %8 : i32, !llvm.ptr
    cf.br ^bb15
  ^bb22:  // pred: ^bb15
    cf.br ^bb12
  ^bb23:  // pred: ^bb9
    %131 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_29 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_29 : i64
    %134 = llvm.getelementptr %11[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i8
    %136 = arith.extsi %135 : i8 to i32
    llvm.store %136, %3 : i32, !llvm.ptr
    %c-1_i32_30 = arith.constant -1 : i32
    %137 = arith.cmpi sgt, %136, %c-1_i32_30 : i32
    %138 = arith.extui %137 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %139 = arith.cmpi ne, %138, %c0_i32_31 : i32
    cf.cond_br %139, ^bb24, ^bb25
  ^bb24:  // 2 preds: ^bb23, ^bb25
    %140 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_32 = arith.constant 0 : i32
    %141 = arith.cmpi eq, %140, %c0_i32_32 : i32
    %142 = arith.extui %141 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %143 = arith.cmpi ne, %142, %c0_i32_33 : i32
    cf.cond_br %143, ^bb27, ^bb28
  ^bb25:  // pred: ^bb23
    %144 = llvm.load %3 : !llvm.ptr -> i32
    %c-32_i32_34 = arith.constant -32 : i32
    %145 = arith.cmpi ult, %144, %c-32_i32_34 : i32
    %146 = arith.extui %145 : i1 to i32
    cf.br ^bb24
  ^bb26:  // 3 preds: ^bb27, ^bb31, ^bb32
    %147 = llvm.load %7 : !llvm.ptr -> i32
    %148 = llvm.load %2 : !llvm.ptr -> i32
    %149 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_35 = arith.constant 0 : i32
    %150 = arith.cmpi ne, %149, %c0_i32_35 : i32
    %151 = arith.select %150, %147, %148 : i32
    llvm.store %151, %2 : i32, !llvm.ptr
    %152 = llvm.load %3 : !llvm.ptr -> i32
    %153 = llvm.load %1 : !llvm.ptr -> i32
    %154 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_36 = arith.constant 0 : i32
    %155 = arith.cmpi ne, %154, %c0_i32_36 : i32
    %156 = arith.select %155, %152, %153 : i32
    llvm.store %156, %1 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb27:  // 3 preds: ^bb24, ^bb29, ^bb30
    %157 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %157, %3 : i32, !llvm.ptr
    cf.br ^bb26
  ^bb28:  // pred: ^bb24
    %158 = llvm.load %7 : !llvm.ptr -> i32
    %159 = llvm.load %2 : !llvm.ptr -> i32
    %160 = arith.cmpi uge, %158, %159 : i32
    %161 = arith.extui %160 : i1 to i32
    %c0_i32_37 = arith.constant 0 : i32
    %162 = arith.cmpi ne, %161, %c0_i32_37 : i32
    cf.cond_br %162, ^bb29, ^bb30
  ^bb29:  // pred: ^bb28
    %163 = llvm.load %7 : !llvm.ptr -> i32
    %164 = llvm.load %2 : !llvm.ptr -> i32
    %165 = arith.cmpi eq, %163, %164 : i32
    %166 = arith.extui %165 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %167 = arith.cmpi ne, %166, %c0_i32_38 : i32
    cf.cond_br %167, ^bb27, ^bb32
  ^bb30:  // pred: ^bb28
    %168 = llvm.load %1 : !llvm.ptr -> i32
    %169 = llvm.load %7 : !llvm.ptr -> i32
    %170 = arith.addi %168, %169 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %171 = arith.extui %170 : i32 to i64
    %172 = arith.addi %171, %c0_i64_39 : i64
    %173 = llvm.getelementptr %11[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %174 = llvm.load volatile %173 {alignment = 1 : i64} : !llvm.ptr -> i8
    %175 = arith.extsi %174 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %176 = arith.cmpi sgt, %175, %c-65_i32 : i32
    %177 = arith.extui %176 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %178 = arith.cmpi ne, %177, %c0_i32_40 : i32
    cf.cond_br %178, ^bb27, ^bb31
  ^bb31:  // pred: ^bb30
    %c0_i32_41 = arith.constant 0 : i32
    llvm.store %c0_i32_41, %3 : i32, !llvm.ptr
    cf.br ^bb26
  ^bb32:  // pred: ^bb29
    %c0_i32_42 = arith.constant 0 : i32
    llvm.store %c0_i32_42, %3 : i32, !llvm.ptr
    cf.br ^bb26
  ^bb33:  // pred: ^bb7
    %179 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %180 = arith.extui %179 : i32 to i64
    %181 = arith.addi %180, %c4_i64 : i64
    %182 = llvm.getelementptr %11[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %183 = llvm.load volatile %182 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %183, %4 : i32, !llvm.ptr
    %184 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %185 = arith.cmpi ult, %184, %c16_i32 : i32
    %186 = arith.extui %185 : i1 to i32
    %c0_i32_43 = arith.constant 0 : i32
    %187 = arith.cmpi ne, %186, %c0_i32_43 : i32
    cf.cond_br %187, ^bb44, ^bb45
  ^bb34:  // pred: ^bb7
    %188 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_44 = arith.constant 20 : i64
    %189 = arith.extui %188 : i32 to i64
    %190 = arith.addi %189, %c20_i64_44 : i64
    %191 = llvm.getelementptr %11[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %192 = llvm.load volatile %191 {alignment = 1 : i64} : !llvm.ptr -> i32
    %193 = llvm.load %1 : !llvm.ptr -> i32
    %194 = llvm.load %2 : !llvm.ptr -> i32
    %195 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_45 = arith.constant 24 : i64
    %196 = arith.extui %195 : i32 to i64
    %197 = arith.addi %196, %c24_i64_45 : i64
    %198 = llvm.getelementptr %11[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %199 = llvm.load volatile %198 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_46 = arith.constant 12 : i64
    %200 = arith.extui %199 : i32 to i64
    %201 = arith.addi %200, %c12_i64_46 : i64
    %202 = llvm.getelementptr %11[%201] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %203 = llvm.load volatile %202 {alignment = 1 : i64} : !llvm.ptr -> i32
    %204 = arith.cmpi ult, %203, %18 : i32
    cf.cond_br %204, ^bb35, ^bb36
  ^bb35:  // 2 preds: ^bb34, ^bb36
    %205 = llvm.getelementptr inbounds %16[%203] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %206 = llvm.load %205 : !llvm.ptr -> !llvm.ptr
    %207 = llvm.ptrtoint %206 : !llvm.ptr to i64
    %c0_i64_47 = arith.constant 0 : i64
    %208 = arith.cmpi eq, %207, %c0_i64_47 : i64
    cf.cond_br %208, ^bb38, ^bb37
  ^bb36:  // pred: ^bb34
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %209 = llvm.getelementptr %206[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %210 = llvm.getelementptr %206[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %211 = llvm.getelementptr %206[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %212 = llvm.load %209 : !llvm.ptr -> !llvm.ptr
    %213 = llvm.load %211 : !llvm.ptr -> !llvm.ptr
    %214 = llvm.ptrtoint %212 : !llvm.ptr to i64
    %c0_i64_49 = arith.constant 0 : i64
    %215 = arith.cmpi eq, %214, %c0_i64_49 : i64
    cf.cond_br %215, ^bb40, ^bb39
  ^bb38:  // pred: ^bb35
    %c4_i32_50 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_50) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %216 = llvm.load %210 : !llvm.ptr -> i32
    %217 = arith.cmpi ne, %13, %216 : i32
    cf.cond_br %217, ^bb42, ^bb41
  ^bb40:  // pred: ^bb37
    %c3_i32_51 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_51) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %218 = llvm.call %212(%213, %192, %193, %194) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%218 : i32)
  ^bb42:  // pred: ^bb39
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 4 preds: ^bb45, ^bb47, ^bb48, ^bb55
    %219 = llvm.load %4 : !llvm.ptr -> i32
    %220 = llvm.load %3 : !llvm.ptr -> i32
    %221 = arith.cmpi ule, %219, %220 : i32
    %222 = arith.extui %221 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %223 = arith.cmpi ne, %222, %c0_i32_52 : i32
    cf.cond_br %223, ^bb59, ^bb60
  ^bb44:  // pred: ^bb33
    %224 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_53 = arith.constant 0 : i32
    %225 = arith.cmpi ne, %224, %c0_i32_53 : i32
    cf.cond_br %225, ^bb46, ^bb47
  ^bb45:  // pred: ^bb33
    %226 = llvm.load %1 : !llvm.ptr -> i32
    %227 = llvm.load %2 : !llvm.ptr -> i32
    %228 = call @f168(%arg0, %226, %227) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %228, %3 : i32, !llvm.ptr
    cf.br ^bb43
  ^bb46:  // pred: ^bb44
    %229 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_54 = arith.constant 3 : i32
    %230 = arith.andi %229, %c3_i32_54 : i32
    llvm.store %230, %6 : i32, !llvm.ptr
    %231 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_55 = arith.constant 4 : i32
    %232 = arith.cmpi uge, %231, %c4_i32_55 : i32
    %233 = arith.extui %232 : i1 to i32
    %c0_i32_56 = arith.constant 0 : i32
    %234 = arith.cmpi ne, %233, %c0_i32_56 : i32
    cf.cond_br %234, ^bb49, ^bb50
  ^bb47:  // pred: ^bb44
    %c0_i32_57 = arith.constant 0 : i32
    llvm.store %c0_i32_57, %3 : i32, !llvm.ptr
    cf.br ^bb43
  ^bb48:  // 2 preds: ^bb50, ^bb51
    %235 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_58 = arith.constant 0 : i32
    %236 = arith.cmpi eq, %235, %c0_i32_58 : i32
    %237 = arith.extui %236 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %238 = arith.cmpi ne, %237, %c0_i32_59 : i32
    cf.cond_br %238, ^bb43, ^bb54
  ^bb49:  // pred: ^bb46
    %239 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %240 = arith.andi %239, %c12_i32 : i32
    llvm.store %240, %5 : i32, !llvm.ptr
    %c0_i32_60 = arith.constant 0 : i32
    llvm.store %c0_i32_60, %3 : i32, !llvm.ptr
    %c0_i32_61 = arith.constant 0 : i32
    llvm.store %c0_i32_61, %7 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb50:  // pred: ^bb46
    %c0_i32_62 = arith.constant 0 : i32
    llvm.store %c0_i32_62, %3 : i32, !llvm.ptr
    %c0_i32_63 = arith.constant 0 : i32
    llvm.store %c0_i32_63, %7 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb51:  // pred: ^bb53
    cf.br ^bb48
  ^bb52:  // 2 preds: ^bb49, ^bb52
    %241 = llvm.load %3 : !llvm.ptr -> i32
    %242 = llvm.load %1 : !llvm.ptr -> i32
    %243 = llvm.load %7 : !llvm.ptr -> i32
    %244 = arith.addi %242, %243 : i32
    llvm.store %244, %8 : i32, !llvm.ptr
    %c0_i64_64 = arith.constant 0 : i64
    %245 = arith.extui %244 : i32 to i64
    %246 = arith.addi %245, %c0_i64_64 : i64
    %247 = llvm.getelementptr %11[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %248 = llvm.load volatile %247 {alignment = 1 : i64} : !llvm.ptr -> i8
    %249 = arith.extsi %248 : i8 to i32
    %c-65_i32_65 = arith.constant -65 : i32
    %250 = arith.cmpi sgt, %249, %c-65_i32_65 : i32
    %251 = arith.extui %250 : i1 to i32
    %252 = arith.addi %241, %251 : i32
    %253 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_66 = arith.constant 1 : i32
    %254 = arith.addi %253, %c1_i32_66 : i32
    %c0_i64_67 = arith.constant 0 : i64
    %255 = arith.extui %254 : i32 to i64
    %256 = arith.addi %255, %c0_i64_67 : i64
    %257 = llvm.getelementptr %11[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %258 = llvm.load volatile %257 {alignment = 1 : i64} : !llvm.ptr -> i8
    %259 = arith.extsi %258 : i8 to i32
    %c-65_i32_68 = arith.constant -65 : i32
    %260 = arith.cmpi sgt, %259, %c-65_i32_68 : i32
    %261 = arith.extui %260 : i1 to i32
    %262 = arith.addi %252, %261 : i32
    %263 = llvm.load %8 : !llvm.ptr -> i32
    %c2_i32_69 = arith.constant 2 : i32
    %264 = arith.addi %263, %c2_i32_69 : i32
    %c0_i64_70 = arith.constant 0 : i64
    %265 = arith.extui %264 : i32 to i64
    %266 = arith.addi %265, %c0_i64_70 : i64
    %267 = llvm.getelementptr %11[%266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %268 = llvm.load volatile %267 {alignment = 1 : i64} : !llvm.ptr -> i8
    %269 = arith.extsi %268 : i8 to i32
    %c-65_i32_71 = arith.constant -65 : i32
    %270 = arith.cmpi sgt, %269, %c-65_i32_71 : i32
    %271 = arith.extui %270 : i1 to i32
    %272 = arith.addi %262, %271 : i32
    %273 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i32_72 = arith.constant 3 : i32
    %274 = arith.addi %273, %c3_i32_72 : i32
    %c0_i64_73 = arith.constant 0 : i64
    %275 = arith.extui %274 : i32 to i64
    %276 = arith.addi %275, %c0_i64_73 : i64
    %277 = llvm.getelementptr %11[%276] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %278 = llvm.load volatile %277 {alignment = 1 : i64} : !llvm.ptr -> i8
    %279 = arith.extsi %278 : i8 to i32
    %c-65_i32_74 = arith.constant -65 : i32
    %280 = arith.cmpi sgt, %279, %c-65_i32_74 : i32
    %281 = arith.extui %280 : i1 to i32
    %282 = arith.addi %272, %281 : i32
    llvm.store %282, %3 : i32, !llvm.ptr
    %283 = llvm.load %5 : !llvm.ptr -> i32
    %284 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32_75 = arith.constant 4 : i32
    %285 = arith.addi %284, %c4_i32_75 : i32
    llvm.store %285, %7 : i32, !llvm.ptr
    %286 = arith.cmpi eq, %283, %285 : i32
    %287 = arith.extui %286 : i1 to i32
    %c0_i32_76 = arith.constant 0 : i32
    %288 = arith.cmpi eq, %287, %c0_i32_76 : i32
    %289 = arith.extui %288 : i1 to i32
    %c0_i32_77 = arith.constant 0 : i32
    %290 = arith.cmpi ne, %289, %c0_i32_77 : i32
    cf.cond_br %290, ^bb52, ^bb53
  ^bb53:  // pred: ^bb52
    cf.br ^bb51
  ^bb54:  // pred: ^bb48
    %291 = llvm.load %1 : !llvm.ptr -> i32
    %292 = llvm.load %7 : !llvm.ptr -> i32
    %293 = arith.addi %291, %292 : i32
    llvm.store %293, %8 : i32, !llvm.ptr
    cf.br ^bb56
  ^bb55:  // pred: ^bb57
    cf.br ^bb43
  ^bb56:  // 2 preds: ^bb54, ^bb56
    %294 = llvm.load %3 : !llvm.ptr -> i32
    %295 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_78 = arith.constant 0 : i64
    %296 = arith.extui %295 : i32 to i64
    %297 = arith.addi %296, %c0_i64_78 : i64
    %298 = llvm.getelementptr %11[%297] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %299 = llvm.load volatile %298 {alignment = 1 : i64} : !llvm.ptr -> i8
    %300 = arith.extsi %299 : i8 to i32
    %c-65_i32_79 = arith.constant -65 : i32
    %301 = arith.cmpi sgt, %300, %c-65_i32_79 : i32
    %302 = arith.extui %301 : i1 to i32
    %303 = arith.addi %294, %302 : i32
    llvm.store %303, %3 : i32, !llvm.ptr
    %304 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_80 = arith.constant 1 : i32
    %305 = arith.addi %304, %c1_i32_80 : i32
    llvm.store %305, %8 : i32, !llvm.ptr
    %306 = llvm.load %6 : !llvm.ptr -> i32
    %c-1_i32_81 = arith.constant -1 : i32
    %307 = arith.addi %306, %c-1_i32_81 : i32
    llvm.store %307, %6 : i32, !llvm.ptr
    %c0_i32_82 = arith.constant 0 : i32
    %308 = arith.cmpi ne, %307, %c0_i32_82 : i32
    cf.cond_br %308, ^bb56, ^bb57
  ^bb57:  // pred: ^bb56
    cf.br ^bb55
  ^bb58:  // pred: ^bb65
    %309 = llvm.load %7 : !llvm.ptr -> i32
    %310 = llvm.load %1 : !llvm.ptr -> i32
    %311 = llvm.load %2 : !llvm.ptr -> i32
    %312 = llvm.load %8 : !llvm.ptr -> i32
    %c12_i64_83 = arith.constant 12 : i64
    %313 = arith.extui %312 : i32 to i64
    %314 = arith.addi %313, %c12_i64_83 : i64
    %315 = llvm.getelementptr %11[%314] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %316 = llvm.load volatile %315 {alignment = 1 : i64} : !llvm.ptr -> i32
    %317 = arith.cmpi ult, %316, %29 : i32
    cf.cond_br %317, ^bb85, ^bb86
  ^bb59:  // pred: ^bb43
    %318 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_84 = arith.constant 20 : i64
    %319 = arith.extui %318 : i32 to i64
    %320 = arith.addi %319, %c20_i64_84 : i64
    %321 = llvm.getelementptr %11[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %322 = llvm.load volatile %321 {alignment = 1 : i64} : !llvm.ptr -> i32
    %323 = llvm.load %1 : !llvm.ptr -> i32
    %324 = llvm.load %2 : !llvm.ptr -> i32
    %325 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_85 = arith.constant 24 : i64
    %326 = arith.extui %325 : i32 to i64
    %327 = arith.addi %326, %c24_i64_85 : i64
    %328 = llvm.getelementptr %11[%327] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %329 = llvm.load volatile %328 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_86 = arith.constant 12 : i64
    %330 = arith.extui %329 : i32 to i64
    %331 = arith.addi %330, %c12_i64_86 : i64
    %332 = llvm.getelementptr %11[%331] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %333 = llvm.load volatile %332 {alignment = 1 : i64} : !llvm.ptr -> i32
    %334 = arith.cmpi ult, %333, %26 : i32
    cf.cond_br %334, ^bb76, ^bb77
  ^bb60:  // pred: ^bb43
    %335 = llvm.load %4 : !llvm.ptr -> i32
    %336 = llvm.load %3 : !llvm.ptr -> i32
    %337 = arith.subi %335, %336 : i32
    llvm.store %337, %5 : i32, !llvm.ptr
    %c0_i32_87 = arith.constant 0 : i32
    llvm.store %c0_i32_87, %3 : i32, !llvm.ptr
    %338 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %339 = arith.extui %338 : i32 to i64
    %340 = arith.addi %339, %c32_i64 : i64
    %341 = llvm.getelementptr %11[%340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %342 = llvm.load volatile %341 {alignment = 1 : i64} : !llvm.ptr -> i8
    %343 = arith.extui %342 : i8 to i32
    cf.switch %343 : i32, [
      default: ^bb61,
      0: ^bb61,
      1: ^bb63,
      2: ^bb62,
      3: ^bb61
    ]
  ^bb61:  // 5 preds: ^bb60, ^bb60, ^bb60, ^bb62, ^bb63
    %344 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_88 = arith.constant 1 : i32
    %345 = arith.addi %344, %c1_i32_88 : i32
    llvm.store %345, %3 : i32, !llvm.ptr
    %346 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %347 = arith.extui %346 : i32 to i64
    %348 = arith.addi %347, %c16_i64 : i64
    %349 = llvm.getelementptr %11[%348] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %350 = llvm.load volatile %349 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %350, %6 : i32, !llvm.ptr
    %351 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_89 = arith.constant 24 : i64
    %352 = arith.extui %351 : i32 to i64
    %353 = arith.addi %352, %c24_i64_89 : i64
    %354 = llvm.getelementptr %11[%353] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %355 = llvm.load volatile %354 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %355, %8 : i32, !llvm.ptr
    %356 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_90 = arith.constant 20 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c20_i64_90 : i64
    %359 = llvm.getelementptr %11[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load volatile %359 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %360, %7 : i32, !llvm.ptr
    cf.br ^bb65
  ^bb62:  // pred: ^bb60
    %361 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_91 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %362 = arith.cmpi ule, %c1_i32_91, %c31_i32 : i32
    %363 = scf.if %362 -> (i32) {
      %487 = arith.shrui %361, %c1_i32_91 : i32
      scf.yield %487 : i32
    } else {
      %c0_i32_144 = arith.constant 0 : i32
      scf.yield %c0_i32_144 : i32
    }
    llvm.store %363, %3 : i32, !llvm.ptr
    %364 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_92 = arith.constant 1 : i32
    %365 = arith.addi %364, %c1_i32_92 : i32
    %c1_i32_93 = arith.constant 1 : i32
    %c31_i32_94 = arith.constant 31 : i32
    %366 = arith.cmpi ule, %c1_i32_93, %c31_i32_94 : i32
    %367 = scf.if %366 -> (i32) {
      %487 = arith.shrui %365, %c1_i32_93 : i32
      scf.yield %487 : i32
    } else {
      %c0_i32_144 = arith.constant 0 : i32
      scf.yield %c0_i32_144 : i32
    }
    llvm.store %367, %5 : i32, !llvm.ptr
    cf.br ^bb61
  ^bb63:  // pred: ^bb60
    %368 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %368, %3 : i32, !llvm.ptr
    %c0_i32_95 = arith.constant 0 : i32
    llvm.store %c0_i32_95, %5 : i32, !llvm.ptr
    cf.br ^bb61
  ^bb64:  // pred: ^bb75
    %c1_i32_96 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_96 : i32)
  ^bb65:  // 2 preds: ^bb61, ^bb73
    %369 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32_97 = arith.constant -1 : i32
    %370 = arith.addi %369, %c-1_i32_97 : i32
    llvm.store %370, %3 : i32, !llvm.ptr
    %c0_i32_98 = arith.constant 0 : i32
    %371 = arith.cmpi eq, %370, %c0_i32_98 : i32
    %372 = arith.extui %371 : i1 to i32
    %c0_i32_99 = arith.constant 0 : i32
    %373 = arith.cmpi ne, %372, %c0_i32_99 : i32
    cf.cond_br %373, ^bb58, ^bb66
  ^bb66:  // pred: ^bb65
    %374 = llvm.load %7 : !llvm.ptr -> i32
    %375 = llvm.load %6 : !llvm.ptr -> i32
    %376 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i64_100 = arith.constant 16 : i64
    %377 = arith.extui %376 : i32 to i64
    %378 = arith.addi %377, %c16_i64_100 : i64
    %379 = llvm.getelementptr %11[%378] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %380 = llvm.load volatile %379 {alignment = 1 : i64} : !llvm.ptr -> i32
    %381 = arith.cmpi ult, %380, %23 : i32
    cf.cond_br %381, ^bb67, ^bb68
  ^bb67:  // 2 preds: ^bb66, ^bb68
    %382 = llvm.getelementptr inbounds %21[%380] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %383 = llvm.load %382 : !llvm.ptr -> !llvm.ptr
    %384 = llvm.ptrtoint %383 : !llvm.ptr to i64
    %c0_i64_101 = arith.constant 0 : i64
    %385 = arith.cmpi eq, %384, %c0_i64_101 : i64
    cf.cond_br %385, ^bb70, ^bb69
  ^bb68:  // pred: ^bb66
    %c3_i32_102 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_102) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %386 = llvm.getelementptr %383[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %387 = llvm.getelementptr %383[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %388 = llvm.getelementptr %383[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %389 = llvm.load %386 : !llvm.ptr -> !llvm.ptr
    %390 = llvm.load %388 : !llvm.ptr -> !llvm.ptr
    %391 = llvm.ptrtoint %389 : !llvm.ptr to i64
    %c0_i64_103 = arith.constant 0 : i64
    %392 = arith.cmpi eq, %391, %c0_i64_103 : i64
    cf.cond_br %392, ^bb72, ^bb71
  ^bb70:  // pred: ^bb67
    %c4_i32_104 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_104) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %393 = llvm.load %387 : !llvm.ptr -> i32
    %394 = arith.cmpi ne, %20, %393 : i32
    cf.cond_br %394, ^bb74, ^bb73
  ^bb72:  // pred: ^bb69
    %c3_i32_105 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_105) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %395 = llvm.call %389(%390, %374, %375) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_106 = arith.constant 0 : i32
    %396 = arith.cmpi eq, %395, %c0_i32_106 : i32
    %397 = arith.extui %396 : i1 to i32
    %c0_i32_107 = arith.constant 0 : i32
    %398 = arith.cmpi ne, %397, %c0_i32_107 : i32
    cf.cond_br %398, ^bb65, ^bb75
  ^bb74:  // pred: ^bb71
    %c5_i32_108 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_108) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // pred: ^bb73
    cf.br ^bb64
  ^bb76:  // 2 preds: ^bb59, ^bb77
    %399 = llvm.getelementptr inbounds %24[%333] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %400 = llvm.load %399 : !llvm.ptr -> !llvm.ptr
    %401 = llvm.ptrtoint %400 : !llvm.ptr to i64
    %c0_i64_109 = arith.constant 0 : i64
    %402 = arith.cmpi eq, %401, %c0_i64_109 : i64
    cf.cond_br %402, ^bb79, ^bb78
  ^bb77:  // pred: ^bb59
    %c3_i32_110 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_110) : (i32) -> ()
    cf.br ^bb76
  ^bb78:  // 2 preds: ^bb76, ^bb79
    %403 = llvm.getelementptr %400[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %404 = llvm.getelementptr %400[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %405 = llvm.getelementptr %400[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %406 = llvm.load %403 : !llvm.ptr -> !llvm.ptr
    %407 = llvm.load %405 : !llvm.ptr -> !llvm.ptr
    %408 = llvm.ptrtoint %406 : !llvm.ptr to i64
    %c0_i64_111 = arith.constant 0 : i64
    %409 = arith.cmpi eq, %408, %c0_i64_111 : i64
    cf.cond_br %409, ^bb81, ^bb80
  ^bb79:  // pred: ^bb76
    %c4_i32_112 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_112) : (i32) -> ()
    cf.br ^bb78
  ^bb80:  // 2 preds: ^bb78, ^bb81
    %410 = llvm.load %404 : !llvm.ptr -> i32
    %411 = arith.cmpi ne, %13, %410 : i32
    cf.cond_br %411, ^bb83, ^bb82
  ^bb81:  // pred: ^bb78
    %c3_i32_113 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_113) : (i32) -> ()
    cf.br ^bb80
  ^bb82:  // 2 preds: ^bb80, ^bb83
    %412 = llvm.call %406(%407, %322, %323, %324) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%412 : i32)
  ^bb83:  // pred: ^bb80
    %c5_i32_114 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_114) : (i32) -> ()
    cf.br ^bb82
  ^bb84:  // pred: ^bb91
    %c0_i32_115 = arith.constant 0 : i32
    llvm.store %c0_i32_115, %3 : i32, !llvm.ptr
    cf.br ^bb95
  ^bb85:  // 2 preds: ^bb58, ^bb86
    %413 = llvm.getelementptr inbounds %27[%316] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %414 = llvm.load %413 : !llvm.ptr -> !llvm.ptr
    %415 = llvm.ptrtoint %414 : !llvm.ptr to i64
    %c0_i64_116 = arith.constant 0 : i64
    %416 = arith.cmpi eq, %415, %c0_i64_116 : i64
    cf.cond_br %416, ^bb88, ^bb87
  ^bb86:  // pred: ^bb58
    %c3_i32_117 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_117) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %417 = llvm.getelementptr %414[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %418 = llvm.getelementptr %414[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %419 = llvm.getelementptr %414[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %420 = llvm.load %417 : !llvm.ptr -> !llvm.ptr
    %421 = llvm.load %419 : !llvm.ptr -> !llvm.ptr
    %422 = llvm.ptrtoint %420 : !llvm.ptr to i64
    %c0_i64_118 = arith.constant 0 : i64
    %423 = arith.cmpi eq, %422, %c0_i64_118 : i64
    cf.cond_br %423, ^bb90, ^bb89
  ^bb88:  // pred: ^bb85
    %c4_i32_119 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_119) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %424 = llvm.load %418 : !llvm.ptr -> i32
    %425 = arith.cmpi ne, %13, %424 : i32
    cf.cond_br %425, ^bb92, ^bb91
  ^bb90:  // pred: ^bb87
    %c3_i32_120 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_120) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %426 = llvm.call %420(%421, %309, %310, %311) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_121 = arith.constant 0 : i32
    %427 = arith.cmpi eq, %426, %c0_i32_121 : i32
    %428 = arith.extui %427 : i1 to i32
    %c0_i32_122 = arith.constant 0 : i32
    %429 = arith.cmpi ne, %428, %c0_i32_122 : i32
    cf.cond_br %429, ^bb84, ^bb93
  ^bb92:  // pred: ^bb89
    %c5_i32_123 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_123) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // pred: ^bb91
    %c1_i32_124 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_124 : i32)
  ^bb94:  // pred: ^bb106
    %430 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32_125 = arith.constant -1 : i32
    %431 = arith.addi %430, %c-1_i32_125 : i32
    %432 = llvm.load %5 : !llvm.ptr -> i32
    %433 = arith.cmpi ult, %431, %432 : i32
    %434 = arith.extui %433 : i1 to i32
    cf.br ^bb2(%434 : i32)
  ^bb95:  // 2 preds: ^bb84, ^bb104
    %435 = llvm.load %5 : !llvm.ptr -> i32
    %436 = llvm.load %3 : !llvm.ptr -> i32
    %437 = arith.cmpi eq, %435, %436 : i32
    %438 = arith.extui %437 : i1 to i32
    %c0_i32_126 = arith.constant 0 : i32
    %439 = arith.cmpi eq, %438, %c0_i32_126 : i32
    %440 = arith.extui %439 : i1 to i32
    %c0_i32_127 = arith.constant 0 : i32
    %441 = arith.cmpi ne, %440, %c0_i32_127 : i32
    cf.cond_br %441, ^bb96, ^bb97
  ^bb96:  // pred: ^bb95
    %442 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_128 = arith.constant 1 : i32
    %443 = arith.addi %442, %c1_i32_128 : i32
    llvm.store %443, %3 : i32, !llvm.ptr
    %444 = llvm.load %7 : !llvm.ptr -> i32
    %445 = llvm.load %6 : !llvm.ptr -> i32
    %446 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i64_129 = arith.constant 16 : i64
    %447 = arith.extui %446 : i32 to i64
    %448 = arith.addi %447, %c16_i64_129 : i64
    %449 = llvm.getelementptr %11[%448] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %450 = llvm.load volatile %449 {alignment = 1 : i64} : !llvm.ptr -> i32
    %451 = arith.cmpi ult, %450, %32 : i32
    cf.cond_br %451, ^bb98, ^bb99
  ^bb97:  // pred: ^bb95
    %452 = llvm.load %5 : !llvm.ptr -> i32
    %453 = llvm.load %5 : !llvm.ptr -> i32
    %454 = arith.cmpi ult, %452, %453 : i32
    %455 = arith.extui %454 : i1 to i32
    cf.br ^bb2(%455 : i32)
  ^bb98:  // 2 preds: ^bb96, ^bb99
    %456 = llvm.getelementptr inbounds %30[%450] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %457 = llvm.load %456 : !llvm.ptr -> !llvm.ptr
    %458 = llvm.ptrtoint %457 : !llvm.ptr to i64
    %c0_i64_130 = arith.constant 0 : i64
    %459 = arith.cmpi eq, %458, %c0_i64_130 : i64
    cf.cond_br %459, ^bb101, ^bb100
  ^bb99:  // pred: ^bb96
    %c3_i32_131 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_131) : (i32) -> ()
    cf.br ^bb98
  ^bb100:  // 2 preds: ^bb98, ^bb101
    %460 = llvm.getelementptr %457[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %461 = llvm.getelementptr %457[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %462 = llvm.getelementptr %457[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %463 = llvm.load %460 : !llvm.ptr -> !llvm.ptr
    %464 = llvm.load %462 : !llvm.ptr -> !llvm.ptr
    %465 = llvm.ptrtoint %463 : !llvm.ptr to i64
    %c0_i64_132 = arith.constant 0 : i64
    %466 = arith.cmpi eq, %465, %c0_i64_132 : i64
    cf.cond_br %466, ^bb103, ^bb102
  ^bb101:  // pred: ^bb98
    %c4_i32_133 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_133) : (i32) -> ()
    cf.br ^bb100
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %467 = llvm.load %461 : !llvm.ptr -> i32
    %468 = arith.cmpi ne, %20, %467 : i32
    cf.cond_br %468, ^bb105, ^bb104
  ^bb103:  // pred: ^bb100
    %c3_i32_134 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_134) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %469 = llvm.call %463(%464, %444, %445) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_135 = arith.constant 0 : i32
    %470 = arith.cmpi eq, %469, %c0_i32_135 : i32
    %471 = arith.extui %470 : i1 to i32
    %c0_i32_136 = arith.constant 0 : i32
    %472 = arith.cmpi ne, %471, %c0_i32_136 : i32
    cf.cond_br %472, ^bb95, ^bb106
  ^bb105:  // pred: ^bb102
    %c5_i32_137 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_137) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // pred: ^bb104
    cf.br ^bb94
  ^bb107:  // 2 preds: ^bb3, ^bb108
    %473 = llvm.getelementptr inbounds %33[%63] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %474 = llvm.load %473 : !llvm.ptr -> !llvm.ptr
    %475 = llvm.ptrtoint %474 : !llvm.ptr to i64
    %c0_i64_138 = arith.constant 0 : i64
    %476 = arith.cmpi eq, %475, %c0_i64_138 : i64
    cf.cond_br %476, ^bb110, ^bb109
  ^bb108:  // pred: ^bb3
    %c3_i32_139 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_139) : (i32) -> ()
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb107, ^bb110
    %477 = llvm.getelementptr %474[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %478 = llvm.getelementptr %474[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %479 = llvm.getelementptr %474[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %480 = llvm.load %477 : !llvm.ptr -> !llvm.ptr
    %481 = llvm.load %479 : !llvm.ptr -> !llvm.ptr
    %482 = llvm.ptrtoint %480 : !llvm.ptr to i64
    %c0_i64_140 = arith.constant 0 : i64
    %483 = arith.cmpi eq, %482, %c0_i64_140 : i64
    cf.cond_br %483, ^bb112, ^bb111
  ^bb110:  // pred: ^bb107
    %c4_i32_141 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_141) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // 2 preds: ^bb109, ^bb112
    %484 = llvm.load %478 : !llvm.ptr -> i32
    %485 = arith.cmpi ne, %13, %484 : i32
    cf.cond_br %485, ^bb114, ^bb113
  ^bb112:  // pred: ^bb109
    %c3_i32_142 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_142) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // 2 preds: ^bb111, ^bb114
    %486 = llvm.call %480(%481, %52, %53, %54) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%486 : i32)
  ^bb114:  // pred: ^bb111
    %c5_i32_143 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_143) : (i32) -> ()
    cf.br ^bb113
  }
  func.func @f140(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %10 = arith.subi %9, %c32_i32 : i32
    llvm.store %10, %3 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %c16_i64 = arith.constant 16 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c16_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_3, %14 {alignment = 1 : i64} : i32, !llvm.ptr
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_4 = arith.constant 1 : i32
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c4_i64 : i64
    %18 = llvm.getelementptr %8[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_4, %18 {alignment = 1 : i64} : i32, !llvm.ptr
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c8_i64 : i64
    %22 = llvm.getelementptr %8[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64_5, %22 {alignment = 1 : i64} : i64, !llvm.ptr
    %23 = llvm.load %3 : !llvm.ptr -> i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %25 = arith.extui %23 : i32 to i64
    %26 = arith.addi %25, %c28_i64 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c24_i64 : i64
    %32 = llvm.getelementptr %8[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %33 = llvm.load %3 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %35 = arith.addi %34, %c24_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %36 = arith.extui %33 : i32 to i64
    %37 = arith.addi %36, %c0_i64 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %40 = llvm.load %2 : !llvm.ptr -> i32
    call @f141(%arg0, %39, %40) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f141(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_2 = arith.constant 1 : i32
    %c12_i64 = arith.constant 12 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c12_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = arith.trunci %c1_i32_2 : i32 to i16
    llvm.store volatile %14, %13 {alignment = 1 : i64} : i16, !llvm.ptr
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %15 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %19 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %16, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %22 = arith.extui %20 : i32 to i64
    %23 = arith.addi %22, %c4_i64 : i64
    %24 = llvm.getelementptr %7[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %24 {alignment = 1 : i64} : i32, !llvm.ptr
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %26 = arith.addi %25, %c4_i32 : i32
    call @f121(%arg0, %26) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f142(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %11 = call @f184(%arg0, %9, %c1_i32_1, %10) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%11 : i32)
  ^bb2(%12: i32):  // pred: ^bb1
    return %12 : i32
  }
  func.func @f143(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %9 = arith.subi %8, %c48_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %7[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %0 : i32, !llvm.ptr
    %c40_i64 = arith.constant 40 : i64
    %16 = arith.extui %10 : i32 to i64
    %17 = arith.addi %16, %c40_i64 : i64
    %18 = llvm.getelementptr %7[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %15, %18 {alignment = 1 : i64} : i32, !llvm.ptr
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c4_i64 = arith.constant 4 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c4_i64 : i64
    %22 = llvm.getelementptr %7[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %22 {alignment = 1 : i64} : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c1050612_i32 = arith.constant 1050612 : i32
    %c0_i64_2 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64_2 : i64
    %26 = llvm.getelementptr %7[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050612_i32, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c12_i64 = arith.constant 12 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c12_i64 : i64
    %30 = llvm.getelementptr %7[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %30 {alignment = 1 : i64} : i64, !llvm.ptr
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_3 = arith.constant 48 : i32
    %32 = arith.extui %c48_i32_3 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %33 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %34 = scf.if %33 -> (i64) {
      %81 = arith.shli %32, %c32_i64 : i64
      scf.yield %81 : i64
    } else {
      %c0_i64_9 = arith.constant 0 : i64
      scf.yield %c0_i64_9 : i64
    }
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i32 = arith.constant 44 : i32
    %36 = arith.addi %35, %c44_i32 : i32
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.ori %34, %37 : i64
    %c32_i64_4 = arith.constant 32 : i64
    %39 = arith.extui %31 : i32 to i64
    %40 = arith.addi %39, %c32_i64_4 : i64
    %41 = llvm.getelementptr %7[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %38, %41 {alignment = 1 : i64} : i64, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c49_i32 = arith.constant 49 : i32
    %43 = arith.extui %c49_i32 : i32 to i64
    %c32_i64_5 = arith.constant 32 : i64
    %c63_i64_6 = arith.constant 63 : i64
    %44 = arith.cmpi ule, %c32_i64_5, %c63_i64_6 : i64
    %45 = scf.if %44 -> (i64) {
      %81 = arith.shli %43, %c32_i64_5 : i64
      scf.yield %81 : i64
    } else {
      %c0_i64_9 = arith.constant 0 : i64
      scf.yield %c0_i64_9 : i64
    }
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %47 = arith.addi %46, %c40_i32 : i32
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.ori %45, %48 : i64
    %c24_i64 = arith.constant 24 : i64
    %50 = arith.extui %42 : i32 to i64
    %51 = arith.addi %50, %c24_i64 : i64
    %52 = llvm.getelementptr %7[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %2 : !llvm.ptr -> i32
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %false = arith.constant false
    %55 = llvm.call_intrinsic "llvm.cttz.i32"(%54, %false) : (i32, i1) -> i32
    %c44_i64 = arith.constant 44 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c44_i64 : i64
    %58 = llvm.getelementptr %7[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %61 = arith.addi %60, %c24_i32 : i32
    %c8_i64 = arith.constant 8 : i64
    %62 = arith.extui %59 : i32 to i64
    %63 = arith.addi %62, %c8_i64 : i64
    %64 = llvm.getelementptr %7[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %61, %64 {alignment = 1 : i64} : i32, !llvm.ptr
    %65 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c20_i64 : i64
    %68 = llvm.getelementptr %7[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i32
    %70 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64_7 = arith.constant 24 : i64
    %71 = arith.extui %70 : i32 to i64
    %72 = arith.addi %71, %c24_i64_7 : i64
    %73 = llvm.getelementptr %7[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %74 = llvm.load volatile %73 {alignment = 1 : i64} : !llvm.ptr -> i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %76 = call @f146(%arg0, %69, %74, %75) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %76, %1 : i32, !llvm.ptr
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_8 = arith.constant 48 : i32
    %78 = arith.addi %77, %c48_i32_8 : i32
    llvm.store %78, %4 : i32, !llvm.ptr
    %79 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%79 : i32)
  ^bb2(%80: i32):  // pred: ^bb1
    return %80 : i32
  }
  func.func @f144(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %11 = arith.subi %10, %c128_i32 : i32
    llvm.store %11, %2 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c28_i64 : i64
    %15 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %17 = arith.andi %16, %c16_i32 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %18 = arith.cmpi ne, %17, %c0_i32_4 : i32
    cf.cond_br %18, ^bb6, ^bb7
  ^bb2(%19: i32):  // pred: ^bb3
    return %19 : i32
  ^bb3:  // 3 preds: ^bb8, ^bb15, ^bb17
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c128_i32_5 = arith.constant 128 : i32
    %21 = arith.addi %20, %c128_i32_5 : i32
    llvm.store %21, %6 : i32, !llvm.ptr
    %22 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%22 : i32)
  ^bb4:  // pred: ^bb11
    %23 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_6 = arith.constant 128 : i32
    %24 = arith.addi %23, %c128_i32_6 : i32
    llvm.store %24, %0 : i32, !llvm.ptr
    %c129_i32 = arith.constant 129 : i32
    %25 = arith.cmpi ult, %24, %c129_i32 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_7 : i32
    cf.cond_br %27, ^bb17, ^bb18
  ^bb5:  // 2 preds: ^bb7, ^bb9
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c0_i64 : i64
    %31 = llvm.getelementptr %9[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %32, %0 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    llvm.store %c0_i32_8, %3 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb6:  // pred: ^bb1
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c0_i64_9 : i64
    %36 = llvm.getelementptr %9[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %37, %0 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    llvm.store %c0_i32_10, %3 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb7:  // pred: ^bb1
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %39 = arith.andi %38, %c32_i32 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_11 : i32
    cf.cond_br %40, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64_12 : i64
    %44 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_13 = arith.constant 1 : i32
    %46 = llvm.load %1 : !llvm.ptr -> i32
    %47 = call @f184(%arg0, %45, %c1_i32_13, %46) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %47, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb9:  // no predecessors
    cf.br ^bb5
  ^bb10:  // 2 preds: ^bb6, ^bb10
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %50 = arith.addi %48, %49 : i32
    %c127_i32 = arith.constant 127 : i32
    %51 = arith.addi %50, %c127_i32 : i32
    %52 = llvm.load %0 : !llvm.ptr -> i32
    %c15_i32 = arith.constant 15 : i32
    %53 = arith.andi %52, %c15_i32 : i32
    llvm.store %53, %4 : i32, !llvm.ptr
    %c48_i32 = arith.constant 48 : i32
    %54 = arith.ori %53, %c48_i32 : i32
    %55 = llvm.load %4 : !llvm.ptr -> i32
    %c87_i32 = arith.constant 87 : i32
    %56 = arith.addi %55, %c87_i32 : i32
    %57 = llvm.load %4 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %58 = arith.cmpi ult, %57, %c10_i32 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_14 : i32
    %61 = arith.select %60, %54, %56 : i32
    %c0_i64_15 = arith.constant 0 : i64
    %62 = arith.extui %51 : i32 to i64
    %63 = arith.addi %62, %c0_i64_15 : i64
    %64 = llvm.getelementptr %9[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = arith.trunci %61 : i32 to i8
    llvm.store volatile %65, %64 {alignment = 1 : i64} : i8, !llvm.ptr
    %66 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %67 = arith.addi %66, %c-1_i32 : i32
    llvm.store %67, %3 : i32, !llvm.ptr
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_16 = arith.constant 16 : i32
    %69 = arith.cmpi ult, %68, %c16_i32_16 : i32
    %70 = arith.extui %69 : i1 to i32
    llvm.store %70, %4 : i32, !llvm.ptr
    %71 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c31_i32 = arith.constant 31 : i32
    %72 = arith.cmpi ule, %c4_i32, %c31_i32 : i32
    %73 = scf.if %72 -> (i32) {
      %131 = arith.shrui %71, %c4_i32 : i32
      scf.yield %131 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    llvm.store %73, %0 : i32, !llvm.ptr
    %74 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %75 = arith.cmpi eq, %74, %c0_i32_17 : i32
    %76 = arith.extui %75 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %77 = arith.cmpi ne, %76, %c0_i32_18 : i32
    cf.cond_br %77, ^bb10, ^bb11
  ^bb11:  // pred: ^bb10
    cf.br ^bb4
  ^bb12:  // pred: ^bb14
    %78 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_19 = arith.constant 128 : i32
    %79 = arith.addi %78, %c128_i32_19 : i32
    llvm.store %79, %0 : i32, !llvm.ptr
    %c129_i32_20 = arith.constant 129 : i32
    %80 = arith.cmpi ult, %79, %c129_i32_20 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_21 : i32
    cf.cond_br %82, ^bb15, ^bb16
  ^bb13:  // 2 preds: ^bb5, ^bb13
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %84 = llvm.load %3 : !llvm.ptr -> i32
    %85 = arith.addi %83, %84 : i32
    %c127_i32_22 = arith.constant 127 : i32
    %86 = arith.addi %85, %c127_i32_22 : i32
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %c15_i32_23 = arith.constant 15 : i32
    %88 = arith.andi %87, %c15_i32_23 : i32
    llvm.store %88, %4 : i32, !llvm.ptr
    %c48_i32_24 = arith.constant 48 : i32
    %89 = arith.ori %88, %c48_i32_24 : i32
    %90 = llvm.load %4 : !llvm.ptr -> i32
    %c55_i32 = arith.constant 55 : i32
    %91 = arith.addi %90, %c55_i32 : i32
    %92 = llvm.load %4 : !llvm.ptr -> i32
    %c10_i32_25 = arith.constant 10 : i32
    %93 = arith.cmpi ult, %92, %c10_i32_25 : i32
    %94 = arith.extui %93 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %95 = arith.cmpi ne, %94, %c0_i32_26 : i32
    %96 = arith.select %95, %89, %91 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %97 = arith.extui %86 : i32 to i64
    %98 = arith.addi %97, %c0_i64_27 : i64
    %99 = llvm.getelementptr %9[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = arith.trunci %96 : i32 to i8
    llvm.store volatile %100, %99 {alignment = 1 : i64} : i8, !llvm.ptr
    %101 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32_28 = arith.constant -1 : i32
    %102 = arith.addi %101, %c-1_i32_28 : i32
    llvm.store %102, %3 : i32, !llvm.ptr
    %103 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_29 = arith.constant 16 : i32
    %104 = arith.cmpi ult, %103, %c16_i32_29 : i32
    %105 = arith.extui %104 : i1 to i32
    llvm.store %105, %4 : i32, !llvm.ptr
    %106 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_30 = arith.constant 4 : i32
    %c31_i32_31 = arith.constant 31 : i32
    %107 = arith.cmpi ule, %c4_i32_30, %c31_i32_31 : i32
    %108 = scf.if %107 -> (i32) {
      %131 = arith.shrui %106, %c4_i32_30 : i32
      scf.yield %131 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    llvm.store %108, %0 : i32, !llvm.ptr
    %109 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_32 = arith.constant 0 : i32
    %110 = arith.cmpi eq, %109, %c0_i32_32 : i32
    %111 = arith.extui %110 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %112 = arith.cmpi ne, %111, %c0_i32_33 : i32
    cf.cond_br %112, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // pred: ^bb12
    %113 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_34 = arith.constant 1 : i32
    %c1050904_i32 = arith.constant 1050904 : i32
    %c2_i32 = arith.constant 2 : i32
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %115 = llvm.load %3 : !llvm.ptr -> i32
    %116 = arith.addi %114, %115 : i32
    %c128_i32_35 = arith.constant 128 : i32
    %117 = arith.addi %116, %c128_i32_35 : i32
    %c0_i32_36 = arith.constant 0 : i32
    %118 = llvm.load %3 : !llvm.ptr -> i32
    %119 = arith.subi %c0_i32_36, %118 : i32
    %120 = call @f166(%arg0, %113, %c1_i32_34, %c1050904_i32, %c2_i32, %117, %119) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %120, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb16:  // pred: ^bb12
    %121 = llvm.load %0 : !llvm.ptr -> i32
    %c128_i32_37 = arith.constant 128 : i32
    %c1050888_i32 = arith.constant 1050888 : i32
    call @f136(%arg0, %121, %c128_i32_37, %c1050888_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb17:  // pred: ^bb4
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_38 = arith.constant 1 : i32
    %c1050904_i32_39 = arith.constant 1050904 : i32
    %c2_i32_40 = arith.constant 2 : i32
    %123 = llvm.load %2 : !llvm.ptr -> i32
    %124 = llvm.load %3 : !llvm.ptr -> i32
    %125 = arith.addi %123, %124 : i32
    %c128_i32_41 = arith.constant 128 : i32
    %126 = arith.addi %125, %c128_i32_41 : i32
    %c0_i32_42 = arith.constant 0 : i32
    %127 = llvm.load %3 : !llvm.ptr -> i32
    %128 = arith.subi %c0_i32_42, %127 : i32
    %129 = call @f166(%arg0, %122, %c1_i32_38, %c1050904_i32_39, %c2_i32_40, %126, %128) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %129, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb18:  // pred: ^bb4
    %130 = llvm.load %0 : !llvm.ptr -> i32
    %c128_i32_43 = arith.constant 128 : i32
    %c1050888_i32_44 = arith.constant 1050888 : i32
    call @f136(%arg0, %130, %c128_i32_43, %c1050888_i32_44) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_45 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_45) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f145(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %7[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %16 = arith.extui %10 : i32 to i64
    %17 = arith.addi %16, %c12_i64 : i64
    %18 = llvm.getelementptr %7[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %15, %18 {alignment = 1 : i64} : i32, !llvm.ptr
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %20 = arith.addi %19, %c12_i32 : i32
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %22 = call @f144(%arg0, %20, %21) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %22, %0 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_2 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32_2 : i32
    llvm.store %24, %4 : i32, !llvm.ptr
    %25 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%25 : i32)
  ^bb2(%26: i32):  // pred: ^bb1
    return %26 : i32
  }
  func.func @f146(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %20 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    %25 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.load %25 : !llvm.ptr -> i32
    %27 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %21 : !llvm.ptr -> i64
    %29 = arith.trunci %28 : i64 to i32
    %30 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %21 : !llvm.ptr -> i64
    %32 = arith.trunci %31 : i64 to i32
    %33 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.load %21 : !llvm.ptr -> i64
    %35 = arith.trunci %34 : i64 to i32
    %36 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %21 : !llvm.ptr -> i64
    %38 = arith.trunci %37 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %39 = llvm.load %14 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %40 = arith.subi %39, %c48_i32 : i32
    llvm.store %40, %3 : i32, !llvm.ptr
    llvm.store %40, %14 : i32, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c44_i64 = arith.constant 44 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c44_i64 : i64
    %44 = llvm.getelementptr %17[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %45, %44 {alignment = 1 : i64} : i8, !llvm.ptr
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %c28_i64 = arith.constant 28 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c28_i64 : i64
    %49 = llvm.getelementptr %17[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    llvm.store %c0_i32_12, %4 : i32, !llvm.ptr
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c40_i64 = arith.constant 40 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c40_i64 : i64
    %53 = llvm.getelementptr %17[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %56 = arith.extui %54 : i32 to i64
    %57 = arith.addi %56, %c36_i64 : i64
    %58 = llvm.getelementptr %17[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %60 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %61 = arith.extui %59 : i32 to i64
    %62 = arith.addi %61, %c32_i64 : i64
    %63 = llvm.getelementptr %17[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i32, !llvm.ptr
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c20_i64 : i64
    %67 = llvm.getelementptr %17[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_14, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c12_i64 : i64
    %71 = llvm.getelementptr %17[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_15, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c16_i64 : i64
    %75 = llvm.getelementptr %17[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %5 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %77 = arith.cmpi ne, %76, %c0_i32_16 : i32
    cf.cond_br %77, ^bb7, ^bb8
  ^bb2(%78: i32):  // pred: ^bb3
    return %78 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_17 = arith.constant 48 : i32
    %80 = arith.addi %79, %c48_i32_17 : i32
    llvm.store %80, %14 : i32, !llvm.ptr
    %81 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%81 : i32)
  ^bb4:  // 2 preds: ^bb6, ^bb72
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 5 preds: ^bb20, ^bb29, ^bb44, ^bb61, ^bb74
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 4 preds: ^bb7, ^bb8, ^bb32, ^bb34
    %82 = llvm.load %4 : !llvm.ptr -> i32
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %84 = arith.extui %83 : i32 to i64
    %85 = arith.addi %84, %c4_i64 : i64
    %86 = llvm.getelementptr %17[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i32
    %88 = arith.cmpi uge, %82, %87 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_20 : i32
    cf.cond_br %90, ^bb4, ^bb65
  ^bb7:  // 2 preds: ^bb1, ^bb10
    %91 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_21 = arith.constant 20 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c20_i64_21 : i64
    %94 = llvm.getelementptr %17[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %96 = arith.cmpi eq, %95, %c0_i32_22 : i32
    %97 = arith.extui %96 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %98 = arith.cmpi ne, %97, %c0_i32_23 : i32
    cf.cond_br %98, ^bb6, ^bb33
  ^bb8:  // pred: ^bb1
    %99 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_24 = arith.constant 12 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c12_i64_24 : i64
    %102 = llvm.getelementptr %17[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %103, %0 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %104 = arith.cmpi eq, %103, %c0_i32_25 : i32
    %105 = arith.extui %104 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %106 = arith.cmpi ne, %105, %c0_i32_26 : i32
    cf.cond_br %106, ^bb6, ^bb9
  ^bb9:  // pred: ^bb8
    %107 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c8_i64 : i64
    %110 = llvm.getelementptr %17[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %111, %1 : i32, !llvm.ptr
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_27 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %113 = arith.cmpi ule, %c3_i32_27, %c31_i32 : i32
    %114 = scf.if %113 -> (i32) {
      %476 = arith.shli %112, %c3_i32_27 : i32
      scf.yield %476 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    %115 = arith.addi %111, %114 : i32
    llvm.store %115, %6 : i32, !llvm.ptr
    %116 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %117 = arith.addi %116, %c-1_i32 : i32
    %c536870911_i32 = arith.constant 536870911 : i32
    %118 = arith.andi %117, %c536870911_i32 : i32
    %c1_i32_28 = arith.constant 1 : i32
    %119 = arith.addi %118, %c1_i32_28 : i32
    llvm.store %119, %4 : i32, !llvm.ptr
    %120 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64 : i64
    %123 = llvm.getelementptr %17[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %124, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb10:  // no predecessors
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb9, ^bb31
    %125 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %126 = arith.addi %125, %c4_i32 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c0_i64_29 : i64
    %129 = llvm.getelementptr %17[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %130, %7 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %131 = arith.cmpi eq, %130, %c0_i32_30 : i32
    %132 = arith.extui %131 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %133 = arith.cmpi ne, %132, %c0_i32_31 : i32
    cf.cond_br %133, ^bb12, ^bb13
  ^bb12:  // 2 preds: ^bb11, ^bb22
    %134 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c0_i64_32 : i64
    %137 = llvm.getelementptr %17[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load volatile %137 {alignment = 1 : i64} : !llvm.ptr -> i32
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %140 = arith.addi %139, %c12_i32 : i32
    %141 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_33 = arith.constant 4 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c4_i64_33 : i64
    %144 = llvm.getelementptr %17[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %146 = arith.cmpi ult, %145, %29 : i32
    cf.cond_br %146, ^bb23, ^bb24
  ^bb13:  // pred: ^bb11
    %147 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_34 = arith.constant 32 : i64
    %148 = arith.extui %147 : i32 to i64
    %149 = arith.addi %148, %c32_i64_34 : i64
    %150 = llvm.getelementptr %17[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i32
    %152 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c0_i64_35 : i64
    %155 = llvm.getelementptr %17[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %156 = llvm.load volatile %155 {alignment = 1 : i64} : !llvm.ptr -> i32
    %157 = llvm.load %7 : !llvm.ptr -> i32
    %158 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_36 = arith.constant 36 : i64
    %159 = arith.extui %158 : i32 to i64
    %160 = arith.addi %159, %c36_i64_36 : i64
    %161 = llvm.getelementptr %17[%160] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %162 = llvm.load volatile %161 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_37 = arith.constant 12 : i64
    %163 = arith.extui %162 : i32 to i64
    %164 = arith.addi %163, %c12_i64_37 : i64
    %165 = llvm.getelementptr %17[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %166 = llvm.load volatile %165 {alignment = 1 : i64} : !llvm.ptr -> i32
    %167 = arith.cmpi ult, %166, %24 : i32
    cf.cond_br %167, ^bb14, ^bb15
  ^bb14:  // 2 preds: ^bb13, ^bb15
    %168 = llvm.getelementptr inbounds %22[%166] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %169 = llvm.load %168 : !llvm.ptr -> !llvm.ptr
    %170 = llvm.ptrtoint %169 : !llvm.ptr to i64
    %c0_i64_38 = arith.constant 0 : i64
    %171 = arith.cmpi eq, %170, %c0_i64_38 : i64
    cf.cond_br %171, ^bb17, ^bb16
  ^bb15:  // pred: ^bb13
    %c3_i32_39 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_39) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %172 = llvm.getelementptr %169[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %173 = llvm.getelementptr %169[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %174 = llvm.getelementptr %169[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %175 = llvm.load %172 : !llvm.ptr -> !llvm.ptr
    %176 = llvm.load %174 : !llvm.ptr -> !llvm.ptr
    %177 = llvm.ptrtoint %175 : !llvm.ptr to i64
    %c0_i64_40 = arith.constant 0 : i64
    %178 = arith.cmpi eq, %177, %c0_i64_40 : i64
    cf.cond_br %178, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_41 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_41) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %179 = llvm.load %173 : !llvm.ptr -> i32
    %180 = arith.cmpi ne, %19, %179 : i32
    cf.cond_br %180, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_42 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_42) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %181 = llvm.call %175(%176, %151, %156, %157) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %182 = arith.cmpi ne, %181, %c0_i32_43 : i32
    cf.cond_br %182, ^bb5, ^bb22
  ^bb21:  // pred: ^bb18
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    cf.br ^bb12
  ^bb23:  // 2 preds: ^bb12, ^bb24
    %183 = llvm.getelementptr inbounds %27[%145] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %184 = llvm.load %183 : !llvm.ptr -> !llvm.ptr
    %185 = llvm.ptrtoint %184 : !llvm.ptr to i64
    %c0_i64_44 = arith.constant 0 : i64
    %186 = arith.cmpi eq, %185, %c0_i64_44 : i64
    cf.cond_br %186, ^bb26, ^bb25
  ^bb24:  // pred: ^bb12
    %c3_i32_45 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_45) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %187 = llvm.getelementptr %184[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %188 = llvm.getelementptr %184[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %189 = llvm.getelementptr %184[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %190 = llvm.load %187 : !llvm.ptr -> !llvm.ptr
    %191 = llvm.load %189 : !llvm.ptr -> !llvm.ptr
    %192 = llvm.ptrtoint %190 : !llvm.ptr to i64
    %c0_i64_46 = arith.constant 0 : i64
    %193 = arith.cmpi eq, %192, %c0_i64_46 : i64
    cf.cond_br %193, ^bb28, ^bb27
  ^bb26:  // pred: ^bb23
    %c4_i32_47 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_47) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %194 = llvm.load %188 : !llvm.ptr -> i32
    %195 = arith.cmpi ne, %26, %194 : i32
    cf.cond_br %195, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %196 = llvm.call %190(%191, %138, %140) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %197 = arith.cmpi ne, %196, %c0_i32_49 : i32
    cf.cond_br %197, ^bb5, ^bb31
  ^bb30:  // pred: ^bb27
    %c5_i32_50 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_50) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    %198 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %199 = arith.addi %198, %c8_i32 : i32
    llvm.store %199, %0 : i32, !llvm.ptr
    %200 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_51 = arith.constant 8 : i32
    %201 = arith.addi %200, %c8_i32_51 : i32
    llvm.store %201, %1 : i32, !llvm.ptr
    %202 = llvm.load %6 : !llvm.ptr -> i32
    %203 = arith.cmpi eq, %201, %202 : i32
    %204 = arith.extui %203 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %205 = arith.cmpi eq, %204, %c0_i32_52 : i32
    %206 = arith.extui %205 : i1 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %207 = arith.cmpi ne, %206, %c0_i32_53 : i32
    cf.cond_br %207, ^bb11, ^bb32
  ^bb32:  // pred: ^bb31
    cf.br ^bb6
  ^bb33:  // pred: ^bb7
    %208 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32_54 = arith.constant 5 : i32
    %c31_i32_55 = arith.constant 31 : i32
    %209 = arith.cmpi ule, %c5_i32_54, %c31_i32_55 : i32
    %210 = scf.if %209 -> (i32) {
      %476 = arith.shli %208, %c5_i32_54 : i32
      scf.yield %476 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    llvm.store %210, %8 : i32, !llvm.ptr
    %211 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_56 = arith.constant -1 : i32
    %212 = arith.addi %211, %c-1_i32_56 : i32
    %c134217727_i32 = arith.constant 134217727 : i32
    %213 = arith.andi %212, %c134217727_i32 : i32
    %c1_i32_57 = arith.constant 1 : i32
    %214 = arith.addi %213, %c1_i32_57 : i32
    llvm.store %214, %4 : i32, !llvm.ptr
    %215 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_58 = arith.constant 8 : i64
    %216 = arith.extui %215 : i32 to i64
    %217 = arith.addi %216, %c8_i64_58 : i64
    %218 = llvm.getelementptr %17[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %219 = llvm.load volatile %218 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %219, %9 : i32, !llvm.ptr
    %220 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_59 = arith.constant 0 : i64
    %221 = arith.extui %220 : i32 to i64
    %222 = arith.addi %221, %c0_i64_59 : i64
    %223 = llvm.getelementptr %17[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %224 = llvm.load volatile %223 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %224, %0 : i32, !llvm.ptr
    %c0_i32_60 = arith.constant 0 : i32
    llvm.store %c0_i32_60, %7 : i32, !llvm.ptr
    cf.br ^bb35
  ^bb34:  // pred: ^bb64
    cf.br ^bb6
  ^bb35:  // 2 preds: ^bb33, ^bb63
    %225 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_61 = arith.constant 4 : i32
    %226 = arith.addi %225, %c4_i32_61 : i32
    %c0_i64_62 = arith.constant 0 : i64
    %227 = arith.extui %226 : i32 to i64
    %228 = arith.addi %227, %c0_i64_62 : i64
    %229 = llvm.getelementptr %17[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %230 = llvm.load volatile %229 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %230, %1 : i32, !llvm.ptr
    %c0_i32_63 = arith.constant 0 : i32
    %231 = arith.cmpi eq, %230, %c0_i32_63 : i32
    %232 = arith.extui %231 : i1 to i32
    %c0_i32_64 = arith.constant 0 : i32
    %233 = arith.cmpi ne, %232, %c0_i32_64 : i32
    cf.cond_br %233, ^bb36, ^bb37
  ^bb36:  // 2 preds: ^bb35, ^bb46
    %234 = llvm.load %3 : !llvm.ptr -> i32
    %235 = llvm.load %5 : !llvm.ptr -> i32
    %236 = llvm.load %7 : !llvm.ptr -> i32
    %237 = arith.addi %235, %236 : i32
    llvm.store %237, %1 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %238 = arith.addi %237, %c16_i32 : i32
    %c0_i64_65 = arith.constant 0 : i64
    %239 = arith.extui %238 : i32 to i64
    %240 = arith.addi %239, %c0_i64_65 : i64
    %241 = llvm.getelementptr %17[%240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %242 = llvm.load volatile %241 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c28_i64_66 = arith.constant 28 : i64
    %243 = arith.extui %234 : i32 to i64
    %244 = arith.addi %243, %c28_i64_66 : i64
    %245 = llvm.getelementptr %17[%244] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %242, %245 {alignment = 1 : i64} : i32, !llvm.ptr
    %246 = llvm.load %3 : !llvm.ptr -> i32
    %247 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %248 = arith.addi %247, %c28_i32 : i32
    %c0_i64_67 = arith.constant 0 : i64
    %249 = arith.extui %248 : i32 to i64
    %250 = arith.addi %249, %c0_i64_67 : i64
    %251 = llvm.getelementptr %17[%250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %252 = llvm.load volatile %251 {alignment = 1 : i64} : !llvm.ptr -> i8
    %253 = arith.extui %252 : i8 to i32
    %c44_i64_68 = arith.constant 44 : i64
    %254 = arith.extui %246 : i32 to i64
    %255 = arith.addi %254, %c44_i64_68 : i64
    %256 = llvm.getelementptr %17[%255] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %257 = arith.trunci %253 : i32 to i8
    llvm.store volatile %257, %256 {alignment = 1 : i64} : i8, !llvm.ptr
    %258 = llvm.load %3 : !llvm.ptr -> i32
    %259 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %260 = arith.addi %259, %c24_i32 : i32
    %c0_i64_69 = arith.constant 0 : i64
    %261 = arith.extui %260 : i32 to i64
    %262 = arith.addi %261, %c0_i64_69 : i64
    %263 = llvm.getelementptr %17[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %264 = llvm.load volatile %263 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c40_i64_70 = arith.constant 40 : i64
    %265 = arith.extui %258 : i32 to i64
    %266 = arith.addi %265, %c40_i64_70 : i64
    %267 = llvm.getelementptr %17[%266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %264, %267 {alignment = 1 : i64} : i32, !llvm.ptr
    %268 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_71 = arith.constant 12 : i32
    %269 = arith.addi %268, %c12_i32_71 : i32
    %c0_i64_72 = arith.constant 0 : i64
    %270 = arith.extui %269 : i32 to i64
    %271 = arith.addi %270, %c0_i64_72 : i64
    %272 = llvm.getelementptr %17[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = llvm.load volatile %272 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %273, %6 : i32, !llvm.ptr
    %c0_i32_73 = arith.constant 0 : i32
    llvm.store %c0_i32_73, %10 : i32, !llvm.ptr
    %c0_i32_74 = arith.constant 0 : i32
    llvm.store %c0_i32_74, %11 : i32, !llvm.ptr
    %274 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_75 = arith.constant 8 : i32
    %275 = arith.addi %274, %c8_i32_75 : i32
    %c0_i64_76 = arith.constant 0 : i64
    %276 = arith.extui %275 : i32 to i64
    %277 = arith.addi %276, %c0_i64_76 : i64
    %278 = llvm.getelementptr %17[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %279 : i32, [
      default: ^bb48,
      0: ^bb48,
      1: ^bb49,
      2: ^bb47
    ]
  ^bb37:  // pred: ^bb35
    %280 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_77 = arith.constant 32 : i64
    %281 = arith.extui %280 : i32 to i64
    %282 = arith.addi %281, %c32_i64_77 : i64
    %283 = llvm.getelementptr %17[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %284 = llvm.load volatile %283 {alignment = 1 : i64} : !llvm.ptr -> i32
    %285 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_78 = arith.constant 0 : i64
    %286 = arith.extui %285 : i32 to i64
    %287 = arith.addi %286, %c0_i64_78 : i64
    %288 = llvm.getelementptr %17[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %289 = llvm.load volatile %288 {alignment = 1 : i64} : !llvm.ptr -> i32
    %290 = llvm.load %1 : !llvm.ptr -> i32
    %291 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_79 = arith.constant 36 : i64
    %292 = arith.extui %291 : i32 to i64
    %293 = arith.addi %292, %c36_i64_79 : i64
    %294 = llvm.getelementptr %17[%293] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %295 = llvm.load volatile %294 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_80 = arith.constant 12 : i64
    %296 = arith.extui %295 : i32 to i64
    %297 = arith.addi %296, %c12_i64_80 : i64
    %298 = llvm.getelementptr %17[%297] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %299 = llvm.load volatile %298 {alignment = 1 : i64} : !llvm.ptr -> i32
    %300 = arith.cmpi ult, %299, %32 : i32
    cf.cond_br %300, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %301 = llvm.getelementptr inbounds %30[%299] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %302 = llvm.load %301 : !llvm.ptr -> !llvm.ptr
    %303 = llvm.ptrtoint %302 : !llvm.ptr to i64
    %c0_i64_81 = arith.constant 0 : i64
    %304 = arith.cmpi eq, %303, %c0_i64_81 : i64
    cf.cond_br %304, ^bb41, ^bb40
  ^bb39:  // pred: ^bb37
    %c3_i32_82 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_82) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %305 = llvm.getelementptr %302[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %306 = llvm.getelementptr %302[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %307 = llvm.getelementptr %302[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %308 = llvm.load %305 : !llvm.ptr -> !llvm.ptr
    %309 = llvm.load %307 : !llvm.ptr -> !llvm.ptr
    %310 = llvm.ptrtoint %308 : !llvm.ptr to i64
    %c0_i64_83 = arith.constant 0 : i64
    %311 = arith.cmpi eq, %310, %c0_i64_83 : i64
    cf.cond_br %311, ^bb43, ^bb42
  ^bb41:  // pred: ^bb38
    %c4_i32_84 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_84) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %312 = llvm.load %306 : !llvm.ptr -> i32
    %313 = arith.cmpi ne, %19, %312 : i32
    cf.cond_br %313, ^bb45, ^bb44
  ^bb43:  // pred: ^bb40
    %c3_i32_85 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_85) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %314 = llvm.call %308(%309, %284, %289, %290) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_86 = arith.constant 0 : i32
    %315 = arith.cmpi ne, %314, %c0_i32_86 : i32
    cf.cond_br %315, ^bb5, ^bb46
  ^bb45:  // pred: ^bb42
    %c5_i32_87 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_87) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    cf.br ^bb36
  ^bb47:  // 3 preds: ^bb36, ^bb48, ^bb49
    %316 = llvm.load %3 : !llvm.ptr -> i32
    %317 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i64_88 = arith.constant 16 : i64
    %318 = arith.extui %316 : i32 to i64
    %319 = arith.addi %318, %c16_i64_88 : i64
    %320 = llvm.getelementptr %17[%319] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %317, %320 {alignment = 1 : i64} : i32, !llvm.ptr
    %321 = llvm.load %3 : !llvm.ptr -> i32
    %322 = llvm.load %11 : !llvm.ptr -> i32
    %c12_i64_89 = arith.constant 12 : i64
    %323 = arith.extui %321 : i32 to i64
    %324 = arith.addi %323, %c12_i64_89 : i64
    %325 = llvm.getelementptr %17[%324] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %322, %325 {alignment = 1 : i64} : i32, !llvm.ptr
    %326 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_90 = arith.constant 4 : i32
    %327 = arith.addi %326, %c4_i32_90 : i32
    %c0_i64_91 = arith.constant 0 : i64
    %328 = arith.extui %327 : i32 to i64
    %329 = arith.addi %328, %c0_i64_91 : i64
    %330 = llvm.getelementptr %17[%329] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %331 = llvm.load volatile %330 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %331, %6 : i32, !llvm.ptr
    %332 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_92 = arith.constant 0 : i64
    %333 = arith.extui %332 : i32 to i64
    %334 = arith.addi %333, %c0_i64_92 : i64
    %335 = llvm.getelementptr %17[%334] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %336 = llvm.load volatile %335 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %336 : i32, [
      default: ^bb52,
      0: ^bb52,
      1: ^bb53,
      2: ^bb51
    ]
  ^bb48:  // 3 preds: ^bb36, ^bb36, ^bb50
    %c1_i32_93 = arith.constant 1 : i32
    llvm.store %c1_i32_93, %11 : i32, !llvm.ptr
    cf.br ^bb47
  ^bb49:  // pred: ^bb36
    %337 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_94 = arith.constant 3 : i32
    %c31_i32_95 = arith.constant 31 : i32
    %338 = arith.cmpi ule, %c3_i32_94, %c31_i32_95 : i32
    %339 = scf.if %338 -> (i32) {
      %476 = arith.shli %337, %c3_i32_94 : i32
      scf.yield %476 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    llvm.store %339, %12 : i32, !llvm.ptr
    %c0_i32_96 = arith.constant 0 : i32
    llvm.store %c0_i32_96, %11 : i32, !llvm.ptr
    %340 = llvm.load %9 : !llvm.ptr -> i32
    %341 = llvm.load %12 : !llvm.ptr -> i32
    %342 = arith.addi %340, %341 : i32
    llvm.store %342, %12 : i32, !llvm.ptr
    %c0_i64_97 = arith.constant 0 : i64
    %343 = arith.extui %342 : i32 to i64
    %344 = arith.addi %343, %c0_i64_97 : i64
    %345 = llvm.getelementptr %17[%344] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %346 = llvm.load volatile %345 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_98 = arith.constant 0 : i32
    %347 = arith.cmpi ne, %346, %c0_i32_98 : i32
    cf.cond_br %347, ^bb47, ^bb50
  ^bb50:  // pred: ^bb49
    %348 = llvm.load %12 : !llvm.ptr -> i32
    %c4_i64_99 = arith.constant 4 : i64
    %349 = arith.extui %348 : i32 to i64
    %350 = arith.addi %349, %c4_i64_99 : i64
    %351 = llvm.getelementptr %17[%350] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %352 = llvm.load volatile %351 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %352, %6 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb51:  // 3 preds: ^bb47, ^bb52, ^bb53
    %353 = llvm.load %3 : !llvm.ptr -> i32
    %354 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %355 = arith.extui %353 : i32 to i64
    %356 = arith.addi %355, %c24_i64 : i64
    %357 = llvm.getelementptr %17[%356] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %354, %357 {alignment = 1 : i64} : i32, !llvm.ptr
    %358 = llvm.load %3 : !llvm.ptr -> i32
    %359 = llvm.load %10 : !llvm.ptr -> i32
    %c20_i64_100 = arith.constant 20 : i64
    %360 = arith.extui %358 : i32 to i64
    %361 = arith.addi %360, %c20_i64_100 : i64
    %362 = llvm.getelementptr %17[%361] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %359, %362 {alignment = 1 : i64} : i32, !llvm.ptr
    %363 = llvm.load %9 : !llvm.ptr -> i32
    %364 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %365 = arith.addi %364, %c20_i32 : i32
    %c0_i64_101 = arith.constant 0 : i64
    %366 = arith.extui %365 : i32 to i64
    %367 = arith.addi %366, %c0_i64_101 : i64
    %368 = llvm.getelementptr %17[%367] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %369 = llvm.load volatile %368 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32_102 = arith.constant 3 : i32
    %c31_i32_103 = arith.constant 31 : i32
    %370 = arith.cmpi ule, %c3_i32_102, %c31_i32_103 : i32
    %371 = scf.if %370 -> (i32) {
      %476 = arith.shli %369, %c3_i32_102 : i32
      scf.yield %476 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    %372 = arith.addi %363, %371 : i32
    llvm.store %372, %1 : i32, !llvm.ptr
    %c0_i64_104 = arith.constant 0 : i64
    %373 = arith.extui %372 : i32 to i64
    %374 = arith.addi %373, %c0_i64_104 : i64
    %375 = llvm.getelementptr %17[%374] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %376 = llvm.load volatile %375 {alignment = 1 : i64} : !llvm.ptr -> i32
    %377 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_105 = arith.constant 12 : i32
    %378 = arith.addi %377, %c12_i32_105 : i32
    %379 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_106 = arith.constant 4 : i64
    %380 = arith.extui %379 : i32 to i64
    %381 = arith.addi %380, %c4_i64_106 : i64
    %382 = llvm.getelementptr %17[%381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %383 = llvm.load volatile %382 {alignment = 1 : i64} : !llvm.ptr -> i32
    %384 = arith.cmpi ult, %383, %35 : i32
    cf.cond_br %384, ^bb55, ^bb56
  ^bb52:  // 3 preds: ^bb47, ^bb47, ^bb54
    %c1_i32_107 = arith.constant 1 : i32
    llvm.store %c1_i32_107, %10 : i32, !llvm.ptr
    cf.br ^bb51
  ^bb53:  // pred: ^bb47
    %385 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_108 = arith.constant 3 : i32
    %c31_i32_109 = arith.constant 31 : i32
    %386 = arith.cmpi ule, %c3_i32_108, %c31_i32_109 : i32
    %387 = scf.if %386 -> (i32) {
      %476 = arith.shli %385, %c3_i32_108 : i32
      scf.yield %476 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    llvm.store %387, %11 : i32, !llvm.ptr
    %388 = llvm.load %9 : !llvm.ptr -> i32
    %389 = llvm.load %11 : !llvm.ptr -> i32
    %390 = arith.addi %388, %389 : i32
    llvm.store %390, %11 : i32, !llvm.ptr
    %c0_i64_110 = arith.constant 0 : i64
    %391 = arith.extui %390 : i32 to i64
    %392 = arith.addi %391, %c0_i64_110 : i64
    %393 = llvm.getelementptr %17[%392] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %394 = llvm.load volatile %393 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_111 = arith.constant 0 : i32
    %395 = arith.cmpi ne, %394, %c0_i32_111 : i32
    cf.cond_br %395, ^bb51, ^bb54
  ^bb54:  // pred: ^bb53
    %396 = llvm.load %11 : !llvm.ptr -> i32
    %c4_i64_112 = arith.constant 4 : i64
    %397 = arith.extui %396 : i32 to i64
    %398 = arith.addi %397, %c4_i64_112 : i64
    %399 = llvm.getelementptr %17[%398] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %400 = llvm.load volatile %399 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %400, %6 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb55:  // 2 preds: ^bb51, ^bb56
    %401 = llvm.getelementptr inbounds %33[%383] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %402 = llvm.load %401 : !llvm.ptr -> !llvm.ptr
    %403 = llvm.ptrtoint %402 : !llvm.ptr to i64
    %c0_i64_113 = arith.constant 0 : i64
    %404 = arith.cmpi eq, %403, %c0_i64_113 : i64
    cf.cond_br %404, ^bb58, ^bb57
  ^bb56:  // pred: ^bb51
    %c3_i32_114 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_114) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %405 = llvm.getelementptr %402[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %406 = llvm.getelementptr %402[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %407 = llvm.getelementptr %402[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %408 = llvm.load %405 : !llvm.ptr -> !llvm.ptr
    %409 = llvm.load %407 : !llvm.ptr -> !llvm.ptr
    %410 = llvm.ptrtoint %408 : !llvm.ptr to i64
    %c0_i64_115 = arith.constant 0 : i64
    %411 = arith.cmpi eq, %410, %c0_i64_115 : i64
    cf.cond_br %411, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c4_i32_116 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_116) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %412 = llvm.load %406 : !llvm.ptr -> i32
    %413 = arith.cmpi ne, %26, %412 : i32
    cf.cond_br %413, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_117 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_117) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %414 = llvm.call %408(%409, %376, %378) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_118 = arith.constant 0 : i32
    %415 = arith.cmpi ne, %414, %c0_i32_118 : i32
    cf.cond_br %415, ^bb5, ^bb63
  ^bb62:  // pred: ^bb59
    %c5_i32_119 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_119) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // pred: ^bb61
    %416 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_120 = arith.constant 8 : i32
    %417 = arith.addi %416, %c8_i32_120 : i32
    llvm.store %417, %0 : i32, !llvm.ptr
    %418 = llvm.load %8 : !llvm.ptr -> i32
    %419 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32_121 = arith.constant 32 : i32
    %420 = arith.addi %419, %c32_i32_121 : i32
    llvm.store %420, %7 : i32, !llvm.ptr
    %421 = arith.cmpi eq, %418, %420 : i32
    %422 = arith.extui %421 : i1 to i32
    %c0_i32_122 = arith.constant 0 : i32
    %423 = arith.cmpi eq, %422, %c0_i32_122 : i32
    %424 = arith.extui %423 : i1 to i32
    %c0_i32_123 = arith.constant 0 : i32
    %425 = arith.cmpi ne, %424, %c0_i32_123 : i32
    cf.cond_br %425, ^bb35, ^bb64
  ^bb64:  // pred: ^bb63
    cf.br ^bb34
  ^bb65:  // pred: ^bb6
    %426 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_124 = arith.constant 32 : i64
    %427 = arith.extui %426 : i32 to i64
    %428 = arith.addi %427, %c32_i64_124 : i64
    %429 = llvm.getelementptr %17[%428] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %430 = llvm.load volatile %429 {alignment = 1 : i64} : !llvm.ptr -> i32
    %431 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_125 = arith.constant 0 : i64
    %432 = arith.extui %431 : i32 to i64
    %433 = arith.addi %432, %c0_i64_125 : i64
    %434 = llvm.getelementptr %17[%433] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %435 = llvm.load volatile %434 {alignment = 1 : i64} : !llvm.ptr -> i32
    %436 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_126 = arith.constant 3 : i32
    %c31_i32_127 = arith.constant 31 : i32
    %437 = arith.cmpi ule, %c3_i32_126, %c31_i32_127 : i32
    %438 = scf.if %437 -> (i32) {
      %476 = arith.shli %436, %c3_i32_126 : i32
      scf.yield %476 : i32
    } else {
      %c0_i32_140 = arith.constant 0 : i32
      scf.yield %c0_i32_140 : i32
    }
    %439 = arith.addi %435, %438 : i32
    llvm.store %439, %1 : i32, !llvm.ptr
    %c0_i64_128 = arith.constant 0 : i64
    %440 = arith.extui %439 : i32 to i64
    %441 = arith.addi %440, %c0_i64_128 : i64
    %442 = llvm.getelementptr %17[%441] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %443 = llvm.load volatile %442 {alignment = 1 : i64} : !llvm.ptr -> i32
    %444 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_129 = arith.constant 4 : i64
    %445 = arith.extui %444 : i32 to i64
    %446 = arith.addi %445, %c4_i64_129 : i64
    %447 = llvm.getelementptr %17[%446] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %448 = llvm.load volatile %447 {alignment = 1 : i64} : !llvm.ptr -> i32
    %449 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_130 = arith.constant 36 : i64
    %450 = arith.extui %449 : i32 to i64
    %451 = arith.addi %450, %c36_i64_130 : i64
    %452 = llvm.getelementptr %17[%451] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %453 = llvm.load volatile %452 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_131 = arith.constant 12 : i64
    %454 = arith.extui %453 : i32 to i64
    %455 = arith.addi %454, %c12_i64_131 : i64
    %456 = llvm.getelementptr %17[%455] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %457 = llvm.load volatile %456 {alignment = 1 : i64} : !llvm.ptr -> i32
    %458 = arith.cmpi ult, %457, %38 : i32
    cf.cond_br %458, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %459 = llvm.getelementptr inbounds %36[%457] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %460 = llvm.load %459 : !llvm.ptr -> !llvm.ptr
    %461 = llvm.ptrtoint %460 : !llvm.ptr to i64
    %c0_i64_132 = arith.constant 0 : i64
    %462 = arith.cmpi eq, %461, %c0_i64_132 : i64
    cf.cond_br %462, ^bb69, ^bb68
  ^bb67:  // pred: ^bb65
    %c3_i32_133 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_133) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %463 = llvm.getelementptr %460[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %464 = llvm.getelementptr %460[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %465 = llvm.getelementptr %460[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %466 = llvm.load %463 : !llvm.ptr -> !llvm.ptr
    %467 = llvm.load %465 : !llvm.ptr -> !llvm.ptr
    %468 = llvm.ptrtoint %466 : !llvm.ptr to i64
    %c0_i64_134 = arith.constant 0 : i64
    %469 = arith.cmpi eq, %468, %c0_i64_134 : i64
    cf.cond_br %469, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c4_i32_135 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_135) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %470 = llvm.load %464 : !llvm.ptr -> i32
    %471 = arith.cmpi ne, %19, %470 : i32
    cf.cond_br %471, ^bb73, ^bb72
  ^bb71:  // pred: ^bb68
    %c3_i32_136 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_136) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %472 = llvm.call %466(%467, %430, %443, %448) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_137 = arith.constant 0 : i32
    %473 = arith.cmpi eq, %472, %c0_i32_137 : i32
    %474 = arith.extui %473 : i1 to i32
    %c0_i32_138 = arith.constant 0 : i32
    %475 = arith.cmpi ne, %474, %c0_i32_138 : i32
    cf.cond_br %475, ^bb4, ^bb74
  ^bb73:  // pred: ^bb70
    %c5_i32_139 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_139) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // pred: ^bb72
    cf.br ^bb5
  }
  func.func @f147(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_2 = arith.constant 1 : i32
    llvm.store %c1_i32_2, %2 : i32, !llvm.ptr
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = call @f144(%arg0, %13, %14) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_3 : i32
    cf.cond_br %16, ^bb3, ^bb4
  ^bb2(%17: i32):  // pred: ^bb3
    return %17 : i32
  ^bb3:  // 3 preds: ^bb1, ^bb11, ^bb13
    %18 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%18 : i32)
  ^bb4:  // pred: ^bb1
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c20_i64 : i64
    %22 = llvm.getelementptr %5[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050636_i32 = arith.constant 1050636 : i32
    %c2_i32 = arith.constant 2 : i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c24_i64 : i64
    %27 = llvm.getelementptr %5[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c12_i64 : i64
    %31 = llvm.getelementptr %5[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    %33 = arith.cmpi ult, %32, %12 : i32
    cf.cond_br %33, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %34 = llvm.getelementptr inbounds %10[%32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %35 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.ptrtoint %35 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %37 = arith.cmpi eq, %36, %c0_i64 : i64
    cf.cond_br %37, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %38 = llvm.getelementptr %35[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %39 = llvm.getelementptr %35[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %40 = llvm.getelementptr %35[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %41 = llvm.load %38 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.ptrtoint %41 : !llvm.ptr to i64
    %c0_i64_4 = arith.constant 0 : i64
    %44 = arith.cmpi eq, %43, %c0_i64_4 : i64
    cf.cond_br %44, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %45 = llvm.load %39 : !llvm.ptr -> i32
    %46 = arith.cmpi ne, %7, %45 : i32
    cf.cond_br %46, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_5 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_5) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %47 = llvm.call %41(%42, %23, %c1050636_i32, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_6 : i32
    cf.cond_br %48, ^bb3, ^bb13
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // pred: ^bb11
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_7 = arith.constant 4 : i32
    %50 = arith.addi %49, %c4_i32_7 : i32
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %52 = call @f144(%arg0, %50, %51) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %52, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f148(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %11 = arith.subi %10, %c32_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %1 : !llvm.ptr -> i32
    cf.switch %12 : i32, [
      default: ^bb14,
      0: ^bb8,
      1: ^bb13,
      2: ^bb13,
      3: ^bb13,
      4: ^bb13,
      5: ^bb13,
      6: ^bb13,
      7: ^bb13,
      8: ^bb13,
      9: ^bb12,
      10: ^bb10,
      11: ^bb13,
      12: ^bb13,
      13: ^bb11,
      14: ^bb13,
      15: ^bb13,
      16: ^bb13,
      17: ^bb13,
      18: ^bb13,
      19: ^bb13,
      20: ^bb13,
      21: ^bb13,
      22: ^bb13,
      23: ^bb13,
      24: ^bb13,
      25: ^bb13,
      26: ^bb13,
      27: ^bb13,
      28: ^bb13,
      29: ^bb13,
      30: ^bb13,
      31: ^bb13,
      32: ^bb13,
      33: ^bb13,
      34: ^bb6,
      35: ^bb13,
      36: ^bb13,
      37: ^bb13,
      38: ^bb13,
      39: ^bb7
    ]
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 10 preds: ^bb4, ^bb8, ^bb9, ^bb10, ^bb11, ^bb12, ^bb18, ^bb19, ^bb21, ^bb22
    %13 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_4 = arith.constant 32 : i32
    %14 = arith.addi %13, %c32_i32_4 : i32
    llvm.store %14, %6 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb6
    %15 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32 = arith.constant 512 : i32
    %c10_i64 = arith.constant 10 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c10_i64 : i64
    %18 = llvm.getelementptr %9[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = arith.trunci %c512_i32 : i32 to i16
    llvm.store volatile %19, %18 {alignment = 1 : i64} : i16, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %c2_i64 = arith.constant 2 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c2_i64 : i64
    %23 = llvm.getelementptr %9[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c8796_i32 = arith.constant 8796 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_5 : i64
    %27 = llvm.getelementptr %9[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = arith.trunci %c8796_i32 : i32 to i16
    llvm.store volatile %28, %27 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 5 preds: ^bb7, ^bb13, ^bb16, ^bb17, ^bb20
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %30 = call @f150(%arg0, %29) : (!llvm.ptr, i32) -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_6 : i32
    cf.cond_br %31, ^bb21, ^bb22
  ^bb6:  // pred: ^bb1
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %33 = arith.andi %32, %c65536_i32 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_7 : i32
    cf.cond_br %34, ^bb4, ^bb20
  ^bb7:  // pred: ^bb1
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %36 = arith.andi %35, %c256_i32 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %37 = arith.cmpi eq, %36, %c0_i32_8 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_9 : i32
    cf.cond_br %39, ^bb5, ^bb19
  ^bb8:  // pred: ^bb1
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32_10 = arith.constant 512 : i32
    %c10_i64_11 = arith.constant 10 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c10_i64_11 : i64
    %43 = llvm.getelementptr %9[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = arith.trunci %c512_i32_10 : i32 to i16
    llvm.store volatile %44, %43 {alignment = 1 : i64} : i16, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %c2_i64_13 = arith.constant 2 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c2_i64_13 : i64
    %48 = llvm.getelementptr %9[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_12, %48 {alignment = 1 : i64} : i64, !llvm.ptr
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c12380_i32 = arith.constant 12380 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64_14 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = arith.trunci %c12380_i32 : i32 to i16
    llvm.store volatile %53, %52 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb9:  // pred: ^bb14
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32_15 = arith.constant 512 : i32
    %c10_i64_16 = arith.constant 10 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c10_i64_16 : i64
    %57 = llvm.getelementptr %9[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = arith.trunci %c512_i32_15 : i32 to i16
    llvm.store volatile %58, %57 {alignment = 1 : i64} : i16, !llvm.ptr
    %59 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %c2_i64_18 = arith.constant 2 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c2_i64_18 : i64
    %62 = llvm.getelementptr %9[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_17, %62 {alignment = 1 : i64} : i64, !llvm.ptr
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c23644_i32 = arith.constant 23644 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c0_i64_19 : i64
    %66 = llvm.getelementptr %9[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = arith.trunci %c23644_i32 : i32 to i16
    llvm.store volatile %67, %66 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // pred: ^bb1
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32_20 = arith.constant 512 : i32
    %c10_i64_21 = arith.constant 10 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c10_i64_21 : i64
    %71 = llvm.getelementptr %9[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = arith.trunci %c512_i32_20 : i32 to i16
    llvm.store volatile %72, %71 {alignment = 1 : i64} : i16, !llvm.ptr
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %c2_i64_23 = arith.constant 2 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c2_i64_23 : i64
    %76 = llvm.getelementptr %9[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_22, %76 {alignment = 1 : i64} : i64, !llvm.ptr
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %c28252_i32 = arith.constant 28252 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_24 : i64
    %80 = llvm.getelementptr %9[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = arith.trunci %c28252_i32 : i32 to i16
    llvm.store volatile %81, %80 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb11:  // pred: ^bb1
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32_25 = arith.constant 512 : i32
    %c10_i64_26 = arith.constant 10 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c10_i64_26 : i64
    %85 = llvm.getelementptr %9[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = arith.trunci %c512_i32_25 : i32 to i16
    llvm.store volatile %86, %85 {alignment = 1 : i64} : i16, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_27 = arith.constant 0 : i64
    %c2_i64_28 = arith.constant 2 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c2_i64_28 : i64
    %90 = llvm.getelementptr %9[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_27, %90 {alignment = 1 : i64} : i64, !llvm.ptr
    %91 = llvm.load %0 : !llvm.ptr -> i32
    %c29276_i32 = arith.constant 29276 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_29 : i64
    %94 = llvm.getelementptr %9[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = arith.trunci %c29276_i32 : i32 to i16
    llvm.store volatile %95, %94 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb1
    %96 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32_30 = arith.constant 512 : i32
    %c10_i64_31 = arith.constant 10 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c10_i64_31 : i64
    %99 = llvm.getelementptr %9[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = arith.trunci %c512_i32_30 : i32 to i16
    llvm.store volatile %100, %99 {alignment = 1 : i64} : i16, !llvm.ptr
    %101 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %c2_i64_33 = arith.constant 2 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c2_i64_33 : i64
    %104 = llvm.getelementptr %9[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_32, %104 {alignment = 1 : i64} : i64, !llvm.ptr
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %c29788_i32 = arith.constant 29788 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %106 = arith.extui %105 : i32 to i64
    %107 = arith.addi %106, %c0_i64_34 : i64
    %108 = llvm.getelementptr %9[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %109 = arith.trunci %c29788_i32 : i32 to i16
    llvm.store volatile %109, %108 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // 35 preds: ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb15
    %110 = llvm.load %1 : !llvm.ptr -> i32
    %c768_i32 = arith.constant 768 : i32
    %111 = arith.cmpi ult, %110, %c768_i32 : i32
    %112 = arith.extui %111 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %113 = arith.cmpi ne, %112, %c0_i32_35 : i32
    cf.cond_br %113, ^bb5, ^bb16
  ^bb14:  // pred: ^bb1
    %114 = llvm.load %1 : !llvm.ptr -> i32
    %c92_i32 = arith.constant 92 : i32
    %115 = arith.cmpi eq, %114, %c92_i32 : i32
    %116 = arith.extui %115 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %117 = arith.cmpi ne, %116, %c0_i32_36 : i32
    cf.cond_br %117, ^bb9, ^bb15
  ^bb15:  // pred: ^bb14
    cf.br ^bb13
  ^bb16:  // pred: ^bb13
    %118 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_37 = arith.constant 1 : i32
    %119 = arith.andi %118, %c1_i32_37 : i32
    %c0_i32_38 = arith.constant 0 : i32
    %120 = arith.cmpi eq, %119, %c0_i32_38 : i32
    %121 = arith.extui %120 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %122 = arith.cmpi ne, %121, %c0_i32_39 : i32
    cf.cond_br %122, ^bb5, ^bb17
  ^bb17:  // pred: ^bb16
    %123 = llvm.load %1 : !llvm.ptr -> i32
    %124 = call @f149(%arg0, %123) : (!llvm.ptr, i32) -> i32
    %c0_i32_40 = arith.constant 0 : i32
    %125 = arith.cmpi eq, %124, %c0_i32_40 : i32
    %126 = arith.extui %125 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %127 = arith.cmpi ne, %126, %c0_i32_41 : i32
    cf.cond_br %127, ^bb5, ^bb18
  ^bb18:  // pred: ^bb17
    %128 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_42 = arith.constant 0 : i32
    %c10_i64_43 = arith.constant 10 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c10_i64_43 : i64
    %131 = llvm.getelementptr %9[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = arith.trunci %c0_i32_42 : i32 to i8
    llvm.store volatile %132, %131 {alignment = 1 : i64} : i8, !llvm.ptr
    %133 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_44 = arith.constant 0 : i32
    %c8_i64 = arith.constant 8 : i64
    %134 = arith.extui %133 : i32 to i64
    %135 = arith.addi %134, %c8_i64 : i64
    %136 = llvm.getelementptr %9[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = arith.trunci %c0_i32_44 : i32 to i16
    llvm.store volatile %137, %136 {alignment = 1 : i64} : i16, !llvm.ptr
    %138 = llvm.load %3 : !llvm.ptr -> i32
    %139 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %c31_i32 = arith.constant 31 : i32
    %140 = arith.cmpi ule, %c20_i32, %c31_i32 : i32
    %141 = scf.if %140 -> (i32) {
      %478 = arith.shrui %139, %c20_i32 : i32
      scf.yield %478 : i32
    } else {
      %c0_i32_143 = arith.constant 0 : i32
      scf.yield %c0_i32_143 : i32
    }
    %c1050638_i32 = arith.constant 1050638 : i32
    %142 = arith.addi %141, %c1050638_i32 : i32
    %c0_i64_45 = arith.constant 0 : i64
    %143 = arith.extui %142 : i32 to i64
    %144 = arith.addi %143, %c0_i64_45 : i64
    %145 = llvm.getelementptr %9[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %146 = llvm.load volatile %145 {alignment = 1 : i64} : !llvm.ptr -> i8
    %147 = arith.extui %146 : i8 to i32
    %c11_i64 = arith.constant 11 : i64
    %148 = arith.extui %138 : i32 to i64
    %149 = arith.addi %148, %c11_i64 : i64
    %150 = llvm.getelementptr %9[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = arith.trunci %147 : i32 to i8
    llvm.store volatile %151, %150 {alignment = 1 : i64} : i8, !llvm.ptr
    %152 = llvm.load %3 : !llvm.ptr -> i32
    %153 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c31_i32_46 = arith.constant 31 : i32
    %154 = arith.cmpi ule, %c4_i32, %c31_i32_46 : i32
    %155 = scf.if %154 -> (i32) {
      %478 = arith.shrui %153, %c4_i32 : i32
      scf.yield %478 : i32
    } else {
      %c0_i32_143 = arith.constant 0 : i32
      scf.yield %c0_i32_143 : i32
    }
    %c15_i32 = arith.constant 15 : i32
    %156 = arith.andi %155, %c15_i32 : i32
    %c1050638_i32_47 = arith.constant 1050638 : i32
    %157 = arith.addi %156, %c1050638_i32_47 : i32
    %c0_i64_48 = arith.constant 0 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c0_i64_48 : i64
    %160 = llvm.getelementptr %9[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i8
    %162 = arith.extui %161 : i8 to i32
    %c15_i64 = arith.constant 15 : i64
    %163 = arith.extui %152 : i32 to i64
    %164 = arith.addi %163, %c15_i64 : i64
    %165 = llvm.getelementptr %9[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %166 = arith.trunci %162 : i32 to i8
    llvm.store volatile %166, %165 {alignment = 1 : i64} : i8, !llvm.ptr
    %167 = llvm.load %3 : !llvm.ptr -> i32
    %168 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_49 = arith.constant 31 : i32
    %169 = arith.cmpi ule, %c8_i32, %c31_i32_49 : i32
    %170 = scf.if %169 -> (i32) {
      %478 = arith.shrui %168, %c8_i32 : i32
      scf.yield %478 : i32
    } else {
      %c0_i32_143 = arith.constant 0 : i32
      scf.yield %c0_i32_143 : i32
    }
    %c15_i32_50 = arith.constant 15 : i32
    %171 = arith.andi %170, %c15_i32_50 : i32
    %c1050638_i32_51 = arith.constant 1050638 : i32
    %172 = arith.addi %171, %c1050638_i32_51 : i32
    %c0_i64_52 = arith.constant 0 : i64
    %173 = arith.extui %172 : i32 to i64
    %174 = arith.addi %173, %c0_i64_52 : i64
    %175 = llvm.getelementptr %9[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = llvm.load volatile %175 {alignment = 1 : i64} : !llvm.ptr -> i8
    %177 = arith.extui %176 : i8 to i32
    %c14_i64 = arith.constant 14 : i64
    %178 = arith.extui %167 : i32 to i64
    %179 = arith.addi %178, %c14_i64 : i64
    %180 = llvm.getelementptr %9[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %181 = arith.trunci %177 : i32 to i8
    llvm.store volatile %181, %180 {alignment = 1 : i64} : i8, !llvm.ptr
    %182 = llvm.load %3 : !llvm.ptr -> i32
    %183 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_53 = arith.constant 31 : i32
    %184 = arith.cmpi ule, %c12_i32, %c31_i32_53 : i32
    %185 = scf.if %184 -> (i32) {
      %478 = arith.shrui %183, %c12_i32 : i32
      scf.yield %478 : i32
    } else {
      %c0_i32_143 = arith.constant 0 : i32
      scf.yield %c0_i32_143 : i32
    }
    %c15_i32_54 = arith.constant 15 : i32
    %186 = arith.andi %185, %c15_i32_54 : i32
    %c1050638_i32_55 = arith.constant 1050638 : i32
    %187 = arith.addi %186, %c1050638_i32_55 : i32
    %c0_i64_56 = arith.constant 0 : i64
    %188 = arith.extui %187 : i32 to i64
    %189 = arith.addi %188, %c0_i64_56 : i64
    %190 = llvm.getelementptr %9[%189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %191 = llvm.load volatile %190 {alignment = 1 : i64} : !llvm.ptr -> i8
    %192 = arith.extui %191 : i8 to i32
    %c13_i64 = arith.constant 13 : i64
    %193 = arith.extui %182 : i32 to i64
    %194 = arith.addi %193, %c13_i64 : i64
    %195 = llvm.getelementptr %9[%194] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %196 = arith.trunci %192 : i32 to i8
    llvm.store volatile %196, %195 {alignment = 1 : i64} : i8, !llvm.ptr
    %197 = llvm.load %3 : !llvm.ptr -> i32
    %198 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32_57 = arith.constant 31 : i32
    %199 = arith.cmpi ule, %c16_i32, %c31_i32_57 : i32
    %200 = scf.if %199 -> (i32) {
      %478 = arith.shrui %198, %c16_i32 : i32
      scf.yield %478 : i32
    } else {
      %c0_i32_143 = arith.constant 0 : i32
      scf.yield %c0_i32_143 : i32
    }
    %c15_i32_58 = arith.constant 15 : i32
    %201 = arith.andi %200, %c15_i32_58 : i32
    %c1050638_i32_59 = arith.constant 1050638 : i32
    %202 = arith.addi %201, %c1050638_i32_59 : i32
    %c0_i64_60 = arith.constant 0 : i64
    %203 = arith.extui %202 : i32 to i64
    %204 = arith.addi %203, %c0_i64_60 : i64
    %205 = llvm.getelementptr %9[%204] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %206 = llvm.load volatile %205 {alignment = 1 : i64} : !llvm.ptr -> i8
    %207 = arith.extui %206 : i8 to i32
    %c12_i64 = arith.constant 12 : i64
    %208 = arith.extui %197 : i32 to i64
    %209 = arith.addi %208, %c12_i64 : i64
    %210 = llvm.getelementptr %9[%209] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %211 = arith.trunci %207 : i32 to i8
    llvm.store volatile %211, %210 {alignment = 1 : i64} : i8, !llvm.ptr
    %212 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_61 = arith.constant 8 : i32
    %213 = arith.addi %212, %c8_i32_61 : i32
    %214 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_62 = arith.constant 1 : i32
    %215 = arith.ori %214, %c1_i32_62 : i32
    %false = arith.constant false
    %216 = llvm.call_intrinsic "llvm.ctlz.i32"(%215, %false) : (i32, i1) -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32_63 = arith.constant 31 : i32
    %217 = arith.cmpi ule, %c2_i32, %c31_i32_63 : i32
    %218 = scf.if %217 -> (i32) {
      %478 = arith.shrui %216, %c2_i32 : i32
      scf.yield %478 : i32
    } else {
      %c0_i32_143 = arith.constant 0 : i32
      scf.yield %c0_i32_143 : i32
    }
    llvm.store %218, %2 : i32, !llvm.ptr
    %219 = arith.addi %213, %218 : i32
    llvm.store %219, %4 : i32, !llvm.ptr
    %c123_i32 = arith.constant 123 : i32
    %c0_i64_64 = arith.constant 0 : i64
    %220 = arith.extui %219 : i32 to i64
    %221 = arith.addi %220, %c0_i64_64 : i64
    %222 = llvm.getelementptr %9[%221] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %223 = arith.trunci %c123_i32 : i32 to i8
    llvm.store volatile %223, %222 {alignment = 1 : i64} : i8, !llvm.ptr
    %224 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %225 = arith.addi %224, %c-1_i32 : i32
    %c117_i32 = arith.constant 117 : i32
    %c0_i64_65 = arith.constant 0 : i64
    %226 = arith.extui %225 : i32 to i64
    %227 = arith.addi %226, %c0_i64_65 : i64
    %228 = llvm.getelementptr %9[%227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %229 = arith.trunci %c117_i32 : i32 to i8
    llvm.store volatile %229, %228 {alignment = 1 : i64} : i8, !llvm.ptr
    %230 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_66 = arith.constant 8 : i32
    %231 = arith.addi %230, %c8_i32_66 : i32
    %232 = llvm.load %2 : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %233 = arith.addi %232, %c-2_i32 : i32
    llvm.store %233, %2 : i32, !llvm.ptr
    %234 = arith.addi %231, %233 : i32
    %c92_i32_67 = arith.constant 92 : i32
    %c0_i64_68 = arith.constant 0 : i64
    %235 = arith.extui %234 : i32 to i64
    %236 = arith.addi %235, %c0_i64_68 : i64
    %237 = llvm.getelementptr %9[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %238 = arith.trunci %c92_i32_67 : i32 to i8
    llvm.store volatile %238, %237 {alignment = 1 : i64} : i8, !llvm.ptr
    %239 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_69 = arith.constant 8 : i32
    %240 = arith.addi %239, %c8_i32_69 : i32
    %c8_i32_70 = arith.constant 8 : i32
    %241 = arith.addi %240, %c8_i32_70 : i32
    llvm.store %241, %4 : i32, !llvm.ptr
    %242 = llvm.load %1 : !llvm.ptr -> i32
    %c15_i32_71 = arith.constant 15 : i32
    %243 = arith.andi %242, %c15_i32_71 : i32
    %c1050638_i32_72 = arith.constant 1050638 : i32
    %244 = arith.addi %243, %c1050638_i32_72 : i32
    %c0_i64_73 = arith.constant 0 : i64
    %245 = arith.extui %244 : i32 to i64
    %246 = arith.addi %245, %c0_i64_73 : i64
    %247 = llvm.getelementptr %9[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %248 = llvm.load volatile %247 {alignment = 1 : i64} : !llvm.ptr -> i8
    %249 = arith.extui %248 : i8 to i32
    %c0_i64_74 = arith.constant 0 : i64
    %250 = arith.extui %241 : i32 to i64
    %251 = arith.addi %250, %c0_i64_74 : i64
    %252 = llvm.getelementptr %9[%251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %253 = arith.trunci %249 : i32 to i8
    llvm.store volatile %253, %252 {alignment = 1 : i64} : i8, !llvm.ptr
    %254 = llvm.load %0 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %c11_i64_75 = arith.constant 11 : i64
    %255 = arith.extui %254 : i32 to i64
    %256 = arith.addi %255, %c11_i64_75 : i64
    %257 = llvm.getelementptr %9[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %258 = arith.trunci %c10_i32 : i32 to i8
    llvm.store volatile %258, %257 {alignment = 1 : i64} : i8, !llvm.ptr
    %259 = llvm.load %0 : !llvm.ptr -> i32
    %260 = llvm.load %2 : !llvm.ptr -> i32
    %c10_i64_76 = arith.constant 10 : i64
    %261 = arith.extui %259 : i32 to i64
    %262 = arith.addi %261, %c10_i64_76 : i64
    %263 = llvm.getelementptr %9[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %264 = arith.trunci %260 : i32 to i8
    llvm.store volatile %264, %263 {alignment = 1 : i64} : i8, !llvm.ptr
    %265 = llvm.load %0 : !llvm.ptr -> i32
    %266 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_77 = arith.constant 8 : i64
    %267 = arith.extui %266 : i32 to i64
    %268 = arith.addi %267, %c8_i64_77 : i64
    %269 = llvm.getelementptr %9[%268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %270 = llvm.load volatile %269 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_78 = arith.constant 0 : i64
    %271 = arith.extui %265 : i32 to i64
    %272 = arith.addi %271, %c0_i64_78 : i64
    %273 = llvm.getelementptr %9[%272] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %270, %273 {alignment = 1 : i64} : i64, !llvm.ptr
    %274 = llvm.load %3 : !llvm.ptr -> i32
    %c125_i32 = arith.constant 125 : i32
    %c17_i64 = arith.constant 17 : i64
    %275 = arith.extui %274 : i32 to i64
    %276 = arith.addi %275, %c17_i64 : i64
    %277 = llvm.getelementptr %9[%276] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %278 = arith.trunci %c125_i32 : i32 to i8
    llvm.store volatile %278, %277 {alignment = 1 : i64} : i8, !llvm.ptr
    %279 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_79 = arith.constant 8 : i32
    %280 = arith.addi %279, %c8_i32_79 : i32
    %281 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_80 = arith.constant 0 : i64
    %282 = arith.extui %281 : i32 to i64
    %283 = arith.addi %282, %c0_i64_80 : i64
    %284 = llvm.getelementptr %9[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %285 = llvm.load volatile %284 {alignment = 1 : i64} : !llvm.ptr -> i16
    %286 = arith.extui %285 : i16 to i32
    %c0_i64_81 = arith.constant 0 : i64
    %287 = arith.extui %280 : i32 to i64
    %288 = arith.addi %287, %c0_i64_81 : i64
    %289 = llvm.getelementptr %9[%288] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %290 = arith.trunci %286 : i32 to i16
    llvm.store volatile %290, %289 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb19:  // pred: ^bb7
    %291 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32_82 = arith.constant 512 : i32
    %c10_i64_83 = arith.constant 10 : i64
    %292 = arith.extui %291 : i32 to i64
    %293 = arith.addi %292, %c10_i64_83 : i64
    %294 = llvm.getelementptr %9[%293] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %295 = arith.trunci %c512_i32_82 : i32 to i16
    llvm.store volatile %295, %294 {alignment = 1 : i64} : i16, !llvm.ptr
    %296 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_84 = arith.constant 0 : i64
    %c2_i64_85 = arith.constant 2 : i64
    %297 = arith.extui %296 : i32 to i64
    %298 = arith.addi %297, %c2_i64_85 : i64
    %299 = llvm.getelementptr %9[%298] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_84, %299 {alignment = 1 : i64} : i64, !llvm.ptr
    %300 = llvm.load %0 : !llvm.ptr -> i32
    %c10076_i32 = arith.constant 10076 : i32
    %c0_i64_86 = arith.constant 0 : i64
    %301 = arith.extui %300 : i32 to i64
    %302 = arith.addi %301, %c0_i64_86 : i64
    %303 = llvm.getelementptr %9[%302] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %304 = arith.trunci %c10076_i32 : i32 to i16
    llvm.store volatile %304, %303 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb20:  // pred: ^bb6
    cf.br ^bb5
  ^bb21:  // pred: ^bb5
    %305 = llvm.load %0 : !llvm.ptr -> i32
    %306 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %307 = arith.extui %305 : i32 to i64
    %308 = arith.addi %307, %c4_i64 : i64
    %309 = llvm.getelementptr %9[%308] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %306, %309 {alignment = 1 : i64} : i32, !llvm.ptr
    %310 = llvm.load %0 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %c0_i64_87 = arith.constant 0 : i64
    %311 = arith.extui %310 : i32 to i64
    %312 = arith.addi %311, %c0_i64_87 : i64
    %313 = llvm.getelementptr %9[%312] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %314 = arith.trunci %c128_i32 : i32 to i8
    llvm.store volatile %314, %313 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb22:  // pred: ^bb5
    %315 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_88 = arith.constant 0 : i32
    %c22_i64 = arith.constant 22 : i64
    %316 = arith.extui %315 : i32 to i64
    %317 = arith.addi %316, %c22_i64 : i64
    %318 = llvm.getelementptr %9[%317] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %319 = arith.trunci %c0_i32_88 : i32 to i8
    llvm.store volatile %319, %318 {alignment = 1 : i64} : i8, !llvm.ptr
    %320 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_89 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %321 = arith.extui %320 : i32 to i64
    %322 = arith.addi %321, %c20_i64 : i64
    %323 = llvm.getelementptr %9[%322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %324 = arith.trunci %c0_i32_89 : i32 to i16
    llvm.store volatile %324, %323 {alignment = 1 : i64} : i16, !llvm.ptr
    %325 = llvm.load %3 : !llvm.ptr -> i32
    %326 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32_90 = arith.constant 20 : i32
    %c31_i32_91 = arith.constant 31 : i32
    %327 = arith.cmpi ule, %c20_i32_90, %c31_i32_91 : i32
    %328 = scf.if %327 -> (i32) {
      %478 = arith.shrui %326, %c20_i32_90 : i32
      scf.yield %478 : i32
    } else {
      %c0_i32_143 = arith.constant 0 : i32
      scf.yield %c0_i32_143 : i32
    }
    %c1050638_i32_92 = arith.constant 1050638 : i32
    %329 = arith.addi %328, %c1050638_i32_92 : i32
    %c0_i64_93 = arith.constant 0 : i64
    %330 = arith.extui %329 : i32 to i64
    %331 = arith.addi %330, %c0_i64_93 : i64
    %332 = llvm.getelementptr %9[%331] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %333 = llvm.load volatile %332 {alignment = 1 : i64} : !llvm.ptr -> i8
    %334 = arith.extui %333 : i8 to i32
    %c23_i64 = arith.constant 23 : i64
    %335 = arith.extui %325 : i32 to i64
    %336 = arith.addi %335, %c23_i64 : i64
    %337 = llvm.getelementptr %9[%336] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %338 = arith.trunci %334 : i32 to i8
    llvm.store volatile %338, %337 {alignment = 1 : i64} : i8, !llvm.ptr
    %339 = llvm.load %3 : !llvm.ptr -> i32
    %340 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_94 = arith.constant 4 : i32
    %c31_i32_95 = arith.constant 31 : i32
    %341 = arith.cmpi ule, %c4_i32_94, %c31_i32_95 : i32
    %342 = scf.if %341 -> (i32) {
      %478 = arith.shrui %340, %c4_i32_94 : i32
      scf.yield %478 : i32
    } else {
      %c0_i32_143 = arith.constant 0 : i32
      scf.yield %c0_i32_143 : i32
    }
    %c15_i32_96 = arith.constant 15 : i32
    %343 = arith.andi %342, %c15_i32_96 : i32
    %c1050638_i32_97 = arith.constant 1050638 : i32
    %344 = arith.addi %343, %c1050638_i32_97 : i32
    %c0_i64_98 = arith.constant 0 : i64
    %345 = arith.extui %344 : i32 to i64
    %346 = arith.addi %345, %c0_i64_98 : i64
    %347 = llvm.getelementptr %9[%346] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %348 = llvm.load volatile %347 {alignment = 1 : i64} : !llvm.ptr -> i8
    %349 = arith.extui %348 : i8 to i32
    %c27_i64 = arith.constant 27 : i64
    %350 = arith.extui %339 : i32 to i64
    %351 = arith.addi %350, %c27_i64 : i64
    %352 = llvm.getelementptr %9[%351] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %353 = arith.trunci %349 : i32 to i8
    llvm.store volatile %353, %352 {alignment = 1 : i64} : i8, !llvm.ptr
    %354 = llvm.load %3 : !llvm.ptr -> i32
    %355 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_99 = arith.constant 8 : i32
    %c31_i32_100 = arith.constant 31 : i32
    %356 = arith.cmpi ule, %c8_i32_99, %c31_i32_100 : i32
    %357 = scf.if %356 -> (i32) {
      %478 = arith.shrui %355, %c8_i32_99 : i32
      scf.yield %478 : i32
    } else {
      %c0_i32_143 = arith.constant 0 : i32
      scf.yield %c0_i32_143 : i32
    }
    %c15_i32_101 = arith.constant 15 : i32
    %358 = arith.andi %357, %c15_i32_101 : i32
    %c1050638_i32_102 = arith.constant 1050638 : i32
    %359 = arith.addi %358, %c1050638_i32_102 : i32
    %c0_i64_103 = arith.constant 0 : i64
    %360 = arith.extui %359 : i32 to i64
    %361 = arith.addi %360, %c0_i64_103 : i64
    %362 = llvm.getelementptr %9[%361] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %363 = llvm.load volatile %362 {alignment = 1 : i64} : !llvm.ptr -> i8
    %364 = arith.extui %363 : i8 to i32
    %c26_i64 = arith.constant 26 : i64
    %365 = arith.extui %354 : i32 to i64
    %366 = arith.addi %365, %c26_i64 : i64
    %367 = llvm.getelementptr %9[%366] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %368 = arith.trunci %364 : i32 to i8
    llvm.store volatile %368, %367 {alignment = 1 : i64} : i8, !llvm.ptr
    %369 = llvm.load %3 : !llvm.ptr -> i32
    %370 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_104 = arith.constant 12 : i32
    %c31_i32_105 = arith.constant 31 : i32
    %371 = arith.cmpi ule, %c12_i32_104, %c31_i32_105 : i32
    %372 = scf.if %371 -> (i32) {
      %478 = arith.shrui %370, %c12_i32_104 : i32
      scf.yield %478 : i32
    } else {
      %c0_i32_143 = arith.constant 0 : i32
      scf.yield %c0_i32_143 : i32
    }
    %c15_i32_106 = arith.constant 15 : i32
    %373 = arith.andi %372, %c15_i32_106 : i32
    %c1050638_i32_107 = arith.constant 1050638 : i32
    %374 = arith.addi %373, %c1050638_i32_107 : i32
    %c0_i64_108 = arith.constant 0 : i64
    %375 = arith.extui %374 : i32 to i64
    %376 = arith.addi %375, %c0_i64_108 : i64
    %377 = llvm.getelementptr %9[%376] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %378 = llvm.load volatile %377 {alignment = 1 : i64} : !llvm.ptr -> i8
    %379 = arith.extui %378 : i8 to i32
    %c25_i64 = arith.constant 25 : i64
    %380 = arith.extui %369 : i32 to i64
    %381 = arith.addi %380, %c25_i64 : i64
    %382 = llvm.getelementptr %9[%381] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %383 = arith.trunci %379 : i32 to i8
    llvm.store volatile %383, %382 {alignment = 1 : i64} : i8, !llvm.ptr
    %384 = llvm.load %3 : !llvm.ptr -> i32
    %385 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_109 = arith.constant 16 : i32
    %c31_i32_110 = arith.constant 31 : i32
    %386 = arith.cmpi ule, %c16_i32_109, %c31_i32_110 : i32
    %387 = scf.if %386 -> (i32) {
      %478 = arith.shrui %385, %c16_i32_109 : i32
      scf.yield %478 : i32
    } else {
      %c0_i32_143 = arith.constant 0 : i32
      scf.yield %c0_i32_143 : i32
    }
    %c15_i32_111 = arith.constant 15 : i32
    %388 = arith.andi %387, %c15_i32_111 : i32
    %c1050638_i32_112 = arith.constant 1050638 : i32
    %389 = arith.addi %388, %c1050638_i32_112 : i32
    %c0_i64_113 = arith.constant 0 : i64
    %390 = arith.extui %389 : i32 to i64
    %391 = arith.addi %390, %c0_i64_113 : i64
    %392 = llvm.getelementptr %9[%391] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %393 = llvm.load volatile %392 {alignment = 1 : i64} : !llvm.ptr -> i8
    %394 = arith.extui %393 : i8 to i32
    %c24_i64 = arith.constant 24 : i64
    %395 = arith.extui %384 : i32 to i64
    %396 = arith.addi %395, %c24_i64 : i64
    %397 = llvm.getelementptr %9[%396] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %398 = arith.trunci %394 : i32 to i8
    llvm.store volatile %398, %397 {alignment = 1 : i64} : i8, !llvm.ptr
    %399 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32_114 = arith.constant 20 : i32
    %400 = arith.addi %399, %c20_i32_114 : i32
    %401 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_115 = arith.constant 1 : i32
    %402 = arith.ori %401, %c1_i32_115 : i32
    %false_116 = arith.constant false
    %403 = llvm.call_intrinsic "llvm.ctlz.i32"(%402, %false_116) : (i32, i1) -> i32
    %c2_i32_117 = arith.constant 2 : i32
    %c31_i32_118 = arith.constant 31 : i32
    %404 = arith.cmpi ule, %c2_i32_117, %c31_i32_118 : i32
    %405 = scf.if %404 -> (i32) {
      %478 = arith.shrui %403, %c2_i32_117 : i32
      scf.yield %478 : i32
    } else {
      %c0_i32_143 = arith.constant 0 : i32
      scf.yield %c0_i32_143 : i32
    }
    llvm.store %405, %2 : i32, !llvm.ptr
    %406 = arith.addi %400, %405 : i32
    llvm.store %406, %4 : i32, !llvm.ptr
    %c123_i32_119 = arith.constant 123 : i32
    %c0_i64_120 = arith.constant 0 : i64
    %407 = arith.extui %406 : i32 to i64
    %408 = arith.addi %407, %c0_i64_120 : i64
    %409 = llvm.getelementptr %9[%408] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %410 = arith.trunci %c123_i32_119 : i32 to i8
    llvm.store volatile %410, %409 {alignment = 1 : i64} : i8, !llvm.ptr
    %411 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32_121 = arith.constant -1 : i32
    %412 = arith.addi %411, %c-1_i32_121 : i32
    %c117_i32_122 = arith.constant 117 : i32
    %c0_i64_123 = arith.constant 0 : i64
    %413 = arith.extui %412 : i32 to i64
    %414 = arith.addi %413, %c0_i64_123 : i64
    %415 = llvm.getelementptr %9[%414] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %416 = arith.trunci %c117_i32_122 : i32 to i8
    llvm.store volatile %416, %415 {alignment = 1 : i64} : i8, !llvm.ptr
    %417 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32_124 = arith.constant 20 : i32
    %418 = arith.addi %417, %c20_i32_124 : i32
    %419 = llvm.load %2 : !llvm.ptr -> i32
    %c-2_i32_125 = arith.constant -2 : i32
    %420 = arith.addi %419, %c-2_i32_125 : i32
    llvm.store %420, %2 : i32, !llvm.ptr
    %421 = arith.addi %418, %420 : i32
    %c92_i32_126 = arith.constant 92 : i32
    %c0_i64_127 = arith.constant 0 : i64
    %422 = arith.extui %421 : i32 to i64
    %423 = arith.addi %422, %c0_i64_127 : i64
    %424 = llvm.getelementptr %9[%423] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %425 = arith.trunci %c92_i32_126 : i32 to i8
    llvm.store volatile %425, %424 {alignment = 1 : i64} : i8, !llvm.ptr
    %426 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32_128 = arith.constant 20 : i32
    %427 = arith.addi %426, %c20_i32_128 : i32
    %c8_i32_129 = arith.constant 8 : i32
    %428 = arith.addi %427, %c8_i32_129 : i32
    llvm.store %428, %4 : i32, !llvm.ptr
    %429 = llvm.load %1 : !llvm.ptr -> i32
    %c15_i32_130 = arith.constant 15 : i32
    %430 = arith.andi %429, %c15_i32_130 : i32
    %c1050638_i32_131 = arith.constant 1050638 : i32
    %431 = arith.addi %430, %c1050638_i32_131 : i32
    %c0_i64_132 = arith.constant 0 : i64
    %432 = arith.extui %431 : i32 to i64
    %433 = arith.addi %432, %c0_i64_132 : i64
    %434 = llvm.getelementptr %9[%433] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %435 = llvm.load volatile %434 {alignment = 1 : i64} : !llvm.ptr -> i8
    %436 = arith.extui %435 : i8 to i32
    %c0_i64_133 = arith.constant 0 : i64
    %437 = arith.extui %428 : i32 to i64
    %438 = arith.addi %437, %c0_i64_133 : i64
    %439 = llvm.getelementptr %9[%438] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %440 = arith.trunci %436 : i32 to i8
    llvm.store volatile %440, %439 {alignment = 1 : i64} : i8, !llvm.ptr
    %441 = llvm.load %0 : !llvm.ptr -> i32
    %c10_i32_134 = arith.constant 10 : i32
    %c11_i64_135 = arith.constant 11 : i64
    %442 = arith.extui %441 : i32 to i64
    %443 = arith.addi %442, %c11_i64_135 : i64
    %444 = llvm.getelementptr %9[%443] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %445 = arith.trunci %c10_i32_134 : i32 to i8
    llvm.store volatile %445, %444 {alignment = 1 : i64} : i8, !llvm.ptr
    %446 = llvm.load %0 : !llvm.ptr -> i32
    %447 = llvm.load %2 : !llvm.ptr -> i32
    %c10_i64_136 = arith.constant 10 : i64
    %448 = arith.extui %446 : i32 to i64
    %449 = arith.addi %448, %c10_i64_136 : i64
    %450 = llvm.getelementptr %9[%449] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %451 = arith.trunci %447 : i32 to i8
    llvm.store volatile %451, %450 {alignment = 1 : i64} : i8, !llvm.ptr
    %452 = llvm.load %0 : !llvm.ptr -> i32
    %453 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i64_137 = arith.constant 20 : i64
    %454 = arith.extui %453 : i32 to i64
    %455 = arith.addi %454, %c20_i64_137 : i64
    %456 = llvm.getelementptr %9[%455] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %457 = llvm.load volatile %456 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_138 = arith.constant 0 : i64
    %458 = arith.extui %452 : i32 to i64
    %459 = arith.addi %458, %c0_i64_138 : i64
    %460 = llvm.getelementptr %9[%459] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %457, %460 {alignment = 1 : i64} : i64, !llvm.ptr
    %461 = llvm.load %3 : !llvm.ptr -> i32
    %c125_i32_139 = arith.constant 125 : i32
    %c29_i64 = arith.constant 29 : i64
    %462 = arith.extui %461 : i32 to i64
    %463 = arith.addi %462, %c29_i64 : i64
    %464 = llvm.getelementptr %9[%463] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %465 = arith.trunci %c125_i32_139 : i32 to i8
    llvm.store volatile %465, %464 {alignment = 1 : i64} : i8, !llvm.ptr
    %466 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_140 = arith.constant 8 : i32
    %467 = arith.addi %466, %c8_i32_140 : i32
    %468 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_141 = arith.constant 0 : i64
    %469 = arith.extui %468 : i32 to i64
    %470 = arith.addi %469, %c0_i64_141 : i64
    %471 = llvm.getelementptr %9[%470] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %472 = llvm.load volatile %471 {alignment = 1 : i64} : !llvm.ptr -> i16
    %473 = arith.extui %472 : i16 to i32
    %c0_i64_142 = arith.constant 0 : i64
    %474 = arith.extui %467 : i32 to i64
    %475 = arith.addi %474, %c0_i64_142 : i64
    %476 = llvm.getelementptr %9[%475] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %477 = arith.trunci %473 : i32 to i16
    llvm.store volatile %477, %476 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f149(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_4 = arith.constant 0 : i32
    %c17_i32 = arith.constant 17 : i32
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c71727_i32 = arith.constant 71727 : i32
    %9 = arith.cmpi ult, %8, %c71727_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_5 : i32
    %12 = arith.select %11, %c0_i32_4, %c17_i32 : i32
    llvm.store %12, %1 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %14 = arith.ori %13, %c8_i32 : i32
    llvm.store %14, %1 : i32, !llvm.ptr
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %16 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %17 = scf.if %16 -> (i32) {
      %204 = arith.shli %15, %c2_i32 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %c1053240_i32 = arith.constant 1053240 : i32
    %18 = arith.addi %17, %c1053240_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %7[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c11_i32 = arith.constant 11 : i32
    %c31_i32_6 = arith.constant 31 : i32
    %23 = arith.cmpi ule, %c11_i32, %c31_i32_6 : i32
    %24 = scf.if %23 -> (i32) {
      %204 = arith.shli %22, %c11_i32 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c11_i32_7 = arith.constant 11 : i32
    %c31_i32_8 = arith.constant 31 : i32
    %26 = arith.cmpi ule, %c11_i32_7, %c31_i32_8 : i32
    %27 = scf.if %26 -> (i32) {
      %204 = arith.shli %25, %c11_i32_7 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    llvm.store %27, %1 : i32, !llvm.ptr
    %28 = arith.cmpi ugt, %24, %27 : i32
    %29 = arith.extui %28 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %30 = arith.cmpi ne, %29, %c0_i32_9 : i32
    %31 = arith.select %30, %12, %14 : i32
    llvm.store %31, %2 : i32, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %33 = arith.ori %32, %c4_i32 : i32
    llvm.store %33, %2 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_10 = arith.constant 2 : i32
    %c31_i32_11 = arith.constant 31 : i32
    %35 = arith.cmpi ule, %c2_i32_10, %c31_i32_11 : i32
    %36 = scf.if %35 -> (i32) {
      %204 = arith.shli %34, %c2_i32_10 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %c1053240_i32_12 = arith.constant 1053240 : i32
    %37 = arith.addi %36, %c1053240_i32_12 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_13 : i64
    %40 = llvm.getelementptr %7[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c11_i32_14 = arith.constant 11 : i32
    %c31_i32_15 = arith.constant 31 : i32
    %42 = arith.cmpi ule, %c11_i32_14, %c31_i32_15 : i32
    %43 = scf.if %42 -> (i32) {
      %204 = arith.shli %41, %c11_i32_14 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = arith.cmpi ugt, %43, %44 : i32
    %46 = arith.extui %45 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %47 = arith.cmpi ne, %46, %c0_i32_16 : i32
    %48 = arith.select %47, %31, %33 : i32
    llvm.store %48, %2 : i32, !llvm.ptr
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_17 = arith.constant 2 : i32
    %50 = arith.ori %49, %c2_i32_17 : i32
    llvm.store %50, %2 : i32, !llvm.ptr
    %51 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_18 = arith.constant 2 : i32
    %c31_i32_19 = arith.constant 31 : i32
    %52 = arith.cmpi ule, %c2_i32_18, %c31_i32_19 : i32
    %53 = scf.if %52 -> (i32) {
      %204 = arith.shli %51, %c2_i32_18 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %c1053240_i32_20 = arith.constant 1053240 : i32
    %54 = arith.addi %53, %c1053240_i32_20 : i32
    %c0_i64_21 = arith.constant 0 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c0_i64_21 : i64
    %57 = llvm.getelementptr %7[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c11_i32_22 = arith.constant 11 : i32
    %c31_i32_23 = arith.constant 31 : i32
    %59 = arith.cmpi ule, %c11_i32_22, %c31_i32_23 : i32
    %60 = scf.if %59 -> (i32) {
      %204 = arith.shli %58, %c11_i32_22 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %62 = arith.cmpi ugt, %60, %61 : i32
    %63 = arith.extui %62 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_24 : i32
    %65 = arith.select %64, %48, %50 : i32
    llvm.store %65, %2 : i32, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_25 = arith.constant 1 : i32
    %67 = arith.addi %66, %c1_i32_25 : i32
    llvm.store %67, %2 : i32, !llvm.ptr
    %68 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_26 = arith.constant 2 : i32
    %c31_i32_27 = arith.constant 31 : i32
    %69 = arith.cmpi ule, %c2_i32_26, %c31_i32_27 : i32
    %70 = scf.if %69 -> (i32) {
      %204 = arith.shli %68, %c2_i32_26 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %c1053240_i32_28 = arith.constant 1053240 : i32
    %71 = arith.addi %70, %c1053240_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c0_i64_29 : i64
    %74 = llvm.getelementptr %7[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = llvm.load volatile %74 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c11_i32_30 = arith.constant 11 : i32
    %c31_i32_31 = arith.constant 31 : i32
    %76 = arith.cmpi ule, %c11_i32_30, %c31_i32_31 : i32
    %77 = scf.if %76 -> (i32) {
      %204 = arith.shli %75, %c11_i32_30 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %79 = arith.cmpi ugt, %77, %78 : i32
    %80 = arith.extui %79 : i1 to i32
    %c0_i32_32 = arith.constant 0 : i32
    %81 = arith.cmpi ne, %80, %c0_i32_32 : i32
    %82 = arith.select %81, %65, %67 : i32
    llvm.store %82, %2 : i32, !llvm.ptr
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_33 = arith.constant 1 : i32
    %84 = arith.addi %83, %c1_i32_33 : i32
    llvm.store %84, %2 : i32, !llvm.ptr
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_34 = arith.constant 2 : i32
    %c31_i32_35 = arith.constant 31 : i32
    %86 = arith.cmpi ule, %c2_i32_34, %c31_i32_35 : i32
    %87 = scf.if %86 -> (i32) {
      %204 = arith.shli %85, %c2_i32_34 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %c1053240_i32_36 = arith.constant 1053240 : i32
    %88 = arith.addi %87, %c1053240_i32_36 : i32
    %c0_i64_37 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_37 : i64
    %91 = llvm.getelementptr %7[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c11_i32_38 = arith.constant 11 : i32
    %c31_i32_39 = arith.constant 31 : i32
    %93 = arith.cmpi ule, %c11_i32_38, %c31_i32_39 : i32
    %94 = scf.if %93 -> (i32) {
      %204 = arith.shli %92, %c11_i32_38 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %96 = arith.cmpi ugt, %94, %95 : i32
    %97 = arith.extui %96 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %98 = arith.cmpi ne, %97, %c0_i32_40 : i32
    %99 = arith.select %98, %82, %84 : i32
    llvm.store %99, %2 : i32, !llvm.ptr
    %c2_i32_41 = arith.constant 2 : i32
    %c31_i32_42 = arith.constant 31 : i32
    %100 = arith.cmpi ule, %c2_i32_41, %c31_i32_42 : i32
    %101 = scf.if %100 -> (i32) {
      %204 = arith.shli %99, %c2_i32_41 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %c1053240_i32_43 = arith.constant 1053240 : i32
    %102 = arith.addi %101, %c1053240_i32_43 : i32
    %c0_i64_44 = arith.constant 0 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c0_i64_44 : i64
    %105 = llvm.getelementptr %7[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c11_i32_45 = arith.constant 11 : i32
    %c31_i32_46 = arith.constant 31 : i32
    %107 = arith.cmpi ule, %c11_i32_45, %c31_i32_46 : i32
    %108 = scf.if %107 -> (i32) {
      %204 = arith.shli %106, %c11_i32_45 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    llvm.store %108, %3 : i32, !llvm.ptr
    %109 = llvm.load %1 : !llvm.ptr -> i32
    %110 = arith.cmpi eq, %108, %109 : i32
    %111 = arith.extui %110 : i1 to i32
    %112 = llvm.load %3 : !llvm.ptr -> i32
    %113 = llvm.load %1 : !llvm.ptr -> i32
    %114 = arith.cmpi ult, %112, %113 : i32
    %115 = arith.extui %114 : i1 to i32
    %116 = arith.addi %111, %115 : i32
    %117 = llvm.load %2 : !llvm.ptr -> i32
    %118 = arith.addi %116, %117 : i32
    llvm.store %118, %2 : i32, !llvm.ptr
    %c33_i32 = arith.constant 33 : i32
    %119 = arith.cmpi ugt, %118, %c33_i32 : i32
    %120 = arith.extui %119 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %121 = arith.cmpi ne, %120, %c0_i32_47 : i32
    cf.cond_br %121, ^bb4, ^bb5
  ^bb2(%122: i32):  // pred: ^bb10
    return %122 : i32
  ^bb3:  // pred: ^bb13
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %c751_i32 = arith.constant 751 : i32
    %c1053224_i32 = arith.constant 1053224 : i32
    call @f137(%arg0, %123, %c751_i32, %c1053224_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %124 = llvm.load %2 : !llvm.ptr -> i32
    %c34_i32 = arith.constant 34 : i32
    %c1053208_i32 = arith.constant 1053208 : i32
    call @f137(%arg0, %124, %c34_i32, %c1053208_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_48 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_48) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_49 = arith.constant 2 : i32
    %c31_i32_50 = arith.constant 31 : i32
    %126 = arith.cmpi ule, %c2_i32_49, %c31_i32_50 : i32
    %127 = scf.if %126 -> (i32) {
      %204 = arith.shli %125, %c2_i32_49 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %c1053240_i32_51 = arith.constant 1053240 : i32
    %128 = arith.addi %127, %c1053240_i32_51 : i32
    llvm.store %128, %3 : i32, !llvm.ptr
    %c0_i64_52 = arith.constant 0 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c0_i64_52 : i64
    %131 = llvm.getelementptr %7[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load volatile %131 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c21_i32 = arith.constant 21 : i32
    %c31_i32_53 = arith.constant 31 : i32
    %133 = arith.cmpi ule, %c21_i32, %c31_i32_53 : i32
    %134 = scf.if %133 -> (i32) {
      %204 = arith.shrui %132, %c21_i32 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    llvm.store %134, %1 : i32, !llvm.ptr
    %c751_i32_54 = arith.constant 751 : i32
    llvm.store %c751_i32_54, %4 : i32, !llvm.ptr
    %135 = llvm.load %2 : !llvm.ptr -> i32
    %c33_i32_55 = arith.constant 33 : i32
    %136 = arith.cmpi eq, %135, %c33_i32_55 : i32
    %137 = arith.extui %136 : i1 to i32
    %c0_i32_56 = arith.constant 0 : i32
    %138 = arith.cmpi ne, %137, %c0_i32_56 : i32
    cf.cond_br %138, ^bb7, ^bb8
  ^bb6:  // 2 preds: ^bb7, ^bb9
    %139 = llvm.load %4 : !llvm.ptr -> i32
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %141 = arith.xori %140, %c-1_i32 : i32
    %142 = arith.addi %139, %141 : i32
    %c0_i32_57 = arith.constant 0 : i32
    %143 = arith.cmpi eq, %142, %c0_i32_57 : i32
    %144 = arith.extui %143 : i1 to i32
    %c0_i32_58 = arith.constant 0 : i32
    %145 = arith.cmpi ne, %144, %c0_i32_58 : i32
    cf.cond_br %145, ^bb10, ^bb11
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_59 = arith.constant 2 : i32
    %c31_i32_60 = arith.constant 31 : i32
    %147 = arith.cmpi ule, %c2_i32_59, %c31_i32_60 : i32
    %148 = scf.if %147 -> (i32) {
      %204 = arith.shli %146, %c2_i32_59 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    %c1053236_i32 = arith.constant 1053236 : i32
    %149 = arith.addi %148, %c1053236_i32 : i32
    %c0_i64_61 = arith.constant 0 : i64
    %150 = arith.extui %149 : i32 to i64
    %151 = arith.addi %150, %c0_i64_61 : i64
    %152 = llvm.getelementptr %7[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %153 = llvm.load volatile %152 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2097151_i32 = arith.constant 2097151 : i32
    %154 = arith.andi %153, %c2097151_i32 : i32
    llvm.store %154, %2 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // pred: ^bb5
    %155 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %156 = arith.extui %155 : i32 to i64
    %157 = arith.addi %156, %c4_i64 : i64
    %158 = llvm.getelementptr %7[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %159 = llvm.load volatile %158 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c21_i32_62 = arith.constant 21 : i32
    %c31_i32_63 = arith.constant 31 : i32
    %160 = arith.cmpi ule, %c21_i32_62, %c31_i32_63 : i32
    %161 = scf.if %160 -> (i32) {
      %204 = arith.shrui %159, %c21_i32_62 : i32
      scf.yield %204 : i32
    } else {
      %c0_i32_78 = arith.constant 0 : i32
      scf.yield %c0_i32_78 : i32
    }
    llvm.store %161, %4 : i32, !llvm.ptr
    %162 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_64 = arith.constant 0 : i32
    %163 = arith.cmpi ne, %162, %c0_i32_64 : i32
    cf.cond_br %163, ^bb7, ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i32_65 = arith.constant 0 : i32
    llvm.store %c0_i32_65, %2 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb10:  // 3 preds: ^bb6, ^bb12, ^bb14
    %164 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_66 = arith.constant 1 : i32
    %165 = arith.andi %164, %c1_i32_66 : i32
    cf.br ^bb2(%165 : i32)
  ^bb11:  // pred: ^bb6
    %166 = llvm.load %0 : !llvm.ptr -> i32
    %167 = llvm.load %2 : !llvm.ptr -> i32
    %168 = arith.subi %166, %167 : i32
    llvm.store %168, %3 : i32, !llvm.ptr
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %c751_i32_67 = arith.constant 751 : i32
    %170 = llvm.load %1 : !llvm.ptr -> i32
    %c751_i32_68 = arith.constant 751 : i32
    %171 = arith.cmpi ugt, %170, %c751_i32_68 : i32
    %172 = arith.extui %171 : i1 to i32
    %c0_i32_69 = arith.constant 0 : i32
    %173 = arith.cmpi ne, %172, %c0_i32_69 : i32
    %174 = arith.select %173, %169, %c751_i32_67 : i32
    llvm.store %174, %0 : i32, !llvm.ptr
    %175 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32_70 = arith.constant -1 : i32
    %176 = arith.addi %175, %c-1_i32_70 : i32
    llvm.store %176, %4 : i32, !llvm.ptr
    %c0_i32_71 = arith.constant 0 : i32
    llvm.store %c0_i32_71, %2 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb12:  // pred: ^bb16
    %177 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %177, %1 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb13:  // 2 preds: ^bb11, ^bb15
    %178 = llvm.load %0 : !llvm.ptr -> i32
    %179 = llvm.load %1 : !llvm.ptr -> i32
    %180 = arith.cmpi eq, %178, %179 : i32
    %181 = arith.extui %180 : i1 to i32
    %c0_i32_72 = arith.constant 0 : i32
    %182 = arith.cmpi ne, %181, %c0_i32_72 : i32
    cf.cond_br %182, ^bb3, ^bb14
  ^bb14:  // pred: ^bb13
    %183 = llvm.load %2 : !llvm.ptr -> i32
    %184 = llvm.load %1 : !llvm.ptr -> i32
    %c1053376_i32 = arith.constant 1053376 : i32
    %185 = arith.addi %184, %c1053376_i32 : i32
    %c0_i64_73 = arith.constant 0 : i64
    %186 = arith.extui %185 : i32 to i64
    %187 = arith.addi %186, %c0_i64_73 : i64
    %188 = llvm.getelementptr %7[%187] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %189 = llvm.load volatile %188 {alignment = 1 : i64} : !llvm.ptr -> i8
    %190 = arith.extui %189 : i8 to i32
    %191 = arith.addi %183, %190 : i32
    llvm.store %191, %2 : i32, !llvm.ptr
    %192 = llvm.load %3 : !llvm.ptr -> i32
    %193 = arith.cmpi ugt, %191, %192 : i32
    %194 = arith.extui %193 : i1 to i32
    %c0_i32_74 = arith.constant 0 : i32
    %195 = arith.cmpi ne, %194, %c0_i32_74 : i32
    cf.cond_br %195, ^bb10, ^bb15
  ^bb15:  // pred: ^bb14
    %196 = llvm.load %4 : !llvm.ptr -> i32
    %197 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_75 = arith.constant 1 : i32
    %198 = arith.addi %197, %c1_i32_75 : i32
    llvm.store %198, %1 : i32, !llvm.ptr
    %199 = arith.cmpi eq, %196, %198 : i32
    %200 = arith.extui %199 : i1 to i32
    %c0_i32_76 = arith.constant 0 : i32
    %201 = arith.cmpi eq, %200, %c0_i32_76 : i32
    %202 = arith.extui %201 : i1 to i32
    %c0_i32_77 = arith.constant 0 : i32
    %203 = arith.cmpi ne, %202, %c0_i32_77 : i32
    cf.cond_br %203, ^bb13, ^bb16
  ^bb16:  // pred: ^bb15
    cf.br ^bb12
  }
  func.func @f150(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %2 = arith.cmpi uge, %1, %c32_i32 : i32
    %3 = arith.extui %2 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    cf.cond_br %4, ^bb3, ^bb4
  ^bb2(%5: i32):  // 5 preds: ^bb4, ^bb6, ^bb7, ^bb9, ^bb10
    return %5 : i32
  ^bb3:  // pred: ^bb1
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c127_i32 = arith.constant 127 : i32
    %7 = arith.cmpi uge, %6, %c127_i32 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32_0 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32_0 : i32
    cf.cond_br %9, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c0_i32_1 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_1 : i32)
  ^bb5:  // pred: ^bb3
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %11 = arith.cmpi ult, %10, %c65536_i32 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_2 : i32
    cf.cond_br %13, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %c1_i32_3 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_3 : i32)
  ^bb7:  // pred: ^bb5
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c1052506_i32 = arith.constant 1052506 : i32
    %c40_i32 = arith.constant 40 : i32
    %c1052586_i32 = arith.constant 1052586 : i32
    %c290_i32 = arith.constant 290 : i32
    %c1052876_i32 = arith.constant 1052876 : i32
    %c297_i32 = arith.constant 297 : i32
    %15 = call @f182(%arg0, %14, %c1052506_i32, %c40_i32, %c1052586_i32, %c290_i32, %c1052876_i32, %c297_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32) -> i32
    cf.br ^bb2(%15 : i32)
  ^bb8:  // pred: ^bb5
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c131072_i32 = arith.constant 131072 : i32
    %17 = arith.cmpi ult, %16, %c131072_i32 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_4 : i32
    cf.cond_br %19, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c1051724_i32 = arith.constant 1051724 : i32
    %c44_i32 = arith.constant 44 : i32
    %c1051812_i32 = arith.constant 1051812 : i32
    %c208_i32 = arith.constant 208 : i32
    %c1052020_i32 = arith.constant 1052020 : i32
    %c486_i32 = arith.constant 486 : i32
    %21 = call @f182(%arg0, %20, %c1051724_i32, %c44_i32, %c1051812_i32, %c208_i32, %c1052020_i32, %c486_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32) -> i32
    cf.br ^bb2(%21 : i32)
  ^bb10:  // pred: ^bb8
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c2097120_i32 = arith.constant 2097120 : i32
    %23 = arith.andi %22, %c2097120_i32 : i32
    %c173792_i32 = arith.constant 173792 : i32
    %24 = arith.cmpi eq, %23, %c173792_i32 : i32
    %25 = arith.extui %24 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %26 = arith.cmpi eq, %25, %c0_i32_5 : i32
    %27 = arith.extui %26 : i1 to i32
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c2097150_i32 = arith.constant 2097150 : i32
    %29 = arith.andi %28, %c2097150_i32 : i32
    %c178206_i32 = arith.constant 178206 : i32
    %30 = arith.cmpi eq, %29, %c178206_i32 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %32 = arith.cmpi eq, %31, %c0_i32_6 : i32
    %33 = arith.extui %32 : i1 to i32
    %34 = arith.andi %27, %33 : i32
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %c-177984_i32 = arith.constant -177984 : i32
    %36 = arith.addi %35, %c-177984_i32 : i32
    %c-6_i32 = arith.constant -6 : i32
    %37 = arith.cmpi ult, %36, %c-6_i32 : i32
    %38 = arith.extui %37 : i1 to i32
    %39 = arith.andi %34, %38 : i32
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %c-183984_i32 = arith.constant -183984 : i32
    %41 = arith.addi %40, %c-183984_i32 : i32
    %c-14_i32 = arith.constant -14 : i32
    %42 = arith.cmpi ult, %41, %c-14_i32 : i32
    %43 = arith.extui %42 : i1 to i32
    %44 = arith.andi %39, %43 : i32
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c-191472_i32 = arith.constant -191472 : i32
    %46 = arith.addi %45, %c-191472_i32 : i32
    %c-15_i32 = arith.constant -15 : i32
    %47 = arith.cmpi ult, %46, %c-15_i32 : i32
    %48 = arith.extui %47 : i1 to i32
    %49 = arith.andi %44, %48 : i32
    %50 = llvm.load %0 : !llvm.ptr -> i32
    %c-194560_i32 = arith.constant -194560 : i32
    %51 = arith.addi %50, %c-194560_i32 : i32
    %c-2466_i32 = arith.constant -2466 : i32
    %52 = arith.cmpi ult, %51, %c-2466_i32 : i32
    %53 = arith.extui %52 : i1 to i32
    %54 = arith.andi %49, %53 : i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c-196608_i32 = arith.constant -196608 : i32
    %56 = arith.addi %55, %c-196608_i32 : i32
    %c-1506_i32 = arith.constant -1506 : i32
    %57 = arith.cmpi ult, %56, %c-1506_i32 : i32
    %58 = arith.extui %57 : i1 to i32
    %59 = arith.andi %54, %58 : i32
    %60 = llvm.load %0 : !llvm.ptr -> i32
    %c-201552_i32 = arith.constant -201552 : i32
    %61 = arith.addi %60, %c-201552_i32 : i32
    %c-5_i32 = arith.constant -5 : i32
    %62 = arith.cmpi ult, %61, %c-5_i32 : i32
    %63 = arith.extui %62 : i1 to i32
    %64 = arith.andi %59, %63 : i32
    %65 = llvm.load %0 : !llvm.ptr -> i32
    %c-917760_i32 = arith.constant -917760 : i32
    %66 = arith.addi %65, %c-917760_i32 : i32
    %c-712016_i32 = arith.constant -712016 : i32
    %67 = arith.cmpi ult, %66, %c-712016_i32 : i32
    %68 = arith.extui %67 : i1 to i32
    %69 = arith.andi %64, %68 : i32
    %70 = llvm.load %0 : !llvm.ptr -> i32
    %c918000_i32 = arith.constant 918000 : i32
    %71 = arith.cmpi ult, %70, %c918000_i32 : i32
    %72 = arith.extui %71 : i1 to i32
    %73 = arith.andi %69, %72 : i32
    cf.br ^bb2(%73 : i32)
  }
  func.func @f151(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %11 = arith.subi %10, %c128_i32 : i32
    llvm.store %11, %2 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %0 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    llvm.store %c0_i32_4, %3 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2(%17: i32):  // pred: ^bb6
    return %17 : i32
  ^bb3:  // pred: ^bb5
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_5 = arith.constant 128 : i32
    %19 = arith.addi %18, %c128_i32_5 : i32
    llvm.store %19, %0 : i32, !llvm.ptr
    %c129_i32 = arith.constant 129 : i32
    %20 = arith.cmpi ult, %19, %c129_i32 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_6 : i32
    cf.cond_br %22, ^bb6, ^bb7
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %25 = arith.addi %23, %24 : i32
    %c127_i32 = arith.constant 127 : i32
    %26 = arith.addi %25, %c127_i32 : i32
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c15_i32 = arith.constant 15 : i32
    %28 = arith.andi %27, %c15_i32 : i32
    llvm.store %28, %4 : i32, !llvm.ptr
    %c48_i32 = arith.constant 48 : i32
    %29 = arith.ori %28, %c48_i32 : i32
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %c55_i32 = arith.constant 55 : i32
    %31 = arith.addi %30, %c55_i32 : i32
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %33 = arith.cmpi ult, %32, %c10_i32 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_7 : i32
    %36 = arith.select %35, %29, %31 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %37 = arith.extui %26 : i32 to i64
    %38 = arith.addi %37, %c0_i64_8 : i64
    %39 = llvm.getelementptr %9[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = arith.trunci %36 : i32 to i8
    llvm.store volatile %40, %39 {alignment = 1 : i64} : i8, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %42 = arith.addi %41, %c-1_i32 : i32
    llvm.store %42, %3 : i32, !llvm.ptr
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %44 = arith.cmpi ult, %43, %c16_i32 : i32
    %45 = arith.extui %44 : i1 to i32
    llvm.store %45, %4 : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c31_i32 = arith.constant 31 : i32
    %47 = arith.cmpi ule, %c4_i32, %c31_i32 : i32
    %48 = scf.if %47 -> (i32) {
      %65 = arith.shrui %46, %c4_i32 : i32
      scf.yield %65 : i32
    } else {
      %c0_i32_16 = arith.constant 0 : i32
      scf.yield %c0_i32_16 : i32
    }
    llvm.store %48, %0 : i32, !llvm.ptr
    %49 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %50 = arith.cmpi eq, %49, %c0_i32_9 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %52 = arith.cmpi ne, %51, %c0_i32_10 : i32
    cf.cond_br %52, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  ^bb6:  // pred: ^bb3
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %c1050904_i32 = arith.constant 1050904 : i32
    %c2_i32 = arith.constant 2 : i32
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %56 = arith.addi %54, %55 : i32
    %c128_i32_12 = arith.constant 128 : i32
    %57 = arith.addi %56, %c128_i32_12 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %59 = arith.subi %c0_i32_13, %58 : i32
    %60 = call @f166(%arg0, %53, %c1_i32_11, %c1050904_i32, %c2_i32, %57, %59) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %60, %0 : i32, !llvm.ptr
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c128_i32_14 = arith.constant 128 : i32
    %62 = arith.addi %61, %c128_i32_14 : i32
    llvm.store %62, %6 : i32, !llvm.ptr
    %63 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%63 : i32)
  ^bb7:  // pred: ^bb3
    %64 = llvm.load %0 : !llvm.ptr -> i32
    %c128_i32_15 = arith.constant 128 : i32
    %c1050888_i32 = arith.constant 1050888 : i32
    call @f136(%arg0, %64, %c128_i32_15, %c1050888_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f152(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %10 : i64, !llvm.ptr
    %11 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %19 : !llvm.ptr -> i64
    %22 = arith.trunci %21 : i64 to i32
    %23 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %19 : !llvm.ptr -> i64
    %25 = arith.trunci %24 : i64 to i32
    %26 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %19 : !llvm.ptr -> i64
    %28 = arith.trunci %27 : i64 to i32
    %29 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %30 = llvm.load %29 : !llvm.ptr -> i32
    %31 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %19 : !llvm.ptr -> i64
    %33 = arith.trunci %32 : i64 to i32
    %34 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.load %19 : !llvm.ptr -> i64
    %36 = arith.trunci %35 : i64 to i32
    %37 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %19 : !llvm.ptr -> i64
    %39 = arith.trunci %38 : i64 to i32
    %40 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.load %19 : !llvm.ptr -> i64
    %42 = arith.trunci %41 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %43 = llvm.load %12 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %44 = arith.subi %43, %c64_i32 : i32
    llvm.store %44, %5 : i32, !llvm.ptr
    llvm.store %44, %12 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    llvm.store %c1_i32_10, %6 : i32, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c4_i64 : i64
    %48 = llvm.getelementptr %15[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i8
    %50 = arith.extui %49 : i8 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_11 : i32
    cf.cond_br %51, ^bb3, ^bb4
  ^bb2(%52: i32):  // pred: ^bb3
    return %52 : i32
  ^bb3:  // 10 preds: ^bb1, ^bb13, ^bb22, ^bb31, ^bb40, ^bb42, ^bb50, ^bb53, ^bb61, ^bb70
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_12 = arith.constant 1 : i32
    %c5_i64 = arith.constant 5 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c5_i64 : i64
    %56 = llvm.getelementptr %15[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = arith.trunci %c1_i32_12 : i32 to i8
    llvm.store volatile %57, %56 {alignment = 1 : i64} : i8, !llvm.ptr
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %59 = llvm.load %6 : !llvm.ptr -> i32
    %c4_i64_13 = arith.constant 4 : i64
    %60 = arith.extui %58 : i32 to i64
    %61 = arith.addi %60, %c4_i64_13 : i64
    %62 = llvm.getelementptr %15[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = arith.trunci %59 : i32 to i8
    llvm.store volatile %63, %62 {alignment = 1 : i64} : i8, !llvm.ptr
    %64 = llvm.load %5 : !llvm.ptr -> i32
    %c64_i32_14 = arith.constant 64 : i32
    %65 = arith.addi %64, %c64_i32_14 : i32
    llvm.store %65, %12 : i32, !llvm.ptr
    %66 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%66 : i32)
  ^bb4:  // pred: ^bb1
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i64_15 = arith.constant 5 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c5_i64_15 : i64
    %70 = llvm.getelementptr %15[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i8
    %72 = arith.extui %71 : i8 to i32
    llvm.store %72, %7 : i32, !llvm.ptr
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c0_i64_16 : i64
    %76 = llvm.getelementptr %15[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %77, %8 : i32, !llvm.ptr
    %c28_i64 = arith.constant 28 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c28_i64 : i64
    %80 = llvm.getelementptr %15[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %9 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %82 = arith.andi %81, %c4_i32 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %83 = arith.cmpi ne, %82, %c0_i32_17 : i32
    cf.cond_br %83, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %c1_i32_18 = arith.constant 1 : i32
    llvm.store %c1_i32_18, %6 : i32, !llvm.ptr
    %84 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %85 = arith.andi %84, %c1_i32_19 : i32
    %c0_i32_20 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %85, %c0_i32_20 : i32
    cf.cond_br %86, ^bb42, ^bb43
  ^bb6:  // pred: ^bb4
    %c1_i32_21 = arith.constant 1 : i32
    llvm.store %c1_i32_21, %6 : i32, !llvm.ptr
    %87 = llvm.load %8 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c20_i64 : i64
    %90 = llvm.getelementptr %15[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load volatile %90 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050851_i32 = arith.constant 1050851 : i32
    %c1050848_i32 = arith.constant 1050848 : i32
    %92 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %93 = arith.andi %92, %c1_i32_22 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    %c0_i32_23 = arith.constant 0 : i32
    %94 = arith.cmpi ne, %93, %c0_i32_23 : i32
    %95 = arith.select %94, %c1050851_i32, %c1050848_i32 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %96 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_24 = arith.constant 0 : i32
    %97 = arith.cmpi ne, %96, %c0_i32_24 : i32
    %98 = arith.select %97, %c2_i32, %c3_i32 : i32
    %99 = llvm.load %8 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c24_i64 : i64
    %102 = llvm.getelementptr %15[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c12_i64 : i64
    %106 = llvm.getelementptr %15[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i32
    %108 = arith.cmpi ult, %107, %22 : i32
    cf.cond_br %108, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %109 = llvm.getelementptr inbounds %20[%107] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %110 = llvm.load %109 : !llvm.ptr -> !llvm.ptr
    %111 = llvm.ptrtoint %110 : !llvm.ptr to i64
    %c0_i64_25 = arith.constant 0 : i64
    %112 = arith.cmpi eq, %111, %c0_i64_25 : i64
    cf.cond_br %112, ^bb10, ^bb9
  ^bb8:  // pred: ^bb6
    %c3_i32_26 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_26) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %113 = llvm.getelementptr %110[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %114 = llvm.getelementptr %110[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %115 = llvm.getelementptr %110[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %116 = llvm.load %113 : !llvm.ptr -> !llvm.ptr
    %117 = llvm.load %115 : !llvm.ptr -> !llvm.ptr
    %118 = llvm.ptrtoint %116 : !llvm.ptr to i64
    %c0_i64_27 = arith.constant 0 : i64
    %119 = arith.cmpi eq, %118, %c0_i64_27 : i64
    cf.cond_br %119, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c4_i32_28 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_28) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %120 = llvm.load %114 : !llvm.ptr -> i32
    %121 = arith.cmpi ne, %17, %120 : i32
    cf.cond_br %121, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_29 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_29) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %122 = llvm.call %116(%117, %91, %95, %98) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_30 = arith.constant 0 : i32
    %123 = arith.cmpi ne, %122, %c0_i32_30 : i32
    cf.cond_br %123, ^bb3, ^bb15
  ^bb14:  // pred: ^bb11
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb13
    %124 = llvm.load %8 : !llvm.ptr -> i32
    %c20_i64_31 = arith.constant 20 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c20_i64_31 : i64
    %127 = llvm.getelementptr %15[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %128 = llvm.load volatile %127 {alignment = 1 : i64} : !llvm.ptr -> i32
    %129 = llvm.load %1 : !llvm.ptr -> i32
    %130 = llvm.load %2 : !llvm.ptr -> i32
    %131 = llvm.load %8 : !llvm.ptr -> i32
    %c24_i64_32 = arith.constant 24 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c24_i64_32 : i64
    %134 = llvm.getelementptr %15[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_33 = arith.constant 12 : i64
    %136 = arith.extui %135 : i32 to i64
    %137 = arith.addi %136, %c12_i64_33 : i64
    %138 = llvm.getelementptr %15[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load volatile %138 {alignment = 1 : i64} : !llvm.ptr -> i32
    %140 = arith.cmpi ult, %139, %25 : i32
    cf.cond_br %140, ^bb16, ^bb17
  ^bb16:  // 2 preds: ^bb15, ^bb17
    %141 = llvm.getelementptr inbounds %23[%139] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %142 = llvm.load %141 : !llvm.ptr -> !llvm.ptr
    %143 = llvm.ptrtoint %142 : !llvm.ptr to i64
    %c0_i64_34 = arith.constant 0 : i64
    %144 = arith.cmpi eq, %143, %c0_i64_34 : i64
    cf.cond_br %144, ^bb19, ^bb18
  ^bb17:  // pred: ^bb15
    %c3_i32_35 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_35) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %145 = llvm.getelementptr %142[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %146 = llvm.getelementptr %142[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %147 = llvm.getelementptr %142[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %148 = llvm.load %145 : !llvm.ptr -> !llvm.ptr
    %149 = llvm.load %147 : !llvm.ptr -> !llvm.ptr
    %150 = llvm.ptrtoint %148 : !llvm.ptr to i64
    %c0_i64_36 = arith.constant 0 : i64
    %151 = arith.cmpi eq, %150, %c0_i64_36 : i64
    cf.cond_br %151, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c4_i32_37 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_37) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %152 = llvm.load %146 : !llvm.ptr -> i32
    %153 = arith.cmpi ne, %17, %152 : i32
    cf.cond_br %153, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c3_i32_38 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_38) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %154 = llvm.call %148(%149, %128, %129, %130) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_39 = arith.constant 0 : i32
    %155 = arith.cmpi ne, %154, %c0_i32_39 : i32
    cf.cond_br %155, ^bb3, ^bb24
  ^bb23:  // pred: ^bb20
    %c5_i32_40 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_40) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // pred: ^bb22
    %156 = llvm.load %8 : !llvm.ptr -> i32
    %c20_i64_41 = arith.constant 20 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c20_i64_41 : i64
    %159 = llvm.getelementptr %15[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050800_i32 = arith.constant 1050800 : i32
    %c2_i32_42 = arith.constant 2 : i32
    %161 = llvm.load %8 : !llvm.ptr -> i32
    %c24_i64_43 = arith.constant 24 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c24_i64_43 : i64
    %164 = llvm.getelementptr %15[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_44 = arith.constant 12 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c12_i64_44 : i64
    %168 = llvm.getelementptr %15[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %169 = llvm.load volatile %168 {alignment = 1 : i64} : !llvm.ptr -> i32
    %170 = arith.cmpi ult, %169, %28 : i32
    cf.cond_br %170, ^bb25, ^bb26
  ^bb25:  // 2 preds: ^bb24, ^bb26
    %171 = llvm.getelementptr inbounds %26[%169] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %172 = llvm.load %171 : !llvm.ptr -> !llvm.ptr
    %173 = llvm.ptrtoint %172 : !llvm.ptr to i64
    %c0_i64_45 = arith.constant 0 : i64
    %174 = arith.cmpi eq, %173, %c0_i64_45 : i64
    cf.cond_br %174, ^bb28, ^bb27
  ^bb26:  // pred: ^bb24
    %c3_i32_46 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_46) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %175 = llvm.getelementptr %172[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %176 = llvm.getelementptr %172[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %177 = llvm.getelementptr %172[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %178 = llvm.load %175 : !llvm.ptr -> !llvm.ptr
    %179 = llvm.load %177 : !llvm.ptr -> !llvm.ptr
    %180 = llvm.ptrtoint %178 : !llvm.ptr to i64
    %c0_i64_47 = arith.constant 0 : i64
    %181 = arith.cmpi eq, %180, %c0_i64_47 : i64
    cf.cond_br %181, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c4_i32_48 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_48) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %182 = llvm.load %176 : !llvm.ptr -> i32
    %183 = arith.cmpi ne, %17, %182 : i32
    cf.cond_br %183, ^bb32, ^bb31
  ^bb30:  // pred: ^bb27
    %c3_i32_49 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_49) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %184 = llvm.call %178(%179, %160, %c1050800_i32, %c2_i32_42) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_50 = arith.constant 0 : i32
    %185 = arith.cmpi ne, %184, %c0_i32_50 : i32
    cf.cond_br %185, ^bb3, ^bb33
  ^bb32:  // pred: ^bb29
    %c5_i32_51 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_51) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // pred: ^bb31
    %186 = llvm.load %3 : !llvm.ptr -> i32
    %187 = llvm.load %8 : !llvm.ptr -> i32
    %188 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64_52 = arith.constant 12 : i64
    %189 = arith.extui %188 : i32 to i64
    %190 = arith.addi %189, %c12_i64_52 : i64
    %191 = llvm.getelementptr %15[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %192 = llvm.load volatile %191 {alignment = 1 : i64} : !llvm.ptr -> i32
    %193 = arith.cmpi ult, %192, %33 : i32
    cf.cond_br %193, ^bb34, ^bb35
  ^bb34:  // 2 preds: ^bb33, ^bb35
    %194 = llvm.getelementptr inbounds %31[%192] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %195 = llvm.load %194 : !llvm.ptr -> !llvm.ptr
    %196 = llvm.ptrtoint %195 : !llvm.ptr to i64
    %c0_i64_53 = arith.constant 0 : i64
    %197 = arith.cmpi eq, %196, %c0_i64_53 : i64
    cf.cond_br %197, ^bb37, ^bb36
  ^bb35:  // pred: ^bb33
    %c3_i32_54 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_54) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %198 = llvm.getelementptr %195[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %199 = llvm.getelementptr %195[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %200 = llvm.getelementptr %195[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %201 = llvm.load %198 : !llvm.ptr -> !llvm.ptr
    %202 = llvm.load %200 : !llvm.ptr -> !llvm.ptr
    %203 = llvm.ptrtoint %201 : !llvm.ptr to i64
    %c0_i64_55 = arith.constant 0 : i64
    %204 = arith.cmpi eq, %203, %c0_i64_55 : i64
    cf.cond_br %204, ^bb39, ^bb38
  ^bb37:  // pred: ^bb34
    %c4_i32_56 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_56) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %205 = llvm.load %199 : !llvm.ptr -> i32
    %206 = arith.cmpi ne, %30, %205 : i32
    cf.cond_br %206, ^bb41, ^bb40
  ^bb39:  // pred: ^bb36
    %c3_i32_57 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_57) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %207 = llvm.call %201(%202, %186, %187) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    llvm.store %207, %6 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb41:  // pred: ^bb38
    %c5_i32_58 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_58) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb5, ^bb52
    %c1_i32_59 = arith.constant 1 : i32
    llvm.store %c1_i32_59, %6 : i32, !llvm.ptr
    %208 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_60 = arith.constant 1 : i32
    %c27_i64 = arith.constant 27 : i64
    %209 = arith.extui %208 : i32 to i64
    %210 = arith.addi %209, %c27_i64 : i64
    %211 = llvm.getelementptr %15[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %212 = arith.trunci %c1_i32_60 : i32 to i8
    llvm.store volatile %212, %211 {alignment = 1 : i64} : i8, !llvm.ptr
    %213 = llvm.load %5 : !llvm.ptr -> i32
    %214 = llvm.load %8 : !llvm.ptr -> i32
    %c20_i64_61 = arith.constant 20 : i64
    %215 = arith.extui %214 : i32 to i64
    %216 = arith.addi %215, %c20_i64_61 : i64
    %217 = llvm.getelementptr %15[%216] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %218 = llvm.load volatile %217 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c12_i64_62 = arith.constant 12 : i64
    %219 = arith.extui %213 : i32 to i64
    %220 = arith.addi %219, %c12_i64_62 : i64
    %221 = llvm.getelementptr %15[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %218, %221 {alignment = 1 : i64} : i64, !llvm.ptr
    %222 = llvm.load %5 : !llvm.ptr -> i32
    %c1050820_i32 = arith.constant 1050820 : i32
    %c52_i64 = arith.constant 52 : i64
    %223 = arith.extui %222 : i32 to i64
    %224 = arith.addi %223, %c52_i64 : i64
    %225 = llvm.getelementptr %15[%224] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050820_i32, %225 {alignment = 1 : i64} : i32, !llvm.ptr
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %227 = llvm.load %5 : !llvm.ptr -> i32
    %c27_i32 = arith.constant 27 : i32
    %228 = arith.addi %227, %c27_i32 : i32
    %c20_i64_63 = arith.constant 20 : i64
    %229 = arith.extui %226 : i32 to i64
    %230 = arith.addi %229, %c20_i64_63 : i64
    %231 = llvm.getelementptr %15[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %228, %231 {alignment = 1 : i64} : i32, !llvm.ptr
    %232 = llvm.load %5 : !llvm.ptr -> i32
    %233 = llvm.load %8 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %234 = arith.extui %233 : i32 to i64
    %235 = arith.addi %234, %c8_i64 : i64
    %236 = llvm.getelementptr %15[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %237 = llvm.load volatile %236 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c36_i64 = arith.constant 36 : i64
    %238 = arith.extui %232 : i32 to i64
    %239 = arith.addi %238, %c36_i64 : i64
    %240 = llvm.getelementptr %15[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %237, %240 {alignment = 1 : i64} : i64, !llvm.ptr
    %241 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_64 = arith.constant 0 : i64
    %242 = arith.extui %241 : i32 to i64
    %243 = arith.addi %242, %c0_i64_64 : i64
    %244 = llvm.getelementptr %15[%243] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %245 = llvm.load volatile %244 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %245, %10 : i64, !llvm.ptr
    %246 = llvm.load %5 : !llvm.ptr -> i32
    %247 = llvm.load %9 : !llvm.ptr -> i32
    %c56_i64 = arith.constant 56 : i64
    %248 = arith.extui %246 : i32 to i64
    %249 = arith.addi %248, %c56_i64 : i64
    %250 = llvm.getelementptr %15[%249] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %247, %250 {alignment = 1 : i64} : i32, !llvm.ptr
    %251 = llvm.load %5 : !llvm.ptr -> i32
    %252 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %253 = arith.extui %252 : i32 to i64
    %254 = arith.addi %253, %c16_i64 : i64
    %255 = llvm.getelementptr %15[%254] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %256 = llvm.load volatile %255 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %257 = arith.extui %251 : i32 to i64
    %258 = arith.addi %257, %c44_i64 : i64
    %259 = llvm.getelementptr %15[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %256, %259 {alignment = 1 : i64} : i32, !llvm.ptr
    %260 = llvm.load %5 : !llvm.ptr -> i32
    %261 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %262 = arith.extui %261 : i32 to i64
    %263 = arith.addi %262, %c32_i64 : i64
    %264 = llvm.getelementptr %15[%263] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %265 = llvm.load volatile %264 {alignment = 1 : i64} : !llvm.ptr -> i8
    %266 = arith.extui %265 : i8 to i32
    %c60_i64 = arith.constant 60 : i64
    %267 = arith.extui %260 : i32 to i64
    %268 = arith.addi %267, %c60_i64 : i64
    %269 = llvm.getelementptr %15[%268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %270 = arith.trunci %266 : i32 to i8
    llvm.store volatile %270, %269 {alignment = 1 : i64} : i8, !llvm.ptr
    %271 = llvm.load %5 : !llvm.ptr -> i32
    %272 = llvm.load %10 : !llvm.ptr -> i64
    %c28_i64_65 = arith.constant 28 : i64
    %273 = arith.extui %271 : i32 to i64
    %274 = arith.addi %273, %c28_i64_65 : i64
    %275 = llvm.getelementptr %15[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %272, %275 {alignment = 1 : i64} : i64, !llvm.ptr
    %276 = llvm.load %5 : !llvm.ptr -> i32
    %277 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %278 = arith.addi %277, %c12_i32 : i32
    %c48_i64 = arith.constant 48 : i64
    %279 = arith.extui %276 : i32 to i64
    %280 = arith.addi %279, %c48_i64 : i64
    %281 = llvm.getelementptr %15[%280] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %278, %281 {alignment = 1 : i64} : i32, !llvm.ptr
    %282 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i32_66 = arith.constant 12 : i32
    %283 = arith.addi %282, %c12_i32_66 : i32
    %284 = llvm.load %1 : !llvm.ptr -> i32
    %285 = llvm.load %2 : !llvm.ptr -> i32
    %286 = call @f161(%arg0, %283, %284, %285) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_67 = arith.constant 0 : i32
    %287 = arith.cmpi ne, %286, %c0_i32_67 : i32
    cf.cond_br %287, ^bb3, ^bb53
  ^bb43:  // pred: ^bb5
    %288 = llvm.load %8 : !llvm.ptr -> i32
    %c20_i64_68 = arith.constant 20 : i64
    %289 = arith.extui %288 : i32 to i64
    %290 = arith.addi %289, %c20_i64_68 : i64
    %291 = llvm.getelementptr %15[%290] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %292 = llvm.load volatile %291 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050853_i32 = arith.constant 1050853 : i32
    %c3_i32_69 = arith.constant 3 : i32
    %293 = llvm.load %8 : !llvm.ptr -> i32
    %c24_i64_70 = arith.constant 24 : i64
    %294 = arith.extui %293 : i32 to i64
    %295 = arith.addi %294, %c24_i64_70 : i64
    %296 = llvm.getelementptr %15[%295] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %297 = llvm.load volatile %296 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_71 = arith.constant 12 : i64
    %298 = arith.extui %297 : i32 to i64
    %299 = arith.addi %298, %c12_i64_71 : i64
    %300 = llvm.getelementptr %15[%299] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %301 = llvm.load volatile %300 {alignment = 1 : i64} : !llvm.ptr -> i32
    %302 = arith.cmpi ult, %301, %36 : i32
    cf.cond_br %302, ^bb44, ^bb45
  ^bb44:  // 2 preds: ^bb43, ^bb45
    %303 = llvm.getelementptr inbounds %34[%301] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %304 = llvm.load %303 : !llvm.ptr -> !llvm.ptr
    %305 = llvm.ptrtoint %304 : !llvm.ptr to i64
    %c0_i64_72 = arith.constant 0 : i64
    %306 = arith.cmpi eq, %305, %c0_i64_72 : i64
    cf.cond_br %306, ^bb47, ^bb46
  ^bb45:  // pred: ^bb43
    %c3_i32_73 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_73) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %307 = llvm.getelementptr %304[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %308 = llvm.getelementptr %304[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %309 = llvm.getelementptr %304[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %310 = llvm.load %307 : !llvm.ptr -> !llvm.ptr
    %311 = llvm.load %309 : !llvm.ptr -> !llvm.ptr
    %312 = llvm.ptrtoint %310 : !llvm.ptr to i64
    %c0_i64_74 = arith.constant 0 : i64
    %313 = arith.cmpi eq, %312, %c0_i64_74 : i64
    cf.cond_br %313, ^bb49, ^bb48
  ^bb47:  // pred: ^bb44
    %c4_i32_75 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_75) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %314 = llvm.load %308 : !llvm.ptr -> i32
    %315 = arith.cmpi ne, %17, %314 : i32
    cf.cond_br %315, ^bb51, ^bb50
  ^bb49:  // pred: ^bb46
    %c3_i32_76 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_76) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %316 = llvm.call %310(%311, %292, %c1050853_i32, %c3_i32_69) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_77 = arith.constant 0 : i32
    %317 = arith.cmpi ne, %316, %c0_i32_77 : i32
    cf.cond_br %317, ^bb3, ^bb52
  ^bb51:  // pred: ^bb48
    %c5_i32_78 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_78) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // pred: ^bb50
    %318 = llvm.load %8 : !llvm.ptr -> i32
    %c28_i64_79 = arith.constant 28 : i64
    %319 = arith.extui %318 : i32 to i64
    %320 = arith.addi %319, %c28_i64_79 : i64
    %321 = llvm.getelementptr %15[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %322 = llvm.load volatile %321 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %322, %9 : i32, !llvm.ptr
    cf.br ^bb42
  ^bb53:  // pred: ^bb42
    %323 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i32_80 = arith.constant 12 : i32
    %324 = arith.addi %323, %c12_i32_80 : i32
    %c1050800_i32_81 = arith.constant 1050800 : i32
    %c2_i32_82 = arith.constant 2 : i32
    %325 = call @f161(%arg0, %324, %c1050800_i32_81, %c2_i32_82) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_83 = arith.constant 0 : i32
    %326 = arith.cmpi ne, %325, %c0_i32_83 : i32
    cf.cond_br %326, ^bb3, ^bb54
  ^bb54:  // pred: ^bb53
    %327 = llvm.load %3 : !llvm.ptr -> i32
    %328 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %329 = arith.addi %328, %c28_i32 : i32
    %330 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64_84 = arith.constant 12 : i64
    %331 = arith.extui %330 : i32 to i64
    %332 = arith.addi %331, %c12_i64_84 : i64
    %333 = llvm.getelementptr %15[%332] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %334 = llvm.load volatile %333 {alignment = 1 : i64} : !llvm.ptr -> i32
    %335 = arith.cmpi ult, %334, %39 : i32
    cf.cond_br %335, ^bb55, ^bb56
  ^bb55:  // 2 preds: ^bb54, ^bb56
    %336 = llvm.getelementptr inbounds %37[%334] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %337 = llvm.load %336 : !llvm.ptr -> !llvm.ptr
    %338 = llvm.ptrtoint %337 : !llvm.ptr to i64
    %c0_i64_85 = arith.constant 0 : i64
    %339 = arith.cmpi eq, %338, %c0_i64_85 : i64
    cf.cond_br %339, ^bb58, ^bb57
  ^bb56:  // pred: ^bb54
    %c3_i32_86 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_86) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %340 = llvm.getelementptr %337[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %341 = llvm.getelementptr %337[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %342 = llvm.getelementptr %337[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %343 = llvm.load %340 : !llvm.ptr -> !llvm.ptr
    %344 = llvm.load %342 : !llvm.ptr -> !llvm.ptr
    %345 = llvm.ptrtoint %343 : !llvm.ptr to i64
    %c0_i64_87 = arith.constant 0 : i64
    %346 = arith.cmpi eq, %345, %c0_i64_87 : i64
    cf.cond_br %346, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c4_i32_88 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_88) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %347 = llvm.load %341 : !llvm.ptr -> i32
    %348 = arith.cmpi ne, %30, %347 : i32
    cf.cond_br %348, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_89 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_89) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %349 = llvm.call %343(%344, %327, %329) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_90 = arith.constant 0 : i32
    %350 = arith.cmpi ne, %349, %c0_i32_90 : i32
    cf.cond_br %350, ^bb3, ^bb63
  ^bb62:  // pred: ^bb59
    %c5_i32_91 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_91) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // pred: ^bb61
    %351 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i64_92 = arith.constant 48 : i64
    %352 = arith.extui %351 : i32 to i64
    %353 = arith.addi %352, %c48_i64_92 : i64
    %354 = llvm.getelementptr %15[%353] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %355 = llvm.load volatile %354 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050856_i32 = arith.constant 1050856 : i32
    %c2_i32_93 = arith.constant 2 : i32
    %356 = llvm.load %5 : !llvm.ptr -> i32
    %c52_i64_94 = arith.constant 52 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c52_i64_94 : i64
    %359 = llvm.getelementptr %15[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load volatile %359 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_95 = arith.constant 12 : i64
    %361 = arith.extui %360 : i32 to i64
    %362 = arith.addi %361, %c12_i64_95 : i64
    %363 = llvm.getelementptr %15[%362] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %364 = llvm.load volatile %363 {alignment = 1 : i64} : !llvm.ptr -> i32
    %365 = arith.cmpi ult, %364, %42 : i32
    cf.cond_br %365, ^bb64, ^bb65
  ^bb64:  // 2 preds: ^bb63, ^bb65
    %366 = llvm.getelementptr inbounds %40[%364] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %367 = llvm.load %366 : !llvm.ptr -> !llvm.ptr
    %368 = llvm.ptrtoint %367 : !llvm.ptr to i64
    %c0_i64_96 = arith.constant 0 : i64
    %369 = arith.cmpi eq, %368, %c0_i64_96 : i64
    cf.cond_br %369, ^bb67, ^bb66
  ^bb65:  // pred: ^bb63
    %c3_i32_97 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_97) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %370 = llvm.getelementptr %367[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %371 = llvm.getelementptr %367[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %372 = llvm.getelementptr %367[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %373 = llvm.load %370 : !llvm.ptr -> !llvm.ptr
    %374 = llvm.load %372 : !llvm.ptr -> !llvm.ptr
    %375 = llvm.ptrtoint %373 : !llvm.ptr to i64
    %c0_i64_98 = arith.constant 0 : i64
    %376 = arith.cmpi eq, %375, %c0_i64_98 : i64
    cf.cond_br %376, ^bb69, ^bb68
  ^bb67:  // pred: ^bb64
    %c4_i32_99 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_99) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %377 = llvm.load %371 : !llvm.ptr -> i32
    %378 = arith.cmpi ne, %17, %377 : i32
    cf.cond_br %378, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c3_i32_100 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_100) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %379 = llvm.call %373(%374, %355, %c1050856_i32, %c2_i32_93) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %379, %6 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb71:  // pred: ^bb68
    %c5_i32_101 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_101) : (i32) -> ()
    cf.br ^bb70
  }
  func.func @f153(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %11 = arith.subi %10, %c16_i32 : i32
    llvm.store %11, %2 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i8
    %17 = arith.extui %16 : i8 to i32
    llvm.store %17, %3 : i32, !llvm.ptr
    %c100_i32 = arith.constant 100 : i32
    %18 = arith.cmpi ult, %17, %c100_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_4 : i32
    cf.cond_br %20, ^bb6, ^bb7
  ^bb2(%21: i32):  // pred: ^bb3
    return %21 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_5 = arith.constant 1 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c13_i32 = arith.constant 13 : i32
    %24 = arith.addi %23, %c13_i32 : i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %26 = arith.addi %24, %25 : i32
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %28 = arith.xori %27, %c3_i32 : i32
    %29 = call @f166(%arg0, %22, %c1_i32_5, %c1_i32_6, %c0_i32_7, %26, %28) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %29, %0 : i32, !llvm.ptr
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_8 = arith.constant 16 : i32
    %31 = arith.addi %30, %c16_i32_8 : i32
    llvm.store %31, %6 : i32, !llvm.ptr
    %32 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%32 : i32)
  ^bb4:  // pred: ^bb6
    %c1_i32_9 = arith.constant 1 : i32
    llvm.store %c1_i32_9, %0 : i32, !llvm.ptr
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_10 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %35 = arith.cmpi ule, %c1_i32_10, %c31_i32 : i32
    %36 = scf.if %35 -> (i32) {
      %83 = arith.shli %34, %c1_i32_10 : i32
      scf.yield %83 : i32
    } else {
      %c0_i32_24 = arith.constant 0 : i32
      scf.yield %c0_i32_24 : i32
    }
    %c1050906_i32 = arith.constant 1050906 : i32
    %37 = arith.addi %36, %c1050906_i32 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_11 : i64
    %40 = llvm.getelementptr %9[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i16
    %42 = arith.extui %41 : i16 to i32
    %c14_i64 = arith.constant 14 : i64
    %43 = arith.extui %33 : i32 to i64
    %44 = arith.addi %43, %c14_i64 : i64
    %45 = llvm.getelementptr %9[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = arith.trunci %42 : i32 to i16
    llvm.store volatile %46, %45 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb7, ^bb8
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c13_i32_12 = arith.constant 13 : i32
    %48 = arith.addi %47, %c13_i32_12 : i32
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %50 = arith.addi %48, %49 : i32
    %51 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %52 = arith.ori %51, %c48_i32 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %53 = arith.extui %50 : i32 to i64
    %54 = arith.addi %53, %c0_i64_13 : i64
    %55 = llvm.getelementptr %9[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = arith.trunci %52 : i32 to i8
    llvm.store volatile %56, %55 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb1
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %0 : i32, !llvm.ptr
    %57 = llvm.load %3 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %58 = arith.cmpi uge, %57, %c10_i32 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_14 : i32
    cf.cond_br %60, ^bb4, ^bb8
  ^bb7:  // pred: ^bb1
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %62 = llvm.load %3 : !llvm.ptr -> i32
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c100_i32_15 = arith.constant 100 : i32
    %64 = arith.divui %63, %c100_i32_15 : i32
    %c0_i32_16 = arith.constant 0 : i32
    %65 = arith.cmpi eq, %c100_i32_15, %c0_i32_16 : i32
    %66 = arith.select %65, %c0_i32_16, %64 : i32
    llvm.store %66, %4 : i32, !llvm.ptr
    %c100_i32_17 = arith.constant 100 : i32
    %67 = arith.muli %66, %c100_i32_17 : i32
    %68 = arith.subi %62, %67 : i32
    %c255_i32 = arith.constant 255 : i32
    %69 = arith.andi %68, %c255_i32 : i32
    %c1_i32_18 = arith.constant 1 : i32
    %c31_i32_19 = arith.constant 31 : i32
    %70 = arith.cmpi ule, %c1_i32_18, %c31_i32_19 : i32
    %71 = scf.if %70 -> (i32) {
      %83 = arith.shli %69, %c1_i32_18 : i32
      scf.yield %83 : i32
    } else {
      %c0_i32_24 = arith.constant 0 : i32
      scf.yield %c0_i32_24 : i32
    }
    %c1050906_i32_20 = arith.constant 1050906 : i32
    %72 = arith.addi %71, %c1050906_i32_20 : i32
    %c0_i64_21 = arith.constant 0 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c0_i64_21 : i64
    %75 = llvm.getelementptr %9[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i16
    %77 = arith.extui %76 : i16 to i32
    %c14_i64_22 = arith.constant 14 : i64
    %78 = arith.extui %61 : i32 to i64
    %79 = arith.addi %78, %c14_i64_22 : i64
    %80 = llvm.getelementptr %9[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = arith.trunci %77 : i32 to i16
    llvm.store volatile %81, %80 {alignment = 1 : i64} : i16, !llvm.ptr
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %0 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb6
    %82 = llvm.load %3 : !llvm.ptr -> i32
    llvm.store %82, %4 : i32, !llvm.ptr
    cf.br ^bb5
  }
  func.func @f154(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %12 = arith.subi %11, %c64_i32 : i32
    llvm.store %12, %5 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %5 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %15 = arith.extui %13 : i32 to i64
    %16 = arith.addi %15, %c12_i64 : i64
    %17 = llvm.getelementptr %10[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %14, %17 {alignment = 1 : i64} : i32, !llvm.ptr
    %18 = llvm.load %5 : !llvm.ptr -> i32
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.extui %18 : i32 to i64
    %21 = arith.addi %20, %c8_i64 : i64
    %22 = llvm.getelementptr %10[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %19, %22 {alignment = 1 : i64} : i32, !llvm.ptr
    %23 = llvm.load %5 : !llvm.ptr -> i32
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %25 = arith.extui %23 : i32 to i64
    %26 = arith.addi %25, %c20_i64 : i64
    %27 = llvm.getelementptr %10[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c16_i64 : i64
    %32 = llvm.getelementptr %10[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %33 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c28_i64 = arith.constant 28 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c28_i64 : i64
    %36 = llvm.getelementptr %10[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %5 : !llvm.ptr -> i32
    %c1050804_i32 = arith.constant 1050804 : i32
    %c24_i64 = arith.constant 24 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c24_i64 : i64
    %40 = llvm.getelementptr %10[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050804_i32, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    %41 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c36_i64 = arith.constant 36 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c36_i64 : i64
    %44 = llvm.getelementptr %10[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %5 : !llvm.ptr -> i32
    %c50_i32 = arith.constant 50 : i32
    %46 = arith.extui %c50_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %47 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %48 = scf.if %47 -> (i64) {
      %76 = arith.shli %46, %c32_i64 : i64
      scf.yield %76 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %49 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %50 = arith.addi %49, %c16_i32 : i32
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.ori %48, %51 : i64
    %c56_i64 = arith.constant 56 : i64
    %53 = arith.extui %45 : i32 to i64
    %54 = arith.addi %53, %c56_i64 : i64
    %55 = llvm.getelementptr %10[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %c51_i32 = arith.constant 51 : i32
    %57 = arith.extui %c51_i32 : i32 to i64
    %c32_i64_5 = arith.constant 32 : i64
    %c63_i64_6 = arith.constant 63 : i64
    %58 = arith.cmpi ule, %c32_i64_5, %c63_i64_6 : i64
    %59 = scf.if %58 -> (i64) {
      %76 = arith.shli %57, %c32_i64_5 : i64
      scf.yield %76 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %60 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %61 = arith.addi %60, %c8_i32 : i32
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.ori %59, %62 : i64
    %c48_i64 = arith.constant 48 : i64
    %64 = arith.extui %56 : i32 to i64
    %65 = arith.addi %64, %c48_i64 : i64
    %66 = llvm.getelementptr %10[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %63, %66 {alignment = 1 : i64} : i64, !llvm.ptr
    %67 = llvm.load %5 : !llvm.ptr -> i32
    %68 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %69 = arith.addi %68, %c48_i32 : i32
    %c32_i64_7 = arith.constant 32 : i64
    %70 = arith.extui %67 : i32 to i64
    %71 = arith.addi %70, %c32_i64_7 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i32, !llvm.ptr
    %73 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %74 = arith.addi %73, %c24_i32 : i32
    %75 = llvm.load %4 : !llvm.ptr -> i32
    call @f141(%arg0, %74, %75) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f155(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c0_i64_4 : i64
    %16 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c1051296_i32 = arith.constant 1051296 : i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051296_i32, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c20_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %35 = arith.extui %c31_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %36 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %37 = scf.if %36 -> (i64) {
      %62 = arith.shli %35, %c32_i64 : i64
      scf.yield %62 : i64
    } else {
      %c0_i64_6 = arith.constant 0 : i64
      scf.yield %c0_i64_6 : i64
    }
    llvm.store %37, %4 : i64, !llvm.ptr
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %39 = arith.addi %38, %c4_i32 : i32
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.ori %37, %40 : i64
    %c40_i64 = arith.constant 40 : i64
    %42 = arith.extui %34 : i32 to i64
    %43 = arith.addi %42, %c40_i64 : i64
    %44 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %4 : !llvm.ptr -> i64
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.ori %46, %48 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %50 = arith.extui %45 : i32 to i64
    %51 = arith.addi %50, %c32_i64_5 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %55 = arith.addi %54, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c16_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    call @f141(%arg0, %60, %61) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f156(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1050665_i32 = arith.constant 1050665 : i32
    %c43_i32 = arith.constant 43 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f140(%arg0, %c1050665_i32, %c43_i32, %1) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f157(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c4_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %16 = call @f139(%arg0, %5, %10, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f158(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %8 = arith.subi %7, %c32_i32 : i32
    llvm.store %8, %1 : i32, !llvm.ptr
    llvm.store %8, %3 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c4_i64 : i64
    %12 = llvm.getelementptr %6[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1, %12 {alignment = 1 : i64} : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c1050656_i32 = arith.constant 1050656 : i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050656_i32, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c12_i64 = arith.constant 12 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c12_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %20 {alignment = 1 : i64} : i64, !llvm.ptr
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c51_i32 = arith.constant 51 : i32
    %22 = arith.extui %c51_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %23 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %24 = scf.if %23 -> (i64) {
      %38 = arith.shli %22, %c32_i64 : i64
      scf.yield %38 : i64
    } else {
      %c0_i64_2 = arith.constant 0 : i64
      scf.yield %c0_i64_2 : i64
    }
    %c1050724_i32 = arith.constant 1050724 : i32
    %25 = arith.extui %c1050724_i32 : i32 to i64
    %26 = arith.ori %24, %25 : i64
    %c24_i64 = arith.constant 24 : i64
    %27 = arith.extui %21 : i32 to i64
    %28 = arith.addi %27, %c24_i64 : i64
    %29 = llvm.getelementptr %6[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %26, %29 {alignment = 1 : i64} : i64, !llvm.ptr
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %32 = arith.addi %31, %c24_i32 : i32
    %c8_i64 = arith.constant 8 : i64
    %33 = arith.extui %30 : i32 to i64
    %34 = arith.addi %33, %c8_i64 : i64
    %35 = llvm.getelementptr %6[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %37 = llvm.load %0 : !llvm.ptr -> i32
    call @f141(%arg0, %36, %37) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f159(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %11 = arith.subi %10, %c128_i32 : i32
    llvm.store %11, %2 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %0 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    llvm.store %c0_i32_4, %3 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2(%17: i32):  // pred: ^bb6
    return %17 : i32
  ^bb3:  // pred: ^bb5
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_5 = arith.constant 128 : i32
    %19 = arith.addi %18, %c128_i32_5 : i32
    llvm.store %19, %0 : i32, !llvm.ptr
    %c129_i32 = arith.constant 129 : i32
    %20 = arith.cmpi ult, %19, %c129_i32 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_6 : i32
    cf.cond_br %22, ^bb6, ^bb7
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %25 = arith.addi %23, %24 : i32
    %c127_i32 = arith.constant 127 : i32
    %26 = arith.addi %25, %c127_i32 : i32
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c15_i32 = arith.constant 15 : i32
    %28 = arith.andi %27, %c15_i32 : i32
    llvm.store %28, %4 : i32, !llvm.ptr
    %c48_i32 = arith.constant 48 : i32
    %29 = arith.ori %28, %c48_i32 : i32
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %c87_i32 = arith.constant 87 : i32
    %31 = arith.addi %30, %c87_i32 : i32
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %33 = arith.cmpi ult, %32, %c10_i32 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_7 : i32
    %36 = arith.select %35, %29, %31 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %37 = arith.extui %26 : i32 to i64
    %38 = arith.addi %37, %c0_i64_8 : i64
    %39 = llvm.getelementptr %9[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = arith.trunci %36 : i32 to i8
    llvm.store volatile %40, %39 {alignment = 1 : i64} : i8, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %42 = arith.addi %41, %c-1_i32 : i32
    llvm.store %42, %3 : i32, !llvm.ptr
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %44 = arith.cmpi ult, %43, %c16_i32 : i32
    %45 = arith.extui %44 : i1 to i32
    llvm.store %45, %4 : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c31_i32 = arith.constant 31 : i32
    %47 = arith.cmpi ule, %c4_i32, %c31_i32 : i32
    %48 = scf.if %47 -> (i32) {
      %65 = arith.shrui %46, %c4_i32 : i32
      scf.yield %65 : i32
    } else {
      %c0_i32_16 = arith.constant 0 : i32
      scf.yield %c0_i32_16 : i32
    }
    llvm.store %48, %0 : i32, !llvm.ptr
    %49 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %50 = arith.cmpi eq, %49, %c0_i32_9 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %52 = arith.cmpi ne, %51, %c0_i32_10 : i32
    cf.cond_br %52, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  ^bb6:  // pred: ^bb3
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %c1050904_i32 = arith.constant 1050904 : i32
    %c2_i32 = arith.constant 2 : i32
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %56 = arith.addi %54, %55 : i32
    %c128_i32_12 = arith.constant 128 : i32
    %57 = arith.addi %56, %c128_i32_12 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %59 = arith.subi %c0_i32_13, %58 : i32
    %60 = call @f166(%arg0, %53, %c1_i32_11, %c1050904_i32, %c2_i32, %57, %59) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %60, %0 : i32, !llvm.ptr
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c128_i32_14 = arith.constant 128 : i32
    %62 = arith.addi %61, %c128_i32_14 : i32
    llvm.store %62, %6 : i32, !llvm.ptr
    %63 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%63 : i32)
  ^bb7:  // pred: ^bb3
    %64 = llvm.load %0 : !llvm.ptr -> i32
    %c128_i32_15 = arith.constant 128 : i32
    %c1050888_i32 = arith.constant 1050888 : i32
    call @f136(%arg0, %64, %c128_i32_15, %c1050888_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f160(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> i32
    %7 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %8 : !llvm.ptr -> i64
    %11 = arith.trunci %10 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %4[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %4[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %4[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = arith.cmpi ult, %26, %11 : i32
    cf.cond_br %27, ^bb3, ^bb4
  ^bb2(%28: i32):  // pred: ^bb9
    return %28 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %29 = llvm.getelementptr inbounds %9[%26] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %30 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.ptrtoint %30 : !llvm.ptr to i64
    %c0_i64_1 = arith.constant 0 : i64
    %32 = arith.cmpi eq, %31, %c0_i64_1 : i64
    cf.cond_br %32, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %33 = llvm.getelementptr %30[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %34 = llvm.getelementptr %30[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.getelementptr %30[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.load %33 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.ptrtoint %36 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %39 = arith.cmpi eq, %38, %c0_i64_2 : i64
    cf.cond_br %39, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %40 = llvm.load %34 : !llvm.ptr -> i32
    %41 = arith.cmpi ne, %6, %40 : i32
    cf.cond_br %41, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %42 = llvm.call %36(%37, %16, %17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%42 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f161(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %c1_i32_12 = arith.constant 1 : i32
    %13 = llvm.alloca %c1_i32_12 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %13 : i32, !llvm.ptr
    %c1_i32_13 = arith.constant 1 : i32
    %14 = llvm.alloca %c1_i32_13 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %14 : i32, !llvm.ptr
    %c1_i32_14 = arith.constant 1 : i32
    %15 = llvm.alloca %c1_i32_14 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %15 : i32, !llvm.ptr
    %16 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %16[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %19 : !llvm.ptr -> i32
    %21 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %22 : !llvm.ptr -> i64
    %25 = arith.trunci %24 : i64 to i32
    %26 = llvm.load %21 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %22 : !llvm.ptr -> i64
    %28 = arith.trunci %27 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %30 = arith.addi %29, %c-1_i32 : i32
    llvm.store %30, %3 : i32, !llvm.ptr
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c4_i64 : i64
    %34 = llvm.getelementptr %18[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %35, %4 : i32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c0_i64 : i64
    %39 = llvm.getelementptr %18[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %40, %5 : i32, !llvm.ptr
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c8_i64 : i64
    %44 = llvm.getelementptr %18[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %45, %6 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    llvm.store %c0_i32_15, %7 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    llvm.store %c0_i32_16, %8 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    llvm.store %c0_i32_17, %9 : i32, !llvm.ptr
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %10 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb2(%46: i32):  // pred: ^bb3
    return %46 : i32
  ^bb3:  // 3 preds: ^bb4, ^bb5, ^bb8
    %47 = llvm.load %7 : !llvm.ptr -> i32
    cf.br ^bb2(%47 : i32)
  ^bb4:  // pred: ^bb46
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %7 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb1, ^bb66
    %48 = llvm.load %10 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %49 = arith.andi %48, %c1_i32_20 : i32
    %c0_i32_21 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_21 : i32
    cf.cond_br %50, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %51 = llvm.load %9 : !llvm.ptr -> i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = arith.cmpi ugt, %51, %52 : i32
    %54 = arith.extui %53 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_22 : i32
    cf.cond_br %55, ^bb8, ^bb9
  ^bb7:  // 2 preds: ^bb43, ^bb45
    %56 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_23 = arith.constant 0 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c0_i64_23 : i64
    %59 = llvm.getelementptr %18[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i8
    %61 = arith.extui %60 : i8 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_24 : i32
    %63 = arith.extui %62 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_25 : i32
    cf.cond_br %64, ^bb47, ^bb48
  ^bb8:  // 6 preds: ^bb6, ^bb10, ^bb17, ^bb30, ^bb35, ^bb36
    %c1_i32_26 = arith.constant 1 : i32
    llvm.store %c1_i32_26, %10 : i32, !llvm.ptr
    %65 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %65, %11 : i32, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %66, %0 : i32, !llvm.ptr
    %67 = llvm.load %8 : !llvm.ptr -> i32
    %68 = llvm.load %2 : !llvm.ptr -> i32
    %69 = arith.cmpi eq, %67, %68 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_27 : i32
    cf.cond_br %71, ^bb3, ^bb45
  ^bb9:  // pred: ^bb6
    cf.br ^bb11
  ^bb10:  // pred: ^bb44
    cf.br ^bb8
  ^bb11:  // 2 preds: ^bb9, ^bb41
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %73 = llvm.load %9 : !llvm.ptr -> i32
    %74 = arith.addi %72, %73 : i32
    llvm.store %74, %11 : i32, !llvm.ptr
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %76 = llvm.load %9 : !llvm.ptr -> i32
    %77 = arith.subi %75, %76 : i32
    llvm.store %77, %12 : i32, !llvm.ptr
    %c7_i32 = arith.constant 7 : i32
    %78 = arith.cmpi ugt, %77, %c7_i32 : i32
    %79 = arith.extui %78 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %80 = arith.cmpi ne, %79, %c0_i32_28 : i32
    cf.cond_br %80, ^bb15, ^bb16
  ^bb12:  // 3 preds: ^bb22, ^bb31, ^bb39
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %82 = llvm.load %9 : !llvm.ptr -> i32
    %83 = arith.addi %81, %82 : i32
    llvm.store %83, %14 : i32, !llvm.ptr
    %c1_i32_29 = arith.constant 1 : i32
    %84 = arith.addi %83, %c1_i32_29 : i32
    llvm.store %84, %9 : i32, !llvm.ptr
    %85 = llvm.load %14 : !llvm.ptr -> i32
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %87 = arith.cmpi uge, %85, %86 : i32
    %88 = arith.extui %87 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %89 = arith.cmpi ne, %88, %c0_i32_30 : i32
    cf.cond_br %89, ^bb41, ^bb42
  ^bb13:  // 3 preds: ^bb25, ^bb27, ^bb29
    %90 = llvm.load %14 : !llvm.ptr -> i32
    %91 = llvm.load %12 : !llvm.ptr -> i32
    %92 = arith.cmpi eq, %90, %91 : i32
    %93 = arith.extui %92 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %94 = arith.cmpi eq, %93, %c0_i32_31 : i32
    %95 = arith.extui %94 : i1 to i32
    %c0_i32_32 = arith.constant 0 : i32
    %96 = arith.cmpi ne, %95, %c0_i32_32 : i32
    cf.cond_br %96, ^bb34, ^bb35
  ^bb14:  // 2 preds: ^bb16, ^bb26
    %c0_i32_33 = arith.constant 0 : i32
    llvm.store %c0_i32_33, %0 : i32, !llvm.ptr
    cf.br ^bb31
  ^bb15:  // pred: ^bb11
    %97 = llvm.load %11 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %98 = arith.addi %97, %c3_i32 : i32
    %c-4_i32 = arith.constant -4 : i32
    %99 = arith.andi %98, %c-4_i32 : i32
    llvm.store %99, %13 : i32, !llvm.ptr
    %100 = llvm.load %11 : !llvm.ptr -> i32
    %101 = arith.subi %99, %100 : i32
    llvm.store %101, %14 : i32, !llvm.ptr
    %c0_i32_34 = arith.constant 0 : i32
    %102 = arith.cmpi eq, %101, %c0_i32_34 : i32
    %103 = arith.extui %102 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %104 = arith.cmpi ne, %103, %c0_i32_35 : i32
    cf.cond_br %104, ^bb19, ^bb20
  ^bb16:  // pred: ^bb11
    %105 = llvm.load %2 : !llvm.ptr -> i32
    %106 = llvm.load %9 : !llvm.ptr -> i32
    %107 = arith.cmpi eq, %105, %106 : i32
    %108 = arith.extui %107 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %109 = arith.cmpi eq, %108, %c0_i32_36 : i32
    %110 = arith.extui %109 : i1 to i32
    %c0_i32_37 = arith.constant 0 : i32
    %111 = arith.cmpi ne, %110, %c0_i32_37 : i32
    cf.cond_br %111, ^bb14, ^bb17
  ^bb17:  // pred: ^bb16
    %112 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %112, %9 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb18:  // 2 preds: ^bb19, ^bb21
    cf.br ^bb27
  ^bb19:  // pred: ^bb15
    %113 = llvm.load %12 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %114 = arith.addi %113, %c-8_i32 : i32
    llvm.store %114, %15 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb20:  // pred: ^bb15
    %c0_i32_38 = arith.constant 0 : i32
    llvm.store %c0_i32_38, %0 : i32, !llvm.ptr
    cf.br ^bb22
  ^bb21:  // pred: ^bb24
    %115 = llvm.load %14 : !llvm.ptr -> i32
    %116 = llvm.load %12 : !llvm.ptr -> i32
    %c-8_i32_39 = arith.constant -8 : i32
    %117 = arith.addi %116, %c-8_i32_39 : i32
    llvm.store %117, %15 : i32, !llvm.ptr
    %118 = arith.cmpi ule, %115, %117 : i32
    %119 = arith.extui %118 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %120 = arith.cmpi ne, %119, %c0_i32_40 : i32
    cf.cond_br %120, ^bb18, ^bb25
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %121 = llvm.load %11 : !llvm.ptr -> i32
    %122 = llvm.load %0 : !llvm.ptr -> i32
    %123 = arith.addi %121, %122 : i32
    %c0_i64_41 = arith.constant 0 : i64
    %124 = arith.extui %123 : i32 to i64
    %125 = arith.addi %124, %c0_i64_41 : i64
    %126 = llvm.getelementptr %18[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = llvm.load volatile %126 {alignment = 1 : i64} : !llvm.ptr -> i8
    %128 = arith.extui %127 : i8 to i32
    %c10_i32 = arith.constant 10 : i32
    %129 = arith.cmpi eq, %128, %c10_i32 : i32
    %130 = arith.extui %129 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %131 = arith.cmpi ne, %130, %c0_i32_42 : i32
    cf.cond_br %131, ^bb12, ^bb23
  ^bb23:  // pred: ^bb22
    %132 = llvm.load %14 : !llvm.ptr -> i32
    %133 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_43 = arith.constant 1 : i32
    %134 = arith.addi %133, %c1_i32_43 : i32
    llvm.store %134, %0 : i32, !llvm.ptr
    %135 = arith.cmpi eq, %132, %134 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %137 = arith.cmpi eq, %136, %c0_i32_44 : i32
    %138 = arith.extui %137 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %139 = arith.cmpi ne, %138, %c0_i32_45 : i32
    cf.cond_br %139, ^bb22, ^bb24
  ^bb24:  // pred: ^bb23
    cf.br ^bb21
  ^bb25:  // pred: ^bb21
    cf.br ^bb13
  ^bb26:  // no predecessors
    cf.br ^bb14
  ^bb27:  // 2 preds: ^bb18, ^bb28
    %c16843008_i32 = arith.constant 16843008 : i32
    %140 = llvm.load %13 : !llvm.ptr -> i32
    %c0_i64_46 = arith.constant 0 : i64
    %141 = arith.extui %140 : i32 to i64
    %142 = arith.addi %141, %c0_i64_46 : i64
    %143 = llvm.getelementptr %18[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %144 = llvm.load volatile %143 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %144, %0 : i32, !llvm.ptr
    %c168430090_i32 = arith.constant 168430090 : i32
    %145 = arith.xori %144, %c168430090_i32 : i32
    %146 = arith.subi %c16843008_i32, %145 : i32
    %147 = llvm.load %0 : !llvm.ptr -> i32
    %148 = arith.ori %146, %147 : i32
    %c16843008_i32_47 = arith.constant 16843008 : i32
    %149 = llvm.load %13 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %150 = arith.addi %149, %c4_i32 : i32
    %c0_i64_48 = arith.constant 0 : i64
    %151 = arith.extui %150 : i32 to i64
    %152 = arith.addi %151, %c0_i64_48 : i64
    %153 = llvm.getelementptr %18[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %154, %0 : i32, !llvm.ptr
    %c168430090_i32_49 = arith.constant 168430090 : i32
    %155 = arith.xori %154, %c168430090_i32_49 : i32
    %156 = arith.subi %c16843008_i32_47, %155 : i32
    %157 = llvm.load %0 : !llvm.ptr -> i32
    %158 = arith.ori %156, %157 : i32
    %159 = arith.andi %148, %158 : i32
    %c-2139062144_i32 = arith.constant -2139062144 : i32
    %160 = arith.andi %159, %c-2139062144_i32 : i32
    %c-2139062144_i32_50 = arith.constant -2139062144 : i32
    %161 = arith.cmpi eq, %160, %c-2139062144_i32_50 : i32
    %162 = arith.extui %161 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %163 = arith.cmpi eq, %162, %c0_i32_51 : i32
    %164 = arith.extui %163 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %165 = arith.cmpi ne, %164, %c0_i32_52 : i32
    cf.cond_br %165, ^bb13, ^bb28
  ^bb28:  // pred: ^bb27
    %166 = llvm.load %13 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %167 = arith.addi %166, %c8_i32 : i32
    llvm.store %167, %13 : i32, !llvm.ptr
    %168 = llvm.load %14 : !llvm.ptr -> i32
    %c8_i32_53 = arith.constant 8 : i32
    %169 = arith.addi %168, %c8_i32_53 : i32
    llvm.store %169, %14 : i32, !llvm.ptr
    %170 = llvm.load %15 : !llvm.ptr -> i32
    %171 = arith.cmpi ule, %169, %170 : i32
    %172 = arith.extui %171 : i1 to i32
    %c0_i32_54 = arith.constant 0 : i32
    %173 = arith.cmpi ne, %172, %c0_i32_54 : i32
    cf.cond_br %173, ^bb27, ^bb29
  ^bb29:  // pred: ^bb28
    cf.br ^bb13
  ^bb30:  // pred: ^bb33
    %174 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %174, %9 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb31:  // 2 preds: ^bb14, ^bb32
    %175 = llvm.load %11 : !llvm.ptr -> i32
    %176 = llvm.load %0 : !llvm.ptr -> i32
    %177 = arith.addi %175, %176 : i32
    %c0_i64_55 = arith.constant 0 : i64
    %178 = arith.extui %177 : i32 to i64
    %179 = arith.addi %178, %c0_i64_55 : i64
    %180 = llvm.getelementptr %18[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %181 = llvm.load volatile %180 {alignment = 1 : i64} : !llvm.ptr -> i8
    %182 = arith.extui %181 : i8 to i32
    %c10_i32_56 = arith.constant 10 : i32
    %183 = arith.cmpi eq, %182, %c10_i32_56 : i32
    %184 = arith.extui %183 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %185 = arith.cmpi ne, %184, %c0_i32_57 : i32
    cf.cond_br %185, ^bb12, ^bb32
  ^bb32:  // pred: ^bb31
    %186 = llvm.load %12 : !llvm.ptr -> i32
    %187 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_58 = arith.constant 1 : i32
    %188 = arith.addi %187, %c1_i32_58 : i32
    llvm.store %188, %0 : i32, !llvm.ptr
    %189 = arith.cmpi eq, %186, %188 : i32
    %190 = arith.extui %189 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %191 = arith.cmpi eq, %190, %c0_i32_59 : i32
    %192 = arith.extui %191 : i1 to i32
    %c0_i32_60 = arith.constant 0 : i32
    %193 = arith.cmpi ne, %192, %c0_i32_60 : i32
    cf.cond_br %193, ^bb31, ^bb33
  ^bb33:  // pred: ^bb32
    cf.br ^bb30
  ^bb34:  // pred: ^bb13
    cf.br ^bb37
  ^bb35:  // pred: ^bb13
    %194 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %194, %9 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb36:  // pred: ^bb40
    %195 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %195, %9 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb37:  // 2 preds: ^bb34, ^bb38
    %196 = llvm.load %11 : !llvm.ptr -> i32
    %197 = llvm.load %14 : !llvm.ptr -> i32
    %198 = arith.addi %196, %197 : i32
    %c0_i64_61 = arith.constant 0 : i64
    %199 = arith.extui %198 : i32 to i64
    %200 = arith.addi %199, %c0_i64_61 : i64
    %201 = llvm.getelementptr %18[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %202 = llvm.load volatile %201 {alignment = 1 : i64} : !llvm.ptr -> i8
    %203 = arith.extui %202 : i8 to i32
    %c10_i32_62 = arith.constant 10 : i32
    %204 = arith.cmpi eq, %203, %c10_i32_62 : i32
    %205 = arith.extui %204 : i1 to i32
    %c0_i32_63 = arith.constant 0 : i32
    %206 = arith.cmpi eq, %205, %c0_i32_63 : i32
    %207 = arith.extui %206 : i1 to i32
    %c0_i32_64 = arith.constant 0 : i32
    %208 = arith.cmpi ne, %207, %c0_i32_64 : i32
    cf.cond_br %208, ^bb38, ^bb39
  ^bb38:  // pred: ^bb37
    %209 = llvm.load %12 : !llvm.ptr -> i32
    %210 = llvm.load %14 : !llvm.ptr -> i32
    %c1_i32_65 = arith.constant 1 : i32
    %211 = arith.addi %210, %c1_i32_65 : i32
    llvm.store %211, %14 : i32, !llvm.ptr
    %212 = arith.cmpi eq, %209, %211 : i32
    %213 = arith.extui %212 : i1 to i32
    %c0_i32_66 = arith.constant 0 : i32
    %214 = arith.cmpi eq, %213, %c0_i32_66 : i32
    %215 = arith.extui %214 : i1 to i32
    %c0_i32_67 = arith.constant 0 : i32
    %216 = arith.cmpi ne, %215, %c0_i32_67 : i32
    cf.cond_br %216, ^bb37, ^bb40
  ^bb39:  // pred: ^bb37
    %217 = llvm.load %14 : !llvm.ptr -> i32
    llvm.store %217, %0 : i32, !llvm.ptr
    cf.br ^bb12
  ^bb40:  // pred: ^bb38
    cf.br ^bb36
  ^bb41:  // 2 preds: ^bb12, ^bb42
    %218 = llvm.load %9 : !llvm.ptr -> i32
    %219 = llvm.load %2 : !llvm.ptr -> i32
    %220 = arith.cmpi ule, %218, %219 : i32
    %221 = arith.extui %220 : i1 to i32
    %c0_i32_68 = arith.constant 0 : i32
    %222 = arith.cmpi ne, %221, %c0_i32_68 : i32
    cf.cond_br %222, ^bb11, ^bb44
  ^bb42:  // pred: ^bb12
    %223 = llvm.load %11 : !llvm.ptr -> i32
    %224 = llvm.load %0 : !llvm.ptr -> i32
    %225 = arith.addi %223, %224 : i32
    %c0_i64_69 = arith.constant 0 : i64
    %226 = arith.extui %225 : i32 to i64
    %227 = arith.addi %226, %c0_i64_69 : i64
    %228 = llvm.getelementptr %18[%227] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %229 = llvm.load volatile %228 {alignment = 1 : i64} : !llvm.ptr -> i8
    %230 = arith.extui %229 : i8 to i32
    %c10_i32_70 = arith.constant 10 : i32
    %231 = arith.cmpi eq, %230, %c10_i32_70 : i32
    %232 = arith.extui %231 : i1 to i32
    %c0_i32_71 = arith.constant 0 : i32
    %233 = arith.cmpi eq, %232, %c0_i32_71 : i32
    %234 = arith.extui %233 : i1 to i32
    %c0_i32_72 = arith.constant 0 : i32
    %235 = arith.cmpi ne, %234, %c0_i32_72 : i32
    cf.cond_br %235, ^bb41, ^bb43
  ^bb43:  // pred: ^bb42
    %236 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %236, %11 : i32, !llvm.ptr
    %237 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %237, %0 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb44:  // pred: ^bb41
    cf.br ^bb10
  ^bb45:  // pred: ^bb8
    cf.br ^bb7
  ^bb46:  // 2 preds: ^bb55, ^bb68
    cf.br ^bb4
  ^bb47:  // 2 preds: ^bb7, ^bb57
    %238 = llvm.load %0 : !llvm.ptr -> i32
    %239 = llvm.load %8 : !llvm.ptr -> i32
    %240 = arith.subi %238, %239 : i32
    llvm.store %240, %13 : i32, !llvm.ptr
    %c0_i32_73 = arith.constant 0 : i32
    llvm.store %c0_i32_73, %14 : i32, !llvm.ptr
    %241 = llvm.load %0 : !llvm.ptr -> i32
    %242 = llvm.load %8 : !llvm.ptr -> i32
    %243 = arith.cmpi eq, %241, %242 : i32
    %244 = arith.extui %243 : i1 to i32
    %c0_i32_74 = arith.constant 0 : i32
    %245 = arith.cmpi ne, %244, %c0_i32_74 : i32
    cf.cond_br %245, ^bb58, ^bb59
  ^bb48:  // pred: ^bb7
    %246 = llvm.load %5 : !llvm.ptr -> i32
    %c1050844_i32 = arith.constant 1050844 : i32
    %c4_i32_75 = arith.constant 4 : i32
    %247 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %248 = arith.extui %247 : i32 to i64
    %249 = arith.addi %248, %c12_i64 : i64
    %250 = llvm.getelementptr %18[%249] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %251 = llvm.load volatile %250 {alignment = 1 : i64} : !llvm.ptr -> i32
    %252 = arith.cmpi ult, %251, %25 : i32
    cf.cond_br %252, ^bb49, ^bb50
  ^bb49:  // 2 preds: ^bb48, ^bb50
    %253 = llvm.getelementptr inbounds %23[%251] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %254 = llvm.load %253 : !llvm.ptr -> !llvm.ptr
    %255 = llvm.ptrtoint %254 : !llvm.ptr to i64
    %c0_i64_76 = arith.constant 0 : i64
    %256 = arith.cmpi eq, %255, %c0_i64_76 : i64
    cf.cond_br %256, ^bb52, ^bb51
  ^bb50:  // pred: ^bb48
    %c3_i32_77 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_77) : (i32) -> ()
    cf.br ^bb49
  ^bb51:  // 2 preds: ^bb49, ^bb52
    %257 = llvm.getelementptr %254[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %258 = llvm.getelementptr %254[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %259 = llvm.getelementptr %254[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %260 = llvm.load %257 : !llvm.ptr -> !llvm.ptr
    %261 = llvm.load %259 : !llvm.ptr -> !llvm.ptr
    %262 = llvm.ptrtoint %260 : !llvm.ptr to i64
    %c0_i64_78 = arith.constant 0 : i64
    %263 = arith.cmpi eq, %262, %c0_i64_78 : i64
    cf.cond_br %263, ^bb54, ^bb53
  ^bb52:  // pred: ^bb49
    %c4_i32_79 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_79) : (i32) -> ()
    cf.br ^bb51
  ^bb53:  // 2 preds: ^bb51, ^bb54
    %264 = llvm.load %258 : !llvm.ptr -> i32
    %265 = arith.cmpi ne, %20, %264 : i32
    cf.cond_br %265, ^bb56, ^bb55
  ^bb54:  // pred: ^bb51
    %c3_i32_80 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_80) : (i32) -> ()
    cf.br ^bb53
  ^bb55:  // 2 preds: ^bb53, ^bb56
    %266 = llvm.call %260(%261, %246, %c1050844_i32, %c4_i32_75) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_81 = arith.constant 0 : i32
    %267 = arith.cmpi ne, %266, %c0_i32_81 : i32
    cf.cond_br %267, ^bb46, ^bb57
  ^bb56:  // pred: ^bb53
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // pred: ^bb55
    cf.br ^bb47
  ^bb58:  // 2 preds: ^bb47, ^bb59
    %268 = llvm.load %1 : !llvm.ptr -> i32
    %269 = llvm.load %8 : !llvm.ptr -> i32
    %270 = arith.addi %268, %269 : i32
    llvm.store %270, %0 : i32, !llvm.ptr
    %271 = llvm.load %6 : !llvm.ptr -> i32
    %272 = llvm.load %14 : !llvm.ptr -> i32
    %c0_i64_82 = arith.constant 0 : i64
    %273 = arith.extui %271 : i32 to i64
    %274 = arith.addi %273, %c0_i64_82 : i64
    %275 = llvm.getelementptr %18[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %276 = arith.trunci %272 : i32 to i8
    llvm.store volatile %276, %275 {alignment = 1 : i64} : i8, !llvm.ptr
    %277 = llvm.load %11 : !llvm.ptr -> i32
    llvm.store %277, %8 : i32, !llvm.ptr
    %278 = llvm.load %5 : !llvm.ptr -> i32
    %279 = llvm.load %0 : !llvm.ptr -> i32
    %280 = llvm.load %13 : !llvm.ptr -> i32
    %281 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64_83 = arith.constant 12 : i64
    %282 = arith.extui %281 : i32 to i64
    %283 = arith.addi %282, %c12_i64_83 : i64
    %284 = llvm.getelementptr %18[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %285 = llvm.load volatile %284 {alignment = 1 : i64} : !llvm.ptr -> i32
    %286 = arith.cmpi ult, %285, %28 : i32
    cf.cond_br %286, ^bb60, ^bb61
  ^bb59:  // pred: ^bb47
    %287 = llvm.load %3 : !llvm.ptr -> i32
    %288 = llvm.load %0 : !llvm.ptr -> i32
    %289 = arith.addi %287, %288 : i32
    %c0_i64_84 = arith.constant 0 : i64
    %290 = arith.extui %289 : i32 to i64
    %291 = arith.addi %290, %c0_i64_84 : i64
    %292 = llvm.getelementptr %18[%291] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %293 = llvm.load volatile %292 {alignment = 1 : i64} : !llvm.ptr -> i8
    %294 = arith.extui %293 : i8 to i32
    %c10_i32_85 = arith.constant 10 : i32
    %295 = arith.cmpi eq, %294, %c10_i32_85 : i32
    %296 = arith.extui %295 : i1 to i32
    llvm.store %296, %14 : i32, !llvm.ptr
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %297 = llvm.getelementptr inbounds %26[%285] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %298 = llvm.load %297 : !llvm.ptr -> !llvm.ptr
    %299 = llvm.ptrtoint %298 : !llvm.ptr to i64
    %c0_i64_86 = arith.constant 0 : i64
    %300 = arith.cmpi eq, %299, %c0_i64_86 : i64
    cf.cond_br %300, ^bb63, ^bb62
  ^bb61:  // pred: ^bb58
    %c3_i32_87 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_87) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %301 = llvm.getelementptr %298[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %302 = llvm.getelementptr %298[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %303 = llvm.getelementptr %298[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %304 = llvm.load %301 : !llvm.ptr -> !llvm.ptr
    %305 = llvm.load %303 : !llvm.ptr -> !llvm.ptr
    %306 = llvm.ptrtoint %304 : !llvm.ptr to i64
    %c0_i64_88 = arith.constant 0 : i64
    %307 = arith.cmpi eq, %306, %c0_i64_88 : i64
    cf.cond_br %307, ^bb65, ^bb64
  ^bb63:  // pred: ^bb60
    %c4_i32_89 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_89) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // 2 preds: ^bb62, ^bb65
    %308 = llvm.load %302 : !llvm.ptr -> i32
    %309 = arith.cmpi ne, %20, %308 : i32
    cf.cond_br %309, ^bb67, ^bb66
  ^bb65:  // pred: ^bb62
    %c3_i32_90 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_90) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %310 = llvm.call %304(%305, %278, %279, %280) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_91 = arith.constant 0 : i32
    %311 = arith.cmpi eq, %310, %c0_i32_91 : i32
    %312 = arith.extui %311 : i1 to i32
    %c0_i32_92 = arith.constant 0 : i32
    %313 = arith.cmpi ne, %312, %c0_i32_92 : i32
    cf.cond_br %313, ^bb5, ^bb68
  ^bb67:  // pred: ^bb64
    %c5_i32_93 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_93) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // pred: ^bb66
    cf.br ^bb46
  }
  func.func @f162(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %10 : !llvm.ptr -> i64
    %13 = arith.trunci %12 : i64 to i32
    %14 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> i32
    %16 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %10 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c4_i64 : i64
    %22 = llvm.getelementptr %6[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %23, %2 : i32, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64 : i64
    %27 = llvm.getelementptr %6[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %28, %3 : i32, !llvm.ptr
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c8_i64 : i64
    %32 = llvm.getelementptr %6[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %33, %0 : i32, !llvm.ptr
    %c0_i64_3 = arith.constant 0 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c0_i64_3 : i64
    %36 = llvm.getelementptr %6[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i8
    %38 = arith.extui %37 : i8 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %39 = arith.cmpi eq, %38, %c0_i32_4 : i32
    %40 = arith.extui %39 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %41 = arith.cmpi ne, %40, %c0_i32_5 : i32
    cf.cond_br %41, ^bb3, ^bb4
  ^bb2(%42: i32):  // 2 preds: ^bb13, ^bb20
    return %42 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb11
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %45 = arith.cmpi eq, %44, %c10_i32 : i32
    %46 = arith.extui %45 : i1 to i32
    %c0_i64_6 = arith.constant 0 : i64
    %47 = arith.extui %43 : i32 to i64
    %48 = arith.addi %47, %c0_i64_6 : i64
    %49 = llvm.getelementptr %6[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = arith.trunci %46 : i32 to i8
    llvm.store volatile %50, %49 {alignment = 1 : i64} : i8, !llvm.ptr
    %51 = llvm.load %3 : !llvm.ptr -> i32
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %53 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c16_i64 : i64
    %56 = llvm.getelementptr %6[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i32
    %58 = arith.cmpi ult, %57, %18 : i32
    cf.cond_br %58, ^bb14, ^bb15
  ^bb4:  // pred: ^bb1
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c1050844_i32 = arith.constant 1050844 : i32
    %c4_i32 = arith.constant 4 : i32
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c12_i64 : i64
    %63 = llvm.getelementptr %6[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i32
    %65 = arith.cmpi ult, %64, %13 : i32
    cf.cond_br %65, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %66 = llvm.getelementptr inbounds %11[%64] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.ptrtoint %67 : !llvm.ptr to i64
    %c0_i64_7 = arith.constant 0 : i64
    %69 = arith.cmpi eq, %68, %c0_i64_7 : i64
    cf.cond_br %69, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %70 = llvm.getelementptr %67[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %71 = llvm.getelementptr %67[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %72 = llvm.getelementptr %67[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %73 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    %74 = llvm.load %72 : !llvm.ptr -> !llvm.ptr
    %75 = llvm.ptrtoint %73 : !llvm.ptr to i64
    %c0_i64_8 = arith.constant 0 : i64
    %76 = arith.cmpi eq, %75, %c0_i64_8 : i64
    cf.cond_br %76, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32_9 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_9) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %77 = llvm.load %71 : !llvm.ptr -> i32
    %78 = arith.cmpi ne, %8, %77 : i32
    cf.cond_br %78, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_10 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_10) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %79 = llvm.call %73(%74, %59, %c1050844_i32, %c4_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %80 = arith.cmpi eq, %79, %c0_i32_11 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_12 : i32
    cf.cond_br %82, ^bb3, ^bb13
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // pred: ^bb11
    %c1_i32_13 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_13 : i32)
  ^bb14:  // 2 preds: ^bb3, ^bb15
    %83 = llvm.getelementptr inbounds %16[%57] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %84 = llvm.load %83 : !llvm.ptr -> !llvm.ptr
    %85 = llvm.ptrtoint %84 : !llvm.ptr to i64
    %c0_i64_14 = arith.constant 0 : i64
    %86 = arith.cmpi eq, %85, %c0_i64_14 : i64
    cf.cond_br %86, ^bb17, ^bb16
  ^bb15:  // pred: ^bb3
    %c3_i32_15 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_15) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %87 = llvm.getelementptr %84[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %88 = llvm.getelementptr %84[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %89 = llvm.getelementptr %84[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %90 = llvm.load %87 : !llvm.ptr -> !llvm.ptr
    %91 = llvm.load %89 : !llvm.ptr -> !llvm.ptr
    %92 = llvm.ptrtoint %90 : !llvm.ptr to i64
    %c0_i64_16 = arith.constant 0 : i64
    %93 = arith.cmpi eq, %92, %c0_i64_16 : i64
    cf.cond_br %93, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_17 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_17) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %94 = llvm.load %88 : !llvm.ptr -> i32
    %95 = arith.cmpi ne, %15, %94 : i32
    cf.cond_br %95, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_18 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_18) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %96 = llvm.call %90(%91, %51, %52) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%96 : i32)
  ^bb21:  // pred: ^bb18
    %c5_i32_19 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_19) : (i32) -> ()
    cf.br ^bb20
  }
  func.func @f163(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> i32
    %16 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> i64
    %20 = arith.trunci %19 : i64 to i32
    %21 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %21 : !llvm.ptr -> i32
    %23 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %17 : !llvm.ptr -> i64
    %25 = arith.trunci %24 : i64 to i32
    %26 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %17 : !llvm.ptr -> i64
    %28 = arith.trunci %27 : i64 to i32
    %29 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.load %17 : !llvm.ptr -> i64
    %31 = arith.trunci %30 : i64 to i32
    %32 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.load %17 : !llvm.ptr -> i64
    %34 = arith.trunci %33 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %35 = llvm.load %10 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %36 = arith.subi %35, %c64_i32 : i32
    llvm.store %36, %3 : i32, !llvm.ptr
    llvm.store %36, %10 : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_8 : i64
    %40 = llvm.getelementptr %13[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %41, %4 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    llvm.store %c1_i32_9, %5 : i32, !llvm.ptr
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c8_i64 : i64
    %45 = llvm.getelementptr %13[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i8
    %47 = arith.extui %46 : i8 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_10 : i32
    cf.cond_br %48, ^bb3, ^bb4
  ^bb2(%49: i32):  // pred: ^bb3
    return %49 : i32
  ^bb3:  // 6 preds: ^bb1, ^bb13, ^bb22, ^bb32, ^bb41, ^bb50
    %50 = llvm.load %0 : !llvm.ptr -> i32
    %51 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i64_11 = arith.constant 8 : i64
    %52 = arith.extui %50 : i32 to i64
    %53 = arith.addi %52, %c8_i64_11 : i64
    %54 = llvm.getelementptr %13[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = arith.trunci %51 : i32 to i8
    llvm.store volatile %55, %54 {alignment = 1 : i64} : i8, !llvm.ptr
    %56 = llvm.load %0 : !llvm.ptr -> i32
    %57 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_12 = arith.constant 1 : i32
    %58 = arith.addi %57, %c1_i32_12 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %59 = arith.extui %56 : i32 to i64
    %60 = arith.addi %59, %c0_i64_13 : i64
    %61 = llvm.getelementptr %13[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %62 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_14 = arith.constant 64 : i32
    %63 = arith.addi %62, %c64_i32_14 : i32
    llvm.store %63, %10 : i32, !llvm.ptr
    %64 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%64 : i32)
  ^bb4:  // pred: ^bb1
    %65 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c4_i64 : i64
    %68 = llvm.getelementptr %13[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %69, %6 : i32, !llvm.ptr
    %c28_i64 = arith.constant 28 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c28_i64 : i64
    %72 = llvm.getelementptr %13[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %73, %7 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %74 = arith.andi %73, %c4_i32 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_15 : i32
    cf.cond_br %75, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %76 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %77 = arith.cmpi ne, %76, %c0_i32_16 : i32
    cf.cond_br %77, ^bb24, ^bb25
  ^bb6:  // pred: ^bb4
    %c1_i32_17 = arith.constant 1 : i32
    llvm.store %c1_i32_17, %5 : i32, !llvm.ptr
    %78 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c20_i64 : i64
    %81 = llvm.getelementptr %13[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050851_i32 = arith.constant 1050851 : i32
    %c1050861_i32 = arith.constant 1050861 : i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_18 : i32
    %85 = arith.select %84, %c1050851_i32, %c1050861_i32 : i32
    %c2_i32 = arith.constant 2 : i32
    %c1_i32_19 = arith.constant 1 : i32
    %86 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %87 = arith.cmpi ne, %86, %c0_i32_20 : i32
    %88 = arith.select %87, %c2_i32, %c1_i32_19 : i32
    %89 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c24_i64 : i64
    %92 = llvm.getelementptr %13[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c12_i64 : i64
    %96 = llvm.getelementptr %13[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i32
    %98 = arith.cmpi ult, %97, %20 : i32
    cf.cond_br %98, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %99 = llvm.getelementptr inbounds %18[%97] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %100 = llvm.load %99 : !llvm.ptr -> !llvm.ptr
    %101 = llvm.ptrtoint %100 : !llvm.ptr to i64
    %c0_i64_21 = arith.constant 0 : i64
    %102 = arith.cmpi eq, %101, %c0_i64_21 : i64
    cf.cond_br %102, ^bb10, ^bb9
  ^bb8:  // pred: ^bb6
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %103 = llvm.getelementptr %100[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %104 = llvm.getelementptr %100[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %105 = llvm.getelementptr %100[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %106 = llvm.load %103 : !llvm.ptr -> !llvm.ptr
    %107 = llvm.load %105 : !llvm.ptr -> !llvm.ptr
    %108 = llvm.ptrtoint %106 : !llvm.ptr to i64
    %c0_i64_22 = arith.constant 0 : i64
    %109 = arith.cmpi eq, %108, %c0_i64_22 : i64
    cf.cond_br %109, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c4_i32_23 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_23) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %110 = llvm.load %104 : !llvm.ptr -> i32
    %111 = arith.cmpi ne, %15, %110 : i32
    cf.cond_br %111, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_24 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_24) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %112 = llvm.call %106(%107, %82, %85, %88) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_25 = arith.constant 0 : i32
    %113 = arith.cmpi ne, %112, %c0_i32_25 : i32
    cf.cond_br %113, ^bb3, ^bb15
  ^bb14:  // pred: ^bb11
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb13
    %114 = llvm.load %1 : !llvm.ptr -> i32
    %115 = llvm.load %6 : !llvm.ptr -> i32
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_26 = arith.constant 12 : i64
    %117 = arith.extui %116 : i32 to i64
    %118 = arith.addi %117, %c12_i64_26 : i64
    %119 = llvm.getelementptr %13[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %120 = llvm.load volatile %119 {alignment = 1 : i64} : !llvm.ptr -> i32
    %121 = arith.cmpi ult, %120, %25 : i32
    cf.cond_br %121, ^bb16, ^bb17
  ^bb16:  // 2 preds: ^bb15, ^bb17
    %122 = llvm.getelementptr inbounds %23[%120] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %123 = llvm.load %122 : !llvm.ptr -> !llvm.ptr
    %124 = llvm.ptrtoint %123 : !llvm.ptr to i64
    %c0_i64_27 = arith.constant 0 : i64
    %125 = arith.cmpi eq, %124, %c0_i64_27 : i64
    cf.cond_br %125, ^bb19, ^bb18
  ^bb17:  // pred: ^bb15
    %c3_i32_28 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_28) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %126 = llvm.getelementptr %123[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %127 = llvm.getelementptr %123[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %128 = llvm.getelementptr %123[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %129 = llvm.load %126 : !llvm.ptr -> !llvm.ptr
    %130 = llvm.load %128 : !llvm.ptr -> !llvm.ptr
    %131 = llvm.ptrtoint %129 : !llvm.ptr to i64
    %c0_i64_29 = arith.constant 0 : i64
    %132 = arith.cmpi eq, %131, %c0_i64_29 : i64
    cf.cond_br %132, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c4_i32_30 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_30) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %133 = llvm.load %127 : !llvm.ptr -> i32
    %134 = arith.cmpi ne, %22, %133 : i32
    cf.cond_br %134, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c3_i32_31 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_31) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %135 = llvm.call %129(%130, %114, %115) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    llvm.store %135, %5 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb23:  // pred: ^bb20
    %c5_i32_32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_32) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb5, ^bb34
    %c1_i32_33 = arith.constant 1 : i32
    llvm.store %c1_i32_33, %5 : i32, !llvm.ptr
    %136 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_34 = arith.constant 1 : i32
    %c27_i64 = arith.constant 27 : i64
    %137 = arith.extui %136 : i32 to i64
    %138 = arith.addi %137, %c27_i64 : i64
    %139 = llvm.getelementptr %13[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = arith.trunci %c1_i32_34 : i32 to i8
    llvm.store volatile %140, %139 {alignment = 1 : i64} : i8, !llvm.ptr
    %141 = llvm.load %3 : !llvm.ptr -> i32
    %142 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64_35 = arith.constant 20 : i64
    %143 = arith.extui %142 : i32 to i64
    %144 = arith.addi %143, %c20_i64_35 : i64
    %145 = llvm.getelementptr %13[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %146 = llvm.load volatile %145 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c12_i64_36 = arith.constant 12 : i64
    %147 = arith.extui %141 : i32 to i64
    %148 = arith.addi %147, %c12_i64_36 : i64
    %149 = llvm.getelementptr %13[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %146, %149 {alignment = 1 : i64} : i64, !llvm.ptr
    %150 = llvm.load %3 : !llvm.ptr -> i32
    %c1050820_i32 = arith.constant 1050820 : i32
    %c52_i64 = arith.constant 52 : i64
    %151 = arith.extui %150 : i32 to i64
    %152 = arith.addi %151, %c52_i64 : i64
    %153 = llvm.getelementptr %13[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050820_i32, %153 {alignment = 1 : i64} : i32, !llvm.ptr
    %154 = llvm.load %3 : !llvm.ptr -> i32
    %155 = llvm.load %3 : !llvm.ptr -> i32
    %c27_i32 = arith.constant 27 : i32
    %156 = arith.addi %155, %c27_i32 : i32
    %c20_i64_37 = arith.constant 20 : i64
    %157 = arith.extui %154 : i32 to i64
    %158 = arith.addi %157, %c20_i64_37 : i64
    %159 = llvm.getelementptr %13[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %156, %159 {alignment = 1 : i64} : i32, !llvm.ptr
    %160 = llvm.load %3 : !llvm.ptr -> i32
    %161 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i64_38 = arith.constant 8 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c8_i64_38 : i64
    %164 = llvm.getelementptr %13[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c36_i64 = arith.constant 36 : i64
    %166 = arith.extui %160 : i32 to i64
    %167 = arith.addi %166, %c36_i64 : i64
    %168 = llvm.getelementptr %13[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %165, %168 {alignment = 1 : i64} : i64, !llvm.ptr
    %169 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_39 = arith.constant 0 : i64
    %170 = arith.extui %169 : i32 to i64
    %171 = arith.addi %170, %c0_i64_39 : i64
    %172 = llvm.getelementptr %13[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %173 = llvm.load volatile %172 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %173, %8 : i64, !llvm.ptr
    %174 = llvm.load %3 : !llvm.ptr -> i32
    %175 = llvm.load %7 : !llvm.ptr -> i32
    %c56_i64 = arith.constant 56 : i64
    %176 = arith.extui %174 : i32 to i64
    %177 = arith.addi %176, %c56_i64 : i64
    %178 = llvm.getelementptr %13[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %175, %178 {alignment = 1 : i64} : i32, !llvm.ptr
    %179 = llvm.load %3 : !llvm.ptr -> i32
    %180 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %181 = arith.extui %180 : i32 to i64
    %182 = arith.addi %181, %c16_i64 : i64
    %183 = llvm.getelementptr %13[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %184 = llvm.load volatile %183 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %185 = arith.extui %179 : i32 to i64
    %186 = arith.addi %185, %c44_i64 : i64
    %187 = llvm.getelementptr %13[%186] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %184, %187 {alignment = 1 : i64} : i32, !llvm.ptr
    %188 = llvm.load %3 : !llvm.ptr -> i32
    %189 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %190 = arith.extui %189 : i32 to i64
    %191 = arith.addi %190, %c32_i64 : i64
    %192 = llvm.getelementptr %13[%191] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %193 = llvm.load volatile %192 {alignment = 1 : i64} : !llvm.ptr -> i8
    %194 = arith.extui %193 : i8 to i32
    %c60_i64 = arith.constant 60 : i64
    %195 = arith.extui %188 : i32 to i64
    %196 = arith.addi %195, %c60_i64 : i64
    %197 = llvm.getelementptr %13[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = arith.trunci %194 : i32 to i8
    llvm.store volatile %198, %197 {alignment = 1 : i64} : i8, !llvm.ptr
    %199 = llvm.load %3 : !llvm.ptr -> i32
    %200 = llvm.load %8 : !llvm.ptr -> i64
    %c28_i64_40 = arith.constant 28 : i64
    %201 = arith.extui %199 : i32 to i64
    %202 = arith.addi %201, %c28_i64_40 : i64
    %203 = llvm.getelementptr %13[%202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %200, %203 {alignment = 1 : i64} : i64, !llvm.ptr
    %204 = llvm.load %3 : !llvm.ptr -> i32
    %205 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %206 = arith.addi %205, %c12_i32 : i32
    %c48_i64 = arith.constant 48 : i64
    %207 = arith.extui %204 : i32 to i64
    %208 = arith.addi %207, %c48_i64 : i64
    %209 = llvm.getelementptr %13[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %206, %209 {alignment = 1 : i64} : i32, !llvm.ptr
    %210 = llvm.load %1 : !llvm.ptr -> i32
    %211 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %212 = arith.addi %211, %c28_i32 : i32
    %213 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_41 = arith.constant 12 : i64
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.addi %214, %c12_i64_41 : i64
    %216 = llvm.getelementptr %13[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i32
    %218 = arith.cmpi ult, %217, %31 : i32
    cf.cond_br %218, ^bb35, ^bb36
  ^bb25:  // pred: ^bb5
    %c1_i32_42 = arith.constant 1 : i32
    llvm.store %c1_i32_42, %5 : i32, !llvm.ptr
    %219 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64_43 = arith.constant 20 : i64
    %220 = arith.extui %219 : i32 to i64
    %221 = arith.addi %220, %c20_i64_43 : i64
    %222 = llvm.getelementptr %13[%221] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %223 = llvm.load volatile %222 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050862_i32 = arith.constant 1050862 : i32
    %c2_i32_44 = arith.constant 2 : i32
    %224 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i64_45 = arith.constant 24 : i64
    %225 = arith.extui %224 : i32 to i64
    %226 = arith.addi %225, %c24_i64_45 : i64
    %227 = llvm.getelementptr %13[%226] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %228 = llvm.load volatile %227 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_46 = arith.constant 12 : i64
    %229 = arith.extui %228 : i32 to i64
    %230 = arith.addi %229, %c12_i64_46 : i64
    %231 = llvm.getelementptr %13[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %232 = llvm.load volatile %231 {alignment = 1 : i64} : !llvm.ptr -> i32
    %233 = arith.cmpi ult, %232, %28 : i32
    cf.cond_br %233, ^bb26, ^bb27
  ^bb26:  // 2 preds: ^bb25, ^bb27
    %234 = llvm.getelementptr inbounds %26[%232] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %235 = llvm.load %234 : !llvm.ptr -> !llvm.ptr
    %236 = llvm.ptrtoint %235 : !llvm.ptr to i64
    %c0_i64_47 = arith.constant 0 : i64
    %237 = arith.cmpi eq, %236, %c0_i64_47 : i64
    cf.cond_br %237, ^bb29, ^bb28
  ^bb27:  // pred: ^bb25
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %238 = llvm.getelementptr %235[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %239 = llvm.getelementptr %235[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %240 = llvm.getelementptr %235[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %241 = llvm.load %238 : !llvm.ptr -> !llvm.ptr
    %242 = llvm.load %240 : !llvm.ptr -> !llvm.ptr
    %243 = llvm.ptrtoint %241 : !llvm.ptr to i64
    %c0_i64_49 = arith.constant 0 : i64
    %244 = arith.cmpi eq, %243, %c0_i64_49 : i64
    cf.cond_br %244, ^bb31, ^bb30
  ^bb29:  // pred: ^bb26
    %c4_i32_50 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_50) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %245 = llvm.load %239 : !llvm.ptr -> i32
    %246 = arith.cmpi ne, %15, %245 : i32
    cf.cond_br %246, ^bb33, ^bb32
  ^bb31:  // pred: ^bb28
    %c3_i32_51 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_51) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %247 = llvm.call %241(%242, %223, %c1050862_i32, %c2_i32_44) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_52 = arith.constant 0 : i32
    %248 = arith.cmpi ne, %247, %c0_i32_52 : i32
    cf.cond_br %248, ^bb3, ^bb34
  ^bb33:  // pred: ^bb30
    %c5_i32_53 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_53) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // pred: ^bb32
    %249 = llvm.load %6 : !llvm.ptr -> i32
    %c28_i64_54 = arith.constant 28 : i64
    %250 = arith.extui %249 : i32 to i64
    %251 = arith.addi %250, %c28_i64_54 : i64
    %252 = llvm.getelementptr %13[%251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %253 = llvm.load volatile %252 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %253, %7 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb35:  // 2 preds: ^bb24, ^bb36
    %254 = llvm.getelementptr inbounds %29[%217] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %255 = llvm.load %254 : !llvm.ptr -> !llvm.ptr
    %256 = llvm.ptrtoint %255 : !llvm.ptr to i64
    %c0_i64_55 = arith.constant 0 : i64
    %257 = arith.cmpi eq, %256, %c0_i64_55 : i64
    cf.cond_br %257, ^bb38, ^bb37
  ^bb36:  // pred: ^bb24
    %c3_i32_56 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_56) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %258 = llvm.getelementptr %255[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %259 = llvm.getelementptr %255[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %260 = llvm.getelementptr %255[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %261 = llvm.load %258 : !llvm.ptr -> !llvm.ptr
    %262 = llvm.load %260 : !llvm.ptr -> !llvm.ptr
    %263 = llvm.ptrtoint %261 : !llvm.ptr to i64
    %c0_i64_57 = arith.constant 0 : i64
    %264 = arith.cmpi eq, %263, %c0_i64_57 : i64
    cf.cond_br %264, ^bb40, ^bb39
  ^bb38:  // pred: ^bb35
    %c4_i32_58 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_58) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %265 = llvm.load %259 : !llvm.ptr -> i32
    %266 = arith.cmpi ne, %22, %265 : i32
    cf.cond_br %266, ^bb42, ^bb41
  ^bb40:  // pred: ^bb37
    %c3_i32_59 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_59) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %267 = llvm.call %261(%262, %210, %212) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_60 = arith.constant 0 : i32
    %268 = arith.cmpi ne, %267, %c0_i32_60 : i32
    cf.cond_br %268, ^bb3, ^bb43
  ^bb42:  // pred: ^bb39
    %c5_i32_61 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_61) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // pred: ^bb41
    %269 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i64_62 = arith.constant 48 : i64
    %270 = arith.extui %269 : i32 to i64
    %271 = arith.addi %270, %c48_i64_62 : i64
    %272 = llvm.getelementptr %13[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = llvm.load volatile %272 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050856_i32 = arith.constant 1050856 : i32
    %c2_i32_63 = arith.constant 2 : i32
    %274 = llvm.load %3 : !llvm.ptr -> i32
    %c52_i64_64 = arith.constant 52 : i64
    %275 = arith.extui %274 : i32 to i64
    %276 = arith.addi %275, %c52_i64_64 : i64
    %277 = llvm.getelementptr %13[%276] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %278 = llvm.load volatile %277 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_65 = arith.constant 12 : i64
    %279 = arith.extui %278 : i32 to i64
    %280 = arith.addi %279, %c12_i64_65 : i64
    %281 = llvm.getelementptr %13[%280] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %282 = llvm.load volatile %281 {alignment = 1 : i64} : !llvm.ptr -> i32
    %283 = arith.cmpi ult, %282, %34 : i32
    cf.cond_br %283, ^bb44, ^bb45
  ^bb44:  // 2 preds: ^bb43, ^bb45
    %284 = llvm.getelementptr inbounds %32[%282] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %285 = llvm.load %284 : !llvm.ptr -> !llvm.ptr
    %286 = llvm.ptrtoint %285 : !llvm.ptr to i64
    %c0_i64_66 = arith.constant 0 : i64
    %287 = arith.cmpi eq, %286, %c0_i64_66 : i64
    cf.cond_br %287, ^bb47, ^bb46
  ^bb45:  // pred: ^bb43
    %c3_i32_67 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_67) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %288 = llvm.getelementptr %285[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %289 = llvm.getelementptr %285[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %290 = llvm.getelementptr %285[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %291 = llvm.load %288 : !llvm.ptr -> !llvm.ptr
    %292 = llvm.load %290 : !llvm.ptr -> !llvm.ptr
    %293 = llvm.ptrtoint %291 : !llvm.ptr to i64
    %c0_i64_68 = arith.constant 0 : i64
    %294 = arith.cmpi eq, %293, %c0_i64_68 : i64
    cf.cond_br %294, ^bb49, ^bb48
  ^bb47:  // pred: ^bb44
    %c4_i32_69 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_69) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %295 = llvm.load %289 : !llvm.ptr -> i32
    %296 = arith.cmpi ne, %15, %295 : i32
    cf.cond_br %296, ^bb51, ^bb50
  ^bb49:  // pred: ^bb46
    %c3_i32_70 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_70) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %297 = llvm.call %291(%292, %273, %c1050856_i32, %c2_i32_63) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %297, %5 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb51:  // pred: ^bb48
    %c5_i32_71 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_71) : (i32) -> ()
    cf.br ^bb50
  }
  func.func @f164(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> i32
    %16 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %17 : !llvm.ptr -> i64
    %20 = arith.trunci %19 : i64 to i32
    %21 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %17 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    %24 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.load %24 : !llvm.ptr -> i32
    %26 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %17 : !llvm.ptr -> i64
    %28 = arith.trunci %27 : i64 to i32
    %29 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.load %17 : !llvm.ptr -> i64
    %31 = arith.trunci %30 : i64 to i32
    %32 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.load %17 : !llvm.ptr -> i64
    %34 = arith.trunci %33 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %35 = llvm.load %10 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %36 = arith.subi %35, %c64_i32 : i32
    llvm.store %36, %3 : i32, !llvm.ptr
    llvm.store %36, %10 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    llvm.store %c1_i32_8, %4 : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c4_i64 : i64
    %40 = llvm.getelementptr %13[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i8
    %42 = arith.extui %41 : i8 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_9 : i32
    cf.cond_br %43, ^bb3, ^bb4
  ^bb2(%44: i32):  // pred: ^bb3
    return %44 : i32
  ^bb3:  // 6 preds: ^bb1, ^bb17, ^bb26, ^bb35, ^bb44, ^bb52
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_10 = arith.constant 1 : i32
    %c5_i64 = arith.constant 5 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c5_i64 : i64
    %48 = llvm.getelementptr %13[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = arith.trunci %c1_i32_10 : i32 to i8
    llvm.store volatile %49, %48 {alignment = 1 : i64} : i8, !llvm.ptr
    %50 = llvm.load %0 : !llvm.ptr -> i32
    %51 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_11 = arith.constant 4 : i64
    %52 = arith.extui %50 : i32 to i64
    %53 = arith.addi %52, %c4_i64_11 : i64
    %54 = llvm.getelementptr %13[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = arith.trunci %51 : i32 to i8
    llvm.store volatile %55, %54 {alignment = 1 : i64} : i8, !llvm.ptr
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_12 = arith.constant 64 : i32
    %57 = arith.addi %56, %c64_i32_12 : i32
    llvm.store %57, %10 : i32, !llvm.ptr
    %58 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%58 : i32)
  ^bb4:  // pred: ^bb1
    %59 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i64_13 = arith.constant 5 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c5_i64_13 : i64
    %62 = llvm.getelementptr %13[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i8
    %64 = arith.extui %63 : i8 to i32
    llvm.store %64, %5 : i32, !llvm.ptr
    %65 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c0_i64_14 : i64
    %68 = llvm.getelementptr %13[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %69, %6 : i32, !llvm.ptr
    %c28_i64 = arith.constant 28 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c28_i64 : i64
    %72 = llvm.getelementptr %13[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %73, %7 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %74 = arith.andi %73, %c4_i32 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_15 : i32
    cf.cond_br %75, ^bb6, ^bb7
  ^bb5:  // 2 preds: ^bb7, ^bb15
    %76 = llvm.load %1 : !llvm.ptr -> i32
    %77 = llvm.load %6 : !llvm.ptr -> i32
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c12_i64 : i64
    %81 = llvm.getelementptr %13[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i32
    %83 = arith.cmpi ult, %82, %34 : i32
    cf.cond_br %83, ^bb46, ^bb47
  ^bb6:  // pred: ^bb4
    %c1_i32_16 = arith.constant 1 : i32
    llvm.store %c1_i32_16, %4 : i32, !llvm.ptr
    %84 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_17 = arith.constant 1 : i32
    %85 = arith.andi %84, %c1_i32_17 : i32
    %c0_i32_18 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %85, %c0_i32_18 : i32
    cf.cond_br %86, ^bb18, ^bb19
  ^bb7:  // pred: ^bb4
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %4 : i32, !llvm.ptr
    %87 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %88 = arith.andi %87, %c1_i32_20 : i32
    %c0_i32_21 = arith.constant 0 : i32
    %89 = arith.cmpi eq, %88, %c0_i32_21 : i32
    %90 = arith.extui %89 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %91 = arith.cmpi ne, %90, %c0_i32_22 : i32
    cf.cond_br %91, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %92 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c20_i64 : i64
    %95 = llvm.getelementptr %13[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050851_i32 = arith.constant 1050851 : i32
    %c2_i32 = arith.constant 2 : i32
    %97 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c24_i64 : i64
    %100 = llvm.getelementptr %13[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_23 = arith.constant 12 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c12_i64_23 : i64
    %104 = llvm.getelementptr %13[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i32
    %106 = arith.cmpi ult, %105, %20 : i32
    cf.cond_br %106, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb10
    %107 = llvm.getelementptr inbounds %18[%105] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %108 = llvm.load %107 : !llvm.ptr -> !llvm.ptr
    %109 = llvm.ptrtoint %108 : !llvm.ptr to i64
    %c0_i64_24 = arith.constant 0 : i64
    %110 = arith.cmpi eq, %109, %c0_i64_24 : i64
    cf.cond_br %110, ^bb12, ^bb11
  ^bb10:  // pred: ^bb8
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %111 = llvm.getelementptr %108[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %112 = llvm.getelementptr %108[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %113 = llvm.getelementptr %108[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %114 = llvm.load %111 : !llvm.ptr -> !llvm.ptr
    %115 = llvm.load %113 : !llvm.ptr -> !llvm.ptr
    %116 = llvm.ptrtoint %114 : !llvm.ptr to i64
    %c0_i64_25 = arith.constant 0 : i64
    %117 = arith.cmpi eq, %116, %c0_i64_25 : i64
    cf.cond_br %117, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c4_i32_26 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_26) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %118 = llvm.load %112 : !llvm.ptr -> i32
    %119 = arith.cmpi ne, %15, %118 : i32
    cf.cond_br %119, ^bb16, ^bb15
  ^bb14:  // pred: ^bb11
    %c3_i32_27 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_27) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %120 = llvm.call %114(%115, %96, %c1050851_i32, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_28 = arith.constant 0 : i32
    %121 = arith.cmpi eq, %120, %c0_i32_28 : i32
    %122 = arith.extui %121 : i1 to i32
    %c0_i32_29 = arith.constant 0 : i32
    %123 = arith.cmpi ne, %122, %c0_i32_29 : i32
    cf.cond_br %123, ^bb5, ^bb17
  ^bb16:  // pred: ^bb13
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    cf.br ^bb3
  ^bb18:  // 2 preds: ^bb6, ^bb28
    %c1_i32_30 = arith.constant 1 : i32
    llvm.store %c1_i32_30, %4 : i32, !llvm.ptr
    %124 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_31 = arith.constant 1 : i32
    %c27_i64 = arith.constant 27 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c27_i64 : i64
    %127 = llvm.getelementptr %13[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %128 = arith.trunci %c1_i32_31 : i32 to i8
    llvm.store volatile %128, %127 {alignment = 1 : i64} : i8, !llvm.ptr
    %129 = llvm.load %3 : !llvm.ptr -> i32
    %130 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64_32 = arith.constant 20 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c20_i64_32 : i64
    %133 = llvm.getelementptr %13[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c12_i64_33 = arith.constant 12 : i64
    %135 = arith.extui %129 : i32 to i64
    %136 = arith.addi %135, %c12_i64_33 : i64
    %137 = llvm.getelementptr %13[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %137 {alignment = 1 : i64} : i64, !llvm.ptr
    %138 = llvm.load %3 : !llvm.ptr -> i32
    %c1050820_i32 = arith.constant 1050820 : i32
    %c52_i64 = arith.constant 52 : i64
    %139 = arith.extui %138 : i32 to i64
    %140 = arith.addi %139, %c52_i64 : i64
    %141 = llvm.getelementptr %13[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050820_i32, %141 {alignment = 1 : i64} : i32, !llvm.ptr
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %143 = llvm.load %3 : !llvm.ptr -> i32
    %c27_i32 = arith.constant 27 : i32
    %144 = arith.addi %143, %c27_i32 : i32
    %c20_i64_34 = arith.constant 20 : i64
    %145 = arith.extui %142 : i32 to i64
    %146 = arith.addi %145, %c20_i64_34 : i64
    %147 = llvm.getelementptr %13[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %144, %147 {alignment = 1 : i64} : i32, !llvm.ptr
    %148 = llvm.load %3 : !llvm.ptr -> i32
    %149 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %150 = arith.extui %149 : i32 to i64
    %151 = arith.addi %150, %c8_i64 : i64
    %152 = llvm.getelementptr %13[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %153 = llvm.load volatile %152 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c36_i64 = arith.constant 36 : i64
    %154 = arith.extui %148 : i32 to i64
    %155 = arith.addi %154, %c36_i64 : i64
    %156 = llvm.getelementptr %13[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %153, %156 {alignment = 1 : i64} : i64, !llvm.ptr
    %157 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c0_i64_35 : i64
    %160 = llvm.getelementptr %13[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %161, %8 : i64, !llvm.ptr
    %162 = llvm.load %3 : !llvm.ptr -> i32
    %163 = llvm.load %7 : !llvm.ptr -> i32
    %c56_i64 = arith.constant 56 : i64
    %164 = arith.extui %162 : i32 to i64
    %165 = arith.addi %164, %c56_i64 : i64
    %166 = llvm.getelementptr %13[%165] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %163, %166 {alignment = 1 : i64} : i32, !llvm.ptr
    %167 = llvm.load %3 : !llvm.ptr -> i32
    %168 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %169 = arith.extui %168 : i32 to i64
    %170 = arith.addi %169, %c16_i64 : i64
    %171 = llvm.getelementptr %13[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %172 = llvm.load volatile %171 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %173 = arith.extui %167 : i32 to i64
    %174 = arith.addi %173, %c44_i64 : i64
    %175 = llvm.getelementptr %13[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %172, %175 {alignment = 1 : i64} : i32, !llvm.ptr
    %176 = llvm.load %3 : !llvm.ptr -> i32
    %177 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %178 = arith.extui %177 : i32 to i64
    %179 = arith.addi %178, %c32_i64 : i64
    %180 = llvm.getelementptr %13[%179] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %181 = llvm.load volatile %180 {alignment = 1 : i64} : !llvm.ptr -> i8
    %182 = arith.extui %181 : i8 to i32
    %c60_i64 = arith.constant 60 : i64
    %183 = arith.extui %176 : i32 to i64
    %184 = arith.addi %183, %c60_i64 : i64
    %185 = llvm.getelementptr %13[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = arith.trunci %182 : i32 to i8
    llvm.store volatile %186, %185 {alignment = 1 : i64} : i8, !llvm.ptr
    %187 = llvm.load %3 : !llvm.ptr -> i32
    %188 = llvm.load %8 : !llvm.ptr -> i64
    %c28_i64_36 = arith.constant 28 : i64
    %189 = arith.extui %187 : i32 to i64
    %190 = arith.addi %189, %c28_i64_36 : i64
    %191 = llvm.getelementptr %13[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %188, %191 {alignment = 1 : i64} : i64, !llvm.ptr
    %192 = llvm.load %3 : !llvm.ptr -> i32
    %193 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %194 = arith.addi %193, %c12_i32 : i32
    %c48_i64 = arith.constant 48 : i64
    %195 = arith.extui %192 : i32 to i64
    %196 = arith.addi %195, %c48_i64 : i64
    %197 = llvm.getelementptr %13[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %194, %197 {alignment = 1 : i64} : i32, !llvm.ptr
    %198 = llvm.load %1 : !llvm.ptr -> i32
    %199 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %200 = arith.addi %199, %c28_i32 : i32
    %201 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_37 = arith.constant 12 : i64
    %202 = arith.extui %201 : i32 to i64
    %203 = arith.addi %202, %c12_i64_37 : i64
    %204 = llvm.getelementptr %13[%203] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %205 = llvm.load volatile %204 {alignment = 1 : i64} : !llvm.ptr -> i32
    %206 = arith.cmpi ult, %205, %28 : i32
    cf.cond_br %206, ^bb29, ^bb30
  ^bb19:  // pred: ^bb6
    %207 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64_38 = arith.constant 20 : i64
    %208 = arith.extui %207 : i32 to i64
    %209 = arith.addi %208, %c20_i64_38 : i64
    %210 = llvm.getelementptr %13[%209] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %211 = llvm.load volatile %210 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050865_i32 = arith.constant 1050865 : i32
    %c1_i32_39 = arith.constant 1 : i32
    %212 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i64_40 = arith.constant 24 : i64
    %213 = arith.extui %212 : i32 to i64
    %214 = arith.addi %213, %c24_i64_40 : i64
    %215 = llvm.getelementptr %13[%214] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %216 = llvm.load volatile %215 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_41 = arith.constant 12 : i64
    %217 = arith.extui %216 : i32 to i64
    %218 = arith.addi %217, %c12_i64_41 : i64
    %219 = llvm.getelementptr %13[%218] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %220 = llvm.load volatile %219 {alignment = 1 : i64} : !llvm.ptr -> i32
    %221 = arith.cmpi ult, %220, %23 : i32
    cf.cond_br %221, ^bb20, ^bb21
  ^bb20:  // 2 preds: ^bb19, ^bb21
    %222 = llvm.getelementptr inbounds %21[%220] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %223 = llvm.load %222 : !llvm.ptr -> !llvm.ptr
    %224 = llvm.ptrtoint %223 : !llvm.ptr to i64
    %c0_i64_42 = arith.constant 0 : i64
    %225 = arith.cmpi eq, %224, %c0_i64_42 : i64
    cf.cond_br %225, ^bb23, ^bb22
  ^bb21:  // pred: ^bb19
    %c3_i32_43 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_43) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %226 = llvm.getelementptr %223[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %227 = llvm.getelementptr %223[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %228 = llvm.getelementptr %223[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %229 = llvm.load %226 : !llvm.ptr -> !llvm.ptr
    %230 = llvm.load %228 : !llvm.ptr -> !llvm.ptr
    %231 = llvm.ptrtoint %229 : !llvm.ptr to i64
    %c0_i64_44 = arith.constant 0 : i64
    %232 = arith.cmpi eq, %231, %c0_i64_44 : i64
    cf.cond_br %232, ^bb25, ^bb24
  ^bb23:  // pred: ^bb20
    %c4_i32_45 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_45) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %233 = llvm.load %227 : !llvm.ptr -> i32
    %234 = arith.cmpi ne, %15, %233 : i32
    cf.cond_br %234, ^bb27, ^bb26
  ^bb25:  // pred: ^bb22
    %c3_i32_46 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_46) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %235 = llvm.call %229(%230, %211, %c1050865_i32, %c1_i32_39) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_47 = arith.constant 0 : i32
    %236 = arith.cmpi ne, %235, %c0_i32_47 : i32
    cf.cond_br %236, ^bb3, ^bb28
  ^bb27:  // pred: ^bb24
    %c5_i32_48 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_48) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // pred: ^bb26
    %237 = llvm.load %6 : !llvm.ptr -> i32
    %c28_i64_49 = arith.constant 28 : i64
    %238 = arith.extui %237 : i32 to i64
    %239 = arith.addi %238, %c28_i64_49 : i64
    %240 = llvm.getelementptr %13[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %241 = llvm.load volatile %240 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %241, %7 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb29:  // 2 preds: ^bb18, ^bb30
    %242 = llvm.getelementptr inbounds %26[%205] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %243 = llvm.load %242 : !llvm.ptr -> !llvm.ptr
    %244 = llvm.ptrtoint %243 : !llvm.ptr to i64
    %c0_i64_50 = arith.constant 0 : i64
    %245 = arith.cmpi eq, %244, %c0_i64_50 : i64
    cf.cond_br %245, ^bb32, ^bb31
  ^bb30:  // pred: ^bb18
    %c3_i32_51 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_51) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %246 = llvm.getelementptr %243[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %247 = llvm.getelementptr %243[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %248 = llvm.getelementptr %243[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %249 = llvm.load %246 : !llvm.ptr -> !llvm.ptr
    %250 = llvm.load %248 : !llvm.ptr -> !llvm.ptr
    %251 = llvm.ptrtoint %249 : !llvm.ptr to i64
    %c0_i64_52 = arith.constant 0 : i64
    %252 = arith.cmpi eq, %251, %c0_i64_52 : i64
    cf.cond_br %252, ^bb34, ^bb33
  ^bb32:  // pred: ^bb29
    %c4_i32_53 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_53) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %253 = llvm.load %247 : !llvm.ptr -> i32
    %254 = arith.cmpi ne, %25, %253 : i32
    cf.cond_br %254, ^bb36, ^bb35
  ^bb34:  // pred: ^bb31
    %c3_i32_54 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_54) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %255 = llvm.call %249(%250, %198, %200) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_55 = arith.constant 0 : i32
    %256 = arith.cmpi ne, %255, %c0_i32_55 : i32
    cf.cond_br %256, ^bb3, ^bb37
  ^bb36:  // pred: ^bb33
    %c5_i32_56 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_56) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // pred: ^bb35
    %257 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i64_57 = arith.constant 48 : i64
    %258 = arith.extui %257 : i32 to i64
    %259 = arith.addi %258, %c48_i64_57 : i64
    %260 = llvm.getelementptr %13[%259] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %261 = llvm.load volatile %260 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050856_i32 = arith.constant 1050856 : i32
    %c2_i32_58 = arith.constant 2 : i32
    %262 = llvm.load %3 : !llvm.ptr -> i32
    %c52_i64_59 = arith.constant 52 : i64
    %263 = arith.extui %262 : i32 to i64
    %264 = arith.addi %263, %c52_i64_59 : i64
    %265 = llvm.getelementptr %13[%264] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %266 = llvm.load volatile %265 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_60 = arith.constant 12 : i64
    %267 = arith.extui %266 : i32 to i64
    %268 = arith.addi %267, %c12_i64_60 : i64
    %269 = llvm.getelementptr %13[%268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %270 = llvm.load volatile %269 {alignment = 1 : i64} : !llvm.ptr -> i32
    %271 = arith.cmpi ult, %270, %31 : i32
    cf.cond_br %271, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %272 = llvm.getelementptr inbounds %29[%270] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %273 = llvm.load %272 : !llvm.ptr -> !llvm.ptr
    %274 = llvm.ptrtoint %273 : !llvm.ptr to i64
    %c0_i64_61 = arith.constant 0 : i64
    %275 = arith.cmpi eq, %274, %c0_i64_61 : i64
    cf.cond_br %275, ^bb41, ^bb40
  ^bb39:  // pred: ^bb37
    %c3_i32_62 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_62) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %276 = llvm.getelementptr %273[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %277 = llvm.getelementptr %273[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %278 = llvm.getelementptr %273[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %279 = llvm.load %276 : !llvm.ptr -> !llvm.ptr
    %280 = llvm.load %278 : !llvm.ptr -> !llvm.ptr
    %281 = llvm.ptrtoint %279 : !llvm.ptr to i64
    %c0_i64_63 = arith.constant 0 : i64
    %282 = arith.cmpi eq, %281, %c0_i64_63 : i64
    cf.cond_br %282, ^bb43, ^bb42
  ^bb41:  // pred: ^bb38
    %c4_i32_64 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_64) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %283 = llvm.load %277 : !llvm.ptr -> i32
    %284 = arith.cmpi ne, %15, %283 : i32
    cf.cond_br %284, ^bb45, ^bb44
  ^bb43:  // pred: ^bb40
    %c3_i32_65 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_65) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %285 = llvm.call %279(%280, %261, %c1050856_i32, %c2_i32_58) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %285, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb45:  // pred: ^bb42
    %c5_i32_66 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_66) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb5, ^bb47
    %286 = llvm.getelementptr inbounds %32[%82] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %287 = llvm.load %286 : !llvm.ptr -> !llvm.ptr
    %288 = llvm.ptrtoint %287 : !llvm.ptr to i64
    %c0_i64_67 = arith.constant 0 : i64
    %289 = arith.cmpi eq, %288, %c0_i64_67 : i64
    cf.cond_br %289, ^bb49, ^bb48
  ^bb47:  // pred: ^bb5
    %c3_i32_68 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_68) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %290 = llvm.getelementptr %287[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %291 = llvm.getelementptr %287[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %292 = llvm.getelementptr %287[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %293 = llvm.load %290 : !llvm.ptr -> !llvm.ptr
    %294 = llvm.load %292 : !llvm.ptr -> !llvm.ptr
    %295 = llvm.ptrtoint %293 : !llvm.ptr to i64
    %c0_i64_69 = arith.constant 0 : i64
    %296 = arith.cmpi eq, %295, %c0_i64_69 : i64
    cf.cond_br %296, ^bb51, ^bb50
  ^bb49:  // pred: ^bb46
    %c4_i32_70 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_70) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %297 = llvm.load %291 : !llvm.ptr -> i32
    %298 = arith.cmpi ne, %25, %297 : i32
    cf.cond_br %298, ^bb53, ^bb52
  ^bb51:  // pred: ^bb48
    %c3_i32_71 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_71) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %299 = llvm.call %293(%294, %76, %77) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    llvm.store %299, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb53:  // pred: ^bb50
    %c5_i32_72 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_72) : (i32) -> ()
    cf.br ^bb52
  }
  func.func @f165(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> i32
    %7 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %8 : !llvm.ptr -> i64
    %11 = arith.trunci %10 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_1 = arith.constant 1 : i32
    llvm.store %c1_i32_1, %1 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c4_i64 : i64
    %15 = llvm.getelementptr %4[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i8
    %17 = arith.extui %16 : i8 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %18 = arith.cmpi ne, %17, %c0_i32_2 : i32
    cf.cond_br %18, ^bb3, ^bb4
  ^bb2(%19: i32):  // pred: ^bb3
    return %19 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb11
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_3 = arith.constant 4 : i64
    %22 = arith.extui %20 : i32 to i64
    %23 = arith.addi %22, %c4_i64_3 : i64
    %24 = llvm.getelementptr %4[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = arith.trunci %21 : i32 to i8
    llvm.store volatile %25, %24 {alignment = 1 : i64} : i8, !llvm.ptr
    %26 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%26 : i32)
  ^bb4:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c0_i64 : i64
    %30 = llvm.getelementptr %4[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %31, %1 : i32, !llvm.ptr
    %c20_i64 = arith.constant 20 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c20_i64 : i64
    %34 = llvm.getelementptr %4[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050866_i32 = arith.constant 1050866 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c24_i64 : i64
    %39 = llvm.getelementptr %4[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c12_i64 : i64
    %43 = llvm.getelementptr %4[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    %45 = arith.cmpi ult, %44, %11 : i32
    cf.cond_br %45, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %46 = llvm.getelementptr inbounds %9[%44] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %47 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.ptrtoint %47 : !llvm.ptr to i64
    %c0_i64_5 = arith.constant 0 : i64
    %49 = arith.cmpi eq, %48, %c0_i64_5 : i64
    cf.cond_br %49, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %50 = llvm.getelementptr %47[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %51 = llvm.getelementptr %47[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %52 = llvm.getelementptr %47[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %53 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %54 = llvm.load %52 : !llvm.ptr -> !llvm.ptr
    %55 = llvm.ptrtoint %53 : !llvm.ptr to i64
    %c0_i64_6 = arith.constant 0 : i64
    %56 = arith.cmpi eq, %55, %c0_i64_6 : i64
    cf.cond_br %56, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %57 = llvm.load %51 : !llvm.ptr -> i32
    %58 = arith.cmpi ne, %6, %57 : i32
    cf.cond_br %58, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_7 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_7) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %59 = llvm.call %53(%54, %35, %c1050866_i32, %c1_i32_4) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %59, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  }
  func.func @f166(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %19 : !llvm.ptr -> i64
    %22 = arith.trunci %21 : i64 to i32
    %23 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %23 : !llvm.ptr -> i32
    %25 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.load %19 : !llvm.ptr -> i64
    %27 = arith.trunci %26 : i64 to i32
    %28 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %19 : !llvm.ptr -> i64
    %30 = arith.trunci %29 : i64 to i32
    %31 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %19 : !llvm.ptr -> i64
    %33 = arith.trunci %32 : i64 to i32
    %34 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.load %19 : !llvm.ptr -> i64
    %36 = arith.trunci %35 : i64 to i32
    %37 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %19 : !llvm.ptr -> i64
    %39 = arith.trunci %38 : i64 to i32
    %40 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.load %19 : !llvm.ptr -> i64
    %42 = arith.trunci %41 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_12 : i32
    cf.cond_br %44, ^bb4, ^bb5
  ^bb2(%45: i32):  // 10 preds: ^bb27, ^bb34, ^bb36, ^bb41, ^bb45, ^bb57, ^bb66, ^bb79, ^bb101, ^bb104
    return %45 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %46 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %47 = arith.andi %46, %c4_i32 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_13 : i32
    cf.cond_br %48, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c43_i32 = arith.constant 43 : i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c28_i64 : i64
    %52 = llvm.getelementptr %15[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %53, %7 : i32, !llvm.ptr
    %c1_i32_14 = arith.constant 1 : i32
    %54 = arith.andi %53, %c1_i32_14 : i32
    llvm.store %54, %1 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_15 : i32
    %56 = arith.select %55, %c43_i32, %c1114112_i32 : i32
    llvm.store %56, %8 : i32, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %5 : !llvm.ptr -> i32
    %59 = arith.addi %57, %58 : i32
    llvm.store %59, %6 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %60 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %61 = arith.addi %60, %c1_i32_16 : i32
    llvm.store %61, %6 : i32, !llvm.ptr
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_17 = arith.constant 28 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c28_i64_17 : i64
    %65 = llvm.getelementptr %15[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %66, %7 : i32, !llvm.ptr
    %c45_i32 = arith.constant 45 : i32
    llvm.store %c45_i32, %8 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb8, ^bb9
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64 : i64
    %70 = llvm.getelementptr %15[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_18 : i32
    cf.cond_br %72, ^bb24, ^bb25
  ^bb7:  // pred: ^bb3
    %73 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %74 = arith.cmpi ult, %73, %c16_i32 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_19 : i32
    cf.cond_br %76, ^bb10, ^bb11
  ^bb8:  // pred: ^bb3
    %c0_i32_20 = arith.constant 0 : i32
    llvm.store %c0_i32_20, %2 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // 4 preds: ^bb11, ^bb13, ^bb14, ^bb21
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %78 = llvm.load %6 : !llvm.ptr -> i32
    %79 = arith.addi %77, %78 : i32
    llvm.store %79, %6 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb10:  // pred: ^bb7
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %81 = arith.cmpi ne, %80, %c0_i32_21 : i32
    cf.cond_br %81, ^bb12, ^bb13
  ^bb11:  // pred: ^bb7
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %84 = call @f168(%arg0, %82, %83) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %84, %1 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb10
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %86 = arith.andi %85, %c3_i32 : i32
    llvm.store %86, %9 : i32, !llvm.ptr
    %87 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_22 = arith.constant 4 : i32
    %88 = arith.cmpi uge, %87, %c4_i32_22 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_23 : i32
    cf.cond_br %90, ^bb15, ^bb16
  ^bb13:  // pred: ^bb10
    %c0_i32_24 = arith.constant 0 : i32
    llvm.store %c0_i32_24, %1 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb14:  // 2 preds: ^bb16, ^bb17
    %91 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_25 = arith.constant 0 : i32
    %92 = arith.cmpi eq, %91, %c0_i32_25 : i32
    %93 = arith.extui %92 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %94 = arith.cmpi ne, %93, %c0_i32_26 : i32
    cf.cond_br %94, ^bb9, ^bb20
  ^bb15:  // pred: ^bb12
    %95 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %96 = arith.andi %95, %c12_i32 : i32
    llvm.store %96, %11 : i32, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    llvm.store %c0_i32_27, %1 : i32, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    llvm.store %c0_i32_28, %10 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb16:  // pred: ^bb12
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %1 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    llvm.store %c0_i32_30, %10 : i32, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb19
    cf.br ^bb14
  ^bb18:  // 2 preds: ^bb15, ^bb18
    %97 = llvm.load %1 : !llvm.ptr -> i32
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %99 = llvm.load %10 : !llvm.ptr -> i32
    %100 = arith.addi %98, %99 : i32
    llvm.store %100, %12 : i32, !llvm.ptr
    %c0_i64_31 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_31 : i64
    %103 = llvm.getelementptr %15[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i8
    %105 = arith.extsi %104 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %106 = arith.cmpi sgt, %105, %c-65_i32 : i32
    %107 = arith.extui %106 : i1 to i32
    %108 = arith.addi %97, %107 : i32
    %109 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_32 = arith.constant 1 : i32
    %110 = arith.addi %109, %c1_i32_32 : i32
    %c0_i64_33 = arith.constant 0 : i64
    %111 = arith.extui %110 : i32 to i64
    %112 = arith.addi %111, %c0_i64_33 : i64
    %113 = llvm.getelementptr %15[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = llvm.load volatile %113 {alignment = 1 : i64} : !llvm.ptr -> i8
    %115 = arith.extsi %114 : i8 to i32
    %c-65_i32_34 = arith.constant -65 : i32
    %116 = arith.cmpi sgt, %115, %c-65_i32_34 : i32
    %117 = arith.extui %116 : i1 to i32
    %118 = arith.addi %108, %117 : i32
    %119 = llvm.load %12 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %120 = arith.addi %119, %c2_i32 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64_35 : i64
    %123 = llvm.getelementptr %15[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i8
    %125 = arith.extsi %124 : i8 to i32
    %c-65_i32_36 = arith.constant -65 : i32
    %126 = arith.cmpi sgt, %125, %c-65_i32_36 : i32
    %127 = arith.extui %126 : i1 to i32
    %128 = arith.addi %118, %127 : i32
    %129 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i32_37 = arith.constant 3 : i32
    %130 = arith.addi %129, %c3_i32_37 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c0_i64_38 : i64
    %133 = llvm.getelementptr %15[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i8
    %135 = arith.extsi %134 : i8 to i32
    %c-65_i32_39 = arith.constant -65 : i32
    %136 = arith.cmpi sgt, %135, %c-65_i32_39 : i32
    %137 = arith.extui %136 : i1 to i32
    %138 = arith.addi %128, %137 : i32
    llvm.store %138, %1 : i32, !llvm.ptr
    %139 = llvm.load %11 : !llvm.ptr -> i32
    %140 = llvm.load %10 : !llvm.ptr -> i32
    %c4_i32_40 = arith.constant 4 : i32
    %141 = arith.addi %140, %c4_i32_40 : i32
    llvm.store %141, %10 : i32, !llvm.ptr
    %142 = arith.cmpi eq, %139, %141 : i32
    %143 = arith.extui %142 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %144 = arith.cmpi eq, %143, %c0_i32_41 : i32
    %145 = arith.extui %144 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %146 = arith.cmpi ne, %145, %c0_i32_42 : i32
    cf.cond_br %146, ^bb18, ^bb19
  ^bb19:  // pred: ^bb18
    cf.br ^bb17
  ^bb20:  // pred: ^bb14
    %147 = llvm.load %2 : !llvm.ptr -> i32
    %148 = llvm.load %10 : !llvm.ptr -> i32
    %149 = arith.addi %147, %148 : i32
    llvm.store %149, %12 : i32, !llvm.ptr
    cf.br ^bb22
  ^bb21:  // pred: ^bb23
    cf.br ^bb9
  ^bb22:  // 2 preds: ^bb20, ^bb22
    %150 = llvm.load %1 : !llvm.ptr -> i32
    %151 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_43 = arith.constant 0 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c0_i64_43 : i64
    %154 = llvm.getelementptr %15[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i8
    %156 = arith.extsi %155 : i8 to i32
    %c-65_i32_44 = arith.constant -65 : i32
    %157 = arith.cmpi sgt, %156, %c-65_i32_44 : i32
    %158 = arith.extui %157 : i1 to i32
    %159 = arith.addi %150, %158 : i32
    llvm.store %159, %1 : i32, !llvm.ptr
    %160 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_45 = arith.constant 1 : i32
    %161 = arith.addi %160, %c1_i32_45 : i32
    llvm.store %161, %12 : i32, !llvm.ptr
    %162 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %163 = arith.addi %162, %c-1_i32 : i32
    llvm.store %163, %9 : i32, !llvm.ptr
    %c0_i32_46 = arith.constant 0 : i32
    %164 = arith.cmpi ne, %163, %c0_i32_46 : i32
    cf.cond_br %164, ^bb22, ^bb23
  ^bb23:  // pred: ^bb22
    cf.br ^bb21
  ^bb24:  // pred: ^bb6
    %165 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c4_i64 : i64
    %168 = llvm.getelementptr %15[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %169 = llvm.load volatile %168 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %169, %1 : i32, !llvm.ptr
    %170 = llvm.load %6 : !llvm.ptr -> i32
    %171 = arith.cmpi ugt, %169, %170 : i32
    %172 = arith.extui %171 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %173 = arith.cmpi ne, %172, %c0_i32_47 : i32
    cf.cond_br %173, ^bb39, ^bb40
  ^bb25:  // pred: ^bb6
    %174 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %175 = arith.extui %174 : i32 to i64
    %176 = arith.addi %175, %c20_i64 : i64
    %177 = llvm.getelementptr %15[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %178 = llvm.load volatile %177 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %178, %1 : i32, !llvm.ptr
    %179 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %180 = arith.extui %179 : i32 to i64
    %181 = arith.addi %180, %c24_i64 : i64
    %182 = llvm.getelementptr %15[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %183 = llvm.load volatile %182 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %183, %12 : i32, !llvm.ptr
    %184 = llvm.load %8 : !llvm.ptr -> i32
    %185 = llvm.load %2 : !llvm.ptr -> i32
    %186 = llvm.load %3 : !llvm.ptr -> i32
    %187 = call @f169(%arg0, %178, %183, %184, %185, %186) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_48 = arith.constant 0 : i32
    %188 = arith.cmpi eq, %187, %c0_i32_48 : i32
    %189 = arith.extui %188 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %190 = arith.cmpi ne, %189, %c0_i32_49 : i32
    cf.cond_br %190, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %191 = llvm.load %1 : !llvm.ptr -> i32
    %192 = llvm.load %4 : !llvm.ptr -> i32
    %193 = llvm.load %5 : !llvm.ptr -> i32
    %194 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %195 = arith.extui %194 : i32 to i64
    %196 = arith.addi %195, %c12_i64 : i64
    %197 = llvm.getelementptr %15[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = llvm.load volatile %197 {alignment = 1 : i64} : !llvm.ptr -> i32
    %199 = arith.cmpi ult, %198, %22 : i32
    cf.cond_br %199, ^bb28, ^bb29
  ^bb27:  // pred: ^bb25
    %c1_i32_50 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_50 : i32)
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %200 = llvm.getelementptr inbounds %20[%198] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %201 = llvm.load %200 : !llvm.ptr -> !llvm.ptr
    %202 = llvm.ptrtoint %201 : !llvm.ptr to i64
    %c0_i64_51 = arith.constant 0 : i64
    %203 = arith.cmpi eq, %202, %c0_i64_51 : i64
    cf.cond_br %203, ^bb31, ^bb30
  ^bb29:  // pred: ^bb26
    %c3_i32_52 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_52) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %204 = llvm.getelementptr %201[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %205 = llvm.getelementptr %201[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %206 = llvm.getelementptr %201[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %207 = llvm.load %204 : !llvm.ptr -> !llvm.ptr
    %208 = llvm.load %206 : !llvm.ptr -> !llvm.ptr
    %209 = llvm.ptrtoint %207 : !llvm.ptr to i64
    %c0_i64_53 = arith.constant 0 : i64
    %210 = arith.cmpi eq, %209, %c0_i64_53 : i64
    cf.cond_br %210, ^bb33, ^bb32
  ^bb31:  // pred: ^bb28
    %c4_i32_54 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_54) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %211 = llvm.load %205 : !llvm.ptr -> i32
    %212 = arith.cmpi ne, %17, %211 : i32
    cf.cond_br %212, ^bb35, ^bb34
  ^bb33:  // pred: ^bb30
    %c3_i32_55 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_55) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %213 = llvm.call %207(%208, %191, %192, %193) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%213 : i32)
  ^bb35:  // pred: ^bb32
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 4 preds: ^bb42, ^bb73, ^bb78, ^bb98
    %214 = llvm.load %11 : !llvm.ptr -> i32
    cf.br ^bb2(%214 : i32)
  ^bb37:  // pred: ^bb39
    %215 = llvm.load %1 : !llvm.ptr -> i32
    %216 = llvm.load %6 : !llvm.ptr -> i32
    %217 = arith.subi %215, %216 : i32
    llvm.store %217, %6 : i32, !llvm.ptr
    %218 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %219 = arith.extui %218 : i32 to i64
    %220 = arith.addi %219, %c32_i64 : i64
    %221 = llvm.getelementptr %15[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %222 = llvm.load volatile %221 {alignment = 1 : i64} : !llvm.ptr -> i8
    %223 = arith.extui %222 : i8 to i32
    llvm.store %223, %1 : i32, !llvm.ptr
    cf.switch %223 : i32, [
      default: ^bb75,
      0: ^bb75,
      1: ^bb77,
      2: ^bb76,
      3: ^bb77
    ]
  ^bb38:  // pred: ^bb40
    %224 = llvm.load %1 : !llvm.ptr -> i32
    %225 = llvm.load %4 : !llvm.ptr -> i32
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %227 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64_56 = arith.constant 12 : i64
    %228 = arith.extui %227 : i32 to i64
    %229 = arith.addi %228, %c12_i64_56 : i64
    %230 = llvm.getelementptr %15[%229] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %231 = llvm.load volatile %230 {alignment = 1 : i64} : !llvm.ptr -> i32
    %232 = arith.cmpi ult, %231, %33 : i32
    cf.cond_br %232, ^bb67, ^bb68
  ^bb39:  // pred: ^bb24
    %233 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %234 = arith.andi %233, %c8_i32 : i32
    %c0_i32_57 = arith.constant 0 : i32
    %235 = arith.cmpi eq, %234, %c0_i32_57 : i32
    %236 = arith.extui %235 : i1 to i32
    %c0_i32_58 = arith.constant 0 : i32
    %237 = arith.cmpi ne, %236, %c0_i32_58 : i32
    cf.cond_br %237, ^bb37, ^bb42
  ^bb40:  // pred: ^bb24
    %238 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_59 = arith.constant 20 : i64
    %239 = arith.extui %238 : i32 to i64
    %240 = arith.addi %239, %c20_i64_59 : i64
    %241 = llvm.getelementptr %15[%240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %242 = llvm.load volatile %241 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %242, %1 : i32, !llvm.ptr
    %243 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_60 = arith.constant 24 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c24_i64_60 : i64
    %246 = llvm.getelementptr %15[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load volatile %246 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %247, %12 : i32, !llvm.ptr
    %248 = llvm.load %8 : !llvm.ptr -> i32
    %249 = llvm.load %2 : !llvm.ptr -> i32
    %250 = llvm.load %3 : !llvm.ptr -> i32
    %251 = call @f169(%arg0, %242, %247, %248, %249, %250) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_61 = arith.constant 0 : i32
    %252 = arith.cmpi eq, %251, %c0_i32_61 : i32
    %253 = arith.extui %252 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %254 = arith.cmpi ne, %253, %c0_i32_62 : i32
    cf.cond_br %254, ^bb38, ^bb41
  ^bb41:  // pred: ^bb40
    %c1_i32_63 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_63 : i32)
  ^bb42:  // pred: ^bb39
    %255 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %256 = arith.extui %255 : i32 to i64
    %257 = arith.addi %256, %c16_i64 : i64
    %258 = llvm.getelementptr %15[%257] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %259 = llvm.load volatile %258 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %259, %9 : i32, !llvm.ptr
    %260 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %c16_i64_64 = arith.constant 16 : i64
    %261 = arith.extui %260 : i32 to i64
    %262 = arith.addi %261, %c16_i64_64 : i64
    %263 = llvm.getelementptr %15[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c48_i32, %263 {alignment = 1 : i64} : i32, !llvm.ptr
    %264 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64_65 = arith.constant 32 : i64
    %265 = arith.extui %264 : i32 to i64
    %266 = arith.addi %265, %c32_i64_65 : i64
    %267 = llvm.getelementptr %15[%266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %268 = llvm.load volatile %267 {alignment = 1 : i64} : !llvm.ptr -> i8
    %269 = arith.extui %268 : i8 to i32
    llvm.store %269, %7 : i32, !llvm.ptr
    %c1_i32_66 = arith.constant 1 : i32
    llvm.store %c1_i32_66, %11 : i32, !llvm.ptr
    %270 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_67 = arith.constant 1 : i32
    %c32_i64_68 = arith.constant 32 : i64
    %271 = arith.extui %270 : i32 to i64
    %272 = arith.addi %271, %c32_i64_68 : i64
    %273 = llvm.getelementptr %15[%272] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %274 = arith.trunci %c1_i32_67 : i32 to i8
    llvm.store volatile %274, %273 {alignment = 1 : i64} : i8, !llvm.ptr
    %275 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_69 = arith.constant 20 : i64
    %276 = arith.extui %275 : i32 to i64
    %277 = arith.addi %276, %c20_i64_69 : i64
    %278 = llvm.getelementptr %15[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %279, %12 : i32, !llvm.ptr
    %280 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_70 = arith.constant 24 : i64
    %281 = arith.extui %280 : i32 to i64
    %282 = arith.addi %281, %c24_i64_70 : i64
    %283 = llvm.getelementptr %15[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %284 = llvm.load volatile %283 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %284, %10 : i32, !llvm.ptr
    %285 = llvm.load %8 : !llvm.ptr -> i32
    %286 = llvm.load %2 : !llvm.ptr -> i32
    %287 = llvm.load %3 : !llvm.ptr -> i32
    %288 = call @f169(%arg0, %279, %284, %285, %286, %287) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_71 = arith.constant 0 : i32
    %289 = arith.cmpi ne, %288, %c0_i32_71 : i32
    cf.cond_br %289, ^bb36, ^bb43
  ^bb43:  // pred: ^bb42
    %290 = llvm.load %1 : !llvm.ptr -> i32
    %291 = llvm.load %6 : !llvm.ptr -> i32
    %292 = arith.subi %290, %291 : i32
    %c1_i32_72 = arith.constant 1 : i32
    %293 = arith.addi %292, %c1_i32_72 : i32
    llvm.store %293, %1 : i32, !llvm.ptr
    cf.br ^bb46
  ^bb44:  // pred: ^bb46
    %294 = llvm.load %12 : !llvm.ptr -> i32
    %295 = llvm.load %4 : !llvm.ptr -> i32
    %296 = llvm.load %5 : !llvm.ptr -> i32
    %297 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64_73 = arith.constant 12 : i64
    %298 = arith.extui %297 : i32 to i64
    %299 = arith.addi %298, %c12_i64_73 : i64
    %300 = llvm.getelementptr %15[%299] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %301 = llvm.load volatile %300 {alignment = 1 : i64} : !llvm.ptr -> i32
    %302 = arith.cmpi ult, %301, %30 : i32
    cf.cond_br %302, ^bb58, ^bb59
  ^bb45:  // pred: ^bb56
    %c1_i32_74 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_74 : i32)
  ^bb46:  // 2 preds: ^bb43, ^bb54
    %303 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_75 = arith.constant -1 : i32
    %304 = arith.addi %303, %c-1_i32_75 : i32
    llvm.store %304, %1 : i32, !llvm.ptr
    %c0_i32_76 = arith.constant 0 : i32
    %305 = arith.cmpi eq, %304, %c0_i32_76 : i32
    %306 = arith.extui %305 : i1 to i32
    %c0_i32_77 = arith.constant 0 : i32
    %307 = arith.cmpi ne, %306, %c0_i32_77 : i32
    cf.cond_br %307, ^bb44, ^bb47
  ^bb47:  // pred: ^bb46
    %308 = llvm.load %12 : !llvm.ptr -> i32
    %c48_i32_78 = arith.constant 48 : i32
    %309 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i64_79 = arith.constant 16 : i64
    %310 = arith.extui %309 : i32 to i64
    %311 = arith.addi %310, %c16_i64_79 : i64
    %312 = llvm.getelementptr %15[%311] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %313 = llvm.load volatile %312 {alignment = 1 : i64} : !llvm.ptr -> i32
    %314 = arith.cmpi ult, %313, %27 : i32
    cf.cond_br %314, ^bb48, ^bb49
  ^bb48:  // 2 preds: ^bb47, ^bb49
    %315 = llvm.getelementptr inbounds %25[%313] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %316 = llvm.load %315 : !llvm.ptr -> !llvm.ptr
    %317 = llvm.ptrtoint %316 : !llvm.ptr to i64
    %c0_i64_80 = arith.constant 0 : i64
    %318 = arith.cmpi eq, %317, %c0_i64_80 : i64
    cf.cond_br %318, ^bb51, ^bb50
  ^bb49:  // pred: ^bb47
    %c3_i32_81 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_81) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %319 = llvm.getelementptr %316[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %320 = llvm.getelementptr %316[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %321 = llvm.getelementptr %316[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %322 = llvm.load %319 : !llvm.ptr -> !llvm.ptr
    %323 = llvm.load %321 : !llvm.ptr -> !llvm.ptr
    %324 = llvm.ptrtoint %322 : !llvm.ptr to i64
    %c0_i64_82 = arith.constant 0 : i64
    %325 = arith.cmpi eq, %324, %c0_i64_82 : i64
    cf.cond_br %325, ^bb53, ^bb52
  ^bb51:  // pred: ^bb48
    %c4_i32_83 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_83) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %326 = llvm.load %320 : !llvm.ptr -> i32
    %327 = arith.cmpi ne, %24, %326 : i32
    cf.cond_br %327, ^bb55, ^bb54
  ^bb53:  // pred: ^bb50
    %c3_i32_84 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_84) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %328 = llvm.call %322(%323, %308, %c48_i32_78) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_85 = arith.constant 0 : i32
    %329 = arith.cmpi eq, %328, %c0_i32_85 : i32
    %330 = arith.extui %329 : i1 to i32
    %c0_i32_86 = arith.constant 0 : i32
    %331 = arith.cmpi ne, %330, %c0_i32_86 : i32
    cf.cond_br %331, ^bb46, ^bb56
  ^bb55:  // pred: ^bb52
    %c5_i32_87 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_87) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // pred: ^bb54
    cf.br ^bb45
  ^bb57:  // pred: ^bb64
    %332 = llvm.load %0 : !llvm.ptr -> i32
    %333 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i64_88 = arith.constant 32 : i64
    %334 = arith.extui %332 : i32 to i64
    %335 = arith.addi %334, %c32_i64_88 : i64
    %336 = llvm.getelementptr %15[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %337 = arith.trunci %333 : i32 to i8
    llvm.store volatile %337, %336 {alignment = 1 : i64} : i8, !llvm.ptr
    %338 = llvm.load %0 : !llvm.ptr -> i32
    %339 = llvm.load %9 : !llvm.ptr -> i32
    %c16_i64_89 = arith.constant 16 : i64
    %340 = arith.extui %338 : i32 to i64
    %341 = arith.addi %340, %c16_i64_89 : i64
    %342 = llvm.getelementptr %15[%341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %339, %342 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_90 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_90 : i32)
  ^bb58:  // 2 preds: ^bb44, ^bb59
    %343 = llvm.getelementptr inbounds %28[%301] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %344 = llvm.load %343 : !llvm.ptr -> !llvm.ptr
    %345 = llvm.ptrtoint %344 : !llvm.ptr to i64
    %c0_i64_91 = arith.constant 0 : i64
    %346 = arith.cmpi eq, %345, %c0_i64_91 : i64
    cf.cond_br %346, ^bb61, ^bb60
  ^bb59:  // pred: ^bb44
    %c3_i32_92 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_92) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %347 = llvm.getelementptr %344[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %348 = llvm.getelementptr %344[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %349 = llvm.getelementptr %344[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %350 = llvm.load %347 : !llvm.ptr -> !llvm.ptr
    %351 = llvm.load %349 : !llvm.ptr -> !llvm.ptr
    %352 = llvm.ptrtoint %350 : !llvm.ptr to i64
    %c0_i64_93 = arith.constant 0 : i64
    %353 = arith.cmpi eq, %352, %c0_i64_93 : i64
    cf.cond_br %353, ^bb63, ^bb62
  ^bb61:  // pred: ^bb58
    %c4_i32_94 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_94) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // 2 preds: ^bb60, ^bb63
    %354 = llvm.load %348 : !llvm.ptr -> i32
    %355 = arith.cmpi ne, %17, %354 : i32
    cf.cond_br %355, ^bb65, ^bb64
  ^bb63:  // pred: ^bb60
    %c3_i32_95 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_95) : (i32) -> ()
    cf.br ^bb62
  ^bb64:  // 2 preds: ^bb62, ^bb65
    %356 = llvm.call %350(%351, %294, %295, %296) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_96 = arith.constant 0 : i32
    %357 = arith.cmpi eq, %356, %c0_i32_96 : i32
    %358 = arith.extui %357 : i1 to i32
    %c0_i32_97 = arith.constant 0 : i32
    %359 = arith.cmpi ne, %358, %c0_i32_97 : i32
    cf.cond_br %359, ^bb57, ^bb66
  ^bb65:  // pred: ^bb62
    %c5_i32_98 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_98) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // pred: ^bb64
    %c1_i32_99 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_99 : i32)
  ^bb67:  // 2 preds: ^bb38, ^bb68
    %360 = llvm.getelementptr inbounds %31[%231] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %361 = llvm.load %360 : !llvm.ptr -> !llvm.ptr
    %362 = llvm.ptrtoint %361 : !llvm.ptr to i64
    %c0_i64_100 = arith.constant 0 : i64
    %363 = arith.cmpi eq, %362, %c0_i64_100 : i64
    cf.cond_br %363, ^bb70, ^bb69
  ^bb68:  // pred: ^bb38
    %c3_i32_101 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_101) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %364 = llvm.getelementptr %361[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %365 = llvm.getelementptr %361[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %366 = llvm.getelementptr %361[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %367 = llvm.load %364 : !llvm.ptr -> !llvm.ptr
    %368 = llvm.load %366 : !llvm.ptr -> !llvm.ptr
    %369 = llvm.ptrtoint %367 : !llvm.ptr to i64
    %c0_i64_102 = arith.constant 0 : i64
    %370 = arith.cmpi eq, %369, %c0_i64_102 : i64
    cf.cond_br %370, ^bb72, ^bb71
  ^bb70:  // pred: ^bb67
    %c4_i32_103 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_103) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %371 = llvm.load %365 : !llvm.ptr -> i32
    %372 = arith.cmpi ne, %17, %371 : i32
    cf.cond_br %372, ^bb74, ^bb73
  ^bb72:  // pred: ^bb69
    %c3_i32_104 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_104) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // 2 preds: ^bb71, ^bb74
    %373 = llvm.call %367(%368, %224, %225, %226) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %373, %11 : i32, !llvm.ptr
    cf.br ^bb36
  ^bb74:  // pred: ^bb71
    %c5_i32_105 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_105) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 4 preds: ^bb37, ^bb37, ^bb76, ^bb77
    %374 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_106 = arith.constant 1 : i32
    %375 = arith.addi %374, %c1_i32_106 : i32
    llvm.store %375, %1 : i32, !llvm.ptr
    %376 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64_107 = arith.constant 16 : i64
    %377 = arith.extui %376 : i32 to i64
    %378 = arith.addi %377, %c16_i64_107 : i64
    %379 = llvm.getelementptr %15[%378] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %380 = llvm.load volatile %379 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %380, %9 : i32, !llvm.ptr
    %381 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_108 = arith.constant 24 : i64
    %382 = arith.extui %381 : i32 to i64
    %383 = arith.addi %382, %c24_i64_108 : i64
    %384 = llvm.getelementptr %15[%383] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %385 = llvm.load volatile %384 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %385, %12 : i32, !llvm.ptr
    %386 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_109 = arith.constant 20 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c20_i64_109 : i64
    %389 = llvm.getelementptr %15[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %390, %10 : i32, !llvm.ptr
    cf.br ^bb80
  ^bb76:  // pred: ^bb37
    %391 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_110 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %392 = arith.cmpi ule, %c1_i32_110, %c31_i32 : i32
    %393 = scf.if %392 -> (i32) {
      %503 = arith.shrui %391, %c1_i32_110 : i32
      scf.yield %503 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %393, %1 : i32, !llvm.ptr
    %394 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_111 = arith.constant 1 : i32
    %395 = arith.addi %394, %c1_i32_111 : i32
    %c1_i32_112 = arith.constant 1 : i32
    %c31_i32_113 = arith.constant 31 : i32
    %396 = arith.cmpi ule, %c1_i32_112, %c31_i32_113 : i32
    %397 = scf.if %396 -> (i32) {
      %503 = arith.shrui %395, %c1_i32_112 : i32
      scf.yield %503 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %397, %6 : i32, !llvm.ptr
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb37, ^bb37
    %398 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %398, %1 : i32, !llvm.ptr
    %c0_i32_114 = arith.constant 0 : i32
    llvm.store %c0_i32_114, %6 : i32, !llvm.ptr
    cf.br ^bb75
  ^bb78:  // pred: ^bb80
    %c1_i32_115 = arith.constant 1 : i32
    llvm.store %c1_i32_115, %11 : i32, !llvm.ptr
    %399 = llvm.load %10 : !llvm.ptr -> i32
    %400 = llvm.load %12 : !llvm.ptr -> i32
    %401 = llvm.load %8 : !llvm.ptr -> i32
    %402 = llvm.load %2 : !llvm.ptr -> i32
    %403 = llvm.load %3 : !llvm.ptr -> i32
    %404 = call @f169(%arg0, %399, %400, %401, %402, %403) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_116 = arith.constant 0 : i32
    %405 = arith.cmpi ne, %404, %c0_i32_116 : i32
    cf.cond_br %405, ^bb36, ^bb91
  ^bb79:  // pred: ^bb90
    %c1_i32_117 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_117 : i32)
  ^bb80:  // 2 preds: ^bb75, ^bb88
    %406 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_118 = arith.constant -1 : i32
    %407 = arith.addi %406, %c-1_i32_118 : i32
    llvm.store %407, %1 : i32, !llvm.ptr
    %c0_i32_119 = arith.constant 0 : i32
    %408 = arith.cmpi eq, %407, %c0_i32_119 : i32
    %409 = arith.extui %408 : i1 to i32
    %c0_i32_120 = arith.constant 0 : i32
    %410 = arith.cmpi ne, %409, %c0_i32_120 : i32
    cf.cond_br %410, ^bb78, ^bb81
  ^bb81:  // pred: ^bb80
    %411 = llvm.load %10 : !llvm.ptr -> i32
    %412 = llvm.load %9 : !llvm.ptr -> i32
    %413 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_121 = arith.constant 16 : i64
    %414 = arith.extui %413 : i32 to i64
    %415 = arith.addi %414, %c16_i64_121 : i64
    %416 = llvm.getelementptr %15[%415] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %417 = llvm.load volatile %416 {alignment = 1 : i64} : !llvm.ptr -> i32
    %418 = arith.cmpi ult, %417, %36 : i32
    cf.cond_br %418, ^bb82, ^bb83
  ^bb82:  // 2 preds: ^bb81, ^bb83
    %419 = llvm.getelementptr inbounds %34[%417] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %420 = llvm.load %419 : !llvm.ptr -> !llvm.ptr
    %421 = llvm.ptrtoint %420 : !llvm.ptr to i64
    %c0_i64_122 = arith.constant 0 : i64
    %422 = arith.cmpi eq, %421, %c0_i64_122 : i64
    cf.cond_br %422, ^bb85, ^bb84
  ^bb83:  // pred: ^bb81
    %c3_i32_123 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_123) : (i32) -> ()
    cf.br ^bb82
  ^bb84:  // 2 preds: ^bb82, ^bb85
    %423 = llvm.getelementptr %420[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %424 = llvm.getelementptr %420[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %425 = llvm.getelementptr %420[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %426 = llvm.load %423 : !llvm.ptr -> !llvm.ptr
    %427 = llvm.load %425 : !llvm.ptr -> !llvm.ptr
    %428 = llvm.ptrtoint %426 : !llvm.ptr to i64
    %c0_i64_124 = arith.constant 0 : i64
    %429 = arith.cmpi eq, %428, %c0_i64_124 : i64
    cf.cond_br %429, ^bb87, ^bb86
  ^bb85:  // pred: ^bb82
    %c4_i32_125 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_125) : (i32) -> ()
    cf.br ^bb84
  ^bb86:  // 2 preds: ^bb84, ^bb87
    %430 = llvm.load %424 : !llvm.ptr -> i32
    %431 = arith.cmpi ne, %24, %430 : i32
    cf.cond_br %431, ^bb89, ^bb88
  ^bb87:  // pred: ^bb84
    %c3_i32_126 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_126) : (i32) -> ()
    cf.br ^bb86
  ^bb88:  // 2 preds: ^bb86, ^bb89
    %432 = llvm.call %426(%427, %411, %412) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_127 = arith.constant 0 : i32
    %433 = arith.cmpi eq, %432, %c0_i32_127 : i32
    %434 = arith.extui %433 : i1 to i32
    %c0_i32_128 = arith.constant 0 : i32
    %435 = arith.cmpi ne, %434, %c0_i32_128 : i32
    cf.cond_br %435, ^bb80, ^bb90
  ^bb89:  // pred: ^bb86
    %c5_i32_129 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_129) : (i32) -> ()
    cf.br ^bb88
  ^bb90:  // pred: ^bb88
    cf.br ^bb79
  ^bb91:  // pred: ^bb78
    %436 = llvm.load %10 : !llvm.ptr -> i32
    %437 = llvm.load %4 : !llvm.ptr -> i32
    %438 = llvm.load %5 : !llvm.ptr -> i32
    %439 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64_130 = arith.constant 12 : i64
    %440 = arith.extui %439 : i32 to i64
    %441 = arith.addi %440, %c12_i64_130 : i64
    %442 = llvm.getelementptr %15[%441] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %443 = llvm.load volatile %442 {alignment = 1 : i64} : !llvm.ptr -> i32
    %444 = arith.cmpi ult, %443, %39 : i32
    cf.cond_br %444, ^bb92, ^bb93
  ^bb92:  // 2 preds: ^bb91, ^bb93
    %445 = llvm.getelementptr inbounds %37[%443] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %446 = llvm.load %445 : !llvm.ptr -> !llvm.ptr
    %447 = llvm.ptrtoint %446 : !llvm.ptr to i64
    %c0_i64_131 = arith.constant 0 : i64
    %448 = arith.cmpi eq, %447, %c0_i64_131 : i64
    cf.cond_br %448, ^bb95, ^bb94
  ^bb93:  // pred: ^bb91
    %c3_i32_132 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_132) : (i32) -> ()
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb92, ^bb95
    %449 = llvm.getelementptr %446[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %450 = llvm.getelementptr %446[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %451 = llvm.getelementptr %446[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %452 = llvm.load %449 : !llvm.ptr -> !llvm.ptr
    %453 = llvm.load %451 : !llvm.ptr -> !llvm.ptr
    %454 = llvm.ptrtoint %452 : !llvm.ptr to i64
    %c0_i64_133 = arith.constant 0 : i64
    %455 = arith.cmpi eq, %454, %c0_i64_133 : i64
    cf.cond_br %455, ^bb97, ^bb96
  ^bb95:  // pred: ^bb92
    %c4_i32_134 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_134) : (i32) -> ()
    cf.br ^bb94
  ^bb96:  // 2 preds: ^bb94, ^bb97
    %456 = llvm.load %450 : !llvm.ptr -> i32
    %457 = arith.cmpi ne, %17, %456 : i32
    cf.cond_br %457, ^bb99, ^bb98
  ^bb97:  // pred: ^bb94
    %c3_i32_135 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_135) : (i32) -> ()
    cf.br ^bb96
  ^bb98:  // 2 preds: ^bb96, ^bb99
    %458 = llvm.call %452(%453, %436, %437, %438) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_136 = arith.constant 0 : i32
    %459 = arith.cmpi ne, %458, %c0_i32_136 : i32
    cf.cond_br %459, ^bb36, ^bb100
  ^bb99:  // pred: ^bb96
    %c5_i32_137 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_137) : (i32) -> ()
    cf.br ^bb98
  ^bb100:  // pred: ^bb98
    %c0_i32_138 = arith.constant 0 : i32
    llvm.store %c0_i32_138, %1 : i32, !llvm.ptr
    cf.br ^bb102
  ^bb101:  // pred: ^bb113
    %460 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_139 = arith.constant -1 : i32
    %461 = arith.addi %460, %c-1_i32_139 : i32
    %462 = llvm.load %6 : !llvm.ptr -> i32
    %463 = arith.cmpi ult, %461, %462 : i32
    %464 = arith.extui %463 : i1 to i32
    cf.br ^bb2(%464 : i32)
  ^bb102:  // 2 preds: ^bb100, ^bb111
    %465 = llvm.load %6 : !llvm.ptr -> i32
    %466 = llvm.load %1 : !llvm.ptr -> i32
    %467 = arith.cmpi eq, %465, %466 : i32
    %468 = arith.extui %467 : i1 to i32
    %c0_i32_140 = arith.constant 0 : i32
    %469 = arith.cmpi eq, %468, %c0_i32_140 : i32
    %470 = arith.extui %469 : i1 to i32
    %c0_i32_141 = arith.constant 0 : i32
    %471 = arith.cmpi ne, %470, %c0_i32_141 : i32
    cf.cond_br %471, ^bb103, ^bb104
  ^bb103:  // pred: ^bb102
    %472 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_142 = arith.constant 1 : i32
    %473 = arith.addi %472, %c1_i32_142 : i32
    llvm.store %473, %1 : i32, !llvm.ptr
    %474 = llvm.load %10 : !llvm.ptr -> i32
    %475 = llvm.load %9 : !llvm.ptr -> i32
    %476 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_143 = arith.constant 16 : i64
    %477 = arith.extui %476 : i32 to i64
    %478 = arith.addi %477, %c16_i64_143 : i64
    %479 = llvm.getelementptr %15[%478] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %480 = llvm.load volatile %479 {alignment = 1 : i64} : !llvm.ptr -> i32
    %481 = arith.cmpi ult, %480, %42 : i32
    cf.cond_br %481, ^bb105, ^bb106
  ^bb104:  // pred: ^bb102
    %482 = llvm.load %6 : !llvm.ptr -> i32
    %483 = llvm.load %6 : !llvm.ptr -> i32
    %484 = arith.cmpi ult, %482, %483 : i32
    %485 = arith.extui %484 : i1 to i32
    cf.br ^bb2(%485 : i32)
  ^bb105:  // 2 preds: ^bb103, ^bb106
    %486 = llvm.getelementptr inbounds %40[%480] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %487 = llvm.load %486 : !llvm.ptr -> !llvm.ptr
    %488 = llvm.ptrtoint %487 : !llvm.ptr to i64
    %c0_i64_144 = arith.constant 0 : i64
    %489 = arith.cmpi eq, %488, %c0_i64_144 : i64
    cf.cond_br %489, ^bb108, ^bb107
  ^bb106:  // pred: ^bb103
    %c3_i32_145 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_145) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // 2 preds: ^bb105, ^bb108
    %490 = llvm.getelementptr %487[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %491 = llvm.getelementptr %487[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %492 = llvm.getelementptr %487[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %493 = llvm.load %490 : !llvm.ptr -> !llvm.ptr
    %494 = llvm.load %492 : !llvm.ptr -> !llvm.ptr
    %495 = llvm.ptrtoint %493 : !llvm.ptr to i64
    %c0_i64_146 = arith.constant 0 : i64
    %496 = arith.cmpi eq, %495, %c0_i64_146 : i64
    cf.cond_br %496, ^bb110, ^bb109
  ^bb108:  // pred: ^bb105
    %c4_i32_147 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_147) : (i32) -> ()
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb107, ^bb110
    %497 = llvm.load %491 : !llvm.ptr -> i32
    %498 = arith.cmpi ne, %24, %497 : i32
    cf.cond_br %498, ^bb112, ^bb111
  ^bb110:  // pred: ^bb107
    %c3_i32_148 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_148) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // 2 preds: ^bb109, ^bb112
    %499 = llvm.call %493(%494, %474, %475) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_149 = arith.constant 0 : i32
    %500 = arith.cmpi eq, %499, %c0_i32_149 : i32
    %501 = arith.extui %500 : i1 to i32
    %c0_i32_150 = arith.constant 0 : i32
    %502 = arith.cmpi ne, %501, %c0_i32_150 : i32
    cf.cond_br %502, ^bb102, ^bb113
  ^bb112:  // pred: ^bb109
    %c5_i32_151 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_151) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // pred: ^bb111
    cf.br ^bb101
  }
  func.func @f167(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1050820_i32 = arith.constant 1050820 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f146(%arg0, %2, %c1050820_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f168(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %15 = arith.addi %14, %c3_i32 : i32
    %c-4_i32 = arith.constant -4 : i32
    %16 = arith.andi %15, %c-4_i32 : i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %18 = arith.subi %16, %17 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %19 = arith.cmpi ult, %13, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_9 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2(%22: i32):  // 3 preds: ^bb3, ^bb32, ^bb36
    return %22 : i32
  ^bb3:  // 3 preds: ^bb24, ^bb37, ^bb44
    %23 = llvm.load %8 : !llvm.ptr -> i32
    cf.br ^bb2(%23 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_10 : i32
    cf.cond_br %25, ^bb35, ^bb36
  ^bb5:  // pred: ^bb1
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %28 = arith.subi %26, %27 : i32
    llvm.store %28, %4 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %29 = arith.cmpi ult, %28, %c4_i32 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_11 : i32
    cf.cond_br %31, ^bb4, ^bb6
  ^bb6:  // pred: ^bb5
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_12 = arith.constant 3 : i32
    %33 = arith.andi %32, %c3_i32_12 : i32
    llvm.store %33, %5 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %6 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    llvm.store %c0_i32_14, %1 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %36 = arith.cmpi eq, %34, %35 : i32
    %37 = arith.extui %36 : i1 to i32
    llvm.store %37, %7 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_15 : i32
    cf.cond_br %38, ^bb7, ^bb8
  ^bb7:  // 3 preds: ^bb6, ^bb9, ^bb16
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_16 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_17 : i32
    cf.cond_br %45, ^bb19, ^bb20
  ^bb8:  // pred: ^bb6
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %48 = arith.subi %46, %47 : i32
    llvm.store %48, %8 : i32, !llvm.ptr
    %c-4_i32_19 = arith.constant -4 : i32
    %49 = arith.cmpi ule, %48, %c-4_i32_19 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_20 : i32
    cf.cond_br %51, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %52 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_21 : i32
    cf.cond_br %53, ^bb7, ^bb15
  ^bb10:  // pred: ^bb8
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %9 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %9 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb14
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb13
    %54 = llvm.load %1 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %9 : !llvm.ptr -> i32
    %57 = arith.addi %55, %56 : i32
    llvm.store %57, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64 : i64
    %60 = llvm.getelementptr %12[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i8
    %62 = arith.extsi %61 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %63 = arith.cmpi sgt, %62, %c-65_i32 : i32
    %64 = arith.extui %63 : i1 to i32
    %65 = arith.addi %54, %64 : i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %67 = arith.addi %66, %c1_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_25 : i64
    %70 = llvm.getelementptr %12[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i8
    %72 = arith.extsi %71 : i8 to i32
    %c-65_i32_26 = arith.constant -65 : i32
    %73 = arith.cmpi sgt, %72, %c-65_i32_26 : i32
    %74 = arith.extui %73 : i1 to i32
    %75 = arith.addi %65, %74 : i32
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %77 = arith.addi %76, %c2_i32 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_27 : i64
    %80 = llvm.getelementptr %12[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i8
    %82 = arith.extsi %81 : i8 to i32
    %c-65_i32_28 = arith.constant -65 : i32
    %83 = arith.cmpi sgt, %82, %c-65_i32_28 : i32
    %84 = arith.extui %83 : i1 to i32
    %85 = arith.addi %75, %84 : i32
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_29 = arith.constant 3 : i32
    %87 = arith.addi %86, %c3_i32_29 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c0_i64_30 : i64
    %90 = llvm.getelementptr %12[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load volatile %90 {alignment = 1 : i64} : !llvm.ptr -> i8
    %92 = arith.extsi %91 : i8 to i32
    %c-65_i32_31 = arith.constant -65 : i32
    %93 = arith.cmpi sgt, %92, %c-65_i32_31 : i32
    %94 = arith.extui %93 : i1 to i32
    %95 = arith.addi %85, %94 : i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %96 = llvm.load %9 : !llvm.ptr -> i32
    %c4_i32_32 = arith.constant 4 : i32
    %97 = arith.addi %96, %c4_i32_32 : i32
    llvm.store %97, %9 : i32, !llvm.ptr
    %c0_i32_33 = arith.constant 0 : i32
    %98 = arith.cmpi ne, %97, %c0_i32_33 : i32
    cf.cond_br %98, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // pred: ^bb9
    %99 = llvm.load %0 : !llvm.ptr -> i32
    %100 = llvm.load %9 : !llvm.ptr -> i32
    %101 = arith.addi %99, %100 : i32
    llvm.store %101, %2 : i32, !llvm.ptr
    cf.br ^bb17
  ^bb16:  // pred: ^bb18
    cf.br ^bb7
  ^bb17:  // 2 preds: ^bb15, ^bb17
    %102 = llvm.load %1 : !llvm.ptr -> i32
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_34 : i64
    %106 = llvm.getelementptr %12[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i8
    %108 = arith.extsi %107 : i8 to i32
    %c-65_i32_35 = arith.constant -65 : i32
    %109 = arith.cmpi sgt, %108, %c-65_i32_35 : i32
    %110 = arith.extui %109 : i1 to i32
    %111 = arith.addi %102, %110 : i32
    llvm.store %111, %1 : i32, !llvm.ptr
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_36 = arith.constant 1 : i32
    %113 = arith.addi %112, %c1_i32_36 : i32
    llvm.store %113, %2 : i32, !llvm.ptr
    %114 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_37 = arith.constant 1 : i32
    %115 = arith.addi %114, %c1_i32_37 : i32
    llvm.store %115, %8 : i32, !llvm.ptr
    %c0_i32_38 = arith.constant 0 : i32
    %116 = arith.cmpi ne, %115, %c0_i32_38 : i32
    cf.cond_br %116, ^bb17, ^bb18
  ^bb18:  // pred: ^bb17
    cf.br ^bb16
  ^bb19:  // 4 preds: ^bb7, ^bb20, ^bb21, ^bb22
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_39 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %118 = arith.cmpi ule, %c2_i32_39, %c31_i32 : i32
    %119 = scf.if %118 -> (i32) {
      %421 = arith.shrui %117, %c2_i32_39 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %119, %3 : i32, !llvm.ptr
    %120 = llvm.load %6 : !llvm.ptr -> i32
    %121 = llvm.load %1 : !llvm.ptr -> i32
    %122 = arith.addi %120, %121 : i32
    llvm.store %122, %8 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb20:  // pred: ^bb7
    %123 = llvm.load %9 : !llvm.ptr -> i32
    %124 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_40 = arith.constant -4 : i32
    %125 = arith.andi %124, %c-4_i32_40 : i32
    %126 = arith.addi %123, %125 : i32
    llvm.store %126, %2 : i32, !llvm.ptr
    %c0_i64_41 = arith.constant 0 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c0_i64_41 : i64
    %129 = llvm.getelementptr %12[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i8
    %131 = arith.extsi %130 : i8 to i32
    %c-65_i32_42 = arith.constant -65 : i32
    %132 = arith.cmpi sgt, %131, %c-65_i32_42 : i32
    %133 = arith.extui %132 : i1 to i32
    llvm.store %133, %6 : i32, !llvm.ptr
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_43 = arith.constant 1 : i32
    %135 = arith.cmpi eq, %134, %c1_i32_43 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_44 : i32
    cf.cond_br %137, ^bb19, ^bb21
  ^bb21:  // pred: ^bb20
    %138 = llvm.load %6 : !llvm.ptr -> i32
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c1_i64 : i64
    %142 = llvm.getelementptr %12[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i8
    %144 = arith.extsi %143 : i8 to i32
    %c-65_i32_45 = arith.constant -65 : i32
    %145 = arith.cmpi sgt, %144, %c-65_i32_45 : i32
    %146 = arith.extui %145 : i1 to i32
    %147 = arith.addi %138, %146 : i32
    llvm.store %147, %6 : i32, !llvm.ptr
    %148 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32_46 = arith.constant 2 : i32
    %149 = arith.cmpi eq, %148, %c2_i32_46 : i32
    %150 = arith.extui %149 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %151 = arith.cmpi ne, %150, %c0_i32_47 : i32
    cf.cond_br %151, ^bb19, ^bb22
  ^bb22:  // pred: ^bb21
    %152 = llvm.load %6 : !llvm.ptr -> i32
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c2_i64 : i64
    %156 = llvm.getelementptr %12[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load volatile %156 {alignment = 1 : i64} : !llvm.ptr -> i8
    %158 = arith.extsi %157 : i8 to i32
    %c-65_i32_48 = arith.constant -65 : i32
    %159 = arith.cmpi sgt, %158, %c-65_i32_48 : i32
    %160 = arith.extui %159 : i1 to i32
    %161 = arith.addi %152, %160 : i32
    llvm.store %161, %6 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb23:  // pred: ^bb31
    %162 = llvm.load %4 : !llvm.ptr -> i32
    %163 = llvm.load %6 : !llvm.ptr -> i32
    %c252_i32 = arith.constant 252 : i32
    %164 = arith.andi %163, %c252_i32 : i32
    %c2_i32_49 = arith.constant 2 : i32
    %c31_i32_50 = arith.constant 31 : i32
    %165 = arith.cmpi ule, %c2_i32_49, %c31_i32_50 : i32
    %166 = scf.if %165 -> (i32) {
      %421 = arith.shli %164, %c2_i32_49 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %167 = arith.addi %162, %166 : i32
    llvm.store %167, %2 : i32, !llvm.ptr
    %c0_i64_51 = arith.constant 0 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c0_i64_51 : i64
    %170 = llvm.getelementptr %12[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %171, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %172 = arith.xori %171, %c-1_i32 : i32
    %c7_i32 = arith.constant 7 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %173 = arith.cmpi ule, %c7_i32, %c31_i32_52 : i32
    %174 = scf.if %173 -> (i32) {
      %421 = arith.shrui %172, %c7_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %175 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32_53 = arith.constant 31 : i32
    %176 = arith.cmpi ule, %c6_i32, %c31_i32_53 : i32
    %177 = scf.if %176 -> (i32) {
      %421 = arith.shrui %175, %c6_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %178 = arith.ori %174, %177 : i32
    %c16843009_i32 = arith.constant 16843009 : i32
    %179 = arith.andi %178, %c16843009_i32 : i32
    llvm.store %179, %1 : i32, !llvm.ptr
    %180 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_54 = arith.constant 1 : i32
    %181 = arith.cmpi eq, %180, %c1_i32_54 : i32
    %182 = arith.extui %181 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %183 = arith.cmpi ne, %182, %c0_i32_55 : i32
    cf.cond_br %183, ^bb32, ^bb33
  ^bb24:  // 2 preds: ^bb19, ^bb26
    %184 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %184, %4 : i32, !llvm.ptr
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_56 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %185, %c0_i32_56 : i32
    %187 = arith.extui %186 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %188 = arith.cmpi ne, %187, %c0_i32_57 : i32
    cf.cond_br %188, ^bb3, ^bb25
  ^bb25:  // pred: ^bb24
    %189 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %190 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32_58 = arith.constant 192 : i32
    %191 = arith.cmpi ult, %190, %c192_i32_58 : i32
    %192 = arith.extui %191 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %193 = arith.cmpi ne, %192, %c0_i32_59 : i32
    %194 = arith.select %193, %189, %c192_i32 : i32
    llvm.store %194, %6 : i32, !llvm.ptr
    %c3_i32_60 = arith.constant 3 : i32
    %195 = arith.andi %194, %c3_i32_60 : i32
    llvm.store %195, %7 : i32, !llvm.ptr
    %196 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_61 = arith.constant 2 : i32
    %c31_i32_62 = arith.constant 31 : i32
    %197 = arith.cmpi ule, %c2_i32_61, %c31_i32_62 : i32
    %198 = scf.if %197 -> (i32) {
      %421 = arith.shli %196, %c2_i32_61 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %198, %5 : i32, !llvm.ptr
    %c0_i32_63 = arith.constant 0 : i32
    llvm.store %c0_i32_63, %2 : i32, !llvm.ptr
    %199 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_64 = arith.constant 4 : i32
    %200 = arith.cmpi ult, %199, %c4_i32_64 : i32
    %201 = arith.extui %200 : i1 to i32
    %c0_i32_65 = arith.constant 0 : i32
    %202 = arith.cmpi ne, %201, %c0_i32_65 : i32
    cf.cond_br %202, ^bb26, ^bb27
  ^bb26:  // 2 preds: ^bb25, ^bb28
    %203 = llvm.load %3 : !llvm.ptr -> i32
    %204 = llvm.load %6 : !llvm.ptr -> i32
    %205 = arith.subi %203, %204 : i32
    llvm.store %205, %3 : i32, !llvm.ptr
    %206 = llvm.load %4 : !llvm.ptr -> i32
    %207 = llvm.load %5 : !llvm.ptr -> i32
    %208 = arith.addi %206, %207 : i32
    llvm.store %208, %9 : i32, !llvm.ptr
    %209 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_66 = arith.constant 31 : i32
    %210 = arith.cmpi ule, %c8_i32, %c31_i32_66 : i32
    %211 = scf.if %210 -> (i32) {
      %421 = arith.shrui %209, %c8_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %c16711935_i32 = arith.constant 16711935 : i32
    %212 = arith.andi %211, %c16711935_i32 : i32
    %213 = llvm.load %2 : !llvm.ptr -> i32
    %c16711935_i32_67 = arith.constant 16711935 : i32
    %214 = arith.andi %213, %c16711935_i32_67 : i32
    %215 = arith.addi %212, %214 : i32
    %c65537_i32 = arith.constant 65537 : i32
    %216 = arith.muli %215, %c65537_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32_68 = arith.constant 31 : i32
    %217 = arith.cmpi ule, %c16_i32, %c31_i32_68 : i32
    %218 = scf.if %217 -> (i32) {
      %421 = arith.shrui %216, %c16_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %219 = llvm.load %8 : !llvm.ptr -> i32
    %220 = arith.addi %218, %219 : i32
    llvm.store %220, %8 : i32, !llvm.ptr
    %221 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_69 = arith.constant 0 : i32
    %222 = arith.cmpi eq, %221, %c0_i32_69 : i32
    %223 = arith.extui %222 : i1 to i32
    %c0_i32_70 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_70 : i32
    cf.cond_br %224, ^bb24, ^bb31
  ^bb27:  // pred: ^bb25
    %225 = llvm.load %4 : !llvm.ptr -> i32
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %c1008_i32 = arith.constant 1008 : i32
    %227 = arith.andi %226, %c1008_i32 : i32
    %228 = arith.addi %225, %227 : i32
    llvm.store %228, %0 : i32, !llvm.ptr
    %c0_i32_71 = arith.constant 0 : i32
    llvm.store %c0_i32_71, %2 : i32, !llvm.ptr
    %229 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %229, %1 : i32, !llvm.ptr
    cf.br ^bb29
  ^bb28:  // pred: ^bb30
    cf.br ^bb26
  ^bb29:  // 2 preds: ^bb27, ^bb29
    %230 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %231 = arith.extui %230 : i32 to i64
    %232 = arith.addi %231, %c12_i64 : i64
    %233 = llvm.getelementptr %12[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %234 = llvm.load volatile %233 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %234, %9 : i32, !llvm.ptr
    %c-1_i32_72 = arith.constant -1 : i32
    %235 = arith.xori %234, %c-1_i32_72 : i32
    %c7_i32_73 = arith.constant 7 : i32
    %c31_i32_74 = arith.constant 31 : i32
    %236 = arith.cmpi ule, %c7_i32_73, %c31_i32_74 : i32
    %237 = scf.if %236 -> (i32) {
      %421 = arith.shrui %235, %c7_i32_73 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %238 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_75 = arith.constant 6 : i32
    %c31_i32_76 = arith.constant 31 : i32
    %239 = arith.cmpi ule, %c6_i32_75, %c31_i32_76 : i32
    %240 = scf.if %239 -> (i32) {
      %421 = arith.shrui %238, %c6_i32_75 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %241 = arith.ori %237, %240 : i32
    %c16843009_i32_77 = arith.constant 16843009 : i32
    %242 = arith.andi %241, %c16843009_i32_77 : i32
    %243 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c8_i64 : i64
    %246 = llvm.getelementptr %12[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load volatile %246 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %247, %9 : i32, !llvm.ptr
    %c-1_i32_78 = arith.constant -1 : i32
    %248 = arith.xori %247, %c-1_i32_78 : i32
    %c7_i32_79 = arith.constant 7 : i32
    %c31_i32_80 = arith.constant 31 : i32
    %249 = arith.cmpi ule, %c7_i32_79, %c31_i32_80 : i32
    %250 = scf.if %249 -> (i32) {
      %421 = arith.shrui %248, %c7_i32_79 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %251 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_81 = arith.constant 6 : i32
    %c31_i32_82 = arith.constant 31 : i32
    %252 = arith.cmpi ule, %c6_i32_81, %c31_i32_82 : i32
    %253 = scf.if %252 -> (i32) {
      %421 = arith.shrui %251, %c6_i32_81 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %254 = arith.ori %250, %253 : i32
    %c16843009_i32_83 = arith.constant 16843009 : i32
    %255 = arith.andi %254, %c16843009_i32_83 : i32
    %256 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c4_i64 : i64
    %259 = llvm.getelementptr %12[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %260, %9 : i32, !llvm.ptr
    %c-1_i32_84 = arith.constant -1 : i32
    %261 = arith.xori %260, %c-1_i32_84 : i32
    %c7_i32_85 = arith.constant 7 : i32
    %c31_i32_86 = arith.constant 31 : i32
    %262 = arith.cmpi ule, %c7_i32_85, %c31_i32_86 : i32
    %263 = scf.if %262 -> (i32) {
      %421 = arith.shrui %261, %c7_i32_85 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %264 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_87 = arith.constant 6 : i32
    %c31_i32_88 = arith.constant 31 : i32
    %265 = arith.cmpi ule, %c6_i32_87, %c31_i32_88 : i32
    %266 = scf.if %265 -> (i32) {
      %421 = arith.shrui %264, %c6_i32_87 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %267 = arith.ori %263, %266 : i32
    %c16843009_i32_89 = arith.constant 16843009 : i32
    %268 = arith.andi %267, %c16843009_i32_89 : i32
    %269 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_90 = arith.constant 0 : i64
    %270 = arith.extui %269 : i32 to i64
    %271 = arith.addi %270, %c0_i64_90 : i64
    %272 = llvm.getelementptr %12[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = llvm.load volatile %272 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %273, %9 : i32, !llvm.ptr
    %c-1_i32_91 = arith.constant -1 : i32
    %274 = arith.xori %273, %c-1_i32_91 : i32
    %c7_i32_92 = arith.constant 7 : i32
    %c31_i32_93 = arith.constant 31 : i32
    %275 = arith.cmpi ule, %c7_i32_92, %c31_i32_93 : i32
    %276 = scf.if %275 -> (i32) {
      %421 = arith.shrui %274, %c7_i32_92 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %277 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_94 = arith.constant 6 : i32
    %c31_i32_95 = arith.constant 31 : i32
    %278 = arith.cmpi ule, %c6_i32_94, %c31_i32_95 : i32
    %279 = scf.if %278 -> (i32) {
      %421 = arith.shrui %277, %c6_i32_94 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %280 = arith.ori %276, %279 : i32
    %c16843009_i32_96 = arith.constant 16843009 : i32
    %281 = arith.andi %280, %c16843009_i32_96 : i32
    %282 = llvm.load %2 : !llvm.ptr -> i32
    %283 = arith.addi %281, %282 : i32
    %284 = arith.addi %268, %283 : i32
    %285 = arith.addi %255, %284 : i32
    %286 = arith.addi %242, %285 : i32
    llvm.store %286, %2 : i32, !llvm.ptr
    %287 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_97 = arith.constant 16 : i32
    %288 = arith.addi %287, %c16_i32_97 : i32
    llvm.store %288, %1 : i32, !llvm.ptr
    %289 = llvm.load %0 : !llvm.ptr -> i32
    %290 = arith.cmpi eq, %288, %289 : i32
    %291 = arith.extui %290 : i1 to i32
    %c0_i32_98 = arith.constant 0 : i32
    %292 = arith.cmpi eq, %291, %c0_i32_98 : i32
    %293 = arith.extui %292 : i1 to i32
    %c0_i32_99 = arith.constant 0 : i32
    %294 = arith.cmpi ne, %293, %c0_i32_99 : i32
    cf.cond_br %294, ^bb29, ^bb30
  ^bb30:  // pred: ^bb29
    cf.br ^bb28
  ^bb31:  // pred: ^bb26
    cf.br ^bb23
  ^bb32:  // 3 preds: ^bb23, ^bb33, ^bb34
    %295 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_100 = arith.constant 8 : i32
    %c31_i32_101 = arith.constant 31 : i32
    %296 = arith.cmpi ule, %c8_i32_100, %c31_i32_101 : i32
    %297 = scf.if %296 -> (i32) {
      %421 = arith.shrui %295, %c8_i32_100 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %c459007_i32 = arith.constant 459007 : i32
    %298 = arith.andi %297, %c459007_i32 : i32
    %299 = llvm.load %1 : !llvm.ptr -> i32
    %c16711935_i32_102 = arith.constant 16711935 : i32
    %300 = arith.andi %299, %c16711935_i32_102 : i32
    %301 = arith.addi %298, %300 : i32
    %c65537_i32_103 = arith.constant 65537 : i32
    %302 = arith.muli %301, %c65537_i32_103 : i32
    %c16_i32_104 = arith.constant 16 : i32
    %c31_i32_105 = arith.constant 31 : i32
    %303 = arith.cmpi ule, %c16_i32_104, %c31_i32_105 : i32
    %304 = scf.if %303 -> (i32) {
      %421 = arith.shrui %302, %c16_i32_104 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %305 = llvm.load %8 : !llvm.ptr -> i32
    %306 = arith.addi %304, %305 : i32
    cf.br ^bb2(%306 : i32)
  ^bb33:  // pred: ^bb23
    %307 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_106 = arith.constant 4 : i64
    %308 = arith.extui %307 : i32 to i64
    %309 = arith.addi %308, %c4_i64_106 : i64
    %310 = llvm.getelementptr %12[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load volatile %310 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %311, %9 : i32, !llvm.ptr
    %c-1_i32_107 = arith.constant -1 : i32
    %312 = arith.xori %311, %c-1_i32_107 : i32
    %c7_i32_108 = arith.constant 7 : i32
    %c31_i32_109 = arith.constant 31 : i32
    %313 = arith.cmpi ule, %c7_i32_108, %c31_i32_109 : i32
    %314 = scf.if %313 -> (i32) {
      %421 = arith.shrui %312, %c7_i32_108 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %315 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_110 = arith.constant 6 : i32
    %c31_i32_111 = arith.constant 31 : i32
    %316 = arith.cmpi ule, %c6_i32_110, %c31_i32_111 : i32
    %317 = scf.if %316 -> (i32) {
      %421 = arith.shrui %315, %c6_i32_110 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %318 = arith.ori %314, %317 : i32
    %c16843009_i32_112 = arith.constant 16843009 : i32
    %319 = arith.andi %318, %c16843009_i32_112 : i32
    %320 = llvm.load %1 : !llvm.ptr -> i32
    %321 = arith.addi %319, %320 : i32
    llvm.store %321, %1 : i32, !llvm.ptr
    %322 = llvm.load %7 : !llvm.ptr -> i32
    %c2_i32_113 = arith.constant 2 : i32
    %323 = arith.cmpi eq, %322, %c2_i32_113 : i32
    %324 = arith.extui %323 : i1 to i32
    %c0_i32_114 = arith.constant 0 : i32
    %325 = arith.cmpi ne, %324, %c0_i32_114 : i32
    cf.cond_br %325, ^bb32, ^bb34
  ^bb34:  // pred: ^bb33
    %326 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_115 = arith.constant 8 : i64
    %327 = arith.extui %326 : i32 to i64
    %328 = arith.addi %327, %c8_i64_115 : i64
    %329 = llvm.getelementptr %12[%328] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %330 = llvm.load volatile %329 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %330, %2 : i32, !llvm.ptr
    %c-1_i32_116 = arith.constant -1 : i32
    %331 = arith.xori %330, %c-1_i32_116 : i32
    %c7_i32_117 = arith.constant 7 : i32
    %c31_i32_118 = arith.constant 31 : i32
    %332 = arith.cmpi ule, %c7_i32_117, %c31_i32_118 : i32
    %333 = scf.if %332 -> (i32) {
      %421 = arith.shrui %331, %c7_i32_117 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %334 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i32_119 = arith.constant 6 : i32
    %c31_i32_120 = arith.constant 31 : i32
    %335 = arith.cmpi ule, %c6_i32_119, %c31_i32_120 : i32
    %336 = scf.if %335 -> (i32) {
      %421 = arith.shrui %334, %c6_i32_119 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %337 = arith.ori %333, %336 : i32
    %c16843009_i32_121 = arith.constant 16843009 : i32
    %338 = arith.andi %337, %c16843009_i32_121 : i32
    %339 = llvm.load %1 : !llvm.ptr -> i32
    %340 = arith.addi %338, %339 : i32
    llvm.store %340, %1 : i32, !llvm.ptr
    cf.br ^bb32
  ^bb35:  // pred: ^bb4
    %341 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_122 = arith.constant 3 : i32
    %342 = arith.andi %341, %c3_i32_122 : i32
    llvm.store %342, %9 : i32, !llvm.ptr
    %343 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_123 = arith.constant 4 : i32
    %344 = arith.cmpi uge, %343, %c4_i32_123 : i32
    %345 = arith.extui %344 : i1 to i32
    %c0_i32_124 = arith.constant 0 : i32
    %346 = arith.cmpi ne, %345, %c0_i32_124 : i32
    cf.cond_br %346, ^bb38, ^bb39
  ^bb36:  // pred: ^bb4
    %c0_i32_125 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_125 : i32)
  ^bb37:  // 2 preds: ^bb39, ^bb40
    %347 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_126 = arith.constant 0 : i32
    %348 = arith.cmpi eq, %347, %c0_i32_126 : i32
    %349 = arith.extui %348 : i1 to i32
    %c0_i32_127 = arith.constant 0 : i32
    %350 = arith.cmpi ne, %349, %c0_i32_127 : i32
    cf.cond_br %350, ^bb3, ^bb43
  ^bb38:  // pred: ^bb35
    %351 = llvm.load %1 : !llvm.ptr -> i32
    %c-4_i32_128 = arith.constant -4 : i32
    %352 = arith.andi %351, %c-4_i32_128 : i32
    llvm.store %352, %3 : i32, !llvm.ptr
    %c0_i32_129 = arith.constant 0 : i32
    llvm.store %c0_i32_129, %8 : i32, !llvm.ptr
    %c0_i32_130 = arith.constant 0 : i32
    llvm.store %c0_i32_130, %2 : i32, !llvm.ptr
    cf.br ^bb41
  ^bb39:  // pred: ^bb35
    %c0_i32_131 = arith.constant 0 : i32
    llvm.store %c0_i32_131, %8 : i32, !llvm.ptr
    %c0_i32_132 = arith.constant 0 : i32
    llvm.store %c0_i32_132, %2 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb40:  // pred: ^bb42
    cf.br ^bb37
  ^bb41:  // 2 preds: ^bb38, ^bb41
    %353 = llvm.load %8 : !llvm.ptr -> i32
    %354 = llvm.load %0 : !llvm.ptr -> i32
    %355 = llvm.load %2 : !llvm.ptr -> i32
    %356 = arith.addi %354, %355 : i32
    llvm.store %356, %1 : i32, !llvm.ptr
    %c0_i64_133 = arith.constant 0 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c0_i64_133 : i64
    %359 = llvm.getelementptr %12[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load volatile %359 {alignment = 1 : i64} : !llvm.ptr -> i8
    %361 = arith.extsi %360 : i8 to i32
    %c-65_i32_134 = arith.constant -65 : i32
    %362 = arith.cmpi sgt, %361, %c-65_i32_134 : i32
    %363 = arith.extui %362 : i1 to i32
    %364 = arith.addi %353, %363 : i32
    %365 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_135 = arith.constant 1 : i32
    %366 = arith.addi %365, %c1_i32_135 : i32
    %c0_i64_136 = arith.constant 0 : i64
    %367 = arith.extui %366 : i32 to i64
    %368 = arith.addi %367, %c0_i64_136 : i64
    %369 = llvm.getelementptr %12[%368] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %370 = llvm.load volatile %369 {alignment = 1 : i64} : !llvm.ptr -> i8
    %371 = arith.extsi %370 : i8 to i32
    %c-65_i32_137 = arith.constant -65 : i32
    %372 = arith.cmpi sgt, %371, %c-65_i32_137 : i32
    %373 = arith.extui %372 : i1 to i32
    %374 = arith.addi %364, %373 : i32
    %375 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32_138 = arith.constant 2 : i32
    %376 = arith.addi %375, %c2_i32_138 : i32
    %c0_i64_139 = arith.constant 0 : i64
    %377 = arith.extui %376 : i32 to i64
    %378 = arith.addi %377, %c0_i64_139 : i64
    %379 = llvm.getelementptr %12[%378] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %380 = llvm.load volatile %379 {alignment = 1 : i64} : !llvm.ptr -> i8
    %381 = arith.extsi %380 : i8 to i32
    %c-65_i32_140 = arith.constant -65 : i32
    %382 = arith.cmpi sgt, %381, %c-65_i32_140 : i32
    %383 = arith.extui %382 : i1 to i32
    %384 = arith.addi %374, %383 : i32
    %385 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_141 = arith.constant 3 : i32
    %386 = arith.addi %385, %c3_i32_141 : i32
    %c0_i64_142 = arith.constant 0 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c0_i64_142 : i64
    %389 = llvm.getelementptr %12[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i8
    %391 = arith.extsi %390 : i8 to i32
    %c-65_i32_143 = arith.constant -65 : i32
    %392 = arith.cmpi sgt, %391, %c-65_i32_143 : i32
    %393 = arith.extui %392 : i1 to i32
    %394 = arith.addi %384, %393 : i32
    llvm.store %394, %8 : i32, !llvm.ptr
    %395 = llvm.load %3 : !llvm.ptr -> i32
    %396 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_144 = arith.constant 4 : i32
    %397 = arith.addi %396, %c4_i32_144 : i32
    llvm.store %397, %2 : i32, !llvm.ptr
    %398 = arith.cmpi eq, %395, %397 : i32
    %399 = arith.extui %398 : i1 to i32
    %c0_i32_145 = arith.constant 0 : i32
    %400 = arith.cmpi eq, %399, %c0_i32_145 : i32
    %401 = arith.extui %400 : i1 to i32
    %c0_i32_146 = arith.constant 0 : i32
    %402 = arith.cmpi ne, %401, %c0_i32_146 : i32
    cf.cond_br %402, ^bb41, ^bb42
  ^bb42:  // pred: ^bb41
    cf.br ^bb40
  ^bb43:  // pred: ^bb37
    %403 = llvm.load %0 : !llvm.ptr -> i32
    %404 = llvm.load %2 : !llvm.ptr -> i32
    %405 = arith.addi %403, %404 : i32
    llvm.store %405, %1 : i32, !llvm.ptr
    cf.br ^bb45
  ^bb44:  // pred: ^bb46
    cf.br ^bb3
  ^bb45:  // 2 preds: ^bb43, ^bb45
    %406 = llvm.load %8 : !llvm.ptr -> i32
    %407 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_147 = arith.constant 0 : i64
    %408 = arith.extui %407 : i32 to i64
    %409 = arith.addi %408, %c0_i64_147 : i64
    %410 = llvm.getelementptr %12[%409] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %411 = llvm.load volatile %410 {alignment = 1 : i64} : !llvm.ptr -> i8
    %412 = arith.extsi %411 : i8 to i32
    %c-65_i32_148 = arith.constant -65 : i32
    %413 = arith.cmpi sgt, %412, %c-65_i32_148 : i32
    %414 = arith.extui %413 : i1 to i32
    %415 = arith.addi %406, %414 : i32
    llvm.store %415, %8 : i32, !llvm.ptr
    %416 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_149 = arith.constant 1 : i32
    %417 = arith.addi %416, %c1_i32_149 : i32
    llvm.store %417, %1 : i32, !llvm.ptr
    %418 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32_150 = arith.constant -1 : i32
    %419 = arith.addi %418, %c-1_i32_150 : i32
    llvm.store %419, %9 : i32, !llvm.ptr
    %c0_i32_151 = arith.constant 0 : i32
    %420 = arith.cmpi ne, %419, %c0_i32_151 : i32
    cf.cond_br %420, ^bb45, ^bb46
  ^bb46:  // pred: ^bb45
    cf.br ^bb44
  }
  func.func @f169(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %10 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.load %11 : !llvm.ptr -> i64
    %14 = arith.trunci %13 : i64 to i32
    %15 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> i32
    %17 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %11 : !llvm.ptr -> i64
    %19 = arith.trunci %18 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %21 = arith.cmpi eq, %20, %c1114112_i32 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32 : i32
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2(%24: i32):  // 3 preds: ^bb13, ^bb15, ^bb22
    return %24 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb11
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_4 : i32
    cf.cond_br %26, ^bb14, ^bb15
  ^bb4:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c16_i64 : i64
    %32 = llvm.getelementptr %7[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    %34 = arith.cmpi ult, %33, %14 : i32
    cf.cond_br %34, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %35 = llvm.getelementptr inbounds %12[%33] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %36 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.ptrtoint %36 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %38 = arith.cmpi eq, %37, %c0_i64 : i64
    cf.cond_br %38, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %39 = llvm.getelementptr %36[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %40 = llvm.getelementptr %36[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %41 = llvm.getelementptr %36[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %42 = llvm.load %39 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    %44 = llvm.ptrtoint %42 : !llvm.ptr to i64
    %c0_i64_5 = arith.constant 0 : i64
    %45 = arith.cmpi eq, %44, %c0_i64_5 : i64
    cf.cond_br %45, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %46 = llvm.load %40 : !llvm.ptr -> i32
    %47 = arith.cmpi ne, %9, %46 : i32
    cf.cond_br %47, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_6 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_6) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %48 = llvm.call %42(%43, %27, %28) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %49 = arith.cmpi eq, %48, %c0_i32_7 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_8 : i32
    cf.cond_br %51, ^bb3, ^bb13
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // pred: ^bb11
    %c1_i32_9 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_9 : i32)
  ^bb14:  // pred: ^bb3
    %52 = llvm.load %0 : !llvm.ptr -> i32
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %4 : !llvm.ptr -> i32
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c12_i64 : i64
    %58 = llvm.getelementptr %7[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi ult, %59, %19 : i32
    cf.cond_br %60, ^bb16, ^bb17
  ^bb15:  // pred: ^bb3
    %c0_i32_10 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_10 : i32)
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %61 = llvm.getelementptr inbounds %17[%59] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.ptrtoint %62 : !llvm.ptr to i64
    %c0_i64_11 = arith.constant 0 : i64
    %64 = arith.cmpi eq, %63, %c0_i64_11 : i64
    cf.cond_br %64, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c3_i32_12 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_12) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %65 = llvm.getelementptr %62[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %66 = llvm.getelementptr %62[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %67 = llvm.getelementptr %62[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %68 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64_13 = arith.constant 0 : i64
    %71 = arith.cmpi eq, %70, %c0_i64_13 : i64
    cf.cond_br %71, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c4_i32_14 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_14) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %72 = llvm.load %66 : !llvm.ptr -> i32
    %73 = arith.cmpi ne, %16, %72 : i32
    cf.cond_br %73, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c3_i32_15 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_15) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %74 = llvm.call %68(%69, %52, %53, %54) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%74 : i32)
  ^bb23:  // pred: ^bb20
    %c5_i32_16 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_16) : (i32) -> ()
    cf.br ^bb22
  }
  func.func @f170(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c20_i64 : i64
    %16 = llvm.getelementptr %5[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c24_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c12_i64 : i64
    %27 = llvm.getelementptr %5[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %29 = arith.cmpi ult, %28, %12 : i32
    cf.cond_br %29, ^bb3, ^bb4
  ^bb2(%30: i32):  // pred: ^bb9
    return %30 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %31 = llvm.getelementptr inbounds %10[%28] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %32 = llvm.load %31 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.ptrtoint %32 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %34 = arith.cmpi eq, %33, %c0_i64 : i64
    cf.cond_br %34, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %35 = llvm.getelementptr %32[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.getelementptr %32[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %37 = llvm.getelementptr %32[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %38 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %39 = llvm.load %37 : !llvm.ptr -> !llvm.ptr
    %40 = llvm.ptrtoint %38 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %41 = arith.cmpi eq, %40, %c0_i64_2 : i64
    cf.cond_br %41, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %42 = llvm.load %36 : !llvm.ptr -> i32
    %43 = arith.cmpi ne, %7, %42 : i32
    cf.cond_br %43, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %44 = llvm.call %38(%39, %17, %18, %19) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%44 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f171(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg7, %6 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %8 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> i32
    %15 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> i64
    %19 = arith.trunci %18 : i64 to i32
    %20 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %16 : !llvm.ptr -> i64
    %22 = arith.trunci %21 : i64 to i32
    %23 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %16 : !llvm.ptr -> i64
    %25 = arith.trunci %24 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %26 = llvm.load %9 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %27 = arith.subi %26, %c16_i32 : i32
    llvm.store %27, %7 : i32, !llvm.ptr
    llvm.store %27, %9 : i32, !llvm.ptr
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c20_i64 : i64
    %31 = llvm.getelementptr %12[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c24_i64 : i64
    %38 = llvm.getelementptr %12[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c12_i64 : i64
    %42 = llvm.getelementptr %12[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i32
    %44 = arith.cmpi ult, %43, %19 : i32
    cf.cond_br %44, ^bb3, ^bb4
  ^bb2(%45: i32):  // pred: ^bb11
    return %45 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %46 = llvm.getelementptr inbounds %17[%43] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %47 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.ptrtoint %47 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %49 = arith.cmpi eq, %48, %c0_i64 : i64
    cf.cond_br %49, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %50 = llvm.getelementptr %47[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %51 = llvm.getelementptr %47[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %52 = llvm.getelementptr %47[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %53 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %54 = llvm.load %52 : !llvm.ptr -> !llvm.ptr
    %55 = llvm.ptrtoint %53 : !llvm.ptr to i64
    %c0_i64_7 = arith.constant 0 : i64
    %56 = arith.cmpi eq, %55, %c0_i64_7 : i64
    cf.cond_br %56, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %57 = llvm.load %51 : !llvm.ptr -> i32
    %58 = arith.cmpi ne, %14, %57 : i32
    cf.cond_br %58, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_8 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_8) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %59 = llvm.call %53(%54, %32, %33, %34) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %59, %2 : i32, !llvm.ptr
    %60 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %c13_i64 = arith.constant 13 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c13_i64 : i64
    %63 = llvm.getelementptr %12[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = arith.trunci %c0_i32_9 : i32 to i8
    llvm.store volatile %64, %63 {alignment = 1 : i64} : i8, !llvm.ptr
    %65 = llvm.load %7 : !llvm.ptr -> i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_10 = arith.constant 12 : i64
    %67 = arith.extui %65 : i32 to i64
    %68 = arith.addi %67, %c12_i64_10 : i64
    %69 = llvm.getelementptr %12[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = arith.trunci %66 : i32 to i8
    llvm.store volatile %70, %69 {alignment = 1 : i64} : i8, !llvm.ptr
    %71 = llvm.load %7 : !llvm.ptr -> i32
    %72 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %73 = arith.extui %71 : i32 to i64
    %74 = arith.addi %73, %c8_i64 : i64
    %75 = llvm.getelementptr %12[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %72, %75 {alignment = 1 : i64} : i32, !llvm.ptr
    %76 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %77 = arith.addi %76, %c8_i32 : i32
    %78 = llvm.load %3 : !llvm.ptr -> i32
    %79 = llvm.load %4 : !llvm.ptr -> i32
    %80 = llvm.load %5 : !llvm.ptr -> i32
    %81 = llvm.load %6 : !llvm.ptr -> i32
    %82 = call @f152(%arg0, %77, %78, %79, %80, %81) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    llvm.store %82, %6 : i32, !llvm.ptr
    %83 = llvm.load %7 : !llvm.ptr -> i32
    %c13_i64_11 = arith.constant 13 : i64
    %84 = arith.extui %83 : i32 to i64
    %85 = arith.addi %84, %c13_i64_11 : i64
    %86 = llvm.getelementptr %12[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i8
    %88 = arith.extui %87 : i8 to i32
    llvm.store %88, %2 : i32, !llvm.ptr
    %89 = llvm.load %7 : !llvm.ptr -> i32
    %c12_i64_12 = arith.constant 12 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c12_i64_12 : i64
    %92 = llvm.getelementptr %12[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i8
    %94 = arith.extui %93 : i8 to i32
    llvm.store %94, %1 : i32, !llvm.ptr
    %95 = arith.ori %88, %94 : i32
    llvm.store %95, %0 : i32, !llvm.ptr
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_13 = arith.constant 1 : i32
    %97 = arith.cmpi eq, %96, %c1_i32_13 : i32
    %98 = arith.extui %97 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %99 = arith.cmpi eq, %98, %c0_i32_14 : i32
    %100 = arith.extui %99 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %101 = arith.cmpi ne, %100, %c0_i32_15 : i32
    cf.cond_br %101, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 4 preds: ^bb9, ^bb12, ^bb22, ^bb30
    %102 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32_16 = arith.constant 16 : i32
    %103 = arith.addi %102, %c16_i32_16 : i32
    llvm.store %103, %9 : i32, !llvm.ptr
    %104 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_17 = arith.constant 1 : i32
    %105 = arith.andi %104, %c1_i32_17 : i32
    cf.br ^bb2(%105 : i32)
  ^bb12:  // pred: ^bb9
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_18 = arith.constant 1 : i32
    %107 = arith.andi %106, %c1_i32_18 : i32
    %c0_i32_19 = arith.constant 0 : i32
    %108 = arith.cmpi ne, %107, %c0_i32_19 : i32
    cf.cond_br %108, ^bb11, ^bb13
  ^bb13:  // pred: ^bb12
    %109 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c0_i64_20 : i64
    %112 = llvm.getelementptr %12[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = llvm.load volatile %112 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %113, %0 : i32, !llvm.ptr
    %c28_i64 = arith.constant 28 : i64
    %114 = arith.extui %113 : i32 to i64
    %115 = arith.addi %114, %c28_i64 : i64
    %116 = llvm.getelementptr %12[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %117 = llvm.load volatile %116 {alignment = 1 : i64} : !llvm.ptr -> i8
    %118 = arith.extui %117 : i8 to i32
    %c4_i32_21 = arith.constant 4 : i32
    %119 = arith.andi %118, %c4_i32_21 : i32
    %c0_i32_22 = arith.constant 0 : i32
    %120 = arith.cmpi ne, %119, %c0_i32_22 : i32
    cf.cond_br %120, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %121 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_23 = arith.constant 20 : i64
    %122 = arith.extui %121 : i32 to i64
    %123 = arith.addi %122, %c20_i64_23 : i64
    %124 = llvm.getelementptr %12[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %125 = llvm.load volatile %124 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050858_i32 = arith.constant 1050858 : i32
    %c1_i32_24 = arith.constant 1 : i32
    %126 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_25 = arith.constant 24 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c24_i64_25 : i64
    %129 = llvm.getelementptr %12[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_26 = arith.constant 12 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c12_i64_26 : i64
    %133 = llvm.getelementptr %12[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i32
    %135 = arith.cmpi ult, %134, %25 : i32
    cf.cond_br %135, ^bb24, ^bb25
  ^bb15:  // pred: ^bb13
    %136 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_27 = arith.constant 20 : i64
    %137 = arith.extui %136 : i32 to i64
    %138 = arith.addi %137, %c20_i64_27 : i64
    %139 = llvm.getelementptr %12[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = llvm.load volatile %139 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050859_i32 = arith.constant 1050859 : i32
    %c2_i32 = arith.constant 2 : i32
    %141 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_28 = arith.constant 24 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c24_i64_28 : i64
    %144 = llvm.getelementptr %12[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_29 = arith.constant 12 : i64
    %146 = arith.extui %145 : i32 to i64
    %147 = arith.addi %146, %c12_i64_29 : i64
    %148 = llvm.getelementptr %12[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %149 = llvm.load volatile %148 {alignment = 1 : i64} : !llvm.ptr -> i32
    %150 = arith.cmpi ult, %149, %22 : i32
    cf.cond_br %150, ^bb16, ^bb17
  ^bb16:  // 2 preds: ^bb15, ^bb17
    %151 = llvm.getelementptr inbounds %20[%149] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %152 = llvm.load %151 : !llvm.ptr -> !llvm.ptr
    %153 = llvm.ptrtoint %152 : !llvm.ptr to i64
    %c0_i64_30 = arith.constant 0 : i64
    %154 = arith.cmpi eq, %153, %c0_i64_30 : i64
    cf.cond_br %154, ^bb19, ^bb18
  ^bb17:  // pred: ^bb15
    %c3_i32_31 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_31) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %155 = llvm.getelementptr %152[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %156 = llvm.getelementptr %152[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %157 = llvm.getelementptr %152[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %158 = llvm.load %155 : !llvm.ptr -> !llvm.ptr
    %159 = llvm.load %157 : !llvm.ptr -> !llvm.ptr
    %160 = llvm.ptrtoint %158 : !llvm.ptr to i64
    %c0_i64_32 = arith.constant 0 : i64
    %161 = arith.cmpi eq, %160, %c0_i64_32 : i64
    cf.cond_br %161, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c4_i32_33 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_33) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %162 = llvm.load %156 : !llvm.ptr -> i32
    %163 = arith.cmpi ne, %14, %162 : i32
    cf.cond_br %163, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c3_i32_34 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_34) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %164 = llvm.call %158(%159, %140, %c1050859_i32, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %164, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb23:  // pred: ^bb20
    %c5_i32_35 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_35) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb14, ^bb25
    %165 = llvm.getelementptr inbounds %23[%134] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %166 = llvm.load %165 : !llvm.ptr -> !llvm.ptr
    %167 = llvm.ptrtoint %166 : !llvm.ptr to i64
    %c0_i64_36 = arith.constant 0 : i64
    %168 = arith.cmpi eq, %167, %c0_i64_36 : i64
    cf.cond_br %168, ^bb27, ^bb26
  ^bb25:  // pred: ^bb14
    %c3_i32_37 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_37) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %169 = llvm.getelementptr %166[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %170 = llvm.getelementptr %166[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %171 = llvm.getelementptr %166[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %172 = llvm.load %169 : !llvm.ptr -> !llvm.ptr
    %173 = llvm.load %171 : !llvm.ptr -> !llvm.ptr
    %174 = llvm.ptrtoint %172 : !llvm.ptr to i64
    %c0_i64_38 = arith.constant 0 : i64
    %175 = arith.cmpi eq, %174, %c0_i64_38 : i64
    cf.cond_br %175, ^bb29, ^bb28
  ^bb27:  // pred: ^bb24
    %c4_i32_39 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_39) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %176 = llvm.load %170 : !llvm.ptr -> i32
    %177 = arith.cmpi ne, %14, %176 : i32
    cf.cond_br %177, ^bb31, ^bb30
  ^bb29:  // pred: ^bb26
    %c3_i32_40 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_40) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %178 = llvm.call %172(%173, %125, %c1050858_i32, %c1_i32_24) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %178, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb31:  // pred: ^bb28
    %c5_i32_41 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_41) : (i32) -> ()
    cf.br ^bb30
  }
  func.func @f172(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg7, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg8, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg9, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg10, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg11, %10 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %12 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %17 : !llvm.ptr -> i32
    %19 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %20 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    %24 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %20 : !llvm.ptr -> i64
    %26 = arith.trunci %25 : i64 to i32
    %27 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %20 : !llvm.ptr -> i64
    %29 = arith.trunci %28 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %30 = llvm.load %13 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %31 = arith.subi %30, %c16_i32 : i32
    llvm.store %31, %11 : i32, !llvm.ptr
    llvm.store %31, %13 : i32, !llvm.ptr
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c20_i64 : i64
    %35 = llvm.getelementptr %16[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c24_i64 : i64
    %42 = llvm.getelementptr %16[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c12_i64 : i64
    %46 = llvm.getelementptr %16[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    %48 = arith.cmpi ult, %47, %23 : i32
    cf.cond_br %48, ^bb3, ^bb4
  ^bb2(%49: i32):  // pred: ^bb11
    return %49 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %50 = llvm.getelementptr inbounds %21[%47] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.ptrtoint %51 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %53 = arith.cmpi eq, %52, %c0_i64 : i64
    cf.cond_br %53, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %54 = llvm.getelementptr %51[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %55 = llvm.getelementptr %51[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %56 = llvm.getelementptr %51[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %57 = llvm.load %54 : !llvm.ptr -> !llvm.ptr
    %58 = llvm.load %56 : !llvm.ptr -> !llvm.ptr
    %59 = llvm.ptrtoint %57 : !llvm.ptr to i64
    %c0_i64_11 = arith.constant 0 : i64
    %60 = arith.cmpi eq, %59, %c0_i64_11 : i64
    cf.cond_br %60, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %61 = llvm.load %55 : !llvm.ptr -> i32
    %62 = arith.cmpi ne, %18, %61 : i32
    cf.cond_br %62, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_12 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_12) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %63 = llvm.call %57(%58, %36, %37, %38) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %63, %2 : i32, !llvm.ptr
    %64 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c13_i64 = arith.constant 13 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c13_i64 : i64
    %67 = llvm.getelementptr %16[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = arith.trunci %c0_i32_13 : i32 to i8
    llvm.store volatile %68, %67 {alignment = 1 : i64} : i8, !llvm.ptr
    %69 = llvm.load %11 : !llvm.ptr -> i32
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_14 = arith.constant 12 : i64
    %71 = arith.extui %69 : i32 to i64
    %72 = arith.addi %71, %c12_i64_14 : i64
    %73 = llvm.getelementptr %16[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %74 = arith.trunci %70 : i32 to i8
    llvm.store volatile %74, %73 {alignment = 1 : i64} : i8, !llvm.ptr
    %75 = llvm.load %11 : !llvm.ptr -> i32
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %77 = arith.extui %75 : i32 to i64
    %78 = arith.addi %77, %c8_i64 : i64
    %79 = llvm.getelementptr %16[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %76, %79 {alignment = 1 : i64} : i32, !llvm.ptr
    %80 = llvm.load %11 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %81 = arith.addi %80, %c8_i32 : i32
    %82 = llvm.load %3 : !llvm.ptr -> i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %84 = llvm.load %5 : !llvm.ptr -> i32
    %85 = llvm.load %6 : !llvm.ptr -> i32
    %86 = call @f152(%arg0, %81, %82, %83, %84, %85) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %87 = llvm.load %7 : !llvm.ptr -> i32
    %88 = llvm.load %8 : !llvm.ptr -> i32
    %89 = llvm.load %9 : !llvm.ptr -> i32
    %90 = llvm.load %10 : !llvm.ptr -> i32
    %91 = call @f152(%arg0, %86, %87, %88, %89, %90) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    llvm.store %91, %10 : i32, !llvm.ptr
    %92 = llvm.load %11 : !llvm.ptr -> i32
    %c13_i64_15 = arith.constant 13 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c13_i64_15 : i64
    %95 = llvm.getelementptr %16[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i8
    %97 = arith.extui %96 : i8 to i32
    llvm.store %97, %2 : i32, !llvm.ptr
    %98 = llvm.load %11 : !llvm.ptr -> i32
    %c12_i64_16 = arith.constant 12 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c12_i64_16 : i64
    %101 = llvm.getelementptr %16[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i8
    %103 = arith.extui %102 : i8 to i32
    llvm.store %103, %1 : i32, !llvm.ptr
    %104 = arith.ori %97, %103 : i32
    llvm.store %104, %0 : i32, !llvm.ptr
    %105 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_17 = arith.constant 1 : i32
    %106 = arith.cmpi eq, %105, %c1_i32_17 : i32
    %107 = arith.extui %106 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %108 = arith.cmpi eq, %107, %c0_i32_18 : i32
    %109 = arith.extui %108 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %110 = arith.cmpi ne, %109, %c0_i32_19 : i32
    cf.cond_br %110, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 4 preds: ^bb9, ^bb12, ^bb22, ^bb30
    %111 = llvm.load %11 : !llvm.ptr -> i32
    %c16_i32_20 = arith.constant 16 : i32
    %112 = arith.addi %111, %c16_i32_20 : i32
    llvm.store %112, %13 : i32, !llvm.ptr
    %113 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_21 = arith.constant 1 : i32
    %114 = arith.andi %113, %c1_i32_21 : i32
    cf.br ^bb2(%114 : i32)
  ^bb12:  // pred: ^bb9
    %115 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %116 = arith.andi %115, %c1_i32_22 : i32
    %c0_i32_23 = arith.constant 0 : i32
    %117 = arith.cmpi ne, %116, %c0_i32_23 : i32
    cf.cond_br %117, ^bb11, ^bb13
  ^bb13:  // pred: ^bb12
    %118 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %119 = arith.extui %118 : i32 to i64
    %120 = arith.addi %119, %c0_i64_24 : i64
    %121 = llvm.getelementptr %16[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = llvm.load volatile %121 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %122, %0 : i32, !llvm.ptr
    %c28_i64 = arith.constant 28 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c28_i64 : i64
    %125 = llvm.getelementptr %16[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i8
    %127 = arith.extui %126 : i8 to i32
    %c4_i32_25 = arith.constant 4 : i32
    %128 = arith.andi %127, %c4_i32_25 : i32
    %c0_i32_26 = arith.constant 0 : i32
    %129 = arith.cmpi ne, %128, %c0_i32_26 : i32
    cf.cond_br %129, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %130 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_27 = arith.constant 20 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c20_i64_27 : i64
    %133 = llvm.getelementptr %16[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050858_i32 = arith.constant 1050858 : i32
    %c1_i32_28 = arith.constant 1 : i32
    %135 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_29 = arith.constant 24 : i64
    %136 = arith.extui %135 : i32 to i64
    %137 = arith.addi %136, %c24_i64_29 : i64
    %138 = llvm.getelementptr %16[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load volatile %138 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_30 = arith.constant 12 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c12_i64_30 : i64
    %142 = llvm.getelementptr %16[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i32
    %144 = arith.cmpi ult, %143, %29 : i32
    cf.cond_br %144, ^bb24, ^bb25
  ^bb15:  // pred: ^bb13
    %145 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_31 = arith.constant 20 : i64
    %146 = arith.extui %145 : i32 to i64
    %147 = arith.addi %146, %c20_i64_31 : i64
    %148 = llvm.getelementptr %16[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %149 = llvm.load volatile %148 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050859_i32 = arith.constant 1050859 : i32
    %c2_i32 = arith.constant 2 : i32
    %150 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_32 = arith.constant 24 : i64
    %151 = arith.extui %150 : i32 to i64
    %152 = arith.addi %151, %c24_i64_32 : i64
    %153 = llvm.getelementptr %16[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_33 = arith.constant 12 : i64
    %155 = arith.extui %154 : i32 to i64
    %156 = arith.addi %155, %c12_i64_33 : i64
    %157 = llvm.getelementptr %16[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %158 = llvm.load volatile %157 {alignment = 1 : i64} : !llvm.ptr -> i32
    %159 = arith.cmpi ult, %158, %26 : i32
    cf.cond_br %159, ^bb16, ^bb17
  ^bb16:  // 2 preds: ^bb15, ^bb17
    %160 = llvm.getelementptr inbounds %24[%158] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %161 = llvm.load %160 : !llvm.ptr -> !llvm.ptr
    %162 = llvm.ptrtoint %161 : !llvm.ptr to i64
    %c0_i64_34 = arith.constant 0 : i64
    %163 = arith.cmpi eq, %162, %c0_i64_34 : i64
    cf.cond_br %163, ^bb19, ^bb18
  ^bb17:  // pred: ^bb15
    %c3_i32_35 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_35) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %164 = llvm.getelementptr %161[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %165 = llvm.getelementptr %161[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %166 = llvm.getelementptr %161[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %167 = llvm.load %164 : !llvm.ptr -> !llvm.ptr
    %168 = llvm.load %166 : !llvm.ptr -> !llvm.ptr
    %169 = llvm.ptrtoint %167 : !llvm.ptr to i64
    %c0_i64_36 = arith.constant 0 : i64
    %170 = arith.cmpi eq, %169, %c0_i64_36 : i64
    cf.cond_br %170, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c4_i32_37 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_37) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %171 = llvm.load %165 : !llvm.ptr -> i32
    %172 = arith.cmpi ne, %18, %171 : i32
    cf.cond_br %172, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c3_i32_38 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_38) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %173 = llvm.call %167(%168, %149, %c1050859_i32, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %173, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb23:  // pred: ^bb20
    %c5_i32_39 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_39) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb14, ^bb25
    %174 = llvm.getelementptr inbounds %27[%143] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %175 = llvm.load %174 : !llvm.ptr -> !llvm.ptr
    %176 = llvm.ptrtoint %175 : !llvm.ptr to i64
    %c0_i64_40 = arith.constant 0 : i64
    %177 = arith.cmpi eq, %176, %c0_i64_40 : i64
    cf.cond_br %177, ^bb27, ^bb26
  ^bb25:  // pred: ^bb14
    %c3_i32_41 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_41) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %178 = llvm.getelementptr %175[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %179 = llvm.getelementptr %175[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %180 = llvm.getelementptr %175[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %181 = llvm.load %178 : !llvm.ptr -> !llvm.ptr
    %182 = llvm.load %180 : !llvm.ptr -> !llvm.ptr
    %183 = llvm.ptrtoint %181 : !llvm.ptr to i64
    %c0_i64_42 = arith.constant 0 : i64
    %184 = arith.cmpi eq, %183, %c0_i64_42 : i64
    cf.cond_br %184, ^bb29, ^bb28
  ^bb27:  // pred: ^bb24
    %c4_i32_43 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_43) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %185 = llvm.load %179 : !llvm.ptr -> i32
    %186 = arith.cmpi ne, %18, %185 : i32
    cf.cond_br %186, ^bb31, ^bb30
  ^bb29:  // pred: ^bb26
    %c3_i32_44 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_44) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %187 = llvm.call %181(%182, %134, %c1050858_i32, %c1_i32_28) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %187, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb31:  // pred: ^bb28
    %c5_i32_45 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_45) : (i32) -> ()
    cf.br ^bb30
  }
  func.func @f173(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32, %arg14: i32, %arg15: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg7, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg8, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg9, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg10, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg11, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg12, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg13, %12 : i32, !llvm.ptr
    %c1_i32_12 = arith.constant 1 : i32
    %13 = llvm.alloca %c1_i32_12 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg14, %13 : i32, !llvm.ptr
    %c1_i32_13 = arith.constant 1 : i32
    %14 = llvm.alloca %c1_i32_13 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg15, %14 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_14 = arith.constant 1 : i32
    %15 = llvm.alloca %c1_i32_14 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %15 : i32, !llvm.ptr
    %16 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %18[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %21 : !llvm.ptr -> i32
    %23 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.load %24 : !llvm.ptr -> i64
    %27 = arith.trunci %26 : i64 to i32
    %28 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %24 : !llvm.ptr -> i64
    %30 = arith.trunci %29 : i64 to i32
    %31 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %24 : !llvm.ptr -> i64
    %33 = arith.trunci %32 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %34 = llvm.load %17 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %35 = arith.subi %34, %c16_i32 : i32
    llvm.store %35, %15 : i32, !llvm.ptr
    llvm.store %35, %17 : i32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c20_i64 : i64
    %39 = llvm.getelementptr %20[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c24_i64 : i64
    %46 = llvm.getelementptr %20[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c12_i64 : i64
    %50 = llvm.getelementptr %20[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i32
    %52 = arith.cmpi ult, %51, %27 : i32
    cf.cond_br %52, ^bb3, ^bb4
  ^bb2(%53: i32):  // pred: ^bb11
    return %53 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %54 = llvm.getelementptr inbounds %25[%51] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %55 = llvm.load %54 : !llvm.ptr -> !llvm.ptr
    %56 = llvm.ptrtoint %55 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %57 = arith.cmpi eq, %56, %c0_i64 : i64
    cf.cond_br %57, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %58 = llvm.getelementptr %55[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %59 = llvm.getelementptr %55[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %60 = llvm.getelementptr %55[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %61 = llvm.load %58 : !llvm.ptr -> !llvm.ptr
    %62 = llvm.load %60 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.ptrtoint %61 : !llvm.ptr to i64
    %c0_i64_15 = arith.constant 0 : i64
    %64 = arith.cmpi eq, %63, %c0_i64_15 : i64
    cf.cond_br %64, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %65 = llvm.load %59 : !llvm.ptr -> i32
    %66 = arith.cmpi ne, %22, %65 : i32
    cf.cond_br %66, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_16 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_16) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %67 = llvm.call %61(%62, %40, %41, %42) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %67, %2 : i32, !llvm.ptr
    %68 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %c13_i64 = arith.constant 13 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c13_i64 : i64
    %71 = llvm.getelementptr %20[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = arith.trunci %c0_i32_17 : i32 to i8
    llvm.store volatile %72, %71 {alignment = 1 : i64} : i8, !llvm.ptr
    %73 = llvm.load %15 : !llvm.ptr -> i32
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_18 = arith.constant 12 : i64
    %75 = arith.extui %73 : i32 to i64
    %76 = arith.addi %75, %c12_i64_18 : i64
    %77 = llvm.getelementptr %20[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = arith.trunci %74 : i32 to i8
    llvm.store volatile %78, %77 {alignment = 1 : i64} : i8, !llvm.ptr
    %79 = llvm.load %15 : !llvm.ptr -> i32
    %80 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c8_i64 : i64
    %83 = llvm.getelementptr %20[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    %84 = llvm.load %15 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %85 = arith.addi %84, %c8_i32 : i32
    %86 = llvm.load %3 : !llvm.ptr -> i32
    %87 = llvm.load %4 : !llvm.ptr -> i32
    %88 = llvm.load %5 : !llvm.ptr -> i32
    %89 = llvm.load %6 : !llvm.ptr -> i32
    %90 = call @f152(%arg0, %85, %86, %87, %88, %89) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %91 = llvm.load %7 : !llvm.ptr -> i32
    %92 = llvm.load %8 : !llvm.ptr -> i32
    %93 = llvm.load %9 : !llvm.ptr -> i32
    %94 = llvm.load %10 : !llvm.ptr -> i32
    %95 = call @f152(%arg0, %90, %91, %92, %93, %94) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %96 = llvm.load %11 : !llvm.ptr -> i32
    %97 = llvm.load %12 : !llvm.ptr -> i32
    %98 = llvm.load %13 : !llvm.ptr -> i32
    %99 = llvm.load %14 : !llvm.ptr -> i32
    %100 = call @f152(%arg0, %95, %96, %97, %98, %99) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    llvm.store %100, %14 : i32, !llvm.ptr
    %101 = llvm.load %15 : !llvm.ptr -> i32
    %c13_i64_19 = arith.constant 13 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c13_i64_19 : i64
    %104 = llvm.getelementptr %20[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i8
    %106 = arith.extui %105 : i8 to i32
    llvm.store %106, %2 : i32, !llvm.ptr
    %107 = llvm.load %15 : !llvm.ptr -> i32
    %c12_i64_20 = arith.constant 12 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c12_i64_20 : i64
    %110 = llvm.getelementptr %20[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i8
    %112 = arith.extui %111 : i8 to i32
    llvm.store %112, %1 : i32, !llvm.ptr
    %113 = arith.ori %106, %112 : i32
    llvm.store %113, %0 : i32, !llvm.ptr
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_21 = arith.constant 1 : i32
    %115 = arith.cmpi eq, %114, %c1_i32_21 : i32
    %116 = arith.extui %115 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %117 = arith.cmpi eq, %116, %c0_i32_22 : i32
    %118 = arith.extui %117 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %119 = arith.cmpi ne, %118, %c0_i32_23 : i32
    cf.cond_br %119, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 4 preds: ^bb9, ^bb12, ^bb22, ^bb30
    %120 = llvm.load %15 : !llvm.ptr -> i32
    %c16_i32_24 = arith.constant 16 : i32
    %121 = arith.addi %120, %c16_i32_24 : i32
    llvm.store %121, %17 : i32, !llvm.ptr
    %122 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_25 = arith.constant 1 : i32
    %123 = arith.andi %122, %c1_i32_25 : i32
    cf.br ^bb2(%123 : i32)
  ^bb12:  // pred: ^bb9
    %124 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_26 = arith.constant 1 : i32
    %125 = arith.andi %124, %c1_i32_26 : i32
    %c0_i32_27 = arith.constant 0 : i32
    %126 = arith.cmpi ne, %125, %c0_i32_27 : i32
    cf.cond_br %126, ^bb11, ^bb13
  ^bb13:  // pred: ^bb12
    %127 = llvm.load %14 : !llvm.ptr -> i32
    %c0_i64_28 = arith.constant 0 : i64
    %128 = arith.extui %127 : i32 to i64
    %129 = arith.addi %128, %c0_i64_28 : i64
    %130 = llvm.getelementptr %20[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = llvm.load volatile %130 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %131, %0 : i32, !llvm.ptr
    %c28_i64 = arith.constant 28 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c28_i64 : i64
    %134 = llvm.getelementptr %20[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i8
    %136 = arith.extui %135 : i8 to i32
    %c4_i32_29 = arith.constant 4 : i32
    %137 = arith.andi %136, %c4_i32_29 : i32
    %c0_i32_30 = arith.constant 0 : i32
    %138 = arith.cmpi ne, %137, %c0_i32_30 : i32
    cf.cond_br %138, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %139 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_31 = arith.constant 20 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c20_i64_31 : i64
    %142 = llvm.getelementptr %20[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050858_i32 = arith.constant 1050858 : i32
    %c1_i32_32 = arith.constant 1 : i32
    %144 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_33 = arith.constant 24 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c24_i64_33 : i64
    %147 = llvm.getelementptr %20[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_34 = arith.constant 12 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c12_i64_34 : i64
    %151 = llvm.getelementptr %20[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    %153 = arith.cmpi ult, %152, %33 : i32
    cf.cond_br %153, ^bb24, ^bb25
  ^bb15:  // pred: ^bb13
    %154 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_35 = arith.constant 20 : i64
    %155 = arith.extui %154 : i32 to i64
    %156 = arith.addi %155, %c20_i64_35 : i64
    %157 = llvm.getelementptr %20[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %158 = llvm.load volatile %157 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050859_i32 = arith.constant 1050859 : i32
    %c2_i32 = arith.constant 2 : i32
    %159 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_36 = arith.constant 24 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c24_i64_36 : i64
    %162 = llvm.getelementptr %20[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_37 = arith.constant 12 : i64
    %164 = arith.extui %163 : i32 to i64
    %165 = arith.addi %164, %c12_i64_37 : i64
    %166 = llvm.getelementptr %20[%165] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %167 = llvm.load volatile %166 {alignment = 1 : i64} : !llvm.ptr -> i32
    %168 = arith.cmpi ult, %167, %30 : i32
    cf.cond_br %168, ^bb16, ^bb17
  ^bb16:  // 2 preds: ^bb15, ^bb17
    %169 = llvm.getelementptr inbounds %28[%167] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %170 = llvm.load %169 : !llvm.ptr -> !llvm.ptr
    %171 = llvm.ptrtoint %170 : !llvm.ptr to i64
    %c0_i64_38 = arith.constant 0 : i64
    %172 = arith.cmpi eq, %171, %c0_i64_38 : i64
    cf.cond_br %172, ^bb19, ^bb18
  ^bb17:  // pred: ^bb15
    %c3_i32_39 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_39) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %173 = llvm.getelementptr %170[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %174 = llvm.getelementptr %170[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %175 = llvm.getelementptr %170[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %176 = llvm.load %173 : !llvm.ptr -> !llvm.ptr
    %177 = llvm.load %175 : !llvm.ptr -> !llvm.ptr
    %178 = llvm.ptrtoint %176 : !llvm.ptr to i64
    %c0_i64_40 = arith.constant 0 : i64
    %179 = arith.cmpi eq, %178, %c0_i64_40 : i64
    cf.cond_br %179, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c4_i32_41 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_41) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %180 = llvm.load %174 : !llvm.ptr -> i32
    %181 = arith.cmpi ne, %22, %180 : i32
    cf.cond_br %181, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c3_i32_42 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_42) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %182 = llvm.call %176(%177, %158, %c1050859_i32, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %182, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb23:  // pred: ^bb20
    %c5_i32_43 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_43) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb14, ^bb25
    %183 = llvm.getelementptr inbounds %31[%152] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %184 = llvm.load %183 : !llvm.ptr -> !llvm.ptr
    %185 = llvm.ptrtoint %184 : !llvm.ptr to i64
    %c0_i64_44 = arith.constant 0 : i64
    %186 = arith.cmpi eq, %185, %c0_i64_44 : i64
    cf.cond_br %186, ^bb27, ^bb26
  ^bb25:  // pred: ^bb14
    %c3_i32_45 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_45) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %187 = llvm.getelementptr %184[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %188 = llvm.getelementptr %184[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %189 = llvm.getelementptr %184[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %190 = llvm.load %187 : !llvm.ptr -> !llvm.ptr
    %191 = llvm.load %189 : !llvm.ptr -> !llvm.ptr
    %192 = llvm.ptrtoint %190 : !llvm.ptr to i64
    %c0_i64_46 = arith.constant 0 : i64
    %193 = arith.cmpi eq, %192, %c0_i64_46 : i64
    cf.cond_br %193, ^bb29, ^bb28
  ^bb27:  // pred: ^bb24
    %c4_i32_47 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_47) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // 2 preds: ^bb26, ^bb29
    %194 = llvm.load %188 : !llvm.ptr -> i32
    %195 = arith.cmpi ne, %22, %194 : i32
    cf.cond_br %195, ^bb31, ^bb30
  ^bb29:  // pred: ^bb26
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %196 = llvm.call %190(%191, %143, %c1050858_i32, %c1_i32_32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %196, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb31:  // pred: ^bb28
    %c5_i32_49 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_49) : (i32) -> ()
    cf.br ^bb30
  }
  func.func @f174(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %13 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %14 : !llvm.ptr -> i64
    %17 = arith.trunci %16 : i64 to i32
    %18 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %14 : !llvm.ptr -> i64
    %20 = arith.trunci %19 : i64 to i32
    %21 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %14 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %24 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %25 = arith.subi %24, %c16_i32 : i32
    llvm.store %25, %5 : i32, !llvm.ptr
    llvm.store %25, %7 : i32, !llvm.ptr
    %26 = llvm.load %5 : !llvm.ptr -> i32
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c20_i64 : i64
    %30 = llvm.getelementptr %10[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    %32 = llvm.load %1 : !llvm.ptr -> i32
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c24_i64 : i64
    %37 = llvm.getelementptr %10[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c12_i64 : i64
    %41 = llvm.getelementptr %10[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i32
    %43 = arith.cmpi ult, %42, %17 : i32
    cf.cond_br %43, ^bb3, ^bb4
  ^bb2(%44: i32):  // pred: ^bb11
    return %44 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %45 = llvm.getelementptr inbounds %15[%42] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %46 = llvm.load %45 : !llvm.ptr -> !llvm.ptr
    %47 = llvm.ptrtoint %46 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %48 = arith.cmpi eq, %47, %c0_i64 : i64
    cf.cond_br %48, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %49 = llvm.getelementptr %46[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %50 = llvm.getelementptr %46[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %51 = llvm.getelementptr %46[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %52 = llvm.load %49 : !llvm.ptr -> !llvm.ptr
    %53 = llvm.load %51 : !llvm.ptr -> !llvm.ptr
    %54 = llvm.ptrtoint %52 : !llvm.ptr to i64
    %c0_i64_5 = arith.constant 0 : i64
    %55 = arith.cmpi eq, %54, %c0_i64_5 : i64
    cf.cond_br %55, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %56 = llvm.load %50 : !llvm.ptr -> i32
    %57 = arith.cmpi ne, %12, %56 : i32
    cf.cond_br %57, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_6 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_6) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %58 = llvm.call %52(%53, %31, %32, %33) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c12_i64_7 = arith.constant 12 : i64
    %59 = arith.extui %26 : i32 to i64
    %60 = arith.addi %59, %c12_i64_7 : i64
    %61 = llvm.getelementptr %10[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = arith.trunci %58 : i32 to i8
    llvm.store volatile %62, %61 {alignment = 1 : i64} : i8, !llvm.ptr
    %63 = llvm.load %5 : !llvm.ptr -> i32
    %64 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c8_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %5 : !llvm.ptr -> i32
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %70 = arith.cmpi eq, %69, %c0_i32_8 : i32
    %71 = arith.extui %70 : i1 to i32
    %c13_i64 = arith.constant 13 : i64
    %72 = arith.extui %68 : i32 to i64
    %73 = arith.addi %72, %c13_i64 : i64
    %74 = llvm.getelementptr %10[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = arith.trunci %71 : i32 to i8
    llvm.store volatile %75, %74 {alignment = 1 : i64} : i8, !llvm.ptr
    %76 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %c4_i64 = arith.constant 4 : i64
    %77 = arith.extui %76 : i32 to i64
    %78 = arith.addi %77, %c4_i64 : i64
    %79 = llvm.getelementptr %10[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_9, %79 {alignment = 1 : i64} : i32, !llvm.ptr
    %80 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_10 = arith.constant 4 : i32
    %81 = arith.addi %80, %c4_i32_10 : i32
    %82 = llvm.load %3 : !llvm.ptr -> i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %84 = call @f163(%arg0, %81, %82, %83) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_11 : i64
    %87 = llvm.getelementptr %10[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %88, %2 : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    %89 = arith.cmpi eq, %88, %c0_i32_12 : i32
    %90 = arith.extui %89 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %91 = arith.cmpi eq, %90, %c0_i32_13 : i32
    %92 = arith.extui %91 : i1 to i32
    %93 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64_14 = arith.constant 12 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c12_i64_14 : i64
    %96 = llvm.getelementptr %10[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i8
    %98 = arith.extui %97 : i8 to i32
    llvm.store %98, %1 : i32, !llvm.ptr
    %99 = arith.ori %92, %98 : i32
    llvm.store %99, %0 : i32, !llvm.ptr
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %101 = arith.cmpi eq, %100, %c0_i32_15 : i32
    %102 = arith.extui %101 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %102, %c0_i32_16 : i32
    cf.cond_br %103, ^bb11, ^bb12
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 4 preds: ^bb9, ^bb12, ^bb25, ^bb34
    %104 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_17 = arith.constant 16 : i32
    %105 = arith.addi %104, %c16_i32_17 : i32
    llvm.store %105, %7 : i32, !llvm.ptr
    %106 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_18 = arith.constant 1 : i32
    %107 = arith.andi %106, %c1_i32_18 : i32
    cf.br ^bb2(%107 : i32)
  ^bb12:  // pred: ^bb9
    %108 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %109 = arith.andi %108, %c1_i32_19 : i32
    %c0_i32_20 = arith.constant 0 : i32
    %110 = arith.cmpi ne, %109, %c0_i32_20 : i32
    cf.cond_br %110, ^bb11, ^bb13
  ^bb13:  // pred: ^bb12
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_21 = arith.constant 1 : i32
    %112 = arith.cmpi eq, %111, %c1_i32_21 : i32
    %113 = arith.extui %112 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %114 = arith.cmpi ne, %113, %c0_i32_22 : i32
    cf.cond_br %114, ^bb15, ^bb16
  ^bb14:  // 4 preds: ^bb15, ^bb16, ^bb17, ^bb27
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_23 = arith.constant 20 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c20_i64_23 : i64
    %118 = llvm.getelementptr %10[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050611_i32 = arith.constant 1050611 : i32
    %c1_i32_24 = arith.constant 1 : i32
    %120 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_25 = arith.constant 24 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c24_i64_25 : i64
    %123 = llvm.getelementptr %10[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_26 = arith.constant 12 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c12_i64_26 : i64
    %127 = llvm.getelementptr %10[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %128 = llvm.load volatile %127 {alignment = 1 : i64} : !llvm.ptr -> i32
    %129 = arith.cmpi ult, %128, %23 : i32
    cf.cond_br %129, ^bb28, ^bb29
  ^bb15:  // pred: ^bb13
    %130 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i64_27 = arith.constant 8 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c8_i64_27 : i64
    %133 = llvm.getelementptr %10[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %134, %2 : i32, !llvm.ptr
    %135 = llvm.load %5 : !llvm.ptr -> i32
    %c13_i64_28 = arith.constant 13 : i64
    %136 = arith.extui %135 : i32 to i64
    %137 = arith.addi %136, %c13_i64_28 : i64
    %138 = llvm.getelementptr %10[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load volatile %138 {alignment = 1 : i64} : !llvm.ptr -> i8
    %140 = arith.extui %139 : i8 to i32
    %c0_i32_29 = arith.constant 0 : i32
    %141 = arith.cmpi eq, %140, %c0_i32_29 : i32
    %142 = arith.extui %141 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %143 = arith.cmpi ne, %142, %c0_i32_30 : i32
    cf.cond_br %143, ^bb14, ^bb17
  ^bb16:  // pred: ^bb13
    %144 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i64_31 = arith.constant 8 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c8_i64_31 : i64
    %147 = llvm.getelementptr %10[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %148, %2 : i32, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb15
    %149 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %150 = arith.extui %149 : i32 to i64
    %151 = arith.addi %150, %c28_i64 : i64
    %152 = llvm.getelementptr %10[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %153 = llvm.load volatile %152 {alignment = 1 : i64} : !llvm.ptr -> i8
    %154 = arith.extui %153 : i8 to i32
    %c4_i32_32 = arith.constant 4 : i32
    %155 = arith.andi %154, %c4_i32_32 : i32
    %c0_i32_33 = arith.constant 0 : i32
    %156 = arith.cmpi ne, %155, %c0_i32_33 : i32
    cf.cond_br %156, ^bb14, ^bb18
  ^bb18:  // pred: ^bb17
    %c1_i32_34 = arith.constant 1 : i32
    llvm.store %c1_i32_34, %0 : i32, !llvm.ptr
    %157 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_35 = arith.constant 20 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c20_i64_35 : i64
    %160 = llvm.getelementptr %10[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050864_i32 = arith.constant 1050864 : i32
    %c1_i32_36 = arith.constant 1 : i32
    %162 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_37 = arith.constant 24 : i64
    %163 = arith.extui %162 : i32 to i64
    %164 = arith.addi %163, %c24_i64_37 : i64
    %165 = llvm.getelementptr %10[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %166 = llvm.load volatile %165 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_38 = arith.constant 12 : i64
    %167 = arith.extui %166 : i32 to i64
    %168 = arith.addi %167, %c12_i64_38 : i64
    %169 = llvm.getelementptr %10[%168] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %170 = llvm.load volatile %169 {alignment = 1 : i64} : !llvm.ptr -> i32
    %171 = arith.cmpi ult, %170, %20 : i32
    cf.cond_br %171, ^bb19, ^bb20
  ^bb19:  // 2 preds: ^bb18, ^bb20
    %172 = llvm.getelementptr inbounds %18[%170] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %173 = llvm.load %172 : !llvm.ptr -> !llvm.ptr
    %174 = llvm.ptrtoint %173 : !llvm.ptr to i64
    %c0_i64_39 = arith.constant 0 : i64
    %175 = arith.cmpi eq, %174, %c0_i64_39 : i64
    cf.cond_br %175, ^bb22, ^bb21
  ^bb20:  // pred: ^bb18
    %c3_i32_40 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_40) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %176 = llvm.getelementptr %173[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %177 = llvm.getelementptr %173[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %178 = llvm.getelementptr %173[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %179 = llvm.load %176 : !llvm.ptr -> !llvm.ptr
    %180 = llvm.load %178 : !llvm.ptr -> !llvm.ptr
    %181 = llvm.ptrtoint %179 : !llvm.ptr to i64
    %c0_i64_41 = arith.constant 0 : i64
    %182 = arith.cmpi eq, %181, %c0_i64_41 : i64
    cf.cond_br %182, ^bb24, ^bb23
  ^bb22:  // pred: ^bb19
    %c4_i32_42 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_42) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %183 = llvm.load %177 : !llvm.ptr -> i32
    %184 = arith.cmpi ne, %12, %183 : i32
    cf.cond_br %184, ^bb26, ^bb25
  ^bb24:  // pred: ^bb21
    %c3_i32_43 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_43) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %185 = llvm.call %179(%180, %161, %c1050864_i32, %c1_i32_36) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_44 = arith.constant 0 : i32
    %186 = arith.cmpi ne, %185, %c0_i32_44 : i32
    cf.cond_br %186, ^bb11, ^bb27
  ^bb26:  // pred: ^bb23
    %c5_i32_45 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_45) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // pred: ^bb25
    cf.br ^bb14
  ^bb28:  // 2 preds: ^bb14, ^bb29
    %187 = llvm.getelementptr inbounds %21[%128] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %188 = llvm.load %187 : !llvm.ptr -> !llvm.ptr
    %189 = llvm.ptrtoint %188 : !llvm.ptr to i64
    %c0_i64_46 = arith.constant 0 : i64
    %190 = arith.cmpi eq, %189, %c0_i64_46 : i64
    cf.cond_br %190, ^bb31, ^bb30
  ^bb29:  // pred: ^bb14
    %c3_i32_47 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_47) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %191 = llvm.getelementptr %188[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %192 = llvm.getelementptr %188[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %193 = llvm.getelementptr %188[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %194 = llvm.load %191 : !llvm.ptr -> !llvm.ptr
    %195 = llvm.load %193 : !llvm.ptr -> !llvm.ptr
    %196 = llvm.ptrtoint %194 : !llvm.ptr to i64
    %c0_i64_48 = arith.constant 0 : i64
    %197 = arith.cmpi eq, %196, %c0_i64_48 : i64
    cf.cond_br %197, ^bb33, ^bb32
  ^bb31:  // pred: ^bb28
    %c4_i32_49 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_49) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %198 = llvm.load %192 : !llvm.ptr -> i32
    %199 = arith.cmpi ne, %12, %198 : i32
    cf.cond_br %199, ^bb35, ^bb34
  ^bb33:  // pred: ^bb30
    %c3_i32_50 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_50) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %200 = llvm.call %194(%195, %119, %c1050611_i32, %c1_i32_24) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %200, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb35:  // pred: ^bb32
    %c5_i32_51 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_51) : (i32) -> ()
    cf.br ^bb34
  }
  func.func @f175(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c20_i64 : i64
    %16 = llvm.getelementptr %5[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050664_i32 = arith.constant 1050664 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c24_i64 : i64
    %21 = llvm.getelementptr %5[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %5[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = arith.cmpi ult, %26, %12 : i32
    cf.cond_br %27, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %28 = llvm.getelementptr inbounds %10[%26] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.ptrtoint %29 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %31 = arith.cmpi eq, %30, %c0_i64 : i64
    cf.cond_br %31, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %32 = llvm.getelementptr %29[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %33 = llvm.getelementptr %29[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %34 = llvm.getelementptr %29[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.ptrtoint %35 : !llvm.ptr to i64
    %c0_i64_3 = arith.constant 0 : i64
    %38 = arith.cmpi eq, %37, %c0_i64_3 : i64
    cf.cond_br %38, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %39 = llvm.load %33 : !llvm.ptr -> i32
    %40 = arith.cmpi ne, %7, %39 : i32
    cf.cond_br %40, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_4 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_4) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %41 = llvm.call %35(%36, %17, %c1050664_i32, %c1_i32_2) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %41, %2 : i32, !llvm.ptr
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %c5_i64 = arith.constant 5 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c5_i64 : i64
    %45 = llvm.getelementptr %5[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = arith.trunci %c0_i32_5 : i32 to i8
    llvm.store volatile %46, %45 {alignment = 1 : i64} : i8, !llvm.ptr
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %49 = arith.extui %47 : i32 to i64
    %50 = arith.addi %49, %c4_i64 : i64
    %51 = llvm.getelementptr %5[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = arith.trunci %48 : i32 to i8
    llvm.store volatile %52, %51 {alignment = 1 : i64} : i8, !llvm.ptr
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %54 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_6 = arith.constant 0 : i64
    %55 = arith.extui %53 : i32 to i64
    %56 = arith.addi %55, %c0_i64_6 : i64
    %57 = llvm.getelementptr %5[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %57 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f176(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %c1_i32_12 = arith.constant 1 : i32
    %13 = llvm.alloca %c1_i32_12 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %13 : i32, !llvm.ptr
    %c1_i32_13 = arith.constant 1 : i32
    %14 = llvm.alloca %c1_i32_13 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %14 : i32, !llvm.ptr
    %c1_i32_14 = arith.constant 1 : i32
    %15 = llvm.alloca %c1_i32_14 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %15 : i32, !llvm.ptr
    %c1_i32_15 = arith.constant 1 : i32
    %16 = llvm.alloca %c1_i32_15 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %16 : i32, !llvm.ptr
    %17 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %19[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.load %22 : !llvm.ptr -> i32
    %24 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %25 : !llvm.ptr -> i64
    %28 = arith.trunci %27 : i64 to i32
    %29 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %30 = llvm.load %29 : !llvm.ptr -> i32
    %31 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %25 : !llvm.ptr -> i64
    %33 = arith.trunci %32 : i64 to i32
    %34 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.load %25 : !llvm.ptr -> i64
    %36 = arith.trunci %35 : i64 to i32
    %37 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %25 : !llvm.ptr -> i64
    %39 = arith.trunci %38 : i64 to i32
    %40 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.load %25 : !llvm.ptr -> i64
    %42 = arith.trunci %41 : i64 to i32
    %43 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %44 = llvm.load %25 : !llvm.ptr -> i64
    %45 = arith.trunci %44 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %46 = llvm.load %18 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %47 = arith.subi %46, %c16_i32 : i32
    llvm.store %47, %3 : i32, !llvm.ptr
    llvm.store %47, %18 : i32, !llvm.ptr
    %c1_i32_16 = arith.constant 1 : i32
    llvm.store %c1_i32_16, %4 : i32, !llvm.ptr
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c20_i64 : i64
    %51 = llvm.getelementptr %21[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %52, %5 : i32, !llvm.ptr
    %c34_i32 = arith.constant 34 : i32
    %53 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c24_i64 : i64
    %56 = llvm.getelementptr %21[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %57, %6 : i32, !llvm.ptr
    %c16_i64 = arith.constant 16 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c16_i64 : i64
    %60 = llvm.getelementptr %21[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %61, %7 : i32, !llvm.ptr
    %62 = arith.cmpi ult, %61, %28 : i32
    cf.cond_br %62, ^bb4, ^bb5
  ^bb2(%63: i32):  // pred: ^bb3
    return %63 : i32
  ^bb3:  // 4 preds: ^bb10, ^bb19, ^bb113, ^bb122
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_17 = arith.constant 16 : i32
    %65 = arith.addi %64, %c16_i32_17 : i32
    llvm.store %65, %18 : i32, !llvm.ptr
    %66 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%66 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %67 = llvm.getelementptr inbounds %26[%61] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %68 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %70 = arith.cmpi eq, %69, %c0_i64 : i64
    cf.cond_br %70, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %71 = llvm.getelementptr %68[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %72 = llvm.getelementptr %68[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %73 = llvm.getelementptr %68[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %74 = llvm.load %71 : !llvm.ptr -> !llvm.ptr
    %75 = llvm.load %73 : !llvm.ptr -> !llvm.ptr
    %76 = llvm.ptrtoint %74 : !llvm.ptr to i64
    %c0_i64_18 = arith.constant 0 : i64
    %77 = arith.cmpi eq, %76, %c0_i64_18 : i64
    cf.cond_br %77, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %78 = llvm.load %72 : !llvm.ptr -> i32
    %79 = arith.cmpi ne, %23, %78 : i32
    cf.cond_br %79, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_19 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_19) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %80 = llvm.call %74(%75, %52, %c34_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %81 = arith.cmpi ne, %80, %c0_i32_20 : i32
    cf.cond_br %81, ^bb3, ^bb12
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // pred: ^bb10
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %83 = arith.cmpi ne, %82, %c0_i32_21 : i32
    cf.cond_br %83, ^bb14, ^bb15
  ^bb13:  // 4 preds: ^bb15, ^bb102, ^bb103, ^bb104
    %84 = llvm.load %5 : !llvm.ptr -> i32
    %85 = llvm.load %0 : !llvm.ptr -> i32
    %86 = llvm.load %8 : !llvm.ptr -> i32
    %87 = arith.addi %85, %86 : i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %89 = llvm.load %8 : !llvm.ptr -> i32
    %90 = arith.subi %88, %89 : i32
    %91 = llvm.load %6 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c12_i64 : i64
    %94 = llvm.getelementptr %21[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    %96 = arith.cmpi ult, %95, %42 : i32
    cf.cond_br %96, ^bb107, ^bb108
  ^bb14:  // pred: ^bb12
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %9 : i32, !llvm.ptr
    %c0_i32_23 = arith.constant 0 : i32
    %97 = llvm.load %1 : !llvm.ptr -> i32
    %98 = arith.subi %c0_i32_23, %97 : i32
    llvm.store %98, %10 : i32, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    llvm.store %c0_i32_24, %11 : i32, !llvm.ptr
    %99 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %99, %12 : i32, !llvm.ptr
    %100 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %100, %13 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb15:  // pred: ^bb12
    %c0_i32_25 = arith.constant 0 : i32
    llvm.store %c0_i32_25, %2 : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    llvm.store %c0_i32_26, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // 2 preds: ^bb17, ^bb22
    %101 = llvm.load %9 : !llvm.ptr -> i32
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %103 = arith.cmpi ugt, %101, %102 : i32
    %104 = arith.extui %103 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %105 = arith.cmpi ne, %104, %c0_i32_27 : i32
    cf.cond_br %105, ^bb93, ^bb94
  ^bb17:  // pred: ^bb87
    %106 = llvm.load %8 : !llvm.ptr -> i32
    %107 = llvm.load %2 : !llvm.ptr -> i32
    %108 = arith.addi %106, %107 : i32
    llvm.store %108, %2 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb18:  // 5 preds: ^bb38, ^bb42, ^bb44, ^bb48, ^bb49
    %109 = llvm.load %0 : !llvm.ptr -> i32
    %110 = llvm.load %1 : !llvm.ptr -> i32
    %111 = llvm.load %9 : !llvm.ptr -> i32
    %112 = llvm.load %15 : !llvm.ptr -> i32
    %c1051128_i32 = arith.constant 1051128 : i32
    call @f177(%arg0, %109, %110, %111, %112, %c1051128_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb19:  // pred: ^bb35
    %c1_i32_28 = arith.constant 1 : i32
    llvm.store %c1_i32_28, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb20:  // 2 preds: ^bb14, ^bb92
    %113 = llvm.load %12 : !llvm.ptr -> i32
    %114 = llvm.load %13 : !llvm.ptr -> i32
    %115 = arith.addi %113, %114 : i32
    llvm.store %115, %14 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %2 : i32, !llvm.ptr
    cf.br ^bb23
  ^bb21:  // 3 preds: ^bb23, ^bb24, ^bb25
    %116 = llvm.load %15 : !llvm.ptr -> i32
    %c1_i32_30 = arith.constant 1 : i32
    %117 = arith.addi %116, %c1_i32_30 : i32
    llvm.store %117, %12 : i32, !llvm.ptr
    %118 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %119 = arith.extui %118 : i32 to i64
    %120 = arith.addi %119, %c0_i64_31 : i64
    %121 = llvm.getelementptr %21[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = llvm.load volatile %121 {alignment = 1 : i64} : !llvm.ptr -> i8
    %123 = arith.extsi %122 : i8 to i32
    llvm.store %123, %8 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %124 = arith.cmpi sle, %123, %c-1_i32 : i32
    %125 = arith.extui %124 : i1 to i32
    %c0_i32_32 = arith.constant 0 : i32
    %126 = arith.cmpi ne, %125, %c0_i32_32 : i32
    cf.cond_br %126, ^bb29, ^bb30
  ^bb22:  // pred: ^bb27
    %127 = llvm.load %11 : !llvm.ptr -> i32
    %128 = llvm.load %13 : !llvm.ptr -> i32
    %129 = arith.addi %127, %128 : i32
    llvm.store %129, %2 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb23:  // 2 preds: ^bb20, ^bb26
    %130 = llvm.load %12 : !llvm.ptr -> i32
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %132 = arith.addi %130, %131 : i32
    llvm.store %132, %15 : i32, !llvm.ptr
    %c0_i64_33 = arith.constant 0 : i64
    %133 = arith.extui %132 : i32 to i64
    %134 = arith.addi %133, %c0_i64_33 : i64
    %135 = llvm.getelementptr %21[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %136 = llvm.load volatile %135 {alignment = 1 : i64} : !llvm.ptr -> i8
    %137 = arith.extui %136 : i8 to i32
    llvm.store %137, %8 : i32, !llvm.ptr
    %c-127_i32 = arith.constant -127 : i32
    %138 = arith.addi %137, %c-127_i32 : i32
    %c255_i32 = arith.constant 255 : i32
    %139 = arith.andi %138, %c255_i32 : i32
    %c161_i32 = arith.constant 161 : i32
    %140 = arith.cmpi ult, %139, %c161_i32 : i32
    %141 = arith.extui %140 : i1 to i32
    %c0_i32_34 = arith.constant 0 : i32
    %142 = arith.cmpi ne, %141, %c0_i32_34 : i32
    cf.cond_br %142, ^bb21, ^bb24
  ^bb24:  // pred: ^bb23
    %143 = llvm.load %8 : !llvm.ptr -> i32
    %c34_i32_35 = arith.constant 34 : i32
    %144 = arith.cmpi eq, %143, %c34_i32_35 : i32
    %145 = arith.extui %144 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %146 = arith.cmpi ne, %145, %c0_i32_36 : i32
    cf.cond_br %146, ^bb21, ^bb25
  ^bb25:  // pred: ^bb24
    %147 = llvm.load %8 : !llvm.ptr -> i32
    %c92_i32 = arith.constant 92 : i32
    %148 = arith.cmpi eq, %147, %c92_i32 : i32
    %149 = arith.extui %148 : i1 to i32
    %c0_i32_37 = arith.constant 0 : i32
    %150 = arith.cmpi ne, %149, %c0_i32_37 : i32
    cf.cond_br %150, ^bb21, ^bb26
  ^bb26:  // pred: ^bb25
    %151 = llvm.load %13 : !llvm.ptr -> i32
    %152 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_38 = arith.constant 1 : i32
    %153 = arith.addi %152, %c1_i32_38 : i32
    llvm.store %153, %2 : i32, !llvm.ptr
    %154 = arith.cmpi eq, %151, %153 : i32
    %155 = arith.extui %154 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %156 = arith.cmpi eq, %155, %c0_i32_39 : i32
    %157 = arith.extui %156 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %158 = arith.cmpi ne, %157, %c0_i32_40 : i32
    cf.cond_br %158, ^bb23, ^bb27
  ^bb27:  // pred: ^bb26
    cf.br ^bb22
  ^bb28:  // 4 preds: ^bb30, ^bb32, ^bb33, ^bb34
    %159 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_41 = arith.constant 4 : i32
    %160 = arith.addi %159, %c4_i32_41 : i32
    %161 = llvm.load %8 : !llvm.ptr -> i32
    %c65537_i32 = arith.constant 65537 : i32
    call @f148(%arg0, %160, %161, %c65537_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %162 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %163 = arith.extui %162 : i32 to i64
    %164 = arith.addi %163, %c4_i64 : i64
    %165 = llvm.getelementptr %21[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %166 = llvm.load volatile %165 {alignment = 1 : i64} : !llvm.ptr -> i8
    %167 = arith.extui %166 : i8 to i32
    %c128_i32 = arith.constant 128 : i32
    %168 = arith.cmpi eq, %167, %c128_i32 : i32
    %169 = arith.extui %168 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %170 = arith.cmpi ne, %169, %c0_i32_42 : i32
    cf.cond_br %170, ^bb36, ^bb37
  ^bb29:  // pred: ^bb21
    %171 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_43 = arith.constant 0 : i64
    %172 = arith.extui %171 : i32 to i64
    %173 = arith.addi %172, %c0_i64_43 : i64
    %174 = llvm.getelementptr %21[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %175 = llvm.load volatile %174 {alignment = 1 : i64} : !llvm.ptr -> i8
    %176 = arith.extui %175 : i8 to i32
    %c63_i32 = arith.constant 63 : i32
    %177 = arith.andi %176, %c63_i32 : i32
    llvm.store %177, %13 : i32, !llvm.ptr
    %178 = llvm.load %8 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %179 = arith.andi %178, %c31_i32 : i32
    llvm.store %179, %16 : i32, !llvm.ptr
    %180 = llvm.load %15 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %181 = arith.addi %180, %c2_i32 : i32
    llvm.store %181, %12 : i32, !llvm.ptr
    %182 = llvm.load %8 : !llvm.ptr -> i32
    %c-33_i32 = arith.constant -33 : i32
    %183 = arith.cmpi ugt, %182, %c-33_i32 : i32
    %184 = arith.extui %183 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %185 = arith.cmpi ne, %184, %c0_i32_44 : i32
    cf.cond_br %185, ^bb31, ^bb32
  ^bb30:  // pred: ^bb21
    %186 = llvm.load %8 : !llvm.ptr -> i32
    %c255_i32_45 = arith.constant 255 : i32
    %187 = arith.andi %186, %c255_i32_45 : i32
    llvm.store %187, %8 : i32, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb29
    %188 = llvm.load %13 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32_46 = arith.constant 31 : i32
    %189 = arith.cmpi ule, %c6_i32, %c31_i32_46 : i32
    %190 = scf.if %189 -> (i32) {
      %543 = arith.shli %188, %c6_i32 : i32
      scf.yield %543 : i32
    } else {
      %c0_i32_159 = arith.constant 0 : i32
      scf.yield %c0_i32_159 : i32
    }
    %191 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %192 = arith.extui %191 : i32 to i64
    %193 = arith.addi %192, %c0_i64_47 : i64
    %194 = llvm.getelementptr %21[%193] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %195 = llvm.load volatile %194 {alignment = 1 : i64} : !llvm.ptr -> i8
    %196 = arith.extui %195 : i8 to i32
    %c63_i32_48 = arith.constant 63 : i32
    %197 = arith.andi %196, %c63_i32_48 : i32
    %198 = arith.ori %190, %197 : i32
    llvm.store %198, %13 : i32, !llvm.ptr
    %199 = llvm.load %15 : !llvm.ptr -> i32
    %c3_i32_49 = arith.constant 3 : i32
    %200 = arith.addi %199, %c3_i32_49 : i32
    llvm.store %200, %12 : i32, !llvm.ptr
    %201 = llvm.load %8 : !llvm.ptr -> i32
    %c-16_i32 = arith.constant -16 : i32
    %202 = arith.cmpi uge, %201, %c-16_i32 : i32
    %203 = arith.extui %202 : i1 to i32
    %c0_i32_50 = arith.constant 0 : i32
    %204 = arith.cmpi ne, %203, %c0_i32_50 : i32
    cf.cond_br %204, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %205 = llvm.load %16 : !llvm.ptr -> i32
    %c6_i32_51 = arith.constant 6 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %206 = arith.cmpi ule, %c6_i32_51, %c31_i32_52 : i32
    %207 = scf.if %206 -> (i32) {
      %543 = arith.shli %205, %c6_i32_51 : i32
      scf.yield %543 : i32
    } else {
      %c0_i32_159 = arith.constant 0 : i32
      scf.yield %c0_i32_159 : i32
    }
    %208 = llvm.load %13 : !llvm.ptr -> i32
    %209 = arith.ori %207, %208 : i32
    llvm.store %209, %8 : i32, !llvm.ptr
    cf.br ^bb28
  ^bb33:  // pred: ^bb31
    %210 = llvm.load %13 : !llvm.ptr -> i32
    %c6_i32_53 = arith.constant 6 : i32
    %c31_i32_54 = arith.constant 31 : i32
    %211 = arith.cmpi ule, %c6_i32_53, %c31_i32_54 : i32
    %212 = scf.if %211 -> (i32) {
      %543 = arith.shli %210, %c6_i32_53 : i32
      scf.yield %543 : i32
    } else {
      %c0_i32_159 = arith.constant 0 : i32
      scf.yield %c0_i32_159 : i32
    }
    %213 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_55 = arith.constant 0 : i64
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.addi %214, %c0_i64_55 : i64
    %216 = llvm.getelementptr %21[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i8
    %218 = arith.extui %217 : i8 to i32
    %c63_i32_56 = arith.constant 63 : i32
    %219 = arith.andi %218, %c63_i32_56 : i32
    %220 = arith.ori %212, %219 : i32
    %221 = llvm.load %16 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_57 = arith.constant 31 : i32
    %222 = arith.cmpi ule, %c18_i32, %c31_i32_57 : i32
    %223 = scf.if %222 -> (i32) {
      %543 = arith.shli %221, %c18_i32 : i32
      scf.yield %543 : i32
    } else {
      %c0_i32_159 = arith.constant 0 : i32
      scf.yield %c0_i32_159 : i32
    }
    %c1835008_i32 = arith.constant 1835008 : i32
    %224 = arith.andi %223, %c1835008_i32 : i32
    %225 = arith.ori %220, %224 : i32
    llvm.store %225, %8 : i32, !llvm.ptr
    %226 = llvm.load %15 : !llvm.ptr -> i32
    %c4_i32_58 = arith.constant 4 : i32
    %227 = arith.addi %226, %c4_i32_58 : i32
    llvm.store %227, %12 : i32, !llvm.ptr
    cf.br ^bb28
  ^bb34:  // pred: ^bb31
    %228 = llvm.load %13 : !llvm.ptr -> i32
    %229 = llvm.load %16 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_59 = arith.constant 31 : i32
    %230 = arith.cmpi ule, %c12_i32, %c31_i32_59 : i32
    %231 = scf.if %230 -> (i32) {
      %543 = arith.shli %229, %c12_i32 : i32
      scf.yield %543 : i32
    } else {
      %c0_i32_159 = arith.constant 0 : i32
      scf.yield %c0_i32_159 : i32
    }
    %232 = arith.ori %228, %231 : i32
    llvm.store %232, %8 : i32, !llvm.ptr
    cf.br ^bb28
  ^bb35:  // 3 preds: ^bb58, ^bb72, ^bb79
    cf.br ^bb19
  ^bb36:  // 3 preds: ^bb28, ^bb37, ^bb82
    %233 = llvm.load %8 : !llvm.ptr -> i32
    %c128_i32_60 = arith.constant 128 : i32
    %234 = arith.cmpi uge, %233, %c128_i32_60 : i32
    %235 = arith.extui %234 : i1 to i32
    %c0_i32_61 = arith.constant 0 : i32
    %236 = arith.cmpi ne, %235, %c0_i32_61 : i32
    cf.cond_br %236, ^bb88, ^bb89
  ^bb37:  // pred: ^bb28
    %237 = llvm.load %3 : !llvm.ptr -> i32
    %c15_i64 = arith.constant 15 : i64
    %238 = arith.extui %237 : i32 to i64
    %239 = arith.addi %238, %c15_i64 : i64
    %240 = llvm.getelementptr %21[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %241 = llvm.load volatile %240 {alignment = 1 : i64} : !llvm.ptr -> i8
    %242 = arith.extui %241 : i8 to i32
    %243 = llvm.load %3 : !llvm.ptr -> i32
    %c14_i64 = arith.constant 14 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c14_i64 : i64
    %246 = llvm.getelementptr %21[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load volatile %246 {alignment = 1 : i64} : !llvm.ptr -> i8
    %248 = arith.extui %247 : i8 to i32
    %249 = arith.subi %242, %248 : i32
    %c255_i32_62 = arith.constant 255 : i32
    %250 = arith.andi %249, %c255_i32_62 : i32
    %c1_i32_63 = arith.constant 1 : i32
    %251 = arith.cmpi eq, %250, %c1_i32_63 : i32
    %252 = arith.extui %251 : i1 to i32
    %c0_i32_64 = arith.constant 0 : i32
    %253 = arith.cmpi ne, %252, %c0_i32_64 : i32
    cf.cond_br %253, ^bb36, ^bb38
  ^bb38:  // pred: ^bb37
    %254 = llvm.load %9 : !llvm.ptr -> i32
    %255 = llvm.load %11 : !llvm.ptr -> i32
    %256 = llvm.load %2 : !llvm.ptr -> i32
    %257 = arith.addi %255, %256 : i32
    llvm.store %257, %15 : i32, !llvm.ptr
    %258 = arith.cmpi ugt, %254, %257 : i32
    %259 = arith.extui %258 : i1 to i32
    %c0_i32_65 = arith.constant 0 : i32
    %260 = arith.cmpi ne, %259, %c0_i32_65 : i32
    cf.cond_br %260, ^bb18, ^bb39
  ^bb39:  // pred: ^bb38
    %261 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_66 = arith.constant 0 : i32
    %262 = arith.cmpi eq, %261, %c0_i32_66 : i32
    %263 = arith.extui %262 : i1 to i32
    %c0_i32_67 = arith.constant 0 : i32
    %264 = arith.cmpi ne, %263, %c0_i32_67 : i32
    cf.cond_br %264, ^bb40, ^bb41
  ^bb40:  // 3 preds: ^bb39, ^bb43, ^bb45
    %265 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_68 = arith.constant 0 : i32
    %266 = arith.cmpi eq, %265, %c0_i32_68 : i32
    %267 = arith.extui %266 : i1 to i32
    %c0_i32_69 = arith.constant 0 : i32
    %268 = arith.cmpi ne, %267, %c0_i32_69 : i32
    cf.cond_br %268, ^bb46, ^bb47
  ^bb41:  // pred: ^bb39
    %269 = llvm.load %9 : !llvm.ptr -> i32
    %270 = llvm.load %1 : !llvm.ptr -> i32
    %271 = arith.cmpi uge, %269, %270 : i32
    %272 = arith.extui %271 : i1 to i32
    %c0_i32_70 = arith.constant 0 : i32
    %273 = arith.cmpi ne, %272, %c0_i32_70 : i32
    cf.cond_br %273, ^bb42, ^bb43
  ^bb42:  // pred: ^bb41
    %274 = llvm.load %9 : !llvm.ptr -> i32
    %275 = llvm.load %1 : !llvm.ptr -> i32
    %276 = arith.cmpi eq, %274, %275 : i32
    %277 = arith.extui %276 : i1 to i32
    %c0_i32_71 = arith.constant 0 : i32
    %278 = arith.cmpi eq, %277, %c0_i32_71 : i32
    %279 = arith.extui %278 : i1 to i32
    %c0_i32_72 = arith.constant 0 : i32
    %280 = arith.cmpi ne, %279, %c0_i32_72 : i32
    cf.cond_br %280, ^bb18, ^bb45
  ^bb43:  // pred: ^bb41
    %281 = llvm.load %0 : !llvm.ptr -> i32
    %282 = llvm.load %9 : !llvm.ptr -> i32
    %283 = arith.addi %281, %282 : i32
    %c0_i64_73 = arith.constant 0 : i64
    %284 = arith.extui %283 : i32 to i64
    %285 = arith.addi %284, %c0_i64_73 : i64
    %286 = llvm.getelementptr %21[%285] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %287 = llvm.load volatile %286 {alignment = 1 : i64} : !llvm.ptr -> i8
    %288 = arith.extsi %287 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %289 = arith.cmpi sgt, %288, %c-65_i32 : i32
    %290 = arith.extui %289 : i1 to i32
    %c0_i32_74 = arith.constant 0 : i32
    %291 = arith.cmpi ne, %290, %c0_i32_74 : i32
    cf.cond_br %291, ^bb40, ^bb44
  ^bb44:  // pred: ^bb43
    cf.br ^bb18
  ^bb45:  // pred: ^bb42
    cf.br ^bb40
  ^bb46:  // 3 preds: ^bb40, ^bb50, ^bb51
    %292 = llvm.load %5 : !llvm.ptr -> i32
    %293 = llvm.load %0 : !llvm.ptr -> i32
    %294 = llvm.load %9 : !llvm.ptr -> i32
    %295 = arith.addi %293, %294 : i32
    %296 = llvm.load %11 : !llvm.ptr -> i32
    %297 = llvm.load %9 : !llvm.ptr -> i32
    %298 = arith.subi %296, %297 : i32
    %299 = llvm.load %2 : !llvm.ptr -> i32
    %300 = arith.addi %298, %299 : i32
    %301 = llvm.load %6 : !llvm.ptr -> i32
    %c12_i64_75 = arith.constant 12 : i64
    %302 = arith.extui %301 : i32 to i64
    %303 = arith.addi %302, %c12_i64_75 : i64
    %304 = llvm.getelementptr %21[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %305 = llvm.load volatile %304 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %305, %15 : i32, !llvm.ptr
    %306 = arith.cmpi ult, %305, %33 : i32
    cf.cond_br %306, ^bb52, ^bb53
  ^bb47:  // pred: ^bb40
    %307 = llvm.load %15 : !llvm.ptr -> i32
    %308 = llvm.load %1 : !llvm.ptr -> i32
    %309 = arith.cmpi uge, %307, %308 : i32
    %310 = arith.extui %309 : i1 to i32
    %c0_i32_76 = arith.constant 0 : i32
    %311 = arith.cmpi ne, %310, %c0_i32_76 : i32
    cf.cond_br %311, ^bb48, ^bb49
  ^bb48:  // pred: ^bb47
    %312 = llvm.load %15 : !llvm.ptr -> i32
    %313 = llvm.load %10 : !llvm.ptr -> i32
    %314 = arith.addi %312, %313 : i32
    %c0_i32_77 = arith.constant 0 : i32
    %315 = arith.cmpi ne, %314, %c0_i32_77 : i32
    cf.cond_br %315, ^bb18, ^bb51
  ^bb49:  // pred: ^bb47
    %316 = llvm.load %0 : !llvm.ptr -> i32
    %317 = llvm.load %11 : !llvm.ptr -> i32
    %318 = arith.addi %316, %317 : i32
    %319 = llvm.load %2 : !llvm.ptr -> i32
    %320 = arith.addi %318, %319 : i32
    %c0_i64_78 = arith.constant 0 : i64
    %321 = arith.extui %320 : i32 to i64
    %322 = arith.addi %321, %c0_i64_78 : i64
    %323 = llvm.getelementptr %21[%322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %324 = llvm.load volatile %323 {alignment = 1 : i64} : !llvm.ptr -> i8
    %325 = arith.extsi %324 : i8 to i32
    %c-65_i32_79 = arith.constant -65 : i32
    %326 = arith.cmpi sle, %325, %c-65_i32_79 : i32
    %327 = arith.extui %326 : i1 to i32
    %c0_i32_80 = arith.constant 0 : i32
    %328 = arith.cmpi ne, %327, %c0_i32_80 : i32
    cf.cond_br %328, ^bb18, ^bb50
  ^bb50:  // pred: ^bb49
    cf.br ^bb46
  ^bb51:  // pred: ^bb48
    cf.br ^bb46
  ^bb52:  // 2 preds: ^bb46, ^bb53
    %329 = llvm.getelementptr inbounds %31[%305] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %330 = llvm.load %329 : !llvm.ptr -> !llvm.ptr
    %331 = llvm.ptrtoint %330 : !llvm.ptr to i64
    %c0_i64_81 = arith.constant 0 : i64
    %332 = arith.cmpi eq, %331, %c0_i64_81 : i64
    cf.cond_br %332, ^bb55, ^bb54
  ^bb53:  // pred: ^bb46
    %c3_i32_82 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_82) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %333 = llvm.getelementptr %330[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %334 = llvm.getelementptr %330[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %335 = llvm.getelementptr %330[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %336 = llvm.load %333 : !llvm.ptr -> !llvm.ptr
    %337 = llvm.load %335 : !llvm.ptr -> !llvm.ptr
    %338 = llvm.ptrtoint %336 : !llvm.ptr to i64
    %c0_i64_83 = arith.constant 0 : i64
    %339 = arith.cmpi eq, %338, %c0_i64_83 : i64
    cf.cond_br %339, ^bb57, ^bb56
  ^bb55:  // pred: ^bb52
    %c4_i32_84 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_84) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %340 = llvm.load %334 : !llvm.ptr -> i32
    %341 = arith.cmpi ne, %30, %340 : i32
    cf.cond_br %341, ^bb59, ^bb58
  ^bb57:  // pred: ^bb54
    %c3_i32_85 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_85) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %342 = llvm.call %336(%337, %292, %295, %300) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_86 = arith.constant 0 : i32
    %343 = arith.cmpi ne, %342, %c0_i32_86 : i32
    cf.cond_br %343, ^bb35, ^bb60
  ^bb59:  // pred: ^bb56
    %c5_i32_87 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_87) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // pred: ^bb58
    %344 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_88 = arith.constant 4 : i64
    %345 = arith.extui %344 : i32 to i64
    %346 = arith.addi %345, %c4_i64_88 : i64
    %347 = llvm.getelementptr %21[%346] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %348 = llvm.load volatile %347 {alignment = 1 : i64} : !llvm.ptr -> i8
    %349 = arith.extui %348 : i8 to i32
    %c128_i32_89 = arith.constant 128 : i32
    %350 = arith.cmpi eq, %349, %c128_i32_89 : i32
    %351 = arith.extui %350 : i1 to i32
    %c0_i32_90 = arith.constant 0 : i32
    %352 = arith.cmpi eq, %351, %c0_i32_90 : i32
    %353 = arith.extui %352 : i1 to i32
    %c0_i32_91 = arith.constant 0 : i32
    %354 = arith.cmpi ne, %353, %c0_i32_91 : i32
    cf.cond_br %354, ^bb62, ^bb63
  ^bb61:  // 2 preds: ^bb70, ^bb81
    %355 = llvm.load %8 : !llvm.ptr -> i32
    %c128_i32_92 = arith.constant 128 : i32
    %356 = arith.cmpi uge, %355, %c128_i32_92 : i32
    %357 = arith.extui %356 : i1 to i32
    %c0_i32_93 = arith.constant 0 : i32
    %358 = arith.cmpi ne, %357, %c0_i32_93 : i32
    cf.cond_br %358, ^bb83, ^bb84
  ^bb62:  // pred: ^bb60
    %359 = llvm.load %5 : !llvm.ptr -> i32
    %360 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_94 = arith.constant 4 : i32
    %361 = arith.addi %360, %c4_i32_94 : i32
    %362 = llvm.load %3 : !llvm.ptr -> i32
    %c14_i64_95 = arith.constant 14 : i64
    %363 = arith.extui %362 : i32 to i64
    %364 = arith.addi %363, %c14_i64_95 : i64
    %365 = llvm.getelementptr %21[%364] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %366 = llvm.load volatile %365 {alignment = 1 : i64} : !llvm.ptr -> i8
    %367 = arith.extui %366 : i8 to i32
    llvm.store %367, %13 : i32, !llvm.ptr
    %368 = arith.addi %361, %367 : i32
    %369 = llvm.load %3 : !llvm.ptr -> i32
    %c15_i64_96 = arith.constant 15 : i64
    %370 = arith.extui %369 : i32 to i64
    %371 = arith.addi %370, %c15_i64_96 : i64
    %372 = llvm.getelementptr %21[%371] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %373 = llvm.load volatile %372 {alignment = 1 : i64} : !llvm.ptr -> i8
    %374 = arith.extui %373 : i8 to i32
    %375 = llvm.load %13 : !llvm.ptr -> i32
    %376 = arith.subi %374, %375 : i32
    %377 = llvm.load %15 : !llvm.ptr -> i32
    %378 = arith.cmpi ult, %377, %39 : i32
    cf.cond_br %378, ^bb73, ^bb74
  ^bb63:  // pred: ^bb60
    %379 = llvm.load %5 : !llvm.ptr -> i32
    %380 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %381 = arith.extui %380 : i32 to i64
    %382 = arith.addi %381, %c8_i64 : i64
    %383 = llvm.getelementptr %21[%382] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %384 = llvm.load volatile %383 {alignment = 1 : i64} : !llvm.ptr -> i32
    %385 = llvm.load %7 : !llvm.ptr -> i32
    %386 = arith.cmpi ult, %385, %36 : i32
    cf.cond_br %386, ^bb64, ^bb65
  ^bb64:  // 2 preds: ^bb63, ^bb65
    %387 = llvm.getelementptr inbounds %34[%385] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %388 = llvm.load %387 : !llvm.ptr -> !llvm.ptr
    %389 = llvm.ptrtoint %388 : !llvm.ptr to i64
    %c0_i64_97 = arith.constant 0 : i64
    %390 = arith.cmpi eq, %389, %c0_i64_97 : i64
    cf.cond_br %390, ^bb67, ^bb66
  ^bb65:  // pred: ^bb63
    %c3_i32_98 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_98) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %391 = llvm.getelementptr %388[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %392 = llvm.getelementptr %388[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %393 = llvm.getelementptr %388[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %394 = llvm.load %391 : !llvm.ptr -> !llvm.ptr
    %395 = llvm.load %393 : !llvm.ptr -> !llvm.ptr
    %396 = llvm.ptrtoint %394 : !llvm.ptr to i64
    %c0_i64_99 = arith.constant 0 : i64
    %397 = arith.cmpi eq, %396, %c0_i64_99 : i64
    cf.cond_br %397, ^bb69, ^bb68
  ^bb67:  // pred: ^bb64
    %c4_i32_100 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_100) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %398 = llvm.load %392 : !llvm.ptr -> i32
    %399 = arith.cmpi ne, %23, %398 : i32
    cf.cond_br %399, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c3_i32_101 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_101) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %400 = llvm.call %394(%395, %379, %384) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_102 = arith.constant 0 : i32
    %401 = arith.cmpi eq, %400, %c0_i32_102 : i32
    %402 = arith.extui %401 : i1 to i32
    %c0_i32_103 = arith.constant 0 : i32
    %403 = arith.cmpi ne, %402, %c0_i32_103 : i32
    cf.cond_br %403, ^bb61, ^bb72
  ^bb71:  // pred: ^bb68
    %c5_i32_104 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_104) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // pred: ^bb70
    cf.br ^bb35
  ^bb73:  // 2 preds: ^bb62, ^bb74
    %404 = llvm.getelementptr inbounds %37[%377] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %405 = llvm.load %404 : !llvm.ptr -> !llvm.ptr
    %406 = llvm.ptrtoint %405 : !llvm.ptr to i64
    %c0_i64_105 = arith.constant 0 : i64
    %407 = arith.cmpi eq, %406, %c0_i64_105 : i64
    cf.cond_br %407, ^bb76, ^bb75
  ^bb74:  // pred: ^bb62
    %c3_i32_106 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_106) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %408 = llvm.getelementptr %405[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %409 = llvm.getelementptr %405[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %410 = llvm.getelementptr %405[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %411 = llvm.load %408 : !llvm.ptr -> !llvm.ptr
    %412 = llvm.load %410 : !llvm.ptr -> !llvm.ptr
    %413 = llvm.ptrtoint %411 : !llvm.ptr to i64
    %c0_i64_107 = arith.constant 0 : i64
    %414 = arith.cmpi eq, %413, %c0_i64_107 : i64
    cf.cond_br %414, ^bb78, ^bb77
  ^bb76:  // pred: ^bb73
    %c4_i32_108 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_108) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %415 = llvm.load %409 : !llvm.ptr -> i32
    %416 = arith.cmpi ne, %30, %415 : i32
    cf.cond_br %416, ^bb80, ^bb79
  ^bb78:  // pred: ^bb75
    %c3_i32_109 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_109) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %417 = llvm.call %411(%412, %359, %368, %376) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_110 = arith.constant 0 : i32
    %418 = arith.cmpi ne, %417, %c0_i32_110 : i32
    cf.cond_br %418, ^bb35, ^bb81
  ^bb80:  // pred: ^bb77
    %c5_i32_111 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_111) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // pred: ^bb79
    cf.br ^bb61
  ^bb82:  // 3 preds: ^bb84, ^bb85, ^bb86
    %419 = llvm.load %15 : !llvm.ptr -> i32
    %420 = llvm.load %11 : !llvm.ptr -> i32
    %421 = arith.addi %419, %420 : i32
    %422 = llvm.load %2 : !llvm.ptr -> i32
    %423 = arith.addi %421, %422 : i32
    llvm.store %423, %9 : i32, !llvm.ptr
    cf.br ^bb36
  ^bb83:  // pred: ^bb61
    %424 = llvm.load %8 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %425 = arith.cmpi uge, %424, %c2048_i32 : i32
    %426 = arith.extui %425 : i1 to i32
    %c0_i32_112 = arith.constant 0 : i32
    %427 = arith.cmpi ne, %426, %c0_i32_112 : i32
    cf.cond_br %427, ^bb85, ^bb86
  ^bb84:  // pred: ^bb61
    %c1_i32_113 = arith.constant 1 : i32
    llvm.store %c1_i32_113, %15 : i32, !llvm.ptr
    cf.br ^bb82
  ^bb85:  // pred: ^bb83
    %c3_i32_114 = arith.constant 3 : i32
    %c4_i32_115 = arith.constant 4 : i32
    %428 = llvm.load %8 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %429 = arith.cmpi ult, %428, %c65536_i32 : i32
    %430 = arith.extui %429 : i1 to i32
    %c0_i32_116 = arith.constant 0 : i32
    %431 = arith.cmpi ne, %430, %c0_i32_116 : i32
    %432 = arith.select %431, %c3_i32_114, %c4_i32_115 : i32
    llvm.store %432, %15 : i32, !llvm.ptr
    cf.br ^bb82
  ^bb86:  // pred: ^bb83
    %c2_i32_117 = arith.constant 2 : i32
    llvm.store %c2_i32_117, %15 : i32, !llvm.ptr
    cf.br ^bb82
  ^bb87:  // 3 preds: ^bb89, ^bb90, ^bb91
    %433 = llvm.load %8 : !llvm.ptr -> i32
    %434 = llvm.load %11 : !llvm.ptr -> i32
    %435 = arith.addi %433, %434 : i32
    llvm.store %435, %8 : i32, !llvm.ptr
    %436 = llvm.load %2 : !llvm.ptr -> i32
    %437 = arith.addi %435, %436 : i32
    llvm.store %437, %11 : i32, !llvm.ptr
    %438 = llvm.load %14 : !llvm.ptr -> i32
    %439 = llvm.load %12 : !llvm.ptr -> i32
    %440 = arith.subi %438, %439 : i32
    llvm.store %440, %13 : i32, !llvm.ptr
    %c0_i32_118 = arith.constant 0 : i32
    %441 = arith.cmpi eq, %440, %c0_i32_118 : i32
    %442 = arith.extui %441 : i1 to i32
    %c0_i32_119 = arith.constant 0 : i32
    %443 = arith.cmpi ne, %442, %c0_i32_119 : i32
    cf.cond_br %443, ^bb17, ^bb92
  ^bb88:  // pred: ^bb36
    %444 = llvm.load %8 : !llvm.ptr -> i32
    %c2048_i32_120 = arith.constant 2048 : i32
    %445 = arith.cmpi uge, %444, %c2048_i32_120 : i32
    %446 = arith.extui %445 : i1 to i32
    %c0_i32_121 = arith.constant 0 : i32
    %447 = arith.cmpi ne, %446, %c0_i32_121 : i32
    cf.cond_br %447, ^bb90, ^bb91
  ^bb89:  // pred: ^bb36
    %c1_i32_122 = arith.constant 1 : i32
    llvm.store %c1_i32_122, %8 : i32, !llvm.ptr
    cf.br ^bb87
  ^bb90:  // pred: ^bb88
    %c3_i32_123 = arith.constant 3 : i32
    %c4_i32_124 = arith.constant 4 : i32
    %448 = llvm.load %8 : !llvm.ptr -> i32
    %c65536_i32_125 = arith.constant 65536 : i32
    %449 = arith.cmpi ult, %448, %c65536_i32_125 : i32
    %450 = arith.extui %449 : i1 to i32
    %c0_i32_126 = arith.constant 0 : i32
    %451 = arith.cmpi ne, %450, %c0_i32_126 : i32
    %452 = arith.select %451, %c3_i32_123, %c4_i32_124 : i32
    llvm.store %452, %8 : i32, !llvm.ptr
    cf.br ^bb87
  ^bb91:  // pred: ^bb88
    %c2_i32_127 = arith.constant 2 : i32
    llvm.store %c2_i32_127, %8 : i32, !llvm.ptr
    cf.br ^bb87
  ^bb92:  // pred: ^bb87
    cf.br ^bb20
  ^bb93:  // 5 preds: ^bb16, ^bb97, ^bb98, ^bb105, ^bb106
    %453 = llvm.load %0 : !llvm.ptr -> i32
    %454 = llvm.load %1 : !llvm.ptr -> i32
    %455 = llvm.load %9 : !llvm.ptr -> i32
    %456 = llvm.load %2 : !llvm.ptr -> i32
    %c1051144_i32 = arith.constant 1051144 : i32
    call @f177(%arg0, %453, %454, %455, %456, %c1051144_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32_128 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_128) : (i32) -> ()
    llvm.unreachable
  ^bb94:  // pred: ^bb16
    %c0_i32_129 = arith.constant 0 : i32
    llvm.store %c0_i32_129, %8 : i32, !llvm.ptr
    %457 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_130 = arith.constant 0 : i32
    %458 = arith.cmpi eq, %457, %c0_i32_130 : i32
    %459 = arith.extui %458 : i1 to i32
    %c0_i32_131 = arith.constant 0 : i32
    %460 = arith.cmpi ne, %459, %c0_i32_131 : i32
    cf.cond_br %460, ^bb95, ^bb96
  ^bb95:  // 3 preds: ^bb94, ^bb99, ^bb100
    %461 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_132 = arith.constant 0 : i32
    %462 = arith.cmpi ne, %461, %c0_i32_132 : i32
    cf.cond_br %462, ^bb101, ^bb102
  ^bb96:  // pred: ^bb94
    %463 = llvm.load %9 : !llvm.ptr -> i32
    %464 = llvm.load %1 : !llvm.ptr -> i32
    %465 = arith.cmpi uge, %463, %464 : i32
    %466 = arith.extui %465 : i1 to i32
    %c0_i32_133 = arith.constant 0 : i32
    %467 = arith.cmpi ne, %466, %c0_i32_133 : i32
    cf.cond_br %467, ^bb97, ^bb98
  ^bb97:  // pred: ^bb96
    %468 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %468, %8 : i32, !llvm.ptr
    %469 = llvm.load %9 : !llvm.ptr -> i32
    %470 = llvm.load %1 : !llvm.ptr -> i32
    %471 = arith.cmpi eq, %469, %470 : i32
    %472 = arith.extui %471 : i1 to i32
    %c0_i32_134 = arith.constant 0 : i32
    %473 = arith.cmpi eq, %472, %c0_i32_134 : i32
    %474 = arith.extui %473 : i1 to i32
    %c0_i32_135 = arith.constant 0 : i32
    %475 = arith.cmpi ne, %474, %c0_i32_135 : i32
    cf.cond_br %475, ^bb93, ^bb100
  ^bb98:  // pred: ^bb96
    %476 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %476, %8 : i32, !llvm.ptr
    %477 = llvm.load %0 : !llvm.ptr -> i32
    %478 = llvm.load %9 : !llvm.ptr -> i32
    %479 = arith.addi %477, %478 : i32
    %c0_i64_136 = arith.constant 0 : i64
    %480 = arith.extui %479 : i32 to i64
    %481 = arith.addi %480, %c0_i64_136 : i64
    %482 = llvm.getelementptr %21[%481] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %483 = llvm.load volatile %482 {alignment = 1 : i64} : !llvm.ptr -> i8
    %484 = arith.extsi %483 : i8 to i32
    %c-65_i32_137 = arith.constant -65 : i32
    %485 = arith.cmpi sle, %484, %c-65_i32_137 : i32
    %486 = arith.extui %485 : i1 to i32
    %c0_i32_138 = arith.constant 0 : i32
    %487 = arith.cmpi ne, %486, %c0_i32_138 : i32
    cf.cond_br %487, ^bb93, ^bb99
  ^bb99:  // pred: ^bb98
    cf.br ^bb95
  ^bb100:  // pred: ^bb97
    cf.br ^bb95
  ^bb101:  // pred: ^bb95
    %488 = llvm.load %2 : !llvm.ptr -> i32
    %489 = llvm.load %1 : !llvm.ptr -> i32
    %490 = arith.cmpi uge, %488, %489 : i32
    %491 = arith.extui %490 : i1 to i32
    %c0_i32_139 = arith.constant 0 : i32
    %492 = arith.cmpi ne, %491, %c0_i32_139 : i32
    cf.cond_br %492, ^bb103, ^bb104
  ^bb102:  // pred: ^bb95
    %c0_i32_140 = arith.constant 0 : i32
    llvm.store %c0_i32_140, %2 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb103:  // pred: ^bb101
    %493 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %493, %9 : i32, !llvm.ptr
    %494 = llvm.load %2 : !llvm.ptr -> i32
    %495 = llvm.load %1 : !llvm.ptr -> i32
    %496 = arith.cmpi eq, %494, %495 : i32
    %497 = arith.extui %496 : i1 to i32
    %c0_i32_141 = arith.constant 0 : i32
    %498 = arith.cmpi ne, %497, %c0_i32_141 : i32
    cf.cond_br %498, ^bb13, ^bb106
  ^bb104:  // pred: ^bb101
    %499 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %499, %9 : i32, !llvm.ptr
    %500 = llvm.load %0 : !llvm.ptr -> i32
    %501 = llvm.load %2 : !llvm.ptr -> i32
    %502 = arith.addi %500, %501 : i32
    %c0_i64_142 = arith.constant 0 : i64
    %503 = arith.extui %502 : i32 to i64
    %504 = arith.addi %503, %c0_i64_142 : i64
    %505 = llvm.getelementptr %21[%504] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %506 = llvm.load volatile %505 {alignment = 1 : i64} : !llvm.ptr -> i8
    %507 = arith.extsi %506 : i8 to i32
    %c-65_i32_143 = arith.constant -65 : i32
    %508 = arith.cmpi sgt, %507, %c-65_i32_143 : i32
    %509 = arith.extui %508 : i1 to i32
    %c0_i32_144 = arith.constant 0 : i32
    %510 = arith.cmpi ne, %509, %c0_i32_144 : i32
    cf.cond_br %510, ^bb13, ^bb105
  ^bb105:  // pred: ^bb104
    cf.br ^bb93
  ^bb106:  // pred: ^bb103
    cf.br ^bb93
  ^bb107:  // 2 preds: ^bb13, ^bb108
    %511 = llvm.getelementptr inbounds %40[%95] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %512 = llvm.load %511 : !llvm.ptr -> !llvm.ptr
    %513 = llvm.ptrtoint %512 : !llvm.ptr to i64
    %c0_i64_145 = arith.constant 0 : i64
    %514 = arith.cmpi eq, %513, %c0_i64_145 : i64
    cf.cond_br %514, ^bb110, ^bb109
  ^bb108:  // pred: ^bb13
    %c3_i32_146 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_146) : (i32) -> ()
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb107, ^bb110
    %515 = llvm.getelementptr %512[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %516 = llvm.getelementptr %512[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %517 = llvm.getelementptr %512[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %518 = llvm.load %515 : !llvm.ptr -> !llvm.ptr
    %519 = llvm.load %517 : !llvm.ptr -> !llvm.ptr
    %520 = llvm.ptrtoint %518 : !llvm.ptr to i64
    %c0_i64_147 = arith.constant 0 : i64
    %521 = arith.cmpi eq, %520, %c0_i64_147 : i64
    cf.cond_br %521, ^bb112, ^bb111
  ^bb110:  // pred: ^bb107
    %c4_i32_148 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_148) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // 2 preds: ^bb109, ^bb112
    %522 = llvm.load %516 : !llvm.ptr -> i32
    %523 = arith.cmpi ne, %30, %522 : i32
    cf.cond_br %523, ^bb114, ^bb113
  ^bb112:  // pred: ^bb109
    %c3_i32_149 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_149) : (i32) -> ()
    cf.br ^bb111
  ^bb113:  // 2 preds: ^bb111, ^bb114
    %524 = llvm.call %518(%519, %84, %87, %90) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_150 = arith.constant 0 : i32
    %525 = arith.cmpi ne, %524, %c0_i32_150 : i32
    cf.cond_br %525, ^bb3, ^bb115
  ^bb114:  // pred: ^bb111
    %c5_i32_151 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_151) : (i32) -> ()
    cf.br ^bb113
  ^bb115:  // pred: ^bb113
    %526 = llvm.load %5 : !llvm.ptr -> i32
    %c34_i32_152 = arith.constant 34 : i32
    %527 = llvm.load %7 : !llvm.ptr -> i32
    %528 = arith.cmpi ult, %527, %45 : i32
    cf.cond_br %528, ^bb116, ^bb117
  ^bb116:  // 2 preds: ^bb115, ^bb117
    %529 = llvm.getelementptr inbounds %43[%527] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %530 = llvm.load %529 : !llvm.ptr -> !llvm.ptr
    %531 = llvm.ptrtoint %530 : !llvm.ptr to i64
    %c0_i64_153 = arith.constant 0 : i64
    %532 = arith.cmpi eq, %531, %c0_i64_153 : i64
    cf.cond_br %532, ^bb119, ^bb118
  ^bb117:  // pred: ^bb115
    %c3_i32_154 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_154) : (i32) -> ()
    cf.br ^bb116
  ^bb118:  // 2 preds: ^bb116, ^bb119
    %533 = llvm.getelementptr %530[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %534 = llvm.getelementptr %530[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %535 = llvm.getelementptr %530[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %536 = llvm.load %533 : !llvm.ptr -> !llvm.ptr
    %537 = llvm.load %535 : !llvm.ptr -> !llvm.ptr
    %538 = llvm.ptrtoint %536 : !llvm.ptr to i64
    %c0_i64_155 = arith.constant 0 : i64
    %539 = arith.cmpi eq, %538, %c0_i64_155 : i64
    cf.cond_br %539, ^bb121, ^bb120
  ^bb119:  // pred: ^bb116
    %c4_i32_156 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_156) : (i32) -> ()
    cf.br ^bb118
  ^bb120:  // 2 preds: ^bb118, ^bb121
    %540 = llvm.load %534 : !llvm.ptr -> i32
    %541 = arith.cmpi ne, %23, %540 : i32
    cf.cond_br %541, ^bb123, ^bb122
  ^bb121:  // pred: ^bb118
    %c3_i32_157 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_157) : (i32) -> ()
    cf.br ^bb120
  ^bb122:  // 2 preds: ^bb120, ^bb123
    %542 = llvm.call %536(%537, %526, %c34_i32_152) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    llvm.store %542, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb123:  // pred: ^bb120
    %c5_i32_158 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_158) : (i32) -> ()
    cf.br ^bb122
  }
  func.func @f177(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %7 = llvm.load %2 : !llvm.ptr -> i32
    %8 = llvm.load %3 : !llvm.ptr -> i32
    %9 = llvm.load %4 : !llvm.ptr -> i32
    call @f181(%arg0, %5, %6, %7, %8, %9) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f178(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[24] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %13 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %arg0[336] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %14 : !llvm.ptr -> i64
    %17 = arith.trunci %16 : i64 to i32
    %18 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %14 : !llvm.ptr -> i64
    %20 = arith.trunci %19 : i64 to i32
    %21 = llvm.getelementptr %arg0[20] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %21 : !llvm.ptr -> i32
    %23 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %14 : !llvm.ptr -> i64
    %25 = arith.trunci %24 : i64 to i32
    %26 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %14 : !llvm.ptr -> i64
    %28 = arith.trunci %27 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %29 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %30 = arith.subi %29, %c16_i32 : i32
    llvm.store %30, %2 : i32, !llvm.ptr
    llvm.store %30, %7 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    llvm.store %c1_i32_5, %3 : i32, !llvm.ptr
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c20_i64 : i64
    %34 = llvm.getelementptr %10[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %35, %4 : i32, !llvm.ptr
    %c39_i32 = arith.constant 39 : i32
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c24_i64 : i64
    %39 = llvm.getelementptr %10[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %40, %5 : i32, !llvm.ptr
    %c16_i64 = arith.constant 16 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c16_i64 : i64
    %43 = llvm.getelementptr %10[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %44, %1 : i32, !llvm.ptr
    %45 = arith.cmpi ult, %44, %17 : i32
    cf.cond_br %45, ^bb4, ^bb5
  ^bb2(%46: i32):  // pred: ^bb3
    return %46 : i32
  ^bb3:  // 4 preds: ^bb10, ^bb24, ^bb31, ^bb40
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_6 = arith.constant 16 : i32
    %48 = arith.addi %47, %c16_i32_6 : i32
    llvm.store %48, %7 : i32, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb2(%49 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %50 = llvm.getelementptr inbounds %15[%44] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.ptrtoint %51 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %53 = arith.cmpi eq, %52, %c0_i64 : i64
    cf.cond_br %53, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %54 = llvm.getelementptr %51[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %55 = llvm.getelementptr %51[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %56 = llvm.getelementptr %51[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %57 = llvm.load %54 : !llvm.ptr -> !llvm.ptr
    %58 = llvm.load %56 : !llvm.ptr -> !llvm.ptr
    %59 = llvm.ptrtoint %57 : !llvm.ptr to i64
    %c0_i64_7 = arith.constant 0 : i64
    %60 = arith.cmpi eq, %59, %c0_i64_7 : i64
    cf.cond_br %60, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %61 = llvm.load %55 : !llvm.ptr -> i32
    %62 = arith.cmpi ne, %12, %61 : i32
    cf.cond_br %62, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_8 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_8) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %63 = llvm.call %57(%58, %35, %c39_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_9 : i32
    cf.cond_br %64, ^bb3, ^bb12
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // pred: ^bb10
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_10 = arith.constant 4 : i32
    %66 = arith.addi %65, %c4_i32_10 : i32
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_11 : i64
    %70 = llvm.getelementptr %10[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c257_i32 = arith.constant 257 : i32
    call @f148(%arg0, %66, %71, %c257_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c4_i64 : i64
    %75 = llvm.getelementptr %10[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i8
    %77 = arith.extui %76 : i8 to i32
    %c128_i32 = arith.constant 128 : i32
    %78 = arith.cmpi eq, %77, %c128_i32 : i32
    %79 = arith.extui %78 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %80 = arith.cmpi eq, %79, %c0_i32_12 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_13 : i32
    cf.cond_br %82, ^bb14, ^bb15
  ^bb13:  // 2 preds: ^bb22, ^bb33
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %c39_i32_14 = arith.constant 39 : i32
    %84 = llvm.load %1 : !llvm.ptr -> i32
    %85 = arith.cmpi ult, %84, %28 : i32
    cf.cond_br %85, ^bb34, ^bb35
  ^bb14:  // pred: ^bb12
    %86 = llvm.load %4 : !llvm.ptr -> i32
    %87 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_15 = arith.constant 4 : i32
    %88 = arith.addi %87, %c4_i32_15 : i32
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c14_i64 = arith.constant 14 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c14_i64 : i64
    %92 = llvm.getelementptr %10[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i8
    %94 = arith.extui %93 : i8 to i32
    llvm.store %94, %0 : i32, !llvm.ptr
    %95 = arith.addi %88, %94 : i32
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %c15_i64 = arith.constant 15 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c15_i64 : i64
    %99 = llvm.getelementptr %10[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i8
    %101 = arith.extui %100 : i8 to i32
    %102 = llvm.load %0 : !llvm.ptr -> i32
    %103 = arith.subi %101, %102 : i32
    %104 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %105 = arith.extui %104 : i32 to i64
    %106 = arith.addi %105, %c12_i64 : i64
    %107 = llvm.getelementptr %10[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %108 = llvm.load volatile %107 {alignment = 1 : i64} : !llvm.ptr -> i32
    %109 = arith.cmpi ult, %108, %25 : i32
    cf.cond_br %109, ^bb25, ^bb26
  ^bb15:  // pred: ^bb12
    %110 = llvm.load %4 : !llvm.ptr -> i32
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c8_i64 : i64
    %114 = llvm.getelementptr %10[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %115 = llvm.load volatile %114 {alignment = 1 : i64} : !llvm.ptr -> i32
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %117 = arith.cmpi ult, %116, %20 : i32
    cf.cond_br %117, ^bb16, ^bb17
  ^bb16:  // 2 preds: ^bb15, ^bb17
    %118 = llvm.getelementptr inbounds %18[%116] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %119 = llvm.load %118 : !llvm.ptr -> !llvm.ptr
    %120 = llvm.ptrtoint %119 : !llvm.ptr to i64
    %c0_i64_16 = arith.constant 0 : i64
    %121 = arith.cmpi eq, %120, %c0_i64_16 : i64
    cf.cond_br %121, ^bb19, ^bb18
  ^bb17:  // pred: ^bb15
    %c3_i32_17 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_17) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %122 = llvm.getelementptr %119[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %123 = llvm.getelementptr %119[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %124 = llvm.getelementptr %119[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %125 = llvm.load %122 : !llvm.ptr -> !llvm.ptr
    %126 = llvm.load %124 : !llvm.ptr -> !llvm.ptr
    %127 = llvm.ptrtoint %125 : !llvm.ptr to i64
    %c0_i64_18 = arith.constant 0 : i64
    %128 = arith.cmpi eq, %127, %c0_i64_18 : i64
    cf.cond_br %128, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c4_i32_19 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_19) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %129 = llvm.load %123 : !llvm.ptr -> i32
    %130 = arith.cmpi ne, %12, %129 : i32
    cf.cond_br %130, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c3_i32_20 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_20) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %131 = llvm.call %125(%126, %110, %115) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %132 = arith.cmpi eq, %131, %c0_i32_21 : i32
    %133 = arith.extui %132 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %134 = arith.cmpi ne, %133, %c0_i32_22 : i32
    cf.cond_br %134, ^bb13, ^bb24
  ^bb23:  // pred: ^bb20
    %c5_i32_23 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_23) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // pred: ^bb22
    cf.br ^bb3
  ^bb25:  // 2 preds: ^bb14, ^bb26
    %135 = llvm.getelementptr inbounds %23[%108] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %136 = llvm.load %135 : !llvm.ptr -> !llvm.ptr
    %137 = llvm.ptrtoint %136 : !llvm.ptr to i64
    %c0_i64_24 = arith.constant 0 : i64
    %138 = arith.cmpi eq, %137, %c0_i64_24 : i64
    cf.cond_br %138, ^bb28, ^bb27
  ^bb26:  // pred: ^bb14
    %c3_i32_25 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_25) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %139 = llvm.getelementptr %136[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %140 = llvm.getelementptr %136[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %141 = llvm.getelementptr %136[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %142 = llvm.load %139 : !llvm.ptr -> !llvm.ptr
    %143 = llvm.load %141 : !llvm.ptr -> !llvm.ptr
    %144 = llvm.ptrtoint %142 : !llvm.ptr to i64
    %c0_i64_26 = arith.constant 0 : i64
    %145 = arith.cmpi eq, %144, %c0_i64_26 : i64
    cf.cond_br %145, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c4_i32_27 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_27) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %146 = llvm.load %140 : !llvm.ptr -> i32
    %147 = arith.cmpi ne, %22, %146 : i32
    cf.cond_br %147, ^bb32, ^bb31
  ^bb30:  // pred: ^bb27
    %c3_i32_28 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_28) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %148 = llvm.call %142(%143, %86, %95, %103) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_29 = arith.constant 0 : i32
    %149 = arith.cmpi ne, %148, %c0_i32_29 : i32
    cf.cond_br %149, ^bb3, ^bb33
  ^bb32:  // pred: ^bb29
    %c5_i32_30 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_30) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // pred: ^bb31
    cf.br ^bb13
  ^bb34:  // 2 preds: ^bb13, ^bb35
    %150 = llvm.getelementptr inbounds %26[%84] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %151 = llvm.load %150 : !llvm.ptr -> !llvm.ptr
    %152 = llvm.ptrtoint %151 : !llvm.ptr to i64
    %c0_i64_31 = arith.constant 0 : i64
    %153 = arith.cmpi eq, %152, %c0_i64_31 : i64
    cf.cond_br %153, ^bb37, ^bb36
  ^bb35:  // pred: ^bb13
    %c3_i32_32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_32) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %154 = llvm.getelementptr %151[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %155 = llvm.getelementptr %151[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %156 = llvm.getelementptr %151[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %157 = llvm.load %154 : !llvm.ptr -> !llvm.ptr
    %158 = llvm.load %156 : !llvm.ptr -> !llvm.ptr
    %159 = llvm.ptrtoint %157 : !llvm.ptr to i64
    %c0_i64_33 = arith.constant 0 : i64
    %160 = arith.cmpi eq, %159, %c0_i64_33 : i64
    cf.cond_br %160, ^bb39, ^bb38
  ^bb37:  // pred: ^bb34
    %c4_i32_34 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_34) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %161 = llvm.load %155 : !llvm.ptr -> i32
    %162 = arith.cmpi ne, %12, %161 : i32
    cf.cond_br %162, ^bb41, ^bb40
  ^bb39:  // pred: ^bb36
    %c3_i32_35 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_35) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %163 = llvm.call %157(%158, %83, %c39_i32_14) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    llvm.store %163, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb41:  // pred: ^bb38
    %c5_i32_36 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_36) : (i32) -> ()
    cf.br ^bb40
  }
  func.func @f179(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c0_i64_4 : i64
    %21 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c1051376_i32 = arith.constant 1051376 : i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051376_i32, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c20_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %35 = arith.extui %c31_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %36 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %37 = scf.if %36 -> (i64) {
      %62 = arith.shli %35, %c32_i64 : i64
      scf.yield %62 : i64
    } else {
      %c0_i64_6 = arith.constant 0 : i64
      scf.yield %c0_i64_6 : i64
    }
    llvm.store %37, %4 : i64, !llvm.ptr
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.ori %37, %39 : i64
    %c40_i64 = arith.constant 40 : i64
    %41 = arith.extui %34 : i32 to i64
    %42 = arith.addi %41, %c40_i64 : i64
    %43 = llvm.getelementptr %9[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i64, !llvm.ptr
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %45 = llvm.load %4 : !llvm.ptr -> i64
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %47 = arith.addi %46, %c4_i32 : i32
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.ori %45, %48 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %50 = arith.extui %44 : i32 to i64
    %51 = arith.addi %50, %c32_i64_5 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %55 = arith.addi %54, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c16_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    call @f141(%arg0, %60, %61) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f180(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %11 = arith.subi %10, %c128_i32 : i32
    llvm.store %11, %2 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i8
    %17 = arith.extui %16 : i8 to i32
    llvm.store %17, %3 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    llvm.store %c0_i32_4, %0 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2(%18: i32):  // pred: ^bb6
    return %18 : i32
  ^bb3:  // pred: ^bb5
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c128_i32_5 = arith.constant 128 : i32
    %20 = arith.addi %19, %c128_i32_5 : i32
    llvm.store %20, %3 : i32, !llvm.ptr
    %c129_i32 = arith.constant 129 : i32
    %21 = arith.cmpi ult, %20, %c129_i32 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_6 : i32
    cf.cond_br %23, ^bb6, ^bb7
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %26 = arith.addi %24, %25 : i32
    %c127_i32 = arith.constant 127 : i32
    %27 = arith.addi %26, %c127_i32 : i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c15_i32 = arith.constant 15 : i32
    %29 = arith.andi %28, %c15_i32 : i32
    llvm.store %29, %4 : i32, !llvm.ptr
    %c48_i32 = arith.constant 48 : i32
    %30 = arith.ori %29, %c48_i32 : i32
    %31 = llvm.load %4 : !llvm.ptr -> i32
    %c55_i32 = arith.constant 55 : i32
    %32 = arith.addi %31, %c55_i32 : i32
    %33 = llvm.load %4 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %34 = arith.cmpi ult, %33, %c10_i32 : i32
    %35 = arith.extui %34 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %36 = arith.cmpi ne, %35, %c0_i32_7 : i32
    %37 = arith.select %36, %30, %32 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %38 = arith.extui %27 : i32 to i64
    %39 = arith.addi %38, %c0_i64_8 : i64
    %40 = llvm.getelementptr %9[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = arith.trunci %37 : i32 to i8
    llvm.store volatile %41, %40 {alignment = 1 : i64} : i8, !llvm.ptr
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %43 = arith.addi %42, %c-1_i32 : i32
    llvm.store %43, %0 : i32, !llvm.ptr
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %45 = arith.andi %44, %c255_i32 : i32
    llvm.store %45, %4 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %c31_i32 = arith.constant 31 : i32
    %46 = arith.cmpi ule, %c4_i32, %c31_i32 : i32
    %47 = scf.if %46 -> (i32) {
      %64 = arith.shrui %45, %c4_i32 : i32
      scf.yield %64 : i32
    } else {
      %c0_i32_15 = arith.constant 0 : i32
      scf.yield %c0_i32_15 : i32
    }
    llvm.store %47, %3 : i32, !llvm.ptr
    %48 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %49 = arith.cmpi uge, %48, %c16_i32 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_9 : i32
    cf.cond_br %51, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  ^bb6:  // pred: ^bb3
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_10 = arith.constant 1 : i32
    %c1050904_i32 = arith.constant 1050904 : i32
    %c2_i32 = arith.constant 2 : i32
    %53 = llvm.load %2 : !llvm.ptr -> i32
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %55 = arith.addi %53, %54 : i32
    %c128_i32_11 = arith.constant 128 : i32
    %56 = arith.addi %55, %c128_i32_11 : i32
    %c0_i32_12 = arith.constant 0 : i32
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %58 = arith.subi %c0_i32_12, %57 : i32
    %59 = call @f166(%arg0, %52, %c1_i32_10, %c1050904_i32, %c2_i32, %56, %58) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %59, %0 : i32, !llvm.ptr
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c128_i32_13 = arith.constant 128 : i32
    %61 = arith.addi %60, %c128_i32_13 : i32
    llvm.store %61, %6 : i32, !llvm.ptr
    %62 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%62 : i32)
  ^bb7:  // pred: ^bb3
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_14 = arith.constant 128 : i32
    %c1050888_i32 = arith.constant 1050888 : i32
    call @f136(%arg0, %63, %c128_i32_14, %c1050888_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f181(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %10 : i64, !llvm.ptr
    %11 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %16 = llvm.load %12 : !llvm.ptr -> i32
    %c112_i32 = arith.constant 112 : i32
    %17 = arith.subi %16, %c112_i32 : i32
    llvm.store %17, %5 : i32, !llvm.ptr
    llvm.store %17, %12 : i32, !llvm.ptr
    %18 = llvm.load %5 : !llvm.ptr -> i32
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %20 = arith.extui %18 : i32 to i64
    %21 = arith.addi %20, %c12_i64 : i64
    %22 = llvm.getelementptr %15[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %19, %22 {alignment = 1 : i64} : i32, !llvm.ptr
    %23 = llvm.load %5 : !llvm.ptr -> i32
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %23 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %15[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c257_i32 = arith.constant 257 : i32
    %29 = arith.cmpi ult, %28, %c257_i32 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_10 : i32
    cf.cond_br %31, ^bb11, ^bb12
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb43, ^bb45
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %36 = llvm.load %4 : !llvm.ptr -> i32
    call @f177(%arg0, %32, %33, %34, %35, %36) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // 2 preds: ^bb41, ^bb54
    %37 = llvm.load %4 : !llvm.ptr -> i32
    call @f156(%arg0, %37) : (!llvm.ptr, i32) -> ()
    %c9_i32_11 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_11) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb25
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %39 = llvm.load %6 : !llvm.ptr -> i32
    %c1051644_i32 = arith.constant 1051644 : i32
    call @f155(%arg0, %38, %39, %c1051644_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_12 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_12) : (i32) -> ()
    llvm.unreachable
  ^bb6:  // pred: ^bb19
    %40 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c52_i64 = arith.constant 52 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c52_i64 : i64
    %43 = llvm.getelementptr %15[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i32, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %44 = llvm.load %5 : !llvm.ptr -> i32
    %c1051440_i32 = arith.constant 1051440 : i32
    %c48_i64 = arith.constant 48 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c48_i64 : i64
    %47 = llvm.getelementptr %15[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051440_i32, %47 {alignment = 1 : i64} : i32, !llvm.ptr
    %48 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %c60_i64 = arith.constant 60 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c60_i64 : i64
    %51 = llvm.getelementptr %15[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64, %51 {alignment = 1 : i64} : i64, !llvm.ptr
    %52 = llvm.load %5 : !llvm.ptr -> i32
    %c51_i32 = arith.constant 51 : i32
    %53 = arith.extui %c51_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %54 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %55 = scf.if %54 -> (i64) {
      %598 = arith.shli %53, %c32_i64 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_150 = arith.constant 0 : i64
      scf.yield %c0_i64_150 : i64
    }
    llvm.store %55, %10 : i64, !llvm.ptr
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %57 = arith.addi %56, %c24_i32 : i32
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.ori %55, %58 : i64
    %c96_i64 = arith.constant 96 : i64
    %60 = arith.extui %52 : i32 to i64
    %61 = arith.addi %60, %c96_i64 : i64
    %62 = llvm.getelementptr %15[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %62 {alignment = 1 : i64} : i64, !llvm.ptr
    %63 = llvm.load %5 : !llvm.ptr -> i32
    %64 = llvm.load %10 : !llvm.ptr -> i64
    %65 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %66 = arith.addi %65, %c16_i32 : i32
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.ori %64, %67 : i64
    %c88_i64 = arith.constant 88 : i64
    %69 = arith.extui %63 : i32 to i64
    %70 = arith.addi %69, %c88_i64 : i64
    %71 = llvm.getelementptr %15[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %71 {alignment = 1 : i64} : i64, !llvm.ptr
    %72 = llvm.load %5 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %73 = arith.extui %c31_i32 : i32 to i64
    %c32_i64_13 = arith.constant 32 : i64
    %c63_i64_14 = arith.constant 63 : i64
    %74 = arith.cmpi ule, %c32_i64_13, %c63_i64_14 : i64
    %75 = scf.if %74 -> (i64) {
      %598 = arith.shli %73, %c32_i64_13 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_150 = arith.constant 0 : i64
      scf.yield %c0_i64_150 : i64
    }
    llvm.store %75, %10 : i64, !llvm.ptr
    %76 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %77 = arith.addi %76, %c12_i32 : i32
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.ori %75, %78 : i64
    %c80_i64 = arith.constant 80 : i64
    %80 = arith.extui %72 : i32 to i64
    %81 = arith.addi %80, %c80_i64 : i64
    %82 = llvm.getelementptr %15[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %79, %82 {alignment = 1 : i64} : i64, !llvm.ptr
    %83 = llvm.load %5 : !llvm.ptr -> i32
    %84 = llvm.load %10 : !llvm.ptr -> i64
    %85 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %86 = arith.addi %85, %c8_i32 : i32
    %87 = arith.extui %86 : i32 to i64
    %88 = arith.ori %84, %87 : i64
    %c72_i64 = arith.constant 72 : i64
    %89 = arith.extui %83 : i32 to i64
    %90 = arith.addi %89, %c72_i64 : i64
    %91 = llvm.getelementptr %15[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i64, !llvm.ptr
    %92 = llvm.load %5 : !llvm.ptr -> i32
    %93 = llvm.load %5 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %94 = arith.addi %93, %c72_i32 : i32
    %c56_i64 = arith.constant 56 : i64
    %95 = arith.extui %92 : i32 to i64
    %96 = arith.addi %95, %c56_i64 : i64
    %97 = llvm.getelementptr %15[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %94, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    %98 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %99 = arith.addi %98, %c48_i32 : i32
    %100 = llvm.load %4 : !llvm.ptr -> i32
    call @f141(%arg0, %99, %100) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_15 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_15) : (i32) -> ()
    llvm.unreachable
  ^bb7:  // pred: ^bb9
    %101 = llvm.load %0 : !llvm.ptr -> i32
    %102 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %103 = llvm.load %6 : !llvm.ptr -> i32
    %104 = llvm.load %4 : !llvm.ptr -> i32
    call @f177(%arg0, %101, %102, %c0_i32_16, %103, %104) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32_17 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_17) : (i32) -> ()
    llvm.unreachable
  ^bb8:  // 2 preds: ^bb11, ^bb16
    %105 = llvm.load %5 : !llvm.ptr -> i32
    %106 = llvm.load %6 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %107 = arith.extui %105 : i32 to i64
    %108 = arith.addi %107, %c28_i64 : i64
    %109 = llvm.getelementptr %15[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %106, %109 {alignment = 1 : i64} : i32, !llvm.ptr
    %110 = llvm.load %5 : !llvm.ptr -> i32
    %111 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %112 = arith.extui %110 : i32 to i64
    %113 = arith.addi %112, %c24_i64 : i64
    %114 = llvm.getelementptr %15[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %111, %114 {alignment = 1 : i64} : i32, !llvm.ptr
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %117 = arith.cmpi ugt, %115, %116 : i32
    %118 = arith.extui %117 : i1 to i32
    llvm.store %118, %6 : i32, !llvm.ptr
    %c0_i32_18 = arith.constant 0 : i32
    %119 = arith.cmpi ne, %118, %c0_i32_18 : i32
    cf.cond_br %119, ^bb17, ^bb18
  ^bb9:  // 3 preds: ^bb10, ^bb14, ^bb15
    %120 = llvm.load %0 : !llvm.ptr -> i32
    %121 = llvm.load %6 : !llvm.ptr -> i32
    %c253_i32 = arith.constant 253 : i32
    %122 = arith.addi %121, %c253_i32 : i32
    llvm.store %122, %6 : i32, !llvm.ptr
    %123 = arith.addi %120, %122 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %124 = arith.extui %123 : i32 to i64
    %125 = arith.addi %124, %c0_i64_19 : i64
    %126 = llvm.getelementptr %15[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = llvm.load volatile %126 {alignment = 1 : i64} : !llvm.ptr -> i8
    %128 = arith.extsi %127 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %129 = arith.cmpi sle, %128, %c-65_i32 : i32
    %130 = arith.extui %129 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %131 = arith.cmpi ne, %130, %c0_i32_20 : i32
    cf.cond_br %131, ^bb7, ^bb16
  ^bb10:  // pred: ^bb13
    %132 = llvm.load %0 : !llvm.ptr -> i32
    %c254_i64 = arith.constant 254 : i64
    %133 = arith.extui %132 : i32 to i64
    %134 = arith.addi %133, %c254_i64 : i64
    %135 = llvm.getelementptr %15[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %136 = llvm.load volatile %135 {alignment = 1 : i64} : !llvm.ptr -> i8
    %137 = arith.extsi %136 : i8 to i32
    %c-65_i32_21 = arith.constant -65 : i32
    %138 = arith.cmpi sgt, %137, %c-65_i32_21 : i32
    %139 = arith.extui %138 : i1 to i32
    llvm.store %139, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // pred: ^bb1
    %140 = llvm.load %5 : !llvm.ptr -> i32
    %141 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %142 = arith.extui %140 : i32 to i64
    %143 = arith.addi %142, %c20_i64 : i64
    %144 = llvm.getelementptr %15[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %141, %144 {alignment = 1 : i64} : i32, !llvm.ptr
    %145 = llvm.load %5 : !llvm.ptr -> i32
    %146 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %147 = arith.extui %145 : i32 to i64
    %148 = arith.addi %147, %c16_i64 : i64
    %149 = llvm.getelementptr %15[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %146, %149 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %6 : i32, !llvm.ptr
    %c1_i32_23 = arith.constant 1 : i32
    llvm.store %c1_i32_23, %7 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb12:  // pred: ^bb1
    %150 = llvm.load %0 : !llvm.ptr -> i32
    %c256_i64 = arith.constant 256 : i64
    %151 = arith.extui %150 : i32 to i64
    %152 = arith.addi %151, %c256_i64 : i64
    %153 = llvm.getelementptr %15[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i8
    %155 = arith.extsi %154 : i8 to i32
    %c-65_i32_24 = arith.constant -65 : i32
    %156 = arith.cmpi sle, %155, %c-65_i32_24 : i32
    %157 = arith.extui %156 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %158 = arith.cmpi ne, %157, %c0_i32_25 : i32
    cf.cond_br %158, ^bb13, ^bb14
  ^bb13:  // pred: ^bb12
    %159 = llvm.load %0 : !llvm.ptr -> i32
    %c255_i64 = arith.constant 255 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c255_i64 : i64
    %162 = llvm.getelementptr %15[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i8
    %164 = arith.extsi %163 : i8 to i32
    %c-65_i32_26 = arith.constant -65 : i32
    %165 = arith.cmpi sle, %164, %c-65_i32_26 : i32
    %166 = arith.extui %165 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %167 = arith.cmpi ne, %166, %c0_i32_27 : i32
    cf.cond_br %167, ^bb10, ^bb15
  ^bb14:  // pred: ^bb12
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb15:  // pred: ^bb13
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb16:  // pred: ^bb9
    %168 = llvm.load %5 : !llvm.ptr -> i32
    %169 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64_28 = arith.constant 20 : i64
    %170 = arith.extui %168 : i32 to i64
    %171 = arith.addi %170, %c20_i64_28 : i64
    %172 = llvm.getelementptr %15[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %169, %172 {alignment = 1 : i64} : i32, !llvm.ptr
    %173 = llvm.load %5 : !llvm.ptr -> i32
    %174 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64_29 = arith.constant 16 : i64
    %175 = arith.extui %173 : i32 to i64
    %176 = arith.addi %175, %c16_i64_29 : i64
    %177 = llvm.getelementptr %15[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %174, %177 {alignment = 1 : i64} : i32, !llvm.ptr
    %c5_i32 = arith.constant 5 : i32
    llvm.store %c5_i32, %6 : i32, !llvm.ptr
    %c1051400_i32 = arith.constant 1051400 : i32
    llvm.store %c1051400_i32, %7 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb17:  // 2 preds: ^bb8, ^bb18
    %178 = llvm.load %5 : !llvm.ptr -> i32
    %179 = llvm.load %2 : !llvm.ptr -> i32
    %180 = llvm.load %3 : !llvm.ptr -> i32
    %181 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_30 = arith.constant 0 : i32
    %182 = arith.cmpi ne, %181, %c0_i32_30 : i32
    %183 = arith.select %182, %179, %180 : i32
    %c40_i64 = arith.constant 40 : i64
    %184 = arith.extui %178 : i32 to i64
    %185 = arith.addi %184, %c40_i64 : i64
    %186 = llvm.getelementptr %15[%185] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %183, %186 {alignment = 1 : i64} : i32, !llvm.ptr
    %187 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i32_31 = arith.constant 3 : i32
    %c52_i64_32 = arith.constant 52 : i64
    %188 = arith.extui %187 : i32 to i64
    %189 = arith.addi %188, %c52_i64_32 : i64
    %190 = llvm.getelementptr %15[%189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32_31, %190 {alignment = 1 : i64} : i32, !llvm.ptr
    %191 = llvm.load %5 : !llvm.ptr -> i32
    %c1051600_i32 = arith.constant 1051600 : i32
    %c48_i64_33 = arith.constant 48 : i64
    %192 = arith.extui %191 : i32 to i64
    %193 = arith.addi %192, %c48_i64_33 : i64
    %194 = llvm.getelementptr %15[%193] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051600_i32, %194 {alignment = 1 : i64} : i32, !llvm.ptr
    %195 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64 = arith.constant 3 : i64
    %c60_i64_34 = arith.constant 60 : i64
    %196 = arith.extui %195 : i32 to i64
    %197 = arith.addi %196, %c60_i64_34 : i64
    %198 = llvm.getelementptr %15[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i64, %198 {alignment = 1 : i64} : i64, !llvm.ptr
    %199 = llvm.load %5 : !llvm.ptr -> i32
    %c51_i32_35 = arith.constant 51 : i32
    %200 = arith.extui %c51_i32_35 : i32 to i64
    %c32_i64_36 = arith.constant 32 : i64
    %c63_i64_37 = arith.constant 63 : i64
    %201 = arith.cmpi ule, %c32_i64_36, %c63_i64_37 : i64
    %202 = scf.if %201 -> (i64) {
      %598 = arith.shli %200, %c32_i64_36 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_150 = arith.constant 0 : i64
      scf.yield %c0_i64_150 : i64
    }
    llvm.store %202, %10 : i64, !llvm.ptr
    %203 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32_38 = arith.constant 24 : i32
    %204 = arith.addi %203, %c24_i32_38 : i32
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.ori %202, %205 : i64
    %c88_i64_39 = arith.constant 88 : i64
    %207 = arith.extui %199 : i32 to i64
    %208 = arith.addi %207, %c88_i64_39 : i64
    %209 = llvm.getelementptr %15[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %206, %209 {alignment = 1 : i64} : i64, !llvm.ptr
    %210 = llvm.load %5 : !llvm.ptr -> i32
    %211 = llvm.load %10 : !llvm.ptr -> i64
    %212 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_40 = arith.constant 16 : i32
    %213 = arith.addi %212, %c16_i32_40 : i32
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.ori %211, %214 : i64
    %c80_i64_41 = arith.constant 80 : i64
    %216 = arith.extui %210 : i32 to i64
    %217 = arith.addi %216, %c80_i64_41 : i64
    %218 = llvm.getelementptr %15[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %215, %218 {alignment = 1 : i64} : i64, !llvm.ptr
    %219 = llvm.load %5 : !llvm.ptr -> i32
    %c31_i32_42 = arith.constant 31 : i32
    %220 = arith.extui %c31_i32_42 : i32 to i64
    %c32_i64_43 = arith.constant 32 : i64
    %c63_i64_44 = arith.constant 63 : i64
    %221 = arith.cmpi ule, %c32_i64_43, %c63_i64_44 : i64
    %222 = scf.if %221 -> (i64) {
      %598 = arith.shli %220, %c32_i64_43 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_150 = arith.constant 0 : i64
      scf.yield %c0_i64_150 : i64
    }
    %223 = llvm.load %5 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %224 = arith.addi %223, %c40_i32 : i32
    %225 = arith.extui %224 : i32 to i64
    %226 = arith.ori %222, %225 : i64
    %c72_i64_45 = arith.constant 72 : i64
    %227 = arith.extui %219 : i32 to i64
    %228 = arith.addi %227, %c72_i64_45 : i64
    %229 = llvm.getelementptr %15[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %226, %229 {alignment = 1 : i64} : i64, !llvm.ptr
    %230 = llvm.load %5 : !llvm.ptr -> i32
    %231 = llvm.load %5 : !llvm.ptr -> i32
    %c72_i32_46 = arith.constant 72 : i32
    %232 = arith.addi %231, %c72_i32_46 : i32
    %c56_i64_47 = arith.constant 56 : i64
    %233 = arith.extui %230 : i32 to i64
    %234 = arith.addi %233, %c56_i64_47 : i64
    %235 = llvm.getelementptr %15[%234] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %232, %235 {alignment = 1 : i64} : i32, !llvm.ptr
    %236 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32_48 = arith.constant 48 : i32
    %237 = arith.addi %236, %c48_i32_48 : i32
    %238 = llvm.load %4 : !llvm.ptr -> i32
    call @f141(%arg0, %237, %238) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_49 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_49) : (i32) -> ()
    llvm.unreachable
  ^bb18:  // pred: ^bb8
    %239 = llvm.load %3 : !llvm.ptr -> i32
    %240 = llvm.load %1 : !llvm.ptr -> i32
    %241 = arith.cmpi ugt, %239, %240 : i32
    %242 = arith.extui %241 : i1 to i32
    %c0_i32_50 = arith.constant 0 : i32
    %243 = arith.cmpi ne, %242, %c0_i32_50 : i32
    cf.cond_br %243, ^bb17, ^bb19
  ^bb19:  // pred: ^bb18
    %244 = llvm.load %2 : !llvm.ptr -> i32
    %245 = llvm.load %3 : !llvm.ptr -> i32
    %246 = arith.cmpi ugt, %244, %245 : i32
    %247 = arith.extui %246 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %248 = arith.cmpi ne, %247, %c0_i32_51 : i32
    cf.cond_br %248, ^bb6, ^bb20
  ^bb20:  // pred: ^bb19
    %249 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_52 = arith.constant 0 : i32
    %250 = arith.cmpi eq, %249, %c0_i32_52 : i32
    %251 = arith.extui %250 : i1 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %252 = arith.cmpi ne, %251, %c0_i32_53 : i32
    cf.cond_br %252, ^bb21, ^bb22
  ^bb21:  // 3 preds: ^bb20, ^bb22, ^bb23
    %253 = llvm.load %5 : !llvm.ptr -> i32
    %254 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_54 = arith.constant 32 : i64
    %255 = arith.extui %253 : i32 to i64
    %256 = arith.addi %255, %c32_i64_54 : i64
    %257 = llvm.getelementptr %15[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %254, %257 {alignment = 1 : i64} : i32, !llvm.ptr
    %258 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %258, %2 : i32, !llvm.ptr
    %259 = llvm.load %3 : !llvm.ptr -> i32
    %260 = llvm.load %1 : !llvm.ptr -> i32
    %261 = arith.cmpi uge, %259, %260 : i32
    %262 = arith.extui %261 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %263 = arith.cmpi ne, %262, %c0_i32_55 : i32
    cf.cond_br %263, ^bb24, ^bb25
  ^bb22:  // pred: ^bb20
    %264 = llvm.load %2 : !llvm.ptr -> i32
    %265 = llvm.load %1 : !llvm.ptr -> i32
    %266 = arith.cmpi uge, %264, %265 : i32
    %267 = arith.extui %266 : i1 to i32
    %c0_i32_56 = arith.constant 0 : i32
    %268 = arith.cmpi ne, %267, %c0_i32_56 : i32
    cf.cond_br %268, ^bb21, ^bb23
  ^bb23:  // pred: ^bb22
    %269 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i32_57 = arith.constant 12 : i32
    %270 = arith.addi %269, %c12_i32_57 : i32
    %271 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_58 = arith.constant 8 : i32
    %272 = arith.addi %271, %c8_i32_58 : i32
    %273 = llvm.load %0 : !llvm.ptr -> i32
    %274 = llvm.load %2 : !llvm.ptr -> i32
    %275 = arith.addi %273, %274 : i32
    %c0_i64_59 = arith.constant 0 : i64
    %276 = arith.extui %275 : i32 to i64
    %277 = arith.addi %276, %c0_i64_59 : i64
    %278 = llvm.getelementptr %15[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i8
    %280 = arith.extsi %279 : i8 to i32
    %c-65_i32_60 = arith.constant -65 : i32
    %281 = arith.cmpi sgt, %280, %c-65_i32_60 : i32
    %282 = arith.extui %281 : i1 to i32
    %c0_i32_61 = arith.constant 0 : i32
    %283 = arith.cmpi ne, %282, %c0_i32_61 : i32
    %284 = arith.select %283, %270, %272 : i32
    %c0_i64_62 = arith.constant 0 : i64
    %285 = arith.extui %284 : i32 to i64
    %286 = arith.addi %285, %c0_i64_62 : i64
    %287 = llvm.getelementptr %15[%286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %288 = llvm.load volatile %287 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %288, %3 : i32, !llvm.ptr
    cf.br ^bb21
  ^bb24:  // 2 preds: ^bb21, ^bb27
    %289 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_63 = arith.constant 0 : i32
    %290 = arith.cmpi eq, %289, %c0_i32_63 : i32
    %291 = arith.extui %290 : i1 to i32
    %c0_i32_64 = arith.constant 0 : i32
    %292 = arith.cmpi ne, %291, %c0_i32_64 : i32
    cf.cond_br %292, ^bb41, ^bb42
  ^bb25:  // pred: ^bb21
    %293 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_65 = arith.constant 1 : i32
    %294 = arith.addi %293, %c1_i32_65 : i32
    llvm.store %294, %6 : i32, !llvm.ptr
    %c0_i32_66 = arith.constant 0 : i32
    %295 = llvm.load %3 : !llvm.ptr -> i32
    %c-3_i32 = arith.constant -3 : i32
    %296 = arith.addi %295, %c-3_i32 : i32
    llvm.store %296, %2 : i32, !llvm.ptr
    %297 = llvm.load %2 : !llvm.ptr -> i32
    %298 = llvm.load %3 : !llvm.ptr -> i32
    %299 = arith.cmpi ugt, %297, %298 : i32
    %300 = arith.extui %299 : i1 to i32
    %c0_i32_67 = arith.constant 0 : i32
    %301 = arith.cmpi ne, %300, %c0_i32_67 : i32
    %302 = arith.select %301, %c0_i32_66, %296 : i32
    llvm.store %302, %2 : i32, !llvm.ptr
    %303 = arith.cmpi ult, %294, %302 : i32
    %304 = arith.extui %303 : i1 to i32
    %c0_i32_68 = arith.constant 0 : i32
    %305 = arith.cmpi ne, %304, %c0_i32_68 : i32
    cf.cond_br %305, ^bb5, ^bb26
  ^bb26:  // pred: ^bb25
    %306 = llvm.load %6 : !llvm.ptr -> i32
    %307 = llvm.load %2 : !llvm.ptr -> i32
    %308 = arith.cmpi eq, %306, %307 : i32
    %309 = arith.extui %308 : i1 to i32
    %c0_i32_69 = arith.constant 0 : i32
    %310 = arith.cmpi ne, %309, %c0_i32_69 : i32
    cf.cond_br %310, ^bb27, ^bb28
  ^bb27:  // 10 preds: ^bb26, ^bb29, ^bb30, ^bb32, ^bb33, ^bb35, ^bb36, ^bb38, ^bb39, ^bb40
    %311 = llvm.load %7 : !llvm.ptr -> i32
    %312 = llvm.load %2 : !llvm.ptr -> i32
    %313 = arith.addi %311, %312 : i32
    llvm.store %313, %2 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb28:  // pred: ^bb26
    %314 = llvm.load %6 : !llvm.ptr -> i32
    %315 = llvm.load %2 : !llvm.ptr -> i32
    %316 = arith.subi %314, %315 : i32
    llvm.store %316, %8 : i32, !llvm.ptr
    %317 = llvm.load %0 : !llvm.ptr -> i32
    %318 = llvm.load %3 : !llvm.ptr -> i32
    %319 = arith.addi %317, %318 : i32
    %c0_i64_70 = arith.constant 0 : i64
    %320 = arith.extui %319 : i32 to i64
    %321 = arith.addi %320, %c0_i64_70 : i64
    %322 = llvm.getelementptr %15[%321] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %323 = llvm.load volatile %322 {alignment = 1 : i64} : !llvm.ptr -> i8
    %324 = arith.extsi %323 : i8 to i32
    %c-65_i32_71 = arith.constant -65 : i32
    %325 = arith.cmpi sle, %324, %c-65_i32_71 : i32
    %326 = arith.extui %325 : i1 to i32
    %c0_i32_72 = arith.constant 0 : i32
    %327 = arith.cmpi ne, %326, %c0_i32_72 : i32
    cf.cond_br %327, ^bb29, ^bb30
  ^bb29:  // pred: ^bb28
    %328 = llvm.load %2 : !llvm.ptr -> i32
    %329 = llvm.load %3 : !llvm.ptr -> i32
    %330 = arith.cmpi eq, %328, %329 : i32
    %331 = arith.extui %330 : i1 to i32
    %c0_i32_73 = arith.constant 0 : i32
    %332 = arith.cmpi ne, %331, %c0_i32_73 : i32
    cf.cond_br %332, ^bb27, ^bb31
  ^bb30:  // pred: ^bb28
    %333 = llvm.load %8 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %334 = arith.addi %333, %c-1_i32 : i32
    llvm.store %334, %7 : i32, !llvm.ptr
    cf.br ^bb27
  ^bb31:  // pred: ^bb29
    %335 = llvm.load %0 : !llvm.ptr -> i32
    %336 = llvm.load %6 : !llvm.ptr -> i32
    %337 = arith.addi %335, %336 : i32
    llvm.store %337, %6 : i32, !llvm.ptr
    %c-2_i32 = arith.constant -2 : i32
    %338 = arith.addi %337, %c-2_i32 : i32
    llvm.store %338, %3 : i32, !llvm.ptr
    %c0_i64_74 = arith.constant 0 : i64
    %339 = arith.extui %338 : i32 to i64
    %340 = arith.addi %339, %c0_i64_74 : i64
    %341 = llvm.getelementptr %15[%340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %342 = llvm.load volatile %341 {alignment = 1 : i64} : !llvm.ptr -> i8
    %343 = arith.extsi %342 : i8 to i32
    %c-65_i32_75 = arith.constant -65 : i32
    %344 = arith.cmpi sle, %343, %c-65_i32_75 : i32
    %345 = arith.extui %344 : i1 to i32
    %c0_i32_76 = arith.constant 0 : i32
    %346 = arith.cmpi ne, %345, %c0_i32_76 : i32
    cf.cond_br %346, ^bb32, ^bb33
  ^bb32:  // pred: ^bb31
    %347 = llvm.load %0 : !llvm.ptr -> i32
    %348 = llvm.load %2 : !llvm.ptr -> i32
    %349 = arith.addi %347, %348 : i32
    llvm.store %349, %9 : i32, !llvm.ptr
    %350 = llvm.load %3 : !llvm.ptr -> i32
    %351 = arith.cmpi eq, %349, %350 : i32
    %352 = arith.extui %351 : i1 to i32
    %c0_i32_77 = arith.constant 0 : i32
    %353 = arith.cmpi ne, %352, %c0_i32_77 : i32
    cf.cond_br %353, ^bb27, ^bb34
  ^bb33:  // pred: ^bb31
    %354 = llvm.load %8 : !llvm.ptr -> i32
    %c-2_i32_78 = arith.constant -2 : i32
    %355 = arith.addi %354, %c-2_i32_78 : i32
    llvm.store %355, %7 : i32, !llvm.ptr
    cf.br ^bb27
  ^bb34:  // pred: ^bb32
    %356 = llvm.load %6 : !llvm.ptr -> i32
    %c-3_i32_79 = arith.constant -3 : i32
    %357 = arith.addi %356, %c-3_i32_79 : i32
    llvm.store %357, %3 : i32, !llvm.ptr
    %c0_i64_80 = arith.constant 0 : i64
    %358 = arith.extui %357 : i32 to i64
    %359 = arith.addi %358, %c0_i64_80 : i64
    %360 = llvm.getelementptr %15[%359] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %361 = llvm.load volatile %360 {alignment = 1 : i64} : !llvm.ptr -> i8
    %362 = arith.extsi %361 : i8 to i32
    %c-65_i32_81 = arith.constant -65 : i32
    %363 = arith.cmpi sle, %362, %c-65_i32_81 : i32
    %364 = arith.extui %363 : i1 to i32
    %c0_i32_82 = arith.constant 0 : i32
    %365 = arith.cmpi ne, %364, %c0_i32_82 : i32
    cf.cond_br %365, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %366 = llvm.load %9 : !llvm.ptr -> i32
    %367 = llvm.load %3 : !llvm.ptr -> i32
    %368 = arith.cmpi eq, %366, %367 : i32
    %369 = arith.extui %368 : i1 to i32
    %c0_i32_83 = arith.constant 0 : i32
    %370 = arith.cmpi ne, %369, %c0_i32_83 : i32
    cf.cond_br %370, ^bb27, ^bb37
  ^bb36:  // pred: ^bb34
    %371 = llvm.load %8 : !llvm.ptr -> i32
    %c-3_i32_84 = arith.constant -3 : i32
    %372 = arith.addi %371, %c-3_i32_84 : i32
    llvm.store %372, %7 : i32, !llvm.ptr
    cf.br ^bb27
  ^bb37:  // pred: ^bb35
    %373 = llvm.load %6 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %374 = arith.addi %373, %c-4_i32 : i32
    llvm.store %374, %3 : i32, !llvm.ptr
    %c0_i64_85 = arith.constant 0 : i64
    %375 = arith.extui %374 : i32 to i64
    %376 = arith.addi %375, %c0_i64_85 : i64
    %377 = llvm.getelementptr %15[%376] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %378 = llvm.load volatile %377 {alignment = 1 : i64} : !llvm.ptr -> i8
    %379 = arith.extsi %378 : i8 to i32
    %c-65_i32_86 = arith.constant -65 : i32
    %380 = arith.cmpi sle, %379, %c-65_i32_86 : i32
    %381 = arith.extui %380 : i1 to i32
    %c0_i32_87 = arith.constant 0 : i32
    %382 = arith.cmpi ne, %381, %c0_i32_87 : i32
    cf.cond_br %382, ^bb38, ^bb39
  ^bb38:  // pred: ^bb37
    %383 = llvm.load %9 : !llvm.ptr -> i32
    %384 = llvm.load %3 : !llvm.ptr -> i32
    %385 = arith.cmpi eq, %383, %384 : i32
    %386 = arith.extui %385 : i1 to i32
    %c0_i32_88 = arith.constant 0 : i32
    %387 = arith.cmpi ne, %386, %c0_i32_88 : i32
    cf.cond_br %387, ^bb27, ^bb40
  ^bb39:  // pred: ^bb37
    %388 = llvm.load %8 : !llvm.ptr -> i32
    %c-4_i32_89 = arith.constant -4 : i32
    %389 = arith.addi %388, %c-4_i32_89 : i32
    llvm.store %389, %7 : i32, !llvm.ptr
    cf.br ^bb27
  ^bb40:  // pred: ^bb38
    %390 = llvm.load %8 : !llvm.ptr -> i32
    %c-5_i32 = arith.constant -5 : i32
    %391 = arith.addi %390, %c-5_i32 : i32
    llvm.store %391, %7 : i32, !llvm.ptr
    cf.br ^bb27
  ^bb41:  // 3 preds: ^bb24, ^bb44, ^bb46
    %392 = llvm.load %2 : !llvm.ptr -> i32
    %393 = llvm.load %1 : !llvm.ptr -> i32
    %394 = arith.cmpi eq, %392, %393 : i32
    %395 = arith.extui %394 : i1 to i32
    %c0_i32_90 = arith.constant 0 : i32
    %396 = arith.cmpi ne, %395, %c0_i32_90 : i32
    cf.cond_br %396, ^bb4, ^bb47
  ^bb42:  // pred: ^bb24
    %397 = llvm.load %2 : !llvm.ptr -> i32
    %398 = llvm.load %1 : !llvm.ptr -> i32
    %399 = arith.cmpi uge, %397, %398 : i32
    %400 = arith.extui %399 : i1 to i32
    %c0_i32_91 = arith.constant 0 : i32
    %401 = arith.cmpi ne, %400, %c0_i32_91 : i32
    cf.cond_br %401, ^bb43, ^bb44
  ^bb43:  // pred: ^bb42
    %402 = llvm.load %2 : !llvm.ptr -> i32
    %403 = llvm.load %1 : !llvm.ptr -> i32
    %404 = arith.cmpi eq, %402, %403 : i32
    %405 = arith.extui %404 : i1 to i32
    %c0_i32_92 = arith.constant 0 : i32
    %406 = arith.cmpi eq, %405, %c0_i32_92 : i32
    %407 = arith.extui %406 : i1 to i32
    %c0_i32_93 = arith.constant 0 : i32
    %408 = arith.cmpi ne, %407, %c0_i32_93 : i32
    cf.cond_br %408, ^bb3, ^bb46
  ^bb44:  // pred: ^bb42
    %409 = llvm.load %0 : !llvm.ptr -> i32
    %410 = llvm.load %2 : !llvm.ptr -> i32
    %411 = arith.addi %409, %410 : i32
    %c0_i64_94 = arith.constant 0 : i64
    %412 = arith.extui %411 : i32 to i64
    %413 = arith.addi %412, %c0_i64_94 : i64
    %414 = llvm.getelementptr %15[%413] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %415 = llvm.load volatile %414 {alignment = 1 : i64} : !llvm.ptr -> i8
    %416 = arith.extsi %415 : i8 to i32
    %c-65_i32_95 = arith.constant -65 : i32
    %417 = arith.cmpi sgt, %416, %c-65_i32_95 : i32
    %418 = arith.extui %417 : i1 to i32
    %c0_i32_96 = arith.constant 0 : i32
    %419 = arith.cmpi ne, %418, %c0_i32_96 : i32
    cf.cond_br %419, ^bb41, ^bb45
  ^bb45:  // pred: ^bb44
    cf.br ^bb3
  ^bb46:  // pred: ^bb43
    cf.br ^bb41
  ^bb47:  // pred: ^bb41
    %420 = llvm.load %0 : !llvm.ptr -> i32
    %421 = llvm.load %2 : !llvm.ptr -> i32
    %422 = arith.addi %420, %421 : i32
    llvm.store %422, %3 : i32, !llvm.ptr
    %c0_i64_97 = arith.constant 0 : i64
    %423 = arith.extui %422 : i32 to i64
    %424 = arith.addi %423, %c0_i64_97 : i64
    %425 = llvm.getelementptr %15[%424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %426 = llvm.load volatile %425 {alignment = 1 : i64} : !llvm.ptr -> i8
    %427 = arith.extsi %426 : i8 to i32
    llvm.store %427, %1 : i32, !llvm.ptr
    %c-1_i32_98 = arith.constant -1 : i32
    %428 = arith.cmpi sgt, %427, %c-1_i32_98 : i32
    %429 = arith.extui %428 : i1 to i32
    %c0_i32_99 = arith.constant 0 : i32
    %430 = arith.cmpi ne, %429, %c0_i32_99 : i32
    cf.cond_br %430, ^bb51, ^bb52
  ^bb48:  // 4 preds: ^bb51, ^bb58, ^bb59, ^bb60
    %431 = llvm.load %5 : !llvm.ptr -> i32
    %432 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_100 = arith.constant 40 : i64
    %433 = arith.extui %431 : i32 to i64
    %434 = arith.addi %433, %c40_i64_100 : i64
    %435 = llvm.getelementptr %15[%434] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %432, %435 {alignment = 1 : i64} : i32, !llvm.ptr
    %436 = llvm.load %5 : !llvm.ptr -> i32
    %437 = llvm.load %1 : !llvm.ptr -> i32
    %438 = llvm.load %2 : !llvm.ptr -> i32
    %439 = arith.addi %437, %438 : i32
    %c44_i64 = arith.constant 44 : i64
    %440 = arith.extui %436 : i32 to i64
    %441 = arith.addi %440, %c44_i64 : i64
    %442 = llvm.getelementptr %15[%441] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %439, %442 {alignment = 1 : i64} : i32, !llvm.ptr
    %443 = llvm.load %5 : !llvm.ptr -> i32
    %c5_i32_101 = arith.constant 5 : i32
    %c52_i64_102 = arith.constant 52 : i64
    %444 = arith.extui %443 : i32 to i64
    %445 = arith.addi %444, %c52_i64_102 : i64
    %446 = llvm.getelementptr %15[%445] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c5_i32_101, %446 {alignment = 1 : i64} : i32, !llvm.ptr
    %447 = llvm.load %5 : !llvm.ptr -> i32
    %c1051536_i32 = arith.constant 1051536 : i32
    %c48_i64_103 = arith.constant 48 : i64
    %448 = arith.extui %447 : i32 to i64
    %449 = arith.addi %448, %c48_i64_103 : i64
    %450 = llvm.getelementptr %15[%449] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051536_i32, %450 {alignment = 1 : i64} : i32, !llvm.ptr
    %451 = llvm.load %5 : !llvm.ptr -> i32
    %c5_i64 = arith.constant 5 : i64
    %c60_i64_104 = arith.constant 60 : i64
    %452 = arith.extui %451 : i32 to i64
    %453 = arith.addi %452, %c60_i64_104 : i64
    %454 = llvm.getelementptr %15[%453] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c5_i64, %454 {alignment = 1 : i64} : i64, !llvm.ptr
    %455 = llvm.load %5 : !llvm.ptr -> i32
    %c51_i32_105 = arith.constant 51 : i32
    %456 = arith.extui %c51_i32_105 : i32 to i64
    %c32_i64_106 = arith.constant 32 : i64
    %c63_i64_107 = arith.constant 63 : i64
    %457 = arith.cmpi ule, %c32_i64_106, %c63_i64_107 : i64
    %458 = scf.if %457 -> (i64) {
      %598 = arith.shli %456, %c32_i64_106 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_150 = arith.constant 0 : i64
      scf.yield %c0_i64_150 : i64
    }
    llvm.store %458, %10 : i64, !llvm.ptr
    %459 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32_108 = arith.constant 24 : i32
    %460 = arith.addi %459, %c24_i32_108 : i32
    %461 = arith.extui %460 : i32 to i64
    %462 = arith.ori %458, %461 : i64
    %c104_i64 = arith.constant 104 : i64
    %463 = arith.extui %455 : i32 to i64
    %464 = arith.addi %463, %c104_i64 : i64
    %465 = llvm.getelementptr %15[%464] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %462, %465 {alignment = 1 : i64} : i64, !llvm.ptr
    %466 = llvm.load %5 : !llvm.ptr -> i32
    %467 = llvm.load %10 : !llvm.ptr -> i64
    %468 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_109 = arith.constant 16 : i32
    %469 = arith.addi %468, %c16_i32_109 : i32
    %470 = arith.extui %469 : i32 to i64
    %471 = arith.ori %467, %470 : i64
    %c96_i64_110 = arith.constant 96 : i64
    %472 = arith.extui %466 : i32 to i64
    %473 = arith.addi %472, %c96_i64_110 : i64
    %474 = llvm.getelementptr %15[%473] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %471, %474 {alignment = 1 : i64} : i64, !llvm.ptr
    %475 = llvm.load %5 : !llvm.ptr -> i32
    %c52_i32 = arith.constant 52 : i32
    %476 = arith.extui %c52_i32 : i32 to i64
    %c32_i64_111 = arith.constant 32 : i64
    %c63_i64_112 = arith.constant 63 : i64
    %477 = arith.cmpi ule, %c32_i64_111, %c63_i64_112 : i64
    %478 = scf.if %477 -> (i64) {
      %598 = arith.shli %476, %c32_i64_111 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_150 = arith.constant 0 : i64
      scf.yield %c0_i64_150 : i64
    }
    %479 = llvm.load %5 : !llvm.ptr -> i32
    %c40_i32_113 = arith.constant 40 : i32
    %480 = arith.addi %479, %c40_i32_113 : i32
    %481 = arith.extui %480 : i32 to i64
    %482 = arith.ori %478, %481 : i64
    %c88_i64_114 = arith.constant 88 : i64
    %483 = arith.extui %475 : i32 to i64
    %484 = arith.addi %483, %c88_i64_114 : i64
    %485 = llvm.getelementptr %15[%484] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %482, %485 {alignment = 1 : i64} : i64, !llvm.ptr
    %486 = llvm.load %5 : !llvm.ptr -> i32
    %c30_i32 = arith.constant 30 : i32
    %487 = arith.extui %c30_i32 : i32 to i64
    %c32_i64_115 = arith.constant 32 : i64
    %c63_i64_116 = arith.constant 63 : i64
    %488 = arith.cmpi ule, %c32_i64_115, %c63_i64_116 : i64
    %489 = scf.if %488 -> (i64) {
      %598 = arith.shli %487, %c32_i64_115 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_150 = arith.constant 0 : i64
      scf.yield %c0_i64_150 : i64
    }
    %490 = llvm.load %5 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %491 = arith.addi %490, %c36_i32 : i32
    %492 = arith.extui %491 : i32 to i64
    %493 = arith.ori %489, %492 : i64
    %c80_i64_117 = arith.constant 80 : i64
    %494 = arith.extui %486 : i32 to i64
    %495 = arith.addi %494, %c80_i64_117 : i64
    %496 = llvm.getelementptr %15[%495] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %493, %496 {alignment = 1 : i64} : i64, !llvm.ptr
    %497 = llvm.load %5 : !llvm.ptr -> i32
    %c31_i32_118 = arith.constant 31 : i32
    %498 = arith.extui %c31_i32_118 : i32 to i64
    %c32_i64_119 = arith.constant 32 : i64
    %c63_i64_120 = arith.constant 63 : i64
    %499 = arith.cmpi ule, %c32_i64_119, %c63_i64_120 : i64
    %500 = scf.if %499 -> (i64) {
      %598 = arith.shli %498, %c32_i64_119 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_150 = arith.constant 0 : i64
      scf.yield %c0_i64_150 : i64
    }
    %501 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %502 = arith.addi %501, %c32_i32 : i32
    %503 = arith.extui %502 : i32 to i64
    %504 = arith.ori %500, %503 : i64
    %c72_i64_121 = arith.constant 72 : i64
    %505 = arith.extui %497 : i32 to i64
    %506 = arith.addi %505, %c72_i64_121 : i64
    %507 = llvm.getelementptr %15[%506] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %504, %507 {alignment = 1 : i64} : i64, !llvm.ptr
    %508 = llvm.load %5 : !llvm.ptr -> i32
    %509 = llvm.load %5 : !llvm.ptr -> i32
    %c72_i32_122 = arith.constant 72 : i32
    %510 = arith.addi %509, %c72_i32_122 : i32
    %c56_i64_123 = arith.constant 56 : i64
    %511 = arith.extui %508 : i32 to i64
    %512 = arith.addi %511, %c56_i64_123 : i64
    %513 = llvm.getelementptr %15[%512] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %510, %513 {alignment = 1 : i64} : i32, !llvm.ptr
    %514 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32_124 = arith.constant 48 : i32
    %515 = arith.addi %514, %c48_i32_124 : i32
    %516 = llvm.load %4 : !llvm.ptr -> i32
    call @f141(%arg0, %515, %516) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_125 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_125) : (i32) -> ()
    llvm.unreachable
  ^bb49:  // 3 preds: ^bb53, ^bb55, ^bb56
    %517 = llvm.load %5 : !llvm.ptr -> i32
    %518 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %519 = arith.extui %517 : i32 to i64
    %520 = arith.addi %519, %c36_i64 : i64
    %521 = llvm.getelementptr %15[%520] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %518, %521 {alignment = 1 : i64} : i32, !llvm.ptr
    %522 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %523 = arith.cmpi uge, %522, %c128_i32 : i32
    %524 = arith.extui %523 : i1 to i32
    %c0_i32_126 = arith.constant 0 : i32
    %525 = arith.cmpi ne, %524, %c0_i32_126 : i32
    cf.cond_br %525, ^bb57, ^bb58
  ^bb50:  // pred: ^bb52
    %526 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32_127 = arith.constant 31 : i32
    %527 = arith.cmpi ule, %c6_i32, %c31_i32_127 : i32
    %528 = scf.if %527 -> (i32) {
      %598 = arith.shli %526, %c6_i32 : i32
      scf.yield %598 : i32
    } else {
      %c0_i32_150 = arith.constant 0 : i32
      scf.yield %c0_i32_150 : i32
    }
    %529 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %530 = arith.extui %529 : i32 to i64
    %531 = arith.addi %530, %c2_i64 : i64
    %532 = llvm.getelementptr %15[%531] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %533 = llvm.load volatile %532 {alignment = 1 : i64} : !llvm.ptr -> i8
    %534 = arith.extui %533 : i8 to i32
    %c63_i32 = arith.constant 63 : i32
    %535 = arith.andi %534, %c63_i32 : i32
    %536 = arith.ori %528, %535 : i32
    llvm.store %536, %0 : i32, !llvm.ptr
    %537 = llvm.load %1 : !llvm.ptr -> i32
    %c-16_i32 = arith.constant -16 : i32
    %538 = arith.cmpi uge, %537, %c-16_i32 : i32
    %539 = arith.extui %538 : i1 to i32
    %c0_i32_128 = arith.constant 0 : i32
    %540 = arith.cmpi ne, %539, %c0_i32_128 : i32
    cf.cond_br %540, ^bb54, ^bb55
  ^bb51:  // pred: ^bb47
    %541 = llvm.load %5 : !llvm.ptr -> i32
    %542 = llvm.load %1 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %543 = arith.andi %542, %c255_i32 : i32
    %c36_i64_129 = arith.constant 36 : i64
    %544 = arith.extui %541 : i32 to i64
    %545 = arith.addi %544, %c36_i64_129 : i64
    %546 = llvm.getelementptr %15[%545] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %543, %546 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_130 = arith.constant 1 : i32
    llvm.store %c1_i32_130, %1 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb52:  // pred: ^bb47
    %547 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %548 = arith.extui %547 : i32 to i64
    %549 = arith.addi %548, %c1_i64 : i64
    %550 = llvm.getelementptr %15[%549] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %551 = llvm.load volatile %550 {alignment = 1 : i64} : !llvm.ptr -> i8
    %552 = arith.extui %551 : i8 to i32
    %c63_i32_131 = arith.constant 63 : i32
    %553 = arith.andi %552, %c63_i32_131 : i32
    llvm.store %553, %0 : i32, !llvm.ptr
    %554 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32_132 = arith.constant 31 : i32
    %555 = arith.andi %554, %c31_i32_132 : i32
    llvm.store %555, %6 : i32, !llvm.ptr
    %556 = llvm.load %1 : !llvm.ptr -> i32
    %c-33_i32 = arith.constant -33 : i32
    %557 = arith.cmpi ugt, %556, %c-33_i32 : i32
    %558 = arith.extui %557 : i1 to i32
    %c0_i32_133 = arith.constant 0 : i32
    %559 = arith.cmpi ne, %558, %c0_i32_133 : i32
    cf.cond_br %559, ^bb50, ^bb53
  ^bb53:  // pred: ^bb52
    %560 = llvm.load %6 : !llvm.ptr -> i32
    %c6_i32_134 = arith.constant 6 : i32
    %c31_i32_135 = arith.constant 31 : i32
    %561 = arith.cmpi ule, %c6_i32_134, %c31_i32_135 : i32
    %562 = scf.if %561 -> (i32) {
      %598 = arith.shli %560, %c6_i32_134 : i32
      scf.yield %598 : i32
    } else {
      %c0_i32_150 = arith.constant 0 : i32
      scf.yield %c0_i32_150 : i32
    }
    %563 = llvm.load %0 : !llvm.ptr -> i32
    %564 = arith.ori %562, %563 : i32
    llvm.store %564, %1 : i32, !llvm.ptr
    cf.br ^bb49
  ^bb54:  // pred: ^bb50
    %565 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i32_136 = arith.constant 6 : i32
    %c31_i32_137 = arith.constant 31 : i32
    %566 = arith.cmpi ule, %c6_i32_136, %c31_i32_137 : i32
    %567 = scf.if %566 -> (i32) {
      %598 = arith.shli %565, %c6_i32_136 : i32
      scf.yield %598 : i32
    } else {
      %c0_i32_150 = arith.constant 0 : i32
      scf.yield %c0_i32_150 : i32
    }
    %568 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_138 = arith.constant 3 : i64
    %569 = arith.extui %568 : i32 to i64
    %570 = arith.addi %569, %c3_i64_138 : i64
    %571 = llvm.getelementptr %15[%570] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %572 = llvm.load volatile %571 {alignment = 1 : i64} : !llvm.ptr -> i8
    %573 = arith.extui %572 : i8 to i32
    %c63_i32_139 = arith.constant 63 : i32
    %574 = arith.andi %573, %c63_i32_139 : i32
    %575 = arith.ori %567, %574 : i32
    %576 = llvm.load %6 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_140 = arith.constant 31 : i32
    %577 = arith.cmpi ule, %c18_i32, %c31_i32_140 : i32
    %578 = scf.if %577 -> (i32) {
      %598 = arith.shli %576, %c18_i32 : i32
      scf.yield %598 : i32
    } else {
      %c0_i32_150 = arith.constant 0 : i32
      scf.yield %c0_i32_150 : i32
    }
    %c1835008_i32 = arith.constant 1835008 : i32
    %579 = arith.andi %578, %c1835008_i32 : i32
    %580 = arith.ori %575, %579 : i32
    llvm.store %580, %1 : i32, !llvm.ptr
    %c1114112_i32 = arith.constant 1114112 : i32
    %581 = arith.cmpi eq, %580, %c1114112_i32 : i32
    %582 = arith.extui %581 : i1 to i32
    %c0_i32_141 = arith.constant 0 : i32
    %583 = arith.cmpi ne, %582, %c0_i32_141 : i32
    cf.cond_br %583, ^bb4, ^bb56
  ^bb55:  // pred: ^bb50
    %584 = llvm.load %0 : !llvm.ptr -> i32
    %585 = llvm.load %6 : !llvm.ptr -> i32
    %c12_i32_142 = arith.constant 12 : i32
    %c31_i32_143 = arith.constant 31 : i32
    %586 = arith.cmpi ule, %c12_i32_142, %c31_i32_143 : i32
    %587 = scf.if %586 -> (i32) {
      %598 = arith.shli %585, %c12_i32_142 : i32
      scf.yield %598 : i32
    } else {
      %c0_i32_150 = arith.constant 0 : i32
      scf.yield %c0_i32_150 : i32
    }
    %588 = arith.ori %584, %587 : i32
    llvm.store %588, %1 : i32, !llvm.ptr
    cf.br ^bb49
  ^bb56:  // pred: ^bb54
    cf.br ^bb49
  ^bb57:  // pred: ^bb49
    %589 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %590 = arith.cmpi uge, %589, %c2048_i32 : i32
    %591 = arith.extui %590 : i1 to i32
    %c0_i32_144 = arith.constant 0 : i32
    %592 = arith.cmpi ne, %591, %c0_i32_144 : i32
    cf.cond_br %592, ^bb59, ^bb60
  ^bb58:  // pred: ^bb49
    %c1_i32_145 = arith.constant 1 : i32
    llvm.store %c1_i32_145, %1 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb59:  // pred: ^bb57
    %c3_i32_146 = arith.constant 3 : i32
    %c4_i32_147 = arith.constant 4 : i32
    %593 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %594 = arith.cmpi ult, %593, %c65536_i32 : i32
    %595 = arith.extui %594 : i1 to i32
    %c0_i32_148 = arith.constant 0 : i32
    %596 = arith.cmpi ne, %595, %c0_i32_148 : i32
    %597 = arith.select %596, %c3_i32_146, %c4_i32_147 : i32
    llvm.store %597, %1 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb60:  // pred: ^bb57
    %c2_i32_149 = arith.constant 2 : i32
    llvm.store %c2_i32_149, %1 : i32, !llvm.ptr
    cf.br ^bb48
  }
  func.func @f182(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg7, %6 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %c1_i32_12 = arith.constant 1 : i32
    %13 = llvm.alloca %c1_i32_12 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %13 : i32, !llvm.ptr
    %14 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_13 = arith.constant 1 : i32
    llvm.store %c1_i32_13, %7 : i32, !llvm.ptr
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_14 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_15 : i32
    cf.cond_br %20, ^bb4, ^bb5
  ^bb2(%21: i32):  // pred: ^bb3
    return %21 : i32
  ^bb3:  // 4 preds: ^bb4, ^bb17, ^bb23, ^bb25
    %22 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %23 = arith.andi %22, %c1_i32_16 : i32
    cf.br ^bb2(%23 : i32)
  ^bb4:  // 4 preds: ^bb1, ^bb6, ^bb9, ^bb10
    %24 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %25 = arith.cmpi eq, %24, %c0_i32_17 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_18 : i32
    cf.cond_br %27, ^bb3, ^bb22
  ^bb5:  // pred: ^bb1
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %30 = arith.cmpi ule, %c1_i32_19, %c31_i32 : i32
    %31 = scf.if %30 -> (i32) {
      %168 = arith.shli %29, %c1_i32_19 : i32
      scf.yield %168 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    %32 = arith.addi %28, %31 : i32
    llvm.store %32, %8 : i32, !llvm.ptr
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c65280_i32 = arith.constant 65280 : i32
    %34 = arith.andi %33, %c65280_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_20 = arith.constant 31 : i32
    %35 = arith.cmpi ule, %c8_i32, %c31_i32_20 : i32
    %36 = scf.if %35 -> (i32) {
      %168 = arith.shrui %34, %c8_i32 : i32
      scf.yield %168 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    llvm.store %36, %9 : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    llvm.store %c0_i32_21, %10 : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %38 = arith.andi %37, %c255_i32 : i32
    llvm.store %38, %11 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb6:  // pred: ^bb21
    cf.br ^bb4
  ^bb7:  // 3 preds: ^bb5, ^bb11, ^bb12
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %40 = arith.addi %39, %c2_i32 : i32
    llvm.store %40, %12 : i32, !llvm.ptr
    %41 = llvm.load %10 : !llvm.ptr -> i32
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c1_i64 : i64
    %45 = llvm.getelementptr %16[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i8
    %47 = arith.extui %46 : i8 to i32
    llvm.store %47, %2 : i32, !llvm.ptr
    %48 = arith.addi %41, %47 : i32
    llvm.store %48, %13 : i32, !llvm.ptr
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64 : i64
    %52 = llvm.getelementptr %16[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i8
    %54 = arith.extui %53 : i8 to i32
    llvm.store %54, %1 : i32, !llvm.ptr
    %55 = llvm.load %9 : !llvm.ptr -> i32
    %56 = arith.cmpi eq, %54, %55 : i32
    %57 = arith.extui %56 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_22 : i32
    cf.cond_br %58, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %59 = llvm.load %13 : !llvm.ptr -> i32
    %60 = llvm.load %10 : !llvm.ptr -> i32
    %61 = arith.cmpi ult, %59, %60 : i32
    %62 = arith.extui %61 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %63 = arith.cmpi ne, %62, %c0_i32_23 : i32
    cf.cond_br %63, ^bb14, ^bb15
  ^bb9:  // pred: ^bb7
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %65 = llvm.load %9 : !llvm.ptr -> i32
    %66 = arith.cmpi ugt, %64, %65 : i32
    %67 = arith.extui %66 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %68 = arith.cmpi ne, %67, %c0_i32_24 : i32
    cf.cond_br %68, ^bb4, ^bb10
  ^bb10:  // pred: ^bb9
    %69 = llvm.load %13 : !llvm.ptr -> i32
    llvm.store %69, %10 : i32, !llvm.ptr
    %70 = llvm.load %12 : !llvm.ptr -> i32
    llvm.store %70, %1 : i32, !llvm.ptr
    %71 = llvm.load %12 : !llvm.ptr -> i32
    %72 = llvm.load %8 : !llvm.ptr -> i32
    %73 = arith.cmpi eq, %71, %72 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_25 : i32
    cf.cond_br %75, ^bb4, ^bb11
  ^bb11:  // pred: ^bb10
    cf.br ^bb7
  ^bb12:  // pred: ^bb18
    %76 = llvm.load %13 : !llvm.ptr -> i32
    llvm.store %76, %10 : i32, !llvm.ptr
    %77 = llvm.load %12 : !llvm.ptr -> i32
    llvm.store %77, %1 : i32, !llvm.ptr
    %78 = llvm.load %12 : !llvm.ptr -> i32
    %79 = llvm.load %8 : !llvm.ptr -> i32
    %80 = arith.cmpi eq, %78, %79 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %82 = arith.cmpi eq, %81, %c0_i32_26 : i32
    %83 = arith.extui %82 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_27 : i32
    cf.cond_br %84, ^bb7, ^bb21
  ^bb13:  // pred: ^bb15
    %85 = llvm.load %13 : !llvm.ptr -> i32
    %86 = llvm.load %4 : !llvm.ptr -> i32
    %c1051708_i32 = arith.constant 1051708 : i32
    call @f138(%arg0, %85, %86, %c1051708_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb14:  // pred: ^bb8
    %87 = llvm.load %10 : !llvm.ptr -> i32
    %88 = llvm.load %13 : !llvm.ptr -> i32
    %c1051708_i32_28 = arith.constant 1051708 : i32
    call @f155(%arg0, %87, %88, %c1051708_i32_28) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_29 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_29) : (i32) -> ()
    llvm.unreachable
  ^bb15:  // pred: ^bb8
    %89 = llvm.load %13 : !llvm.ptr -> i32
    %90 = llvm.load %4 : !llvm.ptr -> i32
    %91 = arith.cmpi ugt, %89, %90 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_30 : i32
    cf.cond_br %93, ^bb13, ^bb16
  ^bb16:  // pred: ^bb15
    %94 = llvm.load %3 : !llvm.ptr -> i32
    %95 = llvm.load %10 : !llvm.ptr -> i32
    %96 = arith.addi %94, %95 : i32
    llvm.store %96, %1 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb17:  // pred: ^bb20
    %c0_i32_31 = arith.constant 0 : i32
    llvm.store %c0_i32_31, %7 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_32 = arith.constant 0 : i32
    %98 = arith.cmpi eq, %97, %c0_i32_32 : i32
    %99 = arith.extui %98 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %100 = arith.cmpi ne, %99, %c0_i32_33 : i32
    cf.cond_br %100, ^bb12, ^bb19
  ^bb19:  // pred: ^bb18
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %102 = arith.addi %101, %c-1_i32 : i32
    llvm.store %102, %2 : i32, !llvm.ptr
    %103 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_34 : i64
    %106 = llvm.getelementptr %16[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i8
    %108 = arith.extui %107 : i8 to i32
    llvm.store %108, %10 : i32, !llvm.ptr
    %109 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_35 = arith.constant 1 : i32
    %110 = arith.addi %109, %c1_i32_35 : i32
    llvm.store %110, %1 : i32, !llvm.ptr
    %111 = llvm.load %10 : !llvm.ptr -> i32
    %112 = llvm.load %11 : !llvm.ptr -> i32
    %113 = arith.cmpi eq, %111, %112 : i32
    %114 = arith.extui %113 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %115 = arith.cmpi eq, %114, %c0_i32_36 : i32
    %116 = arith.extui %115 : i1 to i32
    %c0_i32_37 = arith.constant 0 : i32
    %117 = arith.cmpi ne, %116, %c0_i32_37 : i32
    cf.cond_br %117, ^bb18, ^bb20
  ^bb20:  // pred: ^bb19
    cf.br ^bb17
  ^bb21:  // pred: ^bb12
    cf.br ^bb6
  ^bb22:  // pred: ^bb4
    %118 = llvm.load %5 : !llvm.ptr -> i32
    %119 = llvm.load %6 : !llvm.ptr -> i32
    %120 = arith.addi %118, %119 : i32
    llvm.store %120, %11 : i32, !llvm.ptr
    %121 = llvm.load %0 : !llvm.ptr -> i32
    %c65535_i32 = arith.constant 65535 : i32
    %122 = arith.andi %121, %c65535_i32 : i32
    llvm.store %122, %1 : i32, !llvm.ptr
    %c1_i32_38 = arith.constant 1 : i32
    llvm.store %c1_i32_38, %7 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb23:  // pred: ^bb31
    cf.br ^bb3
  ^bb24:  // 2 preds: ^bb22, ^bb30
    %123 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_39 = arith.constant 1 : i32
    %124 = arith.addi %123, %c1_i32_39 : i32
    llvm.store %124, %10 : i32, !llvm.ptr
    %125 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c0_i64_40 : i64
    %128 = llvm.getelementptr %16[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %129 = llvm.load volatile %128 {alignment = 1 : i64} : !llvm.ptr -> i8
    %130 = arith.extsi %129 : i8 to i32
    llvm.store %130, %2 : i32, !llvm.ptr
    %c0_i32_41 = arith.constant 0 : i32
    %131 = arith.cmpi slt, %130, %c0_i32_41 : i32
    %132 = arith.extui %131 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %133 = arith.cmpi ne, %132, %c0_i32_42 : i32
    cf.cond_br %133, ^bb26, ^bb27
  ^bb25:  // 2 preds: ^bb27, ^bb29
    %134 = llvm.load %1 : !llvm.ptr -> i32
    %135 = llvm.load %2 : !llvm.ptr -> i32
    %136 = arith.subi %134, %135 : i32
    llvm.store %136, %1 : i32, !llvm.ptr
    %c0_i32_43 = arith.constant 0 : i32
    %137 = arith.cmpi slt, %136, %c0_i32_43 : i32
    %138 = arith.extui %137 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %139 = arith.cmpi ne, %138, %c0_i32_44 : i32
    cf.cond_br %139, ^bb3, ^bb30
  ^bb26:  // pred: ^bb24
    %140 = llvm.load %10 : !llvm.ptr -> i32
    %141 = llvm.load %11 : !llvm.ptr -> i32
    %142 = arith.cmpi eq, %140, %141 : i32
    %143 = arith.extui %142 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %144 = arith.cmpi ne, %143, %c0_i32_45 : i32
    cf.cond_br %144, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %145 = llvm.load %10 : !llvm.ptr -> i32
    llvm.store %145, %5 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb28:  // pred: ^bb26
    %c1051692_i32 = arith.constant 1051692 : i32
    call @f156(%arg0, %c1051692_i32) : (!llvm.ptr, i32) -> ()
    %c9_i32_46 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_46) : (i32) -> ()
    llvm.unreachable
  ^bb29:  // pred: ^bb26
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %c127_i32 = arith.constant 127 : i32
    %147 = arith.andi %146, %c127_i32 : i32
    %c8_i32_47 = arith.constant 8 : i32
    %c31_i32_48 = arith.constant 31 : i32
    %148 = arith.cmpi ule, %c8_i32_47, %c31_i32_48 : i32
    %149 = scf.if %148 -> (i32) {
      %168 = arith.shli %147, %c8_i32_47 : i32
      scf.yield %168 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    %150 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_49 = arith.constant 1 : i64
    %151 = arith.extui %150 : i32 to i64
    %152 = arith.addi %151, %c1_i64_49 : i64
    %153 = llvm.getelementptr %16[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i8
    %155 = arith.extui %154 : i8 to i32
    %156 = arith.ori %149, %155 : i32
    llvm.store %156, %2 : i32, !llvm.ptr
    %157 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32_50 = arith.constant 2 : i32
    %158 = arith.addi %157, %c2_i32_50 : i32
    llvm.store %158, %5 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb30:  // pred: ^bb25
    %159 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_51 = arith.constant 1 : i32
    %160 = arith.xori %159, %c1_i32_51 : i32
    llvm.store %160, %7 : i32, !llvm.ptr
    %161 = llvm.load %5 : !llvm.ptr -> i32
    %162 = llvm.load %11 : !llvm.ptr -> i32
    %163 = arith.cmpi eq, %161, %162 : i32
    %164 = arith.extui %163 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %165 = arith.cmpi eq, %164, %c0_i32_52 : i32
    %166 = arith.extui %165 : i1 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %167 = arith.cmpi ne, %166, %c0_i32_53 : i32
    cf.cond_br %167, ^bb24, ^bb31
  ^bb31:  // pred: ^bb30
    cf.br ^bb23
  }
  func.func @f183(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %11 = arith.subi %10, %c128_i32 : i32
    llvm.store %11, %2 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i8
    %17 = arith.extui %16 : i8 to i32
    llvm.store %17, %3 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    llvm.store %c0_i32_4, %0 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2(%18: i32):  // pred: ^bb6
    return %18 : i32
  ^bb3:  // pred: ^bb5
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c128_i32_5 = arith.constant 128 : i32
    %20 = arith.addi %19, %c128_i32_5 : i32
    llvm.store %20, %3 : i32, !llvm.ptr
    %c129_i32 = arith.constant 129 : i32
    %21 = arith.cmpi ult, %20, %c129_i32 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_6 : i32
    cf.cond_br %23, ^bb6, ^bb7
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %26 = arith.addi %24, %25 : i32
    %c127_i32 = arith.constant 127 : i32
    %27 = arith.addi %26, %c127_i32 : i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c15_i32 = arith.constant 15 : i32
    %29 = arith.andi %28, %c15_i32 : i32
    llvm.store %29, %4 : i32, !llvm.ptr
    %c48_i32 = arith.constant 48 : i32
    %30 = arith.ori %29, %c48_i32 : i32
    %31 = llvm.load %4 : !llvm.ptr -> i32
    %c87_i32 = arith.constant 87 : i32
    %32 = arith.addi %31, %c87_i32 : i32
    %33 = llvm.load %4 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %34 = arith.cmpi ult, %33, %c10_i32 : i32
    %35 = arith.extui %34 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %36 = arith.cmpi ne, %35, %c0_i32_7 : i32
    %37 = arith.select %36, %30, %32 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %38 = arith.extui %27 : i32 to i64
    %39 = arith.addi %38, %c0_i64_8 : i64
    %40 = llvm.getelementptr %9[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = arith.trunci %37 : i32 to i8
    llvm.store volatile %41, %40 {alignment = 1 : i64} : i8, !llvm.ptr
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %43 = arith.addi %42, %c-1_i32 : i32
    llvm.store %43, %0 : i32, !llvm.ptr
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %45 = arith.andi %44, %c255_i32 : i32
    llvm.store %45, %4 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %c31_i32 = arith.constant 31 : i32
    %46 = arith.cmpi ule, %c4_i32, %c31_i32 : i32
    %47 = scf.if %46 -> (i32) {
      %64 = arith.shrui %45, %c4_i32 : i32
      scf.yield %64 : i32
    } else {
      %c0_i32_15 = arith.constant 0 : i32
      scf.yield %c0_i32_15 : i32
    }
    llvm.store %47, %3 : i32, !llvm.ptr
    %48 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %49 = arith.cmpi uge, %48, %c16_i32 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_9 : i32
    cf.cond_br %51, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  ^bb6:  // pred: ^bb3
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_10 = arith.constant 1 : i32
    %c1050904_i32 = arith.constant 1050904 : i32
    %c2_i32 = arith.constant 2 : i32
    %53 = llvm.load %2 : !llvm.ptr -> i32
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %55 = arith.addi %53, %54 : i32
    %c128_i32_11 = arith.constant 128 : i32
    %56 = arith.addi %55, %c128_i32_11 : i32
    %c0_i32_12 = arith.constant 0 : i32
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %58 = arith.subi %c0_i32_12, %57 : i32
    %59 = call @f166(%arg0, %52, %c1_i32_10, %c1050904_i32, %c2_i32, %56, %58) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %59, %0 : i32, !llvm.ptr
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c128_i32_13 = arith.constant 128 : i32
    %61 = arith.addi %60, %c128_i32_13 : i32
    llvm.store %61, %6 : i32, !llvm.ptr
    %62 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%62 : i32)
  ^bb7:  // pred: ^bb3
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_14 = arith.constant 128 : i32
    %c1050888_i32 = arith.constant 1050888 : i32
    call @f136(%arg0, %63, %c128_i32_14, %c1050888_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f184(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[368] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.subi %14, %c16_i32 : i32
    llvm.store %15, %3 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %c10_i32 = arith.constant 10 : i32
    llvm.store %c10_i32, %4 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c10000_i32 = arith.constant 10000 : i32
    %17 = arith.cmpi uge, %16, %c10000_i32 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_8 : i32
    cf.cond_br %19, ^bb4, ^bb5
  ^bb2(%20: i32):  // pred: ^bb12
    return %20 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb6
    %21 = llvm.load %5 : !llvm.ptr -> i32
    %c99_i32 = arith.constant 99 : i32
    %22 = arith.cmpi ugt, %21, %c99_i32 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_9 : i32
    cf.cond_br %24, ^bb10, ^bb11
  ^bb4:  // pred: ^bb1
    %c10_i32_10 = arith.constant 10 : i32
    llvm.store %c10_i32_10, %4 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb5:  // pred: ^bb1
    %25 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %25, %5 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb8
    cf.br ^bb3
  ^bb7:  // 2 preds: ^bb4, ^bb7
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %27 = arith.addi %26, %c6_i32 : i32
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    llvm.store %29, %6 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %30 = arith.addi %29, %c-4_i32 : i32
    %31 = llvm.load %0 : !llvm.ptr -> i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c10000_i32_11 = arith.constant 10000 : i32
    %33 = arith.divui %32, %c10000_i32_11 : i32
    %c0_i32_12 = arith.constant 0 : i32
    %34 = arith.cmpi eq, %c10000_i32_11, %c0_i32_12 : i32
    %35 = arith.select %34, %c0_i32_12, %33 : i32
    llvm.store %35, %5 : i32, !llvm.ptr
    %c10000_i32_13 = arith.constant 10000 : i32
    %36 = arith.muli %35, %c10000_i32_13 : i32
    %37 = arith.subi %31, %36 : i32
    llvm.store %37, %7 : i32, !llvm.ptr
    %c65535_i32 = arith.constant 65535 : i32
    %38 = arith.andi %37, %c65535_i32 : i32
    %c100_i32 = arith.constant 100 : i32
    %39 = arith.divui %38, %c100_i32 : i32
    %c0_i32_14 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %c100_i32, %c0_i32_14 : i32
    %41 = arith.select %40, %c0_i32_14, %39 : i32
    llvm.store %41, %8 : i32, !llvm.ptr
    %c1_i32_15 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %42 = arith.cmpi ule, %c1_i32_15, %c31_i32 : i32
    %43 = scf.if %42 -> (i32) {
      %153 = arith.shli %41, %c1_i32_15 : i32
      scf.yield %153 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    %c1050906_i32 = arith.constant 1050906 : i32
    %44 = arith.addi %43, %c1050906_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c0_i64 : i64
    %47 = llvm.getelementptr %13[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i16
    %49 = arith.extui %48 : i16 to i32
    %c0_i64_16 = arith.constant 0 : i64
    %50 = arith.extui %30 : i32 to i64
    %51 = arith.addi %50, %c0_i64_16 : i64
    %52 = llvm.getelementptr %13[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = arith.trunci %49 : i32 to i16
    llvm.store volatile %53, %52 {alignment = 1 : i64} : i16, !llvm.ptr
    %54 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %55 = arith.addi %54, %c-2_i32 : i32
    %56 = llvm.load %7 : !llvm.ptr -> i32
    %57 = llvm.load %8 : !llvm.ptr -> i32
    %c100_i32_17 = arith.constant 100 : i32
    %58 = arith.muli %57, %c100_i32_17 : i32
    %59 = arith.subi %56, %58 : i32
    %c65535_i32_18 = arith.constant 65535 : i32
    %60 = arith.andi %59, %c65535_i32_18 : i32
    %c1_i32_19 = arith.constant 1 : i32
    %c31_i32_20 = arith.constant 31 : i32
    %61 = arith.cmpi ule, %c1_i32_19, %c31_i32_20 : i32
    %62 = scf.if %61 -> (i32) {
      %153 = arith.shli %60, %c1_i32_19 : i32
      scf.yield %153 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    %c1050906_i32_21 = arith.constant 1050906 : i32
    %63 = arith.addi %62, %c1050906_i32_21 : i32
    %c0_i64_22 = arith.constant 0 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c0_i64_22 : i64
    %66 = llvm.getelementptr %13[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i16
    %68 = arith.extui %67 : i16 to i32
    %c0_i64_23 = arith.constant 0 : i64
    %69 = arith.extui %55 : i32 to i64
    %70 = arith.addi %69, %c0_i64_23 : i64
    %71 = llvm.getelementptr %13[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = arith.trunci %68 : i32 to i16
    llvm.store volatile %72, %71 {alignment = 1 : i64} : i16, !llvm.ptr
    %73 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_24 = arith.constant -4 : i32
    %74 = arith.addi %73, %c-4_i32_24 : i32
    llvm.store %74, %4 : i32, !llvm.ptr
    %75 = llvm.load %0 : !llvm.ptr -> i32
    %c99999999_i32 = arith.constant 99999999 : i32
    %76 = arith.cmpi ugt, %75, %c99999999_i32 : i32
    %77 = arith.extui %76 : i1 to i32
    llvm.store %77, %6 : i32, !llvm.ptr
    %78 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %78, %0 : i32, !llvm.ptr
    %79 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_25 = arith.constant 0 : i32
    %80 = arith.cmpi ne, %79, %c0_i32_25 : i32
    cf.cond_br %80, ^bb7, ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb10, ^bb11
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %c10_i32_26 = arith.constant 10 : i32
    %82 = arith.cmpi ult, %81, %c10_i32_26 : i32
    %83 = arith.extui %82 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_27 : i32
    cf.cond_br %84, ^bb13, ^bb14
  ^bb10:  // pred: ^bb3
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_28 = arith.constant 6 : i32
    %86 = arith.addi %85, %c6_i32_28 : i32
    %87 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_29 = arith.constant -2 : i32
    %88 = arith.addi %87, %c-2_i32_29 : i32
    llvm.store %88, %4 : i32, !llvm.ptr
    %89 = arith.addi %86, %88 : i32
    %90 = llvm.load %5 : !llvm.ptr -> i32
    %91 = llvm.load %5 : !llvm.ptr -> i32
    %c65535_i32_30 = arith.constant 65535 : i32
    %92 = arith.andi %91, %c65535_i32_30 : i32
    %c100_i32_31 = arith.constant 100 : i32
    %93 = arith.divui %92, %c100_i32_31 : i32
    %c0_i32_32 = arith.constant 0 : i32
    %94 = arith.cmpi eq, %c100_i32_31, %c0_i32_32 : i32
    %95 = arith.select %94, %c0_i32_32, %93 : i32
    llvm.store %95, %0 : i32, !llvm.ptr
    %c100_i32_33 = arith.constant 100 : i32
    %96 = arith.muli %95, %c100_i32_33 : i32
    %97 = arith.subi %90, %96 : i32
    %c65535_i32_34 = arith.constant 65535 : i32
    %98 = arith.andi %97, %c65535_i32_34 : i32
    %c1_i32_35 = arith.constant 1 : i32
    %c31_i32_36 = arith.constant 31 : i32
    %99 = arith.cmpi ule, %c1_i32_35, %c31_i32_36 : i32
    %100 = scf.if %99 -> (i32) {
      %153 = arith.shli %98, %c1_i32_35 : i32
      scf.yield %153 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    %c1050906_i32_37 = arith.constant 1050906 : i32
    %101 = arith.addi %100, %c1050906_i32_37 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_38 : i64
    %104 = llvm.getelementptr %13[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i16
    %106 = arith.extui %105 : i16 to i32
    %c0_i64_39 = arith.constant 0 : i64
    %107 = arith.extui %89 : i32 to i64
    %108 = arith.addi %107, %c0_i64_39 : i64
    %109 = llvm.getelementptr %13[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = arith.trunci %106 : i32 to i16
    llvm.store volatile %110, %109 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // pred: ^bb3
    %111 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %111, %0 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // 2 preds: ^bb13, ^bb14
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %113 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_40 = arith.constant 1 : i32
    %c0_i32_41 = arith.constant 0 : i32
    %114 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_42 = arith.constant 6 : i32
    %115 = arith.addi %114, %c6_i32_42 : i32
    %116 = llvm.load %4 : !llvm.ptr -> i32
    %117 = arith.addi %115, %116 : i32
    %c10_i32_43 = arith.constant 10 : i32
    %118 = llvm.load %4 : !llvm.ptr -> i32
    %119 = arith.subi %c10_i32_43, %118 : i32
    %120 = call @f166(%arg0, %112, %113, %c1_i32_40, %c0_i32_41, %117, %119) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %120, %0 : i32, !llvm.ptr
    %121 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_44 = arith.constant 16 : i32
    %122 = arith.addi %121, %c16_i32_44 : i32
    llvm.store %122, %10 : i32, !llvm.ptr
    %123 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%123 : i32)
  ^bb13:  // pred: ^bb9
    %124 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_45 = arith.constant 6 : i32
    %125 = arith.addi %124, %c6_i32_45 : i32
    %126 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %127 = arith.addi %126, %c-1_i32 : i32
    llvm.store %127, %4 : i32, !llvm.ptr
    %128 = arith.addi %125, %127 : i32
    %129 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %130 = arith.ori %129, %c48_i32 : i32
    %c0_i64_46 = arith.constant 0 : i64
    %131 = arith.extui %128 : i32 to i64
    %132 = arith.addi %131, %c0_i64_46 : i64
    %133 = llvm.getelementptr %13[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = arith.trunci %130 : i32 to i8
    llvm.store volatile %134, %133 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb12
  ^bb14:  // pred: ^bb9
    %135 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_47 = arith.constant 6 : i32
    %136 = arith.addi %135, %c6_i32_47 : i32
    %137 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_48 = arith.constant -2 : i32
    %138 = arith.addi %137, %c-2_i32_48 : i32
    llvm.store %138, %4 : i32, !llvm.ptr
    %139 = arith.addi %136, %138 : i32
    %140 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_49 = arith.constant 1 : i32
    %c31_i32_50 = arith.constant 31 : i32
    %141 = arith.cmpi ule, %c1_i32_49, %c31_i32_50 : i32
    %142 = scf.if %141 -> (i32) {
      %153 = arith.shli %140, %c1_i32_49 : i32
      scf.yield %153 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    %c1050906_i32_51 = arith.constant 1050906 : i32
    %143 = arith.addi %142, %c1050906_i32_51 : i32
    %c0_i64_52 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_52 : i64
    %146 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i16
    %148 = arith.extui %147 : i16 to i32
    %c0_i64_53 = arith.constant 0 : i64
    %149 = arith.extui %139 : i32 to i64
    %150 = arith.addi %149, %c0_i64_53 : i64
    %151 = llvm.getelementptr %13[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = arith.trunci %148 : i32 to i16
    llvm.store volatile %152, %151 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb12
  }
  func.func @f185(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %3 : i32, !llvm.ptr
    %9 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_6 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_7 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2(%13: i32):  // pred: ^bb3
    return %13 : i32
  ^bb3:  // 3 preds: ^bb1, ^bb5, ^bb8
    %14 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb2(%14 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb7
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %15 = llvm.load %4 : !llvm.ptr -> i32
    %16 = llvm.load %5 : !llvm.ptr -> i32
    %17 = arith.subi %15, %16 : i32
    llvm.store %17, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // no predecessors
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb4, ^bb9
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i8
    %23 = arith.extui %22 : i8 to i32
    llvm.store %23, %4 : i32, !llvm.ptr
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_8 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i8
    %29 = arith.extui %28 : i8 to i32
    llvm.store %29, %5 : i32, !llvm.ptr
    %30 = arith.cmpi eq, %23, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %32 = arith.cmpi eq, %31, %c0_i32_9 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_10 : i32
    cf.cond_br %34, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %36 = arith.addi %35, %c1_i32_11 : i32
    llvm.store %36, %0 : i32, !llvm.ptr
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_12 = arith.constant 1 : i32
    %38 = arith.addi %37, %c1_i32_12 : i32
    llvm.store %38, %1 : i32, !llvm.ptr
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %40 = arith.addi %39, %c-1_i32 : i32
    llvm.store %40, %2 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    %41 = arith.cmpi eq, %40, %c0_i32_13 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_14 : i32
    cf.cond_br %43, ^bb3, ^bb9
  ^bb9:  // pred: ^bb8
    cf.br ^bb7
  }
  func.func @f186(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.cmpi uge, %9, %c16_i32 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_5 : i32
    cf.cond_br %12, ^bb4, ^bb5
  ^bb2(%13: i32):  // pred: ^bb16
    return %13 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb11
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_6 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_7 : i32
    cf.cond_br %17, ^bb16, ^bb17
  ^bb4:  // pred: ^bb1
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %20 = arith.subi %c0_i32_8, %19 : i32
    %c3_i32 = arith.constant 3 : i32
    %21 = arith.andi %20, %c3_i32 : i32
    llvm.store %21, %4 : i32, !llvm.ptr
    %22 = arith.addi %18, %21 : i32
    llvm.store %22, %5 : i32, !llvm.ptr
    %23 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %24 = arith.cmpi eq, %23, %c0_i32_9 : i32
    %25 = arith.extui %24 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_10 : i32
    cf.cond_br %26, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb8
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %31 = arith.subi %29, %30 : i32
    llvm.store %31, %4 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %32 = arith.andi %31, %c-4_i32 : i32
    llvm.store %32, %2 : i32, !llvm.ptr
    %33 = arith.addi %28, %32 : i32
    llvm.store %33, %3 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %35 = arith.cmpi slt, %34, %c1_i32_11 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_12 : i32
    cf.cond_br %37, ^bb11, ^bb12
  ^bb7:  // pred: ^bb4
    %38 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %38, %3 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb8:  // pred: ^bb10
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb7, ^bb9
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %41 = arith.extui %39 : i32 to i64
    %42 = arith.addi %41, %c0_i64 : i64
    %43 = llvm.getelementptr %8[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = arith.trunci %40 : i32 to i8
    llvm.store volatile %44, %43 {alignment = 1 : i64} : i8, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_13 = arith.constant 1 : i32
    %46 = arith.addi %45, %c1_i32_13 : i32
    llvm.store %46, %3 : i32, !llvm.ptr
    %47 = llvm.load %5 : !llvm.ptr -> i32
    %48 = arith.cmpi ult, %46, %47 : i32
    %49 = arith.extui %48 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_14 : i32
    cf.cond_br %50, ^bb9, ^bb10
  ^bb10:  // pred: ^bb9
    cf.br ^bb8
  ^bb11:  // 2 preds: ^bb6, ^bb13
    %51 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_15 = arith.constant 3 : i32
    %52 = arith.andi %51, %c3_i32_15 : i32
    llvm.store %52, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %54 = arith.andi %53, %c255_i32 : i32
    %c16843009_i32 = arith.constant 16843009 : i32
    %55 = arith.muli %54, %c16843009_i32 : i32
    llvm.store %55, %2 : i32, !llvm.ptr
    cf.br ^bb14
  ^bb13:  // pred: ^bb15
    cf.br ^bb11
  ^bb14:  // 2 preds: ^bb12, ^bb14
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %58 = arith.extui %56 : i32 to i64
    %59 = arith.addi %58, %c0_i64_16 : i64
    %60 = llvm.getelementptr %8[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %57, %60 {alignment = 1 : i64} : i32, !llvm.ptr
    %61 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %62 = arith.addi %61, %c4_i32 : i32
    llvm.store %62, %5 : i32, !llvm.ptr
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = arith.cmpi ult, %62, %63 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %66 = arith.cmpi ne, %65, %c0_i32_17 : i32
    cf.cond_br %66, ^bb14, ^bb15
  ^bb15:  // pred: ^bb14
    cf.br ^bb13
  ^bb16:  // 2 preds: ^bb3, ^bb18
    %67 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%67 : i32)
  ^bb17:  // pred: ^bb3
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %70 = arith.addi %68, %69 : i32
    llvm.store %70, %5 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb18:  // pred: ^bb20
    cf.br ^bb16
  ^bb19:  // 2 preds: ^bb17, ^bb19
    %71 = llvm.load %3 : !llvm.ptr -> i32
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %73 = arith.extui %71 : i32 to i64
    %74 = arith.addi %73, %c0_i64_18 : i64
    %75 = llvm.getelementptr %8[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = arith.trunci %72 : i32 to i8
    llvm.store volatile %76, %75 {alignment = 1 : i64} : i8, !llvm.ptr
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %78 = arith.addi %77, %c1_i32_19 : i32
    llvm.store %78, %3 : i32, !llvm.ptr
    %79 = llvm.load %5 : !llvm.ptr -> i32
    %80 = arith.cmpi ult, %78, %79 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_20 : i32
    cf.cond_br %82, ^bb19, ^bb20
  ^bb20:  // pred: ^bb19
    cf.br ^bb18
  }
  func.func @f187(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %11 = llvm.getelementptr %arg0[344] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.cmpi uge, %14, %c16_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_10 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb22
    return %18 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb11
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_11 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_12 : i32
    cf.cond_br %22, ^bb22, ^bb23
  ^bb4:  // pred: ^bb1
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = arith.subi %c0_i32_13, %24 : i32
    %c3_i32 = arith.constant 3 : i32
    %26 = arith.andi %25, %c3_i32 : i32
    llvm.store %26, %4 : i32, !llvm.ptr
    %27 = arith.addi %23, %26 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_14 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_15 : i32
    cf.cond_br %31, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %32 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %32, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb8
    %33 = llvm.load %5 : !llvm.ptr -> i32
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %4 : !llvm.ptr -> i32
    %36 = arith.subi %34, %35 : i32
    llvm.store %36, %7 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %37 = arith.andi %36, %c-4_i32 : i32
    llvm.store %37, %8 : i32, !llvm.ptr
    %38 = arith.addi %33, %37 : i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %c3_i32_16 = arith.constant 3 : i32
    %42 = arith.andi %41, %c3_i32_16 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_17 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_18 : i32
    cf.cond_br %45, ^bb12, ^bb13
  ^bb7:  // pred: ^bb4
    %46 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %46, %3 : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %47, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb8:  // pred: ^bb10
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb7, ^bb9
    %48 = llvm.load %3 : !llvm.ptr -> i32
    %49 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64 : i64
    %52 = llvm.getelementptr %13[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i8
    %54 = arith.extui %53 : i8 to i32
    %c0_i64_19 = arith.constant 0 : i64
    %55 = arith.extui %48 : i32 to i64
    %56 = arith.addi %55, %c0_i64_19 : i64
    %57 = llvm.getelementptr %13[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = arith.trunci %54 : i32 to i8
    llvm.store volatile %58, %57 {alignment = 1 : i64} : i8, !llvm.ptr
    %59 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %60 = arith.addi %59, %c1_i32_20 : i32
    llvm.store %60, %6 : i32, !llvm.ptr
    %61 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_21 = arith.constant 1 : i32
    %62 = arith.addi %61, %c1_i32_21 : i32
    llvm.store %62, %3 : i32, !llvm.ptr
    %63 = llvm.load %5 : !llvm.ptr -> i32
    %64 = arith.cmpi ult, %62, %63 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %66 = arith.cmpi ne, %65, %c0_i32_22 : i32
    cf.cond_br %66, ^bb9, ^bb10
  ^bb10:  // pred: ^bb9
    cf.br ^bb8
  ^bb11:  // 4 preds: ^bb12, ^bb13, ^bb17, ^bb19
    %67 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_23 = arith.constant 3 : i32
    %68 = arith.andi %67, %c3_i32_23 : i32
    llvm.store %68, %2 : i32, !llvm.ptr
    %69 = llvm.load %9 : !llvm.ptr -> i32
    %70 = llvm.load %8 : !llvm.ptr -> i32
    %71 = arith.addi %69, %70 : i32
    llvm.store %71, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // 2 preds: ^bb6, ^bb15
    %72 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %73 = arith.cmpi slt, %72, %c1_i32_24 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_25 : i32
    cf.cond_br %75, ^bb11, ^bb18
  ^bb13:  // pred: ^bb6
    %76 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_26 = arith.constant 1 : i32
    %77 = arith.cmpi slt, %76, %c1_i32_26 : i32
    %78 = arith.extui %77 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %78, %c0_i32_27 : i32
    cf.cond_br %79, ^bb11, ^bb14
  ^bb14:  // pred: ^bb13
    %80 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i32_28 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %81 = arith.cmpi ule, %c3_i32_28, %c31_i32 : i32
    %82 = scf.if %81 -> (i32) {
      %161 = arith.shli %80, %c3_i32_28 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_50 = arith.constant 0 : i32
      scf.yield %c0_i32_50 : i32
    }
    llvm.store %82, %6 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %83 = arith.andi %82, %c24_i32 : i32
    llvm.store %83, %2 : i32, !llvm.ptr
    %84 = llvm.load %9 : !llvm.ptr -> i32
    %c-4_i32_29 = arith.constant -4 : i32
    %85 = arith.andi %84, %c-4_i32_29 : i32
    llvm.store %85, %10 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %86 = arith.addi %85, %c4_i32 : i32
    llvm.store %86, %1 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %87 = llvm.load %6 : !llvm.ptr -> i32
    %88 = arith.subi %c0_i32_30, %87 : i32
    %c24_i32_31 = arith.constant 24 : i32
    %89 = arith.andi %88, %c24_i32_31 : i32
    llvm.store %89, %4 : i32, !llvm.ptr
    %90 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64_32 : i64
    %93 = llvm.getelementptr %13[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %94, %6 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb15:  // no predecessors
    cf.br ^bb12
  ^bb16:  // 2 preds: ^bb14, ^bb16
    %95 = llvm.load %5 : !llvm.ptr -> i32
    %96 = llvm.load %6 : !llvm.ptr -> i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_33 = arith.constant 31 : i32
    %98 = arith.cmpi ule, %97, %c31_i32_33 : i32
    %99 = scf.if %98 -> (i32) {
      %161 = arith.shrui %96, %97 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_50 = arith.constant 0 : i32
      scf.yield %c0_i32_50 : i32
    }
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_34 : i64
    %103 = llvm.getelementptr %13[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %104, %6 : i32, !llvm.ptr
    %105 = llvm.load %4 : !llvm.ptr -> i32
    %c31_i32_35 = arith.constant 31 : i32
    %106 = arith.cmpi ule, %105, %c31_i32_35 : i32
    %107 = scf.if %106 -> (i32) {
      %161 = arith.shli %104, %105 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_50 = arith.constant 0 : i32
      scf.yield %c0_i32_50 : i32
    }
    %108 = arith.ori %99, %107 : i32
    %c0_i64_36 = arith.constant 0 : i64
    %109 = arith.extui %95 : i32 to i64
    %110 = arith.addi %109, %c0_i64_36 : i64
    %111 = llvm.getelementptr %13[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i32, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_37 = arith.constant 4 : i32
    %113 = arith.addi %112, %c4_i32_37 : i32
    llvm.store %113, %1 : i32, !llvm.ptr
    %114 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_38 = arith.constant 4 : i32
    %115 = arith.addi %114, %c4_i32_38 : i32
    llvm.store %115, %5 : i32, !llvm.ptr
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %117 = arith.cmpi ult, %115, %116 : i32
    %118 = arith.extui %117 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %119 = arith.cmpi ne, %118, %c0_i32_39 : i32
    cf.cond_br %119, ^bb16, ^bb17
  ^bb17:  // pred: ^bb16
    cf.br ^bb11
  ^bb18:  // pred: ^bb12
    %120 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %120, %1 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb19:  // pred: ^bb21
    cf.br ^bb11
  ^bb20:  // 2 preds: ^bb18, ^bb20
    %121 = llvm.load %5 : !llvm.ptr -> i32
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_40 : i64
    %125 = llvm.getelementptr %13[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_41 = arith.constant 0 : i64
    %127 = arith.extui %121 : i32 to i64
    %128 = arith.addi %127, %c0_i64_41 : i64
    %129 = llvm.getelementptr %13[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %129 {alignment = 1 : i64} : i32, !llvm.ptr
    %130 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_42 = arith.constant 4 : i32
    %131 = arith.addi %130, %c4_i32_42 : i32
    llvm.store %131, %1 : i32, !llvm.ptr
    %132 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_43 = arith.constant 4 : i32
    %133 = arith.addi %132, %c4_i32_43 : i32
    llvm.store %133, %5 : i32, !llvm.ptr
    %134 = llvm.load %3 : !llvm.ptr -> i32
    %135 = arith.cmpi ult, %133, %134 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_44 : i32
    cf.cond_br %137, ^bb20, ^bb21
  ^bb21:  // pred: ^bb20
    cf.br ^bb19
  ^bb22:  // 2 preds: ^bb3, ^bb24
    %138 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%138 : i32)
  ^bb23:  // pred: ^bb3
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %140 = llvm.load %2 : !llvm.ptr -> i32
    %141 = arith.addi %139, %140 : i32
    llvm.store %141, %5 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb24:  // pred: ^bb26
    cf.br ^bb22
  ^bb25:  // 2 preds: ^bb23, ^bb25
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_45 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_45 : i64
    %146 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i8
    %148 = arith.extui %147 : i8 to i32
    %c0_i64_46 = arith.constant 0 : i64
    %149 = arith.extui %142 : i32 to i64
    %150 = arith.addi %149, %c0_i64_46 : i64
    %151 = llvm.getelementptr %13[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = arith.trunci %148 : i32 to i8
    llvm.store volatile %152, %151 {alignment = 1 : i64} : i8, !llvm.ptr
    %153 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_47 = arith.constant 1 : i32
    %154 = arith.addi %153, %c1_i32_47 : i32
    llvm.store %154, %1 : i32, !llvm.ptr
    %155 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_48 = arith.constant 1 : i32
    %156 = arith.addi %155, %c1_i32_48 : i32
    llvm.store %156, %3 : i32, !llvm.ptr
    %157 = llvm.load %5 : !llvm.ptr -> i32
    %158 = arith.cmpi ult, %156, %157 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %160 = arith.cmpi ne, %159, %c0_i32_49 : i32
    cf.cond_br %160, ^bb25, ^bb26
  ^bb26:  // pred: ^bb25
    cf.br ^bb24
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
