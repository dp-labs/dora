---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
---
module {
  func.func @f0(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f22(%arg0, %1) : (!llvm.ptr, i32) -> ()
    %2 = llvm.load %0 : !llvm.ptr -> i32
    call @f23(%arg0, %2) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f1(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %c1048764_i32 = arith.constant 1048764 : i32
    %c5_i32 = arith.constant 5 : i32
    %3 = call @f73(%arg0, %2, %c1048764_i32, %c5_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func @f2(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %12 = arith.cmpi ult, %11, %c128_i32 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb6, ^bb7
  ^bb2(%15: i32):  // pred: ^bb3
    return %15 : i32
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %17 = arith.addi %16, %c16_i32_4 : i32
    llvm.store %17, %5 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c8_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    %28 = arith.subi %22, %27 : i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %30 = arith.cmpi uge, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_6 : i32
    cf.cond_br %32, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %35 = arith.andi %34, %c63_i32 : i32
    %c128_i32_7 = arith.constant 128 : i32
    %36 = arith.ori %35, %c128_i32_7 : i32
    %c13_i64 = arith.constant 13 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c13_i64 : i64
    %39 = llvm.getelementptr %8[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = arith.trunci %36 : i32 to i8
    llvm.store volatile %40, %39 {alignment = 1 : i64} : i8, !llvm.ptr
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32 = arith.constant 31 : i32
    %43 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %44 = scf.if %43 -> (i32) {
      %191 = arith.shrui %42, %c6_i32 : i32
      scf.yield %191 : i32
    } else {
      %c0_i32_47 = arith.constant 0 : i32
      scf.yield %c0_i32_47 : i32
    }
    %c192_i32 = arith.constant 192 : i32
    %45 = arith.ori %44, %c192_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %46 = arith.extui %41 : i32 to i64
    %47 = arith.addi %46, %c12_i64 : i64
    %48 = llvm.getelementptr %8[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = arith.trunci %45 : i32 to i8
    llvm.store volatile %49, %48 {alignment = 1 : i64} : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %50 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_8 = arith.constant 8 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c8_i64_8 : i64
    %53 = llvm.getelementptr %8[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %3 : i32, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64_9 : i64
    %58 = llvm.getelementptr %8[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi eq, %54, %59 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_10 : i32
    %63 = arith.extui %62 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_11 : i32
    cf.cond_br %64, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %c12_i64_13 = arith.constant 12 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c12_i64_13 : i64
    %68 = llvm.getelementptr %8[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_12, %68 {alignment = 1 : i64} : i32, !llvm.ptr
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %70 = arith.cmpi ult, %69, %c2048_i32 : i32
    %71 = arith.extui %70 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_14 : i32
    cf.cond_br %72, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %74 = arith.cmpi uge, %73, %c65536_i32 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_15 : i32
    cf.cond_br %76, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_16 = arith.constant 63 : i32
    %79 = arith.andi %78, %c63_i32_16 : i32
    %c128_i32_17 = arith.constant 128 : i32
    %80 = arith.ori %79, %c128_i32_17 : i32
    %c15_i64 = arith.constant 15 : i64
    %81 = arith.extui %77 : i32 to i64
    %82 = arith.addi %81, %c15_i64 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = arith.trunci %80 : i32 to i8
    llvm.store volatile %84, %83 {alignment = 1 : i64} : i8, !llvm.ptr
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %86 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_18 = arith.constant 6 : i32
    %c31_i32_19 = arith.constant 31 : i32
    %87 = arith.cmpi ule, %c6_i32_18, %c31_i32_19 : i32
    %88 = scf.if %87 -> (i32) {
      %191 = arith.shrui %86, %c6_i32_18 : i32
      scf.yield %191 : i32
    } else {
      %c0_i32_47 = arith.constant 0 : i32
      scf.yield %c0_i32_47 : i32
    }
    %c63_i32_20 = arith.constant 63 : i32
    %89 = arith.andi %88, %c63_i32_20 : i32
    %c128_i32_21 = arith.constant 128 : i32
    %90 = arith.ori %89, %c128_i32_21 : i32
    %c14_i64 = arith.constant 14 : i64
    %91 = arith.extui %85 : i32 to i64
    %92 = arith.addi %91, %c14_i64 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = arith.trunci %90 : i32 to i8
    llvm.store volatile %94, %93 {alignment = 1 : i64} : i8, !llvm.ptr
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %96 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_22 = arith.constant 31 : i32
    %97 = arith.cmpi ule, %c12_i32, %c31_i32_22 : i32
    %98 = scf.if %97 -> (i32) {
      %191 = arith.shrui %96, %c12_i32 : i32
      scf.yield %191 : i32
    } else {
      %c0_i32_47 = arith.constant 0 : i32
      scf.yield %c0_i32_47 : i32
    }
    %c63_i32_23 = arith.constant 63 : i32
    %99 = arith.andi %98, %c63_i32_23 : i32
    %c128_i32_24 = arith.constant 128 : i32
    %100 = arith.ori %99, %c128_i32_24 : i32
    %c13_i64_25 = arith.constant 13 : i64
    %101 = arith.extui %95 : i32 to i64
    %102 = arith.addi %101, %c13_i64_25 : i64
    %103 = llvm.getelementptr %8[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = arith.trunci %100 : i32 to i8
    llvm.store volatile %104, %103 {alignment = 1 : i64} : i8, !llvm.ptr
    %105 = llvm.load %2 : !llvm.ptr -> i32
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_26 = arith.constant 31 : i32
    %107 = arith.cmpi ule, %c18_i32, %c31_i32_26 : i32
    %108 = scf.if %107 -> (i32) {
      %191 = arith.shrui %106, %c18_i32 : i32
      scf.yield %191 : i32
    } else {
      %c0_i32_47 = arith.constant 0 : i32
      scf.yield %c0_i32_47 : i32
    }
    %c7_i32 = arith.constant 7 : i32
    %109 = arith.andi %108, %c7_i32 : i32
    %c240_i32 = arith.constant 240 : i32
    %110 = arith.ori %109, %c240_i32 : i32
    %c12_i64_27 = arith.constant 12 : i64
    %111 = arith.extui %105 : i32 to i64
    %112 = arith.addi %111, %c12_i64_27 : i64
    %113 = llvm.getelementptr %8[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = arith.trunci %110 : i32 to i8
    llvm.store volatile %114, %113 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_28 = arith.constant 63 : i32
    %117 = arith.andi %116, %c63_i32_28 : i32
    %c128_i32_29 = arith.constant 128 : i32
    %118 = arith.ori %117, %c128_i32_29 : i32
    %c14_i64_30 = arith.constant 14 : i64
    %119 = arith.extui %115 : i32 to i64
    %120 = arith.addi %119, %c14_i64_30 : i64
    %121 = llvm.getelementptr %8[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = arith.trunci %118 : i32 to i8
    llvm.store volatile %122, %121 {alignment = 1 : i64} : i8, !llvm.ptr
    %123 = llvm.load %2 : !llvm.ptr -> i32
    %124 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_31 = arith.constant 12 : i32
    %c31_i32_32 = arith.constant 31 : i32
    %125 = arith.cmpi ule, %c12_i32_31, %c31_i32_32 : i32
    %126 = scf.if %125 -> (i32) {
      %191 = arith.shrui %124, %c12_i32_31 : i32
      scf.yield %191 : i32
    } else {
      %c0_i32_47 = arith.constant 0 : i32
      scf.yield %c0_i32_47 : i32
    }
    %c224_i32 = arith.constant 224 : i32
    %127 = arith.ori %126, %c224_i32 : i32
    %c12_i64_33 = arith.constant 12 : i64
    %128 = arith.extui %123 : i32 to i64
    %129 = arith.addi %128, %c12_i64_33 : i64
    %130 = llvm.getelementptr %8[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = arith.trunci %127 : i32 to i8
    llvm.store volatile %131, %130 {alignment = 1 : i64} : i8, !llvm.ptr
    %132 = llvm.load %2 : !llvm.ptr -> i32
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_34 = arith.constant 6 : i32
    %c31_i32_35 = arith.constant 31 : i32
    %134 = arith.cmpi ule, %c6_i32_34, %c31_i32_35 : i32
    %135 = scf.if %134 -> (i32) {
      %191 = arith.shrui %133, %c6_i32_34 : i32
      scf.yield %191 : i32
    } else {
      %c0_i32_47 = arith.constant 0 : i32
      scf.yield %c0_i32_47 : i32
    }
    %c63_i32_36 = arith.constant 63 : i32
    %136 = arith.andi %135, %c63_i32_36 : i32
    %c128_i32_37 = arith.constant 128 : i32
    %137 = arith.ori %136, %c128_i32_37 : i32
    %c13_i64_38 = arith.constant 13 : i64
    %138 = arith.extui %132 : i32 to i64
    %139 = arith.addi %138, %c13_i64_38 : i64
    %140 = llvm.getelementptr %8[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = arith.trunci %137 : i32 to i8
    llvm.store volatile %141, %140 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %142 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %143 = arith.extui %142 : i32 to i64
    %144 = arith.addi %143, %c4_i64 : i64
    %145 = llvm.getelementptr %8[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %146 = llvm.load volatile %145 {alignment = 1 : i64} : !llvm.ptr -> i32
    %147 = llvm.load %3 : !llvm.ptr -> i32
    %148 = arith.addi %146, %147 : i32
    %149 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_39 = arith.constant 0 : i64
    %150 = arith.extui %148 : i32 to i64
    %151 = arith.addi %150, %c0_i64_39 : i64
    %152 = llvm.getelementptr %8[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %153 = arith.trunci %149 : i32 to i8
    llvm.store volatile %153, %152 {alignment = 1 : i64} : i8, !llvm.ptr
    %154 = llvm.load %0 : !llvm.ptr -> i32
    %155 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_40 = arith.constant 1 : i32
    %156 = arith.addi %155, %c1_i32_40 : i32
    %c8_i64_41 = arith.constant 8 : i64
    %157 = arith.extui %154 : i32 to i64
    %158 = arith.addi %157, %c8_i64_41 : i64
    %159 = llvm.getelementptr %8[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %156, %159 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %160 = llvm.load %0 : !llvm.ptr -> i32
    call @f18(%arg0, %160) : (!llvm.ptr, i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %161 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_42 = arith.constant 4 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c4_i64_42 : i64
    %164 = llvm.getelementptr %8[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    %166 = llvm.load %3 : !llvm.ptr -> i32
    %167 = arith.addi %165, %166 : i32
    %168 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_43 = arith.constant 12 : i32
    %169 = arith.addi %168, %c12_i32_43 : i32
    %170 = llvm.load %1 : !llvm.ptr -> i32
    %171 = call @f77(%arg0, %167, %169, %170) : (!llvm.ptr, i32, i32, i32) -> i32
    %172 = llvm.load %0 : !llvm.ptr -> i32
    %173 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_44 = arith.constant 8 : i64
    %174 = arith.extui %173 : i32 to i64
    %175 = arith.addi %174, %c8_i64_44 : i64
    %176 = llvm.getelementptr %8[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %177 = llvm.load volatile %176 {alignment = 1 : i64} : !llvm.ptr -> i32
    %178 = llvm.load %1 : !llvm.ptr -> i32
    %179 = arith.addi %177, %178 : i32
    %c8_i64_45 = arith.constant 8 : i64
    %180 = arith.extui %172 : i32 to i64
    %181 = arith.addi %180, %c8_i64_45 : i64
    %182 = llvm.getelementptr %8[%181] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %179, %182 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %183 = llvm.load %0 : !llvm.ptr -> i32
    %184 = llvm.load %3 : !llvm.ptr -> i32
    %185 = llvm.load %1 : !llvm.ptr -> i32
    call @f19(%arg0, %183, %184, %185) : (!llvm.ptr, i32, i32, i32) -> ()
    %186 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_46 = arith.constant 8 : i64
    %187 = arith.extui %186 : i32 to i64
    %188 = arith.addi %187, %c8_i64_46 : i64
    %189 = llvm.getelementptr %8[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %190 = llvm.load volatile %189 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %190, %3 : i32, !llvm.ptr
    cf.br ^bb13
  }
  func.func @f3(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = arith.subi %11, %16 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_3 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = call @f77(%arg0, %29, %30, %31) : (!llvm.ptr, i32, i32, i32) -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_4 = arith.constant 8 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c8_i64_4 : i64
    %37 = llvm.getelementptr %6[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %40 = arith.addi %38, %39 : i32
    %c8_i64_5 = arith.constant 8 : i64
    %41 = arith.extui %33 : i32 to i64
    %42 = arith.addi %41, %c8_i64_5 : i64
    %43 = llvm.getelementptr %6[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_6 : i32)
  ^bb4:  // pred: ^bb1
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %2 : !llvm.ptr -> i32
    call @f19(%arg0, %44, %45, %46) : (!llvm.ptr, i32, i32, i32) -> ()
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_7 = arith.constant 8 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c8_i64_7 : i64
    %50 = llvm.getelementptr %6[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %51, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f4(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c4_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c8_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %16 = call @f74(%arg0, %9, %14, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func public @fibonacci(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %6 = arith.cmpi ne, %5, %c0_i32_4 : i32
    cf.cond_br %6, ^bb4, ^bb5
  ^bb2(%7: i32):  // pred: ^bb3
    return %7 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb6
    %8 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%8 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_5 = arith.constant 1 : i32
    llvm.store %c1_i32_5, %2 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    llvm.store %c0_i32_6, %3 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb5:  // pred: ^bb1
    %c0_i32_7 = arith.constant 0 : i32
    llvm.store %c0_i32_7, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb8
    cf.br ^bb3
  ^bb7:  // 2 preds: ^bb4, ^bb7
    %9 = llvm.load %3 : !llvm.ptr -> i32
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %11 = arith.addi %9, %10 : i32
    llvm.store %11, %4 : i32, !llvm.ptr
    %12 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %12, %1 : i32, !llvm.ptr
    %13 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %13, %3 : i32, !llvm.ptr
    %14 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %14, %2 : i32, !llvm.ptr
    %15 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %16 = arith.addi %15, %c-1_i32 : i32
    llvm.store %16, %0 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_8 : i32
    cf.cond_br %17, ^bb7, ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb6
  }
  func.func public @call(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %2 : !llvm.ptr -> i32
    %c112_i32 = arith.constant 112 : i32
    %7 = arith.subi %6, %c112_i32 : i32
    llvm.store %7, %0 : i32, !llvm.ptr
    llvm.store %7, %2 : i32, !llvm.ptr
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c55_i32 = arith.constant 55 : i32
    %c12_i64 = arith.constant 12 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c12_i64 : i64
    %11 = llvm.getelementptr %5[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c55_i32, %11 {alignment = 1 : i64} : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %c72_i64 = arith.constant 72 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c72_i64 : i64
    %15 = llvm.getelementptr %5[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_0, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c64_i64 = arith.constant 64 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c64_i64 : i64
    %19 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %19 {alignment = 1 : i64} : i64, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c108_i64 = arith.constant 108 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c108_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %24, %23 {alignment = 1 : i64} : i8, !llvm.ptr
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %c92_i64 = arith.constant 92 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c92_i64 : i64
    %28 = llvm.getelementptr %5[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %28 {alignment = 1 : i64} : i32, !llvm.ptr
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_1 = arith.constant 0 : i32
    %c104_i64 = arith.constant 104 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c104_i64 : i64
    %32 = llvm.getelementptr %5[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_1, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c1048576_i32 = arith.constant 1048576 : i32
    %c100_i64 = arith.constant 100 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c100_i64 : i64
    %36 = llvm.getelementptr %5[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048576_i32, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %c84_i64 = arith.constant 84 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c84_i64 : i64
    %40 = llvm.getelementptr %5[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_2, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %c76_i64 = arith.constant 76 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c76_i64 : i64
    %44 = llvm.getelementptr %5[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_3, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %47 = arith.addi %46, %c64_i32 : i32
    %c96_i64 = arith.constant 96 : i64
    %48 = arith.extui %45 : i32 to i64
    %49 = arith.addi %48, %c96_i64 : i64
    %50 = llvm.getelementptr %5[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i32, !llvm.ptr
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %52 = arith.addi %51, %c12_i32 : i32
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %c76_i32 = arith.constant 76 : i32
    %54 = arith.addi %53, %c76_i32 : i32
    %55 = call @f65(%arg0, %52, %54) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %56 = arith.cmpi eq, %55, %c0_i32_4 : i32
    %57 = arith.extui %56 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_5 : i32
    cf.cond_br %58, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %59 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %60 = arith.addi %59, %c48_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %61 = arith.addi %60, %c8_i32 : i32
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %c64_i32_6 = arith.constant 64 : i32
    %63 = arith.addi %62, %c64_i32_6 : i32
    %c8_i32_7 = arith.constant 8 : i32
    %64 = arith.addi %63, %c8_i32_7 : i32
    %c0_i64 = arith.constant 0 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c0_i64 : i64
    %67 = llvm.getelementptr %5[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %69 = arith.extui %61 : i32 to i64
    %70 = arith.addi %69, %c0_i64_8 : i64
    %71 = llvm.getelementptr %5[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %68, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %0 : !llvm.ptr -> i32
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c64_i64_9 = arith.constant 64 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c64_i64_9 : i64
    %76 = llvm.getelementptr %5[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %78 = arith.extui %72 : i32 to i64
    %79 = arith.addi %78, %c48_i64 : i64
    %80 = llvm.getelementptr %5[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %80 {alignment = 1 : i64} : i64, !llvm.ptr
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_10 = arith.constant 1 : i32
    %c44_i64 = arith.constant 44 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c44_i64 : i64
    %84 = llvm.getelementptr %5[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_10, %84 {alignment = 1 : i64} : i32, !llvm.ptr
    %85 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %c20_i64 = arith.constant 20 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c20_i64 : i64
    %88 = llvm.getelementptr %5[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_11, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %89 = llvm.load %0 : !llvm.ptr -> i32
    %c1048792_i32 = arith.constant 1048792 : i32
    %c16_i64 = arith.constant 16 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c16_i64 : i64
    %92 = llvm.getelementptr %5[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048792_i32, %92 {alignment = 1 : i64} : i32, !llvm.ptr
    %93 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c28_i64 = arith.constant 28 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c28_i64 : i64
    %96 = llvm.getelementptr %5[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %96 {alignment = 1 : i64} : i64, !llvm.ptr
    %97 = llvm.load %0 : !llvm.ptr -> i32
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32_12 = arith.constant 48 : i32
    %99 = arith.addi %98, %c48_i32_12 : i32
    %c40_i64 = arith.constant 40 : i64
    %100 = arith.extui %97 : i32 to i64
    %101 = arith.addi %100, %c40_i64 : i64
    %102 = llvm.getelementptr %5[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %99, %102 {alignment = 1 : i64} : i32, !llvm.ptr
    %103 = llvm.load %0 : !llvm.ptr -> i32
    %104 = llvm.load %0 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %105 = arith.addi %104, %c40_i32 : i32
    %c24_i64 = arith.constant 24 : i64
    %106 = arith.extui %103 : i32 to i64
    %107 = arith.addi %106, %c24_i64 : i64
    %108 = llvm.getelementptr %5[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %108 {alignment = 1 : i64} : i32, !llvm.ptr
    %109 = llvm.load %0 : !llvm.ptr -> i32
    %c76_i32_13 = arith.constant 76 : i32
    %110 = arith.addi %109, %c76_i32_13 : i32
    %111 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %112 = arith.addi %111, %c16_i32 : i32
    call @f59(%arg0, %110, %112) : (!llvm.ptr, i32, i32) -> ()
    %113 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32_14 = arith.constant 48 : i32
    %114 = arith.addi %113, %c48_i32_14 : i32
    call @f22(%arg0, %114) : (!llvm.ptr, i32) -> ()
    %115 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32_15 = arith.constant 48 : i32
    %116 = arith.addi %115, %c48_i32_15 : i32
    call @f23(%arg0, %116) : (!llvm.ptr, i32) -> ()
    %117 = llvm.load %0 : !llvm.ptr -> i32
    %c76_i32_16 = arith.constant 76 : i32
    %118 = arith.addi %117, %c76_i32_16 : i32
    call @f8(%arg0, %118) : (!llvm.ptr, i32) -> ()
    %119 = llvm.load %0 : !llvm.ptr -> i32
    %c112_i32_17 = arith.constant 112 : i32
    %120 = arith.addi %119, %c112_i32_17 : i32
    llvm.store %120, %2 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1048616_i32 = arith.constant 1048616 : i32
    %c55_i32_18 = arith.constant 55 : i32
    %121 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_19 = arith.constant 16 : i32
    %122 = arith.addi %121, %c16_i32_19 : i32
    %c1048600_i32 = arith.constant 1048600 : i32
    %c1048748_i32 = arith.constant 1048748 : i32
    call @f67(%arg0, %c1048616_i32, %c55_i32_18, %122, %c1048600_i32, %c1048748_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f7(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @f48(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f8(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[56] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %4[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c4_i64 : i64
    %12 = llvm.getelementptr %3[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c8_i64 : i64
    %17 = llvm.getelementptr %3[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.call %6(%8, %13, %18) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %20 = llvm.load %0 : !llvm.ptr -> i32
    call @f22(%arg0, %20) : (!llvm.ptr, i32) -> ()
    %21 = llvm.load %0 : !llvm.ptr -> i32
    call @f23(%arg0, %21) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f9(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1048800_i32 = arith.constant 1048800 : i32
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = call @f12(%arg0, %c1048800_i32, %2, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f10(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f11(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1048800_i32 = arith.constant 1048800 : i32
    %4 = llvm.load %2 : !llvm.ptr -> i32
    %5 = llvm.load %3 : !llvm.ptr -> i32
    %6 = call @f12(%arg0, %c1048800_i32, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %6, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi eq, %6, %c0_i32 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32_3 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: i32):  // pred: ^bb3
    return %10 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%11 : i32)
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %2 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = arith.cmpi ult, %16, %17 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_4 : i32
    %21 = arith.select %20, %14, %15 : i32
    %22 = call @f77(%arg0, %12, %13, %21) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3
  }
  func.func @f12(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %3 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1049500_i64 = arith.constant 1049500 : i64
    %9 = arith.extui %c0_i32_6 : i32 to i64
    %10 = arith.addi %9, %c1049500_i64 : i64
    %11 = llvm.getelementptr %8[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load volatile %11 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %12, %4 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_7 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: i32):  // pred: ^bb5
    return %14 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %15 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = arith.subi %c0_i32_8, %16 : i32
    %18 = arith.andi %15, %17 : i32
    llvm.store %18, %4 : i32, !llvm.ptr
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %20 = arith.cmpi ult, %18, %19 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_9 : i32
    cf.cond_br %22, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c0_i32_10 = arith.constant 0 : i32
    %23 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    llvm.store %23, %5 : i32, !llvm.ptr
    %c0_i32_11 = arith.constant 0 : i32
    %c0_i32_12 = arith.constant 0 : i32
    %c1049536_i32 = arith.constant 1049536 : i32
    %24 = arith.subi %c0_i32_12, %c1049536_i32 : i32
    llvm.store %24, %4 : i32, !llvm.ptr
    %c1049500_i64_13 = arith.constant 1049500 : i64
    %25 = arith.extui %c0_i32_11 : i32 to i64
    %26 = arith.addi %25, %c1049500_i64_13 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %c1_i32_15 = arith.constant 1 : i32
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32 = arith.constant 31 : i32
    %29 = arith.cmpi ule, %c16_i32, %c31_i32 : i32
    %30 = scf.if %29 -> (i32) {
      %81 = arith.shli %28, %c16_i32 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_38 = arith.constant 0 : i32
      scf.yield %c0_i32_38 : i32
    }
    %31 = arith.subi %c1_i32_15, %30 : i32
    %c1049504_i64 = arith.constant 1049504 : i64
    %32 = arith.extui %c0_i32_14 : i32 to i64
    %33 = arith.addi %32, %c1049504_i64 : i64
    %34 = llvm.getelementptr %8[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb7, ^bb8
    %35 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb2(%35 : i32)
  ^bb6:  // pred: ^bb3
    %c0_i32_16 = arith.constant 0 : i32
    llvm.store %c0_i32_16, %3 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %c1049504_i64_18 = arith.constant 1049504 : i64
    %36 = arith.extui %c0_i32_17 : i32 to i64
    %37 = arith.addi %36, %c1049504_i64_18 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %39, %1 : i32, !llvm.ptr
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %42 = arith.subi %40, %41 : i32
    llvm.store %42, %2 : i32, !llvm.ptr
    %c1_i32_19 = arith.constant 1 : i32
    %43 = arith.addi %42, %c1_i32_19 : i32
    llvm.store %43, %5 : i32, !llvm.ptr
    %44 = arith.cmpi ule, %39, %43 : i32
    %45 = arith.extui %44 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_20 : i32
    cf.cond_br %46, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb9
    %c0_i32_21 = arith.constant 0 : i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c1049500_i64_22 = arith.constant 1049500 : i64
    %48 = arith.extui %c0_i32_21 : i32 to i64
    %49 = arith.addi %48, %c1049500_i64_22 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_23 = arith.constant 0 : i32
    %51 = llvm.load %4 : !llvm.ptr -> i32
    %52 = arith.subi %c0_i32_23, %51 : i32
    llvm.store %52, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb6
    %c0_i32_24 = arith.constant 0 : i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %54 = llvm.load %5 : !llvm.ptr -> i32
    %55 = arith.subi %53, %54 : i32
    llvm.store %55, %5 : i32, !llvm.ptr
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = arith.cmpi ugt, %56, %57 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_25 : i32
    %61 = arith.select %60, %c0_i32_24, %55 : i32
    %c-1_i32 = arith.constant -1 : i32
    %62 = arith.addi %61, %c-1_i32 : i32
    %c16_i32_26 = arith.constant 16 : i32
    %c31_i32_27 = arith.constant 31 : i32
    %63 = arith.cmpi ule, %c16_i32_26, %c31_i32_27 : i32
    %64 = scf.if %63 -> (i32) {
      %81 = arith.shrui %62, %c16_i32_26 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_38 = arith.constant 0 : i32
      scf.yield %c0_i32_38 : i32
    }
    %c1_i32_28 = arith.constant 1 : i32
    %65 = arith.addi %64, %c1_i32_28 : i32
    llvm.store %65, %1 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    %66 = call @dora_fn_wasm_memory_grow(%arg0, %65, %c0_i32_29) : (!llvm.ptr, i32, i32) -> i32
    %c-1_i32_30 = arith.constant -1 : i32
    %67 = arith.cmpi eq, %66, %c-1_i32_30 : i32
    %68 = arith.extui %67 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_31 : i32
    cf.cond_br %69, ^bb5, ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i32_32 = arith.constant 0 : i32
    %c0_i32_33 = arith.constant 0 : i32
    %c1049504_i64_34 = arith.constant 1049504 : i64
    %70 = arith.extui %c0_i32_33 : i32 to i64
    %71 = arith.addi %70, %c1049504_i64_34 : i64
    %72 = llvm.getelementptr %8[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_35 = arith.constant 16 : i32
    %c31_i32_36 = arith.constant 31 : i32
    %75 = arith.cmpi ule, %c16_i32_35, %c31_i32_36 : i32
    %76 = scf.if %75 -> (i32) {
      %81 = arith.shli %74, %c16_i32_35 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_38 = arith.constant 0 : i32
      scf.yield %c0_i32_38 : i32
    }
    %77 = arith.subi %73, %76 : i32
    %c1049504_i64_37 = arith.constant 1049504 : i64
    %78 = arith.extui %c0_i32_32 : i32 to i64
    %79 = arith.addi %78, %c1049504_i64_37 : i64
    %80 = llvm.getelementptr %8[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %80 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  }
  func.func @f13(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1048800_i32 = arith.constant 1048800 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f66(%arg0, %2, %c1048800_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f14(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f22(%arg0, %1) : (!llvm.ptr, i32) -> ()
    %2 = llvm.load %0 : !llvm.ptr -> i32
    call @f23(%arg0, %2) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f15(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @f16(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func @f16(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %12 = arith.cmpi ult, %11, %c128_i32 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb6, ^bb7
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %16 = arith.addi %15, %c16_i32_4 : i32
    llvm.store %16, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %8[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c8_i64 : i64
    %25 = llvm.getelementptr %8[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %26, %3 : i32, !llvm.ptr
    %27 = arith.subi %21, %26 : i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = arith.cmpi uge, %27, %28 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_5 : i32
    cf.cond_br %31, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %34 = arith.andi %33, %c63_i32 : i32
    %c128_i32_6 = arith.constant 128 : i32
    %35 = arith.ori %34, %c128_i32_6 : i32
    %c13_i64 = arith.constant 13 : i64
    %36 = arith.extui %32 : i32 to i64
    %37 = arith.addi %36, %c13_i64 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = arith.trunci %35 : i32 to i8
    llvm.store volatile %39, %38 {alignment = 1 : i64} : i8, !llvm.ptr
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32 = arith.constant 31 : i32
    %42 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %43 = scf.if %42 -> (i32) {
      %190 = arith.shrui %41, %c6_i32 : i32
      scf.yield %190 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c192_i32 = arith.constant 192 : i32
    %44 = arith.ori %43, %c192_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %45 = arith.extui %40 : i32 to i64
    %46 = arith.addi %45, %c12_i64 : i64
    %47 = llvm.getelementptr %8[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = arith.trunci %44 : i32 to i8
    llvm.store volatile %48, %47 {alignment = 1 : i64} : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_7 = arith.constant 8 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c8_i64_7 : i64
    %52 = llvm.getelementptr %8[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %53, %3 : i32, !llvm.ptr
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c0_i64_8 : i64
    %57 = llvm.getelementptr %8[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    %59 = arith.cmpi eq, %53, %58 : i32
    %60 = arith.extui %59 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %61 = arith.cmpi eq, %60, %c0_i32_9 : i32
    %62 = arith.extui %61 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %63 = arith.cmpi ne, %62, %c0_i32_10 : i32
    cf.cond_br %63, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %c12_i64_12 = arith.constant 12 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c12_i64_12 : i64
    %67 = llvm.getelementptr %8[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_11, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %69 = arith.cmpi ult, %68, %c2048_i32 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_13 : i32
    cf.cond_br %71, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %73 = arith.cmpi uge, %72, %c65536_i32 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_14 : i32
    cf.cond_br %75, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_15 = arith.constant 63 : i32
    %78 = arith.andi %77, %c63_i32_15 : i32
    %c128_i32_16 = arith.constant 128 : i32
    %79 = arith.ori %78, %c128_i32_16 : i32
    %c15_i64 = arith.constant 15 : i64
    %80 = arith.extui %76 : i32 to i64
    %81 = arith.addi %80, %c15_i64 : i64
    %82 = llvm.getelementptr %8[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %83 = arith.trunci %79 : i32 to i8
    llvm.store volatile %83, %82 {alignment = 1 : i64} : i8, !llvm.ptr
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_17 = arith.constant 6 : i32
    %c31_i32_18 = arith.constant 31 : i32
    %86 = arith.cmpi ule, %c6_i32_17, %c31_i32_18 : i32
    %87 = scf.if %86 -> (i32) {
      %190 = arith.shrui %85, %c6_i32_17 : i32
      scf.yield %190 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c63_i32_19 = arith.constant 63 : i32
    %88 = arith.andi %87, %c63_i32_19 : i32
    %c128_i32_20 = arith.constant 128 : i32
    %89 = arith.ori %88, %c128_i32_20 : i32
    %c14_i64 = arith.constant 14 : i64
    %90 = arith.extui %84 : i32 to i64
    %91 = arith.addi %90, %c14_i64 : i64
    %92 = llvm.getelementptr %8[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = arith.trunci %89 : i32 to i8
    llvm.store volatile %93, %92 {alignment = 1 : i64} : i8, !llvm.ptr
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_21 = arith.constant 31 : i32
    %96 = arith.cmpi ule, %c12_i32, %c31_i32_21 : i32
    %97 = scf.if %96 -> (i32) {
      %190 = arith.shrui %95, %c12_i32 : i32
      scf.yield %190 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c63_i32_22 = arith.constant 63 : i32
    %98 = arith.andi %97, %c63_i32_22 : i32
    %c128_i32_23 = arith.constant 128 : i32
    %99 = arith.ori %98, %c128_i32_23 : i32
    %c13_i64_24 = arith.constant 13 : i64
    %100 = arith.extui %94 : i32 to i64
    %101 = arith.addi %100, %c13_i64_24 : i64
    %102 = llvm.getelementptr %8[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = arith.trunci %99 : i32 to i8
    llvm.store volatile %103, %102 {alignment = 1 : i64} : i8, !llvm.ptr
    %104 = llvm.load %2 : !llvm.ptr -> i32
    %105 = llvm.load %1 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_25 = arith.constant 31 : i32
    %106 = arith.cmpi ule, %c18_i32, %c31_i32_25 : i32
    %107 = scf.if %106 -> (i32) {
      %190 = arith.shrui %105, %c18_i32 : i32
      scf.yield %190 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c7_i32 = arith.constant 7 : i32
    %108 = arith.andi %107, %c7_i32 : i32
    %c240_i32 = arith.constant 240 : i32
    %109 = arith.ori %108, %c240_i32 : i32
    %c12_i64_26 = arith.constant 12 : i64
    %110 = arith.extui %104 : i32 to i64
    %111 = arith.addi %110, %c12_i64_26 : i64
    %112 = llvm.getelementptr %8[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = arith.trunci %109 : i32 to i8
    llvm.store volatile %113, %112 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %115 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_27 = arith.constant 63 : i32
    %116 = arith.andi %115, %c63_i32_27 : i32
    %c128_i32_28 = arith.constant 128 : i32
    %117 = arith.ori %116, %c128_i32_28 : i32
    %c14_i64_29 = arith.constant 14 : i64
    %118 = arith.extui %114 : i32 to i64
    %119 = arith.addi %118, %c14_i64_29 : i64
    %120 = llvm.getelementptr %8[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = arith.trunci %117 : i32 to i8
    llvm.store volatile %121, %120 {alignment = 1 : i64} : i8, !llvm.ptr
    %122 = llvm.load %2 : !llvm.ptr -> i32
    %123 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_30 = arith.constant 12 : i32
    %c31_i32_31 = arith.constant 31 : i32
    %124 = arith.cmpi ule, %c12_i32_30, %c31_i32_31 : i32
    %125 = scf.if %124 -> (i32) {
      %190 = arith.shrui %123, %c12_i32_30 : i32
      scf.yield %190 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c224_i32 = arith.constant 224 : i32
    %126 = arith.ori %125, %c224_i32 : i32
    %c12_i64_32 = arith.constant 12 : i64
    %127 = arith.extui %122 : i32 to i64
    %128 = arith.addi %127, %c12_i64_32 : i64
    %129 = llvm.getelementptr %8[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = arith.trunci %126 : i32 to i8
    llvm.store volatile %130, %129 {alignment = 1 : i64} : i8, !llvm.ptr
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %132 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_33 = arith.constant 6 : i32
    %c31_i32_34 = arith.constant 31 : i32
    %133 = arith.cmpi ule, %c6_i32_33, %c31_i32_34 : i32
    %134 = scf.if %133 -> (i32) {
      %190 = arith.shrui %132, %c6_i32_33 : i32
      scf.yield %190 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c63_i32_35 = arith.constant 63 : i32
    %135 = arith.andi %134, %c63_i32_35 : i32
    %c128_i32_36 = arith.constant 128 : i32
    %136 = arith.ori %135, %c128_i32_36 : i32
    %c13_i64_37 = arith.constant 13 : i64
    %137 = arith.extui %131 : i32 to i64
    %138 = arith.addi %137, %c13_i64_37 : i64
    %139 = llvm.getelementptr %8[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = arith.trunci %136 : i32 to i8
    llvm.store volatile %140, %139 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %141 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c4_i64 : i64
    %144 = llvm.getelementptr %8[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %145 = llvm.load volatile %144 {alignment = 1 : i64} : !llvm.ptr -> i32
    %146 = llvm.load %3 : !llvm.ptr -> i32
    %147 = arith.addi %145, %146 : i32
    %148 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_38 = arith.constant 0 : i64
    %149 = arith.extui %147 : i32 to i64
    %150 = arith.addi %149, %c0_i64_38 : i64
    %151 = llvm.getelementptr %8[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = arith.trunci %148 : i32 to i8
    llvm.store volatile %152, %151 {alignment = 1 : i64} : i8, !llvm.ptr
    %153 = llvm.load %0 : !llvm.ptr -> i32
    %154 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_39 = arith.constant 1 : i32
    %155 = arith.addi %154, %c1_i32_39 : i32
    %c8_i64_40 = arith.constant 8 : i64
    %156 = arith.extui %153 : i32 to i64
    %157 = arith.addi %156, %c8_i64_40 : i64
    %158 = llvm.getelementptr %8[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %155, %158 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %159 = llvm.load %0 : !llvm.ptr -> i32
    call @f18(%arg0, %159) : (!llvm.ptr, i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %160 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_41 = arith.constant 4 : i64
    %161 = arith.extui %160 : i32 to i64
    %162 = arith.addi %161, %c4_i64_41 : i64
    %163 = llvm.getelementptr %8[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = llvm.load volatile %163 {alignment = 1 : i64} : !llvm.ptr -> i32
    %165 = llvm.load %3 : !llvm.ptr -> i32
    %166 = arith.addi %164, %165 : i32
    %167 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_42 = arith.constant 12 : i32
    %168 = arith.addi %167, %c12_i32_42 : i32
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %170 = call @f77(%arg0, %166, %168, %169) : (!llvm.ptr, i32, i32, i32) -> i32
    %171 = llvm.load %0 : !llvm.ptr -> i32
    %172 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_43 = arith.constant 8 : i64
    %173 = arith.extui %172 : i32 to i64
    %174 = arith.addi %173, %c8_i64_43 : i64
    %175 = llvm.getelementptr %8[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = llvm.load volatile %175 {alignment = 1 : i64} : !llvm.ptr -> i32
    %177 = llvm.load %1 : !llvm.ptr -> i32
    %178 = arith.addi %176, %177 : i32
    %c8_i64_44 = arith.constant 8 : i64
    %179 = arith.extui %171 : i32 to i64
    %180 = arith.addi %179, %c8_i64_44 : i64
    %181 = llvm.getelementptr %8[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %178, %181 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %182 = llvm.load %0 : !llvm.ptr -> i32
    %183 = llvm.load %3 : !llvm.ptr -> i32
    %184 = llvm.load %1 : !llvm.ptr -> i32
    call @f19(%arg0, %182, %183, %184) : (!llvm.ptr, i32, i32, i32) -> ()
    %185 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_45 = arith.constant 8 : i64
    %186 = arith.extui %185 : i32 to i64
    %187 = arith.addi %186, %c8_i64_45 : i64
    %188 = llvm.getelementptr %8[%187] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %189 = llvm.load volatile %188 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %189, %3 : i32, !llvm.ptr
    cf.br ^bb13
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = arith.subi %11, %16 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_3 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = call @f77(%arg0, %29, %30, %31) : (!llvm.ptr, i32, i32, i32) -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_4 = arith.constant 8 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c8_i64_4 : i64
    %37 = llvm.getelementptr %6[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %40 = arith.addi %38, %39 : i32
    %c8_i64_5 = arith.constant 8 : i64
    %41 = arith.extui %33 : i32 to i64
    %42 = arith.addi %41, %c8_i64_5 : i64
    %43 = llvm.getelementptr %6[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_6 : i32)
  ^bb4:  // pred: ^bb1
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %2 : !llvm.ptr -> i32
    call @f19(%arg0, %44, %45, %46) : (!llvm.ptr, i32, i32, i32) -> ()
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_7 = arith.constant 8 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c8_i64_7 : i64
    %50 = llvm.getelementptr %6[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %51, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %8 = arith.subi %7, %c16_i32 : i32
    llvm.store %8, %1 : i32, !llvm.ptr
    llvm.store %8, %3 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %10 = arith.addi %9, %c8_i32 : i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    call @f21(%arg0, %10, %11, %16, %c1_i32_1) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c8_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %0 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %22 = arith.cmpi eq, %21, %c-2147483647_i32 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_2 : i32
    cf.cond_br %24, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_3 = arith.constant 16 : i32
    %26 = arith.addi %25, %c16_i32_3 : i32
    llvm.store %26, %3 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c12_i64 : i64
    %31 = llvm.getelementptr %6[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f55(%arg0, %27, %32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f19(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %3 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %12 = arith.addi %11, %c8_i32 : i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %2 : !llvm.ptr -> i32
    call @f21(%arg0, %12, %13, %14, %15) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %16 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %19 = llvm.getelementptr %8[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load volatile %19 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %20, %2 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %21 = arith.cmpi eq, %20, %c-2147483647_i32 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_3 : i32
    cf.cond_br %23, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %25 = arith.addi %24, %c16_i32_4 : i32
    llvm.store %25, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c12_i64 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f55(%arg0, %26, %31) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f20(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_5 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_6 : i32
    cf.cond_br %12, ^bb8, ^bb9
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb19
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %13 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %17 = llvm.getelementptr %8[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %14, %17 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb7, ^bb8, ^bb18
    %c1_i32_7 = arith.constant 1 : i32
    llvm.store %c1_i32_7, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb6, ^bb11, ^bb14
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_8 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_9 : i32
    cf.cond_br %21, ^bb18, ^bb19
  ^bb6:  // 2 preds: ^bb12, ^bb15
    %22 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %22, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb9
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_10, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb8:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %c4_i64_12 = arith.constant 4 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c4_i64_12 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_11, %30 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb9:  // pred: ^bb1
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %32 = arith.cmpi sle, %31, %c-1_i32 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_13 : i32
    cf.cond_br %34, ^bb7, ^bb10
  ^bb10:  // pred: ^bb9
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_14 = arith.constant 4 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c4_i64_14 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %39, %c0_i32_15 : i32
    %41 = arith.extui %40 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_16 : i32
    cf.cond_br %42, ^bb12, ^bb13
  ^bb11:  // 2 preds: ^bb16, ^bb17
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = call @f9(%arg0, %43, %44) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %45, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb12:  // pred: ^bb10
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %47 = arith.cmpi eq, %46, %c0_i32_17 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_18 : i32
    cf.cond_br %49, ^bb6, ^bb17
  ^bb13:  // pred: ^bb10
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c8_i64 : i64
    %53 = llvm.getelementptr %8[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %5 : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_19 : i32
    cf.cond_br %55, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c0_i64_20 : i64
    %59 = llvm.getelementptr %8[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i32
    %61 = llvm.load %5 : !llvm.ptr -> i32
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %63 = llvm.load %2 : !llvm.ptr -> i32
    %64 = call @f11(%arg0, %60, %61, %62, %63) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %64, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb15:  // pred: ^bb13
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %66 = arith.cmpi eq, %65, %c0_i32_21 : i32
    %67 = arith.extui %66 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %68 = arith.cmpi ne, %67, %c0_i32_22 : i32
    cf.cond_br %68, ^bb6, ^bb16
  ^bb16:  // pred: ^bb15
    %c0_i32_23 = arith.constant 0 : i32
    %c1049497_i64 = arith.constant 1049497 : i64
    %69 = arith.extui %c0_i32_23 : i32 to i64
    %70 = arith.addi %69, %c1049497_i64 : i64
    %71 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i8
    %73 = arith.extui %72 : i8 to i32
    cf.br ^bb11
  ^bb17:  // pred: ^bb12
    %c0_i32_24 = arith.constant 0 : i32
    %c1049497_i64_25 = arith.constant 1049497 : i64
    %74 = arith.extui %c0_i32_24 : i32 to i64
    %75 = arith.addi %74, %c1049497_i64_25 : i64
    %76 = llvm.getelementptr %8[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i8
    %78 = arith.extui %77 : i8 to i32
    cf.br ^bb11
  ^bb18:  // pred: ^bb5
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %80 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_26 = arith.constant 8 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c8_i64_26 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    %84 = llvm.load %0 : !llvm.ptr -> i32
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_27 = arith.constant 4 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c4_i64_27 : i64
    %88 = llvm.getelementptr %8[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb19:  // pred: ^bb5
    %89 = llvm.load %0 : !llvm.ptr -> i32
    %90 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_28 = arith.constant 8 : i64
    %91 = arith.extui %89 : i32 to i64
    %92 = arith.addi %91, %c8_i64_28 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %93 {alignment = 1 : i64} : i32, !llvm.ptr
    %94 = llvm.load %0 : !llvm.ptr -> i32
    %95 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_29 = arith.constant 4 : i64
    %96 = arith.extui %94 : i32 to i64
    %97 = arith.addi %96, %c4_i64_29 : i64
    %98 = llvm.getelementptr %8[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    llvm.store %c0_i32_30, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f21(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %13 = arith.subi %12, %c32_i32 : i32
    llvm.store %13, %4 : i32, !llvm.ptr
    llvm.store %13, %8 : i32, !llvm.ptr
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %16 = arith.addi %14, %15 : i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %18 = arith.cmpi uge, %16, %17 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_6 : i32
    cf.cond_br %20, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb5, ^bb9, ^bb10
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %23 = arith.extui %21 : i32 to i64
    %24 = arith.addi %23, %c4_i64 : i64
    %25 = llvm.getelementptr %11[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %28 = arith.extui %26 : i32 to i64
    %29 = arith.addi %28, %c0_i64 : i64
    %30 = llvm.getelementptr %11[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %27, %30 {alignment = 1 : i64} : i32, !llvm.ptr
    %31 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_7 = arith.constant 32 : i32
    %32 = arith.addi %31, %c32_i32_7 : i32
    llvm.store %32, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_8 = arith.constant 1 : i32
    llvm.store %c1_i32_8, %5 : i32, !llvm.ptr
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c0_i64_9 : i64
    %36 = llvm.getelementptr %11[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %37, %2 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %38 = arith.cmpi ule, %c1_i32_10, %c31_i32 : i32
    %39 = scf.if %38 -> (i32) {
      %114 = arith.shli %37, %c1_i32_10 : i32
      scf.yield %114 : i32
    } else {
      %c0_i32_25 = arith.constant 0 : i32
      scf.yield %c0_i32_25 : i32
    }
    llvm.store %39, %6 : i32, !llvm.ptr
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %41 = llvm.load %6 : !llvm.ptr -> i32
    %42 = llvm.load %3 : !llvm.ptr -> i32
    %43 = arith.cmpi ugt, %41, %42 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_11 : i32
    %46 = arith.select %45, %39, %40 : i32
    llvm.store %46, %3 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_12 = arith.constant 8 : i32
    %48 = arith.cmpi ugt, %47, %c8_i32_12 : i32
    %49 = arith.extui %48 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_13 : i32
    %51 = arith.select %50, %46, %c8_i32 : i32
    llvm.store %51, %3 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %52 = arith.xori %51, %c-1_i32 : i32
    %c31_i32_14 = arith.constant 31 : i32
    %c31_i32_15 = arith.constant 31 : i32
    %53 = arith.cmpi ule, %c31_i32_14, %c31_i32_15 : i32
    %54 = scf.if %53 -> (i32) {
      %114 = arith.shrui %52, %c31_i32_14 : i32
      scf.yield %114 : i32
    } else {
      %c0_i32_25 = arith.constant 0 : i32
      scf.yield %c0_i32_25 : i32
    }
    llvm.store %54, %6 : i32, !llvm.ptr
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %56 = arith.cmpi ne, %55, %c0_i32_16 : i32
    cf.cond_br %56, ^bb7, ^bb8
  ^bb5:  // pred: ^bb1
    %c0_i32_17 = arith.constant 0 : i32
    llvm.store %c0_i32_17, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb7, ^bb8
    %57 = llvm.load %4 : !llvm.ptr -> i32
    %58 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %59 = arith.extui %57 : i32 to i64
    %60 = arith.addi %59, %c24_i64 : i64
    %61 = llvm.getelementptr %11[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %62 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %63 = arith.addi %62, %c8_i32_18 : i32
    %64 = llvm.load %6 : !llvm.ptr -> i32
    %65 = llvm.load %3 : !llvm.ptr -> i32
    %66 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %67 = arith.addi %66, %c20_i32 : i32
    %68 = llvm.load %4 : !llvm.ptr -> i32
    call @f20(%arg0, %63, %64, %65, %67, %68) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %69 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c8_i64 : i64
    %72 = llvm.getelementptr %11[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %74 = arith.cmpi ne, %73, %c0_i32_19 : i32
    cf.cond_br %74, ^bb9, ^bb10
  ^bb7:  // pred: ^bb4
    %75 = llvm.load %4 : !llvm.ptr -> i32
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %77 = arith.extui %75 : i32 to i64
    %78 = arith.addi %77, %c28_i64 : i64
    %79 = llvm.getelementptr %11[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %76, %79 {alignment = 1 : i64} : i32, !llvm.ptr
    %80 = llvm.load %4 : !llvm.ptr -> i32
    %81 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_20 = arith.constant 4 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c4_i64_20 : i64
    %84 = llvm.getelementptr %11[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %85 = llvm.load volatile %84 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %86 = arith.extui %80 : i32 to i64
    %87 = arith.addi %86, %c20_i64 : i64
    %88 = llvm.getelementptr %11[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // pred: ^bb4
    %c0_i32_21 = arith.constant 0 : i32
    llvm.store %c0_i32_21, %5 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // pred: ^bb6
    %89 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c16_i64 : i64
    %92 = llvm.getelementptr %11[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %93, %1 : i32, !llvm.ptr
    %94 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64 : i64
    %97 = llvm.getelementptr %11[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %98, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // pred: ^bb6
    %99 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64_22 = arith.constant 12 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c12_i64_22 : i64
    %102 = llvm.getelementptr %11[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %103, %2 : i32, !llvm.ptr
    %104 = llvm.load %1 : !llvm.ptr -> i32
    %105 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_23 = arith.constant 0 : i64
    %106 = arith.extui %104 : i32 to i64
    %107 = arith.addi %106, %c0_i64_23 : i64
    %108 = llvm.getelementptr %11[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %108 {alignment = 1 : i64} : i32, !llvm.ptr
    %109 = llvm.load %1 : !llvm.ptr -> i32
    %110 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_24 = arith.constant 4 : i64
    %111 = arith.extui %109 : i32 to i64
    %112 = arith.addi %111, %c4_i64_24 : i64
    %113 = llvm.getelementptr %11[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %110, %113 {alignment = 1 : i64} : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    llvm.store %c-2147483647_i32, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f23(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f10(%arg0, %17, %18, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f24(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c4854689474455388916_i64 = arith.constant 4854689474455388916 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4854689474455388916_i64, %8 {alignment = 1 : i64} : i64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c-1846477596472271460_i64 = arith.constant -1846477596472271460 : i64
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-1846477596472271460_i64, %12 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f25(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c7199936582794304877_i64 = arith.constant 7199936582794304877 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c7199936582794304877_i64, %8 {alignment = 1 : i64} : i64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c-5076933981314334344_i64 = arith.constant -5076933981314334344 : i64
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-5076933981314334344_i64, %12 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f26(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %3 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %15 = arith.addi %13, %14 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = arith.cmpi uge, %15, %16 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_5 : i32
    cf.cond_br %19, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32_6 = arith.constant 1 : i32
    llvm.store %c1_i32_6, %4 : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64 : i64
    %23 = llvm.getelementptr %10[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %5 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %25 = arith.cmpi ule, %c1_i32_7, %c31_i32 : i32
    %26 = scf.if %25 -> (i32) {
      %104 = arith.shli %24, %c1_i32_7 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_25 = arith.constant 0 : i32
      scf.yield %c0_i32_25 : i32
    }
    llvm.store %26, %1 : i32, !llvm.ptr
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_8 : i32
    %33 = arith.select %32, %26, %27 : i32
    llvm.store %33, %1 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_9 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_10 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32 : i32
    %c31_i32_11 = arith.constant 31 : i32
    %c31_i32_12 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_11, %c31_i32_12 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_11 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_25 = arith.constant 0 : i32
      scf.yield %c0_i32_25 : i32
    }
    llvm.store %41, %2 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_13 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_14 = arith.constant 0 : i32
    %c0_i32_15 = arith.constant 0 : i32
    call @f55(%arg0, %c0_i32_14, %c0_i32_15) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %45 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_16 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_16 : i32
    %51 = llvm.load %2 : !llvm.ptr -> i32
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f34(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_17 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_18 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %4 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_20 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_21 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_21 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_22 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_22 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_23 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_23 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f55(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_24 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_24) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f27(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1048824_i32 = arith.constant 1048824 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f66(%arg0, %2, %c1048824_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f28(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f10(%arg0, %17, %18, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f29(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %10 = arith.ori %9, %c-2147483648_i32 : i32
    %c-2147483648_i32_1 = arith.constant -2147483648 : i32
    %11 = arith.cmpi eq, %10, %c-2147483648_i32_1 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_2 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c4_i64 : i64
    %17 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f10(%arg0, %18, %19, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f30(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32, %8 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f31(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %12 = arith.cmpi ult, %11, %c128_i32 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb6, ^bb7
  ^bb2(%15: i32):  // pred: ^bb3
    return %15 : i32
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %17 = arith.addi %16, %c16_i32_4 : i32
    llvm.store %17, %5 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c8_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    %28 = arith.subi %22, %27 : i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %30 = arith.cmpi uge, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_6 : i32
    cf.cond_br %32, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %35 = arith.andi %34, %c63_i32 : i32
    %c128_i32_7 = arith.constant 128 : i32
    %36 = arith.ori %35, %c128_i32_7 : i32
    %c13_i64 = arith.constant 13 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c13_i64 : i64
    %39 = llvm.getelementptr %8[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = arith.trunci %36 : i32 to i8
    llvm.store volatile %40, %39 {alignment = 1 : i64} : i8, !llvm.ptr
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32 = arith.constant 31 : i32
    %43 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %44 = scf.if %43 -> (i32) {
      %187 = arith.shrui %42, %c6_i32 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c192_i32 = arith.constant 192 : i32
    %45 = arith.ori %44, %c192_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %46 = arith.extui %41 : i32 to i64
    %47 = arith.addi %46, %c12_i64 : i64
    %48 = llvm.getelementptr %8[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = arith.trunci %45 : i32 to i8
    llvm.store volatile %49, %48 {alignment = 1 : i64} : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %50 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_8 = arith.constant 8 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c8_i64_8 : i64
    %53 = llvm.getelementptr %8[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %3 : i32, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64_9 : i64
    %58 = llvm.getelementptr %8[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi eq, %54, %59 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_10 : i32
    %63 = arith.extui %62 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_11 : i32
    cf.cond_br %64, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %c12_i64_13 = arith.constant 12 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c12_i64_13 : i64
    %68 = llvm.getelementptr %8[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_12, %68 {alignment = 1 : i64} : i32, !llvm.ptr
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %70 = arith.cmpi ult, %69, %c2048_i32 : i32
    %71 = arith.extui %70 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_14 : i32
    cf.cond_br %72, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %74 = arith.cmpi uge, %73, %c65536_i32 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_15 : i32
    cf.cond_br %76, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_16 = arith.constant 63 : i32
    %79 = arith.andi %78, %c63_i32_16 : i32
    %c128_i32_17 = arith.constant 128 : i32
    %80 = arith.ori %79, %c128_i32_17 : i32
    %c15_i64 = arith.constant 15 : i64
    %81 = arith.extui %77 : i32 to i64
    %82 = arith.addi %81, %c15_i64 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = arith.trunci %80 : i32 to i8
    llvm.store volatile %84, %83 {alignment = 1 : i64} : i8, !llvm.ptr
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %86 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_18 = arith.constant 6 : i32
    %c31_i32_19 = arith.constant 31 : i32
    %87 = arith.cmpi ule, %c6_i32_18, %c31_i32_19 : i32
    %88 = scf.if %87 -> (i32) {
      %187 = arith.shrui %86, %c6_i32_18 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c63_i32_20 = arith.constant 63 : i32
    %89 = arith.andi %88, %c63_i32_20 : i32
    %c128_i32_21 = arith.constant 128 : i32
    %90 = arith.ori %89, %c128_i32_21 : i32
    %c14_i64 = arith.constant 14 : i64
    %91 = arith.extui %85 : i32 to i64
    %92 = arith.addi %91, %c14_i64 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = arith.trunci %90 : i32 to i8
    llvm.store volatile %94, %93 {alignment = 1 : i64} : i8, !llvm.ptr
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %96 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_22 = arith.constant 31 : i32
    %97 = arith.cmpi ule, %c12_i32, %c31_i32_22 : i32
    %98 = scf.if %97 -> (i32) {
      %187 = arith.shrui %96, %c12_i32 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c63_i32_23 = arith.constant 63 : i32
    %99 = arith.andi %98, %c63_i32_23 : i32
    %c128_i32_24 = arith.constant 128 : i32
    %100 = arith.ori %99, %c128_i32_24 : i32
    %c13_i64_25 = arith.constant 13 : i64
    %101 = arith.extui %95 : i32 to i64
    %102 = arith.addi %101, %c13_i64_25 : i64
    %103 = llvm.getelementptr %8[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = arith.trunci %100 : i32 to i8
    llvm.store volatile %104, %103 {alignment = 1 : i64} : i8, !llvm.ptr
    %105 = llvm.load %2 : !llvm.ptr -> i32
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_26 = arith.constant 31 : i32
    %107 = arith.cmpi ule, %c18_i32, %c31_i32_26 : i32
    %108 = scf.if %107 -> (i32) {
      %187 = arith.shrui %106, %c18_i32 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c7_i32 = arith.constant 7 : i32
    %109 = arith.andi %108, %c7_i32 : i32
    %c240_i32 = arith.constant 240 : i32
    %110 = arith.ori %109, %c240_i32 : i32
    %c12_i64_27 = arith.constant 12 : i64
    %111 = arith.extui %105 : i32 to i64
    %112 = arith.addi %111, %c12_i64_27 : i64
    %113 = llvm.getelementptr %8[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = arith.trunci %110 : i32 to i8
    llvm.store volatile %114, %113 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_28 = arith.constant 63 : i32
    %117 = arith.andi %116, %c63_i32_28 : i32
    %c128_i32_29 = arith.constant 128 : i32
    %118 = arith.ori %117, %c128_i32_29 : i32
    %c14_i64_30 = arith.constant 14 : i64
    %119 = arith.extui %115 : i32 to i64
    %120 = arith.addi %119, %c14_i64_30 : i64
    %121 = llvm.getelementptr %8[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = arith.trunci %118 : i32 to i8
    llvm.store volatile %122, %121 {alignment = 1 : i64} : i8, !llvm.ptr
    %123 = llvm.load %2 : !llvm.ptr -> i32
    %124 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_31 = arith.constant 12 : i32
    %c31_i32_32 = arith.constant 31 : i32
    %125 = arith.cmpi ule, %c12_i32_31, %c31_i32_32 : i32
    %126 = scf.if %125 -> (i32) {
      %187 = arith.shrui %124, %c12_i32_31 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c224_i32 = arith.constant 224 : i32
    %127 = arith.ori %126, %c224_i32 : i32
    %c12_i64_33 = arith.constant 12 : i64
    %128 = arith.extui %123 : i32 to i64
    %129 = arith.addi %128, %c12_i64_33 : i64
    %130 = llvm.getelementptr %8[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = arith.trunci %127 : i32 to i8
    llvm.store volatile %131, %130 {alignment = 1 : i64} : i8, !llvm.ptr
    %132 = llvm.load %2 : !llvm.ptr -> i32
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_34 = arith.constant 6 : i32
    %c31_i32_35 = arith.constant 31 : i32
    %134 = arith.cmpi ule, %c6_i32_34, %c31_i32_35 : i32
    %135 = scf.if %134 -> (i32) {
      %187 = arith.shrui %133, %c6_i32_34 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c63_i32_36 = arith.constant 63 : i32
    %136 = arith.andi %135, %c63_i32_36 : i32
    %c128_i32_37 = arith.constant 128 : i32
    %137 = arith.ori %136, %c128_i32_37 : i32
    %c13_i64_38 = arith.constant 13 : i64
    %138 = arith.extui %132 : i32 to i64
    %139 = arith.addi %138, %c13_i64_38 : i64
    %140 = llvm.getelementptr %8[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = arith.trunci %137 : i32 to i8
    llvm.store volatile %141, %140 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %142 = llvm.load %0 : !llvm.ptr -> i32
    %143 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_39 = arith.constant 1 : i32
    %144 = arith.addi %143, %c1_i32_39 : i32
    %c8_i64_40 = arith.constant 8 : i64
    %145 = arith.extui %142 : i32 to i64
    %146 = arith.addi %145, %c8_i64_40 : i64
    %147 = llvm.getelementptr %8[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %144, %147 {alignment = 1 : i64} : i32, !llvm.ptr
    %148 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c4_i64 : i64
    %151 = llvm.getelementptr %8[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %154 = arith.addi %152, %153 : i32
    %155 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_41 = arith.constant 0 : i64
    %156 = arith.extui %154 : i32 to i64
    %157 = arith.addi %156, %c0_i64_41 : i64
    %158 = llvm.getelementptr %8[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %159 = arith.trunci %155 : i32 to i8
    llvm.store volatile %159, %158 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %160 = llvm.load %0 : !llvm.ptr -> i32
    call @f32(%arg0, %160) : (!llvm.ptr, i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %161 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_42 = arith.constant 4 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c4_i64_42 : i64
    %164 = llvm.getelementptr %8[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    %166 = llvm.load %3 : !llvm.ptr -> i32
    %167 = arith.addi %165, %166 : i32
    %168 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_43 = arith.constant 12 : i32
    %169 = arith.addi %168, %c12_i32_43 : i32
    %170 = llvm.load %1 : !llvm.ptr -> i32
    %171 = call @f77(%arg0, %167, %169, %170) : (!llvm.ptr, i32, i32, i32) -> i32
    %172 = llvm.load %0 : !llvm.ptr -> i32
    %173 = llvm.load %3 : !llvm.ptr -> i32
    %174 = llvm.load %1 : !llvm.ptr -> i32
    %175 = arith.addi %173, %174 : i32
    %c8_i64_44 = arith.constant 8 : i64
    %176 = arith.extui %172 : i32 to i64
    %177 = arith.addi %176, %c8_i64_44 : i64
    %178 = llvm.getelementptr %8[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %175, %178 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %179 = llvm.load %0 : !llvm.ptr -> i32
    %180 = llvm.load %3 : !llvm.ptr -> i32
    %181 = llvm.load %1 : !llvm.ptr -> i32
    call @f26(%arg0, %179, %180, %181) : (!llvm.ptr, i32, i32, i32) -> ()
    %182 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_45 = arith.constant 8 : i64
    %183 = arith.extui %182 : i32 to i64
    %184 = arith.addi %183, %c8_i64_45 : i64
    %185 = llvm.getelementptr %8[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = llvm.load volatile %185 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %186, %3 : i32, !llvm.ptr
    cf.br ^bb13
  }
  func.func @f32(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %1 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %17, %2 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %18 = arith.cmpi eq, %17, %c-1_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_5 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_6 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    llvm.store %c1_i32_7, %3 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_8 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %24 = arith.cmpi ule, %c1_i32_8, %c31_i32 : i32
    %25 = scf.if %24 -> (i32) {
      %104 = arith.shli %23, %c1_i32_8 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    llvm.store %25, %4 : i32, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    %27 = arith.addi %26, %c1_i32_9 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = llvm.load %5 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_10 : i32
    %33 = arith.select %32, %25, %27 : i32
    llvm.store %33, %4 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_11 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_11 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_12 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %4 : i32, !llvm.ptr
    %c-1_i32_13 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32_13 : i32
    %c31_i32_14 = arith.constant 31 : i32
    %c31_i32_15 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_14, %c31_i32_15 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_14 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    llvm.store %41, %5 : i32, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_16 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_17 = arith.constant 0 : i32
    %c0_i32_18 = arith.constant 0 : i32
    call @f55(%arg0, %c0_i32_17, %c0_i32_18) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_19 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_19 : i32
    %51 = llvm.load %5 : !llvm.ptr -> i32
    %52 = llvm.load %4 : !llvm.ptr -> i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f34(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_20 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_21 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_23 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_23 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_24 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_24 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_25 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_25 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_26 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_26 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f55(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_27 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_27) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f33(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = arith.subi %11, %16 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_3 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = call @f77(%arg0, %29, %30, %31) : (!llvm.ptr, i32, i32, i32) -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = arith.addi %34, %35 : i32
    %c8_i64_4 = arith.constant 8 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c8_i64_4 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // pred: ^bb1
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    call @f26(%arg0, %40, %41, %42) : (!llvm.ptr, i32, i32, i32) -> ()
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_6 = arith.constant 8 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c8_i64_6 : i64
    %46 = llvm.getelementptr %6[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %47, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f34(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %9 = arith.cmpi eq, %8, %c0_i32_4 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_5 : i32
    cf.cond_br %11, ^bb5, ^bb6
  ^bb2:  // 2 preds: ^bb3, ^bb19
    return
  ^bb3:  // 3 preds: ^bb4, ^bb5, ^bb18
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %7[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_6, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb6
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_7, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %c4_i64_9 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64_9 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_8, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb1
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %25 = arith.cmpi sle, %24, %c-1_i32 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_10 : i32
    cf.cond_br %27, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_11 = arith.constant 4 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c4_i64_11 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %33 = arith.cmpi eq, %32, %c0_i32_12 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_13 : i32
    cf.cond_br %35, ^bb10, ^bb11
  ^bb8:  // 4 preds: ^bb9, ^bb12, ^bb15, ^bb17
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %37 = arith.cmpi eq, %36, %c0_i32_14 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_15 : i32
    cf.cond_br %39, ^bb18, ^bb19
  ^bb9:  // 2 preds: ^bb14, ^bb16
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %42 = call @f9(%arg0, %40, %41) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %42, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb10:  // pred: ^bb7
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_16 : i32
    cf.cond_br %44, ^bb16, ^bb17
  ^bb11:  // pred: ^bb7
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c8_i64 : i64
    %48 = llvm.getelementptr %7[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %49, %4 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_17 : i32
    cf.cond_br %50, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %51 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c0_i64_18 : i64
    %54 = llvm.getelementptr %7[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %56 = llvm.load %4 : !llvm.ptr -> i32
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %59 = call @f11(%arg0, %55, %56, %57, %58) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %59, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb13:  // pred: ^bb11
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %61 = arith.cmpi ne, %60, %c0_i32_19 : i32
    cf.cond_br %61, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %c0_i32_20 = arith.constant 0 : i32
    %c1049497_i64 = arith.constant 1049497 : i64
    %62 = arith.extui %c0_i32_20 : i32 to i64
    %63 = arith.addi %62, %c1049497_i64 : i64
    %64 = llvm.getelementptr %7[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i8
    %66 = arith.extui %65 : i8 to i32
    cf.br ^bb9
  ^bb15:  // pred: ^bb13
    %67 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %67, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb16:  // pred: ^bb10
    %c0_i32_21 = arith.constant 0 : i32
    %c1049497_i64_22 = arith.constant 1049497 : i64
    %68 = arith.extui %c0_i32_21 : i32 to i64
    %69 = arith.addi %68, %c1049497_i64_22 : i64
    %70 = llvm.getelementptr %7[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i8
    %72 = arith.extui %71 : i8 to i32
    cf.br ^bb9
  ^bb17:  // pred: ^bb10
    %73 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %73, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb18:  // pred: ^bb8
    %74 = llvm.load %0 : !llvm.ptr -> i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_23 = arith.constant 8 : i64
    %76 = arith.extui %74 : i32 to i64
    %77 = arith.addi %76, %c8_i64_23 : i64
    %78 = llvm.getelementptr %7[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %75, %78 {alignment = 1 : i64} : i32, !llvm.ptr
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %80 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_24 = arith.constant 4 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c4_i64_24 : i64
    %83 = llvm.getelementptr %7[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb19:  // pred: ^bb8
    %84 = llvm.load %0 : !llvm.ptr -> i32
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_25 = arith.constant 8 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c8_i64_25 : i64
    %88 = llvm.getelementptr %7[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %89 = llvm.load %0 : !llvm.ptr -> i32
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_26 = arith.constant 4 : i64
    %91 = arith.extui %89 : i32 to i64
    %92 = arith.addi %91, %c4_i64_26 : i64
    %93 = llvm.getelementptr %7[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %93 {alignment = 1 : i64} : i32, !llvm.ptr
    %94 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_27 = arith.constant 0 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c0_i64_28 : i64
    %97 = llvm.getelementptr %7[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_27, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f35(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f36(%arg0, %1) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f36(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %1 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c12_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %8[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load volatile %19 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %20 : i32, [
      default: ^bb4,
      0: ^bb6,
      1: ^bb5
    ]
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb7, ^bb8
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_3 = arith.constant 4 : i64
    %23 = arith.extui %21 : i32 to i64
    %24 = arith.addi %23, %c4_i64_3 : i64
    %25 = llvm.getelementptr %8[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %28 = arith.extui %26 : i32 to i64
    %29 = arith.addi %28, %c0_i64 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %27, %30 {alignment = 1 : i64} : i32, !llvm.ptr
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %c1048972_i32 = arith.constant 1048972 : i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c24_i64 : i64
    %35 = llvm.getelementptr %8[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c28_i64 : i64
    %40 = llvm.getelementptr %8[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %41, %0 : i32, !llvm.ptr
    %c28_i64_4 = arith.constant 28 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c28_i64_4 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i8
    %46 = arith.extui %45 : i8 to i32
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c29_i64 = arith.constant 29 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c29_i64 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i8
    %52 = arith.extui %51 : i8 to i32
    call @f46(%arg0, %31, %c1048972_i32, %36, %46, %52) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // 3 preds: ^bb1, ^bb5, ^bb6
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_5 : i64
    %56 = llvm.getelementptr %8[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_6 = arith.constant 12 : i64
    %59 = arith.extui %57 : i32 to i64
    %60 = arith.addi %59, %c12_i64_6 : i64
    %61 = llvm.getelementptr %8[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c1049000_i32 = arith.constant 1049000 : i32
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_7 = arith.constant 24 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c24_i64_7 : i64
    %66 = llvm.getelementptr %8[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i32
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_8 = arith.constant 28 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c28_i64_8 : i64
    %71 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %72, %0 : i32, !llvm.ptr
    %c28_i64_9 = arith.constant 28 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c28_i64_9 : i64
    %75 = llvm.getelementptr %8[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i8
    %77 = arith.extui %76 : i8 to i32
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %c29_i64_10 = arith.constant 29 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c29_i64_10 : i64
    %81 = llvm.getelementptr %8[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i8
    %83 = arith.extui %82 : i8 to i32
    call @f46(%arg0, %62, %c1049000_i32, %67, %77, %83) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32_11 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_11) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %85 = arith.cmpi ne, %84, %c0_i32_12 : i32
    cf.cond_br %85, ^bb4, ^bb8
  ^bb6:  // pred: ^bb1
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %87 = arith.cmpi ne, %86, %c0_i32_13 : i32
    cf.cond_br %87, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %c1_i32_14 = arith.constant 1 : i32
    llvm.store %c1_i32_14, %2 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    llvm.store %c0_i32_15, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // pred: ^bb5
    %88 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_16 : i64
    %91 = llvm.getelementptr %8[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %92, %2 : i32, !llvm.ptr
    %c4_i64_17 = arith.constant 4 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c4_i64_17 : i64
    %95 = llvm.getelementptr %8[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %96, %3 : i32, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c0_i64_18 : i64
    %100 = llvm.getelementptr %8[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %101, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f37(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %9 = arith.subi %8, %c48_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %c0_i32_2 = arith.constant 0 : i32
    %c1049496_i64 = arith.constant 1049496 : i64
    %10 = arith.extui %c0_i32_2 : i32 to i64
    %11 = arith.addi %10, %c1049496_i64 : i64
    %12 = llvm.getelementptr %7[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i8
    %14 = arith.extui %13 : i8 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_3 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_5 = arith.constant 48 : i32
    %19 = arith.addi %18, %c48_i32_5 : i32
    llvm.store %19, %4 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c12_i64 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c1048884_i32 = arith.constant 1048884 : i32
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048884_i32, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c20_i64 = arith.constant 20 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c20_i64 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %34 = arith.extui %32 : i32 to i64
    %35 = arith.addi %34, %c44_i64 : i64
    %36 = llvm.getelementptr %7[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %38 = arith.extui %c10_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %39 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %40 = scf.if %39 -> (i64) {
      %56 = arith.shli %38, %c32_i64 : i64
      scf.yield %56 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i32 = arith.constant 44 : i32
    %42 = arith.addi %41, %c44_i32 : i32
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.ori %40, %43 : i64
    %c32_i64_6 = arith.constant 32 : i64
    %45 = arith.extui %37 : i32 to i64
    %46 = arith.addi %45, %c32_i64_6 : i64
    %47 = llvm.getelementptr %7[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i64, !llvm.ptr
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %50 = arith.addi %49, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %51 = arith.extui %48 : i32 to i64
    %52 = arith.addi %51, %c16_i64 : i64
    %53 = llvm.getelementptr %7[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %55 = arith.addi %54, %c8_i32 : i32
    %c1048924_i32 = arith.constant 1048924 : i32
    call @f63(%arg0, %55, %c1048924_i32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f38(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %1 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c24_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %14, %2 : i32, !llvm.ptr
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %16 = arith.addi %15, %c16_i32 : i32
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_2 = arith.constant 16 : i32
    %18 = arith.addi %17, %c16_i32_2 : i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %7[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_3 = arith.constant 0 : i64
    %23 = arith.extui %16 : i32 to i64
    %24 = arith.addi %23, %c0_i64_3 : i64
    %25 = llvm.getelementptr %7[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i64, !llvm.ptr
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %27 = arith.addi %26, %c8_i32 : i32
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_4 = arith.constant 8 : i32
    %29 = arith.addi %28, %c8_i32_4 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64_5 : i64
    %32 = llvm.getelementptr %7[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %34 = arith.extui %27 : i32 to i64
    %35 = arith.addi %34, %c0_i64_6 : i64
    %36 = llvm.getelementptr %7[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i64, !llvm.ptr
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %39 = arith.extui %37 : i32 to i64
    %40 = arith.addi %39, %c28_i64 : i64
    %41 = llvm.getelementptr %7[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %38, %41 {alignment = 1 : i64} : i32, !llvm.ptr
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_7 = arith.constant 24 : i64
    %44 = arith.extui %42 : i32 to i64
    %45 = arith.addi %44, %c24_i64_7 : i64
    %46 = llvm.getelementptr %7[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %43, %46 {alignment = 1 : i64} : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_8 : i64
    %51 = llvm.getelementptr %7[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_9 = arith.constant 0 : i64
    %53 = arith.extui %47 : i32 to i64
    %54 = arith.addi %53, %c0_i64_9 : i64
    %55 = llvm.getelementptr %7[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %1 : !llvm.ptr -> i32
    call @f35(%arg0, %56) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f39(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %12 = arith.subi %11, %c64_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %18 = arith.cmpi eq, %17, %c-2147483648_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64_8 : i64
    %26 = llvm.getelementptr %10[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %27, %5 : i64, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c0_i64_9 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %33 = arith.addi %32, %c8_i32 : i32
    llvm.store %33, %3 : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_10 = arith.constant 8 : i32
    %35 = arith.addi %34, %c8_i32_10 : i32
    llvm.store %35, %1 : i32, !llvm.ptr
    %c0_i64_11 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_11 : i64
    %38 = llvm.getelementptr %10[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %40 = arith.extui %33 : i32 to i64
    %41 = arith.addi %40, %c0_i64_12 : i64
    %42 = llvm.getelementptr %10[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_14 : i64
    %46 = llvm.getelementptr %10[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %46 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %c1049497_i64 = arith.constant 1049497 : i64
    %47 = arith.extui %c0_i32_15 : i32 to i64
    %48 = arith.addi %47, %c1049497_i64 : i64
    %49 = llvm.getelementptr %10[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i8
    %51 = arith.extui %50 : i8 to i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %54 = arith.extui %52 : i32 to i64
    %55 = arith.addi %54, %c0_i64_16 : i64
    %56 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %c12_i32 = arith.constant 12 : i32
    %c4_i32 = arith.constant 4 : i32
    %57 = call @f9(%arg0, %c12_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %57, %1 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %58 = arith.cmpi eq, %57, %c0_i32_17 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_18 : i32
    cf.cond_br %60, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c12_i64 : i64
    %64 = llvm.getelementptr %10[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %65, %3 : i32, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %67 = arith.addi %66, %c28_i32 : i32
    %c8_i32_19 = arith.constant 8 : i32
    %68 = arith.addi %67, %c8_i32_19 : i32
    llvm.store %68, %4 : i32, !llvm.ptr
    %c0_i32_20 = arith.constant 0 : i32
    %c0_i64_21 = arith.constant 0 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c0_i64_21 : i64
    %71 = llvm.getelementptr %10[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_20, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64_22 = arith.constant 4294967296 : i64
    %c28_i64 = arith.constant 28 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c28_i64 : i64
    %75 = llvm.getelementptr %10[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_22, %75 {alignment = 1 : i64} : i64, !llvm.ptr
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %77 = arith.addi %76, %c40_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %78 = arith.addi %77, %c16_i32 : i32
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_23 = arith.constant 16 : i32
    %80 = arith.addi %79, %c16_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c0_i64_24 : i64
    %83 = llvm.getelementptr %10[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load volatile %83 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %85 = arith.extui %78 : i32 to i64
    %86 = arith.addi %85, %c0_i64_25 : i64
    %87 = llvm.getelementptr %10[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %84, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_26 = arith.constant 40 : i32
    %89 = arith.addi %88, %c40_i32_26 : i32
    %c8_i32_27 = arith.constant 8 : i32
    %90 = arith.addi %89, %c8_i32_27 : i32
    %91 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_28 = arith.constant 8 : i32
    %92 = arith.addi %91, %c8_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c0_i64_29 : i64
    %95 = llvm.getelementptr %10[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %97 = arith.extui %90 : i32 to i64
    %98 = arith.addi %97, %c0_i64_30 : i64
    %99 = llvm.getelementptr %10[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %96, %99 {alignment = 1 : i64} : i64, !llvm.ptr
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %101 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_31 : i64
    %104 = llvm.getelementptr %10[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c40_i64 = arith.constant 40 : i64
    %106 = arith.extui %100 : i32 to i64
    %107 = arith.addi %106, %c40_i64 : i64
    %108 = llvm.getelementptr %10[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %108 {alignment = 1 : i64} : i64, !llvm.ptr
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32_32 = arith.constant 28 : i32
    %110 = arith.addi %109, %c28_i32_32 : i32
    %c1048824_i32 = arith.constant 1048824 : i32
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_33 = arith.constant 40 : i32
    %112 = arith.addi %111, %c40_i32_33 : i32
    %113 = call @f66(%arg0, %110, %c1048824_i32, %112) : (!llvm.ptr, i32, i32, i32) -> i32
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_34 = arith.constant 16 : i32
    %115 = arith.addi %114, %c16_i32_34 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %116 = arith.addi %115, %c8_i32_35 : i32
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_36 : i64
    %120 = llvm.getelementptr %10[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %121, %3 : i32, !llvm.ptr
    %c0_i64_37 = arith.constant 0 : i64
    %122 = arith.extui %116 : i32 to i64
    %123 = arith.addi %122, %c0_i64_37 : i64
    %124 = llvm.getelementptr %10[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %124 {alignment = 1 : i64} : i32, !llvm.ptr
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %126 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_38 = arith.constant 28 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c28_i64_38 : i64
    %129 = llvm.getelementptr %10[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %130, %5 : i64, !llvm.ptr
    %c16_i64 = arith.constant 16 : i64
    %131 = arith.extui %125 : i32 to i64
    %132 = arith.addi %131, %c16_i64 : i64
    %133 = llvm.getelementptr %10[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %133 {alignment = 1 : i64} : i64, !llvm.ptr
    %134 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_39 = arith.constant 8 : i32
    %135 = arith.addi %134, %c8_i32_39 : i32
    %136 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %137 = arith.extui %135 : i32 to i64
    %138 = arith.addi %137, %c0_i64_40 : i64
    %139 = llvm.getelementptr %10[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %139 {alignment = 1 : i64} : i32, !llvm.ptr
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %141 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %142 = arith.extui %140 : i32 to i64
    %143 = arith.addi %142, %c0_i64_41 : i64
    %144 = llvm.getelementptr %10[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %141, %144 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb3
    %c4_i32_42 = arith.constant 4 : i32
    %c12_i32_43 = arith.constant 12 : i32
    call @f58(%arg0, %c4_i32_42, %c12_i32_43) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb6:  // pred: ^bb3
    %145 = llvm.load %1 : !llvm.ptr -> i32
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %147 = arith.extui %146 : i32 to i64
    %148 = arith.addi %147, %c0_i64_44 : i64
    %149 = llvm.getelementptr %10[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %150 = llvm.load volatile %149 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    %151 = arith.extui %145 : i32 to i64
    %152 = arith.addi %151, %c0_i64_45 : i64
    %153 = llvm.getelementptr %10[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %150, %153 {alignment = 1 : i64} : i64, !llvm.ptr
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_46 = arith.constant 8 : i32
    %155 = arith.addi %154, %c8_i32_46 : i32
    %156 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c0_i64_47 : i64
    %159 = llvm.getelementptr %10[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_48 = arith.constant 0 : i64
    %161 = arith.extui %155 : i32 to i64
    %162 = arith.addi %161, %c0_i64_48 : i64
    %163 = llvm.getelementptr %10[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %160, %163 {alignment = 1 : i64} : i32, !llvm.ptr
    %164 = llvm.load %0 : !llvm.ptr -> i32
    %c1048940_i32 = arith.constant 1048940 : i32
    %c4_i64 = arith.constant 4 : i64
    %165 = arith.extui %164 : i32 to i64
    %166 = arith.addi %165, %c4_i64 : i64
    %167 = llvm.getelementptr %10[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048940_i32, %167 {alignment = 1 : i64} : i32, !llvm.ptr
    %168 = llvm.load %0 : !llvm.ptr -> i32
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_49 = arith.constant 0 : i64
    %170 = arith.extui %168 : i32 to i64
    %171 = arith.addi %170, %c0_i64_49 : i64
    %172 = llvm.getelementptr %10[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %169, %172 {alignment = 1 : i64} : i32, !llvm.ptr
    %173 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_50 = arith.constant 64 : i32
    %174 = arith.addi %173, %c64_i32_50 : i32
    llvm.store %174, %7 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f40(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %12 = arith.subi %11, %c48_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %18 = arith.cmpi eq, %17, %c-2147483648_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c1048940_i32 = arith.constant 1048940 : i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %10[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048940_i32, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %29 = arith.extui %27 : i32 to i64
    %30 = arith.addi %29, %c0_i64_8 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_9 = arith.constant 48 : i32
    %33 = arith.addi %32, %c48_i32_9 : i32
    llvm.store %33, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c12_i64 : i64
    %37 = llvm.getelementptr %10[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %40 = arith.addi %39, %c12_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %41 = arith.addi %40, %c8_i32 : i32
    llvm.store %41, %4 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64_11 : i64
    %44 = llvm.getelementptr %10[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_10, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c12_i64_12 = arith.constant 12 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c12_i64_12 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %48 {alignment = 1 : i64} : i64, !llvm.ptr
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %50 = arith.addi %49, %c24_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %51 = arith.addi %50, %c16_i32 : i32
    %52 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_13 = arith.constant 16 : i32
    %53 = arith.addi %52, %c16_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_14 : i64
    %56 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %58 = arith.extui %51 : i32 to i64
    %59 = arith.addi %58, %c0_i64_15 : i64
    %60 = llvm.getelementptr %10[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %57, %60 {alignment = 1 : i64} : i64, !llvm.ptr
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_16 = arith.constant 24 : i32
    %62 = arith.addi %61, %c24_i32_16 : i32
    %c8_i32_17 = arith.constant 8 : i32
    %63 = arith.addi %62, %c8_i32_17 : i32
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %65 = arith.addi %64, %c8_i32_18 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c0_i64_19 : i64
    %68 = llvm.getelementptr %10[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_20 = arith.constant 0 : i64
    %70 = arith.extui %63 : i32 to i64
    %71 = arith.addi %70, %c0_i64_20 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %74 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c0_i64_21 : i64
    %77 = llvm.getelementptr %10[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c24_i64 = arith.constant 24 : i64
    %79 = arith.extui %73 : i32 to i64
    %80 = arith.addi %79, %c24_i64 : i64
    %81 = llvm.getelementptr %10[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %81 {alignment = 1 : i64} : i64, !llvm.ptr
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_22 = arith.constant 12 : i32
    %83 = arith.addi %82, %c12_i32_22 : i32
    %c1048824_i32 = arith.constant 1048824 : i32
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_23 = arith.constant 24 : i32
    %85 = arith.addi %84, %c24_i32_23 : i32
    %86 = call @f66(%arg0, %83, %c1048824_i32, %85) : (!llvm.ptr, i32, i32, i32) -> i32
    %87 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_24 = arith.constant 8 : i32
    %88 = arith.addi %87, %c8_i32_24 : i32
    %89 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c0_i64_25 : i64
    %92 = llvm.getelementptr %10[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %93, %3 : i32, !llvm.ptr
    %c0_i64_26 = arith.constant 0 : i64
    %94 = arith.extui %88 : i32 to i64
    %95 = arith.addi %94, %c0_i64_26 : i64
    %96 = llvm.getelementptr %10[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %96 {alignment = 1 : i64} : i32, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_27 = arith.constant 12 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c12_i64_27 : i64
    %101 = llvm.getelementptr %10[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %102, %5 : i64, !llvm.ptr
    %c0_i64_28 = arith.constant 0 : i64
    %103 = arith.extui %97 : i32 to i64
    %104 = arith.addi %103, %c0_i64_28 : i64
    %105 = llvm.getelementptr %10[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %102, %105 {alignment = 1 : i64} : i64, !llvm.ptr
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_29 = arith.constant 8 : i32
    %107 = arith.addi %106, %c8_i32_29 : i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_30 = arith.constant 0 : i64
    %109 = arith.extui %107 : i32 to i64
    %110 = arith.addi %109, %c0_i64_30 : i64
    %111 = llvm.getelementptr %10[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i32, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %113 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_31 = arith.constant 0 : i64
    %114 = arith.extui %112 : i32 to i64
    %115 = arith.addi %114, %c0_i64_31 : i64
    %116 = llvm.getelementptr %10[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %113, %116 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f41(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %15 = arith.cmpi eq, %14, %c-2147483648_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_2 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb3
    return %18 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_3 = arith.constant 32 : i32
    %20 = arith.addi %19, %c32_i32_3 : i32
    llvm.store %20, %4 : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%21 : i32)
  ^bb4:  // pred: ^bb1
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32 : i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %28 = llvm.getelementptr %7[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %29, %0 : i32, !llvm.ptr
    %c16_i32_4 = arith.constant 16 : i32
    %30 = arith.addi %29, %c16_i32_4 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_5 : i64
    %33 = llvm.getelementptr %7[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %35 = arith.extui %24 : i32 to i64
    %36 = arith.addi %35, %c0_i64_6 : i64
    %37 = llvm.getelementptr %7[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %34, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_7 = arith.constant 8 : i32
    %39 = arith.addi %38, %c8_i32_7 : i32
    %c8_i32_8 = arith.constant 8 : i32
    %40 = arith.addi %39, %c8_i32_8 : i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %42 = arith.addi %41, %c8_i32_9 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c0_i64_10 : i64
    %45 = llvm.getelementptr %7[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %47 = arith.extui %40 : i32 to i64
    %48 = arith.addi %47, %c0_i64_11 : i64
    %49 = llvm.getelementptr %7[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %46, %49 {alignment = 1 : i64} : i64, !llvm.ptr
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c0_i64_12 : i64
    %54 = llvm.getelementptr %7[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %50 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %7[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i64, !llvm.ptr
    %59 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c20_i64 : i64
    %62 = llvm.getelementptr %7[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i32
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c24_i64 : i64
    %67 = llvm.getelementptr %7[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_13 = arith.constant 8 : i32
    %70 = arith.addi %69, %c8_i32_13 : i32
    %71 = call @f66(%arg0, %63, %68, %70) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %71, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c4_i64 : i64
    %76 = llvm.getelementptr %7[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i32
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_14 = arith.constant 8 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c8_i64_14 : i64
    %81 = llvm.getelementptr %7[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i32
    %83 = call @f73(%arg0, %72, %77, %82) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %83, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f42(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_3 = arith.constant 0 : i32
    %c1049497_i64 = arith.constant 1049497 : i64
    %7 = arith.extui %c0_i32_3 : i32 to i64
    %8 = arith.addi %7, %c1049497_i64 : i64
    %9 = llvm.getelementptr %6[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i8
    %11 = arith.extui %10 : i8 to i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c4_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %3 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %22 = call @f9(%arg0, %c8_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %22, %1 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %23 = arith.cmpi eq, %22, %c0_i32_4 : i32
    %24 = arith.extui %23 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_5 : i32
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb4
    return
  ^bb3:  // pred: ^bb1
    %c4_i32_6 = arith.constant 4 : i32
    %c8_i32_7 = arith.constant 8 : i32
    call @f58(%arg0, %c4_i32_6, %c8_i32_7) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_8 = arith.constant 4 : i64
    %28 = arith.extui %26 : i32 to i64
    %29 = arith.addi %28, %c4_i64_8 : i64
    %30 = llvm.getelementptr %6[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %27, %30 {alignment = 1 : i64} : i32, !llvm.ptr
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %32 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %33 = arith.extui %31 : i32 to i64
    %34 = arith.addi %33, %c0_i64_9 : i64
    %35 = llvm.getelementptr %6[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c1048956_i32 = arith.constant 1048956 : i32
    %c4_i64_10 = arith.constant 4 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c4_i64_10 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048956_i32, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %42 = arith.extui %40 : i32 to i64
    %43 = arith.addi %42, %c0_i64_11 : i64
    %44 = llvm.getelementptr %6[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f43(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c1048956_i32 = arith.constant 1048956 : i32
    %c4_i64 = arith.constant 4 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c4_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048956_i32, %8 {alignment = 1 : i64} : i32, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %9 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f44(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1 = arith.constant 0 : i64
    %11 = arith.extui %5 : i32 to i64
    %12 = arith.addi %11, %c0_i64_1 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f45(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c4_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %16 = call @f73(%arg0, %5, %10, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f46(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    %19 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %15 : !llvm.ptr -> i64
    %21 = arith.trunci %20 : i64 to i32
    %22 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %15 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %25 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %26 = arith.subi %25, %c32_i32 : i32
    llvm.store %26, %5 : i32, !llvm.ptr
    llvm.store %26, %8 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %c1049524_i64 = arith.constant 1049524 : i64
    %27 = arith.extui %c0_i32_7 : i32 to i64
    %28 = arith.addi %27, %c1049524_i64 : i64
    %29 = llvm.getelementptr %11[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %30, %6 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %31 = arith.addi %30, %c1_i32_8 : i32
    %c1049524_i64_9 = arith.constant 1049524 : i64
    %32 = arith.extui %c0_i32_6 : i32 to i64
    %33 = arith.addi %32, %c1049524_i64_9 : i64
    %34 = llvm.getelementptr %11[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    %35 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %36 = arith.cmpi slt, %35, %c0_i32_10 : i32
    %37 = arith.extui %36 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_11 : i32
    cf.cond_br %38, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 4 preds: ^bb1, ^bb6, ^bb8, ^bb33
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c0_i32_12 = arith.constant 0 : i32
    %c1049532_i64 = arith.constant 1049532 : i64
    %39 = arith.extui %c0_i32_12 : i32 to i64
    %40 = arith.addi %39, %c1049532_i64 : i64
    %41 = llvm.getelementptr %11[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i8
    %43 = arith.extui %42 : i8 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_13 : i32
    cf.cond_br %44, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %45 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %46 = arith.addi %45, %c8_i32 : i32
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c24_i64 : i64
    %51 = llvm.getelementptr %11[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    %53 = arith.cmpi ult, %52, %24 : i32
    cf.cond_br %53, ^bb27, ^bb28
  ^bb6:  // pred: ^bb4
    %c0_i32_14 = arith.constant 0 : i32
    %c1_i32_15 = arith.constant 1 : i32
    %c1049532_i64_16 = arith.constant 1049532 : i64
    %54 = arith.extui %c0_i32_14 : i32 to i64
    %55 = arith.addi %54, %c1049532_i64_16 : i64
    %56 = llvm.getelementptr %11[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = arith.trunci %c1_i32_15 : i32 to i8
    llvm.store volatile %57, %56 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %c0_i32_18 = arith.constant 0 : i32
    %c1049528_i64 = arith.constant 1049528 : i64
    %58 = arith.extui %c0_i32_18 : i32 to i64
    %59 = arith.addi %58, %c1049528_i64 : i64
    %60 = llvm.getelementptr %11[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %62 = arith.addi %61, %c1_i32_19 : i32
    %c1049528_i64_20 = arith.constant 1049528 : i64
    %63 = arith.extui %c0_i32_17 : i32 to i64
    %64 = arith.addi %63, %c1049528_i64_20 : i64
    %65 = llvm.getelementptr %11[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %62, %65 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %c1049512_i64 = arith.constant 1049512 : i64
    %66 = arith.extui %c0_i32_21 : i32 to i64
    %67 = arith.addi %66, %c1049512_i64 : i64
    %68 = llvm.getelementptr %11[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %69, %6 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %70 = arith.cmpi sle, %69, %c-1_i32 : i32
    %71 = arith.extui %70 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_22 : i32
    cf.cond_br %72, ^bb3, ^bb7
  ^bb7:  // pred: ^bb6
    %c0_i32_23 = arith.constant 0 : i32
    %73 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %74 = arith.addi %73, %c1_i32_24 : i32
    %c1049512_i64_25 = arith.constant 1049512 : i64
    %75 = arith.extui %c0_i32_23 : i32 to i64
    %76 = arith.addi %75, %c1049512_i64_25 : i64
    %77 = llvm.getelementptr %11[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %74, %77 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    %c1049516_i64 = arith.constant 1049516 : i64
    %78 = arith.extui %c0_i32_26 : i32 to i64
    %79 = arith.addi %78, %c1049516_i64 : i64
    %80 = llvm.getelementptr %11[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_27 = arith.constant 0 : i32
    %82 = arith.cmpi eq, %81, %c0_i32_27 : i32
    %83 = arith.extui %82 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_28 : i32
    cf.cond_br %84, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb24
    %c0_i32_29 = arith.constant 0 : i32
    %85 = llvm.load %6 : !llvm.ptr -> i32
    %c1049512_i64_30 = arith.constant 1049512 : i64
    %86 = arith.extui %c0_i32_29 : i32 to i64
    %87 = arith.addi %86, %c1049512_i64_30 : i64
    %88 = llvm.getelementptr %11[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_31 = arith.constant 0 : i32
    %c0_i32_32 = arith.constant 0 : i32
    %c1049532_i64_33 = arith.constant 1049532 : i64
    %89 = arith.extui %c0_i32_31 : i32 to i64
    %90 = arith.addi %89, %c1049532_i64_33 : i64
    %91 = llvm.getelementptr %11[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = arith.trunci %c0_i32_32 : i32 to i8
    llvm.store volatile %92, %91 {alignment = 1 : i64} : i8, !llvm.ptr
    %93 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_34 = arith.constant 0 : i32
    %94 = arith.cmpi eq, %93, %c0_i32_34 : i32
    %95 = arith.extui %94 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %96 = arith.cmpi ne, %95, %c0_i32_35 : i32
    cf.cond_br %96, ^bb3, ^bb26
  ^bb9:  // pred: ^bb7
    %97 = llvm.load %5 : !llvm.ptr -> i32
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c20_i64 : i64
    %102 = llvm.getelementptr %11[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    %104 = arith.cmpi ult, %103, %18 : i32
    cf.cond_br %104, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %105 = llvm.getelementptr inbounds %16[%103] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %106 = llvm.load %105 : !llvm.ptr -> !llvm.ptr
    %107 = llvm.ptrtoint %106 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %108 = arith.cmpi eq, %107, %c0_i64 : i64
    cf.cond_br %108, ^bb13, ^bb12
  ^bb11:  // pred: ^bb9
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %109 = llvm.getelementptr %106[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %110 = llvm.getelementptr %106[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %111 = llvm.getelementptr %106[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %112 = llvm.load %109 : !llvm.ptr -> !llvm.ptr
    %113 = llvm.load %111 : !llvm.ptr -> !llvm.ptr
    %114 = llvm.ptrtoint %112 : !llvm.ptr to i64
    %c0_i64_36 = arith.constant 0 : i64
    %115 = arith.cmpi eq, %114, %c0_i64_36 : i64
    cf.cond_br %115, ^bb15, ^bb14
  ^bb13:  // pred: ^bb10
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %116 = llvm.load %110 : !llvm.ptr -> i32
    %117 = arith.cmpi ne, %13, %116 : i32
    cf.cond_br %117, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c3_i32_37 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_37) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %118 = llvm.call %112(%113, %97, %98) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %119 = llvm.load %5 : !llvm.ptr -> i32
    %120 = llvm.load %4 : !llvm.ptr -> i32
    %c29_i64 = arith.constant 29 : i64
    %121 = arith.extui %119 : i32 to i64
    %122 = arith.addi %121, %c29_i64 : i64
    %123 = llvm.getelementptr %11[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = arith.trunci %120 : i32 to i8
    llvm.store volatile %124, %123 {alignment = 1 : i64} : i8, !llvm.ptr
    %125 = llvm.load %5 : !llvm.ptr -> i32
    %126 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %127 = arith.extui %125 : i32 to i64
    %128 = arith.addi %127, %c28_i64 : i64
    %129 = llvm.getelementptr %11[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = arith.trunci %126 : i32 to i8
    llvm.store volatile %130, %129 {alignment = 1 : i64} : i8, !llvm.ptr
    %131 = llvm.load %5 : !llvm.ptr -> i32
    %132 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_38 = arith.constant 24 : i64
    %133 = arith.extui %131 : i32 to i64
    %134 = arith.addi %133, %c24_i64_38 : i64
    %135 = llvm.getelementptr %11[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %132, %135 {alignment = 1 : i64} : i32, !llvm.ptr
    %136 = llvm.load %5 : !llvm.ptr -> i32
    %137 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_39 = arith.constant 0 : i64
    %138 = arith.extui %137 : i32 to i64
    %139 = arith.addi %138, %c0_i64_39 : i64
    %140 = llvm.getelementptr %11[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = llvm.load volatile %140 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %142 = arith.extui %136 : i32 to i64
    %143 = arith.addi %142, %c16_i64 : i64
    %144 = llvm.getelementptr %11[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %141, %144 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_40 = arith.constant 0 : i32
    %c1049516_i64_41 = arith.constant 1049516 : i64
    %145 = arith.extui %c0_i32_40 : i32 to i64
    %146 = arith.addi %145, %c1049516_i64_41 : i64
    %147 = llvm.getelementptr %11[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    %149 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %150 = arith.addi %149, %c16_i32 : i32
    %c0_i32_42 = arith.constant 0 : i32
    %c1049520_i64 = arith.constant 1049520 : i64
    %151 = arith.extui %c0_i32_42 : i32 to i64
    %152 = arith.addi %151, %c1049520_i64 : i64
    %153 = llvm.getelementptr %11[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64_43 = arith.constant 20 : i64
    %155 = arith.extui %154 : i32 to i64
    %156 = arith.addi %155, %c20_i64_43 : i64
    %157 = llvm.getelementptr %11[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %158 = llvm.load volatile %157 {alignment = 1 : i64} : !llvm.ptr -> i32
    %159 = arith.cmpi ult, %158, %21 : i32
    cf.cond_br %159, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %160 = llvm.getelementptr inbounds %19[%158] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %161 = llvm.load %160 : !llvm.ptr -> !llvm.ptr
    %162 = llvm.ptrtoint %161 : !llvm.ptr to i64
    %c0_i64_44 = arith.constant 0 : i64
    %163 = arith.cmpi eq, %162, %c0_i64_44 : i64
    cf.cond_br %163, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_45 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_45) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %164 = llvm.getelementptr %161[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %165 = llvm.getelementptr %161[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %166 = llvm.getelementptr %161[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %167 = llvm.load %164 : !llvm.ptr -> !llvm.ptr
    %168 = llvm.load %166 : !llvm.ptr -> !llvm.ptr
    %169 = llvm.ptrtoint %167 : !llvm.ptr to i64
    %c0_i64_46 = arith.constant 0 : i64
    %170 = arith.cmpi eq, %169, %c0_i64_46 : i64
    cf.cond_br %170, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c4_i32_47 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_47) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %171 = llvm.load %165 : !llvm.ptr -> i32
    %172 = arith.cmpi ne, %13, %171 : i32
    cf.cond_br %172, ^bb25, ^bb24
  ^bb23:  // pred: ^bb20
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %173 = llvm.call %167(%168, %148, %150) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c0_i32_49 = arith.constant 0 : i32
    %c1049512_i64_50 = arith.constant 1049512 : i64
    %174 = arith.extui %c0_i32_49 : i32 to i64
    %175 = arith.addi %174, %c1049512_i64_50 : i64
    %176 = llvm.getelementptr %11[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %177 = llvm.load volatile %176 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-1_i32_51 = arith.constant -1 : i32
    %178 = arith.addi %177, %c-1_i32_51 : i32
    llvm.store %178, %6 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb25:  // pred: ^bb22
    %c5_i32_52 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_52) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // pred: ^bb8
    %179 = llvm.load %0 : !llvm.ptr -> i32
    %180 = llvm.load %1 : !llvm.ptr -> i32
    call @f47(%arg0, %179, %180) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_53 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_53) : (i32) -> ()
    llvm.unreachable
  ^bb27:  // 2 preds: ^bb5, ^bb28
    %181 = llvm.getelementptr inbounds %22[%52] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %182 = llvm.load %181 : !llvm.ptr -> !llvm.ptr
    %183 = llvm.ptrtoint %182 : !llvm.ptr to i64
    %c0_i64_54 = arith.constant 0 : i64
    %184 = arith.cmpi eq, %183, %c0_i64_54 : i64
    cf.cond_br %184, ^bb30, ^bb29
  ^bb28:  // pred: ^bb5
    %c3_i32_55 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_55) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %185 = llvm.getelementptr %182[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %186 = llvm.getelementptr %182[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %187 = llvm.getelementptr %182[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %188 = llvm.load %185 : !llvm.ptr -> !llvm.ptr
    %189 = llvm.load %187 : !llvm.ptr -> !llvm.ptr
    %190 = llvm.ptrtoint %188 : !llvm.ptr to i64
    %c0_i64_56 = arith.constant 0 : i64
    %191 = arith.cmpi eq, %190, %c0_i64_56 : i64
    cf.cond_br %191, ^bb32, ^bb31
  ^bb30:  // pred: ^bb27
    %c4_i32_57 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_57) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %192 = llvm.load %186 : !llvm.ptr -> i32
    %193 = arith.cmpi ne, %13, %192 : i32
    cf.cond_br %193, ^bb34, ^bb33
  ^bb32:  // pred: ^bb29
    %c3_i32_58 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_58) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %194 = llvm.call %188(%189, %46, %47) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    cf.br ^bb3
  ^bb34:  // pred: ^bb31
    %c5_i32_59 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_59) : (i32) -> ()
    cf.br ^bb33
  }
  func.func @f47(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f49(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> i32
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f48(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %c1049508_i64 = arith.constant 1049508 : i64
    %15 = arith.extui %c0_i32_2 : i32 to i64
    %16 = arith.addi %15, %c1049508_i64 : i64
    %17 = llvm.getelementptr %5[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %18, %2 : i32, !llvm.ptr
    %c11_i32 = arith.constant 11 : i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_3 : i32
    %21 = arith.select %20, %18, %c11_i32 : i32
    %22 = arith.cmpi ult, %21, %12 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.getelementptr inbounds %10[%21] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.ptrtoint %24 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.cmpi eq, %25, %c0_i64 : i64
    cf.cond_br %26, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %27 = llvm.getelementptr %24[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.getelementptr %24[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.getelementptr %24[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %30 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.ptrtoint %30 : !llvm.ptr to i64
    %c0_i64_4 = arith.constant 0 : i64
    %33 = arith.cmpi eq, %32, %c0_i64_4 : i64
    cf.cond_br %33, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %34 = llvm.load %28 : !llvm.ptr -> i32
    %35 = arith.cmpi ne, %7, %34 : i32
    cf.cond_br %35, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_5 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_5) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %36 = llvm.call %30(%31, %13, %14) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f49(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2(%2: i32):  // no predecessors
    return %2 : i32
  }
  func.func @f50(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1049036_i32 = arith.constant 1049036 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f66(%arg0, %2, %c1049036_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f51(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f10(%arg0, %17, %18, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f52(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %c1049028_i32 = arith.constant 1049028 : i32
    %c5_i32 = arith.constant 5 : i32
    %3 = call @f73(%arg0, %2, %c1049028_i32, %c5_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func @f53(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %7 = arith.subi %6, %c32_i32 : i32
    llvm.store %7, %0 : i32, !llvm.ptr
    llvm.store %7, %2 : i32, !llvm.ptr
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %c24_i64 = arith.constant 24 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c24_i64 : i64
    %11 = llvm.getelementptr %5[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_0, %11 {alignment = 1 : i64} : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %c12_i64 = arith.constant 12 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c12_i64 : i64
    %15 = llvm.getelementptr %5[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c1049080_i32 = arith.constant 1049080 : i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %19 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049080_i32, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %c16_i64 = arith.constant 16 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c16_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %25 = arith.addi %24, %c8_i32 : i32
    %c1049116_i32 = arith.constant 1049116 : i32
    call @f63(%arg0, %25, %c1049116_i32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f54(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %3 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %15 = arith.addi %13, %14 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = arith.cmpi uge, %15, %16 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_5 : i32
    cf.cond_br %19, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32_6 = arith.constant 1 : i32
    llvm.store %c1_i32_6, %4 : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64 : i64
    %23 = llvm.getelementptr %10[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %5 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %25 = arith.cmpi ule, %c1_i32_7, %c31_i32 : i32
    %26 = scf.if %25 -> (i32) {
      %104 = arith.shli %24, %c1_i32_7 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_25 = arith.constant 0 : i32
      scf.yield %c0_i32_25 : i32
    }
    llvm.store %26, %1 : i32, !llvm.ptr
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_8 : i32
    %33 = arith.select %32, %26, %27 : i32
    llvm.store %33, %1 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_9 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_10 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32 : i32
    %c31_i32_11 = arith.constant 31 : i32
    %c31_i32_12 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_11, %c31_i32_12 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_11 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_25 = arith.constant 0 : i32
      scf.yield %c0_i32_25 : i32
    }
    llvm.store %41, %2 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_13 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_14 = arith.constant 0 : i32
    %c0_i32_15 = arith.constant 0 : i32
    call @f55(%arg0, %c0_i32_14, %c0_i32_15) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %45 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_16 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_16 : i32
    %51 = llvm.load %2 : !llvm.ptr -> i32
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f56(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_17 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_18 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %4 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_20 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_21 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_21 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_22 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_22 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_23 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_23 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f55(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_24 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_24) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f55(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // pred: ^bb1
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %5 = llvm.load %1 : !llvm.ptr -> i32
    call @f58(%arg0, %4, %5) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    call @f53(%arg0) : (!llvm.ptr) -> ()
    %c9_i32_1 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_1) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f56(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_6 = arith.constant 1 : i32
    llvm.store %c1_i32_6, %4 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    llvm.store %c0_i32_7, %5 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %6 : i32, !llvm.ptr
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32_8 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_9 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb1, ^bb4, ^bb6
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %6 : !llvm.ptr -> i32
    %16 = arith.addi %14, %15 : i32
    %17 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %16 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %9[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %17, %20 {alignment = 1 : i64} : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %22 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_10 = arith.constant 0 : i64
    %23 = arith.extui %21 : i32 to i64
    %24 = arith.addi %23, %c0_i64_10 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %27 = arith.cmpi slt, %26, %c0_i32_11 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_12 : i32
    cf.cond_br %29, ^bb3, ^bb5
  ^bb5:  // pred: ^bb4
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c4_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %35 = arith.cmpi eq, %34, %c0_i32_13 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_14 : i32
    cf.cond_br %37, ^bb10, ^bb11
  ^bb6:  // 2 preds: ^bb7, ^bb8
    %c8_i32 = arith.constant 8 : i32
    llvm.store %c8_i32, %6 : i32, !llvm.ptr
    %38 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %38, %5 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb7:  // pred: ^bb9
    %c1_i32_15 = arith.constant 1 : i32
    llvm.store %c1_i32_15, %4 : i32, !llvm.ptr
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %c4_i64_17 = arith.constant 4 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c4_i64_17 : i64
    %42 = llvm.getelementptr %9[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_16, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb15, ^bb17, ^bb18
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %44 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_18 = arith.constant 4 : i64
    %45 = arith.extui %43 : i32 to i64
    %46 = arith.addi %45, %c4_i64_18 : i64
    %47 = llvm.getelementptr %9[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %4 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // 3 preds: ^bb12, ^bb14, ^bb16
    %48 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %49 = arith.cmpi eq, %48, %c0_i32_20 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_21 : i32
    cf.cond_br %51, ^bb7, ^bb18
  ^bb10:  // pred: ^bb5
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_22 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_22 : i32
    cf.cond_br %53, ^bb16, ^bb17
  ^bb11:  // pred: ^bb5
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c8_i64 : i64
    %57 = llvm.getelementptr %9[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %58, %4 : i32, !llvm.ptr
    %c0_i32_23 = arith.constant 0 : i32
    %59 = arith.cmpi ne, %58, %c0_i32_23 : i32
    cf.cond_br %59, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %60 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64_24 : i64
    %63 = llvm.getelementptr %9[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i32
    %65 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_25 = arith.constant 1 : i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %67 = call @f11(%arg0, %64, %65, %c1_i32_25, %66) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %67, %4 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb13:  // pred: ^bb11
    %68 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_26 : i32
    cf.cond_br %69, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %c0_i32_27 = arith.constant 0 : i32
    %c1049497_i64 = arith.constant 1049497 : i64
    %70 = arith.extui %c0_i32_27 : i32 to i64
    %71 = arith.addi %70, %c1049497_i64 : i64
    %72 = llvm.getelementptr %9[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i8
    %74 = arith.extui %73 : i8 to i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_28 = arith.constant 1 : i32
    %76 = call @f9(%arg0, %75, %c1_i32_28) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %76, %4 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb15:  // pred: ^bb13
    %c1_i32_29 = arith.constant 1 : i32
    llvm.store %c1_i32_29, %4 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb16:  // pred: ^bb10
    %c0_i32_30 = arith.constant 0 : i32
    %c1049497_i64_31 = arith.constant 1049497 : i64
    %77 = arith.extui %c0_i32_30 : i32 to i64
    %78 = arith.addi %77, %c1049497_i64_31 : i64
    %79 = llvm.getelementptr %9[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i8
    %81 = arith.extui %80 : i8 to i32
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_32 = arith.constant 1 : i32
    %83 = call @f9(%arg0, %82, %c1_i32_32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %83, %4 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb17:  // pred: ^bb10
    %c1_i32_33 = arith.constant 1 : i32
    llvm.store %c1_i32_33, %4 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb18:  // pred: ^bb9
    cf.br ^bb8
  }
  func.func @f57(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %1 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %17, %2 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %18 = arith.cmpi eq, %17, %c-1_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_5 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_6 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    llvm.store %c1_i32_7, %3 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_8 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %24 = arith.cmpi ule, %c1_i32_8, %c31_i32 : i32
    %25 = scf.if %24 -> (i32) {
      %104 = arith.shli %23, %c1_i32_8 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    llvm.store %25, %4 : i32, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    %27 = arith.addi %26, %c1_i32_9 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = llvm.load %5 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_10 : i32
    %33 = arith.select %32, %25, %27 : i32
    llvm.store %33, %4 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_11 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_11 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_12 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %4 : i32, !llvm.ptr
    %c-1_i32_13 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32_13 : i32
    %c31_i32_14 = arith.constant 31 : i32
    %c31_i32_15 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_14, %c31_i32_15 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_14 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    llvm.store %41, %5 : i32, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_16 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_17 = arith.constant 0 : i32
    %c0_i32_18 = arith.constant 0 : i32
    call @f55(%arg0, %c0_i32_17, %c0_i32_18) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_19 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_19 : i32
    %51 = llvm.load %5 : !llvm.ptr -> i32
    %52 = llvm.load %4 : !llvm.ptr -> i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f56(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_20 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_21 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_23 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_23 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_24 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_24 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_25 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_25 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_26 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_26 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f55(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_27 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_27) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f58(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    call @f7(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f59(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.subi %14, %c16_i32 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %13[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load volatile %19 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %20, %3 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_8 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_9 : i32
    cf.cond_br %23, ^bb7, ^bb8
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64 : i64
    %28 = llvm.getelementptr %13[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    %30 = arith.extui %24 : i32 to i64
    %31 = arith.addi %30, %c0_i64_10 : i64
    %32 = llvm.getelementptr %13[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i64, !llvm.ptr
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %34 = arith.addi %33, %c8_i32 : i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_11 = arith.constant 8 : i32
    %36 = arith.addi %35, %c8_i32_11 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c0_i64_12 : i64
    %39 = llvm.getelementptr %13[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %41 = arith.extui %34 : i32 to i64
    %42 = arith.addi %41, %c0_i64_13 : i64
    %43 = llvm.getelementptr %13[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_14 = arith.constant 16 : i32
    %45 = arith.addi %44, %c16_i32_14 : i32
    llvm.store %45, %10 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb6, ^bb25
    %46 = llvm.load %5 : !llvm.ptr -> i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    call @f55(%arg0, %46, %47) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb7, ^bb26
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c8_i64 = arith.constant 8 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c8_i64 : i64
    %51 = llvm.getelementptr %13[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_15, %51 {alignment = 1 : i64} : i32, !llvm.ptr
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i64_16 = arith.constant 4 : i64
    %54 = arith.extui %52 : i32 to i64
    %55 = arith.addi %54, %c4_i64_16 : i64
    %56 = llvm.getelementptr %13[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %59 = arith.extui %57 : i32 to i64
    %60 = arith.addi %59, %c0_i64_17 : i64
    %61 = llvm.getelementptr %13[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %62 = llvm.load %2 : !llvm.ptr -> i32
    %c1049036_i32 = arith.constant 1049036 : i32
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = call @f66(%arg0, %62, %c1049036_i32, %63) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %65 = arith.cmpi eq, %64, %c0_i32_18 : i32
    %66 = arith.extui %65 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %67 = arith.cmpi ne, %66, %c0_i32_19 : i32
    cf.cond_br %67, ^bb3, ^bb27
  ^bb6:  // pred: ^bb20
    %c0_i32_20 = arith.constant 0 : i32
    llvm.store %c0_i32_20, %5 : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %69 = arith.cmpi slt, %68, %c0_i32_21 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_22 : i32
    cf.cond_br %71, ^bb4, ^bb25
  ^bb7:  // 4 preds: ^bb1, ^bb21, ^bb22, ^bb24
    %c1_i32_23 = arith.constant 1 : i32
    llvm.store %c1_i32_23, %7 : i32, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    llvm.store %c0_i32_24, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb1
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c0_i64_25 : i64
    %75 = llvm.getelementptr %13[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %4 : i32, !llvm.ptr
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %78 = arith.andi %77, %c3_i32 : i32
    llvm.store %78, %5 : i32, !llvm.ptr
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %80 = arith.cmpi uge, %79, %c4_i32 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_26 : i32
    cf.cond_br %82, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %83 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_27 = arith.constant 0 : i32
    %84 = arith.cmpi eq, %83, %c0_i32_27 : i32
    %85 = arith.extui %84 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %85, %c0_i32_28 : i32
    cf.cond_br %86, ^bb15, ^bb16
  ^bb10:  // pred: ^bb8
    %87 = llvm.load %4 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %88 = arith.addi %87, %c28_i32 : i32
    llvm.store %88, %7 : i32, !llvm.ptr
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %90 = arith.andi %89, %c-4_i32 : i32
    llvm.store %90, %8 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %3 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    llvm.store %c0_i32_30, %6 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c0_i32_31 = arith.constant 0 : i32
    llvm.store %c0_i32_31, %3 : i32, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    llvm.store %c0_i32_32, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb14
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb13
    %91 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_33 : i64
    %94 = llvm.getelementptr %13[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    %96 = llvm.load %7 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %97 = arith.addi %96, %c-8_i32 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c0_i64_34 : i64
    %100 = llvm.getelementptr %13[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    %102 = llvm.load %7 : !llvm.ptr -> i32
    %c-16_i32 = arith.constant -16 : i32
    %103 = arith.addi %102, %c-16_i32 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_35 : i64
    %106 = llvm.getelementptr %13[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i32
    %108 = llvm.load %7 : !llvm.ptr -> i32
    %c-24_i32 = arith.constant -24 : i32
    %109 = arith.addi %108, %c-24_i32 : i32
    %c0_i64_36 = arith.constant 0 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c0_i64_36 : i64
    %112 = llvm.getelementptr %13[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = llvm.load volatile %112 {alignment = 1 : i64} : !llvm.ptr -> i32
    %114 = llvm.load %3 : !llvm.ptr -> i32
    %115 = arith.addi %113, %114 : i32
    %116 = arith.addi %107, %115 : i32
    %117 = arith.addi %101, %116 : i32
    %118 = arith.addi %95, %117 : i32
    llvm.store %118, %3 : i32, !llvm.ptr
    %119 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %120 = arith.addi %119, %c32_i32 : i32
    llvm.store %120, %7 : i32, !llvm.ptr
    %121 = llvm.load %8 : !llvm.ptr -> i32
    %122 = llvm.load %6 : !llvm.ptr -> i32
    %c4_i32_37 = arith.constant 4 : i32
    %123 = arith.addi %122, %c4_i32_37 : i32
    llvm.store %123, %6 : i32, !llvm.ptr
    %124 = arith.cmpi eq, %121, %123 : i32
    %125 = arith.extui %124 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %126 = arith.cmpi eq, %125, %c0_i32_38 : i32
    %127 = arith.extui %126 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %128 = arith.cmpi ne, %127, %c0_i32_39 : i32
    cf.cond_br %128, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // 2 preds: ^bb9, ^bb17
    %129 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %130 = arith.extui %129 : i32 to i64
    %131 = arith.addi %130, %c12_i64 : i64
    %132 = llvm.getelementptr %13[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %133 = llvm.load volatile %132 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_40 = arith.constant 0 : i32
    %134 = arith.cmpi eq, %133, %c0_i32_40 : i32
    %135 = arith.extui %134 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %136 = arith.cmpi ne, %135, %c0_i32_41 : i32
    cf.cond_br %136, ^bb20, ^bb21
  ^bb16:  // pred: ^bb9
    %137 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_42 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %138 = arith.cmpi ule, %c3_i32_42, %c31_i32 : i32
    %139 = scf.if %138 -> (i32) {
      %188 = arith.shli %137, %c3_i32_42 : i32
      scf.yield %188 : i32
    } else {
      %c0_i32_62 = arith.constant 0 : i32
      scf.yield %c0_i32_62 : i32
    }
    %140 = llvm.load %4 : !llvm.ptr -> i32
    %141 = arith.addi %139, %140 : i32
    %c4_i32_43 = arith.constant 4 : i32
    %142 = arith.addi %141, %c4_i32_43 : i32
    llvm.store %142, %7 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb17:  // pred: ^bb19
    cf.br ^bb15
  ^bb18:  // 2 preds: ^bb16, ^bb18
    %143 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_44 : i64
    %146 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i32
    %148 = llvm.load %3 : !llvm.ptr -> i32
    %149 = arith.addi %147, %148 : i32
    llvm.store %149, %3 : i32, !llvm.ptr
    %150 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_45 = arith.constant 8 : i32
    %151 = arith.addi %150, %c8_i32_45 : i32
    llvm.store %151, %7 : i32, !llvm.ptr
    %152 = llvm.load %5 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %153 = arith.addi %152, %c-1_i32 : i32
    llvm.store %153, %5 : i32, !llvm.ptr
    %c0_i32_46 = arith.constant 0 : i32
    %154 = arith.cmpi ne, %153, %c0_i32_46 : i32
    cf.cond_br %154, ^bb18, ^bb19
  ^bb19:  // pred: ^bb18
    cf.br ^bb17
  ^bb20:  // 2 preds: ^bb15, ^bb23
    %155 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_47 = arith.constant 0 : i32
    %156 = arith.cmpi ne, %155, %c0_i32_47 : i32
    cf.cond_br %156, ^bb6, ^bb24
  ^bb21:  // pred: ^bb15
    %157 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_48 = arith.constant 0 : i32
    %158 = arith.cmpi slt, %157, %c0_i32_48 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %160 = arith.cmpi ne, %159, %c0_i32_49 : i32
    cf.cond_br %160, ^bb7, ^bb22
  ^bb22:  // pred: ^bb21
    %161 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_50 = arith.constant 16 : i32
    %162 = arith.cmpi ult, %161, %c16_i32_50 : i32
    %163 = arith.extui %162 : i1 to i32
    %164 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_51 = arith.constant 4 : i64
    %165 = arith.extui %164 : i32 to i64
    %166 = arith.addi %165, %c4_i64_51 : i64
    %167 = llvm.getelementptr %13[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %168 = llvm.load volatile %167 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_52 = arith.constant 0 : i32
    %169 = arith.cmpi eq, %168, %c0_i32_52 : i32
    %170 = arith.extui %169 : i1 to i32
    %171 = arith.andi %163, %170 : i32
    %c0_i32_53 = arith.constant 0 : i32
    %172 = arith.cmpi ne, %171, %c0_i32_53 : i32
    cf.cond_br %172, ^bb7, ^bb23
  ^bb23:  // pred: ^bb22
    %173 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_54 = arith.constant 1 : i32
    %c31_i32_55 = arith.constant 31 : i32
    %174 = arith.cmpi ule, %c1_i32_54, %c31_i32_55 : i32
    %175 = scf.if %174 -> (i32) {
      %188 = arith.shli %173, %c1_i32_54 : i32
      scf.yield %188 : i32
    } else {
      %c0_i32_62 = arith.constant 0 : i32
      scf.yield %c0_i32_62 : i32
    }
    llvm.store %175, %3 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb24:  // pred: ^bb20
    cf.br ^bb7
  ^bb25:  // pred: ^bb6
    %c0_i32_56 = arith.constant 0 : i32
    %c1049497_i64 = arith.constant 1049497 : i64
    %176 = arith.extui %c0_i32_56 : i32 to i64
    %177 = arith.addi %176, %c1049497_i64 : i64
    %178 = llvm.getelementptr %13[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %179 = llvm.load volatile %178 {alignment = 1 : i64} : !llvm.ptr -> i8
    %180 = arith.extui %179 : i8 to i32
    %c1_i32_57 = arith.constant 1 : i32
    llvm.store %c1_i32_57, %5 : i32, !llvm.ptr
    %181 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_58 = arith.constant 1 : i32
    %182 = call @f9(%arg0, %181, %c1_i32_58) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %182, %7 : i32, !llvm.ptr
    %c0_i32_59 = arith.constant 0 : i32
    %183 = arith.cmpi eq, %182, %c0_i32_59 : i32
    %184 = arith.extui %183 : i1 to i32
    %c0_i32_60 = arith.constant 0 : i32
    %185 = arith.cmpi ne, %184, %c0_i32_60 : i32
    cf.cond_br %185, ^bb4, ^bb26
  ^bb26:  // pred: ^bb25
    cf.br ^bb5
  ^bb27:  // pred: ^bb5
    %c1049148_i32 = arith.constant 1049148 : i32
    %c86_i32 = arith.constant 86 : i32
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %c15_i32 = arith.constant 15 : i32
    %187 = arith.addi %186, %c15_i32 : i32
    %c1049132_i32 = arith.constant 1049132 : i32
    %c1049260_i32 = arith.constant 1049260 : i32
    call @f67(%arg0, %c1049148_i32, %c86_i32, %187, %c1049132_i32, %c1049260_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32_61 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_61) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f60(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %12 = arith.cmpi ult, %11, %c128_i32 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb6, ^bb7
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %16 = arith.addi %15, %c16_i32_4 : i32
    llvm.store %16, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %8[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c8_i64 : i64
    %25 = llvm.getelementptr %8[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %26, %3 : i32, !llvm.ptr
    %27 = arith.subi %21, %26 : i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = arith.cmpi uge, %27, %28 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_5 : i32
    cf.cond_br %31, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %34 = arith.andi %33, %c63_i32 : i32
    %c128_i32_6 = arith.constant 128 : i32
    %35 = arith.ori %34, %c128_i32_6 : i32
    %c13_i64 = arith.constant 13 : i64
    %36 = arith.extui %32 : i32 to i64
    %37 = arith.addi %36, %c13_i64 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = arith.trunci %35 : i32 to i8
    llvm.store volatile %39, %38 {alignment = 1 : i64} : i8, !llvm.ptr
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32 = arith.constant 31 : i32
    %42 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %43 = scf.if %42 -> (i32) {
      %186 = arith.shrui %41, %c6_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c192_i32 = arith.constant 192 : i32
    %44 = arith.ori %43, %c192_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %45 = arith.extui %40 : i32 to i64
    %46 = arith.addi %45, %c12_i64 : i64
    %47 = llvm.getelementptr %8[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = arith.trunci %44 : i32 to i8
    llvm.store volatile %48, %47 {alignment = 1 : i64} : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_7 = arith.constant 8 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c8_i64_7 : i64
    %52 = llvm.getelementptr %8[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %53, %3 : i32, !llvm.ptr
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c0_i64_8 : i64
    %57 = llvm.getelementptr %8[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    %59 = arith.cmpi eq, %53, %58 : i32
    %60 = arith.extui %59 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %61 = arith.cmpi eq, %60, %c0_i32_9 : i32
    %62 = arith.extui %61 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %63 = arith.cmpi ne, %62, %c0_i32_10 : i32
    cf.cond_br %63, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %c12_i64_12 = arith.constant 12 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c12_i64_12 : i64
    %67 = llvm.getelementptr %8[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_11, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %69 = arith.cmpi ult, %68, %c2048_i32 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_13 : i32
    cf.cond_br %71, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %73 = arith.cmpi uge, %72, %c65536_i32 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_14 : i32
    cf.cond_br %75, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_15 = arith.constant 63 : i32
    %78 = arith.andi %77, %c63_i32_15 : i32
    %c128_i32_16 = arith.constant 128 : i32
    %79 = arith.ori %78, %c128_i32_16 : i32
    %c15_i64 = arith.constant 15 : i64
    %80 = arith.extui %76 : i32 to i64
    %81 = arith.addi %80, %c15_i64 : i64
    %82 = llvm.getelementptr %8[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %83 = arith.trunci %79 : i32 to i8
    llvm.store volatile %83, %82 {alignment = 1 : i64} : i8, !llvm.ptr
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_17 = arith.constant 6 : i32
    %c31_i32_18 = arith.constant 31 : i32
    %86 = arith.cmpi ule, %c6_i32_17, %c31_i32_18 : i32
    %87 = scf.if %86 -> (i32) {
      %186 = arith.shrui %85, %c6_i32_17 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c63_i32_19 = arith.constant 63 : i32
    %88 = arith.andi %87, %c63_i32_19 : i32
    %c128_i32_20 = arith.constant 128 : i32
    %89 = arith.ori %88, %c128_i32_20 : i32
    %c14_i64 = arith.constant 14 : i64
    %90 = arith.extui %84 : i32 to i64
    %91 = arith.addi %90, %c14_i64 : i64
    %92 = llvm.getelementptr %8[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = arith.trunci %89 : i32 to i8
    llvm.store volatile %93, %92 {alignment = 1 : i64} : i8, !llvm.ptr
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_21 = arith.constant 31 : i32
    %96 = arith.cmpi ule, %c12_i32, %c31_i32_21 : i32
    %97 = scf.if %96 -> (i32) {
      %186 = arith.shrui %95, %c12_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c63_i32_22 = arith.constant 63 : i32
    %98 = arith.andi %97, %c63_i32_22 : i32
    %c128_i32_23 = arith.constant 128 : i32
    %99 = arith.ori %98, %c128_i32_23 : i32
    %c13_i64_24 = arith.constant 13 : i64
    %100 = arith.extui %94 : i32 to i64
    %101 = arith.addi %100, %c13_i64_24 : i64
    %102 = llvm.getelementptr %8[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = arith.trunci %99 : i32 to i8
    llvm.store volatile %103, %102 {alignment = 1 : i64} : i8, !llvm.ptr
    %104 = llvm.load %2 : !llvm.ptr -> i32
    %105 = llvm.load %1 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_25 = arith.constant 31 : i32
    %106 = arith.cmpi ule, %c18_i32, %c31_i32_25 : i32
    %107 = scf.if %106 -> (i32) {
      %186 = arith.shrui %105, %c18_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c7_i32 = arith.constant 7 : i32
    %108 = arith.andi %107, %c7_i32 : i32
    %c240_i32 = arith.constant 240 : i32
    %109 = arith.ori %108, %c240_i32 : i32
    %c12_i64_26 = arith.constant 12 : i64
    %110 = arith.extui %104 : i32 to i64
    %111 = arith.addi %110, %c12_i64_26 : i64
    %112 = llvm.getelementptr %8[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = arith.trunci %109 : i32 to i8
    llvm.store volatile %113, %112 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %115 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_27 = arith.constant 63 : i32
    %116 = arith.andi %115, %c63_i32_27 : i32
    %c128_i32_28 = arith.constant 128 : i32
    %117 = arith.ori %116, %c128_i32_28 : i32
    %c14_i64_29 = arith.constant 14 : i64
    %118 = arith.extui %114 : i32 to i64
    %119 = arith.addi %118, %c14_i64_29 : i64
    %120 = llvm.getelementptr %8[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = arith.trunci %117 : i32 to i8
    llvm.store volatile %121, %120 {alignment = 1 : i64} : i8, !llvm.ptr
    %122 = llvm.load %2 : !llvm.ptr -> i32
    %123 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_30 = arith.constant 12 : i32
    %c31_i32_31 = arith.constant 31 : i32
    %124 = arith.cmpi ule, %c12_i32_30, %c31_i32_31 : i32
    %125 = scf.if %124 -> (i32) {
      %186 = arith.shrui %123, %c12_i32_30 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c224_i32 = arith.constant 224 : i32
    %126 = arith.ori %125, %c224_i32 : i32
    %c12_i64_32 = arith.constant 12 : i64
    %127 = arith.extui %122 : i32 to i64
    %128 = arith.addi %127, %c12_i64_32 : i64
    %129 = llvm.getelementptr %8[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = arith.trunci %126 : i32 to i8
    llvm.store volatile %130, %129 {alignment = 1 : i64} : i8, !llvm.ptr
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %132 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_33 = arith.constant 6 : i32
    %c31_i32_34 = arith.constant 31 : i32
    %133 = arith.cmpi ule, %c6_i32_33, %c31_i32_34 : i32
    %134 = scf.if %133 -> (i32) {
      %186 = arith.shrui %132, %c6_i32_33 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c63_i32_35 = arith.constant 63 : i32
    %135 = arith.andi %134, %c63_i32_35 : i32
    %c128_i32_36 = arith.constant 128 : i32
    %136 = arith.ori %135, %c128_i32_36 : i32
    %c13_i64_37 = arith.constant 13 : i64
    %137 = arith.extui %131 : i32 to i64
    %138 = arith.addi %137, %c13_i64_37 : i64
    %139 = llvm.getelementptr %8[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = arith.trunci %136 : i32 to i8
    llvm.store volatile %140, %139 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %141 = llvm.load %0 : !llvm.ptr -> i32
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_38 = arith.constant 1 : i32
    %143 = arith.addi %142, %c1_i32_38 : i32
    %c8_i64_39 = arith.constant 8 : i64
    %144 = arith.extui %141 : i32 to i64
    %145 = arith.addi %144, %c8_i64_39 : i64
    %146 = llvm.getelementptr %8[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %146 {alignment = 1 : i64} : i32, !llvm.ptr
    %147 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %148 = arith.extui %147 : i32 to i64
    %149 = arith.addi %148, %c4_i64 : i64
    %150 = llvm.getelementptr %8[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i32
    %152 = llvm.load %3 : !llvm.ptr -> i32
    %153 = arith.addi %151, %152 : i32
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %155 = arith.extui %153 : i32 to i64
    %156 = arith.addi %155, %c0_i64_40 : i64
    %157 = llvm.getelementptr %8[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %158 = arith.trunci %154 : i32 to i8
    llvm.store volatile %158, %157 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %159 = llvm.load %0 : !llvm.ptr -> i32
    call @f57(%arg0, %159) : (!llvm.ptr, i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %160 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_41 = arith.constant 4 : i64
    %161 = arith.extui %160 : i32 to i64
    %162 = arith.addi %161, %c4_i64_41 : i64
    %163 = llvm.getelementptr %8[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = llvm.load volatile %163 {alignment = 1 : i64} : !llvm.ptr -> i32
    %165 = llvm.load %3 : !llvm.ptr -> i32
    %166 = arith.addi %164, %165 : i32
    %167 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_42 = arith.constant 12 : i32
    %168 = arith.addi %167, %c12_i32_42 : i32
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %170 = call @f77(%arg0, %166, %168, %169) : (!llvm.ptr, i32, i32, i32) -> i32
    %171 = llvm.load %0 : !llvm.ptr -> i32
    %172 = llvm.load %3 : !llvm.ptr -> i32
    %173 = llvm.load %1 : !llvm.ptr -> i32
    %174 = arith.addi %172, %173 : i32
    %c8_i64_43 = arith.constant 8 : i64
    %175 = arith.extui %171 : i32 to i64
    %176 = arith.addi %175, %c8_i64_43 : i64
    %177 = llvm.getelementptr %8[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %174, %177 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %178 = llvm.load %0 : !llvm.ptr -> i32
    %179 = llvm.load %3 : !llvm.ptr -> i32
    %180 = llvm.load %1 : !llvm.ptr -> i32
    call @f54(%arg0, %178, %179, %180) : (!llvm.ptr, i32, i32, i32) -> ()
    %181 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_44 = arith.constant 8 : i64
    %182 = arith.extui %181 : i32 to i64
    %183 = arith.addi %182, %c8_i64_44 : i64
    %184 = llvm.getelementptr %8[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %185 = llvm.load volatile %184 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %185, %3 : i32, !llvm.ptr
    cf.br ^bb13
  }
  func.func @f61(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = arith.subi %11, %16 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_3 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = call @f77(%arg0, %29, %30, %31) : (!llvm.ptr, i32, i32, i32) -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = arith.addi %34, %35 : i32
    %c8_i64_4 = arith.constant 8 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c8_i64_4 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // pred: ^bb1
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    call @f54(%arg0, %40, %41, %42) : (!llvm.ptr, i32, i32, i32) -> ()
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_6 = arith.constant 8 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c8_i64_6 : i64
    %46 = llvm.getelementptr %6[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %47, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f62(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @f60(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func @f63(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %11 = arith.addi %10, %c16_i32 : i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_2 = arith.constant 16 : i32
    %13 = arith.addi %12, %c16_i32_2 : i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %7[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_3 = arith.constant 0 : i64
    %18 = arith.extui %11 : i32 to i64
    %19 = arith.addi %18, %c0_i64_3 : i64
    %20 = llvm.getelementptr %7[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %17, %20 {alignment = 1 : i64} : i64, !llvm.ptr
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %22 = arith.addi %21, %c8_i32 : i32
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_4 = arith.constant 8 : i32
    %24 = arith.addi %23, %c8_i32_4 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_5 : i64
    %27 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %29 = arith.extui %22 : i32 to i64
    %30 = arith.addi %29, %c0_i64_6 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_7 = arith.constant 1 : i32
    %c28_i64 = arith.constant 28 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c28_i64 : i64
    %35 = llvm.getelementptr %7[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = arith.trunci %c1_i32_7 : i32 to i16
    llvm.store volatile %36, %35 {alignment = 1 : i64} : i16, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %39 = arith.extui %37 : i32 to i64
    %40 = arith.addi %39, %c24_i64 : i64
    %41 = llvm.getelementptr %7[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %38, %41 {alignment = 1 : i64} : i32, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_8 : i64
    %46 = llvm.getelementptr %7[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_9 = arith.constant 0 : i64
    %48 = arith.extui %42 : i32 to i64
    %49 = arith.addi %48, %c0_i64_9 : i64
    %50 = llvm.getelementptr %7[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i64, !llvm.ptr
    %51 = llvm.load %2 : !llvm.ptr -> i32
    call @f38(%arg0, %51) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f64(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    %19 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %19 : !llvm.ptr -> i32
    %21 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %15 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    %24 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %15 : !llvm.ptr -> i64
    %26 = arith.trunci %25 : i64 to i32
    %27 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %15 : !llvm.ptr -> i64
    %29 = arith.trunci %28 : i64 to i32
    %30 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %15 : !llvm.ptr -> i64
    %32 = arith.trunci %31 : i64 to i32
    %33 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.load %15 : !llvm.ptr -> i64
    %35 = arith.trunci %34 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c0_i64 : i64
    %39 = llvm.getelementptr %11[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %40, %3 : i32, !llvm.ptr
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c8_i64 : i64
    %44 = llvm.getelementptr %11[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %45, %4 : i32, !llvm.ptr
    %46 = arith.ori %40, %45 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %47 = arith.cmpi eq, %46, %c0_i32_8 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_9 : i32
    cf.cond_br %49, ^bb3, ^bb4
  ^bb2(%50: i32):  // 5 preds: ^bb39, ^bb62, ^bb80, ^bb82, ^bb112
    return %50 : i32
  ^bb3:  // pred: ^bb1
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c20_i64 : i64
    %54 = llvm.getelementptr %11[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %59 = arith.extui %58 : i32 to i64
    %60 = arith.addi %59, %c24_i64 : i64
    %61 = llvm.getelementptr %11[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = llvm.load volatile %61 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c12_i64 : i64
    %65 = llvm.getelementptr %11[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    %67 = arith.cmpi ult, %66, %35 : i32
    cf.cond_br %67, ^bb106, ^bb107
  ^bb4:  // pred: ^bb1
    %68 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %69 = arith.cmpi eq, %68, %c0_i32_10 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_11 : i32
    cf.cond_br %71, ^bb5, ^bb6
  ^bb5:  // 4 preds: ^bb4, ^bb7, ^bb11, ^bb24
    %72 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %73 = arith.cmpi ne, %72, %c0_i32_12 : i32
    cf.cond_br %73, ^bb31, ^bb32
  ^bb6:  // pred: ^bb4
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %76 = arith.addi %74, %75 : i32
    llvm.store %76, %5 : i32, !llvm.ptr
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_13 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64_13 : i64
    %80 = llvm.getelementptr %11[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %6 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_14 : i32
    cf.cond_br %82, ^bb8, ^bb9
  ^bb7:  // 2 preds: ^bb9, ^bb10
    %83 = llvm.load %8 : !llvm.ptr -> i32
    %84 = llvm.load %5 : !llvm.ptr -> i32
    %85 = arith.cmpi eq, %83, %84 : i32
    %86 = arith.extui %85 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %87 = arith.cmpi ne, %86, %c0_i32_15 : i32
    cf.cond_br %87, ^bb5, ^bb21
  ^bb8:  // pred: ^bb6
    %c0_i32_16 = arith.constant 0 : i32
    llvm.store %c0_i32_16, %7 : i32, !llvm.ptr
    %88 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %88, %8 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb9:  // pred: ^bb6
    %c0_i32_17 = arith.constant 0 : i32
    llvm.store %c0_i32_17, %7 : i32, !llvm.ptr
    %89 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %89, %8 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb10:  // pred: ^bb20
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb8, ^bb13
    %90 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %90, %4 : i32, !llvm.ptr
    %91 = llvm.load %5 : !llvm.ptr -> i32
    %92 = arith.cmpi eq, %90, %91 : i32
    %93 = arith.extui %92 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %94 = arith.cmpi ne, %93, %c0_i32_18 : i32
    cf.cond_br %94, ^bb5, ^bb12
  ^bb12:  // pred: ^bb11
    %95 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %96 = arith.extui %95 : i32 to i64
    %97 = arith.addi %96, %c0_i64_19 : i64
    %98 = llvm.getelementptr %11[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %99 = llvm.load volatile %98 {alignment = 1 : i64} : !llvm.ptr -> i8
    %100 = arith.extsi %99 : i8 to i32
    llvm.store %100, %8 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %101 = arith.cmpi sle, %100, %c-1_i32 : i32
    %102 = arith.extui %101 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %102, %c0_i32_20 : i32
    cf.cond_br %103, ^bb14, ^bb15
  ^bb13:  // 4 preds: ^bb15, ^bb17, ^bb18, ^bb19
    %104 = llvm.load %8 : !llvm.ptr -> i32
    %105 = llvm.load %4 : !llvm.ptr -> i32
    %106 = arith.subi %104, %105 : i32
    %107 = llvm.load %7 : !llvm.ptr -> i32
    %108 = arith.addi %106, %107 : i32
    llvm.store %108, %7 : i32, !llvm.ptr
    %109 = llvm.load %6 : !llvm.ptr -> i32
    %c-1_i32_21 = arith.constant -1 : i32
    %110 = arith.addi %109, %c-1_i32_21 : i32
    llvm.store %110, %6 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %111 = arith.cmpi ne, %110, %c0_i32_22 : i32
    cf.cond_br %111, ^bb11, ^bb20
  ^bb14:  // pred: ^bb12
    %112 = llvm.load %8 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %113 = arith.cmpi uge, %112, %c-32_i32 : i32
    %114 = arith.extui %113 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %115 = arith.cmpi ne, %114, %c0_i32_23 : i32
    cf.cond_br %115, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %116 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %117 = arith.addi %116, %c1_i32_24 : i32
    llvm.store %117, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb14
    %118 = llvm.load %8 : !llvm.ptr -> i32
    %c-16_i32 = arith.constant -16 : i32
    %119 = arith.cmpi uge, %118, %c-16_i32 : i32
    %120 = arith.extui %119 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %121 = arith.cmpi ne, %120, %c0_i32_25 : i32
    cf.cond_br %121, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %122 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %123 = arith.addi %122, %c2_i32 : i32
    llvm.store %123, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb18:  // pred: ^bb16
    %124 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %125 = arith.addi %124, %c4_i32 : i32
    llvm.store %125, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb19:  // pred: ^bb16
    %126 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %127 = arith.addi %126, %c3_i32 : i32
    llvm.store %127, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb20:  // pred: ^bb13
    cf.br ^bb10
  ^bb21:  // pred: ^bb7
    %128 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c0_i64_26 : i64
    %131 = llvm.getelementptr %11[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load volatile %131 {alignment = 1 : i64} : !llvm.ptr -> i8
    %133 = arith.extsi %132 : i8 to i32
    llvm.store %133, %4 : i32, !llvm.ptr
    %c-1_i32_27 = arith.constant -1 : i32
    %134 = arith.cmpi sgt, %133, %c-1_i32_27 : i32
    %135 = arith.extui %134 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %136 = arith.cmpi ne, %135, %c0_i32_28 : i32
    cf.cond_br %136, ^bb22, ^bb23
  ^bb22:  // 2 preds: ^bb21, ^bb23
    %137 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_29 = arith.constant 0 : i32
    %138 = arith.cmpi eq, %137, %c0_i32_29 : i32
    %139 = arith.extui %138 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %140 = arith.cmpi ne, %139, %c0_i32_30 : i32
    cf.cond_br %140, ^bb25, ^bb26
  ^bb23:  // pred: ^bb21
    %141 = llvm.load %4 : !llvm.ptr -> i32
    %c-32_i32_31 = arith.constant -32 : i32
    %142 = arith.cmpi ult, %141, %c-32_i32_31 : i32
    %143 = arith.extui %142 : i1 to i32
    cf.br ^bb22
  ^bb24:  // 3 preds: ^bb25, ^bb27, ^bb29
    %144 = llvm.load %7 : !llvm.ptr -> i32
    %145 = llvm.load %2 : !llvm.ptr -> i32
    %146 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_32 = arith.constant 0 : i32
    %147 = arith.cmpi ne, %146, %c0_i32_32 : i32
    %148 = arith.select %147, %144, %145 : i32
    llvm.store %148, %2 : i32, !llvm.ptr
    %149 = llvm.load %4 : !llvm.ptr -> i32
    %150 = llvm.load %1 : !llvm.ptr -> i32
    %151 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_33 = arith.constant 0 : i32
    %152 = arith.cmpi ne, %151, %c0_i32_33 : i32
    %153 = arith.select %152, %149, %150 : i32
    llvm.store %153, %1 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb25:  // 3 preds: ^bb22, ^bb28, ^bb30
    %154 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %154, %4 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb26:  // pred: ^bb22
    %155 = llvm.load %7 : !llvm.ptr -> i32
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %157 = arith.cmpi uge, %155, %156 : i32
    %158 = arith.extui %157 : i1 to i32
    %c0_i32_34 = arith.constant 0 : i32
    %159 = arith.cmpi ne, %158, %c0_i32_34 : i32
    cf.cond_br %159, ^bb27, ^bb28
  ^bb27:  // pred: ^bb26
    %c0_i32_35 = arith.constant 0 : i32
    llvm.store %c0_i32_35, %4 : i32, !llvm.ptr
    %160 = llvm.load %7 : !llvm.ptr -> i32
    %161 = llvm.load %2 : !llvm.ptr -> i32
    %162 = arith.cmpi eq, %160, %161 : i32
    %163 = arith.extui %162 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %164 = arith.cmpi eq, %163, %c0_i32_36 : i32
    %165 = arith.extui %164 : i1 to i32
    %c0_i32_37 = arith.constant 0 : i32
    %166 = arith.cmpi ne, %165, %c0_i32_37 : i32
    cf.cond_br %166, ^bb24, ^bb30
  ^bb28:  // pred: ^bb26
    %c0_i32_38 = arith.constant 0 : i32
    llvm.store %c0_i32_38, %4 : i32, !llvm.ptr
    %167 = llvm.load %1 : !llvm.ptr -> i32
    %168 = llvm.load %7 : !llvm.ptr -> i32
    %169 = arith.addi %167, %168 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %170 = arith.extui %169 : i32 to i64
    %171 = arith.addi %170, %c0_i64_39 : i64
    %172 = llvm.getelementptr %11[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %173 = llvm.load volatile %172 {alignment = 1 : i64} : !llvm.ptr -> i8
    %174 = arith.extsi %173 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %175 = arith.cmpi sgt, %174, %c-65_i32 : i32
    %176 = arith.extui %175 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %177 = arith.cmpi ne, %176, %c0_i32_40 : i32
    cf.cond_br %177, ^bb25, ^bb29
  ^bb29:  // pred: ^bb28
    cf.br ^bb24
  ^bb30:  // pred: ^bb27
    cf.br ^bb25
  ^bb31:  // pred: ^bb5
    %178 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %179 = arith.extui %178 : i32 to i64
    %180 = arith.addi %179, %c4_i64 : i64
    %181 = llvm.getelementptr %11[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %182 = llvm.load volatile %181 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %182, %3 : i32, !llvm.ptr
    %183 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %184 = arith.cmpi ult, %183, %c16_i32 : i32
    %185 = arith.extui %184 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %186 = arith.cmpi ne, %185, %c0_i32_41 : i32
    cf.cond_br %186, ^bb42, ^bb43
  ^bb32:  // pred: ^bb5
    %187 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_42 = arith.constant 20 : i64
    %188 = arith.extui %187 : i32 to i64
    %189 = arith.addi %188, %c20_i64_42 : i64
    %190 = llvm.getelementptr %11[%189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %191 = llvm.load volatile %190 {alignment = 1 : i64} : !llvm.ptr -> i32
    %192 = llvm.load %1 : !llvm.ptr -> i32
    %193 = llvm.load %2 : !llvm.ptr -> i32
    %194 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_43 = arith.constant 24 : i64
    %195 = arith.extui %194 : i32 to i64
    %196 = arith.addi %195, %c24_i64_43 : i64
    %197 = llvm.getelementptr %11[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = llvm.load volatile %197 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_44 = arith.constant 12 : i64
    %199 = arith.extui %198 : i32 to i64
    %200 = arith.addi %199, %c12_i64_44 : i64
    %201 = llvm.getelementptr %11[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %202 = llvm.load volatile %201 {alignment = 1 : i64} : !llvm.ptr -> i32
    %203 = arith.cmpi ult, %202, %18 : i32
    cf.cond_br %203, ^bb33, ^bb34
  ^bb33:  // 2 preds: ^bb32, ^bb34
    %204 = llvm.getelementptr inbounds %16[%202] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %205 = llvm.load %204 : !llvm.ptr -> !llvm.ptr
    %206 = llvm.ptrtoint %205 : !llvm.ptr to i64
    %c0_i64_45 = arith.constant 0 : i64
    %207 = arith.cmpi eq, %206, %c0_i64_45 : i64
    cf.cond_br %207, ^bb36, ^bb35
  ^bb34:  // pred: ^bb32
    %c3_i32_46 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_46) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %208 = llvm.getelementptr %205[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %209 = llvm.getelementptr %205[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %210 = llvm.getelementptr %205[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %211 = llvm.load %208 : !llvm.ptr -> !llvm.ptr
    %212 = llvm.load %210 : !llvm.ptr -> !llvm.ptr
    %213 = llvm.ptrtoint %211 : !llvm.ptr to i64
    %c0_i64_47 = arith.constant 0 : i64
    %214 = arith.cmpi eq, %213, %c0_i64_47 : i64
    cf.cond_br %214, ^bb38, ^bb37
  ^bb36:  // pred: ^bb33
    %c4_i32_48 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_48) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %215 = llvm.load %209 : !llvm.ptr -> i32
    %216 = arith.cmpi ne, %13, %215 : i32
    cf.cond_br %216, ^bb40, ^bb39
  ^bb38:  // pred: ^bb35
    %c3_i32_49 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_49) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %217 = llvm.call %211(%212, %191, %192, %193) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%217 : i32)
  ^bb40:  // pred: ^bb37
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 4 preds: ^bb43, ^bb45, ^bb46, ^bb53
    %218 = llvm.load %3 : !llvm.ptr -> i32
    %219 = llvm.load %4 : !llvm.ptr -> i32
    %220 = arith.cmpi ule, %218, %219 : i32
    %221 = arith.extui %220 : i1 to i32
    %c0_i32_50 = arith.constant 0 : i32
    %222 = arith.cmpi ne, %221, %c0_i32_50 : i32
    cf.cond_br %222, ^bb57, ^bb58
  ^bb42:  // pred: ^bb31
    %223 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_51 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_51 : i32
    cf.cond_br %224, ^bb44, ^bb45
  ^bb43:  // pred: ^bb31
    %225 = llvm.load %1 : !llvm.ptr -> i32
    %226 = llvm.load %2 : !llvm.ptr -> i32
    %227 = call @f71(%arg0, %225, %226) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %227, %4 : i32, !llvm.ptr
    cf.br ^bb41
  ^bb44:  // pred: ^bb42
    %228 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_52 = arith.constant 3 : i32
    %229 = arith.andi %228, %c3_i32_52 : i32
    llvm.store %229, %6 : i32, !llvm.ptr
    %230 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_53 = arith.constant 4 : i32
    %231 = arith.cmpi uge, %230, %c4_i32_53 : i32
    %232 = arith.extui %231 : i1 to i32
    %c0_i32_54 = arith.constant 0 : i32
    %233 = arith.cmpi ne, %232, %c0_i32_54 : i32
    cf.cond_br %233, ^bb47, ^bb48
  ^bb45:  // pred: ^bb42
    %c0_i32_55 = arith.constant 0 : i32
    llvm.store %c0_i32_55, %4 : i32, !llvm.ptr
    cf.br ^bb41
  ^bb46:  // 2 preds: ^bb48, ^bb49
    %234 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_56 = arith.constant 0 : i32
    %235 = arith.cmpi eq, %234, %c0_i32_56 : i32
    %236 = arith.extui %235 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %237 = arith.cmpi ne, %236, %c0_i32_57 : i32
    cf.cond_br %237, ^bb41, ^bb52
  ^bb47:  // pred: ^bb44
    %238 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %239 = arith.andi %238, %c12_i32 : i32
    llvm.store %239, %5 : i32, !llvm.ptr
    %c0_i32_58 = arith.constant 0 : i32
    llvm.store %c0_i32_58, %4 : i32, !llvm.ptr
    %c0_i32_59 = arith.constant 0 : i32
    llvm.store %c0_i32_59, %7 : i32, !llvm.ptr
    cf.br ^bb50
  ^bb48:  // pred: ^bb44
    %c0_i32_60 = arith.constant 0 : i32
    llvm.store %c0_i32_60, %4 : i32, !llvm.ptr
    %c0_i32_61 = arith.constant 0 : i32
    llvm.store %c0_i32_61, %7 : i32, !llvm.ptr
    cf.br ^bb46
  ^bb49:  // pred: ^bb51
    cf.br ^bb46
  ^bb50:  // 2 preds: ^bb47, ^bb50
    %240 = llvm.load %4 : !llvm.ptr -> i32
    %241 = llvm.load %1 : !llvm.ptr -> i32
    %242 = llvm.load %7 : !llvm.ptr -> i32
    %243 = arith.addi %241, %242 : i32
    llvm.store %243, %8 : i32, !llvm.ptr
    %c0_i64_62 = arith.constant 0 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c0_i64_62 : i64
    %246 = llvm.getelementptr %11[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load volatile %246 {alignment = 1 : i64} : !llvm.ptr -> i8
    %248 = arith.extsi %247 : i8 to i32
    %c-65_i32_63 = arith.constant -65 : i32
    %249 = arith.cmpi sgt, %248, %c-65_i32_63 : i32
    %250 = arith.extui %249 : i1 to i32
    %251 = arith.addi %240, %250 : i32
    %252 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_64 = arith.constant 1 : i32
    %253 = arith.addi %252, %c1_i32_64 : i32
    %c0_i64_65 = arith.constant 0 : i64
    %254 = arith.extui %253 : i32 to i64
    %255 = arith.addi %254, %c0_i64_65 : i64
    %256 = llvm.getelementptr %11[%255] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %257 = llvm.load volatile %256 {alignment = 1 : i64} : !llvm.ptr -> i8
    %258 = arith.extsi %257 : i8 to i32
    %c-65_i32_66 = arith.constant -65 : i32
    %259 = arith.cmpi sgt, %258, %c-65_i32_66 : i32
    %260 = arith.extui %259 : i1 to i32
    %261 = arith.addi %251, %260 : i32
    %262 = llvm.load %8 : !llvm.ptr -> i32
    %c2_i32_67 = arith.constant 2 : i32
    %263 = arith.addi %262, %c2_i32_67 : i32
    %c0_i64_68 = arith.constant 0 : i64
    %264 = arith.extui %263 : i32 to i64
    %265 = arith.addi %264, %c0_i64_68 : i64
    %266 = llvm.getelementptr %11[%265] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %267 = llvm.load volatile %266 {alignment = 1 : i64} : !llvm.ptr -> i8
    %268 = arith.extsi %267 : i8 to i32
    %c-65_i32_69 = arith.constant -65 : i32
    %269 = arith.cmpi sgt, %268, %c-65_i32_69 : i32
    %270 = arith.extui %269 : i1 to i32
    %271 = arith.addi %261, %270 : i32
    %272 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i32_70 = arith.constant 3 : i32
    %273 = arith.addi %272, %c3_i32_70 : i32
    %c0_i64_71 = arith.constant 0 : i64
    %274 = arith.extui %273 : i32 to i64
    %275 = arith.addi %274, %c0_i64_71 : i64
    %276 = llvm.getelementptr %11[%275] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %277 = llvm.load volatile %276 {alignment = 1 : i64} : !llvm.ptr -> i8
    %278 = arith.extsi %277 : i8 to i32
    %c-65_i32_72 = arith.constant -65 : i32
    %279 = arith.cmpi sgt, %278, %c-65_i32_72 : i32
    %280 = arith.extui %279 : i1 to i32
    %281 = arith.addi %271, %280 : i32
    llvm.store %281, %4 : i32, !llvm.ptr
    %282 = llvm.load %5 : !llvm.ptr -> i32
    %283 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32_73 = arith.constant 4 : i32
    %284 = arith.addi %283, %c4_i32_73 : i32
    llvm.store %284, %7 : i32, !llvm.ptr
    %285 = arith.cmpi eq, %282, %284 : i32
    %286 = arith.extui %285 : i1 to i32
    %c0_i32_74 = arith.constant 0 : i32
    %287 = arith.cmpi eq, %286, %c0_i32_74 : i32
    %288 = arith.extui %287 : i1 to i32
    %c0_i32_75 = arith.constant 0 : i32
    %289 = arith.cmpi ne, %288, %c0_i32_75 : i32
    cf.cond_br %289, ^bb50, ^bb51
  ^bb51:  // pred: ^bb50
    cf.br ^bb49
  ^bb52:  // pred: ^bb46
    %290 = llvm.load %1 : !llvm.ptr -> i32
    %291 = llvm.load %7 : !llvm.ptr -> i32
    %292 = arith.addi %290, %291 : i32
    llvm.store %292, %8 : i32, !llvm.ptr
    cf.br ^bb54
  ^bb53:  // pred: ^bb55
    cf.br ^bb41
  ^bb54:  // 2 preds: ^bb52, ^bb54
    %293 = llvm.load %4 : !llvm.ptr -> i32
    %294 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_76 = arith.constant 0 : i64
    %295 = arith.extui %294 : i32 to i64
    %296 = arith.addi %295, %c0_i64_76 : i64
    %297 = llvm.getelementptr %11[%296] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %298 = llvm.load volatile %297 {alignment = 1 : i64} : !llvm.ptr -> i8
    %299 = arith.extsi %298 : i8 to i32
    %c-65_i32_77 = arith.constant -65 : i32
    %300 = arith.cmpi sgt, %299, %c-65_i32_77 : i32
    %301 = arith.extui %300 : i1 to i32
    %302 = arith.addi %293, %301 : i32
    llvm.store %302, %4 : i32, !llvm.ptr
    %303 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_78 = arith.constant 1 : i32
    %304 = arith.addi %303, %c1_i32_78 : i32
    llvm.store %304, %8 : i32, !llvm.ptr
    %305 = llvm.load %6 : !llvm.ptr -> i32
    %c-1_i32_79 = arith.constant -1 : i32
    %306 = arith.addi %305, %c-1_i32_79 : i32
    llvm.store %306, %6 : i32, !llvm.ptr
    %c0_i32_80 = arith.constant 0 : i32
    %307 = arith.cmpi ne, %306, %c0_i32_80 : i32
    cf.cond_br %307, ^bb54, ^bb55
  ^bb55:  // pred: ^bb54
    cf.br ^bb53
  ^bb56:  // pred: ^bb63
    %c1_i32_81 = arith.constant 1 : i32
    llvm.store %c1_i32_81, %4 : i32, !llvm.ptr
    %308 = llvm.load %7 : !llvm.ptr -> i32
    %309 = llvm.load %1 : !llvm.ptr -> i32
    %310 = llvm.load %2 : !llvm.ptr -> i32
    %311 = llvm.load %8 : !llvm.ptr -> i32
    %c12_i64_82 = arith.constant 12 : i64
    %312 = arith.extui %311 : i32 to i64
    %313 = arith.addi %312, %c12_i64_82 : i64
    %314 = llvm.getelementptr %11[%313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %315 = llvm.load volatile %314 {alignment = 1 : i64} : !llvm.ptr -> i32
    %316 = arith.cmpi ult, %315, %29 : i32
    cf.cond_br %316, ^bb83, ^bb84
  ^bb57:  // pred: ^bb41
    %317 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_83 = arith.constant 20 : i64
    %318 = arith.extui %317 : i32 to i64
    %319 = arith.addi %318, %c20_i64_83 : i64
    %320 = llvm.getelementptr %11[%319] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %321 = llvm.load volatile %320 {alignment = 1 : i64} : !llvm.ptr -> i32
    %322 = llvm.load %1 : !llvm.ptr -> i32
    %323 = llvm.load %2 : !llvm.ptr -> i32
    %324 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_84 = arith.constant 24 : i64
    %325 = arith.extui %324 : i32 to i64
    %326 = arith.addi %325, %c24_i64_84 : i64
    %327 = llvm.getelementptr %11[%326] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %328 = llvm.load volatile %327 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_85 = arith.constant 12 : i64
    %329 = arith.extui %328 : i32 to i64
    %330 = arith.addi %329, %c12_i64_85 : i64
    %331 = llvm.getelementptr %11[%330] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %332 = llvm.load volatile %331 {alignment = 1 : i64} : !llvm.ptr -> i32
    %333 = arith.cmpi ult, %332, %26 : i32
    cf.cond_br %333, ^bb74, ^bb75
  ^bb58:  // pred: ^bb41
    %334 = llvm.load %3 : !llvm.ptr -> i32
    %335 = llvm.load %4 : !llvm.ptr -> i32
    %336 = arith.subi %334, %335 : i32
    llvm.store %336, %5 : i32, !llvm.ptr
    %c0_i32_86 = arith.constant 0 : i32
    llvm.store %c0_i32_86, %4 : i32, !llvm.ptr
    %337 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %338 = arith.extui %337 : i32 to i64
    %339 = arith.addi %338, %c32_i64 : i64
    %340 = llvm.getelementptr %11[%339] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %341 = llvm.load volatile %340 {alignment = 1 : i64} : !llvm.ptr -> i8
    %342 = arith.extui %341 : i8 to i32
    cf.switch %342 : i32, [
      default: ^bb59,
      0: ^bb59,
      1: ^bb61,
      2: ^bb60,
      3: ^bb59
    ]
  ^bb59:  // 5 preds: ^bb58, ^bb58, ^bb58, ^bb60, ^bb61
    %343 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_87 = arith.constant 1 : i32
    %344 = arith.addi %343, %c1_i32_87 : i32
    llvm.store %344, %4 : i32, !llvm.ptr
    %345 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %346 = arith.extui %345 : i32 to i64
    %347 = arith.addi %346, %c16_i64 : i64
    %348 = llvm.getelementptr %11[%347] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %349 = llvm.load volatile %348 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %349, %6 : i32, !llvm.ptr
    %350 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_88 = arith.constant 24 : i64
    %351 = arith.extui %350 : i32 to i64
    %352 = arith.addi %351, %c24_i64_88 : i64
    %353 = llvm.getelementptr %11[%352] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %354 = llvm.load volatile %353 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %354, %8 : i32, !llvm.ptr
    %355 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_89 = arith.constant 20 : i64
    %356 = arith.extui %355 : i32 to i64
    %357 = arith.addi %356, %c20_i64_89 : i64
    %358 = llvm.getelementptr %11[%357] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %359 = llvm.load volatile %358 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %359, %7 : i32, !llvm.ptr
    cf.br ^bb63
  ^bb60:  // pred: ^bb58
    %360 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_90 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %361 = arith.cmpi ule, %c1_i32_90, %c31_i32 : i32
    %362 = scf.if %361 -> (i32) {
      %483 = arith.shrui %360, %c1_i32_90 : i32
      scf.yield %483 : i32
    } else {
      %c0_i32_141 = arith.constant 0 : i32
      scf.yield %c0_i32_141 : i32
    }
    llvm.store %362, %4 : i32, !llvm.ptr
    %363 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_91 = arith.constant 1 : i32
    %364 = arith.addi %363, %c1_i32_91 : i32
    %c1_i32_92 = arith.constant 1 : i32
    %c31_i32_93 = arith.constant 31 : i32
    %365 = arith.cmpi ule, %c1_i32_92, %c31_i32_93 : i32
    %366 = scf.if %365 -> (i32) {
      %483 = arith.shrui %364, %c1_i32_92 : i32
      scf.yield %483 : i32
    } else {
      %c0_i32_141 = arith.constant 0 : i32
      scf.yield %c0_i32_141 : i32
    }
    llvm.store %366, %5 : i32, !llvm.ptr
    cf.br ^bb59
  ^bb61:  // pred: ^bb58
    %367 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %367, %4 : i32, !llvm.ptr
    %c0_i32_94 = arith.constant 0 : i32
    llvm.store %c0_i32_94, %5 : i32, !llvm.ptr
    cf.br ^bb59
  ^bb62:  // pred: ^bb73
    %c1_i32_95 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_95 : i32)
  ^bb63:  // 2 preds: ^bb59, ^bb71
    %368 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32_96 = arith.constant -1 : i32
    %369 = arith.addi %368, %c-1_i32_96 : i32
    llvm.store %369, %4 : i32, !llvm.ptr
    %c0_i32_97 = arith.constant 0 : i32
    %370 = arith.cmpi eq, %369, %c0_i32_97 : i32
    %371 = arith.extui %370 : i1 to i32
    %c0_i32_98 = arith.constant 0 : i32
    %372 = arith.cmpi ne, %371, %c0_i32_98 : i32
    cf.cond_br %372, ^bb56, ^bb64
  ^bb64:  // pred: ^bb63
    %373 = llvm.load %7 : !llvm.ptr -> i32
    %374 = llvm.load %6 : !llvm.ptr -> i32
    %375 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i64_99 = arith.constant 16 : i64
    %376 = arith.extui %375 : i32 to i64
    %377 = arith.addi %376, %c16_i64_99 : i64
    %378 = llvm.getelementptr %11[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i32
    %380 = arith.cmpi ult, %379, %23 : i32
    cf.cond_br %380, ^bb65, ^bb66
  ^bb65:  // 2 preds: ^bb64, ^bb66
    %381 = llvm.getelementptr inbounds %21[%379] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %382 = llvm.load %381 : !llvm.ptr -> !llvm.ptr
    %383 = llvm.ptrtoint %382 : !llvm.ptr to i64
    %c0_i64_100 = arith.constant 0 : i64
    %384 = arith.cmpi eq, %383, %c0_i64_100 : i64
    cf.cond_br %384, ^bb68, ^bb67
  ^bb66:  // pred: ^bb64
    %c3_i32_101 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_101) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %385 = llvm.getelementptr %382[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %386 = llvm.getelementptr %382[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %387 = llvm.getelementptr %382[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %388 = llvm.load %385 : !llvm.ptr -> !llvm.ptr
    %389 = llvm.load %387 : !llvm.ptr -> !llvm.ptr
    %390 = llvm.ptrtoint %388 : !llvm.ptr to i64
    %c0_i64_102 = arith.constant 0 : i64
    %391 = arith.cmpi eq, %390, %c0_i64_102 : i64
    cf.cond_br %391, ^bb70, ^bb69
  ^bb68:  // pred: ^bb65
    %c4_i32_103 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_103) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %392 = llvm.load %386 : !llvm.ptr -> i32
    %393 = arith.cmpi ne, %20, %392 : i32
    cf.cond_br %393, ^bb72, ^bb71
  ^bb70:  // pred: ^bb67
    %c3_i32_104 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_104) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %394 = llvm.call %388(%389, %373, %374) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_105 = arith.constant 0 : i32
    %395 = arith.cmpi eq, %394, %c0_i32_105 : i32
    %396 = arith.extui %395 : i1 to i32
    %c0_i32_106 = arith.constant 0 : i32
    %397 = arith.cmpi ne, %396, %c0_i32_106 : i32
    cf.cond_br %397, ^bb63, ^bb73
  ^bb72:  // pred: ^bb69
    %c5_i32_107 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_107) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // pred: ^bb71
    cf.br ^bb62
  ^bb74:  // 2 preds: ^bb57, ^bb75
    %398 = llvm.getelementptr inbounds %24[%332] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %399 = llvm.load %398 : !llvm.ptr -> !llvm.ptr
    %400 = llvm.ptrtoint %399 : !llvm.ptr to i64
    %c0_i64_108 = arith.constant 0 : i64
    %401 = arith.cmpi eq, %400, %c0_i64_108 : i64
    cf.cond_br %401, ^bb77, ^bb76
  ^bb75:  // pred: ^bb57
    %c3_i32_109 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_109) : (i32) -> ()
    cf.br ^bb74
  ^bb76:  // 2 preds: ^bb74, ^bb77
    %402 = llvm.getelementptr %399[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %403 = llvm.getelementptr %399[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %404 = llvm.getelementptr %399[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %405 = llvm.load %402 : !llvm.ptr -> !llvm.ptr
    %406 = llvm.load %404 : !llvm.ptr -> !llvm.ptr
    %407 = llvm.ptrtoint %405 : !llvm.ptr to i64
    %c0_i64_110 = arith.constant 0 : i64
    %408 = arith.cmpi eq, %407, %c0_i64_110 : i64
    cf.cond_br %408, ^bb79, ^bb78
  ^bb77:  // pred: ^bb74
    %c4_i32_111 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_111) : (i32) -> ()
    cf.br ^bb76
  ^bb78:  // 2 preds: ^bb76, ^bb79
    %409 = llvm.load %403 : !llvm.ptr -> i32
    %410 = arith.cmpi ne, %13, %409 : i32
    cf.cond_br %410, ^bb81, ^bb80
  ^bb79:  // pred: ^bb76
    %c3_i32_112 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_112) : (i32) -> ()
    cf.br ^bb78
  ^bb80:  // 2 preds: ^bb78, ^bb81
    %411 = llvm.call %405(%406, %321, %322, %323) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%411 : i32)
  ^bb81:  // pred: ^bb78
    %c5_i32_113 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_113) : (i32) -> ()
    cf.br ^bb80
  ^bb82:  // 2 preds: ^bb89, ^bb92
    %412 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%412 : i32)
  ^bb83:  // 2 preds: ^bb56, ^bb84
    %413 = llvm.getelementptr inbounds %27[%315] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %414 = llvm.load %413 : !llvm.ptr -> !llvm.ptr
    %415 = llvm.ptrtoint %414 : !llvm.ptr to i64
    %c0_i64_114 = arith.constant 0 : i64
    %416 = arith.cmpi eq, %415, %c0_i64_114 : i64
    cf.cond_br %416, ^bb86, ^bb85
  ^bb84:  // pred: ^bb56
    %c3_i32_115 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_115) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %417 = llvm.getelementptr %414[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %418 = llvm.getelementptr %414[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %419 = llvm.getelementptr %414[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %420 = llvm.load %417 : !llvm.ptr -> !llvm.ptr
    %421 = llvm.load %419 : !llvm.ptr -> !llvm.ptr
    %422 = llvm.ptrtoint %420 : !llvm.ptr to i64
    %c0_i64_116 = arith.constant 0 : i64
    %423 = arith.cmpi eq, %422, %c0_i64_116 : i64
    cf.cond_br %423, ^bb88, ^bb87
  ^bb86:  // pred: ^bb83
    %c4_i32_117 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_117) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %424 = llvm.load %418 : !llvm.ptr -> i32
    %425 = arith.cmpi ne, %13, %424 : i32
    cf.cond_br %425, ^bb90, ^bb89
  ^bb88:  // pred: ^bb85
    %c3_i32_118 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_118) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %426 = llvm.call %420(%421, %308, %309, %310) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_119 = arith.constant 0 : i32
    %427 = arith.cmpi ne, %426, %c0_i32_119 : i32
    cf.cond_br %427, ^bb82, ^bb91
  ^bb90:  // pred: ^bb87
    %c5_i32_120 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_120) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // pred: ^bb89
    %c0_i32_121 = arith.constant 0 : i32
    llvm.store %c0_i32_121, %4 : i32, !llvm.ptr
    cf.br ^bb94
  ^bb92:  // 2 preds: ^bb93, ^bb96
    %428 = llvm.load %4 : !llvm.ptr -> i32
    %429 = llvm.load %5 : !llvm.ptr -> i32
    %430 = arith.cmpi ult, %428, %429 : i32
    %431 = arith.extui %430 : i1 to i32
    llvm.store %431, %4 : i32, !llvm.ptr
    cf.br ^bb82
  ^bb93:  // pred: ^bb105
    %432 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32_122 = arith.constant -1 : i32
    %433 = arith.addi %432, %c-1_i32_122 : i32
    llvm.store %433, %4 : i32, !llvm.ptr
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb91, ^bb103
    %434 = llvm.load %5 : !llvm.ptr -> i32
    %435 = llvm.load %4 : !llvm.ptr -> i32
    %436 = arith.cmpi eq, %434, %435 : i32
    %437 = arith.extui %436 : i1 to i32
    %c0_i32_123 = arith.constant 0 : i32
    %438 = arith.cmpi eq, %437, %c0_i32_123 : i32
    %439 = arith.extui %438 : i1 to i32
    %c0_i32_124 = arith.constant 0 : i32
    %440 = arith.cmpi ne, %439, %c0_i32_124 : i32
    cf.cond_br %440, ^bb95, ^bb96
  ^bb95:  // pred: ^bb94
    %441 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_125 = arith.constant 1 : i32
    %442 = arith.addi %441, %c1_i32_125 : i32
    llvm.store %442, %4 : i32, !llvm.ptr
    %443 = llvm.load %7 : !llvm.ptr -> i32
    %444 = llvm.load %6 : !llvm.ptr -> i32
    %445 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i64_126 = arith.constant 16 : i64
    %446 = arith.extui %445 : i32 to i64
    %447 = arith.addi %446, %c16_i64_126 : i64
    %448 = llvm.getelementptr %11[%447] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %449 = llvm.load volatile %448 {alignment = 1 : i64} : !llvm.ptr -> i32
    %450 = arith.cmpi ult, %449, %32 : i32
    cf.cond_br %450, ^bb97, ^bb98
  ^bb96:  // pred: ^bb94
    %451 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %451, %4 : i32, !llvm.ptr
    cf.br ^bb92
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %452 = llvm.getelementptr inbounds %30[%449] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %453 = llvm.load %452 : !llvm.ptr -> !llvm.ptr
    %454 = llvm.ptrtoint %453 : !llvm.ptr to i64
    %c0_i64_127 = arith.constant 0 : i64
    %455 = arith.cmpi eq, %454, %c0_i64_127 : i64
    cf.cond_br %455, ^bb100, ^bb99
  ^bb98:  // pred: ^bb95
    %c3_i32_128 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_128) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %456 = llvm.getelementptr %453[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %457 = llvm.getelementptr %453[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %458 = llvm.getelementptr %453[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %459 = llvm.load %456 : !llvm.ptr -> !llvm.ptr
    %460 = llvm.load %458 : !llvm.ptr -> !llvm.ptr
    %461 = llvm.ptrtoint %459 : !llvm.ptr to i64
    %c0_i64_129 = arith.constant 0 : i64
    %462 = arith.cmpi eq, %461, %c0_i64_129 : i64
    cf.cond_br %462, ^bb102, ^bb101
  ^bb100:  // pred: ^bb97
    %c4_i32_130 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_130) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb99, ^bb102
    %463 = llvm.load %457 : !llvm.ptr -> i32
    %464 = arith.cmpi ne, %20, %463 : i32
    cf.cond_br %464, ^bb104, ^bb103
  ^bb102:  // pred: ^bb99
    %c3_i32_131 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_131) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %465 = llvm.call %459(%460, %443, %444) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_132 = arith.constant 0 : i32
    %466 = arith.cmpi eq, %465, %c0_i32_132 : i32
    %467 = arith.extui %466 : i1 to i32
    %c0_i32_133 = arith.constant 0 : i32
    %468 = arith.cmpi ne, %467, %c0_i32_133 : i32
    cf.cond_br %468, ^bb94, ^bb105
  ^bb104:  // pred: ^bb101
    %c5_i32_134 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_134) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // pred: ^bb103
    cf.br ^bb93
  ^bb106:  // 2 preds: ^bb3, ^bb107
    %469 = llvm.getelementptr inbounds %33[%66] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %470 = llvm.load %469 : !llvm.ptr -> !llvm.ptr
    %471 = llvm.ptrtoint %470 : !llvm.ptr to i64
    %c0_i64_135 = arith.constant 0 : i64
    %472 = arith.cmpi eq, %471, %c0_i64_135 : i64
    cf.cond_br %472, ^bb109, ^bb108
  ^bb107:  // pred: ^bb3
    %c3_i32_136 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_136) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %473 = llvm.getelementptr %470[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %474 = llvm.getelementptr %470[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %475 = llvm.getelementptr %470[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %476 = llvm.load %473 : !llvm.ptr -> !llvm.ptr
    %477 = llvm.load %475 : !llvm.ptr -> !llvm.ptr
    %478 = llvm.ptrtoint %476 : !llvm.ptr to i64
    %c0_i64_137 = arith.constant 0 : i64
    %479 = arith.cmpi eq, %478, %c0_i64_137 : i64
    cf.cond_br %479, ^bb111, ^bb110
  ^bb109:  // pred: ^bb106
    %c4_i32_138 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_138) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // 2 preds: ^bb108, ^bb111
    %480 = llvm.load %474 : !llvm.ptr -> i32
    %481 = arith.cmpi ne, %13, %480 : i32
    cf.cond_br %481, ^bb113, ^bb112
  ^bb111:  // pred: ^bb108
    %c3_i32_139 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_139) : (i32) -> ()
    cf.br ^bb110
  ^bb112:  // 2 preds: ^bb110, ^bb113
    %482 = llvm.call %476(%477, %55, %56, %57) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%482 : i32)
  ^bb113:  // pred: ^bb110
    %c5_i32_140 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_140) : (i32) -> ()
    cf.br ^bb112
  }
  func.func @f65(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = arith.extui %9 : i32 to i64
    %c1_i32_1 = arith.constant 1 : i32
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %12 = call @f75(%arg0, %10, %c1_i32_1, %11) : (!llvm.ptr, i64, i32, i32) -> i32
    cf.br ^bb2(%12 : i32)
  ^bb2(%13: i32):  // pred: ^bb1
    return %13 : i32
  }
  func.func @f66(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %20 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    %25 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.load %25 : !llvm.ptr -> i32
    %27 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %21 : !llvm.ptr -> i64
    %29 = arith.trunci %28 : i64 to i32
    %30 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %21 : !llvm.ptr -> i64
    %32 = arith.trunci %31 : i64 to i32
    %33 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.load %21 : !llvm.ptr -> i64
    %35 = arith.trunci %34 : i64 to i32
    %36 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %21 : !llvm.ptr -> i64
    %38 = arith.trunci %37 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %39 = llvm.load %14 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %40 = arith.subi %39, %c48_i32 : i32
    llvm.store %40, %3 : i32, !llvm.ptr
    llvm.store %40, %14 : i32, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c44_i64 = arith.constant 44 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c44_i64 : i64
    %44 = llvm.getelementptr %17[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %45, %44 {alignment = 1 : i64} : i8, !llvm.ptr
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %c28_i64 = arith.constant 28 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c28_i64 : i64
    %49 = llvm.getelementptr %17[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    llvm.store %c0_i32_12, %4 : i32, !llvm.ptr
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c40_i64 = arith.constant 40 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c40_i64 : i64
    %53 = llvm.getelementptr %17[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %56 = arith.extui %54 : i32 to i64
    %57 = arith.addi %56, %c36_i64 : i64
    %58 = llvm.getelementptr %17[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %60 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %61 = arith.extui %59 : i32 to i64
    %62 = arith.addi %61, %c32_i64 : i64
    %63 = llvm.getelementptr %17[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i32, !llvm.ptr
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c20_i64 : i64
    %67 = llvm.getelementptr %17[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_14, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c12_i64 : i64
    %71 = llvm.getelementptr %17[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_15, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c16_i64 : i64
    %75 = llvm.getelementptr %17[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %5 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %77 = arith.cmpi ne, %76, %c0_i32_16 : i32
    cf.cond_br %77, ^bb7, ^bb8
  ^bb2(%78: i32):  // pred: ^bb3
    return %78 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_17 = arith.constant 48 : i32
    %80 = arith.addi %79, %c48_i32_17 : i32
    llvm.store %80, %14 : i32, !llvm.ptr
    %81 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%81 : i32)
  ^bb4:  // 2 preds: ^bb6, ^bb72
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 5 preds: ^bb20, ^bb29, ^bb44, ^bb61, ^bb74
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 4 preds: ^bb7, ^bb8, ^bb32, ^bb34
    %82 = llvm.load %4 : !llvm.ptr -> i32
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %84 = arith.extui %83 : i32 to i64
    %85 = arith.addi %84, %c4_i64 : i64
    %86 = llvm.getelementptr %17[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i32
    %88 = arith.cmpi uge, %82, %87 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_20 : i32
    cf.cond_br %90, ^bb4, ^bb65
  ^bb7:  // 2 preds: ^bb1, ^bb10
    %91 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_21 = arith.constant 20 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c20_i64_21 : i64
    %94 = llvm.getelementptr %17[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %96 = arith.cmpi eq, %95, %c0_i32_22 : i32
    %97 = arith.extui %96 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %98 = arith.cmpi ne, %97, %c0_i32_23 : i32
    cf.cond_br %98, ^bb6, ^bb33
  ^bb8:  // pred: ^bb1
    %99 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_24 = arith.constant 12 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c12_i64_24 : i64
    %102 = llvm.getelementptr %17[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %103, %0 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %104 = arith.cmpi eq, %103, %c0_i32_25 : i32
    %105 = arith.extui %104 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %106 = arith.cmpi ne, %105, %c0_i32_26 : i32
    cf.cond_br %106, ^bb6, ^bb9
  ^bb9:  // pred: ^bb8
    %107 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c8_i64 : i64
    %110 = llvm.getelementptr %17[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %111, %1 : i32, !llvm.ptr
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_27 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %113 = arith.cmpi ule, %c3_i32_27, %c31_i32 : i32
    %114 = scf.if %113 -> (i32) {
      %472 = arith.shli %112, %c3_i32_27 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %114, %6 : i32, !llvm.ptr
    %115 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %116 = arith.addi %115, %c-1_i32 : i32
    %c536870911_i32 = arith.constant 536870911 : i32
    %117 = arith.andi %116, %c536870911_i32 : i32
    %c1_i32_28 = arith.constant 1 : i32
    %118 = arith.addi %117, %c1_i32_28 : i32
    llvm.store %118, %4 : i32, !llvm.ptr
    %119 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c0_i64 : i64
    %122 = llvm.getelementptr %17[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %123, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb10:  // no predecessors
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb9, ^bb31
    %124 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %125 = arith.addi %124, %c4_i32 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c0_i64_29 : i64
    %128 = llvm.getelementptr %17[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %129 = llvm.load volatile %128 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %129, %7 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %130 = arith.cmpi eq, %129, %c0_i32_30 : i32
    %131 = arith.extui %130 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %132 = arith.cmpi ne, %131, %c0_i32_31 : i32
    cf.cond_br %132, ^bb12, ^bb13
  ^bb12:  // 2 preds: ^bb11, ^bb22
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %134 = arith.extui %133 : i32 to i64
    %135 = arith.addi %134, %c0_i64_32 : i64
    %136 = llvm.getelementptr %17[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = llvm.load volatile %136 {alignment = 1 : i64} : !llvm.ptr -> i32
    %138 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %139 = arith.addi %138, %c12_i32 : i32
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_33 = arith.constant 4 : i64
    %141 = arith.extui %140 : i32 to i64
    %142 = arith.addi %141, %c4_i64_33 : i64
    %143 = llvm.getelementptr %17[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %144 = llvm.load volatile %143 {alignment = 1 : i64} : !llvm.ptr -> i32
    %145 = arith.cmpi ult, %144, %29 : i32
    cf.cond_br %145, ^bb23, ^bb24
  ^bb13:  // pred: ^bb11
    %146 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_34 = arith.constant 32 : i64
    %147 = arith.extui %146 : i32 to i64
    %148 = arith.addi %147, %c32_i64_34 : i64
    %149 = llvm.getelementptr %17[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %150 = llvm.load volatile %149 {alignment = 1 : i64} : !llvm.ptr -> i32
    %151 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c0_i64_35 : i64
    %154 = llvm.getelementptr %17[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i32
    %156 = llvm.load %7 : !llvm.ptr -> i32
    %157 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_36 = arith.constant 36 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c36_i64_36 : i64
    %160 = llvm.getelementptr %17[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_37 = arith.constant 12 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c12_i64_37 : i64
    %164 = llvm.getelementptr %17[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    %166 = arith.cmpi ult, %165, %24 : i32
    cf.cond_br %166, ^bb14, ^bb15
  ^bb14:  // 2 preds: ^bb13, ^bb15
    %167 = llvm.getelementptr inbounds %22[%165] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %168 = llvm.load %167 : !llvm.ptr -> !llvm.ptr
    %169 = llvm.ptrtoint %168 : !llvm.ptr to i64
    %c0_i64_38 = arith.constant 0 : i64
    %170 = arith.cmpi eq, %169, %c0_i64_38 : i64
    cf.cond_br %170, ^bb17, ^bb16
  ^bb15:  // pred: ^bb13
    %c3_i32_39 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_39) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %171 = llvm.getelementptr %168[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %172 = llvm.getelementptr %168[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %173 = llvm.getelementptr %168[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %174 = llvm.load %171 : !llvm.ptr -> !llvm.ptr
    %175 = llvm.load %173 : !llvm.ptr -> !llvm.ptr
    %176 = llvm.ptrtoint %174 : !llvm.ptr to i64
    %c0_i64_40 = arith.constant 0 : i64
    %177 = arith.cmpi eq, %176, %c0_i64_40 : i64
    cf.cond_br %177, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_41 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_41) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %178 = llvm.load %172 : !llvm.ptr -> i32
    %179 = arith.cmpi ne, %19, %178 : i32
    cf.cond_br %179, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_42 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_42) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %180 = llvm.call %174(%175, %150, %155, %156) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %181 = arith.cmpi ne, %180, %c0_i32_43 : i32
    cf.cond_br %181, ^bb5, ^bb22
  ^bb21:  // pred: ^bb18
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    cf.br ^bb12
  ^bb23:  // 2 preds: ^bb12, ^bb24
    %182 = llvm.getelementptr inbounds %27[%144] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %183 = llvm.load %182 : !llvm.ptr -> !llvm.ptr
    %184 = llvm.ptrtoint %183 : !llvm.ptr to i64
    %c0_i64_44 = arith.constant 0 : i64
    %185 = arith.cmpi eq, %184, %c0_i64_44 : i64
    cf.cond_br %185, ^bb26, ^bb25
  ^bb24:  // pred: ^bb12
    %c3_i32_45 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_45) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %186 = llvm.getelementptr %183[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %187 = llvm.getelementptr %183[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %188 = llvm.getelementptr %183[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %189 = llvm.load %186 : !llvm.ptr -> !llvm.ptr
    %190 = llvm.load %188 : !llvm.ptr -> !llvm.ptr
    %191 = llvm.ptrtoint %189 : !llvm.ptr to i64
    %c0_i64_46 = arith.constant 0 : i64
    %192 = arith.cmpi eq, %191, %c0_i64_46 : i64
    cf.cond_br %192, ^bb28, ^bb27
  ^bb26:  // pred: ^bb23
    %c4_i32_47 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_47) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %193 = llvm.load %187 : !llvm.ptr -> i32
    %194 = arith.cmpi ne, %26, %193 : i32
    cf.cond_br %194, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %195 = llvm.call %189(%190, %137, %139) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %196 = arith.cmpi ne, %195, %c0_i32_49 : i32
    cf.cond_br %196, ^bb5, ^bb31
  ^bb30:  // pred: ^bb27
    %c5_i32_50 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_50) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    %197 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %198 = arith.addi %197, %c8_i32 : i32
    llvm.store %198, %1 : i32, !llvm.ptr
    %199 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_51 = arith.constant 8 : i32
    %200 = arith.addi %199, %c8_i32_51 : i32
    llvm.store %200, %0 : i32, !llvm.ptr
    %201 = llvm.load %6 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %202 = arith.addi %201, %c-8_i32 : i32
    llvm.store %202, %6 : i32, !llvm.ptr
    %c0_i32_52 = arith.constant 0 : i32
    %203 = arith.cmpi ne, %202, %c0_i32_52 : i32
    cf.cond_br %203, ^bb11, ^bb32
  ^bb32:  // pred: ^bb31
    cf.br ^bb6
  ^bb33:  // pred: ^bb7
    %204 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32_53 = arith.constant 5 : i32
    %c31_i32_54 = arith.constant 31 : i32
    %205 = arith.cmpi ule, %c5_i32_53, %c31_i32_54 : i32
    %206 = scf.if %205 -> (i32) {
      %472 = arith.shli %204, %c5_i32_53 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %206, %8 : i32, !llvm.ptr
    %207 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_55 = arith.constant -1 : i32
    %208 = arith.addi %207, %c-1_i32_55 : i32
    %c134217727_i32 = arith.constant 134217727 : i32
    %209 = arith.andi %208, %c134217727_i32 : i32
    %c1_i32_56 = arith.constant 1 : i32
    %210 = arith.addi %209, %c1_i32_56 : i32
    llvm.store %210, %4 : i32, !llvm.ptr
    %211 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_57 = arith.constant 8 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c8_i64_57 : i64
    %214 = llvm.getelementptr %17[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load volatile %214 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %215, %9 : i32, !llvm.ptr
    %216 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_58 = arith.constant 0 : i64
    %217 = arith.extui %216 : i32 to i64
    %218 = arith.addi %217, %c0_i64_58 : i64
    %219 = llvm.getelementptr %17[%218] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %220 = llvm.load volatile %219 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %220, %0 : i32, !llvm.ptr
    %c0_i32_59 = arith.constant 0 : i32
    llvm.store %c0_i32_59, %6 : i32, !llvm.ptr
    cf.br ^bb35
  ^bb34:  // pred: ^bb64
    cf.br ^bb6
  ^bb35:  // 2 preds: ^bb33, ^bb63
    %221 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_60 = arith.constant 4 : i32
    %222 = arith.addi %221, %c4_i32_60 : i32
    %c0_i64_61 = arith.constant 0 : i64
    %223 = arith.extui %222 : i32 to i64
    %224 = arith.addi %223, %c0_i64_61 : i64
    %225 = llvm.getelementptr %17[%224] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %226 = llvm.load volatile %225 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %226, %1 : i32, !llvm.ptr
    %c0_i32_62 = arith.constant 0 : i32
    %227 = arith.cmpi eq, %226, %c0_i32_62 : i32
    %228 = arith.extui %227 : i1 to i32
    %c0_i32_63 = arith.constant 0 : i32
    %229 = arith.cmpi ne, %228, %c0_i32_63 : i32
    cf.cond_br %229, ^bb36, ^bb37
  ^bb36:  // 2 preds: ^bb35, ^bb46
    %230 = llvm.load %3 : !llvm.ptr -> i32
    %231 = llvm.load %5 : !llvm.ptr -> i32
    %232 = llvm.load %6 : !llvm.ptr -> i32
    %233 = arith.addi %231, %232 : i32
    llvm.store %233, %1 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %234 = arith.addi %233, %c16_i32 : i32
    %c0_i64_64 = arith.constant 0 : i64
    %235 = arith.extui %234 : i32 to i64
    %236 = arith.addi %235, %c0_i64_64 : i64
    %237 = llvm.getelementptr %17[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %238 = llvm.load volatile %237 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c28_i64_65 = arith.constant 28 : i64
    %239 = arith.extui %230 : i32 to i64
    %240 = arith.addi %239, %c28_i64_65 : i64
    %241 = llvm.getelementptr %17[%240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %238, %241 {alignment = 1 : i64} : i32, !llvm.ptr
    %242 = llvm.load %3 : !llvm.ptr -> i32
    %243 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %244 = arith.addi %243, %c28_i32 : i32
    %c0_i64_66 = arith.constant 0 : i64
    %245 = arith.extui %244 : i32 to i64
    %246 = arith.addi %245, %c0_i64_66 : i64
    %247 = llvm.getelementptr %17[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %248 = llvm.load volatile %247 {alignment = 1 : i64} : !llvm.ptr -> i8
    %249 = arith.extui %248 : i8 to i32
    %c44_i64_67 = arith.constant 44 : i64
    %250 = arith.extui %242 : i32 to i64
    %251 = arith.addi %250, %c44_i64_67 : i64
    %252 = llvm.getelementptr %17[%251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %253 = arith.trunci %249 : i32 to i8
    llvm.store volatile %253, %252 {alignment = 1 : i64} : i8, !llvm.ptr
    %254 = llvm.load %3 : !llvm.ptr -> i32
    %255 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %256 = arith.addi %255, %c24_i32 : i32
    %c0_i64_68 = arith.constant 0 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c0_i64_68 : i64
    %259 = llvm.getelementptr %17[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c40_i64_69 = arith.constant 40 : i64
    %261 = arith.extui %254 : i32 to i64
    %262 = arith.addi %261, %c40_i64_69 : i64
    %263 = llvm.getelementptr %17[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %260, %263 {alignment = 1 : i64} : i32, !llvm.ptr
    %264 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_70 = arith.constant 12 : i32
    %265 = arith.addi %264, %c12_i32_70 : i32
    %c0_i64_71 = arith.constant 0 : i64
    %266 = arith.extui %265 : i32 to i64
    %267 = arith.addi %266, %c0_i64_71 : i64
    %268 = llvm.getelementptr %17[%267] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %269 = llvm.load volatile %268 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %269, %7 : i32, !llvm.ptr
    %c0_i32_72 = arith.constant 0 : i32
    llvm.store %c0_i32_72, %10 : i32, !llvm.ptr
    %c0_i32_73 = arith.constant 0 : i32
    llvm.store %c0_i32_73, %11 : i32, !llvm.ptr
    %270 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_74 = arith.constant 8 : i32
    %271 = arith.addi %270, %c8_i32_74 : i32
    %c0_i64_75 = arith.constant 0 : i64
    %272 = arith.extui %271 : i32 to i64
    %273 = arith.addi %272, %c0_i64_75 : i64
    %274 = llvm.getelementptr %17[%273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %275 = llvm.load volatile %274 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %275 : i32, [
      default: ^bb48,
      0: ^bb48,
      1: ^bb49,
      2: ^bb47
    ]
  ^bb37:  // pred: ^bb35
    %276 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_76 = arith.constant 32 : i64
    %277 = arith.extui %276 : i32 to i64
    %278 = arith.addi %277, %c32_i64_76 : i64
    %279 = llvm.getelementptr %17[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i32
    %281 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_77 = arith.constant 0 : i64
    %282 = arith.extui %281 : i32 to i64
    %283 = arith.addi %282, %c0_i64_77 : i64
    %284 = llvm.getelementptr %17[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %285 = llvm.load volatile %284 {alignment = 1 : i64} : !llvm.ptr -> i32
    %286 = llvm.load %1 : !llvm.ptr -> i32
    %287 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_78 = arith.constant 36 : i64
    %288 = arith.extui %287 : i32 to i64
    %289 = arith.addi %288, %c36_i64_78 : i64
    %290 = llvm.getelementptr %17[%289] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %291 = llvm.load volatile %290 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_79 = arith.constant 12 : i64
    %292 = arith.extui %291 : i32 to i64
    %293 = arith.addi %292, %c12_i64_79 : i64
    %294 = llvm.getelementptr %17[%293] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %295 = llvm.load volatile %294 {alignment = 1 : i64} : !llvm.ptr -> i32
    %296 = arith.cmpi ult, %295, %32 : i32
    cf.cond_br %296, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %297 = llvm.getelementptr inbounds %30[%295] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %298 = llvm.load %297 : !llvm.ptr -> !llvm.ptr
    %299 = llvm.ptrtoint %298 : !llvm.ptr to i64
    %c0_i64_80 = arith.constant 0 : i64
    %300 = arith.cmpi eq, %299, %c0_i64_80 : i64
    cf.cond_br %300, ^bb41, ^bb40
  ^bb39:  // pred: ^bb37
    %c3_i32_81 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_81) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %301 = llvm.getelementptr %298[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %302 = llvm.getelementptr %298[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %303 = llvm.getelementptr %298[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %304 = llvm.load %301 : !llvm.ptr -> !llvm.ptr
    %305 = llvm.load %303 : !llvm.ptr -> !llvm.ptr
    %306 = llvm.ptrtoint %304 : !llvm.ptr to i64
    %c0_i64_82 = arith.constant 0 : i64
    %307 = arith.cmpi eq, %306, %c0_i64_82 : i64
    cf.cond_br %307, ^bb43, ^bb42
  ^bb41:  // pred: ^bb38
    %c4_i32_83 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_83) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %308 = llvm.load %302 : !llvm.ptr -> i32
    %309 = arith.cmpi ne, %19, %308 : i32
    cf.cond_br %309, ^bb45, ^bb44
  ^bb43:  // pred: ^bb40
    %c3_i32_84 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_84) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %310 = llvm.call %304(%305, %280, %285, %286) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_85 = arith.constant 0 : i32
    %311 = arith.cmpi ne, %310, %c0_i32_85 : i32
    cf.cond_br %311, ^bb5, ^bb46
  ^bb45:  // pred: ^bb42
    %c5_i32_86 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_86) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    cf.br ^bb36
  ^bb47:  // 3 preds: ^bb36, ^bb48, ^bb49
    %312 = llvm.load %3 : !llvm.ptr -> i32
    %313 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64_87 = arith.constant 16 : i64
    %314 = arith.extui %312 : i32 to i64
    %315 = arith.addi %314, %c16_i64_87 : i64
    %316 = llvm.getelementptr %17[%315] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %313, %316 {alignment = 1 : i64} : i32, !llvm.ptr
    %317 = llvm.load %3 : !llvm.ptr -> i32
    %318 = llvm.load %11 : !llvm.ptr -> i32
    %c12_i64_88 = arith.constant 12 : i64
    %319 = arith.extui %317 : i32 to i64
    %320 = arith.addi %319, %c12_i64_88 : i64
    %321 = llvm.getelementptr %17[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %318, %321 {alignment = 1 : i64} : i32, !llvm.ptr
    %322 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_89 = arith.constant 4 : i32
    %323 = arith.addi %322, %c4_i32_89 : i32
    %c0_i64_90 = arith.constant 0 : i64
    %324 = arith.extui %323 : i32 to i64
    %325 = arith.addi %324, %c0_i64_90 : i64
    %326 = llvm.getelementptr %17[%325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %327 = llvm.load volatile %326 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %327, %7 : i32, !llvm.ptr
    %328 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_91 = arith.constant 0 : i64
    %329 = arith.extui %328 : i32 to i64
    %330 = arith.addi %329, %c0_i64_91 : i64
    %331 = llvm.getelementptr %17[%330] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %332 = llvm.load volatile %331 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %332 : i32, [
      default: ^bb52,
      0: ^bb52,
      1: ^bb53,
      2: ^bb51
    ]
  ^bb48:  // 3 preds: ^bb36, ^bb36, ^bb50
    %c1_i32_92 = arith.constant 1 : i32
    llvm.store %c1_i32_92, %11 : i32, !llvm.ptr
    cf.br ^bb47
  ^bb49:  // pred: ^bb36
    %333 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_93 = arith.constant 3 : i32
    %c31_i32_94 = arith.constant 31 : i32
    %334 = arith.cmpi ule, %c3_i32_93, %c31_i32_94 : i32
    %335 = scf.if %334 -> (i32) {
      %472 = arith.shli %333, %c3_i32_93 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %335, %12 : i32, !llvm.ptr
    %c0_i32_95 = arith.constant 0 : i32
    llvm.store %c0_i32_95, %11 : i32, !llvm.ptr
    %336 = llvm.load %9 : !llvm.ptr -> i32
    %337 = llvm.load %12 : !llvm.ptr -> i32
    %338 = arith.addi %336, %337 : i32
    llvm.store %338, %12 : i32, !llvm.ptr
    %c4_i64_96 = arith.constant 4 : i64
    %339 = arith.extui %338 : i32 to i64
    %340 = arith.addi %339, %c4_i64_96 : i64
    %341 = llvm.getelementptr %17[%340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %342 = llvm.load volatile %341 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_97 = arith.constant 0 : i32
    %343 = arith.cmpi ne, %342, %c0_i32_97 : i32
    cf.cond_br %343, ^bb47, ^bb50
  ^bb50:  // pred: ^bb49
    %344 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_98 = arith.constant 0 : i64
    %345 = arith.extui %344 : i32 to i64
    %346 = arith.addi %345, %c0_i64_98 : i64
    %347 = llvm.getelementptr %17[%346] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %348 = llvm.load volatile %347 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %348, %7 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb51:  // 3 preds: ^bb47, ^bb52, ^bb53
    %349 = llvm.load %3 : !llvm.ptr -> i32
    %350 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %351 = arith.extui %349 : i32 to i64
    %352 = arith.addi %351, %c24_i64 : i64
    %353 = llvm.getelementptr %17[%352] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %350, %353 {alignment = 1 : i64} : i32, !llvm.ptr
    %354 = llvm.load %3 : !llvm.ptr -> i32
    %355 = llvm.load %10 : !llvm.ptr -> i32
    %c20_i64_99 = arith.constant 20 : i64
    %356 = arith.extui %354 : i32 to i64
    %357 = arith.addi %356, %c20_i64_99 : i64
    %358 = llvm.getelementptr %17[%357] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %355, %358 {alignment = 1 : i64} : i32, !llvm.ptr
    %359 = llvm.load %9 : !llvm.ptr -> i32
    %360 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %361 = arith.addi %360, %c20_i32 : i32
    %c0_i64_100 = arith.constant 0 : i64
    %362 = arith.extui %361 : i32 to i64
    %363 = arith.addi %362, %c0_i64_100 : i64
    %364 = llvm.getelementptr %17[%363] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %365 = llvm.load volatile %364 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32_101 = arith.constant 3 : i32
    %c31_i32_102 = arith.constant 31 : i32
    %366 = arith.cmpi ule, %c3_i32_101, %c31_i32_102 : i32
    %367 = scf.if %366 -> (i32) {
      %472 = arith.shli %365, %c3_i32_101 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    %368 = arith.addi %359, %367 : i32
    llvm.store %368, %1 : i32, !llvm.ptr
    %c0_i64_103 = arith.constant 0 : i64
    %369 = arith.extui %368 : i32 to i64
    %370 = arith.addi %369, %c0_i64_103 : i64
    %371 = llvm.getelementptr %17[%370] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %372 = llvm.load volatile %371 {alignment = 1 : i64} : !llvm.ptr -> i32
    %373 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_104 = arith.constant 12 : i32
    %374 = arith.addi %373, %c12_i32_104 : i32
    %375 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_105 = arith.constant 4 : i64
    %376 = arith.extui %375 : i32 to i64
    %377 = arith.addi %376, %c4_i64_105 : i64
    %378 = llvm.getelementptr %17[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i32
    %380 = arith.cmpi ult, %379, %35 : i32
    cf.cond_br %380, ^bb55, ^bb56
  ^bb52:  // 3 preds: ^bb47, ^bb47, ^bb54
    %c1_i32_106 = arith.constant 1 : i32
    llvm.store %c1_i32_106, %10 : i32, !llvm.ptr
    cf.br ^bb51
  ^bb53:  // pred: ^bb47
    %381 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_107 = arith.constant 3 : i32
    %c31_i32_108 = arith.constant 31 : i32
    %382 = arith.cmpi ule, %c3_i32_107, %c31_i32_108 : i32
    %383 = scf.if %382 -> (i32) {
      %472 = arith.shli %381, %c3_i32_107 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %383, %11 : i32, !llvm.ptr
    %384 = llvm.load %9 : !llvm.ptr -> i32
    %385 = llvm.load %11 : !llvm.ptr -> i32
    %386 = arith.addi %384, %385 : i32
    llvm.store %386, %11 : i32, !llvm.ptr
    %c4_i64_109 = arith.constant 4 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c4_i64_109 : i64
    %389 = llvm.getelementptr %17[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_110 = arith.constant 0 : i32
    %391 = arith.cmpi ne, %390, %c0_i32_110 : i32
    cf.cond_br %391, ^bb51, ^bb54
  ^bb54:  // pred: ^bb53
    %392 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i64_111 = arith.constant 0 : i64
    %393 = arith.extui %392 : i32 to i64
    %394 = arith.addi %393, %c0_i64_111 : i64
    %395 = llvm.getelementptr %17[%394] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %396 = llvm.load volatile %395 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %396, %7 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb55:  // 2 preds: ^bb51, ^bb56
    %397 = llvm.getelementptr inbounds %33[%379] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %398 = llvm.load %397 : !llvm.ptr -> !llvm.ptr
    %399 = llvm.ptrtoint %398 : !llvm.ptr to i64
    %c0_i64_112 = arith.constant 0 : i64
    %400 = arith.cmpi eq, %399, %c0_i64_112 : i64
    cf.cond_br %400, ^bb58, ^bb57
  ^bb56:  // pred: ^bb51
    %c3_i32_113 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_113) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %401 = llvm.getelementptr %398[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %402 = llvm.getelementptr %398[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %403 = llvm.getelementptr %398[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %404 = llvm.load %401 : !llvm.ptr -> !llvm.ptr
    %405 = llvm.load %403 : !llvm.ptr -> !llvm.ptr
    %406 = llvm.ptrtoint %404 : !llvm.ptr to i64
    %c0_i64_114 = arith.constant 0 : i64
    %407 = arith.cmpi eq, %406, %c0_i64_114 : i64
    cf.cond_br %407, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c4_i32_115 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_115) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %408 = llvm.load %402 : !llvm.ptr -> i32
    %409 = arith.cmpi ne, %26, %408 : i32
    cf.cond_br %409, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_116 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_116) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %410 = llvm.call %404(%405, %372, %374) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_117 = arith.constant 0 : i32
    %411 = arith.cmpi ne, %410, %c0_i32_117 : i32
    cf.cond_br %411, ^bb5, ^bb63
  ^bb62:  // pred: ^bb59
    %c5_i32_118 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_118) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // pred: ^bb61
    %412 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_119 = arith.constant 8 : i32
    %413 = arith.addi %412, %c8_i32_119 : i32
    llvm.store %413, %0 : i32, !llvm.ptr
    %414 = llvm.load %8 : !llvm.ptr -> i32
    %415 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_120 = arith.constant 32 : i32
    %416 = arith.addi %415, %c32_i32_120 : i32
    llvm.store %416, %6 : i32, !llvm.ptr
    %417 = arith.cmpi eq, %414, %416 : i32
    %418 = arith.extui %417 : i1 to i32
    %c0_i32_121 = arith.constant 0 : i32
    %419 = arith.cmpi eq, %418, %c0_i32_121 : i32
    %420 = arith.extui %419 : i1 to i32
    %c0_i32_122 = arith.constant 0 : i32
    %421 = arith.cmpi ne, %420, %c0_i32_122 : i32
    cf.cond_br %421, ^bb35, ^bb64
  ^bb64:  // pred: ^bb63
    cf.br ^bb34
  ^bb65:  // pred: ^bb6
    %422 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_123 = arith.constant 32 : i64
    %423 = arith.extui %422 : i32 to i64
    %424 = arith.addi %423, %c32_i64_123 : i64
    %425 = llvm.getelementptr %17[%424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %426 = llvm.load volatile %425 {alignment = 1 : i64} : !llvm.ptr -> i32
    %427 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_124 = arith.constant 0 : i64
    %428 = arith.extui %427 : i32 to i64
    %429 = arith.addi %428, %c0_i64_124 : i64
    %430 = llvm.getelementptr %17[%429] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %431 = llvm.load volatile %430 {alignment = 1 : i64} : !llvm.ptr -> i32
    %432 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_125 = arith.constant 3 : i32
    %c31_i32_126 = arith.constant 31 : i32
    %433 = arith.cmpi ule, %c3_i32_125, %c31_i32_126 : i32
    %434 = scf.if %433 -> (i32) {
      %472 = arith.shli %432, %c3_i32_125 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    %435 = arith.addi %431, %434 : i32
    llvm.store %435, %1 : i32, !llvm.ptr
    %c0_i64_127 = arith.constant 0 : i64
    %436 = arith.extui %435 : i32 to i64
    %437 = arith.addi %436, %c0_i64_127 : i64
    %438 = llvm.getelementptr %17[%437] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %439 = llvm.load volatile %438 {alignment = 1 : i64} : !llvm.ptr -> i32
    %440 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_128 = arith.constant 4 : i64
    %441 = arith.extui %440 : i32 to i64
    %442 = arith.addi %441, %c4_i64_128 : i64
    %443 = llvm.getelementptr %17[%442] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %444 = llvm.load volatile %443 {alignment = 1 : i64} : !llvm.ptr -> i32
    %445 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_129 = arith.constant 36 : i64
    %446 = arith.extui %445 : i32 to i64
    %447 = arith.addi %446, %c36_i64_129 : i64
    %448 = llvm.getelementptr %17[%447] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %449 = llvm.load volatile %448 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_130 = arith.constant 12 : i64
    %450 = arith.extui %449 : i32 to i64
    %451 = arith.addi %450, %c12_i64_130 : i64
    %452 = llvm.getelementptr %17[%451] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %453 = llvm.load volatile %452 {alignment = 1 : i64} : !llvm.ptr -> i32
    %454 = arith.cmpi ult, %453, %38 : i32
    cf.cond_br %454, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %455 = llvm.getelementptr inbounds %36[%453] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %456 = llvm.load %455 : !llvm.ptr -> !llvm.ptr
    %457 = llvm.ptrtoint %456 : !llvm.ptr to i64
    %c0_i64_131 = arith.constant 0 : i64
    %458 = arith.cmpi eq, %457, %c0_i64_131 : i64
    cf.cond_br %458, ^bb69, ^bb68
  ^bb67:  // pred: ^bb65
    %c3_i32_132 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_132) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %459 = llvm.getelementptr %456[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %460 = llvm.getelementptr %456[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %461 = llvm.getelementptr %456[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %462 = llvm.load %459 : !llvm.ptr -> !llvm.ptr
    %463 = llvm.load %461 : !llvm.ptr -> !llvm.ptr
    %464 = llvm.ptrtoint %462 : !llvm.ptr to i64
    %c0_i64_133 = arith.constant 0 : i64
    %465 = arith.cmpi eq, %464, %c0_i64_133 : i64
    cf.cond_br %465, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c4_i32_134 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_134) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %466 = llvm.load %460 : !llvm.ptr -> i32
    %467 = arith.cmpi ne, %19, %466 : i32
    cf.cond_br %467, ^bb73, ^bb72
  ^bb71:  // pred: ^bb68
    %c3_i32_135 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_135) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %468 = llvm.call %462(%463, %426, %439, %444) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_136 = arith.constant 0 : i32
    %469 = arith.cmpi eq, %468, %c0_i32_136 : i32
    %470 = arith.extui %469 : i1 to i32
    %c0_i32_137 = arith.constant 0 : i32
    %471 = arith.cmpi ne, %470, %c0_i32_137 : i32
    cf.cond_br %471, ^bb4, ^bb74
  ^bb73:  // pred: ^bb70
    %c5_i32_138 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_138) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // pred: ^bb72
    cf.br ^bb5
  }
  func.func @f67(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %12 = arith.subi %11, %c64_i32 : i32
    llvm.store %12, %5 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %5 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %15 = arith.extui %13 : i32 to i64
    %16 = arith.addi %15, %c12_i64 : i64
    %17 = llvm.getelementptr %10[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %14, %17 {alignment = 1 : i64} : i32, !llvm.ptr
    %18 = llvm.load %5 : !llvm.ptr -> i32
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.extui %18 : i32 to i64
    %21 = arith.addi %20, %c8_i64 : i64
    %22 = llvm.getelementptr %10[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %19, %22 {alignment = 1 : i64} : i32, !llvm.ptr
    %23 = llvm.load %5 : !llvm.ptr -> i32
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %25 = arith.extui %23 : i32 to i64
    %26 = arith.addi %25, %c20_i64 : i64
    %27 = llvm.getelementptr %10[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c16_i64 : i64
    %32 = llvm.getelementptr %10[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %33 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c28_i64 = arith.constant 28 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c28_i64 : i64
    %36 = llvm.getelementptr %10[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %5 : !llvm.ptr -> i32
    %c1049280_i32 = arith.constant 1049280 : i32
    %c24_i64 = arith.constant 24 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c24_i64 : i64
    %40 = llvm.getelementptr %10[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049280_i32, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    %41 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c36_i64 = arith.constant 36 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c36_i64 : i64
    %44 = llvm.getelementptr %10[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %46 = arith.extui %c32_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %47 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %48 = scf.if %47 -> (i64) {
      %76 = arith.shli %46, %c32_i64 : i64
      scf.yield %76 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %49 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %50 = arith.addi %49, %c16_i32 : i32
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.ori %48, %51 : i64
    %c56_i64 = arith.constant 56 : i64
    %53 = arith.extui %45 : i32 to i64
    %54 = arith.addi %53, %c56_i64 : i64
    %55 = llvm.getelementptr %10[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %c33_i32 = arith.constant 33 : i32
    %57 = arith.extui %c33_i32 : i32 to i64
    %c32_i64_5 = arith.constant 32 : i64
    %c63_i64_6 = arith.constant 63 : i64
    %58 = arith.cmpi ule, %c32_i64_5, %c63_i64_6 : i64
    %59 = scf.if %58 -> (i64) {
      %76 = arith.shli %57, %c32_i64_5 : i64
      scf.yield %76 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %60 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %61 = arith.addi %60, %c8_i32 : i32
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.ori %59, %62 : i64
    %c48_i64 = arith.constant 48 : i64
    %64 = arith.extui %56 : i32 to i64
    %65 = arith.addi %64, %c48_i64 : i64
    %66 = llvm.getelementptr %10[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %63, %66 {alignment = 1 : i64} : i64, !llvm.ptr
    %67 = llvm.load %5 : !llvm.ptr -> i32
    %68 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %69 = arith.addi %68, %c48_i32 : i32
    %c32_i64_7 = arith.constant 32 : i64
    %70 = arith.extui %67 : i32 to i64
    %71 = arith.addi %70, %c32_i64_7 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i32, !llvm.ptr
    %73 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %74 = arith.addi %73, %c24_i32 : i32
    %75 = llvm.load %4 : !llvm.ptr -> i32
    call @f63(%arg0, %74, %75) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f68(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c4_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %16 = call @f64(%arg0, %5, %10, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f69(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> i32
    %7 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %8 : !llvm.ptr -> i64
    %11 = arith.trunci %10 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %4[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %4[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %4[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = arith.cmpi ult, %26, %11 : i32
    cf.cond_br %27, ^bb3, ^bb4
  ^bb2(%28: i32):  // pred: ^bb9
    return %28 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %29 = llvm.getelementptr inbounds %9[%26] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %30 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.ptrtoint %30 : !llvm.ptr to i64
    %c0_i64_1 = arith.constant 0 : i64
    %32 = arith.cmpi eq, %31, %c0_i64_1 : i64
    cf.cond_br %32, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %33 = llvm.getelementptr %30[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %34 = llvm.getelementptr %30[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.getelementptr %30[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.load %33 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.ptrtoint %36 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %39 = arith.cmpi eq, %38, %c0_i64_2 : i64
    cf.cond_br %39, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %40 = llvm.load %34 : !llvm.ptr -> i32
    %41 = arith.cmpi ne, %6, %40 : i32
    cf.cond_br %41, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %42 = llvm.call %36(%37, %16, %17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%42 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f70(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %19 : !llvm.ptr -> i64
    %22 = arith.trunci %21 : i64 to i32
    %23 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %19 : !llvm.ptr -> i64
    %25 = arith.trunci %24 : i64 to i32
    %26 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.load %26 : !llvm.ptr -> i32
    %28 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %19 : !llvm.ptr -> i64
    %30 = arith.trunci %29 : i64 to i32
    %31 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %19 : !llvm.ptr -> i64
    %33 = arith.trunci %32 : i64 to i32
    %34 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.load %19 : !llvm.ptr -> i64
    %36 = arith.trunci %35 : i64 to i32
    %37 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %19 : !llvm.ptr -> i64
    %39 = arith.trunci %38 : i64 to i32
    %40 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.load %19 : !llvm.ptr -> i64
    %42 = arith.trunci %41 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_12 : i32
    cf.cond_br %44, ^bb4, ^bb5
  ^bb2(%45: i32):  // 7 preds: ^bb24, ^bb34, ^bb45, ^bb51, ^bb76, ^bb98, ^bb101
    return %45 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %46 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %47 = arith.andi %46, %c4_i32 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_13 : i32
    cf.cond_br %48, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c43_i32 = arith.constant 43 : i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c28_i64 : i64
    %52 = llvm.getelementptr %15[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %53, %7 : i32, !llvm.ptr
    %c1_i32_14 = arith.constant 1 : i32
    %54 = arith.andi %53, %c1_i32_14 : i32
    llvm.store %54, %1 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_15 : i32
    %56 = arith.select %55, %c43_i32, %c1114112_i32 : i32
    llvm.store %56, %8 : i32, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %5 : !llvm.ptr -> i32
    %59 = arith.addi %57, %58 : i32
    llvm.store %59, %6 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %60 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %61 = arith.addi %60, %c1_i32_16 : i32
    llvm.store %61, %6 : i32, !llvm.ptr
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_17 = arith.constant 28 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c28_i64_17 : i64
    %65 = llvm.getelementptr %15[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %66, %7 : i32, !llvm.ptr
    %c45_i32 = arith.constant 45 : i32
    llvm.store %c45_i32, %8 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb8, ^bb9
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64 : i64
    %70 = llvm.getelementptr %15[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_18 : i32
    cf.cond_br %72, ^bb25, ^bb26
  ^bb7:  // pred: ^bb3
    %73 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %74 = arith.cmpi ult, %73, %c16_i32 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_19 : i32
    cf.cond_br %76, ^bb10, ^bb11
  ^bb8:  // pred: ^bb3
    %c0_i32_20 = arith.constant 0 : i32
    llvm.store %c0_i32_20, %2 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // 4 preds: ^bb11, ^bb13, ^bb14, ^bb21
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %78 = llvm.load %6 : !llvm.ptr -> i32
    %79 = arith.addi %77, %78 : i32
    llvm.store %79, %6 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb10:  // pred: ^bb7
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %81 = arith.cmpi ne, %80, %c0_i32_21 : i32
    cf.cond_br %81, ^bb12, ^bb13
  ^bb11:  // pred: ^bb7
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %84 = call @f71(%arg0, %82, %83) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %84, %1 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb10
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %86 = arith.andi %85, %c3_i32 : i32
    llvm.store %86, %9 : i32, !llvm.ptr
    %87 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_22 = arith.constant 4 : i32
    %88 = arith.cmpi uge, %87, %c4_i32_22 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_23 : i32
    cf.cond_br %90, ^bb15, ^bb16
  ^bb13:  // pred: ^bb10
    %c0_i32_24 = arith.constant 0 : i32
    llvm.store %c0_i32_24, %1 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb14:  // 2 preds: ^bb16, ^bb17
    %91 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_25 = arith.constant 0 : i32
    %92 = arith.cmpi eq, %91, %c0_i32_25 : i32
    %93 = arith.extui %92 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %94 = arith.cmpi ne, %93, %c0_i32_26 : i32
    cf.cond_br %94, ^bb9, ^bb20
  ^bb15:  // pred: ^bb12
    %95 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %96 = arith.andi %95, %c12_i32 : i32
    llvm.store %96, %11 : i32, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    llvm.store %c0_i32_27, %1 : i32, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    llvm.store %c0_i32_28, %10 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb16:  // pred: ^bb12
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %1 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    llvm.store %c0_i32_30, %10 : i32, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb19
    cf.br ^bb14
  ^bb18:  // 2 preds: ^bb15, ^bb18
    %97 = llvm.load %1 : !llvm.ptr -> i32
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %99 = llvm.load %10 : !llvm.ptr -> i32
    %100 = arith.addi %98, %99 : i32
    llvm.store %100, %12 : i32, !llvm.ptr
    %c0_i64_31 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_31 : i64
    %103 = llvm.getelementptr %15[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i8
    %105 = arith.extsi %104 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %106 = arith.cmpi sgt, %105, %c-65_i32 : i32
    %107 = arith.extui %106 : i1 to i32
    %108 = arith.addi %97, %107 : i32
    %109 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_32 = arith.constant 1 : i32
    %110 = arith.addi %109, %c1_i32_32 : i32
    %c0_i64_33 = arith.constant 0 : i64
    %111 = arith.extui %110 : i32 to i64
    %112 = arith.addi %111, %c0_i64_33 : i64
    %113 = llvm.getelementptr %15[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = llvm.load volatile %113 {alignment = 1 : i64} : !llvm.ptr -> i8
    %115 = arith.extsi %114 : i8 to i32
    %c-65_i32_34 = arith.constant -65 : i32
    %116 = arith.cmpi sgt, %115, %c-65_i32_34 : i32
    %117 = arith.extui %116 : i1 to i32
    %118 = arith.addi %108, %117 : i32
    %119 = llvm.load %12 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %120 = arith.addi %119, %c2_i32 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64_35 : i64
    %123 = llvm.getelementptr %15[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i8
    %125 = arith.extsi %124 : i8 to i32
    %c-65_i32_36 = arith.constant -65 : i32
    %126 = arith.cmpi sgt, %125, %c-65_i32_36 : i32
    %127 = arith.extui %126 : i1 to i32
    %128 = arith.addi %118, %127 : i32
    %129 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i32_37 = arith.constant 3 : i32
    %130 = arith.addi %129, %c3_i32_37 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c0_i64_38 : i64
    %133 = llvm.getelementptr %15[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i8
    %135 = arith.extsi %134 : i8 to i32
    %c-65_i32_39 = arith.constant -65 : i32
    %136 = arith.cmpi sgt, %135, %c-65_i32_39 : i32
    %137 = arith.extui %136 : i1 to i32
    %138 = arith.addi %128, %137 : i32
    llvm.store %138, %1 : i32, !llvm.ptr
    %139 = llvm.load %11 : !llvm.ptr -> i32
    %140 = llvm.load %10 : !llvm.ptr -> i32
    %c4_i32_40 = arith.constant 4 : i32
    %141 = arith.addi %140, %c4_i32_40 : i32
    llvm.store %141, %10 : i32, !llvm.ptr
    %142 = arith.cmpi eq, %139, %141 : i32
    %143 = arith.extui %142 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %144 = arith.cmpi eq, %143, %c0_i32_41 : i32
    %145 = arith.extui %144 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %146 = arith.cmpi ne, %145, %c0_i32_42 : i32
    cf.cond_br %146, ^bb18, ^bb19
  ^bb19:  // pred: ^bb18
    cf.br ^bb17
  ^bb20:  // pred: ^bb14
    %147 = llvm.load %2 : !llvm.ptr -> i32
    %148 = llvm.load %10 : !llvm.ptr -> i32
    %149 = arith.addi %147, %148 : i32
    llvm.store %149, %12 : i32, !llvm.ptr
    cf.br ^bb22
  ^bb21:  // pred: ^bb23
    cf.br ^bb9
  ^bb22:  // 2 preds: ^bb20, ^bb22
    %150 = llvm.load %1 : !llvm.ptr -> i32
    %151 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_43 = arith.constant 0 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c0_i64_43 : i64
    %154 = llvm.getelementptr %15[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i8
    %156 = arith.extsi %155 : i8 to i32
    %c-65_i32_44 = arith.constant -65 : i32
    %157 = arith.cmpi sgt, %156, %c-65_i32_44 : i32
    %158 = arith.extui %157 : i1 to i32
    %159 = arith.addi %150, %158 : i32
    llvm.store %159, %1 : i32, !llvm.ptr
    %160 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_45 = arith.constant 1 : i32
    %161 = arith.addi %160, %c1_i32_45 : i32
    llvm.store %161, %12 : i32, !llvm.ptr
    %162 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %163 = arith.addi %162, %c-1_i32 : i32
    llvm.store %163, %9 : i32, !llvm.ptr
    %c0_i32_46 = arith.constant 0 : i32
    %164 = arith.cmpi ne, %163, %c0_i32_46 : i32
    cf.cond_br %164, ^bb22, ^bb23
  ^bb23:  // pred: ^bb22
    cf.br ^bb21
  ^bb24:  // 7 preds: ^bb26, ^bb37, ^bb48, ^bb69, ^bb71, ^bb75, ^bb95
    %165 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%165 : i32)
  ^bb25:  // pred: ^bb6
    %166 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %167 = arith.extui %166 : i32 to i64
    %168 = arith.addi %167, %c4_i64 : i64
    %169 = llvm.getelementptr %15[%168] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %170 = llvm.load volatile %169 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %170, %9 : i32, !llvm.ptr
    %171 = llvm.load %6 : !llvm.ptr -> i32
    %172 = arith.cmpi ugt, %170, %171 : i32
    %173 = arith.extui %172 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %174 = arith.cmpi ne, %173, %c0_i32_47 : i32
    cf.cond_br %174, ^bb36, ^bb37
  ^bb26:  // pred: ^bb6
    %c1_i32_48 = arith.constant 1 : i32
    llvm.store %c1_i32_48, %1 : i32, !llvm.ptr
    %175 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %176 = arith.extui %175 : i32 to i64
    %177 = arith.addi %176, %c20_i64 : i64
    %178 = llvm.getelementptr %15[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %179 = llvm.load volatile %178 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %179, %12 : i32, !llvm.ptr
    %180 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %181 = arith.extui %180 : i32 to i64
    %182 = arith.addi %181, %c24_i64 : i64
    %183 = llvm.getelementptr %15[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %184 = llvm.load volatile %183 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %184, %10 : i32, !llvm.ptr
    %185 = llvm.load %8 : !llvm.ptr -> i32
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %187 = llvm.load %3 : !llvm.ptr -> i32
    %188 = call @f72(%arg0, %179, %184, %185, %186, %187) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %189 = arith.cmpi ne, %188, %c0_i32_49 : i32
    cf.cond_br %189, ^bb24, ^bb27
  ^bb27:  // pred: ^bb26
    %190 = llvm.load %12 : !llvm.ptr -> i32
    %191 = llvm.load %4 : !llvm.ptr -> i32
    %192 = llvm.load %5 : !llvm.ptr -> i32
    %193 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %194 = arith.extui %193 : i32 to i64
    %195 = arith.addi %194, %c12_i64 : i64
    %196 = llvm.getelementptr %15[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %197 = llvm.load volatile %196 {alignment = 1 : i64} : !llvm.ptr -> i32
    %198 = arith.cmpi ult, %197, %22 : i32
    cf.cond_br %198, ^bb28, ^bb29
  ^bb28:  // 2 preds: ^bb27, ^bb29
    %199 = llvm.getelementptr inbounds %20[%197] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %200 = llvm.load %199 : !llvm.ptr -> !llvm.ptr
    %201 = llvm.ptrtoint %200 : !llvm.ptr to i64
    %c0_i64_50 = arith.constant 0 : i64
    %202 = arith.cmpi eq, %201, %c0_i64_50 : i64
    cf.cond_br %202, ^bb31, ^bb30
  ^bb29:  // pred: ^bb27
    %c3_i32_51 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_51) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %203 = llvm.getelementptr %200[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %204 = llvm.getelementptr %200[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %205 = llvm.getelementptr %200[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %206 = llvm.load %203 : !llvm.ptr -> !llvm.ptr
    %207 = llvm.load %205 : !llvm.ptr -> !llvm.ptr
    %208 = llvm.ptrtoint %206 : !llvm.ptr to i64
    %c0_i64_52 = arith.constant 0 : i64
    %209 = arith.cmpi eq, %208, %c0_i64_52 : i64
    cf.cond_br %209, ^bb33, ^bb32
  ^bb31:  // pred: ^bb28
    %c4_i32_53 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_53) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %210 = llvm.load %204 : !llvm.ptr -> i32
    %211 = arith.cmpi ne, %17, %210 : i32
    cf.cond_br %211, ^bb35, ^bb34
  ^bb33:  // pred: ^bb30
    %c3_i32_54 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_54) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %212 = llvm.call %206(%207, %190, %191, %192) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%212 : i32)
  ^bb35:  // pred: ^bb32
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // pred: ^bb25
    %213 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %214 = arith.andi %213, %c8_i32 : i32
    %c0_i32_55 = arith.constant 0 : i32
    %215 = arith.cmpi eq, %214, %c0_i32_55 : i32
    %216 = arith.extui %215 : i1 to i32
    %c0_i32_56 = arith.constant 0 : i32
    %217 = arith.cmpi ne, %216, %c0_i32_56 : i32
    cf.cond_br %217, ^bb47, ^bb48
  ^bb37:  // pred: ^bb25
    %c1_i32_57 = arith.constant 1 : i32
    llvm.store %c1_i32_57, %1 : i32, !llvm.ptr
    %218 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_58 = arith.constant 20 : i64
    %219 = arith.extui %218 : i32 to i64
    %220 = arith.addi %219, %c20_i64_58 : i64
    %221 = llvm.getelementptr %15[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %222 = llvm.load volatile %221 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %222, %12 : i32, !llvm.ptr
    %223 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_59 = arith.constant 24 : i64
    %224 = arith.extui %223 : i32 to i64
    %225 = arith.addi %224, %c24_i64_59 : i64
    %226 = llvm.getelementptr %15[%225] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %227 = llvm.load volatile %226 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %227, %10 : i32, !llvm.ptr
    %228 = llvm.load %8 : !llvm.ptr -> i32
    %229 = llvm.load %2 : !llvm.ptr -> i32
    %230 = llvm.load %3 : !llvm.ptr -> i32
    %231 = call @f72(%arg0, %222, %227, %228, %229, %230) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_60 = arith.constant 0 : i32
    %232 = arith.cmpi ne, %231, %c0_i32_60 : i32
    cf.cond_br %232, ^bb24, ^bb38
  ^bb38:  // pred: ^bb37
    %233 = llvm.load %12 : !llvm.ptr -> i32
    %234 = llvm.load %4 : !llvm.ptr -> i32
    %235 = llvm.load %5 : !llvm.ptr -> i32
    %236 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64_61 = arith.constant 12 : i64
    %237 = arith.extui %236 : i32 to i64
    %238 = arith.addi %237, %c12_i64_61 : i64
    %239 = llvm.getelementptr %15[%238] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %240 = llvm.load volatile %239 {alignment = 1 : i64} : !llvm.ptr -> i32
    %241 = arith.cmpi ult, %240, %25 : i32
    cf.cond_br %241, ^bb39, ^bb40
  ^bb39:  // 2 preds: ^bb38, ^bb40
    %242 = llvm.getelementptr inbounds %23[%240] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %243 = llvm.load %242 : !llvm.ptr -> !llvm.ptr
    %244 = llvm.ptrtoint %243 : !llvm.ptr to i64
    %c0_i64_62 = arith.constant 0 : i64
    %245 = arith.cmpi eq, %244, %c0_i64_62 : i64
    cf.cond_br %245, ^bb42, ^bb41
  ^bb40:  // pred: ^bb38
    %c3_i32_63 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_63) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %246 = llvm.getelementptr %243[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %247 = llvm.getelementptr %243[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %248 = llvm.getelementptr %243[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %249 = llvm.load %246 : !llvm.ptr -> !llvm.ptr
    %250 = llvm.load %248 : !llvm.ptr -> !llvm.ptr
    %251 = llvm.ptrtoint %249 : !llvm.ptr to i64
    %c0_i64_64 = arith.constant 0 : i64
    %252 = arith.cmpi eq, %251, %c0_i64_64 : i64
    cf.cond_br %252, ^bb44, ^bb43
  ^bb42:  // pred: ^bb39
    %c4_i32_65 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_65) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %253 = llvm.load %247 : !llvm.ptr -> i32
    %254 = arith.cmpi ne, %17, %253 : i32
    cf.cond_br %254, ^bb46, ^bb45
  ^bb44:  // pred: ^bb41
    %c3_i32_66 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_66) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %255 = llvm.call %249(%250, %233, %234, %235) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%255 : i32)
  ^bb46:  // pred: ^bb43
    %c5_i32_67 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_67) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // pred: ^bb36
    %256 = llvm.load %9 : !llvm.ptr -> i32
    %257 = llvm.load %6 : !llvm.ptr -> i32
    %258 = arith.subi %256, %257 : i32
    llvm.store %258, %6 : i32, !llvm.ptr
    %259 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %260 = arith.extui %259 : i32 to i64
    %261 = arith.addi %260, %c32_i64 : i64
    %262 = llvm.getelementptr %15[%261] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %263 = llvm.load volatile %262 {alignment = 1 : i64} : !llvm.ptr -> i8
    %264 = arith.extui %263 : i8 to i32
    llvm.store %264, %1 : i32, !llvm.ptr
    cf.switch %264 : i32, [
      default: ^bb72,
      0: ^bb72,
      1: ^bb74,
      2: ^bb73,
      3: ^bb74
    ]
  ^bb48:  // pred: ^bb36
    %265 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %266 = arith.extui %265 : i32 to i64
    %267 = arith.addi %266, %c16_i64 : i64
    %268 = llvm.getelementptr %15[%267] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %269 = llvm.load volatile %268 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %269, %11 : i32, !llvm.ptr
    %270 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %c16_i64_68 = arith.constant 16 : i64
    %271 = arith.extui %270 : i32 to i64
    %272 = arith.addi %271, %c16_i64_68 : i64
    %273 = llvm.getelementptr %15[%272] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c48_i32, %273 {alignment = 1 : i64} : i32, !llvm.ptr
    %274 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64_69 = arith.constant 32 : i64
    %275 = arith.extui %274 : i32 to i64
    %276 = arith.addi %275, %c32_i64_69 : i64
    %277 = llvm.getelementptr %15[%276] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %278 = llvm.load volatile %277 {alignment = 1 : i64} : !llvm.ptr -> i8
    %279 = arith.extui %278 : i8 to i32
    llvm.store %279, %7 : i32, !llvm.ptr
    %c1_i32_70 = arith.constant 1 : i32
    llvm.store %c1_i32_70, %1 : i32, !llvm.ptr
    %280 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_71 = arith.constant 1 : i32
    %c32_i64_72 = arith.constant 32 : i64
    %281 = arith.extui %280 : i32 to i64
    %282 = arith.addi %281, %c32_i64_72 : i64
    %283 = llvm.getelementptr %15[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %284 = arith.trunci %c1_i32_71 : i32 to i8
    llvm.store volatile %284, %283 {alignment = 1 : i64} : i8, !llvm.ptr
    %285 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_73 = arith.constant 20 : i64
    %286 = arith.extui %285 : i32 to i64
    %287 = arith.addi %286, %c20_i64_73 : i64
    %288 = llvm.getelementptr %15[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %289 = llvm.load volatile %288 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %289, %12 : i32, !llvm.ptr
    %290 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_74 = arith.constant 24 : i64
    %291 = arith.extui %290 : i32 to i64
    %292 = arith.addi %291, %c24_i64_74 : i64
    %293 = llvm.getelementptr %15[%292] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %294 = llvm.load volatile %293 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %294, %10 : i32, !llvm.ptr
    %295 = llvm.load %8 : !llvm.ptr -> i32
    %296 = llvm.load %2 : !llvm.ptr -> i32
    %297 = llvm.load %3 : !llvm.ptr -> i32
    %298 = call @f72(%arg0, %289, %294, %295, %296, %297) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_75 = arith.constant 0 : i32
    %299 = arith.cmpi ne, %298, %c0_i32_75 : i32
    cf.cond_br %299, ^bb24, ^bb49
  ^bb49:  // pred: ^bb48
    %300 = llvm.load %9 : !llvm.ptr -> i32
    %301 = llvm.load %6 : !llvm.ptr -> i32
    %302 = arith.subi %300, %301 : i32
    %c1_i32_76 = arith.constant 1 : i32
    %303 = arith.addi %302, %c1_i32_76 : i32
    llvm.store %303, %1 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb50:  // pred: ^bb52
    %c1_i32_77 = arith.constant 1 : i32
    llvm.store %c1_i32_77, %1 : i32, !llvm.ptr
    %304 = llvm.load %12 : !llvm.ptr -> i32
    %305 = llvm.load %4 : !llvm.ptr -> i32
    %306 = llvm.load %5 : !llvm.ptr -> i32
    %307 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64_78 = arith.constant 12 : i64
    %308 = arith.extui %307 : i32 to i64
    %309 = arith.addi %308, %c12_i64_78 : i64
    %310 = llvm.getelementptr %15[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load volatile %310 {alignment = 1 : i64} : !llvm.ptr -> i32
    %312 = arith.cmpi ult, %311, %33 : i32
    cf.cond_br %312, ^bb63, ^bb64
  ^bb51:  // pred: ^bb62
    %c1_i32_79 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_79 : i32)
  ^bb52:  // 2 preds: ^bb49, ^bb60
    %313 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_80 = arith.constant -1 : i32
    %314 = arith.addi %313, %c-1_i32_80 : i32
    llvm.store %314, %1 : i32, !llvm.ptr
    %c0_i32_81 = arith.constant 0 : i32
    %315 = arith.cmpi eq, %314, %c0_i32_81 : i32
    %316 = arith.extui %315 : i1 to i32
    %c0_i32_82 = arith.constant 0 : i32
    %317 = arith.cmpi ne, %316, %c0_i32_82 : i32
    cf.cond_br %317, ^bb50, ^bb53
  ^bb53:  // pred: ^bb52
    %318 = llvm.load %12 : !llvm.ptr -> i32
    %c48_i32_83 = arith.constant 48 : i32
    %319 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i64_84 = arith.constant 16 : i64
    %320 = arith.extui %319 : i32 to i64
    %321 = arith.addi %320, %c16_i64_84 : i64
    %322 = llvm.getelementptr %15[%321] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %323 = llvm.load volatile %322 {alignment = 1 : i64} : !llvm.ptr -> i32
    %324 = arith.cmpi ult, %323, %30 : i32
    cf.cond_br %324, ^bb54, ^bb55
  ^bb54:  // 2 preds: ^bb53, ^bb55
    %325 = llvm.getelementptr inbounds %28[%323] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %326 = llvm.load %325 : !llvm.ptr -> !llvm.ptr
    %327 = llvm.ptrtoint %326 : !llvm.ptr to i64
    %c0_i64_85 = arith.constant 0 : i64
    %328 = arith.cmpi eq, %327, %c0_i64_85 : i64
    cf.cond_br %328, ^bb57, ^bb56
  ^bb55:  // pred: ^bb53
    %c3_i32_86 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_86) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %329 = llvm.getelementptr %326[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %330 = llvm.getelementptr %326[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %331 = llvm.getelementptr %326[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %332 = llvm.load %329 : !llvm.ptr -> !llvm.ptr
    %333 = llvm.load %331 : !llvm.ptr -> !llvm.ptr
    %334 = llvm.ptrtoint %332 : !llvm.ptr to i64
    %c0_i64_87 = arith.constant 0 : i64
    %335 = arith.cmpi eq, %334, %c0_i64_87 : i64
    cf.cond_br %335, ^bb59, ^bb58
  ^bb57:  // pred: ^bb54
    %c4_i32_88 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_88) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %336 = llvm.load %330 : !llvm.ptr -> i32
    %337 = arith.cmpi ne, %27, %336 : i32
    cf.cond_br %337, ^bb61, ^bb60
  ^bb59:  // pred: ^bb56
    %c3_i32_89 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_89) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %338 = llvm.call %332(%333, %318, %c48_i32_83) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_90 = arith.constant 0 : i32
    %339 = arith.cmpi eq, %338, %c0_i32_90 : i32
    %340 = arith.extui %339 : i1 to i32
    %c0_i32_91 = arith.constant 0 : i32
    %341 = arith.cmpi ne, %340, %c0_i32_91 : i32
    cf.cond_br %341, ^bb52, ^bb62
  ^bb61:  // pred: ^bb58
    %c5_i32_92 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_92) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // pred: ^bb60
    cf.br ^bb51
  ^bb63:  // 2 preds: ^bb50, ^bb64
    %342 = llvm.getelementptr inbounds %31[%311] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %343 = llvm.load %342 : !llvm.ptr -> !llvm.ptr
    %344 = llvm.ptrtoint %343 : !llvm.ptr to i64
    %c0_i64_93 = arith.constant 0 : i64
    %345 = arith.cmpi eq, %344, %c0_i64_93 : i64
    cf.cond_br %345, ^bb66, ^bb65
  ^bb64:  // pred: ^bb50
    %c3_i32_94 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_94) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %346 = llvm.getelementptr %343[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %347 = llvm.getelementptr %343[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %348 = llvm.getelementptr %343[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %349 = llvm.load %346 : !llvm.ptr -> !llvm.ptr
    %350 = llvm.load %348 : !llvm.ptr -> !llvm.ptr
    %351 = llvm.ptrtoint %349 : !llvm.ptr to i64
    %c0_i64_95 = arith.constant 0 : i64
    %352 = arith.cmpi eq, %351, %c0_i64_95 : i64
    cf.cond_br %352, ^bb68, ^bb67
  ^bb66:  // pred: ^bb63
    %c4_i32_96 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_96) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %353 = llvm.load %347 : !llvm.ptr -> i32
    %354 = arith.cmpi ne, %17, %353 : i32
    cf.cond_br %354, ^bb70, ^bb69
  ^bb68:  // pred: ^bb65
    %c3_i32_97 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_97) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %355 = llvm.call %349(%350, %304, %305, %306) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_98 = arith.constant 0 : i32
    %356 = arith.cmpi ne, %355, %c0_i32_98 : i32
    cf.cond_br %356, ^bb24, ^bb71
  ^bb70:  // pred: ^bb67
    %c5_i32_99 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_99) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // pred: ^bb69
    %357 = llvm.load %0 : !llvm.ptr -> i32
    %358 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i64_100 = arith.constant 32 : i64
    %359 = arith.extui %357 : i32 to i64
    %360 = arith.addi %359, %c32_i64_100 : i64
    %361 = llvm.getelementptr %15[%360] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %362 = arith.trunci %358 : i32 to i8
    llvm.store volatile %362, %361 {alignment = 1 : i64} : i8, !llvm.ptr
    %363 = llvm.load %0 : !llvm.ptr -> i32
    %364 = llvm.load %11 : !llvm.ptr -> i32
    %c16_i64_101 = arith.constant 16 : i64
    %365 = arith.extui %363 : i32 to i64
    %366 = arith.addi %365, %c16_i64_101 : i64
    %367 = llvm.getelementptr %15[%366] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %364, %367 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_102 = arith.constant 0 : i32
    llvm.store %c0_i32_102, %1 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb72:  // 4 preds: ^bb47, ^bb47, ^bb73, ^bb74
    %368 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_103 = arith.constant 1 : i32
    %369 = arith.addi %368, %c1_i32_103 : i32
    llvm.store %369, %1 : i32, !llvm.ptr
    %370 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64_104 = arith.constant 16 : i64
    %371 = arith.extui %370 : i32 to i64
    %372 = arith.addi %371, %c16_i64_104 : i64
    %373 = llvm.getelementptr %15[%372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %374 = llvm.load volatile %373 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %374, %9 : i32, !llvm.ptr
    %375 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_105 = arith.constant 24 : i64
    %376 = arith.extui %375 : i32 to i64
    %377 = arith.addi %376, %c24_i64_105 : i64
    %378 = llvm.getelementptr %15[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %379, %12 : i32, !llvm.ptr
    %380 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_106 = arith.constant 20 : i64
    %381 = arith.extui %380 : i32 to i64
    %382 = arith.addi %381, %c20_i64_106 : i64
    %383 = llvm.getelementptr %15[%382] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %384 = llvm.load volatile %383 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %384, %10 : i32, !llvm.ptr
    cf.br ^bb77
  ^bb73:  // pred: ^bb47
    %385 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_107 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %386 = arith.cmpi ule, %c1_i32_107, %c31_i32 : i32
    %387 = scf.if %386 -> (i32) {
      %497 = arith.shrui %385, %c1_i32_107 : i32
      scf.yield %497 : i32
    } else {
      %c0_i32_149 = arith.constant 0 : i32
      scf.yield %c0_i32_149 : i32
    }
    llvm.store %387, %1 : i32, !llvm.ptr
    %388 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_108 = arith.constant 1 : i32
    %389 = arith.addi %388, %c1_i32_108 : i32
    %c1_i32_109 = arith.constant 1 : i32
    %c31_i32_110 = arith.constant 31 : i32
    %390 = arith.cmpi ule, %c1_i32_109, %c31_i32_110 : i32
    %391 = scf.if %390 -> (i32) {
      %497 = arith.shrui %389, %c1_i32_109 : i32
      scf.yield %497 : i32
    } else {
      %c0_i32_149 = arith.constant 0 : i32
      scf.yield %c0_i32_149 : i32
    }
    llvm.store %391, %6 : i32, !llvm.ptr
    cf.br ^bb72
  ^bb74:  // 2 preds: ^bb47, ^bb47
    %392 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %392, %1 : i32, !llvm.ptr
    %c0_i32_111 = arith.constant 0 : i32
    llvm.store %c0_i32_111, %6 : i32, !llvm.ptr
    cf.br ^bb72
  ^bb75:  // pred: ^bb77
    %c1_i32_112 = arith.constant 1 : i32
    llvm.store %c1_i32_112, %1 : i32, !llvm.ptr
    %393 = llvm.load %10 : !llvm.ptr -> i32
    %394 = llvm.load %12 : !llvm.ptr -> i32
    %395 = llvm.load %8 : !llvm.ptr -> i32
    %396 = llvm.load %2 : !llvm.ptr -> i32
    %397 = llvm.load %3 : !llvm.ptr -> i32
    %398 = call @f72(%arg0, %393, %394, %395, %396, %397) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_113 = arith.constant 0 : i32
    %399 = arith.cmpi ne, %398, %c0_i32_113 : i32
    cf.cond_br %399, ^bb24, ^bb88
  ^bb76:  // pred: ^bb87
    %c1_i32_114 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_114 : i32)
  ^bb77:  // 2 preds: ^bb72, ^bb85
    %400 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_115 = arith.constant -1 : i32
    %401 = arith.addi %400, %c-1_i32_115 : i32
    llvm.store %401, %1 : i32, !llvm.ptr
    %c0_i32_116 = arith.constant 0 : i32
    %402 = arith.cmpi eq, %401, %c0_i32_116 : i32
    %403 = arith.extui %402 : i1 to i32
    %c0_i32_117 = arith.constant 0 : i32
    %404 = arith.cmpi ne, %403, %c0_i32_117 : i32
    cf.cond_br %404, ^bb75, ^bb78
  ^bb78:  // pred: ^bb77
    %405 = llvm.load %10 : !llvm.ptr -> i32
    %406 = llvm.load %9 : !llvm.ptr -> i32
    %407 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_118 = arith.constant 16 : i64
    %408 = arith.extui %407 : i32 to i64
    %409 = arith.addi %408, %c16_i64_118 : i64
    %410 = llvm.getelementptr %15[%409] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %411 = llvm.load volatile %410 {alignment = 1 : i64} : !llvm.ptr -> i32
    %412 = arith.cmpi ult, %411, %36 : i32
    cf.cond_br %412, ^bb79, ^bb80
  ^bb79:  // 2 preds: ^bb78, ^bb80
    %413 = llvm.getelementptr inbounds %34[%411] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %414 = llvm.load %413 : !llvm.ptr -> !llvm.ptr
    %415 = llvm.ptrtoint %414 : !llvm.ptr to i64
    %c0_i64_119 = arith.constant 0 : i64
    %416 = arith.cmpi eq, %415, %c0_i64_119 : i64
    cf.cond_br %416, ^bb82, ^bb81
  ^bb80:  // pred: ^bb78
    %c3_i32_120 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_120) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %417 = llvm.getelementptr %414[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %418 = llvm.getelementptr %414[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %419 = llvm.getelementptr %414[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %420 = llvm.load %417 : !llvm.ptr -> !llvm.ptr
    %421 = llvm.load %419 : !llvm.ptr -> !llvm.ptr
    %422 = llvm.ptrtoint %420 : !llvm.ptr to i64
    %c0_i64_121 = arith.constant 0 : i64
    %423 = arith.cmpi eq, %422, %c0_i64_121 : i64
    cf.cond_br %423, ^bb84, ^bb83
  ^bb82:  // pred: ^bb79
    %c4_i32_122 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_122) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %424 = llvm.load %418 : !llvm.ptr -> i32
    %425 = arith.cmpi ne, %27, %424 : i32
    cf.cond_br %425, ^bb86, ^bb85
  ^bb84:  // pred: ^bb81
    %c3_i32_123 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_123) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %426 = llvm.call %420(%421, %405, %406) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_124 = arith.constant 0 : i32
    %427 = arith.cmpi eq, %426, %c0_i32_124 : i32
    %428 = arith.extui %427 : i1 to i32
    %c0_i32_125 = arith.constant 0 : i32
    %429 = arith.cmpi ne, %428, %c0_i32_125 : i32
    cf.cond_br %429, ^bb77, ^bb87
  ^bb86:  // pred: ^bb83
    %c5_i32_126 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_126) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // pred: ^bb85
    cf.br ^bb76
  ^bb88:  // pred: ^bb75
    %430 = llvm.load %10 : !llvm.ptr -> i32
    %431 = llvm.load %4 : !llvm.ptr -> i32
    %432 = llvm.load %5 : !llvm.ptr -> i32
    %433 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64_127 = arith.constant 12 : i64
    %434 = arith.extui %433 : i32 to i64
    %435 = arith.addi %434, %c12_i64_127 : i64
    %436 = llvm.getelementptr %15[%435] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %437 = llvm.load volatile %436 {alignment = 1 : i64} : !llvm.ptr -> i32
    %438 = arith.cmpi ult, %437, %39 : i32
    cf.cond_br %438, ^bb89, ^bb90
  ^bb89:  // 2 preds: ^bb88, ^bb90
    %439 = llvm.getelementptr inbounds %37[%437] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %440 = llvm.load %439 : !llvm.ptr -> !llvm.ptr
    %441 = llvm.ptrtoint %440 : !llvm.ptr to i64
    %c0_i64_128 = arith.constant 0 : i64
    %442 = arith.cmpi eq, %441, %c0_i64_128 : i64
    cf.cond_br %442, ^bb92, ^bb91
  ^bb90:  // pred: ^bb88
    %c3_i32_129 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_129) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %443 = llvm.getelementptr %440[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %444 = llvm.getelementptr %440[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %445 = llvm.getelementptr %440[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %446 = llvm.load %443 : !llvm.ptr -> !llvm.ptr
    %447 = llvm.load %445 : !llvm.ptr -> !llvm.ptr
    %448 = llvm.ptrtoint %446 : !llvm.ptr to i64
    %c0_i64_130 = arith.constant 0 : i64
    %449 = arith.cmpi eq, %448, %c0_i64_130 : i64
    cf.cond_br %449, ^bb94, ^bb93
  ^bb92:  // pred: ^bb89
    %c4_i32_131 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_131) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // 2 preds: ^bb91, ^bb94
    %450 = llvm.load %444 : !llvm.ptr -> i32
    %451 = arith.cmpi ne, %17, %450 : i32
    cf.cond_br %451, ^bb96, ^bb95
  ^bb94:  // pred: ^bb91
    %c3_i32_132 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_132) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // 2 preds: ^bb93, ^bb96
    %452 = llvm.call %446(%447, %430, %431, %432) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_133 = arith.constant 0 : i32
    %453 = arith.cmpi ne, %452, %c0_i32_133 : i32
    cf.cond_br %453, ^bb24, ^bb97
  ^bb96:  // pred: ^bb93
    %c5_i32_134 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_134) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // pred: ^bb95
    %c0_i32_135 = arith.constant 0 : i32
    llvm.store %c0_i32_135, %1 : i32, !llvm.ptr
    cf.br ^bb99
  ^bb98:  // pred: ^bb110
    %454 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_136 = arith.constant -1 : i32
    %455 = arith.addi %454, %c-1_i32_136 : i32
    %456 = llvm.load %6 : !llvm.ptr -> i32
    %457 = arith.cmpi ult, %455, %456 : i32
    %458 = arith.extui %457 : i1 to i32
    cf.br ^bb2(%458 : i32)
  ^bb99:  // 2 preds: ^bb97, ^bb108
    %459 = llvm.load %6 : !llvm.ptr -> i32
    %460 = llvm.load %1 : !llvm.ptr -> i32
    %461 = arith.cmpi eq, %459, %460 : i32
    %462 = arith.extui %461 : i1 to i32
    %c0_i32_137 = arith.constant 0 : i32
    %463 = arith.cmpi eq, %462, %c0_i32_137 : i32
    %464 = arith.extui %463 : i1 to i32
    %c0_i32_138 = arith.constant 0 : i32
    %465 = arith.cmpi ne, %464, %c0_i32_138 : i32
    cf.cond_br %465, ^bb100, ^bb101
  ^bb100:  // pred: ^bb99
    %466 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_139 = arith.constant 1 : i32
    %467 = arith.addi %466, %c1_i32_139 : i32
    llvm.store %467, %1 : i32, !llvm.ptr
    %468 = llvm.load %10 : !llvm.ptr -> i32
    %469 = llvm.load %9 : !llvm.ptr -> i32
    %470 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_140 = arith.constant 16 : i64
    %471 = arith.extui %470 : i32 to i64
    %472 = arith.addi %471, %c16_i64_140 : i64
    %473 = llvm.getelementptr %15[%472] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %474 = llvm.load volatile %473 {alignment = 1 : i64} : !llvm.ptr -> i32
    %475 = arith.cmpi ult, %474, %42 : i32
    cf.cond_br %475, ^bb102, ^bb103
  ^bb101:  // pred: ^bb99
    %476 = llvm.load %6 : !llvm.ptr -> i32
    %477 = llvm.load %6 : !llvm.ptr -> i32
    %478 = arith.cmpi ult, %476, %477 : i32
    %479 = arith.extui %478 : i1 to i32
    cf.br ^bb2(%479 : i32)
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %480 = llvm.getelementptr inbounds %40[%474] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %481 = llvm.load %480 : !llvm.ptr -> !llvm.ptr
    %482 = llvm.ptrtoint %481 : !llvm.ptr to i64
    %c0_i64_141 = arith.constant 0 : i64
    %483 = arith.cmpi eq, %482, %c0_i64_141 : i64
    cf.cond_br %483, ^bb105, ^bb104
  ^bb103:  // pred: ^bb100
    %c3_i32_142 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_142) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %484 = llvm.getelementptr %481[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %485 = llvm.getelementptr %481[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %486 = llvm.getelementptr %481[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %487 = llvm.load %484 : !llvm.ptr -> !llvm.ptr
    %488 = llvm.load %486 : !llvm.ptr -> !llvm.ptr
    %489 = llvm.ptrtoint %487 : !llvm.ptr to i64
    %c0_i64_143 = arith.constant 0 : i64
    %490 = arith.cmpi eq, %489, %c0_i64_143 : i64
    cf.cond_br %490, ^bb107, ^bb106
  ^bb105:  // pred: ^bb102
    %c4_i32_144 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_144) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // 2 preds: ^bb104, ^bb107
    %491 = llvm.load %485 : !llvm.ptr -> i32
    %492 = arith.cmpi ne, %27, %491 : i32
    cf.cond_br %492, ^bb109, ^bb108
  ^bb107:  // pred: ^bb104
    %c3_i32_145 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_145) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %493 = llvm.call %487(%488, %468, %469) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_146 = arith.constant 0 : i32
    %494 = arith.cmpi eq, %493, %c0_i32_146 : i32
    %495 = arith.extui %494 : i1 to i32
    %c0_i32_147 = arith.constant 0 : i32
    %496 = arith.cmpi ne, %495, %c0_i32_147 : i32
    cf.cond_br %496, ^bb99, ^bb110
  ^bb109:  // pred: ^bb106
    %c5_i32_148 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_148) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // pred: ^bb108
    cf.br ^bb98
  }
  func.func @f71(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %15 = arith.addi %14, %c3_i32 : i32
    %c-4_i32 = arith.constant -4 : i32
    %16 = arith.andi %15, %c-4_i32 : i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %18 = arith.subi %16, %17 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %19 = arith.cmpi ult, %13, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_9 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2(%22: i32):  // 3 preds: ^bb3, ^bb32, ^bb36
    return %22 : i32
  ^bb3:  // 3 preds: ^bb24, ^bb37, ^bb44
    %23 = llvm.load %8 : !llvm.ptr -> i32
    cf.br ^bb2(%23 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_10 : i32
    cf.cond_br %25, ^bb35, ^bb36
  ^bb5:  // pred: ^bb1
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %28 = arith.subi %26, %27 : i32
    llvm.store %28, %4 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %29 = arith.cmpi ult, %28, %c4_i32 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_11 : i32
    cf.cond_br %31, ^bb4, ^bb6
  ^bb6:  // pred: ^bb5
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_12 = arith.constant 3 : i32
    %33 = arith.andi %32, %c3_i32_12 : i32
    llvm.store %33, %5 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %6 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    llvm.store %c0_i32_14, %1 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %36 = arith.cmpi eq, %34, %35 : i32
    %37 = arith.extui %36 : i1 to i32
    llvm.store %37, %7 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_15 : i32
    cf.cond_br %38, ^bb7, ^bb8
  ^bb7:  // 3 preds: ^bb6, ^bb9, ^bb16
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_16 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_17 : i32
    cf.cond_br %45, ^bb19, ^bb20
  ^bb8:  // pred: ^bb6
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %48 = arith.subi %46, %47 : i32
    llvm.store %48, %8 : i32, !llvm.ptr
    %c-4_i32_19 = arith.constant -4 : i32
    %49 = arith.cmpi ule, %48, %c-4_i32_19 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_20 : i32
    cf.cond_br %51, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %52 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_21 : i32
    cf.cond_br %53, ^bb7, ^bb15
  ^bb10:  // pred: ^bb8
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %9 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %9 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb14
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb13
    %54 = llvm.load %1 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %9 : !llvm.ptr -> i32
    %57 = arith.addi %55, %56 : i32
    llvm.store %57, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64 : i64
    %60 = llvm.getelementptr %12[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i8
    %62 = arith.extsi %61 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %63 = arith.cmpi sgt, %62, %c-65_i32 : i32
    %64 = arith.extui %63 : i1 to i32
    %65 = arith.addi %54, %64 : i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %67 = arith.addi %66, %c1_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_25 : i64
    %70 = llvm.getelementptr %12[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i8
    %72 = arith.extsi %71 : i8 to i32
    %c-65_i32_26 = arith.constant -65 : i32
    %73 = arith.cmpi sgt, %72, %c-65_i32_26 : i32
    %74 = arith.extui %73 : i1 to i32
    %75 = arith.addi %65, %74 : i32
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %77 = arith.addi %76, %c2_i32 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_27 : i64
    %80 = llvm.getelementptr %12[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i8
    %82 = arith.extsi %81 : i8 to i32
    %c-65_i32_28 = arith.constant -65 : i32
    %83 = arith.cmpi sgt, %82, %c-65_i32_28 : i32
    %84 = arith.extui %83 : i1 to i32
    %85 = arith.addi %75, %84 : i32
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_29 = arith.constant 3 : i32
    %87 = arith.addi %86, %c3_i32_29 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c0_i64_30 : i64
    %90 = llvm.getelementptr %12[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load volatile %90 {alignment = 1 : i64} : !llvm.ptr -> i8
    %92 = arith.extsi %91 : i8 to i32
    %c-65_i32_31 = arith.constant -65 : i32
    %93 = arith.cmpi sgt, %92, %c-65_i32_31 : i32
    %94 = arith.extui %93 : i1 to i32
    %95 = arith.addi %85, %94 : i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %96 = llvm.load %9 : !llvm.ptr -> i32
    %c4_i32_32 = arith.constant 4 : i32
    %97 = arith.addi %96, %c4_i32_32 : i32
    llvm.store %97, %9 : i32, !llvm.ptr
    %c0_i32_33 = arith.constant 0 : i32
    %98 = arith.cmpi ne, %97, %c0_i32_33 : i32
    cf.cond_br %98, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // pred: ^bb9
    %99 = llvm.load %0 : !llvm.ptr -> i32
    %100 = llvm.load %9 : !llvm.ptr -> i32
    %101 = arith.addi %99, %100 : i32
    llvm.store %101, %2 : i32, !llvm.ptr
    cf.br ^bb17
  ^bb16:  // pred: ^bb18
    cf.br ^bb7
  ^bb17:  // 2 preds: ^bb15, ^bb17
    %102 = llvm.load %1 : !llvm.ptr -> i32
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_34 : i64
    %106 = llvm.getelementptr %12[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i8
    %108 = arith.extsi %107 : i8 to i32
    %c-65_i32_35 = arith.constant -65 : i32
    %109 = arith.cmpi sgt, %108, %c-65_i32_35 : i32
    %110 = arith.extui %109 : i1 to i32
    %111 = arith.addi %102, %110 : i32
    llvm.store %111, %1 : i32, !llvm.ptr
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_36 = arith.constant 1 : i32
    %113 = arith.addi %112, %c1_i32_36 : i32
    llvm.store %113, %2 : i32, !llvm.ptr
    %114 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_37 = arith.constant 1 : i32
    %115 = arith.addi %114, %c1_i32_37 : i32
    llvm.store %115, %8 : i32, !llvm.ptr
    %c0_i32_38 = arith.constant 0 : i32
    %116 = arith.cmpi ne, %115, %c0_i32_38 : i32
    cf.cond_br %116, ^bb17, ^bb18
  ^bb18:  // pred: ^bb17
    cf.br ^bb16
  ^bb19:  // 4 preds: ^bb7, ^bb20, ^bb21, ^bb22
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_39 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %118 = arith.cmpi ule, %c2_i32_39, %c31_i32 : i32
    %119 = scf.if %118 -> (i32) {
      %421 = arith.shrui %117, %c2_i32_39 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %119, %3 : i32, !llvm.ptr
    %120 = llvm.load %6 : !llvm.ptr -> i32
    %121 = llvm.load %1 : !llvm.ptr -> i32
    %122 = arith.addi %120, %121 : i32
    llvm.store %122, %8 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb20:  // pred: ^bb7
    %123 = llvm.load %9 : !llvm.ptr -> i32
    %124 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_40 = arith.constant -4 : i32
    %125 = arith.andi %124, %c-4_i32_40 : i32
    %126 = arith.addi %123, %125 : i32
    llvm.store %126, %2 : i32, !llvm.ptr
    %c0_i64_41 = arith.constant 0 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c0_i64_41 : i64
    %129 = llvm.getelementptr %12[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i8
    %131 = arith.extsi %130 : i8 to i32
    %c-65_i32_42 = arith.constant -65 : i32
    %132 = arith.cmpi sgt, %131, %c-65_i32_42 : i32
    %133 = arith.extui %132 : i1 to i32
    llvm.store %133, %6 : i32, !llvm.ptr
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_43 = arith.constant 1 : i32
    %135 = arith.cmpi eq, %134, %c1_i32_43 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_44 : i32
    cf.cond_br %137, ^bb19, ^bb21
  ^bb21:  // pred: ^bb20
    %138 = llvm.load %6 : !llvm.ptr -> i32
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c1_i64 : i64
    %142 = llvm.getelementptr %12[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i8
    %144 = arith.extsi %143 : i8 to i32
    %c-65_i32_45 = arith.constant -65 : i32
    %145 = arith.cmpi sgt, %144, %c-65_i32_45 : i32
    %146 = arith.extui %145 : i1 to i32
    %147 = arith.addi %138, %146 : i32
    llvm.store %147, %6 : i32, !llvm.ptr
    %148 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32_46 = arith.constant 2 : i32
    %149 = arith.cmpi eq, %148, %c2_i32_46 : i32
    %150 = arith.extui %149 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %151 = arith.cmpi ne, %150, %c0_i32_47 : i32
    cf.cond_br %151, ^bb19, ^bb22
  ^bb22:  // pred: ^bb21
    %152 = llvm.load %6 : !llvm.ptr -> i32
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c2_i64 : i64
    %156 = llvm.getelementptr %12[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load volatile %156 {alignment = 1 : i64} : !llvm.ptr -> i8
    %158 = arith.extsi %157 : i8 to i32
    %c-65_i32_48 = arith.constant -65 : i32
    %159 = arith.cmpi sgt, %158, %c-65_i32_48 : i32
    %160 = arith.extui %159 : i1 to i32
    %161 = arith.addi %152, %160 : i32
    llvm.store %161, %6 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb23:  // pred: ^bb31
    %162 = llvm.load %4 : !llvm.ptr -> i32
    %163 = llvm.load %6 : !llvm.ptr -> i32
    %c252_i32 = arith.constant 252 : i32
    %164 = arith.andi %163, %c252_i32 : i32
    %c2_i32_49 = arith.constant 2 : i32
    %c31_i32_50 = arith.constant 31 : i32
    %165 = arith.cmpi ule, %c2_i32_49, %c31_i32_50 : i32
    %166 = scf.if %165 -> (i32) {
      %421 = arith.shli %164, %c2_i32_49 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %167 = arith.addi %162, %166 : i32
    llvm.store %167, %2 : i32, !llvm.ptr
    %c0_i64_51 = arith.constant 0 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c0_i64_51 : i64
    %170 = llvm.getelementptr %12[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %171, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %172 = arith.xori %171, %c-1_i32 : i32
    %c7_i32 = arith.constant 7 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %173 = arith.cmpi ule, %c7_i32, %c31_i32_52 : i32
    %174 = scf.if %173 -> (i32) {
      %421 = arith.shrui %172, %c7_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %175 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32_53 = arith.constant 31 : i32
    %176 = arith.cmpi ule, %c6_i32, %c31_i32_53 : i32
    %177 = scf.if %176 -> (i32) {
      %421 = arith.shrui %175, %c6_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %178 = arith.ori %174, %177 : i32
    %c16843009_i32 = arith.constant 16843009 : i32
    %179 = arith.andi %178, %c16843009_i32 : i32
    llvm.store %179, %1 : i32, !llvm.ptr
    %180 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_54 = arith.constant 1 : i32
    %181 = arith.cmpi eq, %180, %c1_i32_54 : i32
    %182 = arith.extui %181 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %183 = arith.cmpi ne, %182, %c0_i32_55 : i32
    cf.cond_br %183, ^bb32, ^bb33
  ^bb24:  // 2 preds: ^bb19, ^bb26
    %184 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %184, %4 : i32, !llvm.ptr
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_56 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %185, %c0_i32_56 : i32
    %187 = arith.extui %186 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %188 = arith.cmpi ne, %187, %c0_i32_57 : i32
    cf.cond_br %188, ^bb3, ^bb25
  ^bb25:  // pred: ^bb24
    %189 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %190 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32_58 = arith.constant 192 : i32
    %191 = arith.cmpi ult, %190, %c192_i32_58 : i32
    %192 = arith.extui %191 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %193 = arith.cmpi ne, %192, %c0_i32_59 : i32
    %194 = arith.select %193, %189, %c192_i32 : i32
    llvm.store %194, %6 : i32, !llvm.ptr
    %c3_i32_60 = arith.constant 3 : i32
    %195 = arith.andi %194, %c3_i32_60 : i32
    llvm.store %195, %7 : i32, !llvm.ptr
    %196 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_61 = arith.constant 2 : i32
    %c31_i32_62 = arith.constant 31 : i32
    %197 = arith.cmpi ule, %c2_i32_61, %c31_i32_62 : i32
    %198 = scf.if %197 -> (i32) {
      %421 = arith.shli %196, %c2_i32_61 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %198, %5 : i32, !llvm.ptr
    %c0_i32_63 = arith.constant 0 : i32
    llvm.store %c0_i32_63, %2 : i32, !llvm.ptr
    %199 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_64 = arith.constant 4 : i32
    %200 = arith.cmpi ult, %199, %c4_i32_64 : i32
    %201 = arith.extui %200 : i1 to i32
    %c0_i32_65 = arith.constant 0 : i32
    %202 = arith.cmpi ne, %201, %c0_i32_65 : i32
    cf.cond_br %202, ^bb26, ^bb27
  ^bb26:  // 2 preds: ^bb25, ^bb28
    %203 = llvm.load %3 : !llvm.ptr -> i32
    %204 = llvm.load %6 : !llvm.ptr -> i32
    %205 = arith.subi %203, %204 : i32
    llvm.store %205, %3 : i32, !llvm.ptr
    %206 = llvm.load %4 : !llvm.ptr -> i32
    %207 = llvm.load %5 : !llvm.ptr -> i32
    %208 = arith.addi %206, %207 : i32
    llvm.store %208, %9 : i32, !llvm.ptr
    %209 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_66 = arith.constant 31 : i32
    %210 = arith.cmpi ule, %c8_i32, %c31_i32_66 : i32
    %211 = scf.if %210 -> (i32) {
      %421 = arith.shrui %209, %c8_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %c16711935_i32 = arith.constant 16711935 : i32
    %212 = arith.andi %211, %c16711935_i32 : i32
    %213 = llvm.load %2 : !llvm.ptr -> i32
    %c16711935_i32_67 = arith.constant 16711935 : i32
    %214 = arith.andi %213, %c16711935_i32_67 : i32
    %215 = arith.addi %212, %214 : i32
    %c65537_i32 = arith.constant 65537 : i32
    %216 = arith.muli %215, %c65537_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32_68 = arith.constant 31 : i32
    %217 = arith.cmpi ule, %c16_i32, %c31_i32_68 : i32
    %218 = scf.if %217 -> (i32) {
      %421 = arith.shrui %216, %c16_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %219 = llvm.load %8 : !llvm.ptr -> i32
    %220 = arith.addi %218, %219 : i32
    llvm.store %220, %8 : i32, !llvm.ptr
    %221 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_69 = arith.constant 0 : i32
    %222 = arith.cmpi eq, %221, %c0_i32_69 : i32
    %223 = arith.extui %222 : i1 to i32
    %c0_i32_70 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_70 : i32
    cf.cond_br %224, ^bb24, ^bb31
  ^bb27:  // pred: ^bb25
    %225 = llvm.load %4 : !llvm.ptr -> i32
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %c1008_i32 = arith.constant 1008 : i32
    %227 = arith.andi %226, %c1008_i32 : i32
    %228 = arith.addi %225, %227 : i32
    llvm.store %228, %0 : i32, !llvm.ptr
    %c0_i32_71 = arith.constant 0 : i32
    llvm.store %c0_i32_71, %2 : i32, !llvm.ptr
    %229 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %229, %1 : i32, !llvm.ptr
    cf.br ^bb29
  ^bb28:  // pred: ^bb30
    cf.br ^bb26
  ^bb29:  // 2 preds: ^bb27, ^bb29
    %230 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %231 = arith.extui %230 : i32 to i64
    %232 = arith.addi %231, %c12_i64 : i64
    %233 = llvm.getelementptr %12[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %234 = llvm.load volatile %233 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %234, %9 : i32, !llvm.ptr
    %c-1_i32_72 = arith.constant -1 : i32
    %235 = arith.xori %234, %c-1_i32_72 : i32
    %c7_i32_73 = arith.constant 7 : i32
    %c31_i32_74 = arith.constant 31 : i32
    %236 = arith.cmpi ule, %c7_i32_73, %c31_i32_74 : i32
    %237 = scf.if %236 -> (i32) {
      %421 = arith.shrui %235, %c7_i32_73 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %238 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_75 = arith.constant 6 : i32
    %c31_i32_76 = arith.constant 31 : i32
    %239 = arith.cmpi ule, %c6_i32_75, %c31_i32_76 : i32
    %240 = scf.if %239 -> (i32) {
      %421 = arith.shrui %238, %c6_i32_75 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %241 = arith.ori %237, %240 : i32
    %c16843009_i32_77 = arith.constant 16843009 : i32
    %242 = arith.andi %241, %c16843009_i32_77 : i32
    %243 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c8_i64 : i64
    %246 = llvm.getelementptr %12[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load volatile %246 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %247, %9 : i32, !llvm.ptr
    %c-1_i32_78 = arith.constant -1 : i32
    %248 = arith.xori %247, %c-1_i32_78 : i32
    %c7_i32_79 = arith.constant 7 : i32
    %c31_i32_80 = arith.constant 31 : i32
    %249 = arith.cmpi ule, %c7_i32_79, %c31_i32_80 : i32
    %250 = scf.if %249 -> (i32) {
      %421 = arith.shrui %248, %c7_i32_79 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %251 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_81 = arith.constant 6 : i32
    %c31_i32_82 = arith.constant 31 : i32
    %252 = arith.cmpi ule, %c6_i32_81, %c31_i32_82 : i32
    %253 = scf.if %252 -> (i32) {
      %421 = arith.shrui %251, %c6_i32_81 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %254 = arith.ori %250, %253 : i32
    %c16843009_i32_83 = arith.constant 16843009 : i32
    %255 = arith.andi %254, %c16843009_i32_83 : i32
    %256 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c4_i64 : i64
    %259 = llvm.getelementptr %12[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %260, %9 : i32, !llvm.ptr
    %c-1_i32_84 = arith.constant -1 : i32
    %261 = arith.xori %260, %c-1_i32_84 : i32
    %c7_i32_85 = arith.constant 7 : i32
    %c31_i32_86 = arith.constant 31 : i32
    %262 = arith.cmpi ule, %c7_i32_85, %c31_i32_86 : i32
    %263 = scf.if %262 -> (i32) {
      %421 = arith.shrui %261, %c7_i32_85 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %264 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_87 = arith.constant 6 : i32
    %c31_i32_88 = arith.constant 31 : i32
    %265 = arith.cmpi ule, %c6_i32_87, %c31_i32_88 : i32
    %266 = scf.if %265 -> (i32) {
      %421 = arith.shrui %264, %c6_i32_87 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %267 = arith.ori %263, %266 : i32
    %c16843009_i32_89 = arith.constant 16843009 : i32
    %268 = arith.andi %267, %c16843009_i32_89 : i32
    %269 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_90 = arith.constant 0 : i64
    %270 = arith.extui %269 : i32 to i64
    %271 = arith.addi %270, %c0_i64_90 : i64
    %272 = llvm.getelementptr %12[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = llvm.load volatile %272 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %273, %9 : i32, !llvm.ptr
    %c-1_i32_91 = arith.constant -1 : i32
    %274 = arith.xori %273, %c-1_i32_91 : i32
    %c7_i32_92 = arith.constant 7 : i32
    %c31_i32_93 = arith.constant 31 : i32
    %275 = arith.cmpi ule, %c7_i32_92, %c31_i32_93 : i32
    %276 = scf.if %275 -> (i32) {
      %421 = arith.shrui %274, %c7_i32_92 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %277 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_94 = arith.constant 6 : i32
    %c31_i32_95 = arith.constant 31 : i32
    %278 = arith.cmpi ule, %c6_i32_94, %c31_i32_95 : i32
    %279 = scf.if %278 -> (i32) {
      %421 = arith.shrui %277, %c6_i32_94 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %280 = arith.ori %276, %279 : i32
    %c16843009_i32_96 = arith.constant 16843009 : i32
    %281 = arith.andi %280, %c16843009_i32_96 : i32
    %282 = llvm.load %2 : !llvm.ptr -> i32
    %283 = arith.addi %281, %282 : i32
    %284 = arith.addi %268, %283 : i32
    %285 = arith.addi %255, %284 : i32
    %286 = arith.addi %242, %285 : i32
    llvm.store %286, %2 : i32, !llvm.ptr
    %287 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_97 = arith.constant 16 : i32
    %288 = arith.addi %287, %c16_i32_97 : i32
    llvm.store %288, %1 : i32, !llvm.ptr
    %289 = llvm.load %0 : !llvm.ptr -> i32
    %290 = arith.cmpi eq, %288, %289 : i32
    %291 = arith.extui %290 : i1 to i32
    %c0_i32_98 = arith.constant 0 : i32
    %292 = arith.cmpi eq, %291, %c0_i32_98 : i32
    %293 = arith.extui %292 : i1 to i32
    %c0_i32_99 = arith.constant 0 : i32
    %294 = arith.cmpi ne, %293, %c0_i32_99 : i32
    cf.cond_br %294, ^bb29, ^bb30
  ^bb30:  // pred: ^bb29
    cf.br ^bb28
  ^bb31:  // pred: ^bb26
    cf.br ^bb23
  ^bb32:  // 3 preds: ^bb23, ^bb33, ^bb34
    %295 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_100 = arith.constant 8 : i32
    %c31_i32_101 = arith.constant 31 : i32
    %296 = arith.cmpi ule, %c8_i32_100, %c31_i32_101 : i32
    %297 = scf.if %296 -> (i32) {
      %421 = arith.shrui %295, %c8_i32_100 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %c459007_i32 = arith.constant 459007 : i32
    %298 = arith.andi %297, %c459007_i32 : i32
    %299 = llvm.load %1 : !llvm.ptr -> i32
    %c16711935_i32_102 = arith.constant 16711935 : i32
    %300 = arith.andi %299, %c16711935_i32_102 : i32
    %301 = arith.addi %298, %300 : i32
    %c65537_i32_103 = arith.constant 65537 : i32
    %302 = arith.muli %301, %c65537_i32_103 : i32
    %c16_i32_104 = arith.constant 16 : i32
    %c31_i32_105 = arith.constant 31 : i32
    %303 = arith.cmpi ule, %c16_i32_104, %c31_i32_105 : i32
    %304 = scf.if %303 -> (i32) {
      %421 = arith.shrui %302, %c16_i32_104 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %305 = llvm.load %8 : !llvm.ptr -> i32
    %306 = arith.addi %304, %305 : i32
    cf.br ^bb2(%306 : i32)
  ^bb33:  // pred: ^bb23
    %307 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_106 = arith.constant 4 : i64
    %308 = arith.extui %307 : i32 to i64
    %309 = arith.addi %308, %c4_i64_106 : i64
    %310 = llvm.getelementptr %12[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load volatile %310 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %311, %9 : i32, !llvm.ptr
    %c-1_i32_107 = arith.constant -1 : i32
    %312 = arith.xori %311, %c-1_i32_107 : i32
    %c7_i32_108 = arith.constant 7 : i32
    %c31_i32_109 = arith.constant 31 : i32
    %313 = arith.cmpi ule, %c7_i32_108, %c31_i32_109 : i32
    %314 = scf.if %313 -> (i32) {
      %421 = arith.shrui %312, %c7_i32_108 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %315 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_110 = arith.constant 6 : i32
    %c31_i32_111 = arith.constant 31 : i32
    %316 = arith.cmpi ule, %c6_i32_110, %c31_i32_111 : i32
    %317 = scf.if %316 -> (i32) {
      %421 = arith.shrui %315, %c6_i32_110 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %318 = arith.ori %314, %317 : i32
    %c16843009_i32_112 = arith.constant 16843009 : i32
    %319 = arith.andi %318, %c16843009_i32_112 : i32
    %320 = llvm.load %1 : !llvm.ptr -> i32
    %321 = arith.addi %319, %320 : i32
    llvm.store %321, %1 : i32, !llvm.ptr
    %322 = llvm.load %7 : !llvm.ptr -> i32
    %c2_i32_113 = arith.constant 2 : i32
    %323 = arith.cmpi eq, %322, %c2_i32_113 : i32
    %324 = arith.extui %323 : i1 to i32
    %c0_i32_114 = arith.constant 0 : i32
    %325 = arith.cmpi ne, %324, %c0_i32_114 : i32
    cf.cond_br %325, ^bb32, ^bb34
  ^bb34:  // pred: ^bb33
    %326 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_115 = arith.constant 8 : i64
    %327 = arith.extui %326 : i32 to i64
    %328 = arith.addi %327, %c8_i64_115 : i64
    %329 = llvm.getelementptr %12[%328] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %330 = llvm.load volatile %329 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %330, %2 : i32, !llvm.ptr
    %c-1_i32_116 = arith.constant -1 : i32
    %331 = arith.xori %330, %c-1_i32_116 : i32
    %c7_i32_117 = arith.constant 7 : i32
    %c31_i32_118 = arith.constant 31 : i32
    %332 = arith.cmpi ule, %c7_i32_117, %c31_i32_118 : i32
    %333 = scf.if %332 -> (i32) {
      %421 = arith.shrui %331, %c7_i32_117 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %334 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i32_119 = arith.constant 6 : i32
    %c31_i32_120 = arith.constant 31 : i32
    %335 = arith.cmpi ule, %c6_i32_119, %c31_i32_120 : i32
    %336 = scf.if %335 -> (i32) {
      %421 = arith.shrui %334, %c6_i32_119 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %337 = arith.ori %333, %336 : i32
    %c16843009_i32_121 = arith.constant 16843009 : i32
    %338 = arith.andi %337, %c16843009_i32_121 : i32
    %339 = llvm.load %1 : !llvm.ptr -> i32
    %340 = arith.addi %338, %339 : i32
    llvm.store %340, %1 : i32, !llvm.ptr
    cf.br ^bb32
  ^bb35:  // pred: ^bb4
    %341 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_122 = arith.constant 3 : i32
    %342 = arith.andi %341, %c3_i32_122 : i32
    llvm.store %342, %9 : i32, !llvm.ptr
    %343 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_123 = arith.constant 4 : i32
    %344 = arith.cmpi uge, %343, %c4_i32_123 : i32
    %345 = arith.extui %344 : i1 to i32
    %c0_i32_124 = arith.constant 0 : i32
    %346 = arith.cmpi ne, %345, %c0_i32_124 : i32
    cf.cond_br %346, ^bb38, ^bb39
  ^bb36:  // pred: ^bb4
    %c0_i32_125 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_125 : i32)
  ^bb37:  // 2 preds: ^bb39, ^bb40
    %347 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_126 = arith.constant 0 : i32
    %348 = arith.cmpi eq, %347, %c0_i32_126 : i32
    %349 = arith.extui %348 : i1 to i32
    %c0_i32_127 = arith.constant 0 : i32
    %350 = arith.cmpi ne, %349, %c0_i32_127 : i32
    cf.cond_br %350, ^bb3, ^bb43
  ^bb38:  // pred: ^bb35
    %351 = llvm.load %1 : !llvm.ptr -> i32
    %c-4_i32_128 = arith.constant -4 : i32
    %352 = arith.andi %351, %c-4_i32_128 : i32
    llvm.store %352, %3 : i32, !llvm.ptr
    %c0_i32_129 = arith.constant 0 : i32
    llvm.store %c0_i32_129, %8 : i32, !llvm.ptr
    %c0_i32_130 = arith.constant 0 : i32
    llvm.store %c0_i32_130, %2 : i32, !llvm.ptr
    cf.br ^bb41
  ^bb39:  // pred: ^bb35
    %c0_i32_131 = arith.constant 0 : i32
    llvm.store %c0_i32_131, %8 : i32, !llvm.ptr
    %c0_i32_132 = arith.constant 0 : i32
    llvm.store %c0_i32_132, %2 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb40:  // pred: ^bb42
    cf.br ^bb37
  ^bb41:  // 2 preds: ^bb38, ^bb41
    %353 = llvm.load %8 : !llvm.ptr -> i32
    %354 = llvm.load %0 : !llvm.ptr -> i32
    %355 = llvm.load %2 : !llvm.ptr -> i32
    %356 = arith.addi %354, %355 : i32
    llvm.store %356, %1 : i32, !llvm.ptr
    %c0_i64_133 = arith.constant 0 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c0_i64_133 : i64
    %359 = llvm.getelementptr %12[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load volatile %359 {alignment = 1 : i64} : !llvm.ptr -> i8
    %361 = arith.extsi %360 : i8 to i32
    %c-65_i32_134 = arith.constant -65 : i32
    %362 = arith.cmpi sgt, %361, %c-65_i32_134 : i32
    %363 = arith.extui %362 : i1 to i32
    %364 = arith.addi %353, %363 : i32
    %365 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_135 = arith.constant 1 : i32
    %366 = arith.addi %365, %c1_i32_135 : i32
    %c0_i64_136 = arith.constant 0 : i64
    %367 = arith.extui %366 : i32 to i64
    %368 = arith.addi %367, %c0_i64_136 : i64
    %369 = llvm.getelementptr %12[%368] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %370 = llvm.load volatile %369 {alignment = 1 : i64} : !llvm.ptr -> i8
    %371 = arith.extsi %370 : i8 to i32
    %c-65_i32_137 = arith.constant -65 : i32
    %372 = arith.cmpi sgt, %371, %c-65_i32_137 : i32
    %373 = arith.extui %372 : i1 to i32
    %374 = arith.addi %364, %373 : i32
    %375 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32_138 = arith.constant 2 : i32
    %376 = arith.addi %375, %c2_i32_138 : i32
    %c0_i64_139 = arith.constant 0 : i64
    %377 = arith.extui %376 : i32 to i64
    %378 = arith.addi %377, %c0_i64_139 : i64
    %379 = llvm.getelementptr %12[%378] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %380 = llvm.load volatile %379 {alignment = 1 : i64} : !llvm.ptr -> i8
    %381 = arith.extsi %380 : i8 to i32
    %c-65_i32_140 = arith.constant -65 : i32
    %382 = arith.cmpi sgt, %381, %c-65_i32_140 : i32
    %383 = arith.extui %382 : i1 to i32
    %384 = arith.addi %374, %383 : i32
    %385 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_141 = arith.constant 3 : i32
    %386 = arith.addi %385, %c3_i32_141 : i32
    %c0_i64_142 = arith.constant 0 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c0_i64_142 : i64
    %389 = llvm.getelementptr %12[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i8
    %391 = arith.extsi %390 : i8 to i32
    %c-65_i32_143 = arith.constant -65 : i32
    %392 = arith.cmpi sgt, %391, %c-65_i32_143 : i32
    %393 = arith.extui %392 : i1 to i32
    %394 = arith.addi %384, %393 : i32
    llvm.store %394, %8 : i32, !llvm.ptr
    %395 = llvm.load %3 : !llvm.ptr -> i32
    %396 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_144 = arith.constant 4 : i32
    %397 = arith.addi %396, %c4_i32_144 : i32
    llvm.store %397, %2 : i32, !llvm.ptr
    %398 = arith.cmpi eq, %395, %397 : i32
    %399 = arith.extui %398 : i1 to i32
    %c0_i32_145 = arith.constant 0 : i32
    %400 = arith.cmpi eq, %399, %c0_i32_145 : i32
    %401 = arith.extui %400 : i1 to i32
    %c0_i32_146 = arith.constant 0 : i32
    %402 = arith.cmpi ne, %401, %c0_i32_146 : i32
    cf.cond_br %402, ^bb41, ^bb42
  ^bb42:  // pred: ^bb41
    cf.br ^bb40
  ^bb43:  // pred: ^bb37
    %403 = llvm.load %0 : !llvm.ptr -> i32
    %404 = llvm.load %2 : !llvm.ptr -> i32
    %405 = arith.addi %403, %404 : i32
    llvm.store %405, %1 : i32, !llvm.ptr
    cf.br ^bb45
  ^bb44:  // pred: ^bb46
    cf.br ^bb3
  ^bb45:  // 2 preds: ^bb43, ^bb45
    %406 = llvm.load %8 : !llvm.ptr -> i32
    %407 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_147 = arith.constant 0 : i64
    %408 = arith.extui %407 : i32 to i64
    %409 = arith.addi %408, %c0_i64_147 : i64
    %410 = llvm.getelementptr %12[%409] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %411 = llvm.load volatile %410 {alignment = 1 : i64} : !llvm.ptr -> i8
    %412 = arith.extsi %411 : i8 to i32
    %c-65_i32_148 = arith.constant -65 : i32
    %413 = arith.cmpi sgt, %412, %c-65_i32_148 : i32
    %414 = arith.extui %413 : i1 to i32
    %415 = arith.addi %406, %414 : i32
    llvm.store %415, %8 : i32, !llvm.ptr
    %416 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_149 = arith.constant 1 : i32
    %417 = arith.addi %416, %c1_i32_149 : i32
    llvm.store %417, %1 : i32, !llvm.ptr
    %418 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32_150 = arith.constant -1 : i32
    %419 = arith.addi %418, %c-1_i32_150 : i32
    llvm.store %419, %9 : i32, !llvm.ptr
    %c0_i32_151 = arith.constant 0 : i32
    %420 = arith.cmpi ne, %419, %c0_i32_151 : i32
    cf.cond_br %420, ^bb45, ^bb46
  ^bb46:  // pred: ^bb45
    cf.br ^bb44
  }
  func.func @f72(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %11 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.load %12 : !llvm.ptr -> i64
    %15 = arith.trunci %14 : i64 to i32
    %16 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %12 : !llvm.ptr -> i64
    %20 = arith.trunci %19 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %22 = arith.cmpi eq, %21, %c1114112_i32 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_5 : i32
    cf.cond_br %24, ^bb5, ^bb6
  ^bb2(%25: i32):  // 2 preds: ^bb4, ^bb23
    return %25 : i32
  ^bb3:  // pred: ^bb5
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c12_i64 : i64
    %32 = llvm.getelementptr %8[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    %34 = arith.cmpi ult, %33, %20 : i32
    cf.cond_br %34, ^bb17, ^bb18
  ^bb4:  // 2 preds: ^bb13, ^bb16
    %35 = llvm.load %5 : !llvm.ptr -> i32
    cf.br ^bb2(%35 : i32)
  ^bb5:  // 2 preds: ^bb1, ^bb15
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_6 : i32
    cf.cond_br %37, ^bb3, ^bb16
  ^bb6:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    llvm.store %c1_i32_7, %5 : i32, !llvm.ptr
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c16_i64 : i64
    %43 = llvm.getelementptr %8[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    %45 = arith.cmpi ult, %44, %15 : i32
    cf.cond_br %45, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %46 = llvm.getelementptr inbounds %13[%44] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %47 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.ptrtoint %47 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %49 = arith.cmpi eq, %48, %c0_i64 : i64
    cf.cond_br %49, ^bb10, ^bb9
  ^bb8:  // pred: ^bb6
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %50 = llvm.getelementptr %47[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %51 = llvm.getelementptr %47[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %52 = llvm.getelementptr %47[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %53 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %54 = llvm.load %52 : !llvm.ptr -> !llvm.ptr
    %55 = llvm.ptrtoint %53 : !llvm.ptr to i64
    %c0_i64_8 = arith.constant 0 : i64
    %56 = arith.cmpi eq, %55, %c0_i64_8 : i64
    cf.cond_br %56, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %57 = llvm.load %51 : !llvm.ptr -> i32
    %58 = arith.cmpi ne, %10, %57 : i32
    cf.cond_br %58, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_9 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_9) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %59 = llvm.call %53(%54, %38, %39) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_10 : i32
    cf.cond_br %60, ^bb4, ^bb15
  ^bb14:  // pred: ^bb11
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb13
    cf.br ^bb5
  ^bb16:  // pred: ^bb5
    %c0_i32_11 = arith.constant 0 : i32
    llvm.store %c0_i32_11, %5 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb17:  // 2 preds: ^bb3, ^bb18
    %61 = llvm.getelementptr inbounds %18[%33] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.ptrtoint %62 : !llvm.ptr to i64
    %c0_i64_12 = arith.constant 0 : i64
    %64 = arith.cmpi eq, %63, %c0_i64_12 : i64
    cf.cond_br %64, ^bb20, ^bb19
  ^bb18:  // pred: ^bb3
    %c3_i32_13 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_13) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %65 = llvm.getelementptr %62[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %66 = llvm.getelementptr %62[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %67 = llvm.getelementptr %62[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %68 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64_14 = arith.constant 0 : i64
    %71 = arith.cmpi eq, %70, %c0_i64_14 : i64
    cf.cond_br %71, ^bb22, ^bb21
  ^bb20:  // pred: ^bb17
    %c4_i32_15 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_15) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %72 = llvm.load %66 : !llvm.ptr -> i32
    %73 = arith.cmpi ne, %17, %72 : i32
    cf.cond_br %73, ^bb24, ^bb23
  ^bb22:  // pred: ^bb19
    %c3_i32_16 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_16) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %74 = llvm.call %68(%69, %26, %27, %28) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%74 : i32)
  ^bb24:  // pred: ^bb21
    %c5_i32_17 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_17) : (i32) -> ()
    cf.br ^bb23
  }
  func.func @f73(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c20_i64 : i64
    %16 = llvm.getelementptr %5[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c24_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c12_i64 : i64
    %27 = llvm.getelementptr %5[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %29 = arith.cmpi ult, %28, %12 : i32
    cf.cond_br %29, ^bb3, ^bb4
  ^bb2(%30: i32):  // pred: ^bb9
    return %30 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %31 = llvm.getelementptr inbounds %10[%28] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %32 = llvm.load %31 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.ptrtoint %32 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %34 = arith.cmpi eq, %33, %c0_i64 : i64
    cf.cond_br %34, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %35 = llvm.getelementptr %32[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.getelementptr %32[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %37 = llvm.getelementptr %32[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %38 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %39 = llvm.load %37 : !llvm.ptr -> !llvm.ptr
    %40 = llvm.ptrtoint %38 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %41 = arith.cmpi eq, %40, %c0_i64_2 : i64
    cf.cond_br %41, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %42 = llvm.load %36 : !llvm.ptr -> i32
    %43 = arith.cmpi ne, %7, %42 : i32
    cf.cond_br %43, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %44 = llvm.call %38(%39, %17, %18, %19) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%44 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f74(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = call @f64(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f75(%arg0: !llvm.ptr, %arg1: i64, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_5, %6 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_5, %7 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_5, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %15 = arith.subi %14, %c48_i32 : i32
    llvm.store %15, %3 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %c39_i32 = arith.constant 39 : i32
    llvm.store %c39_i32, %4 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i64
    %c10000_i64 = arith.constant 10000 : i64
    %17 = arith.cmpi uge, %16, %c10000_i64 : i64
    %18 = arith.extui %17 : i1 to i64
    %19 = arith.trunci %18 : i64 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_9 : i32
    cf.cond_br %20, ^bb4, ^bb5
  ^bb2(%21: i32):  // pred: ^bb11
    return %21 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb6
    %22 = llvm.load %5 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    llvm.store %23, %6 : i32, !llvm.ptr
    %c99_i32 = arith.constant 99 : i32
    %24 = arith.cmpi ule, %23, %c99_i32 : i32
    %25 = arith.extui %24 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_10 : i32
    cf.cond_br %26, ^bb9, ^bb10
  ^bb4:  // pred: ^bb1
    %c39_i32_11 = arith.constant 39 : i32
    llvm.store %c39_i32_11, %4 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb5:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i64
    llvm.store %27, %5 : i64, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb8
    cf.br ^bb3
  ^bb7:  // 2 preds: ^bb4, ^bb7
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32 = arith.constant 9 : i32
    %29 = arith.addi %28, %c9_i32 : i32
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %31 = arith.addi %29, %30 : i32
    llvm.store %31, %6 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %32 = arith.addi %31, %c-4_i32 : i32
    %33 = llvm.load %0 : !llvm.ptr -> i64
    %34 = llvm.load %0 : !llvm.ptr -> i64
    %c10000_i64_12 = arith.constant 10000 : i64
    %35 = arith.divui %34, %c10000_i64_12 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %36 = arith.cmpi eq, %c10000_i64_12, %c0_i64_13 : i64
    %37 = arith.select %36, %c0_i64_13, %35 : i64
    llvm.store %37, %5 : i64, !llvm.ptr
    %c10000_i64_14 = arith.constant 10000 : i64
    %38 = arith.muli %37, %c10000_i64_14 : i64
    %39 = arith.subi %33, %38 : i64
    %40 = arith.trunci %39 : i64 to i32
    llvm.store %40, %7 : i32, !llvm.ptr
    %c65535_i32 = arith.constant 65535 : i32
    %41 = arith.andi %40, %c65535_i32 : i32
    %c100_i32 = arith.constant 100 : i32
    %42 = arith.divui %41, %c100_i32 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %c100_i32, %c0_i32_15 : i32
    %44 = arith.select %43, %c0_i32_15, %42 : i32
    llvm.store %44, %8 : i32, !llvm.ptr
    %c1_i32_16 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %45 = arith.cmpi ule, %c1_i32_16, %c31_i32 : i32
    %46 = scf.if %45 -> (i32) {
      %157 = arith.shli %44, %c1_i32_16 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_56 = arith.constant 0 : i32
      scf.yield %c0_i32_56 : i32
    }
    %c1049296_i32 = arith.constant 1049296 : i32
    %47 = arith.addi %46, %c1049296_i32 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_17 : i64
    %50 = llvm.getelementptr %13[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i16
    %52 = arith.extui %51 : i16 to i32
    %c0_i64_18 = arith.constant 0 : i64
    %53 = arith.extui %32 : i32 to i64
    %54 = arith.addi %53, %c0_i64_18 : i64
    %55 = llvm.getelementptr %13[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = arith.trunci %52 : i32 to i16
    llvm.store volatile %56, %55 {alignment = 1 : i64} : i16, !llvm.ptr
    %57 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %58 = arith.addi %57, %c-2_i32 : i32
    %59 = llvm.load %7 : !llvm.ptr -> i32
    %60 = llvm.load %8 : !llvm.ptr -> i32
    %c100_i32_19 = arith.constant 100 : i32
    %61 = arith.muli %60, %c100_i32_19 : i32
    %62 = arith.subi %59, %61 : i32
    %c65535_i32_20 = arith.constant 65535 : i32
    %63 = arith.andi %62, %c65535_i32_20 : i32
    %c1_i32_21 = arith.constant 1 : i32
    %c31_i32_22 = arith.constant 31 : i32
    %64 = arith.cmpi ule, %c1_i32_21, %c31_i32_22 : i32
    %65 = scf.if %64 -> (i32) {
      %157 = arith.shli %63, %c1_i32_21 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_56 = arith.constant 0 : i32
      scf.yield %c0_i32_56 : i32
    }
    %c1049296_i32_23 = arith.constant 1049296 : i32
    %66 = arith.addi %65, %c1049296_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_24 : i64
    %69 = llvm.getelementptr %13[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i16
    %71 = arith.extui %70 : i16 to i32
    %c0_i64_25 = arith.constant 0 : i64
    %72 = arith.extui %58 : i32 to i64
    %73 = arith.addi %72, %c0_i64_25 : i64
    %74 = llvm.getelementptr %13[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = arith.trunci %71 : i32 to i16
    llvm.store volatile %75, %74 {alignment = 1 : i64} : i16, !llvm.ptr
    %76 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_26 = arith.constant -4 : i32
    %77 = arith.addi %76, %c-4_i32_26 : i32
    llvm.store %77, %4 : i32, !llvm.ptr
    %78 = llvm.load %0 : !llvm.ptr -> i64
    %c99999999_i64 = arith.constant 99999999 : i64
    %79 = arith.cmpi ugt, %78, %c99999999_i64 : i64
    %80 = arith.extui %79 : i1 to i64
    %81 = arith.trunci %80 : i64 to i32
    llvm.store %81, %6 : i32, !llvm.ptr
    %82 = llvm.load %5 : !llvm.ptr -> i64
    llvm.store %82, %0 : i64, !llvm.ptr
    %83 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_27 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_27 : i32
    cf.cond_br %84, ^bb7, ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %85 = llvm.load %6 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %86 = arith.cmpi ult, %85, %c10_i32 : i32
    %87 = arith.extui %86 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %88 = arith.cmpi ne, %87, %c0_i32_28 : i32
    cf.cond_br %88, ^bb12, ^bb13
  ^bb10:  // pred: ^bb3
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_29 = arith.constant 9 : i32
    %90 = arith.addi %89, %c9_i32_29 : i32
    %91 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_30 = arith.constant -2 : i32
    %92 = arith.addi %91, %c-2_i32_30 : i32
    llvm.store %92, %4 : i32, !llvm.ptr
    %93 = arith.addi %90, %92 : i32
    %94 = llvm.load %5 : !llvm.ptr -> i64
    %95 = arith.trunci %94 : i64 to i32
    llvm.store %95, %6 : i32, !llvm.ptr
    %96 = llvm.load %6 : !llvm.ptr -> i32
    %c65535_i32_31 = arith.constant 65535 : i32
    %97 = arith.andi %96, %c65535_i32_31 : i32
    %c100_i32_32 = arith.constant 100 : i32
    %98 = arith.divui %97, %c100_i32_32 : i32
    %c0_i32_33 = arith.constant 0 : i32
    %99 = arith.cmpi eq, %c100_i32_32, %c0_i32_33 : i32
    %100 = arith.select %99, %c0_i32_33, %98 : i32
    llvm.store %100, %6 : i32, !llvm.ptr
    %c100_i32_34 = arith.constant 100 : i32
    %101 = arith.muli %100, %c100_i32_34 : i32
    %102 = arith.subi %95, %101 : i32
    %c65535_i32_35 = arith.constant 65535 : i32
    %103 = arith.andi %102, %c65535_i32_35 : i32
    %c1_i32_36 = arith.constant 1 : i32
    %c31_i32_37 = arith.constant 31 : i32
    %104 = arith.cmpi ule, %c1_i32_36, %c31_i32_37 : i32
    %105 = scf.if %104 -> (i32) {
      %157 = arith.shli %103, %c1_i32_36 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_56 = arith.constant 0 : i32
      scf.yield %c0_i32_56 : i32
    }
    %c1049296_i32_38 = arith.constant 1049296 : i32
    %106 = arith.addi %105, %c1049296_i32_38 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %107 = arith.extui %106 : i32 to i64
    %108 = arith.addi %107, %c0_i64_39 : i64
    %109 = llvm.getelementptr %13[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i16
    %111 = arith.extui %110 : i16 to i32
    %c0_i64_40 = arith.constant 0 : i64
    %112 = arith.extui %93 : i32 to i64
    %113 = arith.addi %112, %c0_i64_40 : i64
    %114 = llvm.getelementptr %13[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %115 = arith.trunci %111 : i32 to i16
    llvm.store volatile %115, %114 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb12, ^bb13
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_41 = arith.constant 1 : i32
    %c0_i32_42 = arith.constant 0 : i32
    %118 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_43 = arith.constant 9 : i32
    %119 = arith.addi %118, %c9_i32_43 : i32
    %120 = llvm.load %4 : !llvm.ptr -> i32
    %121 = arith.addi %119, %120 : i32
    %c39_i32_44 = arith.constant 39 : i32
    %122 = llvm.load %4 : !llvm.ptr -> i32
    %123 = arith.subi %c39_i32_44, %122 : i32
    %124 = call @f70(%arg0, %116, %117, %c1_i32_41, %c0_i32_42, %121, %123) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %124, %4 : i32, !llvm.ptr
    %125 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_45 = arith.constant 48 : i32
    %126 = arith.addi %125, %c48_i32_45 : i32
    llvm.store %126, %10 : i32, !llvm.ptr
    %127 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%127 : i32)
  ^bb12:  // pred: ^bb9
    %128 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_46 = arith.constant 9 : i32
    %129 = arith.addi %128, %c9_i32_46 : i32
    %130 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %131 = arith.addi %130, %c-1_i32 : i32
    llvm.store %131, %4 : i32, !llvm.ptr
    %132 = arith.addi %129, %131 : i32
    %133 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32_47 = arith.constant 48 : i32
    %134 = arith.ori %133, %c48_i32_47 : i32
    %c0_i64_48 = arith.constant 0 : i64
    %135 = arith.extui %132 : i32 to i64
    %136 = arith.addi %135, %c0_i64_48 : i64
    %137 = llvm.getelementptr %13[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = arith.trunci %134 : i32 to i8
    llvm.store volatile %138, %137 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb11
  ^bb13:  // pred: ^bb9
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_49 = arith.constant 9 : i32
    %140 = arith.addi %139, %c9_i32_49 : i32
    %141 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_50 = arith.constant -2 : i32
    %142 = arith.addi %141, %c-2_i32_50 : i32
    llvm.store %142, %4 : i32, !llvm.ptr
    %143 = arith.addi %140, %142 : i32
    %144 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_51 = arith.constant 1 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %145 = arith.cmpi ule, %c1_i32_51, %c31_i32_52 : i32
    %146 = scf.if %145 -> (i32) {
      %157 = arith.shli %144, %c1_i32_51 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_56 = arith.constant 0 : i32
      scf.yield %c0_i32_56 : i32
    }
    %c1049296_i32_53 = arith.constant 1049296 : i32
    %147 = arith.addi %146, %c1049296_i32_53 : i32
    %c0_i64_54 = arith.constant 0 : i64
    %148 = arith.extui %147 : i32 to i64
    %149 = arith.addi %148, %c0_i64_54 : i64
    %150 = llvm.getelementptr %13[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i16
    %152 = arith.extui %151 : i16 to i32
    %c0_i64_55 = arith.constant 0 : i64
    %153 = arith.extui %143 : i32 to i64
    %154 = arith.addi %153, %c0_i64_55 : i64
    %155 = llvm.getelementptr %13[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %156 = arith.trunci %152 : i32 to i16
    llvm.store volatile %156, %155 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb11
  }
  func.func @f76(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %11 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.cmpi uge, %14, %c16_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_10 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb22
    return %18 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb11
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_11 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_12 : i32
    cf.cond_br %22, ^bb22, ^bb23
  ^bb4:  // pred: ^bb1
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = arith.subi %c0_i32_13, %24 : i32
    %c3_i32 = arith.constant 3 : i32
    %26 = arith.andi %25, %c3_i32 : i32
    llvm.store %26, %4 : i32, !llvm.ptr
    %27 = arith.addi %23, %26 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_14 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_15 : i32
    cf.cond_br %31, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %32 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %32, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb8
    %33 = llvm.load %5 : !llvm.ptr -> i32
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %4 : !llvm.ptr -> i32
    %36 = arith.subi %34, %35 : i32
    llvm.store %36, %7 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %37 = arith.andi %36, %c-4_i32 : i32
    llvm.store %37, %8 : i32, !llvm.ptr
    %38 = arith.addi %33, %37 : i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %c3_i32_16 = arith.constant 3 : i32
    %42 = arith.andi %41, %c3_i32_16 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_17 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_18 : i32
    cf.cond_br %45, ^bb12, ^bb13
  ^bb7:  // pred: ^bb4
    %46 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %46, %3 : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %47, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb8:  // pred: ^bb10
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb7, ^bb9
    %48 = llvm.load %3 : !llvm.ptr -> i32
    %49 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64 : i64
    %52 = llvm.getelementptr %13[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i8
    %54 = arith.extui %53 : i8 to i32
    %c0_i64_19 = arith.constant 0 : i64
    %55 = arith.extui %48 : i32 to i64
    %56 = arith.addi %55, %c0_i64_19 : i64
    %57 = llvm.getelementptr %13[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = arith.trunci %54 : i32 to i8
    llvm.store volatile %58, %57 {alignment = 1 : i64} : i8, !llvm.ptr
    %59 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %60 = arith.addi %59, %c1_i32_20 : i32
    llvm.store %60, %6 : i32, !llvm.ptr
    %61 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_21 = arith.constant 1 : i32
    %62 = arith.addi %61, %c1_i32_21 : i32
    llvm.store %62, %3 : i32, !llvm.ptr
    %63 = llvm.load %5 : !llvm.ptr -> i32
    %64 = arith.cmpi ult, %62, %63 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %66 = arith.cmpi ne, %65, %c0_i32_22 : i32
    cf.cond_br %66, ^bb9, ^bb10
  ^bb10:  // pred: ^bb9
    cf.br ^bb8
  ^bb11:  // 4 preds: ^bb12, ^bb13, ^bb17, ^bb19
    %67 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_23 = arith.constant 3 : i32
    %68 = arith.andi %67, %c3_i32_23 : i32
    llvm.store %68, %2 : i32, !llvm.ptr
    %69 = llvm.load %9 : !llvm.ptr -> i32
    %70 = llvm.load %8 : !llvm.ptr -> i32
    %71 = arith.addi %69, %70 : i32
    llvm.store %71, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // 2 preds: ^bb6, ^bb15
    %72 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %73 = arith.cmpi slt, %72, %c1_i32_24 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_25 : i32
    cf.cond_br %75, ^bb11, ^bb18
  ^bb13:  // pred: ^bb6
    %76 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_26 = arith.constant 1 : i32
    %77 = arith.cmpi slt, %76, %c1_i32_26 : i32
    %78 = arith.extui %77 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %78, %c0_i32_27 : i32
    cf.cond_br %79, ^bb11, ^bb14
  ^bb14:  // pred: ^bb13
    %80 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i32_28 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %81 = arith.cmpi ule, %c3_i32_28, %c31_i32 : i32
    %82 = scf.if %81 -> (i32) {
      %161 = arith.shli %80, %c3_i32_28 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_50 = arith.constant 0 : i32
      scf.yield %c0_i32_50 : i32
    }
    llvm.store %82, %6 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %83 = arith.andi %82, %c24_i32 : i32
    llvm.store %83, %2 : i32, !llvm.ptr
    %84 = llvm.load %9 : !llvm.ptr -> i32
    %c-4_i32_29 = arith.constant -4 : i32
    %85 = arith.andi %84, %c-4_i32_29 : i32
    llvm.store %85, %10 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %86 = arith.addi %85, %c4_i32 : i32
    llvm.store %86, %1 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %87 = llvm.load %6 : !llvm.ptr -> i32
    %88 = arith.subi %c0_i32_30, %87 : i32
    %c24_i32_31 = arith.constant 24 : i32
    %89 = arith.andi %88, %c24_i32_31 : i32
    llvm.store %89, %4 : i32, !llvm.ptr
    %90 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64_32 : i64
    %93 = llvm.getelementptr %13[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %94, %6 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb15:  // no predecessors
    cf.br ^bb12
  ^bb16:  // 2 preds: ^bb14, ^bb16
    %95 = llvm.load %5 : !llvm.ptr -> i32
    %96 = llvm.load %6 : !llvm.ptr -> i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_33 = arith.constant 31 : i32
    %98 = arith.cmpi ule, %97, %c31_i32_33 : i32
    %99 = scf.if %98 -> (i32) {
      %161 = arith.shrui %96, %97 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_50 = arith.constant 0 : i32
      scf.yield %c0_i32_50 : i32
    }
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_34 : i64
    %103 = llvm.getelementptr %13[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %104, %6 : i32, !llvm.ptr
    %105 = llvm.load %4 : !llvm.ptr -> i32
    %c31_i32_35 = arith.constant 31 : i32
    %106 = arith.cmpi ule, %105, %c31_i32_35 : i32
    %107 = scf.if %106 -> (i32) {
      %161 = arith.shli %104, %105 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_50 = arith.constant 0 : i32
      scf.yield %c0_i32_50 : i32
    }
    %108 = arith.ori %99, %107 : i32
    %c0_i64_36 = arith.constant 0 : i64
    %109 = arith.extui %95 : i32 to i64
    %110 = arith.addi %109, %c0_i64_36 : i64
    %111 = llvm.getelementptr %13[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i32, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_37 = arith.constant 4 : i32
    %113 = arith.addi %112, %c4_i32_37 : i32
    llvm.store %113, %1 : i32, !llvm.ptr
    %114 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_38 = arith.constant 4 : i32
    %115 = arith.addi %114, %c4_i32_38 : i32
    llvm.store %115, %5 : i32, !llvm.ptr
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %117 = arith.cmpi ult, %115, %116 : i32
    %118 = arith.extui %117 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %119 = arith.cmpi ne, %118, %c0_i32_39 : i32
    cf.cond_br %119, ^bb16, ^bb17
  ^bb17:  // pred: ^bb16
    cf.br ^bb11
  ^bb18:  // pred: ^bb12
    %120 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %120, %1 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb19:  // pred: ^bb21
    cf.br ^bb11
  ^bb20:  // 2 preds: ^bb18, ^bb20
    %121 = llvm.load %5 : !llvm.ptr -> i32
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_40 : i64
    %125 = llvm.getelementptr %13[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_41 = arith.constant 0 : i64
    %127 = arith.extui %121 : i32 to i64
    %128 = arith.addi %127, %c0_i64_41 : i64
    %129 = llvm.getelementptr %13[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %129 {alignment = 1 : i64} : i32, !llvm.ptr
    %130 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_42 = arith.constant 4 : i32
    %131 = arith.addi %130, %c4_i32_42 : i32
    llvm.store %131, %1 : i32, !llvm.ptr
    %132 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_43 = arith.constant 4 : i32
    %133 = arith.addi %132, %c4_i32_43 : i32
    llvm.store %133, %5 : i32, !llvm.ptr
    %134 = llvm.load %3 : !llvm.ptr -> i32
    %135 = arith.cmpi ult, %133, %134 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_44 : i32
    cf.cond_br %137, ^bb20, ^bb21
  ^bb21:  // pred: ^bb20
    cf.br ^bb19
  ^bb22:  // 2 preds: ^bb3, ^bb24
    %138 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%138 : i32)
  ^bb23:  // pred: ^bb3
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %140 = llvm.load %2 : !llvm.ptr -> i32
    %141 = arith.addi %139, %140 : i32
    llvm.store %141, %5 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb24:  // pred: ^bb26
    cf.br ^bb22
  ^bb25:  // 2 preds: ^bb23, ^bb25
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_45 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_45 : i64
    %146 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i8
    %148 = arith.extui %147 : i8 to i32
    %c0_i64_46 = arith.constant 0 : i64
    %149 = arith.extui %142 : i32 to i64
    %150 = arith.addi %149, %c0_i64_46 : i64
    %151 = llvm.getelementptr %13[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = arith.trunci %148 : i32 to i8
    llvm.store volatile %152, %151 {alignment = 1 : i64} : i8, !llvm.ptr
    %153 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_47 = arith.constant 1 : i32
    %154 = arith.addi %153, %c1_i32_47 : i32
    llvm.store %154, %1 : i32, !llvm.ptr
    %155 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_48 = arith.constant 1 : i32
    %156 = arith.addi %155, %c1_i32_48 : i32
    llvm.store %156, %3 : i32, !llvm.ptr
    %157 = llvm.load %5 : !llvm.ptr -> i32
    %158 = arith.cmpi ult, %156, %157 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %160 = arith.cmpi ne, %159, %c0_i32_49 : i32
    cf.cond_br %160, ^bb25, ^bb26
  ^bb26:  // pred: ^bb25
    cf.br ^bb24
  }
  func.func @f77(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = call @f76(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
