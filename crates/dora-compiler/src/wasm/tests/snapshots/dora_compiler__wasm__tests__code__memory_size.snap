---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @f0(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i32
    cf.br ^bb1(%8 : i32)
  ^bb1(%9: i32):  // pred: ^bb0
    return %9 : i32
  }
  func.func @f1(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i64
    cf.br ^bb1(%8 : i64)
  ^bb1(%9: i64):  // pred: ^bb0
    return %9 : i64
  }
  func.func @f2(%arg0: !llvm.ptr, %arg1: i32) -> f32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> f32
    cf.br ^bb1(%8 : f32)
  ^bb1(%9: f32):  // pred: ^bb0
    return %9 : f32
  }
  func.func @f3(%arg0: !llvm.ptr, %arg1: i32) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> f64
    cf.br ^bb1(%8 : f64)
  ^bb1(%9: f64):  // pred: ^bb0
    return %9 : f64
  }
  func.func @f4(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i32
    cf.br ^bb1(%9 : i32)
  ^bb1(%10: i32):  // pred: ^bb0
    return %10 : i32
  }
  func.func @f5(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i32
    cf.br ^bb1(%9 : i32)
  ^bb1(%10: i32):  // pred: ^bb0
    return %10 : i32
  }
  func.func @f6(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i16
    %9 = arith.extui %8 : i16 to i32
    cf.br ^bb1(%9 : i32)
  ^bb1(%10: i32):  // pred: ^bb0
    return %10 : i32
  }
  func.func @f7(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i16
    %9 = arith.extui %8 : i16 to i32
    cf.br ^bb1(%9 : i32)
  ^bb1(%10: i32):  // pred: ^bb0
    return %10 : i32
  }
  func.func @f8(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i64
    cf.br ^bb1(%9 : i64)
  ^bb1(%10: i64):  // pred: ^bb0
    return %10 : i64
  }
  func.func @f9(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i64
    cf.br ^bb1(%9 : i64)
  ^bb1(%10: i64):  // pred: ^bb0
    return %10 : i64
  }
  func.func @f10(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i16
    %9 = arith.extui %8 : i16 to i64
    cf.br ^bb1(%9 : i64)
  ^bb1(%10: i64):  // pred: ^bb0
    return %10 : i64
  }
  func.func @f11(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i16
    %9 = arith.extui %8 : i16 to i64
    cf.br ^bb1(%9 : i64)
  ^bb1(%10: i64):  // pred: ^bb0
    return %10 : i64
  }
  func.func @f12(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.extui %8 : i32 to i64
    cf.br ^bb1(%9 : i64)
  ^bb1(%10: i64):  // pred: ^bb0
    return %10 : i64
  }
  func.func @f13(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.extui %8 : i32 to i64
    cf.br ^bb1(%9 : i64)
  ^bb1(%10: i64):  // pred: ^bb0
    return %10 : i64
  }
  func.func @f14(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %3, %9 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f15(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %3, %9 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f16(%arg0: !llvm.ptr, %arg1: i32, %arg2: f32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> f32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %3, %9 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32, %arg2: f64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> f64
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %3, %9 : f64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %10 = arith.trunci %3 : i32 to i8
    llvm.store %10, %9 : i8, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f19(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %10 = arith.trunci %3 : i32 to i16
    llvm.store %10, %9 : i16, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f20(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %10 = arith.trunci %3 : i64 to i8
    llvm.store %10, %9 : i8, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f21(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %10 = arith.trunci %3 : i64 to i16
    llvm.store %10, %9 : i16, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %10 = arith.trunci %3 : i64 to i32
    llvm.store %10, %9 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
}
