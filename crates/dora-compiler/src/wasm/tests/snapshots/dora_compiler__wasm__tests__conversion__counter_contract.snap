---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
---
module {
  func.func @f0(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %9 : i64, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %10 : i64, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c1_i32_11 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_10, %11 : i32, !llvm.ptr
    %c1_i32_12 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_12 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_10, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %18 = llvm.load %14 : !llvm.ptr -> i32
    %c336_i32 = arith.constant 336 : i32
    %19 = arith.subi %18, %c336_i32 : i32
    llvm.store %19, %4 : i32, !llvm.ptr
    llvm.store %19, %14 : i32, !llvm.ptr
    %20 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32 = arith.constant 304 : i32
    %21 = arith.addi %20, %c304_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %22 = arith.addi %21, %c24_i32 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %c0_i64_14 = arith.constant 0 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c0_i64_14 : i64
    %25 = llvm.getelementptr %17[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_13, %25 {alignment = 1 : i64} : i64, !llvm.ptr
    %26 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_15 = arith.constant 304 : i32
    %27 = arith.addi %26, %c304_i32_15 : i32
    %c16_i32 = arith.constant 16 : i32
    %28 = arith.addi %27, %c16_i32 : i32
    %c0_i64_16 = arith.constant 0 : i64
    %c0_i64_17 = arith.constant 0 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c0_i64_17 : i64
    %31 = llvm.getelementptr %17[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_16, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_18 = arith.constant 304 : i32
    %33 = arith.addi %32, %c304_i32_18 : i32
    %c8_i32 = arith.constant 8 : i32
    %34 = arith.addi %33, %c8_i32 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %c0_i64_20 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_20 : i64
    %37 = llvm.getelementptr %17[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_19, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %c304_i64 = arith.constant 304 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c304_i64 : i64
    %41 = llvm.getelementptr %17[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_21, %41 {alignment = 1 : i64} : i64, !llvm.ptr
    %42 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32 = arith.constant 152 : i32
    %43 = arith.addi %42, %c152_i32 : i32
    %c24_i32_22 = arith.constant 24 : i32
    %44 = arith.addi %43, %c24_i32_22 : i32
    %c0_i64_23 = arith.constant 0 : i64
    %c0_i64_24 = arith.constant 0 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c0_i64_24 : i64
    %47 = llvm.getelementptr %17[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_23, %47 {alignment = 1 : i64} : i64, !llvm.ptr
    %48 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_25 = arith.constant 152 : i32
    %49 = arith.addi %48, %c152_i32_25 : i32
    %c16_i32_26 = arith.constant 16 : i32
    %50 = arith.addi %49, %c16_i32_26 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %c0_i64_28 = arith.constant 0 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c0_i64_28 : i64
    %53 = llvm.getelementptr %17[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_27, %53 {alignment = 1 : i64} : i64, !llvm.ptr
    %54 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_29 = arith.constant 152 : i32
    %55 = arith.addi %54, %c152_i32_29 : i32
    %c8_i32_30 = arith.constant 8 : i32
    %56 = arith.addi %55, %c8_i32_30 : i32
    %c0_i64_31 = arith.constant 0 : i64
    %c0_i64_32 = arith.constant 0 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c0_i64_32 : i64
    %59 = llvm.getelementptr %17[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_31, %59 {alignment = 1 : i64} : i64, !llvm.ptr
    %60 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %c152_i64 = arith.constant 152 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c152_i64 : i64
    %63 = llvm.getelementptr %17[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_33, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_34 = arith.constant 0 : i32
    llvm.store %c0_i32_34, %5 : i32, !llvm.ptr
    %c0_i32_35 = arith.constant 0 : i32
    llvm.store %c0_i32_35, %6 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // pred: ^bb5
    %64 = llvm.load %4 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %65 = arith.addi %64, %c40_i32 : i32
    %66 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_36 = arith.constant 304 : i32
    %67 = arith.addi %66, %c304_i32_36 : i32
    %c24_i32_37 = arith.constant 24 : i32
    %68 = arith.addi %67, %c24_i32_37 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c0_i64_38 : i64
    %71 = llvm.getelementptr %17[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %73 = arith.extui %65 : i32 to i64
    %74 = arith.addi %73, %c0_i64_39 : i64
    %75 = llvm.getelementptr %17[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %72, %75 {alignment = 1 : i64} : i64, !llvm.ptr
    %76 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_40 = arith.constant 8 : i32
    %77 = arith.addi %76, %c8_i32_40 : i32
    %c24_i32_41 = arith.constant 24 : i32
    %78 = arith.addi %77, %c24_i32_41 : i32
    %79 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_42 = arith.constant 304 : i32
    %80 = arith.addi %79, %c304_i32_42 : i32
    %c16_i32_43 = arith.constant 16 : i32
    %81 = arith.addi %80, %c16_i32_43 : i32
    %c0_i64_44 = arith.constant 0 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c0_i64_44 : i64
    %84 = llvm.getelementptr %17[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %85 = llvm.load volatile %84 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    %86 = arith.extui %78 : i32 to i64
    %87 = arith.addi %86, %c0_i64_45 : i64
    %88 = llvm.getelementptr %17[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i64, !llvm.ptr
    %89 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_46 = arith.constant 8 : i32
    %90 = arith.addi %89, %c8_i32_46 : i32
    %c16_i32_47 = arith.constant 16 : i32
    %91 = arith.addi %90, %c16_i32_47 : i32
    %92 = llvm.load %4 : !llvm.ptr -> i32
    %c312_i32 = arith.constant 312 : i32
    %93 = arith.addi %92, %c312_i32 : i32
    %c0_i64_48 = arith.constant 0 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c0_i64_48 : i64
    %96 = llvm.getelementptr %17[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_49 = arith.constant 0 : i64
    %98 = arith.extui %91 : i32 to i64
    %99 = arith.addi %98, %c0_i64_49 : i64
    %100 = llvm.getelementptr %17[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %97, %100 {alignment = 1 : i64} : i64, !llvm.ptr
    %101 = llvm.load %4 : !llvm.ptr -> i32
    %102 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i64_50 = arith.constant 304 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c304_i64_50 : i64
    %105 = llvm.getelementptr %17[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %107 = arith.extui %101 : i32 to i64
    %108 = arith.addi %107, %c16_i64 : i64
    %109 = llvm.getelementptr %17[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %106, %109 {alignment = 1 : i64} : i64, !llvm.ptr
    %110 = llvm.load %4 : !llvm.ptr -> i32
    %111 = llvm.load %3 : !llvm.ptr -> i32
    %c100_i64 = arith.constant 100 : i64
    %112 = arith.extui %110 : i32 to i64
    %113 = arith.addi %112, %c100_i64 : i64
    %114 = llvm.getelementptr %17[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %111, %114 {alignment = 1 : i64} : i32, !llvm.ptr
    %115 = llvm.load %4 : !llvm.ptr -> i32
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %c96_i64 = arith.constant 96 : i64
    %117 = arith.extui %115 : i32 to i64
    %118 = arith.addi %117, %c96_i64 : i64
    %119 = llvm.getelementptr %17[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %116, %119 {alignment = 1 : i64} : i32, !llvm.ptr
    %120 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_51 = arith.constant 0 : i32
    %c88_i64 = arith.constant 88 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c88_i64 : i64
    %123 = llvm.getelementptr %17[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = arith.trunci %c0_i32_51 : i32 to i8
    llvm.store volatile %124, %123 {alignment = 1 : i64} : i8, !llvm.ptr
    %125 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_52 = arith.constant 0 : i64
    %c48_i64 = arith.constant 48 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c48_i64 : i64
    %128 = llvm.getelementptr %17[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_52, %128 {alignment = 1 : i64} : i64, !llvm.ptr
    %129 = llvm.load %4 : !llvm.ptr -> i32
    %130 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %131 = arith.extui %129 : i32 to i64
    %132 = arith.addi %131, %c12_i64 : i64
    %133 = llvm.getelementptr %17[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %133 {alignment = 1 : i64} : i32, !llvm.ptr
    %134 = llvm.load %4 : !llvm.ptr -> i32
    %135 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %136 = arith.extui %134 : i32 to i64
    %137 = arith.addi %136, %c8_i64 : i64
    %138 = llvm.getelementptr %17[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %135, %138 {alignment = 1 : i64} : i32, !llvm.ptr
    %139 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_53 = arith.constant 8 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c8_i64_53 : i64
    %142 = llvm.getelementptr %17[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %143, %5 : i32, !llvm.ptr
    %c0_i32_54 = arith.constant 0 : i32
    %144 = arith.cmpi eq, %143, %c0_i32_54 : i32
    %145 = arith.extui %144 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %146 = arith.cmpi ne, %145, %c0_i32_55 : i32
    cf.cond_br %146, ^bb15, ^bb16
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %147 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_56 = arith.constant 304 : i32
    %148 = arith.addi %147, %c304_i32_56 : i32
    %149 = llvm.load %5 : !llvm.ptr -> i32
    %150 = arith.addi %148, %149 : i32
    llvm.store %150, %7 : i32, !llvm.ptr
    %151 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_57 = arith.constant 0 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c0_i64_57 : i64
    %154 = llvm.getelementptr %17[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %155, %8 : i64, !llvm.ptr
    %156 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_58 = arith.constant 152 : i32
    %157 = arith.addi %156, %c152_i32_58 : i32
    %158 = llvm.load %5 : !llvm.ptr -> i32
    %159 = arith.addi %157, %158 : i32
    %c0_i64_59 = arith.constant 0 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c0_i64_59 : i64
    %162 = llvm.getelementptr %17[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i64
    %164 = arith.addi %155, %163 : i64
    llvm.store %164, %9 : i64, !llvm.ptr
    %165 = llvm.load %6 : !llvm.ptr -> i32
    %166 = arith.extui %165 : i32 to i64
    %c1_i64 = arith.constant 1 : i64
    %167 = arith.andi %166, %c1_i64 : i64
    %168 = arith.addi %164, %167 : i64
    llvm.store %168, %10 : i64, !llvm.ptr
    %c0_i64_60 = arith.constant 0 : i64
    %169 = arith.extui %150 : i32 to i64
    %170 = arith.addi %169, %c0_i64_60 : i64
    %171 = llvm.getelementptr %17[%170] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %168, %171 {alignment = 1 : i64} : i64, !llvm.ptr
    %172 = llvm.load %9 : !llvm.ptr -> i64
    %173 = llvm.load %8 : !llvm.ptr -> i64
    %174 = arith.cmpi ult, %172, %173 : i64
    %175 = arith.extui %174 : i1 to i64
    %176 = arith.trunci %175 : i64 to i32
    %177 = llvm.load %10 : !llvm.ptr -> i64
    %178 = llvm.load %9 : !llvm.ptr -> i64
    %179 = arith.cmpi ult, %177, %178 : i64
    %180 = arith.extui %179 : i1 to i64
    %181 = arith.trunci %180 : i64 to i32
    %182 = arith.ori %176, %181 : i32
    llvm.store %182, %6 : i32, !llvm.ptr
    %183 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_61 = arith.constant 8 : i32
    %184 = arith.addi %183, %c8_i32_61 : i32
    llvm.store %184, %5 : i32, !llvm.ptr
    %c32_i32 = arith.constant 32 : i32
    %185 = arith.cmpi eq, %184, %c32_i32 : i32
    %186 = arith.extui %185 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %187 = arith.cmpi eq, %186, %c0_i32_62 : i32
    %188 = arith.extui %187 : i1 to i32
    %c0_i32_63 = arith.constant 0 : i32
    %189 = arith.cmpi ne, %188, %c0_i32_63 : i32
    cf.cond_br %189, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  ^bb6:  // 3 preds: ^bb9, ^bb10, ^bb12
    %190 = llvm.load %1 : !llvm.ptr -> i32
    call @f112(%arg0, %190) : (!llvm.ptr, i32) -> ()
    %191 = llvm.load %1 : !llvm.ptr -> i32
    call @f113(%arg0, %191) : (!llvm.ptr, i32) -> ()
    %192 = llvm.load %4 : !llvm.ptr -> i32
    %c336_i32_64 = arith.constant 336 : i32
    %193 = arith.addi %192, %c336_i32_64 : i32
    llvm.store %193, %14 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb7:  // pred: ^bb22
    %194 = llvm.load %7 : !llvm.ptr -> i32
    %195 = llvm.load %4 : !llvm.ptr -> i32
    %c160_i64 = arith.constant 160 : i64
    %196 = arith.extui %195 : i32 to i64
    %197 = arith.addi %196, %c160_i64 : i64
    %198 = llvm.getelementptr %17[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %199 = llvm.load volatile %198 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %194, %199) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb8:  // pred: ^bb14
    %200 = llvm.load %6 : !llvm.ptr -> i32
    %201 = llvm.load %4 : !llvm.ptr -> i32
    %c160_i64_65 = arith.constant 160 : i64
    %202 = arith.extui %201 : i32 to i64
    %203 = arith.addi %202, %c160_i64_65 : i64
    %204 = llvm.getelementptr %17[%203] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %205 = llvm.load volatile %204 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %200, %205) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_66 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_66) : (i32) -> ()
    llvm.unreachable
  ^bb9:  // pred: ^bb15
    %206 = llvm.load %4 : !llvm.ptr -> i32
    %c160_i64_67 = arith.constant 160 : i64
    %207 = arith.extui %206 : i32 to i64
    %208 = arith.addi %207, %c160_i64_67 : i64
    %209 = llvm.getelementptr %17[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %210 = llvm.load volatile %209 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %210, %5 : i32, !llvm.ptr
    %c16_i32_68 = arith.constant 16 : i32
    %211 = arith.addi %210, %c16_i32_68 : i32
    %c0_i32_69 = arith.constant 0 : i32
    %c1048628_i64 = arith.constant 1048628 : i64
    %212 = arith.extui %c0_i32_69 : i32 to i64
    %213 = arith.addi %212, %c1048628_i64 : i64
    %214 = llvm.getelementptr %17[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load volatile %214 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_70 = arith.constant 0 : i64
    %216 = arith.extui %211 : i32 to i64
    %217 = arith.addi %216, %c0_i64_70 : i64
    %218 = llvm.getelementptr %17[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %215, %218 {alignment = 1 : i64} : i32, !llvm.ptr
    %219 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_71 = arith.constant 8 : i32
    %220 = arith.addi %219, %c8_i32_71 : i32
    %c0_i32_72 = arith.constant 0 : i32
    %c1048620_i64 = arith.constant 1048620 : i64
    %221 = arith.extui %c0_i32_72 : i32 to i64
    %222 = arith.addi %221, %c1048620_i64 : i64
    %223 = llvm.getelementptr %17[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %224 = llvm.load volatile %223 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_73 = arith.constant 0 : i64
    %225 = arith.extui %220 : i32 to i64
    %226 = arith.addi %225, %c0_i64_73 : i64
    %227 = llvm.getelementptr %17[%226] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %224, %227 {alignment = 1 : i64} : i64, !llvm.ptr
    %228 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_74 = arith.constant 0 : i32
    %c1048612_i64 = arith.constant 1048612 : i64
    %229 = arith.extui %c0_i32_74 : i32 to i64
    %230 = arith.addi %229, %c1048612_i64 : i64
    %231 = llvm.getelementptr %17[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %232 = llvm.load volatile %231 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_75 = arith.constant 0 : i64
    %233 = arith.extui %228 : i32 to i64
    %234 = arith.addi %233, %c0_i64_75 : i64
    %235 = llvm.getelementptr %17[%234] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %232, %235 {alignment = 1 : i64} : i64, !llvm.ptr
    %236 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %c160_i64_76 = arith.constant 160 : i64
    %237 = arith.extui %236 : i32 to i64
    %238 = arith.addi %237, %c160_i64_76 : i64
    %239 = llvm.getelementptr %17[%238] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c20_i32, %239 {alignment = 1 : i64} : i32, !llvm.ptr
    %240 = llvm.load %4 : !llvm.ptr -> i32
    %241 = llvm.load %5 : !llvm.ptr -> i32
    %c156_i64 = arith.constant 156 : i64
    %242 = arith.extui %240 : i32 to i64
    %243 = arith.addi %242, %c156_i64 : i64
    %244 = llvm.getelementptr %17[%243] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %241, %244 {alignment = 1 : i64} : i32, !llvm.ptr
    %245 = llvm.load %4 : !llvm.ptr -> i32
    %246 = llvm.load %6 : !llvm.ptr -> i32
    %c152_i64_77 = arith.constant 152 : i64
    %247 = arith.extui %245 : i32 to i64
    %248 = arith.addi %247, %c152_i64_77 : i64
    %249 = llvm.getelementptr %17[%248] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %246, %249 {alignment = 1 : i64} : i32, !llvm.ptr
    %250 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_78 = arith.constant 152 : i32
    %251 = arith.addi %250, %c152_i32_78 : i32
    call @f32(%arg0, %251) : (!llvm.ptr, i32) -> ()
    %252 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c152_i64_79 = arith.constant 152 : i64
    %253 = arith.extui %252 : i32 to i64
    %254 = arith.addi %253, %c152_i64_79 : i64
    %255 = llvm.getelementptr %17[%254] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %255 {alignment = 1 : i64} : i32, !llvm.ptr
    %256 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_80 = arith.constant 152 : i32
    %257 = arith.addi %256, %c152_i32_80 : i32
    call @f7(%arg0, %257) : (!llvm.ptr, i32) -> ()
    %258 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_81 = arith.constant 1 : i64
    %c8_i64_82 = arith.constant 8 : i64
    %259 = arith.extui %258 : i32 to i64
    %260 = arith.addi %259, %c8_i64_82 : i64
    %261 = llvm.getelementptr %17[%260] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_81, %261 {alignment = 1 : i64} : i64, !llvm.ptr
    %262 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_83 = arith.constant 1 : i64
    %c0_i64_84 = arith.constant 0 : i64
    %263 = arith.extui %262 : i32 to i64
    %264 = arith.addi %263, %c0_i64_84 : i64
    %265 = llvm.getelementptr %17[%264] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_83, %265 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb6
  ^bb10:  // 2 preds: ^bb11, ^bb16
    %266 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_85 = arith.constant 2 : i32
    %c152_i64_86 = arith.constant 152 : i64
    %267 = arith.extui %266 : i32 to i64
    %268 = arith.addi %267, %c152_i64_86 : i64
    %269 = llvm.getelementptr %17[%268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_85, %269 {alignment = 1 : i64} : i32, !llvm.ptr
    %270 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_87 = arith.constant 152 : i32
    %271 = arith.addi %270, %c152_i32_87 : i32
    call @f7(%arg0, %271) : (!llvm.ptr, i32) -> ()
    %272 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_88 = arith.constant 1 : i64
    %c8_i64_89 = arith.constant 8 : i64
    %273 = arith.extui %272 : i32 to i64
    %274 = arith.addi %273, %c8_i64_89 : i64
    %275 = llvm.getelementptr %17[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_88, %275 {alignment = 1 : i64} : i64, !llvm.ptr
    %276 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_90 = arith.constant 1 : i64
    %c0_i64_91 = arith.constant 0 : i64
    %277 = arith.extui %276 : i32 to i64
    %278 = arith.addi %277, %c0_i64_91 : i64
    %279 = llvm.getelementptr %17[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_90, %279 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb6
  ^bb11:  // pred: ^bb18
    %280 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_92 = arith.constant 2 : i32
    %c112_i64 = arith.constant 112 : i64
    %281 = arith.extui %280 : i32 to i64
    %282 = arith.addi %281, %c112_i64 : i64
    %283 = llvm.getelementptr %17[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_92, %283 {alignment = 1 : i64} : i32, !llvm.ptr
    %284 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_93 = arith.constant 1 : i32
    %c220_i64 = arith.constant 220 : i64
    %285 = arith.extui %284 : i32 to i64
    %286 = arith.addi %285, %c220_i64 : i64
    %287 = llvm.getelementptr %17[%286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_93, %287 {alignment = 1 : i64} : i32, !llvm.ptr
    %288 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_94 = arith.constant 1 : i32
    %c324_i64 = arith.constant 324 : i64
    %289 = arith.extui %288 : i32 to i64
    %290 = arith.addi %289, %c324_i64 : i64
    %291 = llvm.getelementptr %17[%290] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_94, %291 {alignment = 1 : i64} : i32, !llvm.ptr
    %292 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_95 = arith.constant 1 : i32
    %c308_i64 = arith.constant 308 : i64
    %293 = arith.extui %292 : i32 to i64
    %294 = arith.addi %293, %c308_i64 : i64
    %295 = llvm.getelementptr %17[%294] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_95, %295 {alignment = 1 : i64} : i32, !llvm.ptr
    %296 = llvm.load %4 : !llvm.ptr -> i32
    %c1048604_i32 = arith.constant 1048604 : i32
    %c304_i64_96 = arith.constant 304 : i64
    %297 = arith.extui %296 : i32 to i64
    %298 = arith.addi %297, %c304_i64_96 : i64
    %299 = llvm.getelementptr %17[%298] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048604_i32, %299 {alignment = 1 : i64} : i32, !llvm.ptr
    %300 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_97 = arith.constant 1 : i32
    %c316_i64 = arith.constant 316 : i64
    %301 = arith.extui %300 : i32 to i64
    %302 = arith.addi %301, %c316_i64 : i64
    %303 = llvm.getelementptr %17[%302] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_97, %303 {alignment = 1 : i64} : i32, !llvm.ptr
    %304 = llvm.load %4 : !llvm.ptr -> i32
    %305 = llvm.load %4 : !llvm.ptr -> i32
    %c108_i32 = arith.constant 108 : i32
    %306 = arith.addi %305, %c108_i32 : i32
    %c216_i64 = arith.constant 216 : i64
    %307 = arith.extui %304 : i32 to i64
    %308 = arith.addi %307, %c216_i64 : i64
    %309 = llvm.getelementptr %17[%308] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %306, %309 {alignment = 1 : i64} : i32, !llvm.ptr
    %310 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c180_i64 = arith.constant 180 : i64
    %311 = arith.extui %310 : i32 to i64
    %312 = arith.addi %311, %c180_i64 : i64
    %313 = llvm.getelementptr %17[%312] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %314 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %314, %313 {alignment = 1 : i64} : i8, !llvm.ptr
    %315 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_98 = arith.constant 8 : i32
    %c176_i64 = arith.constant 176 : i64
    %316 = arith.extui %315 : i32 to i64
    %317 = arith.addi %316, %c176_i64 : i64
    %318 = llvm.getelementptr %17[%317] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c8_i32_98, %318 {alignment = 1 : i64} : i32, !llvm.ptr
    %319 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %c168_i64 = arith.constant 168 : i64
    %320 = arith.extui %319 : i32 to i64
    %321 = arith.addi %320, %c168_i64 : i64
    %322 = llvm.getelementptr %17[%321] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i64, %322 {alignment = 1 : i64} : i64, !llvm.ptr
    %323 = llvm.load %4 : !llvm.ptr -> i32
    %c34359738368_i64 = arith.constant 34359738368 : i64
    %c160_i64_99 = arith.constant 160 : i64
    %324 = arith.extui %323 : i32 to i64
    %325 = arith.addi %324, %c160_i64_99 : i64
    %326 = llvm.getelementptr %17[%325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c34359738368_i64, %326 {alignment = 1 : i64} : i64, !llvm.ptr
    %327 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_100 = arith.constant 2 : i32
    %c152_i64_101 = arith.constant 152 : i64
    %328 = arith.extui %327 : i32 to i64
    %329 = arith.addi %328, %c152_i64_101 : i64
    %330 = llvm.getelementptr %17[%329] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_100, %330 {alignment = 1 : i64} : i32, !llvm.ptr
    %331 = llvm.load %4 : !llvm.ptr -> i32
    %332 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_102 = arith.constant 152 : i32
    %333 = arith.addi %332, %c152_i32_102 : i32
    %c320_i64 = arith.constant 320 : i64
    %334 = arith.extui %331 : i32 to i64
    %335 = arith.addi %334, %c320_i64 : i64
    %336 = llvm.getelementptr %17[%335] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %333, %336 {alignment = 1 : i64} : i32, !llvm.ptr
    %337 = llvm.load %4 : !llvm.ptr -> i32
    %338 = llvm.load %4 : !llvm.ptr -> i32
    %c216_i32 = arith.constant 216 : i32
    %339 = arith.addi %338, %c216_i32 : i32
    %c312_i64 = arith.constant 312 : i64
    %340 = arith.extui %337 : i32 to i64
    %341 = arith.addi %340, %c312_i64 : i64
    %342 = llvm.getelementptr %17[%341] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %339, %342 {alignment = 1 : i64} : i32, !llvm.ptr
    %343 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32 = arith.constant 272 : i32
    %344 = arith.addi %343, %c272_i32 : i32
    %345 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_103 = arith.constant 304 : i32
    %346 = arith.addi %345, %c304_i32_103 : i32
    call @f152(%arg0, %344, %346) : (!llvm.ptr, i32, i32) -> ()
    %347 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_104 = arith.constant 272 : i32
    %348 = arith.addi %347, %c272_i32_104 : i32
    call @f32(%arg0, %348) : (!llvm.ptr, i32) -> ()
    %349 = llvm.load %4 : !llvm.ptr -> i32
    %c112_i32 = arith.constant 112 : i32
    %350 = arith.addi %349, %c112_i32 : i32
    call @f7(%arg0, %350) : (!llvm.ptr, i32) -> ()
    cf.br ^bb10
  ^bb12:  // 6 preds: ^bb20, ^bb24, ^bb25, ^bb27, ^bb28, ^bb32
    %351 = llvm.load %0 : !llvm.ptr -> i32
    %352 = llvm.load %4 : !llvm.ptr -> i32
    %c112_i64_105 = arith.constant 112 : i64
    %353 = arith.extui %352 : i32 to i64
    %354 = arith.addi %353, %c112_i64_105 : i64
    %355 = llvm.getelementptr %17[%354] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %356 = llvm.load volatile %355 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_106 = arith.constant 0 : i64
    %357 = arith.extui %351 : i32 to i64
    %358 = arith.addi %357, %c0_i64_106 : i64
    %359 = llvm.getelementptr %17[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %356, %359 {alignment = 1 : i64} : i64, !llvm.ptr
    %360 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_107 = arith.constant 8 : i32
    %361 = arith.addi %360, %c8_i32_107 : i32
    %362 = llvm.load %4 : !llvm.ptr -> i32
    %c112_i32_108 = arith.constant 112 : i32
    %363 = arith.addi %362, %c112_i32_108 : i32
    %c8_i32_109 = arith.constant 8 : i32
    %364 = arith.addi %363, %c8_i32_109 : i32
    %c0_i64_110 = arith.constant 0 : i64
    %365 = arith.extui %364 : i32 to i64
    %366 = arith.addi %365, %c0_i64_110 : i64
    %367 = llvm.getelementptr %17[%366] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %368 = llvm.load volatile %367 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_111 = arith.constant 0 : i64
    %369 = arith.extui %361 : i32 to i64
    %370 = arith.addi %369, %c0_i64_111 : i64
    %371 = llvm.getelementptr %17[%370] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %368, %371 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb6
  ^bb13:  // pred: ^bb17
    %372 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_112 = arith.constant 152 : i32
    %373 = arith.addi %372, %c152_i32_112 : i32
    %c1049430_i32 = arith.constant 1049430 : i32
    %c10_i32 = arith.constant 10 : i32
    call @f31(%arg0, %373, %c1049430_i32, %c10_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32, %6 : i32, !llvm.ptr
    %374 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i64_113 = arith.constant 152 : i64
    %375 = arith.extui %374 : i32 to i64
    %376 = arith.addi %375, %c152_i64_113 : i64
    %377 = llvm.getelementptr %17[%376] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %378 = llvm.load volatile %377 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32_114 = arith.constant -2147483648 : i32
    %379 = arith.cmpi eq, %378, %c-2147483648_i32_114 : i32
    %380 = arith.extui %379 : i1 to i32
    %c0_i32_115 = arith.constant 0 : i32
    %381 = arith.cmpi ne, %380, %c0_i32_115 : i32
    cf.cond_br %381, ^bb26, ^bb27
  ^bb14:  // pred: ^bb19
    %382 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_116 = arith.constant 152 : i32
    %383 = arith.addi %382, %c152_i32_116 : i32
    call @f1(%arg0, %383) : (!llvm.ptr, i32) -> ()
    %384 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_117 = arith.constant 152 : i32
    %385 = arith.addi %384, %c152_i32_117 : i32
    %c0_i32_118 = arith.constant 0 : i32
    %c0_i32_119 = arith.constant 0 : i32
    call @f90(%arg0, %385, %c0_i32_118, %c0_i32_119) : (!llvm.ptr, i32, i32, i32) -> ()
    %386 = llvm.load %4 : !llvm.ptr -> i32
    %c156_i64_120 = arith.constant 156 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c156_i64_120 : i64
    %389 = llvm.getelementptr %17[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %390, %6 : i32, !llvm.ptr
    %391 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i64_121 = arith.constant 152 : i64
    %392 = arith.extui %391 : i32 to i64
    %393 = arith.addi %392, %c152_i64_121 : i64
    %394 = llvm.getelementptr %17[%393] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %395 = llvm.load volatile %394 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_122 = arith.constant 0 : i32
    %396 = arith.cmpi ne, %395, %c0_i32_122 : i32
    cf.cond_br %396, ^bb8, ^bb22
  ^bb15:  // pred: ^bb3
    %397 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_123 = arith.constant 152 : i32
    %398 = arith.addi %397, %c152_i32_123 : i32
    %c20_i32_124 = arith.constant 20 : i32
    %c0_i32_125 = arith.constant 0 : i32
    call @f111(%arg0, %398, %c20_i32_124, %c0_i32_125) : (!llvm.ptr, i32, i32, i32) -> ()
    %399 = llvm.load %4 : !llvm.ptr -> i32
    %c156_i64_126 = arith.constant 156 : i64
    %400 = arith.extui %399 : i32 to i64
    %401 = arith.addi %400, %c156_i64_126 : i64
    %402 = llvm.getelementptr %17[%401] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %403 = llvm.load volatile %402 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %403, %6 : i32, !llvm.ptr
    %404 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i64_127 = arith.constant 152 : i64
    %405 = arith.extui %404 : i32 to i64
    %406 = arith.addi %405, %c152_i64_127 : i64
    %407 = llvm.getelementptr %17[%406] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %408 = llvm.load volatile %407 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_128 = arith.constant 0 : i32
    %409 = arith.cmpi eq, %408, %c0_i32_128 : i32
    %410 = arith.extui %409 : i1 to i32
    %c0_i32_129 = arith.constant 0 : i32
    %411 = arith.cmpi ne, %410, %c0_i32_129 : i32
    cf.cond_br %411, ^bb9, ^bb21
  ^bb16:  // pred: ^bb3
    %412 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i32_130 = arith.constant 3 : i32
    %413 = arith.cmpi ule, %412, %c3_i32_130 : i32
    %414 = arith.extui %413 : i1 to i32
    %c0_i32_131 = arith.constant 0 : i32
    %415 = arith.cmpi ne, %414, %c0_i32_131 : i32
    cf.cond_br %415, ^bb10, ^bb17
  ^bb17:  // pred: ^bb16
    %416 = llvm.load %4 : !llvm.ptr -> i32
    %417 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %418 = arith.extui %417 : i32 to i64
    %419 = arith.addi %418, %c4_i64 : i64
    %420 = llvm.getelementptr %17[%419] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %421 = llvm.load volatile %420 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %421, %7 : i32, !llvm.ptr
    %c0_i64_132 = arith.constant 0 : i64
    %422 = arith.extui %421 : i32 to i64
    %423 = arith.addi %422, %c0_i64_132 : i64
    %424 = llvm.getelementptr %17[%423] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %425 = llvm.load volatile %424 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %425, %6 : i32, !llvm.ptr
    %c24_i32_133 = arith.constant 24 : i32
    %c31_i32 = arith.constant 31 : i32
    %426 = arith.cmpi ule, %c24_i32_133, %c31_i32 : i32
    %427 = scf.if %426 -> (i32) {
      %1140 = arith.shli %425, %c24_i32_133 : i32
      scf.yield %1140 : i32
    } else {
      %c0_i32_340 = arith.constant 0 : i32
      scf.yield %c0_i32_340 : i32
    }
    %428 = llvm.load %6 : !llvm.ptr -> i32
    %c65280_i32 = arith.constant 65280 : i32
    %429 = arith.andi %428, %c65280_i32 : i32
    %c8_i32_134 = arith.constant 8 : i32
    %c31_i32_135 = arith.constant 31 : i32
    %430 = arith.cmpi ule, %c8_i32_134, %c31_i32_135 : i32
    %431 = scf.if %430 -> (i32) {
      %1140 = arith.shli %429, %c8_i32_134 : i32
      scf.yield %1140 : i32
    } else {
      %c0_i32_340 = arith.constant 0 : i32
      scf.yield %c0_i32_340 : i32
    }
    %432 = arith.ori %427, %431 : i32
    %433 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i32_136 = arith.constant 8 : i32
    %c31_i32_137 = arith.constant 31 : i32
    %434 = arith.cmpi ule, %c8_i32_136, %c31_i32_137 : i32
    %435 = scf.if %434 -> (i32) {
      %1140 = arith.shrui %433, %c8_i32_136 : i32
      scf.yield %1140 : i32
    } else {
      %c0_i32_340 = arith.constant 0 : i32
      scf.yield %c0_i32_340 : i32
    }
    %c65280_i32_138 = arith.constant 65280 : i32
    %436 = arith.andi %435, %c65280_i32_138 : i32
    %437 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i32_139 = arith.constant 24 : i32
    %c31_i32_140 = arith.constant 31 : i32
    %438 = arith.cmpi ule, %c24_i32_139, %c31_i32_140 : i32
    %439 = scf.if %438 -> (i32) {
      %1140 = arith.shrui %437, %c24_i32_139 : i32
      scf.yield %1140 : i32
    } else {
      %c0_i32_340 = arith.constant 0 : i32
      scf.yield %c0_i32_340 : i32
    }
    %440 = arith.ori %436, %439 : i32
    %441 = arith.ori %432, %440 : i32
    llvm.store %441, %6 : i32, !llvm.ptr
    %c108_i64 = arith.constant 108 : i64
    %442 = arith.extui %416 : i32 to i64
    %443 = arith.addi %442, %c108_i64 : i64
    %444 = llvm.getelementptr %17[%443] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %441, %444 {alignment = 1 : i64} : i32, !llvm.ptr
    %445 = llvm.load %5 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %446 = arith.addi %445, %c-4_i32 : i32
    llvm.store %446, %5 : i32, !llvm.ptr
    %447 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %448 = arith.addi %447, %c4_i32 : i32
    llvm.store %448, %3 : i32, !llvm.ptr
    %449 = llvm.load %6 : !llvm.ptr -> i32
    %c1068876235_i32 = arith.constant 1068876235 : i32
    %450 = arith.cmpi eq, %449, %c1068876235_i32 : i32
    %451 = arith.extui %450 : i1 to i32
    %c0_i32_141 = arith.constant 0 : i32
    %452 = arith.cmpi ne, %451, %c0_i32_141 : i32
    cf.cond_br %452, ^bb13, ^bb18
  ^bb18:  // pred: ^bb17
    %453 = llvm.load %6 : !llvm.ptr -> i32
    %c-2088634998_i32 = arith.constant -2088634998 : i32
    %454 = arith.cmpi eq, %453, %c-2088634998_i32 : i32
    %455 = arith.extui %454 : i1 to i32
    %c0_i32_142 = arith.constant 0 : i32
    %456 = arith.cmpi eq, %455, %c0_i32_142 : i32
    %457 = arith.extui %456 : i1 to i32
    %c0_i32_143 = arith.constant 0 : i32
    %458 = arith.cmpi ne, %457, %c0_i32_143 : i32
    cf.cond_br %458, ^bb11, ^bb19
  ^bb19:  // pred: ^bb18
    %459 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_144 = arith.constant 152 : i32
    %460 = arith.addi %459, %c152_i32_144 : i32
    %c1049424_i32 = arith.constant 1049424 : i32
    %c6_i32 = arith.constant 6 : i32
    call @f31(%arg0, %460, %c1049424_i32, %c6_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %461 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i64_145 = arith.constant 152 : i64
    %462 = arith.extui %461 : i32 to i64
    %463 = arith.addi %462, %c152_i64_145 : i64
    %464 = llvm.getelementptr %17[%463] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %465 = llvm.load volatile %464 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32_146 = arith.constant -2147483648 : i32
    %466 = arith.cmpi eq, %465, %c-2147483648_i32_146 : i32
    %467 = arith.extui %466 : i1 to i32
    %c0_i32_147 = arith.constant 0 : i32
    %468 = arith.cmpi ne, %467, %c0_i32_147 : i32
    cf.cond_br %468, ^bb14, ^bb20
  ^bb20:  // pred: ^bb19
    %469 = llvm.load %4 : !llvm.ptr -> i32
    %c124_i32 = arith.constant 124 : i32
    %470 = arith.addi %469, %c124_i32 : i32
    %471 = llvm.load %4 : !llvm.ptr -> i32
    %c160_i32 = arith.constant 160 : i32
    %472 = arith.addi %471, %c160_i32 : i32
    %c0_i64_148 = arith.constant 0 : i64
    %473 = arith.extui %472 : i32 to i64
    %474 = arith.addi %473, %c0_i64_148 : i64
    %475 = llvm.getelementptr %17[%474] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %476 = llvm.load volatile %475 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_149 = arith.constant 0 : i64
    %477 = arith.extui %470 : i32 to i64
    %478 = arith.addi %477, %c0_i64_149 : i64
    %479 = llvm.getelementptr %17[%478] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %476, %479 {alignment = 1 : i64} : i32, !llvm.ptr
    %480 = llvm.load %4 : !llvm.ptr -> i32
    %481 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i64_150 = arith.constant 152 : i64
    %482 = arith.extui %481 : i32 to i64
    %483 = arith.addi %482, %c152_i64_150 : i64
    %484 = llvm.getelementptr %17[%483] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %485 = llvm.load volatile %484 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c116_i64 = arith.constant 116 : i64
    %486 = arith.extui %480 : i32 to i64
    %487 = arith.addi %486, %c116_i64 : i64
    %488 = llvm.getelementptr %17[%487] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %485, %488 {alignment = 1 : i64} : i64, !llvm.ptr
    %489 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_151 = arith.constant 1 : i32
    %c112_i64_152 = arith.constant 112 : i64
    %490 = arith.extui %489 : i32 to i64
    %491 = arith.addi %490, %c112_i64_152 : i64
    %492 = llvm.getelementptr %17[%491] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_151, %492 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb12
  ^bb21:  // pred: ^bb15
    %493 = llvm.load %6 : !llvm.ptr -> i32
    %494 = llvm.load %4 : !llvm.ptr -> i32
    %c160_i64_153 = arith.constant 160 : i64
    %495 = arith.extui %494 : i32 to i64
    %496 = arith.addi %495, %c160_i64_153 : i64
    %497 = llvm.getelementptr %17[%496] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %498 = llvm.load volatile %497 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %493, %498) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_154 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_154) : (i32) -> ()
    llvm.unreachable
  ^bb22:  // pred: ^bb14
    %499 = llvm.load %4 : !llvm.ptr -> i32
    %c160_i64_155 = arith.constant 160 : i64
    %500 = arith.extui %499 : i32 to i64
    %501 = arith.addi %500, %c160_i64_155 : i64
    %502 = llvm.getelementptr %17[%501] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %503 = llvm.load volatile %502 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %503, %2 : i32, !llvm.ptr
    %504 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_156 = arith.constant 152 : i32
    %505 = arith.addi %504, %c152_i32_156 : i32
    %c4_i32_157 = arith.constant 4 : i32
    %c0_i32_158 = arith.constant 0 : i32
    call @f89(%arg0, %505, %c4_i32_157, %c0_i32_158) : (!llvm.ptr, i32, i32, i32) -> ()
    %506 = llvm.load %4 : !llvm.ptr -> i32
    %c156_i64_159 = arith.constant 156 : i64
    %507 = arith.extui %506 : i32 to i64
    %508 = arith.addi %507, %c156_i64_159 : i64
    %509 = llvm.getelementptr %17[%508] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %510 = llvm.load volatile %509 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %510, %7 : i32, !llvm.ptr
    %511 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i64_160 = arith.constant 152 : i64
    %512 = arith.extui %511 : i32 to i64
    %513 = arith.addi %512, %c152_i64_160 : i64
    %514 = llvm.getelementptr %17[%513] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %515 = llvm.load volatile %514 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_161 = arith.constant 0 : i32
    %516 = arith.cmpi ne, %515, %c0_i32_161 : i32
    cf.cond_br %516, ^bb7, ^bb23
  ^bb23:  // pred: ^bb22
    %517 = llvm.load %4 : !llvm.ptr -> i32
    %c160_i64_162 = arith.constant 160 : i64
    %518 = arith.extui %517 : i32 to i64
    %519 = arith.addi %518, %c160_i64_162 : i64
    %520 = llvm.getelementptr %17[%519] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %521 = llvm.load volatile %520 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %521, %11 : i32, !llvm.ptr
    %522 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_163 = arith.constant 152 : i32
    %523 = arith.addi %522, %c152_i32_163 : i32
    %c8_i32_164 = arith.constant 8 : i32
    %524 = arith.addi %523, %c8_i32_164 : i32
    llvm.store %524, %12 : i32, !llvm.ptr
    %c0_i32_165 = arith.constant 0 : i32
    %c0_i64_166 = arith.constant 0 : i64
    %525 = arith.extui %524 : i32 to i64
    %526 = arith.addi %525, %c0_i64_166 : i64
    %527 = llvm.getelementptr %17[%526] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_165, %527 {alignment = 1 : i64} : i32, !llvm.ptr
    %528 = llvm.load %4 : !llvm.ptr -> i32
    %529 = llvm.load %2 : !llvm.ptr -> i32
    %c156_i64_167 = arith.constant 156 : i64
    %530 = arith.extui %528 : i32 to i64
    %531 = arith.addi %530, %c156_i64_167 : i64
    %532 = llvm.getelementptr %17[%531] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %529, %532 {alignment = 1 : i64} : i32, !llvm.ptr
    %533 = llvm.load %4 : !llvm.ptr -> i32
    %534 = llvm.load %6 : !llvm.ptr -> i32
    %c152_i64_168 = arith.constant 152 : i64
    %535 = arith.extui %533 : i32 to i64
    %536 = arith.addi %535, %c152_i64_168 : i64
    %537 = llvm.getelementptr %17[%536] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %534, %537 {alignment = 1 : i64} : i32, !llvm.ptr
    %538 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_169 = arith.constant 0 : i32
    %c172_i64 = arith.constant 172 : i64
    %539 = arith.extui %538 : i32 to i64
    %540 = arith.addi %539, %c172_i64 : i64
    %541 = llvm.getelementptr %17[%540] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_169, %541 {alignment = 1 : i64} : i32, !llvm.ptr
    %542 = llvm.load %4 : !llvm.ptr -> i32
    %543 = llvm.load %11 : !llvm.ptr -> i32
    %c168_i64_170 = arith.constant 168 : i64
    %544 = arith.extui %542 : i32 to i64
    %545 = arith.addi %544, %c168_i64_170 : i64
    %546 = llvm.getelementptr %17[%545] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %543, %546 {alignment = 1 : i64} : i32, !llvm.ptr
    %547 = llvm.load %4 : !llvm.ptr -> i32
    %548 = llvm.load %7 : !llvm.ptr -> i32
    %c164_i64 = arith.constant 164 : i64
    %549 = arith.extui %547 : i32 to i64
    %550 = arith.addi %549, %c164_i64 : i64
    %551 = llvm.getelementptr %17[%550] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %548, %551 {alignment = 1 : i64} : i32, !llvm.ptr
    %552 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_171 = arith.constant 304 : i32
    %553 = arith.addi %552, %c304_i32_171 : i32
    %c8_i32_172 = arith.constant 8 : i32
    %554 = arith.addi %553, %c8_i32_172 : i32
    %c0_i32_173 = arith.constant 0 : i32
    %c0_i64_174 = arith.constant 0 : i64
    %555 = arith.extui %554 : i32 to i64
    %556 = arith.addi %555, %c0_i64_174 : i64
    %557 = llvm.getelementptr %17[%556] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_173, %557 {alignment = 1 : i64} : i32, !llvm.ptr
    %558 = llvm.load %4 : !llvm.ptr -> i32
    %559 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i64_175 = arith.constant 152 : i64
    %560 = arith.extui %559 : i32 to i64
    %561 = arith.addi %560, %c152_i64_175 : i64
    %562 = llvm.getelementptr %17[%561] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %563 = llvm.load volatile %562 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c304_i64_176 = arith.constant 304 : i64
    %564 = arith.extui %558 : i32 to i64
    %565 = arith.addi %564, %c304_i64_176 : i64
    %566 = llvm.getelementptr %17[%565] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %563, %566 {alignment = 1 : i64} : i64, !llvm.ptr
    %567 = llvm.load %4 : !llvm.ptr -> i32
    %c164_i32 = arith.constant 164 : i32
    %568 = arith.addi %567, %c164_i32 : i32
    llvm.store %568, %6 : i32, !llvm.ptr
    call @f94(%arg0, %568) : (!llvm.ptr, i32) -> ()
    %569 = llvm.load %6 : !llvm.ptr -> i32
    call @f96(%arg0, %569) : (!llvm.ptr, i32) -> ()
    %570 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_177 = arith.constant 272 : i32
    %571 = arith.addi %570, %c272_i32_177 : i32
    %572 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_178 = arith.constant 304 : i32
    %573 = arith.addi %572, %c304_i32_178 : i32
    call @f86(%arg0, %571, %573) : (!llvm.ptr, i32, i32) -> ()
    %574 = llvm.load %4 : !llvm.ptr -> i32
    %c276_i64 = arith.constant 276 : i64
    %575 = arith.extui %574 : i32 to i64
    %576 = arith.addi %575, %c276_i64 : i64
    %577 = llvm.getelementptr %17[%576] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %578 = llvm.load volatile %577 {alignment = 1 : i64} : !llvm.ptr -> i32
    %579 = llvm.load %4 : !llvm.ptr -> i32
    %c280_i64 = arith.constant 280 : i64
    %580 = arith.extui %579 : i32 to i64
    %581 = arith.addi %580, %c280_i64 : i64
    %582 = llvm.getelementptr %17[%581] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %583 = llvm.load volatile %582 {alignment = 1 : i64} : !llvm.ptr -> i32
    %584 = llvm.load %3 : !llvm.ptr -> i32
    %585 = llvm.load %5 : !llvm.ptr -> i32
    %586 = call @f109(%arg0, %578, %583, %584, %585) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %586, %5 : i32, !llvm.ptr
    %587 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_179 = arith.constant 272 : i32
    %588 = arith.addi %587, %c272_i32_179 : i32
    call @f112(%arg0, %588) : (!llvm.ptr, i32) -> ()
    %589 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_180 = arith.constant 272 : i32
    %590 = arith.addi %589, %c272_i32_180 : i32
    call @f113(%arg0, %590) : (!llvm.ptr, i32) -> ()
    %591 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_181 = arith.constant 0 : i32
    %592 = arith.cmpi eq, %591, %c0_i32_181 : i32
    %593 = arith.extui %592 : i1 to i32
    %c0_i32_182 = arith.constant 0 : i32
    %594 = arith.cmpi ne, %593, %c0_i32_182 : i32
    cf.cond_br %594, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %595 = llvm.load %4 : !llvm.ptr -> i32
    %c-2147483645_i32 = arith.constant -2147483645 : i32
    %c128_i64 = arith.constant 128 : i64
    %596 = arith.extui %595 : i32 to i64
    %597 = arith.addi %596, %c128_i64 : i64
    %598 = llvm.getelementptr %17[%597] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483645_i32, %598 {alignment = 1 : i64} : i32, !llvm.ptr
    %599 = llvm.load %4 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %600 = arith.addi %599, %c128_i32 : i32
    call @f33(%arg0, %600) : (!llvm.ptr, i32) -> ()
    %601 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_183 = arith.constant 1 : i64
    %c120_i64 = arith.constant 120 : i64
    %602 = arith.extui %601 : i32 to i64
    %603 = arith.addi %602, %c120_i64 : i64
    %604 = llvm.getelementptr %17[%603] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_183, %604 {alignment = 1 : i64} : i64, !llvm.ptr
    %605 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_184 = arith.constant 1 : i64
    %c112_i64_185 = arith.constant 112 : i64
    %606 = arith.extui %605 : i32 to i64
    %607 = arith.addi %606, %c112_i64_185 : i64
    %608 = llvm.getelementptr %17[%607] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_184, %608 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb12
  ^bb25:  // pred: ^bb23
    %609 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_186 = arith.constant 152 : i32
    %610 = arith.addi %609, %c152_i32_186 : i32
    %c24_i32_187 = arith.constant 24 : i32
    %611 = arith.addi %610, %c24_i32_187 : i32
    %612 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %613 = arith.addi %612, %c48_i32 : i32
    %614 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_188 = arith.constant 8 : i32
    %615 = arith.addi %614, %c8_i32_188 : i32
    %616 = call @f2(%arg0, %613, %615) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %616, %5 : i32, !llvm.ptr
    %c24_i32_189 = arith.constant 24 : i32
    %617 = arith.addi %616, %c24_i32_189 : i32
    %c0_i64_190 = arith.constant 0 : i64
    %618 = arith.extui %617 : i32 to i64
    %619 = arith.addi %618, %c0_i64_190 : i64
    %620 = llvm.getelementptr %17[%619] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %621 = llvm.load volatile %620 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_191 = arith.constant 0 : i64
    %622 = arith.extui %611 : i32 to i64
    %623 = arith.addi %622, %c0_i64_191 : i64
    %624 = llvm.getelementptr %17[%623] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %621, %624 {alignment = 1 : i64} : i64, !llvm.ptr
    %625 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_192 = arith.constant 152 : i32
    %626 = arith.addi %625, %c152_i32_192 : i32
    %c16_i32_193 = arith.constant 16 : i32
    %627 = arith.addi %626, %c16_i32_193 : i32
    %628 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_194 = arith.constant 16 : i32
    %629 = arith.addi %628, %c16_i32_194 : i32
    %c0_i64_195 = arith.constant 0 : i64
    %630 = arith.extui %629 : i32 to i64
    %631 = arith.addi %630, %c0_i64_195 : i64
    %632 = llvm.getelementptr %17[%631] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %633 = llvm.load volatile %632 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_196 = arith.constant 0 : i64
    %634 = arith.extui %627 : i32 to i64
    %635 = arith.addi %634, %c0_i64_196 : i64
    %636 = llvm.getelementptr %17[%635] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %633, %636 {alignment = 1 : i64} : i64, !llvm.ptr
    %637 = llvm.load %12 : !llvm.ptr -> i32
    %638 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_197 = arith.constant 8 : i32
    %639 = arith.addi %638, %c8_i32_197 : i32
    %c0_i64_198 = arith.constant 0 : i64
    %640 = arith.extui %639 : i32 to i64
    %641 = arith.addi %640, %c0_i64_198 : i64
    %642 = llvm.getelementptr %17[%641] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %643 = llvm.load volatile %642 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_199 = arith.constant 0 : i64
    %644 = arith.extui %637 : i32 to i64
    %645 = arith.addi %644, %c0_i64_199 : i64
    %646 = llvm.getelementptr %17[%645] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %643, %646 {alignment = 1 : i64} : i64, !llvm.ptr
    %647 = llvm.load %4 : !llvm.ptr -> i32
    %648 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_200 = arith.constant 0 : i64
    %649 = arith.extui %648 : i32 to i64
    %650 = arith.addi %649, %c0_i64_200 : i64
    %651 = llvm.getelementptr %17[%650] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %652 = llvm.load volatile %651 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c152_i64_201 = arith.constant 152 : i64
    %653 = arith.extui %647 : i32 to i64
    %654 = arith.addi %653, %c152_i64_201 : i64
    %655 = llvm.getelementptr %17[%654] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %652, %655 {alignment = 1 : i64} : i64, !llvm.ptr
    %656 = llvm.load %4 : !llvm.ptr -> i32
    %c112_i32_202 = arith.constant 112 : i32
    %657 = arith.addi %656, %c112_i32_202 : i32
    %c4_i32_203 = arith.constant 4 : i32
    %658 = arith.addi %657, %c4_i32_203 : i32
    %659 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_204 = arith.constant 152 : i32
    %660 = arith.addi %659, %c152_i32_204 : i32
    call @f3(%arg0, %658, %660) : (!llvm.ptr, i32, i32) -> ()
    %661 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_205 = arith.constant 0 : i32
    %c112_i64_206 = arith.constant 112 : i64
    %662 = arith.extui %661 : i32 to i64
    %663 = arith.addi %662, %c112_i64_206 : i64
    %664 = llvm.getelementptr %17[%663] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_205, %664 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb12
  ^bb26:  // pred: ^bb13
    %665 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_207 = arith.constant 152 : i32
    %666 = arith.addi %665, %c152_i32_207 : i32
    call @f1(%arg0, %666) : (!llvm.ptr, i32) -> ()
    %667 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32_208 = arith.constant 32 : i32
    %668 = arith.cmpi ult, %667, %c32_i32_208 : i32
    %669 = arith.extui %668 : i1 to i32
    %c0_i32_209 = arith.constant 0 : i32
    %670 = arith.cmpi ne, %669, %c0_i32_209 : i32
    cf.cond_br %670, ^bb29, ^bb30
  ^bb27:  // pred: ^bb13
    %671 = llvm.load %4 : !llvm.ptr -> i32
    %c124_i32_210 = arith.constant 124 : i32
    %672 = arith.addi %671, %c124_i32_210 : i32
    %673 = llvm.load %4 : !llvm.ptr -> i32
    %c160_i32_211 = arith.constant 160 : i32
    %674 = arith.addi %673, %c160_i32_211 : i32
    %c0_i64_212 = arith.constant 0 : i64
    %675 = arith.extui %674 : i32 to i64
    %676 = arith.addi %675, %c0_i64_212 : i64
    %677 = llvm.getelementptr %17[%676] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %678 = llvm.load volatile %677 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_213 = arith.constant 0 : i64
    %679 = arith.extui %672 : i32 to i64
    %680 = arith.addi %679, %c0_i64_213 : i64
    %681 = llvm.getelementptr %17[%680] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %678, %681 {alignment = 1 : i64} : i32, !llvm.ptr
    %682 = llvm.load %4 : !llvm.ptr -> i32
    %683 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i64_214 = arith.constant 152 : i64
    %684 = arith.extui %683 : i32 to i64
    %685 = arith.addi %684, %c152_i64_214 : i64
    %686 = llvm.getelementptr %17[%685] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %687 = llvm.load volatile %686 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c116_i64_215 = arith.constant 116 : i64
    %688 = arith.extui %682 : i32 to i64
    %689 = arith.addi %688, %c116_i64_215 : i64
    %690 = llvm.getelementptr %17[%689] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %687, %690 {alignment = 1 : i64} : i64, !llvm.ptr
    %691 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_216 = arith.constant 1 : i32
    %c112_i64_217 = arith.constant 112 : i64
    %692 = arith.extui %691 : i32 to i64
    %693 = arith.addi %692, %c112_i64_217 : i64
    %694 = llvm.getelementptr %17[%693] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_216, %694 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb12
  ^bb28:  // 2 preds: ^bb29, ^bb34
    %695 = llvm.load %4 : !llvm.ptr -> i32
    %c208_i32 = arith.constant 208 : i32
    %696 = arith.addi %695, %c208_i32 : i32
    %697 = llvm.load %4 : !llvm.ptr -> i32
    %c172_i32 = arith.constant 172 : i32
    %698 = arith.addi %697, %c172_i32 : i32
    %c0_i64_218 = arith.constant 0 : i64
    %699 = arith.extui %698 : i32 to i64
    %700 = arith.addi %699, %c0_i64_218 : i64
    %701 = llvm.getelementptr %17[%700] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %702 = llvm.load volatile %701 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_219 = arith.constant 0 : i64
    %703 = arith.extui %696 : i32 to i64
    %704 = arith.addi %703, %c0_i64_219 : i64
    %705 = llvm.getelementptr %17[%704] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %702, %705 {alignment = 1 : i64} : i64, !llvm.ptr
    %706 = llvm.load %4 : !llvm.ptr -> i32
    %c200_i32 = arith.constant 200 : i32
    %707 = arith.addi %706, %c200_i32 : i32
    %708 = llvm.load %4 : !llvm.ptr -> i32
    %c164_i32_220 = arith.constant 164 : i32
    %709 = arith.addi %708, %c164_i32_220 : i32
    %c0_i64_221 = arith.constant 0 : i64
    %710 = arith.extui %709 : i32 to i64
    %711 = arith.addi %710, %c0_i64_221 : i64
    %712 = llvm.getelementptr %17[%711] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %713 = llvm.load volatile %712 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_222 = arith.constant 0 : i64
    %714 = arith.extui %707 : i32 to i64
    %715 = arith.addi %714, %c0_i64_222 : i64
    %716 = llvm.getelementptr %17[%715] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %713, %716 {alignment = 1 : i64} : i64, !llvm.ptr
    %717 = llvm.load %4 : !llvm.ptr -> i32
    %718 = llvm.load %4 : !llvm.ptr -> i32
    %c156_i64_223 = arith.constant 156 : i64
    %719 = arith.extui %718 : i32 to i64
    %720 = arith.addi %719, %c156_i64_223 : i64
    %721 = llvm.getelementptr %17[%720] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %722 = llvm.load volatile %721 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c192_i64 = arith.constant 192 : i64
    %723 = arith.extui %717 : i32 to i64
    %724 = arith.addi %723, %c192_i64 : i64
    %725 = llvm.getelementptr %17[%724] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %722, %725 {alignment = 1 : i64} : i64, !llvm.ptr
    %726 = llvm.load %4 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %727 = arith.addi %726, %c192_i32 : i32
    call @f33(%arg0, %727) : (!llvm.ptr, i32) -> ()
    %728 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_224 = arith.constant 1 : i64
    %c120_i64_225 = arith.constant 120 : i64
    %729 = arith.extui %728 : i32 to i64
    %730 = arith.addi %729, %c120_i64_225 : i64
    %731 = llvm.getelementptr %17[%730] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_224, %731 {alignment = 1 : i64} : i64, !llvm.ptr
    %732 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i64_226 = arith.constant 1 : i64
    %c112_i64_227 = arith.constant 112 : i64
    %733 = arith.extui %732 : i32 to i64
    %734 = arith.addi %733, %c112_i64_227 : i64
    %735 = llvm.getelementptr %17[%734] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_226, %735 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb12
  ^bb29:  // 2 preds: ^bb26, ^bb30
    %736 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_228 = arith.constant 32 : i32
    %c164_i64_229 = arith.constant 164 : i64
    %737 = arith.extui %736 : i32 to i64
    %738 = arith.addi %737, %c164_i64_229 : i64
    %739 = llvm.getelementptr %17[%738] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32_228, %739 {alignment = 1 : i64} : i32, !llvm.ptr
    %740 = llvm.load %4 : !llvm.ptr -> i32
    %741 = llvm.load %6 : !llvm.ptr -> i32
    %c156_i64_230 = arith.constant 156 : i64
    %742 = arith.extui %740 : i32 to i64
    %743 = arith.addi %742, %c156_i64_230 : i64
    %744 = llvm.getelementptr %17[%743] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %741, %744 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb28
  ^bb30:  // pred: ^bb26
    %745 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_231 = arith.constant 304 : i32
    %746 = arith.addi %745, %c304_i32_231 : i32
    %c2_i32_232 = arith.constant 2 : i32
    %747 = arith.addi %746, %c2_i32_232 : i32
    llvm.store %747, %12 : i32, !llvm.ptr
    %748 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32_233 = arith.constant 2 : i32
    %749 = arith.addi %748, %c2_i32_233 : i32
    %c0_i64_234 = arith.constant 0 : i64
    %750 = arith.extui %749 : i32 to i64
    %751 = arith.addi %750, %c0_i64_234 : i64
    %752 = llvm.getelementptr %17[%751] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %753 = llvm.load volatile %752 {alignment = 1 : i64} : !llvm.ptr -> i8
    %754 = arith.extui %753 : i8 to i32
    %c0_i64_235 = arith.constant 0 : i64
    %755 = arith.extui %747 : i32 to i64
    %756 = arith.addi %755, %c0_i64_235 : i64
    %757 = llvm.getelementptr %17[%756] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %758 = arith.trunci %754 : i32 to i8
    llvm.store volatile %758, %757 {alignment = 1 : i64} : i8, !llvm.ptr
    %759 = llvm.load %7 : !llvm.ptr -> i32
    %c27_i32 = arith.constant 27 : i32
    %760 = arith.addi %759, %c27_i32 : i32
    %c0_i64_236 = arith.constant 0 : i64
    %761 = arith.extui %760 : i32 to i64
    %762 = arith.addi %761, %c0_i64_236 : i64
    %763 = llvm.getelementptr %17[%762] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %764 = llvm.load volatile %763 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %764, %6 : i32, !llvm.ptr
    %765 = llvm.load %7 : !llvm.ptr -> i32
    %c7_i64 = arith.constant 7 : i64
    %766 = arith.extui %765 : i32 to i64
    %767 = arith.addi %766, %c7_i64 : i64
    %768 = llvm.getelementptr %17[%767] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %769 = llvm.load volatile %768 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %769, %9 : i64, !llvm.ptr
    %770 = llvm.load %7 : !llvm.ptr -> i32
    %c15_i64 = arith.constant 15 : i64
    %771 = arith.extui %770 : i32 to i64
    %772 = arith.addi %771, %c15_i64 : i64
    %773 = llvm.getelementptr %17[%772] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %774 = llvm.load volatile %773 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %774, %2 : i32, !llvm.ptr
    %775 = llvm.load %7 : !llvm.ptr -> i32
    %c19_i64 = arith.constant 19 : i64
    %776 = arith.extui %775 : i32 to i64
    %777 = arith.addi %776, %c19_i64 : i64
    %778 = llvm.getelementptr %17[%777] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %779 = llvm.load volatile %778 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %779, %8 : i64, !llvm.ptr
    %780 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_237 = arith.constant 0 : i64
    %781 = arith.extui %780 : i32 to i64
    %782 = arith.addi %781, %c0_i64_237 : i64
    %783 = llvm.getelementptr %17[%782] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %784 = llvm.load volatile %783 {alignment = 1 : i64} : !llvm.ptr -> i16
    %785 = arith.extui %784 : i16 to i32
    llvm.store %785, %11 : i32, !llvm.ptr
    %786 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_238 = arith.constant 304 : i32
    %787 = arith.addi %786, %c304_i32_238 : i32
    %c31_i32_239 = arith.constant 31 : i32
    %788 = arith.addi %787, %c31_i32_239 : i32
    %789 = llvm.load %7 : !llvm.ptr -> i32
    %c35_i32 = arith.constant 35 : i32
    %790 = arith.addi %789, %c35_i32 : i32
    %c0_i64_240 = arith.constant 0 : i64
    %791 = arith.extui %790 : i32 to i64
    %792 = arith.addi %791, %c0_i64_240 : i64
    %793 = llvm.getelementptr %17[%792] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %794 = llvm.load volatile %793 {alignment = 1 : i64} : !llvm.ptr -> i8
    %795 = arith.extui %794 : i8 to i32
    %c0_i64_241 = arith.constant 0 : i64
    %796 = arith.extui %788 : i32 to i64
    %797 = arith.addi %796, %c0_i64_241 : i64
    %798 = llvm.getelementptr %17[%797] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %799 = arith.trunci %795 : i32 to i8
    llvm.store volatile %799, %798 {alignment = 1 : i64} : i8, !llvm.ptr
    %800 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_242 = arith.constant 304 : i32
    %801 = arith.addi %800, %c304_i32_242 : i32
    %c23_i32 = arith.constant 23 : i32
    %802 = arith.addi %801, %c23_i32 : i32
    %803 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_243 = arith.constant 0 : i64
    %804 = arith.extui %802 : i32 to i64
    %805 = arith.addi %804, %c0_i64_243 : i64
    %806 = llvm.getelementptr %17[%805] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %803, %806 {alignment = 1 : i64} : i32, !llvm.ptr
    %807 = llvm.load %4 : !llvm.ptr -> i32
    %808 = llvm.load %11 : !llvm.ptr -> i32
    %c304_i64_244 = arith.constant 304 : i64
    %809 = arith.extui %807 : i32 to i64
    %810 = arith.addi %809, %c304_i64_244 : i64
    %811 = llvm.getelementptr %17[%810] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %812 = arith.trunci %808 : i32 to i16
    llvm.store volatile %812, %811 {alignment = 1 : i64} : i16, !llvm.ptr
    %813 = llvm.load %4 : !llvm.ptr -> i32
    %814 = llvm.load %7 : !llvm.ptr -> i32
    %c31_i64 = arith.constant 31 : i64
    %815 = arith.extui %814 : i32 to i64
    %816 = arith.addi %815, %c31_i64 : i64
    %817 = llvm.getelementptr %17[%816] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %818 = llvm.load volatile %817 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c331_i64 = arith.constant 331 : i64
    %819 = arith.extui %813 : i32 to i64
    %820 = arith.addi %819, %c331_i64 : i64
    %821 = llvm.getelementptr %17[%820] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %818, %821 {alignment = 1 : i64} : i32, !llvm.ptr
    %822 = llvm.load %4 : !llvm.ptr -> i32
    %823 = llvm.load %8 : !llvm.ptr -> i64
    %c319_i64 = arith.constant 319 : i64
    %824 = arith.extui %822 : i32 to i64
    %825 = arith.addi %824, %c319_i64 : i64
    %826 = llvm.getelementptr %17[%825] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %823, %826 {alignment = 1 : i64} : i64, !llvm.ptr
    %827 = llvm.load %4 : !llvm.ptr -> i32
    %828 = llvm.load %2 : !llvm.ptr -> i32
    %c315_i64 = arith.constant 315 : i64
    %829 = arith.extui %827 : i32 to i64
    %830 = arith.addi %829, %c315_i64 : i64
    %831 = llvm.getelementptr %17[%830] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %828, %831 {alignment = 1 : i64} : i32, !llvm.ptr
    %832 = llvm.load %4 : !llvm.ptr -> i32
    %833 = llvm.load %9 : !llvm.ptr -> i64
    %c307_i64 = arith.constant 307 : i64
    %834 = arith.extui %832 : i32 to i64
    %835 = arith.addi %834, %c307_i64 : i64
    %836 = llvm.getelementptr %17[%835] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %833, %836 {alignment = 1 : i64} : i64, !llvm.ptr
    %837 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_245 = arith.constant 272 : i32
    %838 = arith.addi %837, %c272_i32_245 : i32
    %839 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_246 = arith.constant 304 : i32
    %840 = arith.addi %839, %c304_i32_246 : i32
    call @f4(%arg0, %838, %840) : (!llvm.ptr, i32, i32) -> ()
    %841 = llvm.load %4 : !llvm.ptr -> i32
    %c276_i64_247 = arith.constant 276 : i64
    %842 = arith.extui %841 : i32 to i64
    %843 = arith.addi %842, %c276_i64_247 : i64
    %844 = llvm.getelementptr %17[%843] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %845 = llvm.load volatile %844 {alignment = 1 : i64} : !llvm.ptr -> i32
    %846 = llvm.load %4 : !llvm.ptr -> i32
    %c280_i64_248 = arith.constant 280 : i64
    %847 = arith.extui %846 : i32 to i64
    %848 = arith.addi %847, %c280_i64_248 : i64
    %849 = llvm.getelementptr %17[%848] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %850 = llvm.load volatile %849 {alignment = 1 : i64} : !llvm.ptr -> i32
    %851 = llvm.load %3 : !llvm.ptr -> i32
    %852 = llvm.load %5 : !llvm.ptr -> i32
    %853 = call @f109(%arg0, %845, %850, %851, %852) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %853, %5 : i32, !llvm.ptr
    %854 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_249 = arith.constant 272 : i32
    %855 = arith.addi %854, %c272_i32_249 : i32
    call @f112(%arg0, %855) : (!llvm.ptr, i32) -> ()
    %856 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_250 = arith.constant 272 : i32
    %857 = arith.addi %856, %c272_i32_250 : i32
    call @f113(%arg0, %857) : (!llvm.ptr, i32) -> ()
    %c-2147483645_i32_251 = arith.constant -2147483645 : i32
    llvm.store %c-2147483645_i32_251, %6 : i32, !llvm.ptr
    %858 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_252 = arith.constant 0 : i32
    %859 = arith.cmpi eq, %858, %c0_i32_252 : i32
    %860 = arith.extui %859 : i1 to i32
    %c0_i32_253 = arith.constant 0 : i32
    %861 = arith.cmpi ne, %860, %c0_i32_253 : i32
    cf.cond_br %861, ^bb29, ^bb31
  ^bb31:  // pred: ^bb30
    %862 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_254 = arith.constant 272 : i32
    %863 = arith.addi %862, %c272_i32_254 : i32
    %c2_i32_255 = arith.constant 2 : i32
    %864 = arith.addi %863, %c2_i32_255 : i32
    %865 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_256 = arith.constant 0 : i64
    %866 = arith.extui %865 : i32 to i64
    %867 = arith.addi %866, %c0_i64_256 : i64
    %868 = llvm.getelementptr %17[%867] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %869 = llvm.load volatile %868 {alignment = 1 : i64} : !llvm.ptr -> i8
    %870 = arith.extui %869 : i8 to i32
    %c0_i64_257 = arith.constant 0 : i64
    %871 = arith.extui %864 : i32 to i64
    %872 = arith.addi %871, %c0_i64_257 : i64
    %873 = llvm.getelementptr %17[%872] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %874 = arith.trunci %870 : i32 to i8
    llvm.store volatile %874, %873 {alignment = 1 : i64} : i8, !llvm.ptr
    %875 = llvm.load %4 : !llvm.ptr -> i32
    %c248_i32 = arith.constant 248 : i32
    %876 = arith.addi %875, %c248_i32 : i32
    %c8_i32_258 = arith.constant 8 : i32
    %877 = arith.addi %876, %c8_i32_258 : i32
    %878 = llvm.load %4 : !llvm.ptr -> i32
    %c319_i32 = arith.constant 319 : i32
    %879 = arith.addi %878, %c319_i32 : i32
    llvm.store %879, %5 : i32, !llvm.ptr
    %c8_i32_259 = arith.constant 8 : i32
    %880 = arith.addi %879, %c8_i32_259 : i32
    %c0_i64_260 = arith.constant 0 : i64
    %881 = arith.extui %880 : i32 to i64
    %882 = arith.addi %881, %c0_i64_260 : i64
    %883 = llvm.getelementptr %17[%882] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %884 = llvm.load volatile %883 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %884, %9 : i64, !llvm.ptr
    %c0_i64_261 = arith.constant 0 : i64
    %885 = arith.extui %877 : i32 to i64
    %886 = arith.addi %885, %c0_i64_261 : i64
    %887 = llvm.getelementptr %17[%886] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %884, %887 {alignment = 1 : i64} : i64, !llvm.ptr
    %888 = llvm.load %4 : !llvm.ptr -> i32
    %c248_i32_262 = arith.constant 248 : i32
    %889 = arith.addi %888, %c248_i32_262 : i32
    %c16_i32_263 = arith.constant 16 : i32
    %890 = arith.addi %889, %c16_i32_263 : i32
    %891 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_264 = arith.constant 16 : i32
    %892 = arith.addi %891, %c16_i32_264 : i32
    %c0_i64_265 = arith.constant 0 : i64
    %893 = arith.extui %892 : i32 to i64
    %894 = arith.addi %893, %c0_i64_265 : i64
    %895 = llvm.getelementptr %17[%894] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %896 = llvm.load volatile %895 {alignment = 1 : i64} : !llvm.ptr -> i8
    %897 = arith.extui %896 : i8 to i32
    llvm.store %897, %6 : i32, !llvm.ptr
    %c0_i64_266 = arith.constant 0 : i64
    %898 = arith.extui %890 : i32 to i64
    %899 = arith.addi %898, %c0_i64_266 : i64
    %900 = llvm.getelementptr %17[%899] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %901 = arith.trunci %897 : i32 to i8
    llvm.store volatile %901, %900 {alignment = 1 : i64} : i8, !llvm.ptr
    %902 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_267 = arith.constant 272 : i32
    %903 = arith.addi %902, %c272_i32_267 : i32
    %c23_i32_268 = arith.constant 23 : i32
    %904 = arith.addi %903, %c23_i32_268 : i32
    %905 = llvm.load %9 : !llvm.ptr -> i64
    %c0_i64_269 = arith.constant 0 : i64
    %906 = arith.extui %904 : i32 to i64
    %907 = arith.addi %906, %c0_i64_269 : i64
    %908 = llvm.getelementptr %17[%907] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %905, %908 {alignment = 1 : i64} : i64, !llvm.ptr
    %909 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_270 = arith.constant 272 : i32
    %910 = arith.addi %909, %c272_i32_270 : i32
    %c31_i32_271 = arith.constant 31 : i32
    %911 = arith.addi %910, %c31_i32_271 : i32
    %912 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_272 = arith.constant 0 : i64
    %913 = arith.extui %911 : i32 to i64
    %914 = arith.addi %913, %c0_i64_272 : i64
    %915 = llvm.getelementptr %17[%914] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %916 = arith.trunci %912 : i32 to i8
    llvm.store volatile %916, %915 {alignment = 1 : i64} : i8, !llvm.ptr
    %917 = llvm.load %4 : !llvm.ptr -> i32
    %918 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i64_273 = arith.constant 304 : i64
    %919 = arith.extui %918 : i32 to i64
    %920 = arith.addi %919, %c304_i64_273 : i64
    %921 = llvm.getelementptr %17[%920] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %922 = llvm.load volatile %921 {alignment = 1 : i64} : !llvm.ptr -> i16
    %923 = arith.extui %922 : i16 to i32
    %c272_i64 = arith.constant 272 : i64
    %924 = arith.extui %917 : i32 to i64
    %925 = arith.addi %924, %c272_i64 : i64
    %926 = llvm.getelementptr %17[%925] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %927 = arith.trunci %923 : i32 to i16
    llvm.store volatile %927, %926 {alignment = 1 : i64} : i16, !llvm.ptr
    %928 = llvm.load %4 : !llvm.ptr -> i32
    %929 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_274 = arith.constant 0 : i64
    %930 = arith.extui %929 : i32 to i64
    %931 = arith.addi %930, %c0_i64_274 : i64
    %932 = llvm.getelementptr %17[%931] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %933 = llvm.load volatile %932 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %933, %9 : i64, !llvm.ptr
    %c248_i64 = arith.constant 248 : i64
    %934 = arith.extui %928 : i32 to i64
    %935 = arith.addi %934, %c248_i64 : i64
    %936 = llvm.getelementptr %17[%935] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %933, %936 {alignment = 1 : i64} : i64, !llvm.ptr
    %937 = llvm.load %4 : !llvm.ptr -> i32
    %938 = llvm.load %4 : !llvm.ptr -> i32
    %c315_i64_275 = arith.constant 315 : i64
    %939 = arith.extui %938 : i32 to i64
    %940 = arith.addi %939, %c315_i64_275 : i64
    %941 = llvm.getelementptr %17[%940] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %942 = llvm.load volatile %941 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c283_i64 = arith.constant 283 : i64
    %943 = arith.extui %937 : i32 to i64
    %944 = arith.addi %943, %c283_i64 : i64
    %945 = llvm.getelementptr %17[%944] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %942, %945 {alignment = 1 : i64} : i32, !llvm.ptr
    %946 = llvm.load %4 : !llvm.ptr -> i32
    %947 = llvm.load %4 : !llvm.ptr -> i32
    %c307_i64_276 = arith.constant 307 : i64
    %948 = arith.extui %947 : i32 to i64
    %949 = arith.addi %948, %c307_i64_276 : i64
    %950 = llvm.getelementptr %17[%949] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %951 = llvm.load volatile %950 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c275_i64 = arith.constant 275 : i64
    %952 = arith.extui %946 : i32 to i64
    %953 = arith.addi %952, %c275_i64 : i64
    %954 = llvm.getelementptr %17[%953] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %951, %954 {alignment = 1 : i64} : i64, !llvm.ptr
    %955 = llvm.load %4 : !llvm.ptr -> i32
    %956 = llvm.load %9 : !llvm.ptr -> i64
    %c287_i64 = arith.constant 287 : i64
    %957 = arith.extui %955 : i32 to i64
    %958 = arith.addi %957, %c287_i64 : i64
    %959 = llvm.getelementptr %17[%958] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %956, %959 {alignment = 1 : i64} : i64, !llvm.ptr
    %960 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_277 = arith.constant 272 : i32
    %961 = arith.addi %960, %c272_i32_277 : i32
    %962 = call @f102(%arg0, %961) : (!llvm.ptr, i32) -> i32
    %c0_i32_278 = arith.constant 0 : i32
    %963 = arith.cmpi ne, %962, %c0_i32_278 : i32
    cf.cond_br %963, ^bb32, ^bb33
  ^bb32:  // 2 preds: ^bb31, ^bb33
    %964 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_279 = arith.constant 304 : i32
    %965 = arith.addi %964, %c304_i32_279 : i32
    %c24_i32_280 = arith.constant 24 : i32
    %966 = arith.addi %965, %c24_i32_280 : i32
    %967 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_281 = arith.constant 272 : i32
    %968 = arith.addi %967, %c272_i32_281 : i32
    %c24_i32_282 = arith.constant 24 : i32
    %969 = arith.addi %968, %c24_i32_282 : i32
    %c0_i64_283 = arith.constant 0 : i64
    %970 = arith.extui %969 : i32 to i64
    %971 = arith.addi %970, %c0_i64_283 : i64
    %972 = llvm.getelementptr %17[%971] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %973 = llvm.load volatile %972 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_284 = arith.constant 0 : i64
    %974 = arith.extui %966 : i32 to i64
    %975 = arith.addi %974, %c0_i64_284 : i64
    %976 = llvm.getelementptr %17[%975] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %973, %976 {alignment = 1 : i64} : i64, !llvm.ptr
    %977 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_285 = arith.constant 304 : i32
    %978 = arith.addi %977, %c304_i32_285 : i32
    %c16_i32_286 = arith.constant 16 : i32
    %979 = arith.addi %978, %c16_i32_286 : i32
    %980 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_287 = arith.constant 272 : i32
    %981 = arith.addi %980, %c272_i32_287 : i32
    %c16_i32_288 = arith.constant 16 : i32
    %982 = arith.addi %981, %c16_i32_288 : i32
    %c0_i64_289 = arith.constant 0 : i64
    %983 = arith.extui %982 : i32 to i64
    %984 = arith.addi %983, %c0_i64_289 : i64
    %985 = llvm.getelementptr %17[%984] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %986 = llvm.load volatile %985 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_290 = arith.constant 0 : i64
    %987 = arith.extui %979 : i32 to i64
    %988 = arith.addi %987, %c0_i64_290 : i64
    %989 = llvm.getelementptr %17[%988] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %986, %989 {alignment = 1 : i64} : i64, !llvm.ptr
    %990 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_291 = arith.constant 304 : i32
    %991 = arith.addi %990, %c304_i32_291 : i32
    %c8_i32_292 = arith.constant 8 : i32
    %992 = arith.addi %991, %c8_i32_292 : i32
    %993 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_293 = arith.constant 272 : i32
    %994 = arith.addi %993, %c272_i32_293 : i32
    %c8_i32_294 = arith.constant 8 : i32
    %995 = arith.addi %994, %c8_i32_294 : i32
    %c0_i64_295 = arith.constant 0 : i64
    %996 = arith.extui %995 : i32 to i64
    %997 = arith.addi %996, %c0_i64_295 : i64
    %998 = llvm.getelementptr %17[%997] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %999 = llvm.load volatile %998 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_296 = arith.constant 0 : i64
    %1000 = arith.extui %992 : i32 to i64
    %1001 = arith.addi %1000, %c0_i64_296 : i64
    %1002 = llvm.getelementptr %17[%1001] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %999, %1002 {alignment = 1 : i64} : i64, !llvm.ptr
    %1003 = llvm.load %4 : !llvm.ptr -> i32
    %1004 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i64_297 = arith.constant 272 : i64
    %1005 = arith.extui %1004 : i32 to i64
    %1006 = arith.addi %1005, %c272_i64_297 : i64
    %1007 = llvm.getelementptr %17[%1006] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1008 = llvm.load volatile %1007 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c304_i64_298 = arith.constant 304 : i64
    %1009 = arith.extui %1003 : i32 to i64
    %1010 = arith.addi %1009, %c304_i64_298 : i64
    %1011 = llvm.getelementptr %17[%1010] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1008, %1011 {alignment = 1 : i64} : i64, !llvm.ptr
    %1012 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_299 = arith.constant 152 : i32
    %1013 = arith.addi %1012, %c152_i32_299 : i32
    %c8_i32_300 = arith.constant 8 : i32
    %1014 = arith.addi %1013, %c8_i32_300 : i32
    %1015 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_301 = arith.constant 304 : i32
    %1016 = arith.addi %1015, %c304_i32_301 : i32
    call @f103(%arg0, %1014, %1016) : (!llvm.ptr, i32, i32) -> ()
    %1017 = llvm.load %4 : !llvm.ptr -> i32
    %c216_i32_302 = arith.constant 216 : i32
    %1018 = arith.addi %1017, %c216_i32_302 : i32
    %c8_i32_303 = arith.constant 8 : i32
    %1019 = arith.addi %1018, %c8_i32_303 : i32
    %1020 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_304 = arith.constant 152 : i32
    %1021 = arith.addi %1020, %c152_i32_304 : i32
    %c16_i32_305 = arith.constant 16 : i32
    %1022 = arith.addi %1021, %c16_i32_305 : i32
    %c0_i64_306 = arith.constant 0 : i64
    %1023 = arith.extui %1022 : i32 to i64
    %1024 = arith.addi %1023, %c0_i64_306 : i64
    %1025 = llvm.getelementptr %17[%1024] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1026 = llvm.load volatile %1025 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_307 = arith.constant 0 : i64
    %1027 = arith.extui %1019 : i32 to i64
    %1028 = arith.addi %1027, %c0_i64_307 : i64
    %1029 = llvm.getelementptr %17[%1028] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1026, %1029 {alignment = 1 : i64} : i64, !llvm.ptr
    %1030 = llvm.load %4 : !llvm.ptr -> i32
    %c216_i32_308 = arith.constant 216 : i32
    %1031 = arith.addi %1030, %c216_i32_308 : i32
    %c16_i32_309 = arith.constant 16 : i32
    %1032 = arith.addi %1031, %c16_i32_309 : i32
    %1033 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_310 = arith.constant 152 : i32
    %1034 = arith.addi %1033, %c152_i32_310 : i32
    %c24_i32_311 = arith.constant 24 : i32
    %1035 = arith.addi %1034, %c24_i32_311 : i32
    %c0_i64_312 = arith.constant 0 : i64
    %1036 = arith.extui %1035 : i32 to i64
    %1037 = arith.addi %1036, %c0_i64_312 : i64
    %1038 = llvm.getelementptr %17[%1037] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1039 = llvm.load volatile %1038 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_313 = arith.constant 0 : i64
    %1040 = arith.extui %1032 : i32 to i64
    %1041 = arith.addi %1040, %c0_i64_313 : i64
    %1042 = llvm.getelementptr %17[%1041] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1039, %1042 {alignment = 1 : i64} : i64, !llvm.ptr
    %1043 = llvm.load %4 : !llvm.ptr -> i32
    %c216_i32_314 = arith.constant 216 : i32
    %1044 = arith.addi %1043, %c216_i32_314 : i32
    %c24_i32_315 = arith.constant 24 : i32
    %1045 = arith.addi %1044, %c24_i32_315 : i32
    %1046 = llvm.load %4 : !llvm.ptr -> i32
    %c184_i32 = arith.constant 184 : i32
    %1047 = arith.addi %1046, %c184_i32 : i32
    %c0_i64_316 = arith.constant 0 : i64
    %1048 = arith.extui %1047 : i32 to i64
    %1049 = arith.addi %1048, %c0_i64_316 : i64
    %1050 = llvm.getelementptr %17[%1049] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1051 = llvm.load volatile %1050 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_317 = arith.constant 0 : i64
    %1052 = arith.extui %1045 : i32 to i64
    %1053 = arith.addi %1052, %c0_i64_317 : i64
    %1054 = llvm.getelementptr %17[%1053] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1051, %1054 {alignment = 1 : i64} : i64, !llvm.ptr
    %1055 = llvm.load %4 : !llvm.ptr -> i32
    %1056 = llvm.load %4 : !llvm.ptr -> i32
    %c160_i64_318 = arith.constant 160 : i64
    %1057 = arith.extui %1056 : i32 to i64
    %1058 = arith.addi %1057, %c160_i64_318 : i64
    %1059 = llvm.getelementptr %17[%1058] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1060 = llvm.load volatile %1059 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c216_i64_319 = arith.constant 216 : i64
    %1061 = arith.extui %1055 : i32 to i64
    %1062 = arith.addi %1061, %c216_i64_319 : i64
    %1063 = llvm.getelementptr %17[%1062] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1060, %1063 {alignment = 1 : i64} : i64, !llvm.ptr
    %1064 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_320 = arith.constant 8 : i32
    %1065 = arith.addi %1064, %c8_i32_320 : i32
    %1066 = llvm.load %4 : !llvm.ptr -> i32
    %c216_i32_321 = arith.constant 216 : i32
    %1067 = arith.addi %1066, %c216_i32_321 : i32
    call @f5(%arg0, %1065, %1067) : (!llvm.ptr, i32, i32) -> ()
    %1068 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i32_322 = arith.constant 152 : i32
    %1069 = arith.addi %1068, %c152_i32_322 : i32
    call @f6(%arg0, %1069) : (!llvm.ptr, i32) -> ()
    %1070 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_323 = arith.constant 0 : i32
    %c112_i64_324 = arith.constant 112 : i64
    %1071 = arith.extui %1070 : i32 to i64
    %1072 = arith.addi %1071, %c112_i64_324 : i64
    %1073 = llvm.getelementptr %17[%1072] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_323, %1073 {alignment = 1 : i64} : i32, !llvm.ptr
    %1074 = llvm.load %4 : !llvm.ptr -> i32
    %1075 = llvm.load %4 : !llvm.ptr -> i32
    %c156_i64_325 = arith.constant 156 : i64
    %1076 = arith.extui %1075 : i32 to i64
    %1077 = arith.addi %1076, %c156_i64_325 : i64
    %1078 = llvm.getelementptr %17[%1077] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1079 = llvm.load volatile %1078 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c120_i64_326 = arith.constant 120 : i64
    %1080 = arith.extui %1074 : i32 to i64
    %1081 = arith.addi %1080, %c120_i64_326 : i64
    %1082 = llvm.getelementptr %17[%1081] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1079, %1082 {alignment = 1 : i64} : i64, !llvm.ptr
    %1083 = llvm.load %4 : !llvm.ptr -> i32
    %1084 = llvm.load %4 : !llvm.ptr -> i32
    %c152_i64_327 = arith.constant 152 : i64
    %1085 = arith.extui %1084 : i32 to i64
    %1086 = arith.addi %1085, %c152_i64_327 : i64
    %1087 = llvm.getelementptr %17[%1086] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1088 = llvm.load volatile %1087 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c116_i64_328 = arith.constant 116 : i64
    %1089 = arith.extui %1083 : i32 to i64
    %1090 = arith.addi %1089, %c116_i64_328 : i64
    %1091 = llvm.getelementptr %17[%1090] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1088, %1091 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb12
  ^bb33:  // pred: ^bb31
    %1092 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i32_329 = arith.constant 304 : i32
    %1093 = arith.addi %1092, %c304_i32_329 : i32
    %1094 = llvm.load %4 : !llvm.ptr -> i32
    %c272_i32_330 = arith.constant 272 : i32
    %1095 = arith.addi %1094, %c272_i32_330 : i32
    call @f99(%arg0, %1093, %1095) : (!llvm.ptr, i32, i32) -> ()
    %1096 = llvm.load %4 : !llvm.ptr -> i32
    %c304_i64_331 = arith.constant 304 : i64
    %1097 = arith.extui %1096 : i32 to i64
    %1098 = arith.addi %1097, %c304_i64_331 : i64
    %1099 = llvm.getelementptr %17[%1098] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1100 = llvm.load volatile %1099 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %1100, %5 : i32, !llvm.ptr
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %1101 = arith.cmpi eq, %1100, %c-2147483638_i32 : i32
    %1102 = arith.extui %1101 : i1 to i32
    %c0_i32_332 = arith.constant 0 : i32
    %1103 = arith.cmpi ne, %1102, %c0_i32_332 : i32
    cf.cond_br %1103, ^bb32, ^bb34
  ^bb34:  // pred: ^bb33
    %1104 = llvm.load %4 : !llvm.ptr -> i32
    %c176_i32 = arith.constant 176 : i32
    %1105 = arith.addi %1104, %c176_i32 : i32
    %1106 = llvm.load %4 : !llvm.ptr -> i32
    %c324_i32 = arith.constant 324 : i32
    %1107 = arith.addi %1106, %c324_i32 : i32
    %c0_i64_333 = arith.constant 0 : i64
    %1108 = arith.extui %1107 : i32 to i64
    %1109 = arith.addi %1108, %c0_i64_333 : i64
    %1110 = llvm.getelementptr %17[%1109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1111 = llvm.load volatile %1110 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_334 = arith.constant 0 : i64
    %1112 = arith.extui %1105 : i32 to i64
    %1113 = arith.addi %1112, %c0_i64_334 : i64
    %1114 = llvm.getelementptr %17[%1113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1111, %1114 {alignment = 1 : i64} : i32, !llvm.ptr
    %1115 = llvm.load %4 : !llvm.ptr -> i32
    %c168_i32 = arith.constant 168 : i32
    %1116 = arith.addi %1115, %c168_i32 : i32
    %1117 = llvm.load %4 : !llvm.ptr -> i32
    %c316_i32 = arith.constant 316 : i32
    %1118 = arith.addi %1117, %c316_i32 : i32
    %c0_i64_335 = arith.constant 0 : i64
    %1119 = arith.extui %1118 : i32 to i64
    %1120 = arith.addi %1119, %c0_i64_335 : i64
    %1121 = llvm.getelementptr %17[%1120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1122 = llvm.load volatile %1121 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_336 = arith.constant 0 : i64
    %1123 = arith.extui %1116 : i32 to i64
    %1124 = arith.addi %1123, %c0_i64_336 : i64
    %1125 = llvm.getelementptr %17[%1124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1122, %1125 {alignment = 1 : i64} : i64, !llvm.ptr
    %1126 = llvm.load %4 : !llvm.ptr -> i32
    %1127 = llvm.load %4 : !llvm.ptr -> i32
    %c308_i64_337 = arith.constant 308 : i64
    %1128 = arith.extui %1127 : i32 to i64
    %1129 = arith.addi %1128, %c308_i64_337 : i64
    %1130 = llvm.getelementptr %17[%1129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %1131 = llvm.load volatile %1130 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c160_i64_338 = arith.constant 160 : i64
    %1132 = arith.extui %1126 : i32 to i64
    %1133 = arith.addi %1132, %c160_i64_338 : i64
    %1134 = llvm.getelementptr %17[%1133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1131, %1134 {alignment = 1 : i64} : i64, !llvm.ptr
    %1135 = llvm.load %4 : !llvm.ptr -> i32
    %1136 = llvm.load %5 : !llvm.ptr -> i32
    %c156_i64_339 = arith.constant 156 : i64
    %1137 = arith.extui %1135 : i32 to i64
    %1138 = arith.addi %1137, %c156_i64_339 : i64
    %1139 = llvm.getelementptr %17[%1138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %1136, %1139 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb28
  }
  func.func @f1(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %9 = arith.cmpi eq, %8, %c-2147483648_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %0 : !llvm.ptr -> i32
    call @f112(%arg0, %12) : (!llvm.ptr, i32) -> ()
    %13 = llvm.load %0 : !llvm.ptr -> i32
    call @f113(%arg0, %13) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  }
  func.func @f2(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %9 = arith.subi %8, %c80_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %7[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c40_i64 = arith.constant 40 : i64
    %16 = arith.extui %10 : i32 to i64
    %17 = arith.addi %16, %c40_i64 : i64
    %18 = llvm.getelementptr %7[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %15, %18 {alignment = 1 : i64} : i64, !llvm.ptr
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %20 = arith.addi %19, %c48_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %21 = arith.addi %20, %c24_i32 : i32
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %23 = arith.addi %22, %c32_i32 : i32
    %c0_i64_2 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64_2 : i64
    %26 = llvm.getelementptr %7[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_3 = arith.constant 0 : i64
    %28 = arith.extui %21 : i32 to i64
    %29 = arith.addi %28, %c0_i64_3 : i64
    %30 = llvm.getelementptr %7[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %27, %30 {alignment = 1 : i64} : i64, !llvm.ptr
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_4 = arith.constant 48 : i32
    %32 = arith.addi %31, %c48_i32_4 : i32
    %c16_i32 = arith.constant 16 : i32
    %33 = arith.addi %32, %c16_i32 : i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_5 = arith.constant 24 : i32
    %35 = arith.addi %34, %c24_i32_5 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_6 : i64
    %38 = llvm.getelementptr %7[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_7 = arith.constant 0 : i64
    %40 = arith.extui %33 : i32 to i64
    %41 = arith.addi %40, %c0_i64_7 : i64
    %42 = llvm.getelementptr %7[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %42 {alignment = 1 : i64} : i64, !llvm.ptr
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_8 = arith.constant 48 : i32
    %44 = arith.addi %43, %c48_i32_8 : i32
    %c8_i32 = arith.constant 8 : i32
    %45 = arith.addi %44, %c8_i32 : i32
    %46 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_9 = arith.constant 16 : i32
    %47 = arith.addi %46, %c16_i32_9 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_10 : i64
    %50 = llvm.getelementptr %7[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %52 = arith.extui %45 : i32 to i64
    %53 = arith.addi %52, %c0_i64_11 : i64
    %54 = llvm.getelementptr %7[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %51, %54 {alignment = 1 : i64} : i64, !llvm.ptr
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c8_i64 : i64
    %59 = llvm.getelementptr %7[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %61 = arith.extui %55 : i32 to i64
    %62 = arith.addi %61, %c48_i64 : i64
    %63 = llvm.getelementptr %7[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_12 = arith.constant 8 : i32
    %65 = arith.addi %64, %c8_i32_12 : i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %67 = arith.addi %66, %c40_i32 : i32
    %68 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_13 = arith.constant 48 : i32
    %69 = arith.addi %68, %c48_i32_13 : i32
    %70 = llvm.load %1 : !llvm.ptr -> i32
    %c80_i64 = arith.constant 80 : i64
    %71 = arith.extui %70 : i32 to i64
    %72 = arith.addi %71, %c80_i64 : i64
    %73 = llvm.getelementptr %7[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %74 = llvm.load volatile %73 {alignment = 1 : i64} : !llvm.ptr -> i8
    %75 = arith.extui %74 : i8 to i32
    call @f10(%arg0, %65, %67, %69, %75) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_14 = arith.constant 40 : i32
    %77 = arith.addi %76, %c40_i32_14 : i32
    call @f9(%arg0, %77) : (!llvm.ptr, i32) -> ()
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_15 = arith.constant 0 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c0_i64_15 : i64
    %81 = llvm.getelementptr %7[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %83 = arith.cmpi eq, %82, %c0_i64_16 : i64
    %84 = arith.extui %83 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %85 = arith.cmpi eq, %84, %c0_i32_17 : i32
    %86 = arith.extui %85 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %87 = arith.cmpi ne, %86, %c0_i32_18 : i32
    cf.cond_br %87, ^bb3, ^bb4
  ^bb2(%88: i32):  // pred: ^bb4
    return %88 : i32
  ^bb3:  // pred: ^bb1
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %c64_i64 = arith.constant 64 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c64_i64 : i64
    %92 = llvm.getelementptr %7[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_19, %92 {alignment = 1 : i64} : i32, !llvm.ptr
    %93 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %c52_i64 = arith.constant 52 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c52_i64 : i64
    %96 = llvm.getelementptr %7[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_20, %96 {alignment = 1 : i64} : i32, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c1048852_i32 = arith.constant 1048852 : i32
    %c48_i64_21 = arith.constant 48 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c48_i64_21 : i64
    %100 = llvm.getelementptr %7[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1048852_i32, %100 {alignment = 1 : i64} : i32, !llvm.ptr
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %c56_i64 = arith.constant 56 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c56_i64 : i64
    %104 = llvm.getelementptr %7[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64, %104 {alignment = 1 : i64} : i64, !llvm.ptr
    %105 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_22 = arith.constant 48 : i32
    %106 = arith.addi %105, %c48_i32_22 : i32
    %c1048940_i32 = arith.constant 1048940 : i32
    call @f156(%arg0, %106, %c1048940_i32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %107 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c0_i64_23 = arith.constant 0 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c0_i64_23 : i64
    %110 = llvm.getelementptr %7[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %110 {alignment = 1 : i64} : i64, !llvm.ptr
    %111 = llvm.load %0 : !llvm.ptr -> i32
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_24 = arith.constant 8 : i64
    %113 = arith.extui %112 : i32 to i64
    %114 = arith.addi %113, %c8_i64_24 : i64
    %115 = llvm.getelementptr %7[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %116 = llvm.load volatile %115 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64_25 = arith.constant 8 : i64
    %117 = arith.extui %111 : i32 to i64
    %118 = arith.addi %117, %c8_i64_25 : i64
    %119 = llvm.getelementptr %7[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %116, %119 {alignment = 1 : i64} : i64, !llvm.ptr
    %120 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_26 = arith.constant 16 : i32
    %121 = arith.addi %120, %c16_i32_26 : i32
    %122 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_27 = arith.constant 8 : i32
    %123 = arith.addi %122, %c8_i32_27 : i32
    %c8_i32_28 = arith.constant 8 : i32
    %124 = arith.addi %123, %c8_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c0_i64_29 : i64
    %127 = llvm.getelementptr %7[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %128 = llvm.load volatile %127 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %129 = arith.extui %121 : i32 to i64
    %130 = arith.addi %129, %c0_i64_30 : i64
    %131 = llvm.getelementptr %7[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %128, %131 {alignment = 1 : i64} : i64, !llvm.ptr
    %132 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_31 = arith.constant 24 : i32
    %133 = arith.addi %132, %c24_i32_31 : i32
    %134 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_32 = arith.constant 8 : i32
    %135 = arith.addi %134, %c8_i32_32 : i32
    %c16_i32_33 = arith.constant 16 : i32
    %136 = arith.addi %135, %c16_i32_33 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %137 = arith.extui %136 : i32 to i64
    %138 = arith.addi %137, %c0_i64_34 : i64
    %139 = llvm.getelementptr %7[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = llvm.load volatile %139 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_35 = arith.constant 0 : i64
    %141 = arith.extui %133 : i32 to i64
    %142 = arith.addi %141, %c0_i64_35 : i64
    %143 = llvm.getelementptr %7[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %140, %143 {alignment = 1 : i64} : i64, !llvm.ptr
    %144 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32_36 = arith.constant 32 : i32
    %145 = arith.addi %144, %c32_i32_36 : i32
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_37 = arith.constant 8 : i32
    %147 = arith.addi %146, %c8_i32_37 : i32
    %c24_i32_38 = arith.constant 24 : i32
    %148 = arith.addi %147, %c24_i32_38 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c0_i64_39 : i64
    %151 = llvm.getelementptr %7[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_40 = arith.constant 0 : i64
    %153 = arith.extui %145 : i32 to i64
    %154 = arith.addi %153, %c0_i64_40 : i64
    %155 = llvm.getelementptr %7[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %152, %155 {alignment = 1 : i64} : i64, !llvm.ptr
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_41 = arith.constant 80 : i32
    %157 = arith.addi %156, %c80_i32_41 : i32
    llvm.store %157, %4 : i32, !llvm.ptr
    %158 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_42 = arith.constant 8 : i32
    %159 = arith.addi %158, %c8_i32_42 : i32
    cf.br ^bb2(%159 : i32)
  }
  func.func @f3(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %12 = arith.subi %11, %c96_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %14 = arith.addi %13, %c24_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %c0_i64_5 = arith.constant 0 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c0_i64_5 : i64
    %17 = llvm.getelementptr %10[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %17 {alignment = 1 : i64} : i64, !llvm.ptr
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %19 = arith.addi %18, %c16_i32 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %c0_i64_7 = arith.constant 0 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c0_i64_7 : i64
    %22 = llvm.getelementptr %10[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_6, %22 {alignment = 1 : i64} : i64, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %24 = arith.addi %23, %c8_i32 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_9 : i64
    %27 = llvm.getelementptr %10[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_8, %27 {alignment = 1 : i64} : i64, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_10 = arith.constant 0 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c0_i64_11 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_10, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %33 = arith.addi %32, %c64_i32 : i32
    %c24_i32_12 = arith.constant 24 : i32
    %34 = arith.addi %33, %c24_i32_12 : i32
    %35 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_13 = arith.constant 24 : i32
    %36 = arith.addi %35, %c24_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c0_i64_14 : i64
    %39 = llvm.getelementptr %10[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %41 = arith.extui %34 : i32 to i64
    %42 = arith.addi %41, %c0_i64_15 : i64
    %43 = llvm.getelementptr %10[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i64, !llvm.ptr
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_16 = arith.constant 64 : i32
    %45 = arith.addi %44, %c64_i32_16 : i32
    %c16_i32_17 = arith.constant 16 : i32
    %46 = arith.addi %45, %c16_i32_17 : i32
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_18 = arith.constant 16 : i32
    %48 = arith.addi %47, %c16_i32_18 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_19 : i64
    %51 = llvm.getelementptr %10[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_20 = arith.constant 0 : i64
    %53 = arith.extui %46 : i32 to i64
    %54 = arith.addi %53, %c0_i64_20 : i64
    %55 = llvm.getelementptr %10[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_21 = arith.constant 64 : i32
    %57 = arith.addi %56, %c64_i32_21 : i32
    %c8_i32_22 = arith.constant 8 : i32
    %58 = arith.addi %57, %c8_i32_22 : i32
    %59 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_23 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64_24 : i64
    %63 = llvm.getelementptr %10[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %65 = arith.extui %58 : i32 to i64
    %66 = arith.addi %65, %c0_i64_25 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i64, !llvm.ptr
    %68 = llvm.load %2 : !llvm.ptr -> i32
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c0_i64_26 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c64_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    llvm.store %c0_i32_27, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %78 = arith.addi %77, %c32_i32 : i32
    %c24_i32_28 = arith.constant 24 : i32
    %79 = arith.addi %78, %c24_i32_28 : i32
    %80 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_29 = arith.constant 64 : i32
    %81 = arith.addi %80, %c64_i32_29 : i32
    %c24_i32_30 = arith.constant 24 : i32
    %82 = arith.addi %81, %c24_i32_30 : i32
    llvm.store %82, %1 : i32, !llvm.ptr
    %c0_i64_31 = arith.constant 0 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c0_i64_31 : i64
    %85 = llvm.getelementptr %10[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_32 = arith.constant 0 : i64
    %87 = arith.extui %79 : i32 to i64
    %88 = arith.addi %87, %c0_i64_32 : i64
    %89 = llvm.getelementptr %10[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %86, %89 {alignment = 1 : i64} : i64, !llvm.ptr
    %90 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_33 = arith.constant 32 : i32
    %91 = arith.addi %90, %c32_i32_33 : i32
    %c16_i32_34 = arith.constant 16 : i32
    %92 = arith.addi %91, %c16_i32_34 : i32
    %93 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_35 = arith.constant 64 : i32
    %94 = arith.addi %93, %c64_i32_35 : i32
    %c16_i32_36 = arith.constant 16 : i32
    %95 = arith.addi %94, %c16_i32_36 : i32
    llvm.store %95, %3 : i32, !llvm.ptr
    %c0_i64_37 = arith.constant 0 : i64
    %96 = arith.extui %95 : i32 to i64
    %97 = arith.addi %96, %c0_i64_37 : i64
    %98 = llvm.getelementptr %10[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %99 = llvm.load volatile %98 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_38 = arith.constant 0 : i64
    %100 = arith.extui %92 : i32 to i64
    %101 = arith.addi %100, %c0_i64_38 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %99, %102 {alignment = 1 : i64} : i64, !llvm.ptr
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_39 = arith.constant 32 : i32
    %104 = arith.addi %103, %c32_i32_39 : i32
    %c8_i32_40 = arith.constant 8 : i32
    %105 = arith.addi %104, %c8_i32_40 : i32
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_41 = arith.constant 64 : i32
    %107 = arith.addi %106, %c64_i32_41 : i32
    %c8_i32_42 = arith.constant 8 : i32
    %108 = arith.addi %107, %c8_i32_42 : i32
    llvm.store %108, %4 : i32, !llvm.ptr
    %c0_i64_43 = arith.constant 0 : i64
    %109 = arith.extui %108 : i32 to i64
    %110 = arith.addi %109, %c0_i64_43 : i64
    %111 = llvm.getelementptr %10[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %112 = llvm.load volatile %111 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_44 = arith.constant 0 : i64
    %113 = arith.extui %105 : i32 to i64
    %114 = arith.addi %113, %c0_i64_44 : i64
    %115 = llvm.getelementptr %10[%114] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %112, %115 {alignment = 1 : i64} : i64, !llvm.ptr
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %117 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i64_45 = arith.constant 64 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c64_i64_45 : i64
    %120 = llvm.getelementptr %10[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %122 = arith.extui %116 : i32 to i64
    %123 = arith.addi %122, %c32_i64 : i64
    %124 = llvm.getelementptr %10[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %124 {alignment = 1 : i64} : i64, !llvm.ptr
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_46 = arith.constant 32 : i32
    %126 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_47 = arith.constant 32 : i32
    %127 = arith.addi %126, %c32_i32_47 : i32
    %c32_i32_48 = arith.constant 32 : i32
    %c1048820_i32 = arith.constant 1048820 : i32
    call @f115(%arg0, %125, %c32_i32_46, %127, %c32_i32_48, %c1048820_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %128 = llvm.load %4 : !llvm.ptr -> i32
    %129 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_49 = arith.constant 8 : i32
    %130 = arith.addi %129, %c8_i32_49 : i32
    %c0_i64_50 = arith.constant 0 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c0_i64_50 : i64
    %133 = llvm.getelementptr %10[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_51 = arith.constant 0 : i64
    %135 = arith.extui %128 : i32 to i64
    %136 = arith.addi %135, %c0_i64_51 : i64
    %137 = llvm.getelementptr %10[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %134, %137 {alignment = 1 : i64} : i64, !llvm.ptr
    %138 = llvm.load %3 : !llvm.ptr -> i32
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_52 = arith.constant 16 : i32
    %140 = arith.addi %139, %c16_i32_52 : i32
    %c0_i64_53 = arith.constant 0 : i64
    %141 = arith.extui %140 : i32 to i64
    %142 = arith.addi %141, %c0_i64_53 : i64
    %143 = llvm.getelementptr %10[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %144 = llvm.load volatile %143 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_54 = arith.constant 0 : i64
    %145 = arith.extui %138 : i32 to i64
    %146 = arith.addi %145, %c0_i64_54 : i64
    %147 = llvm.getelementptr %10[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %144, %147 {alignment = 1 : i64} : i64, !llvm.ptr
    %148 = llvm.load %1 : !llvm.ptr -> i32
    %149 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_55 = arith.constant 24 : i32
    %150 = arith.addi %149, %c24_i32_55 : i32
    %c0_i64_56 = arith.constant 0 : i64
    %151 = arith.extui %150 : i32 to i64
    %152 = arith.addi %151, %c0_i64_56 : i64
    %153 = llvm.getelementptr %10[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_57 = arith.constant 0 : i64
    %155 = arith.extui %148 : i32 to i64
    %156 = arith.addi %155, %c0_i64_57 : i64
    %157 = llvm.getelementptr %10[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %154, %157 {alignment = 1 : i64} : i64, !llvm.ptr
    %158 = llvm.load %2 : !llvm.ptr -> i32
    %159 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_58 = arith.constant 0 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c0_i64_58 : i64
    %162 = llvm.getelementptr %10[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64_59 = arith.constant 64 : i64
    %164 = arith.extui %158 : i32 to i64
    %165 = arith.addi %164, %c64_i64_59 : i64
    %166 = llvm.getelementptr %10[%165] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %163, %166 {alignment = 1 : i64} : i64, !llvm.ptr
    %167 = llvm.load %0 : !llvm.ptr -> i32
    %168 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_60 = arith.constant 64 : i32
    %169 = arith.addi %168, %c64_i32_60 : i32
    call @f4(%arg0, %167, %169) : (!llvm.ptr, i32, i32) -> ()
    %170 = llvm.load %2 : !llvm.ptr -> i32
    %c96_i32_61 = arith.constant 96 : i32
    %171 = arith.addi %170, %c96_i32_61 : i32
    llvm.store %171, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %172 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_62 = arith.constant 64 : i32
    %173 = arith.addi %172, %c64_i32_62 : i32
    %174 = llvm.load %1 : !llvm.ptr -> i32
    %175 = arith.addi %173, %174 : i32
    llvm.store %175, %3 : i32, !llvm.ptr
    %c0_i64_63 = arith.constant 0 : i64
    %176 = arith.extui %175 : i32 to i64
    %177 = arith.addi %176, %c0_i64_63 : i64
    %178 = llvm.getelementptr %10[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %179 = llvm.load volatile %178 {alignment = 1 : i64} : !llvm.ptr -> i8
    %180 = arith.extui %179 : i8 to i32
    llvm.store %180, %4 : i32, !llvm.ptr
    %181 = llvm.load %3 : !llvm.ptr -> i32
    %182 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_64 = arith.constant 64 : i32
    %183 = arith.addi %182, %c64_i32_64 : i32
    %184 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %185 = arith.xori %184, %c31_i32 : i32
    %186 = arith.addi %183, %185 : i32
    llvm.store %186, %5 : i32, !llvm.ptr
    %c0_i64_65 = arith.constant 0 : i64
    %187 = arith.extui %186 : i32 to i64
    %188 = arith.addi %187, %c0_i64_65 : i64
    %189 = llvm.getelementptr %10[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %190 = llvm.load volatile %189 {alignment = 1 : i64} : !llvm.ptr -> i8
    %191 = arith.extui %190 : i8 to i32
    %c0_i64_66 = arith.constant 0 : i64
    %192 = arith.extui %181 : i32 to i64
    %193 = arith.addi %192, %c0_i64_66 : i64
    %194 = llvm.getelementptr %10[%193] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %195 = arith.trunci %191 : i32 to i8
    llvm.store volatile %195, %194 {alignment = 1 : i64} : i8, !llvm.ptr
    %196 = llvm.load %5 : !llvm.ptr -> i32
    %197 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_67 = arith.constant 0 : i64
    %198 = arith.extui %196 : i32 to i64
    %199 = arith.addi %198, %c0_i64_67 : i64
    %200 = llvm.getelementptr %10[%199] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %201 = arith.trunci %197 : i32 to i8
    llvm.store volatile %201, %200 {alignment = 1 : i64} : i8, !llvm.ptr
    %202 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_68 = arith.constant 1 : i32
    %203 = arith.addi %202, %c1_i32_68 : i32
    llvm.store %203, %1 : i32, !llvm.ptr
    %c16_i32_69 = arith.constant 16 : i32
    %204 = arith.cmpi eq, %203, %c16_i32_69 : i32
    %205 = arith.extui %204 : i1 to i32
    %c0_i32_70 = arith.constant 0 : i32
    %206 = arith.cmpi eq, %205, %c0_i32_70 : i32
    %207 = arith.extui %206 : i1 to i32
    %c0_i32_71 = arith.constant 0 : i32
    %208 = arith.cmpi ne, %207, %c0_i32_71 : i32
    cf.cond_br %208, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f4(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %8 : i64, !llvm.ptr
    %9 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %15 = arith.subi %14, %c64_i32 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %17 = arith.addi %16, %c24_i32 : i32
    %c1_i32_8 = arith.constant 1 : i32
    %c0_i32_9 = arith.constant 0 : i32
    call @f90(%arg0, %17, %c1_i32_8, %c0_i32_9) : (!llvm.ptr, i32, i32, i32) -> ()
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c28_i64 : i64
    %21 = llvm.getelementptr %13[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %22, %3 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c24_i64 : i64
    %26 = llvm.getelementptr %13[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_10 : i32
    cf.cond_br %28, ^bb4, ^bb5
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // pred: ^bb5
    %29 = llvm.load %5 : !llvm.ptr -> i32
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c32_i64 : i64
    %33 = llvm.getelementptr %13[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %29, %34) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_11 = arith.constant 32 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c32_i64_11 : i64
    %39 = llvm.getelementptr %13[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %35, %40) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_12 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_12) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_13 = arith.constant 32 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c32_i64_13 : i64
    %44 = llvm.getelementptr %13[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %45, %4 : i32, !llvm.ptr
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_14 = arith.constant 24 : i32
    %47 = arith.addi %46, %c24_i32_14 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_15 = arith.constant 0 : i32
    call @f89(%arg0, %47, %c4_i32, %c0_i32_15) : (!llvm.ptr, i32, i32, i32) -> ()
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_16 = arith.constant 28 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c28_i64_16 : i64
    %51 = llvm.getelementptr %13[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %52, %5 : i32, !llvm.ptr
    %53 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_17 = arith.constant 24 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c24_i64_17 : i64
    %56 = llvm.getelementptr %13[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_18 : i32
    cf.cond_br %58, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %60 = arith.addi %59, %c16_i32 : i32
    llvm.store %60, %6 : i32, !llvm.ptr
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_19 = arith.constant 32 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c32_i64_19 : i64
    %64 = llvm.getelementptr %13[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %66 = arith.extui %60 : i32 to i64
    %67 = arith.addi %66, %c0_i64_20 : i64
    %68 = llvm.getelementptr %13[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %65, %68 {alignment = 1 : i64} : i32, !llvm.ptr
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %70 = arith.addi %69, %c8_i32 : i32
    llvm.store %70, %7 : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %c0_i64_22 = arith.constant 0 : i64
    %71 = arith.extui %70 : i32 to i64
    %72 = arith.addi %71, %c0_i64_22 : i64
    %73 = llvm.getelementptr %13[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_21, %73 {alignment = 1 : i64} : i32, !llvm.ptr
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_23 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c20_i64 : i64
    %77 = llvm.getelementptr %13[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_23, %77 {alignment = 1 : i64} : i32, !llvm.ptr
    %78 = llvm.load %2 : !llvm.ptr -> i32
    %79 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %80 = arith.extui %78 : i32 to i64
    %81 = arith.addi %80, %c12_i64 : i64
    %82 = llvm.getelementptr %13[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %79, %82 {alignment = 1 : i64} : i32, !llvm.ptr
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %84 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %85 = arith.extui %83 : i32 to i64
    %86 = arith.addi %85, %c4_i64 : i64
    %87 = llvm.getelementptr %13[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %84, %87 {alignment = 1 : i64} : i32, !llvm.ptr
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %90 = arith.extui %88 : i32 to i64
    %91 = arith.addi %90, %c0_i64_24 : i64
    %92 = llvm.getelementptr %13[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %89, %92 {alignment = 1 : i64} : i32, !llvm.ptr
    %93 = llvm.load %1 : !llvm.ptr -> i32
    %94 = llvm.load %2 : !llvm.ptr -> i32
    call @f101(%arg0, %93, %94) : (!llvm.ptr, i32, i32) -> ()
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_25 = arith.constant 24 : i32
    %96 = arith.addi %95, %c24_i32_25 : i32
    %c16_i32_26 = arith.constant 16 : i32
    %97 = arith.addi %96, %c16_i32_26 : i32
    %98 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_27 = arith.constant 0 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c0_i64_27 : i64
    %101 = llvm.getelementptr %13[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_28 = arith.constant 0 : i64
    %103 = arith.extui %97 : i32 to i64
    %104 = arith.addi %103, %c0_i64_28 : i64
    %105 = llvm.getelementptr %13[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %102, %105 {alignment = 1 : i64} : i64, !llvm.ptr
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_29 = arith.constant 24 : i32
    %107 = arith.addi %106, %c24_i32_29 : i32
    %c8_i32_30 = arith.constant 8 : i32
    %108 = arith.addi %107, %c8_i32_30 : i32
    %109 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c0_i64_31 : i64
    %112 = llvm.getelementptr %13[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = llvm.load volatile %112 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_32 = arith.constant 0 : i64
    %114 = arith.extui %108 : i32 to i64
    %115 = arith.addi %114, %c0_i64_32 : i64
    %116 = llvm.getelementptr %13[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %113, %116 {alignment = 1 : i64} : i64, !llvm.ptr
    %117 = llvm.load %2 : !llvm.ptr -> i32
    %118 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %119 = arith.extui %118 : i32 to i64
    %120 = arith.addi %119, %c0_i64_33 : i64
    %121 = llvm.getelementptr %13[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = llvm.load volatile %121 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %122, %8 : i64, !llvm.ptr
    %c24_i64_34 = arith.constant 24 : i64
    %123 = arith.extui %117 : i32 to i64
    %124 = arith.addi %123, %c24_i64_34 : i64
    %125 = llvm.getelementptr %13[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %122, %125 {alignment = 1 : i64} : i64, !llvm.ptr
    %126 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %127 = arith.addi %126, %c48_i32 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %128 = arith.addi %127, %c8_i32_35 : i32
    %129 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %130 = arith.extui %129 : i32 to i64
    %131 = arith.addi %130, %c0_i64_36 : i64
    %132 = llvm.getelementptr %13[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %133 = llvm.load volatile %132 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %134 = arith.extui %128 : i32 to i64
    %135 = arith.addi %134, %c0_i64_37 : i64
    %136 = llvm.getelementptr %13[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %133, %136 {alignment = 1 : i64} : i32, !llvm.ptr
    %137 = llvm.load %2 : !llvm.ptr -> i32
    %138 = llvm.load %8 : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %139 = arith.extui %137 : i32 to i64
    %140 = arith.addi %139, %c48_i64 : i64
    %141 = llvm.getelementptr %13[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %141 {alignment = 1 : i64} : i64, !llvm.ptr
    %142 = llvm.load %2 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %143 = arith.addi %142, %c36_i32 : i32
    llvm.store %143, %7 : i32, !llvm.ptr
    call @f94(%arg0, %143) : (!llvm.ptr, i32) -> ()
    %144 = llvm.load %7 : !llvm.ptr -> i32
    call @f96(%arg0, %144) : (!llvm.ptr, i32) -> ()
    %145 = llvm.load %0 : !llvm.ptr -> i32
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_38 = arith.constant 48 : i32
    %147 = arith.addi %146, %c48_i32_38 : i32
    call @f86(%arg0, %145, %147) : (!llvm.ptr, i32, i32) -> ()
    %148 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_39 = arith.constant 64 : i32
    %149 = arith.addi %148, %c64_i32_39 : i32
    llvm.store %149, %10 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f5(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %9 = arith.subi %8, %c48_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c40_i64 = arith.constant 40 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c40_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %13 {alignment = 1 : i64} : i64, !llvm.ptr
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c0_i64 : i64
    %18 = llvm.getelementptr %7[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %20 = arith.extui %14 : i32 to i64
    %21 = arith.addi %20, %c48_i64 : i64
    %22 = llvm.getelementptr %7[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %19, %22 {alignment = 1 : i64} : i64, !llvm.ptr
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %24 = arith.addi %23, %c56_i32 : i32
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %26 = arith.addi %25, %c8_i32 : i32
    %c0_i64_2 = arith.constant 0 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c0_i64_2 : i64
    %29 = llvm.getelementptr %7[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_3 = arith.constant 0 : i64
    %31 = arith.extui %24 : i32 to i64
    %32 = arith.addi %31, %c0_i64_3 : i64
    %33 = llvm.getelementptr %7[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %30, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %35 = arith.addi %34, %c64_i32 : i32
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %37 = arith.addi %36, %c16_i32 : i32
    %c0_i64_4 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_4 : i64
    %40 = llvm.getelementptr %7[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_5 = arith.constant 0 : i64
    %42 = arith.extui %35 : i32 to i64
    %43 = arith.addi %42, %c0_i64_5 : i64
    %44 = llvm.getelementptr %7[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %46 = arith.addi %45, %c72_i32 : i32
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %48 = arith.addi %47, %c24_i32 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_6 : i64
    %51 = llvm.getelementptr %7[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_7 = arith.constant 0 : i64
    %53 = arith.extui %46 : i32 to i64
    %54 = arith.addi %53, %c0_i64_7 : i64
    %55 = llvm.getelementptr %7[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64_8 : i64
    %60 = llvm.getelementptr %7[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64 = arith.constant 8 : i64
    %62 = arith.extui %56 : i32 to i64
    %63 = arith.addi %62, %c8_i64 : i64
    %64 = llvm.getelementptr %7[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %61, %64 {alignment = 1 : i64} : i64, !llvm.ptr
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_9 = arith.constant 16 : i32
    %66 = arith.addi %65, %c16_i32_9 : i32
    %c24_i32_10 = arith.constant 24 : i32
    %67 = arith.addi %66, %c24_i32_10 : i32
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %69 = arith.addi %68, %c32_i32 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c0_i64_11 : i64
    %72 = llvm.getelementptr %7[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    %74 = arith.extui %67 : i32 to i64
    %75 = arith.addi %74, %c0_i64_12 : i64
    %76 = llvm.getelementptr %7[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i64, !llvm.ptr
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_13 = arith.constant 16 : i32
    %78 = arith.addi %77, %c16_i32_13 : i32
    %c16_i32_14 = arith.constant 16 : i32
    %79 = arith.addi %78, %c16_i32_14 : i32
    %80 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_15 = arith.constant 24 : i32
    %81 = arith.addi %80, %c24_i32_15 : i32
    %c0_i64_16 = arith.constant 0 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c0_i64_16 : i64
    %84 = llvm.getelementptr %7[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %85 = llvm.load volatile %84 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %86 = arith.extui %79 : i32 to i64
    %87 = arith.addi %86, %c0_i64_17 : i64
    %88 = llvm.getelementptr %7[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i64, !llvm.ptr
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_18 = arith.constant 16 : i32
    %90 = arith.addi %89, %c16_i32_18 : i32
    %c8_i32_19 = arith.constant 8 : i32
    %91 = arith.addi %90, %c8_i32_19 : i32
    %92 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_20 = arith.constant 16 : i32
    %93 = arith.addi %92, %c16_i32_20 : i32
    %c0_i64_21 = arith.constant 0 : i64
    %94 = arith.extui %93 : i32 to i64
    %95 = arith.addi %94, %c0_i64_21 : i64
    %96 = llvm.getelementptr %7[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %97 = llvm.load volatile %96 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_22 = arith.constant 0 : i64
    %98 = arith.extui %91 : i32 to i64
    %99 = arith.addi %98, %c0_i64_22 : i64
    %100 = llvm.getelementptr %7[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %97, %100 {alignment = 1 : i64} : i64, !llvm.ptr
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %102 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_23 = arith.constant 8 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c8_i64_23 : i64
    %105 = llvm.getelementptr %7[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %107 = arith.extui %101 : i32 to i64
    %108 = arith.addi %107, %c16_i64 : i64
    %109 = llvm.getelementptr %7[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %106, %109 {alignment = 1 : i64} : i64, !llvm.ptr
    %110 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_24 = arith.constant 8 : i32
    %111 = arith.addi %110, %c8_i32_24 : i32
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_25 = arith.constant 16 : i32
    %113 = arith.addi %112, %c16_i32_25 : i32
    %114 = llvm.load %0 : !llvm.ptr -> i32
    %115 = llvm.load %1 : !llvm.ptr -> i32
    call @f8(%arg0, %111, %113, %114, %115) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_26 = arith.constant 8 : i32
    %117 = arith.addi %116, %c8_i32_26 : i32
    call @f9(%arg0, %117) : (!llvm.ptr, i32) -> ()
    %118 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_27 = arith.constant 48 : i32
    %119 = arith.addi %118, %c48_i32_27 : i32
    llvm.store %119, %4 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f6(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %8 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %13 = arith.subi %12, %c64_i32 : i32
    llvm.store %13, %1 : i32, !llvm.ptr
    llvm.store %13, %8 : i32, !llvm.ptr
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %15 = arith.addi %14, %c24_i32 : i32
    %c0_i32_6 = arith.constant 0 : i32
    %c0_i32_7 = arith.constant 0 : i32
    call @f90(%arg0, %15, %c0_i32_6, %c0_i32_7) : (!llvm.ptr, i32, i32, i32) -> ()
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c28_i64 : i64
    %19 = llvm.getelementptr %11[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load volatile %19 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %20, %2 : i32, !llvm.ptr
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c24_i64 : i64
    %24 = llvm.getelementptr %11[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load volatile %24 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_8 : i32
    cf.cond_br %26, ^bb4, ^bb5
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // pred: ^bb5
    %27 = llvm.load %4 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c32_i64 : i64
    %31 = llvm.getelementptr %11[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %27, %32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i64_9 = arith.constant 32 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c32_i64_9 : i64
    %37 = llvm.getelementptr %11[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %33, %38) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_10 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_10) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i64_11 = arith.constant 32 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c32_i64_11 : i64
    %42 = llvm.getelementptr %11[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %43, %3 : i32, !llvm.ptr
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_12 = arith.constant 24 : i32
    %45 = arith.addi %44, %c24_i32_12 : i32
    %c4_i32 = arith.constant 4 : i32
    %c0_i32_13 = arith.constant 0 : i32
    call @f89(%arg0, %45, %c4_i32, %c0_i32_13) : (!llvm.ptr, i32, i32, i32) -> ()
    %46 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64_14 = arith.constant 28 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c28_i64_14 : i64
    %49 = llvm.getelementptr %11[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %50, %4 : i32, !llvm.ptr
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64_15 = arith.constant 24 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c24_i64_15 : i64
    %54 = llvm.getelementptr %11[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %56 = arith.cmpi ne, %55, %c0_i32_16 : i32
    cf.cond_br %56, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c20_i64 : i64
    %60 = llvm.getelementptr %11[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_17, %60 {alignment = 1 : i64} : i32, !llvm.ptr
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i64_18 = arith.constant 32 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c32_i64_18 : i64
    %65 = llvm.getelementptr %11[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %66, %5 : i32, !llvm.ptr
    %c16_i64 = arith.constant 16 : i64
    %67 = arith.extui %61 : i32 to i64
    %68 = arith.addi %67, %c16_i64 : i64
    %69 = llvm.getelementptr %11[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %66, %69 {alignment = 1 : i64} : i32, !llvm.ptr
    %70 = llvm.load %1 : !llvm.ptr -> i32
    %71 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %72 = arith.extui %70 : i32 to i64
    %73 = arith.addi %72, %c12_i64 : i64
    %74 = llvm.getelementptr %11[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %71, %74 {alignment = 1 : i64} : i32, !llvm.ptr
    %75 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %c8_i64 = arith.constant 8 : i64
    %76 = arith.extui %75 : i32 to i64
    %77 = arith.addi %76, %c8_i64 : i64
    %78 = llvm.getelementptr %11[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_19, %78 {alignment = 1 : i64} : i32, !llvm.ptr
    %79 = llvm.load %1 : !llvm.ptr -> i32
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c4_i64 : i64
    %83 = llvm.getelementptr %11[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    %84 = llvm.load %1 : !llvm.ptr -> i32
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c0_i64_20 : i64
    %88 = llvm.getelementptr %11[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %89 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_21 : i32
    cf.cond_br %90, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %91 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_22 = arith.constant 0 : i32
    %c0_i64_23 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_23 : i64
    %94 = llvm.getelementptr %11[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_22, %94 {alignment = 1 : i64} : i32, !llvm.ptr
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_24 = arith.constant 0 : i32
    %c20_i64_25 = arith.constant 20 : i64
    %96 = arith.extui %95 : i32 to i64
    %97 = arith.addi %96, %c20_i64_25 : i64
    %98 = llvm.getelementptr %11[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_24, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_26 = arith.constant 24 : i32
    %100 = arith.addi %99, %c24_i32_26 : i32
    %c16_i32 = arith.constant 16 : i32
    %101 = arith.addi %100, %c16_i32 : i32
    %102 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_27 = arith.constant 16 : i32
    %103 = arith.addi %102, %c16_i32_27 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_28 : i64
    %106 = llvm.getelementptr %11[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_29 = arith.constant 0 : i64
    %108 = arith.extui %101 : i32 to i64
    %109 = arith.addi %108, %c0_i64_29 : i64
    %110 = llvm.getelementptr %11[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %107, %110 {alignment = 1 : i64} : i64, !llvm.ptr
    %111 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_30 = arith.constant 24 : i32
    %112 = arith.addi %111, %c24_i32_30 : i32
    %c8_i32 = arith.constant 8 : i32
    %113 = arith.addi %112, %c8_i32 : i32
    %114 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_31 = arith.constant 8 : i32
    %115 = arith.addi %114, %c8_i32_31 : i32
    llvm.store %115, %4 : i32, !llvm.ptr
    %c0_i64_32 = arith.constant 0 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c0_i64_32 : i64
    %118 = llvm.getelementptr %11[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    %120 = arith.extui %113 : i32 to i64
    %121 = arith.addi %120, %c0_i64_33 : i64
    %122 = llvm.getelementptr %11[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %119, %122 {alignment = 1 : i64} : i64, !llvm.ptr
    %123 = llvm.load %1 : !llvm.ptr -> i32
    %124 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c0_i64_34 : i64
    %127 = llvm.getelementptr %11[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %128 = llvm.load volatile %127 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %128, %6 : i64, !llvm.ptr
    %c24_i64_35 = arith.constant 24 : i64
    %129 = arith.extui %123 : i32 to i64
    %130 = arith.addi %129, %c24_i64_35 : i64
    %131 = llvm.getelementptr %11[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %128, %131 {alignment = 1 : i64} : i64, !llvm.ptr
    %132 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %133 = arith.addi %132, %c48_i32 : i32
    %c8_i32_36 = arith.constant 8 : i32
    %134 = arith.addi %133, %c8_i32_36 : i32
    %135 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %136 = arith.extui %135 : i32 to i64
    %137 = arith.addi %136, %c0_i64_37 : i64
    %138 = llvm.getelementptr %11[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load volatile %138 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_38 = arith.constant 0 : i64
    %140 = arith.extui %134 : i32 to i64
    %141 = arith.addi %140, %c0_i64_38 : i64
    %142 = llvm.getelementptr %11[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %139, %142 {alignment = 1 : i64} : i32, !llvm.ptr
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %144 = llvm.load %6 : !llvm.ptr -> i64
    %c48_i64 = arith.constant 48 : i64
    %145 = arith.extui %143 : i32 to i64
    %146 = arith.addi %145, %c48_i64 : i64
    %147 = llvm.getelementptr %11[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %144, %147 {alignment = 1 : i64} : i64, !llvm.ptr
    %148 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_39 = arith.constant 24 : i32
    %149 = arith.addi %148, %c24_i32_39 : i32
    %c12_i32 = arith.constant 12 : i32
    %150 = arith.addi %149, %c12_i32 : i32
    llvm.store %150, %4 : i32, !llvm.ptr
    call @f94(%arg0, %150) : (!llvm.ptr, i32) -> ()
    %151 = llvm.load %4 : !llvm.ptr -> i32
    call @f96(%arg0, %151) : (!llvm.ptr, i32) -> ()
    %152 = llvm.load %0 : !llvm.ptr -> i32
    %153 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32_40 = arith.constant 48 : i32
    %154 = arith.addi %153, %c48_i32_40 : i32
    call @f86(%arg0, %152, %154) : (!llvm.ptr, i32, i32) -> ()
    %155 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_41 = arith.constant 64 : i32
    %156 = arith.addi %155, %c64_i32_41 : i32
    llvm.store %156, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb8:  // pred: ^bb6
    %157 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_42 = arith.constant 12 : i32
    %158 = arith.addi %157, %c12_i32_42 : i32
    call @f92(%arg0, %158) : (!llvm.ptr, i32) -> ()
    %159 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64_43 = arith.constant 16 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c16_i64_43 : i64
    %162 = llvm.getelementptr %11[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %163, %5 : i32, !llvm.ptr
    cf.br ^bb7
  }
  func.func @f7(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %9 = arith.cmpi eq, %8, %c2_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %13 = arith.addi %12, %c4_i32 : i32
    llvm.store %13, %0 : i32, !llvm.ptr
    call @f112(%arg0, %13) : (!llvm.ptr, i32) -> ()
    %14 = llvm.load %0 : !llvm.ptr -> i32
    call @f113(%arg0, %14) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  }
  func.func @f8(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %8 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %14 = arith.subi %13, %c32_i32 : i32
    llvm.store %14, %4 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %15 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %16 = arith.addi %15, %c24_i32 : i32
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_7 = arith.constant 24 : i32
    %18 = arith.addi %17, %c24_i32_7 : i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %12[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_8 = arith.constant 0 : i64
    %23 = arith.extui %16 : i32 to i64
    %24 = arith.addi %23, %c0_i64_8 : i64
    %25 = llvm.getelementptr %12[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i64, !llvm.ptr
    %26 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %27 = arith.addi %26, %c16_i32 : i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_9 = arith.constant 16 : i32
    %29 = arith.addi %28, %c16_i32_9 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64_10 : i64
    %32 = llvm.getelementptr %12[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %34 = arith.extui %27 : i32 to i64
    %35 = arith.addi %34, %c0_i64_11 : i64
    %36 = llvm.getelementptr %12[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i64, !llvm.ptr
    %37 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %38 = arith.addi %37, %c8_i32 : i32
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_12 = arith.constant 8 : i32
    %40 = arith.addi %39, %c8_i32_12 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c0_i64_13 : i64
    %43 = llvm.getelementptr %12[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_14 = arith.constant 0 : i64
    %45 = arith.extui %38 : i32 to i64
    %46 = arith.addi %45, %c0_i64_14 : i64
    %47 = llvm.getelementptr %12[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i64, !llvm.ptr
    %48 = llvm.load %4 : !llvm.ptr -> i32
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_15 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64_15 : i64
    %52 = llvm.getelementptr %12[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %54 = arith.extui %48 : i32 to i64
    %55 = arith.addi %54, %c0_i64_16 : i64
    %56 = llvm.getelementptr %12[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    llvm.store %c0_i32_17, %3 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %59 = llvm.load %4 : !llvm.ptr -> i32
    call @f71(%arg0, %57, %58, %59) : (!llvm.ptr, i32, i32, i32) -> ()
    %60 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_18 = arith.constant 32 : i32
    %61 = arith.addi %60, %c32_i32_18 : i32
    llvm.store %61, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %62 = llvm.load %4 : !llvm.ptr -> i32
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = arith.addi %62, %63 : i32
    llvm.store %64, %5 : i32, !llvm.ptr
    %c0_i64_19 = arith.constant 0 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c0_i64_19 : i64
    %67 = llvm.getelementptr %12[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i8
    %69 = arith.extui %68 : i8 to i32
    llvm.store %69, %6 : i32, !llvm.ptr
    %70 = llvm.load %5 : !llvm.ptr -> i32
    %71 = llvm.load %4 : !llvm.ptr -> i32
    %72 = llvm.load %3 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %73 = arith.xori %72, %c31_i32 : i32
    %74 = arith.addi %71, %73 : i32
    llvm.store %74, %7 : i32, !llvm.ptr
    %c0_i64_20 = arith.constant 0 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c0_i64_20 : i64
    %77 = llvm.getelementptr %12[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i8
    %79 = arith.extui %78 : i8 to i32
    %c0_i64_21 = arith.constant 0 : i64
    %80 = arith.extui %70 : i32 to i64
    %81 = arith.addi %80, %c0_i64_21 : i64
    %82 = llvm.getelementptr %12[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %83 = arith.trunci %79 : i32 to i8
    llvm.store volatile %83, %82 {alignment = 1 : i64} : i8, !llvm.ptr
    %84 = llvm.load %7 : !llvm.ptr -> i32
    %85 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c0_i64_22 : i64
    %88 = llvm.getelementptr %12[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = arith.trunci %85 : i32 to i8
    llvm.store volatile %89, %88 {alignment = 1 : i64} : i8, !llvm.ptr
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_23 = arith.constant 1 : i32
    %91 = arith.addi %90, %c1_i32_23 : i32
    llvm.store %91, %3 : i32, !llvm.ptr
    %c16_i32_24 = arith.constant 16 : i32
    %92 = arith.cmpi eq, %91, %c16_i32_24 : i32
    %93 = arith.extui %92 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %94 = arith.cmpi eq, %93, %c0_i32_25 : i32
    %95 = arith.extui %94 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %96 = arith.cmpi ne, %95, %c0_i32_26 : i32
    cf.cond_br %96, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f9(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %5[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %17, %1 : i32, !llvm.ptr
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %5[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %22, %0 : i32, !llvm.ptr
    %c0_i64_2 = arith.constant 0 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c0_i64_2 : i64
    %25 = llvm.getelementptr %5[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %26, %2 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %27 = arith.cmpi eq, %26, %c0_i32_3 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_4 : i32
    cf.cond_br %29, ^bb3, ^bb4
  ^bb2:  // pred: ^bb13
    return
  ^bb3:  // 2 preds: ^bb1, ^bb11
    %30 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c4_i64_5 : i64
    %33 = llvm.getelementptr %5[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %34, %2 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %35 = arith.cmpi eq, %34, %c0_i32_6 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_7 : i32
    cf.cond_br %37, ^bb13, ^bb14
  ^bb4:  // pred: ^bb1
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %40 = arith.cmpi ult, %39, %12 : i32
    cf.cond_br %40, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %41 = llvm.getelementptr inbounds %10[%39] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %42 = llvm.load %41 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.ptrtoint %42 : !llvm.ptr to i64
    %c0_i64_8 = arith.constant 0 : i64
    %44 = arith.cmpi eq, %43, %c0_i64_8 : i64
    cf.cond_br %44, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %45 = llvm.getelementptr %42[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %46 = llvm.getelementptr %42[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %47 = llvm.getelementptr %42[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %48 = llvm.load %45 : !llvm.ptr -> !llvm.ptr
    %49 = llvm.load %47 : !llvm.ptr -> !llvm.ptr
    %50 = llvm.ptrtoint %48 : !llvm.ptr to i64
    %c0_i64_9 = arith.constant 0 : i64
    %51 = arith.cmpi eq, %50, %c0_i64_9 : i64
    cf.cond_br %51, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %52 = llvm.load %46 : !llvm.ptr -> i32
    %53 = arith.cmpi ne, %7, %52 : i32
    cf.cond_br %53, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_10 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_10) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %54 = llvm.call %48(%49, %38) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    cf.br ^bb3
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb3, ^bb14
    cf.br ^bb2
  ^bb14:  // pred: ^bb3
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c8_i64 : i64
    %60 = llvm.getelementptr %5[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f73(%arg0, %55, %56, %61) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb13
  }
  func.func @f10(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %12 = arith.subi %11, %c64_i32 : i32
    llvm.store %12, %4 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %4 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %2 : !llvm.ptr -> i32
    call @f70(%arg0, %13, %14, %15) : (!llvm.ptr, i32, i32, i32) -> ()
    %16 = llvm.load %3 : !llvm.ptr -> i32
    %c33_i32 = arith.constant 33 : i32
    %17 = arith.cmpi uge, %16, %c33_i32 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_5 : i32
    cf.cond_br %19, ^bb4, ^bb5
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // pred: ^bb5
    %c32_i32 = arith.constant 32 : i32
    %c32_i32_6 = arith.constant 32 : i32
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %21 = arith.subi %c32_i32_6, %20 : i32
    %c1048700_i32 = arith.constant 1048700 : i32
    call @f159(%arg0, %c32_i32, %21, %c1048700_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_7 = arith.constant 32 : i32
    %c1048684_i32 = arith.constant 1048684 : i32
    call @f157(%arg0, %22, %c32_i32_7, %c1048684_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_8 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_8) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %23 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_9 : i32
    cf.cond_br %24, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %3 : i32, !llvm.ptr
    %25 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_10 = arith.constant 32 : i32
    %26 = arith.addi %25, %c32_i32_10 : i32
    %c24_i32_11 = arith.constant 24 : i32
    %27 = arith.addi %26, %c24_i32_11 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c0_i64_13 : i64
    %30 = llvm.getelementptr %10[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_12, %30 {alignment = 1 : i64} : i64, !llvm.ptr
    %31 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %32 = arith.addi %31, %c48_i32 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %c0_i64_15 = arith.constant 0 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c0_i64_15 : i64
    %35 = llvm.getelementptr %10[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_14, %35 {alignment = 1 : i64} : i64, !llvm.ptr
    %36 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_16 = arith.constant 32 : i32
    %37 = arith.addi %36, %c32_i32_16 : i32
    %c8_i32 = arith.constant 8 : i32
    %38 = arith.addi %37, %c8_i32 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %c0_i64_18 = arith.constant 0 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c0_i64_18 : i64
    %41 = llvm.getelementptr %10[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_17, %41 {alignment = 1 : i64} : i64, !llvm.ptr
    %42 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %c32_i64 = arith.constant 32 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c32_i64 : i64
    %45 = llvm.getelementptr %10[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_19, %45 {alignment = 1 : i64} : i64, !llvm.ptr
    %46 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_20 = arith.constant 32 : i32
    %47 = arith.addi %46, %c32_i32_20 : i32
    llvm.store %47, %2 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb7:  // pred: ^bb9
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %49 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i64_21 = arith.constant 32 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c32_i64_21 : i64
    %52 = llvm.getelementptr %10[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_22 = arith.constant 0 : i64
    %54 = arith.extui %48 : i32 to i64
    %55 = arith.addi %54, %c0_i64_22 : i64
    %56 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_23 = arith.constant 24 : i32
    %58 = arith.addi %57, %c24_i32_23 : i32
    %59 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_24 = arith.constant 32 : i32
    %60 = arith.addi %59, %c32_i32_24 : i32
    %c24_i32_25 = arith.constant 24 : i32
    %61 = arith.addi %60, %c24_i32_25 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c0_i64_26 : i64
    %64 = llvm.getelementptr %10[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_27 = arith.constant 0 : i64
    %66 = arith.extui %58 : i32 to i64
    %67 = arith.addi %66, %c0_i64_27 : i64
    %68 = llvm.getelementptr %10[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %65, %68 {alignment = 1 : i64} : i64, !llvm.ptr
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %70 = arith.addi %69, %c16_i32 : i32
    %71 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_28 = arith.constant 32 : i32
    %72 = arith.addi %71, %c32_i32_28 : i32
    %c16_i32_29 = arith.constant 16 : i32
    %73 = arith.addi %72, %c16_i32_29 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c0_i64_30 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_31 = arith.constant 0 : i64
    %78 = arith.extui %70 : i32 to i64
    %79 = arith.addi %78, %c0_i64_31 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %80 {alignment = 1 : i64} : i64, !llvm.ptr
    %81 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_32 = arith.constant 8 : i32
    %82 = arith.addi %81, %c8_i32_32 : i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_33 = arith.constant 32 : i32
    %84 = arith.addi %83, %c32_i32_33 : i32
    %c8_i32_34 = arith.constant 8 : i32
    %85 = arith.addi %84, %c8_i32_34 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c0_i64_35 : i64
    %88 = llvm.getelementptr %10[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load volatile %88 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_36 = arith.constant 0 : i64
    %90 = arith.extui %82 : i32 to i64
    %91 = arith.addi %90, %c0_i64_36 : i64
    %92 = llvm.getelementptr %10[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %89, %92 {alignment = 1 : i64} : i64, !llvm.ptr
    %93 = llvm.load %4 : !llvm.ptr -> i32
    %c64_i32_37 = arith.constant 64 : i32
    %94 = arith.addi %93, %c64_i32_37 : i32
    llvm.store %94, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb8:  // 2 preds: ^bb6, ^bb8
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %96 = llvm.load %4 : !llvm.ptr -> i32
    %97 = llvm.load %3 : !llvm.ptr -> i32
    %98 = arith.addi %96, %97 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c0_i64_38 : i64
    %101 = llvm.getelementptr %10[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %102, %5 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %103 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %104 = scf.if %103 -> (i64) {
      %151 = arith.shli %102, %c56_i64 : i64
      scf.yield %151 : i64
    } else {
      %c0_i64_58 = arith.constant 0 : i64
      scf.yield %c0_i64_58 : i64
    }
    %105 = llvm.load %5 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %106 = arith.andi %105, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_39 = arith.constant 63 : i64
    %107 = arith.cmpi ule, %c40_i64, %c63_i64_39 : i64
    %108 = scf.if %107 -> (i64) {
      %151 = arith.shli %106, %c40_i64 : i64
      scf.yield %151 : i64
    } else {
      %c0_i64_58 = arith.constant 0 : i64
      scf.yield %c0_i64_58 : i64
    }
    %109 = arith.ori %104, %108 : i64
    %110 = llvm.load %5 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %111 = arith.andi %110, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_40 = arith.constant 63 : i64
    %112 = arith.cmpi ule, %c24_i64, %c63_i64_40 : i64
    %113 = scf.if %112 -> (i64) {
      %151 = arith.shli %111, %c24_i64 : i64
      scf.yield %151 : i64
    } else {
      %c0_i64_58 = arith.constant 0 : i64
      scf.yield %c0_i64_58 : i64
    }
    %114 = llvm.load %5 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %115 = arith.andi %114, %c4278190080_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %c63_i64_41 = arith.constant 63 : i64
    %116 = arith.cmpi ule, %c8_i64, %c63_i64_41 : i64
    %117 = scf.if %116 -> (i64) {
      %151 = arith.shli %115, %c8_i64 : i64
      scf.yield %151 : i64
    } else {
      %c0_i64_58 = arith.constant 0 : i64
      scf.yield %c0_i64_58 : i64
    }
    %118 = arith.ori %113, %117 : i64
    %119 = arith.ori %109, %118 : i64
    %120 = llvm.load %5 : !llvm.ptr -> i64
    %c8_i64_42 = arith.constant 8 : i64
    %c63_i64_43 = arith.constant 63 : i64
    %121 = arith.cmpi ule, %c8_i64_42, %c63_i64_43 : i64
    %122 = scf.if %121 -> (i64) {
      %151 = arith.shrui %120, %c8_i64_42 : i64
      scf.yield %151 : i64
    } else {
      %c0_i64_58 = arith.constant 0 : i64
      scf.yield %c0_i64_58 : i64
    }
    %c4278190080_i64_44 = arith.constant 4278190080 : i64
    %123 = arith.andi %122, %c4278190080_i64_44 : i64
    %124 = llvm.load %5 : !llvm.ptr -> i64
    %c24_i64_45 = arith.constant 24 : i64
    %c63_i64_46 = arith.constant 63 : i64
    %125 = arith.cmpi ule, %c24_i64_45, %c63_i64_46 : i64
    %126 = scf.if %125 -> (i64) {
      %151 = arith.shrui %124, %c24_i64_45 : i64
      scf.yield %151 : i64
    } else {
      %c0_i64_58 = arith.constant 0 : i64
      scf.yield %c0_i64_58 : i64
    }
    %c16711680_i64_47 = arith.constant 16711680 : i64
    %127 = arith.andi %126, %c16711680_i64_47 : i64
    %128 = arith.ori %123, %127 : i64
    %129 = llvm.load %5 : !llvm.ptr -> i64
    %c40_i64_48 = arith.constant 40 : i64
    %c63_i64_49 = arith.constant 63 : i64
    %130 = arith.cmpi ule, %c40_i64_48, %c63_i64_49 : i64
    %131 = scf.if %130 -> (i64) {
      %151 = arith.shrui %129, %c40_i64_48 : i64
      scf.yield %151 : i64
    } else {
      %c0_i64_58 = arith.constant 0 : i64
      scf.yield %c0_i64_58 : i64
    }
    %c65280_i64_50 = arith.constant 65280 : i64
    %132 = arith.andi %131, %c65280_i64_50 : i64
    %133 = llvm.load %5 : !llvm.ptr -> i64
    %c56_i64_51 = arith.constant 56 : i64
    %c63_i64_52 = arith.constant 63 : i64
    %134 = arith.cmpi ule, %c56_i64_51, %c63_i64_52 : i64
    %135 = scf.if %134 -> (i64) {
      %151 = arith.shrui %133, %c56_i64_51 : i64
      scf.yield %151 : i64
    } else {
      %c0_i64_58 = arith.constant 0 : i64
      scf.yield %c0_i64_58 : i64
    }
    %136 = arith.ori %132, %135 : i64
    %137 = arith.ori %128, %136 : i64
    %138 = arith.ori %119, %137 : i64
    %c0_i64_53 = arith.constant 0 : i64
    %139 = arith.extui %95 : i32 to i64
    %140 = arith.addi %139, %c0_i64_53 : i64
    %141 = llvm.getelementptr %10[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %138, %141 {alignment = 1 : i64} : i64, !llvm.ptr
    %142 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_54 = arith.constant 8 : i32
    %143 = arith.addi %142, %c8_i32_54 : i32
    llvm.store %143, %2 : i32, !llvm.ptr
    %144 = llvm.load %3 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %145 = arith.addi %144, %c-8_i32 : i32
    llvm.store %145, %3 : i32, !llvm.ptr
    %c-8_i32_55 = arith.constant -8 : i32
    %146 = arith.cmpi eq, %145, %c-8_i32_55 : i32
    %147 = arith.extui %146 : i1 to i32
    %c0_i32_56 = arith.constant 0 : i32
    %148 = arith.cmpi eq, %147, %c0_i32_56 : i32
    %149 = arith.extui %148 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %150 = arith.cmpi ne, %149, %c0_i32_57 : i32
    cf.cond_br %150, ^bb8, ^bb9
  ^bb9:  // pred: ^bb8
    cf.br ^bb7
  }
  func.func public @mark_used(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %4 = arith.subi %3, %c16_i32 : i32
    llvm.store %4, %0 : i32, !llvm.ptr
    llvm.store %4, %2 : i32, !llvm.ptr
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c15_i32 = arith.constant 15 : i32
    %6 = arith.addi %5, %c15_i32 : i32
    %c0_i32_0 = arith.constant 0 : i32
    call @f61(%arg0, %6, %c0_i32_0) : (!llvm.ptr, i32, i32) -> ()
    call @f12(%arg0) : (!llvm.ptr) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f12(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1048968_i32 = arith.constant 1048968 : i32
    call @f175(%arg0, %c1048968_i32) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func public @user_entrypoint(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %3 : i64, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_3, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %11 = arith.subi %10, %c64_i32 : i32
    llvm.store %11, %1 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    llvm.store %c1_i32_5, %2 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %12 = call @f62(%arg0, %c1_i32_6) : (!llvm.ptr, i32) -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_7 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: i32):  // pred: ^bb3
    return %14 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_8 = arith.constant 64 : i32
    %16 = arith.addi %15, %c64_i32_8 : i32
    llvm.store %16, %6 : i32, !llvm.ptr
    %17 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%17 : i32)
  ^bb4:  // pred: ^bb1
    %c1_i32_9 = arith.constant 1 : i32
    %c0_i32_10 = arith.constant 0 : i32
    call @f61(%arg0, %c1_i32_9, %c0_i32_10) : (!llvm.ptr, i32, i32) -> ()
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %19 = arith.addi %18, %c4_i32 : i32
    %c1_i32_11 = arith.constant 1 : i32
    %20 = llvm.load %0 : !llvm.ptr -> i32
    call @f36(%arg0, %19, %c1_i32_11, %20) : (!llvm.ptr, i32, i32, i32) -> ()
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %22 = arith.addi %21, %c32_i32 : i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_12 = arith.constant 4 : i32
    %24 = arith.addi %23, %c4_i32_12 : i32
    %c1_i32_13 = arith.constant 1 : i32
    %c1049236_i32 = arith.constant 1049236 : i32
    call @f0(%arg0, %22, %24, %c1_i32_13, %c1049236_i32) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %26 = arith.addi %25, %c48_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %27 = arith.addi %26, %c8_i32 : i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c44_i32 = arith.constant 44 : i32
    %29 = arith.addi %28, %c44_i32 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64_14 : i64
    %32 = llvm.getelementptr %9[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %33, %0 : i32, !llvm.ptr
    %c0_i64_15 = arith.constant 0 : i64
    %34 = arith.extui %27 : i32 to i64
    %35 = arith.addi %34, %c0_i64_15 : i64
    %36 = llvm.getelementptr %9[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c36_i64 : i64
    %41 = llvm.getelementptr %9[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %42, %3 : i64, !llvm.ptr
    %c48_i64 = arith.constant 48 : i64
    %43 = arith.extui %37 : i32 to i64
    %44 = arith.addi %43, %c48_i64 : i64
    %45 = llvm.getelementptr %9[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %42, %45 {alignment = 1 : i64} : i64, !llvm.ptr
    %46 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c32_i64 : i64
    %49 = llvm.getelementptr %9[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %50, %2 : i32, !llvm.ptr
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %52 = arith.addi %51, %c16_i32 : i32
    %c8_i32_16 = arith.constant 8 : i32
    %53 = arith.addi %52, %c8_i32_16 : i32
    llvm.store %53, %4 : i32, !llvm.ptr
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %55 = arith.extui %53 : i32 to i64
    %56 = arith.addi %55, %c0_i64_17 : i64
    %57 = llvm.getelementptr %9[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %57 {alignment = 1 : i64} : i32, !llvm.ptr
    %58 = llvm.load %1 : !llvm.ptr -> i32
    %59 = llvm.load %3 : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %60 = arith.extui %58 : i32 to i64
    %61 = arith.addi %60, %c16_i64 : i64
    %62 = llvm.getelementptr %9[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %62 {alignment = 1 : i64} : i64, !llvm.ptr
    %c1_i32_18 = arith.constant 1 : i32
    %c0_i32_19 = arith.constant 0 : i32
    call @f45(%arg0, %c1_i32_18, %c0_i32_19) : (!llvm.ptr, i32, i32) -> ()
    %c1_i32_20 = arith.constant 1 : i32
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c20_i64 : i64
    %66 = llvm.getelementptr %9[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i32
    %68 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c0_i64_21 : i64
    %71 = llvm.getelementptr %9[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f39(%arg0, %c1_i32_20, %67, %72) : (!llvm.ptr, i32, i32, i32) -> ()
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_22 = arith.constant 16 : i32
    %74 = arith.addi %73, %c16_i32_22 : i32
    call @f112(%arg0, %74) : (!llvm.ptr, i32) -> ()
    %75 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_23 = arith.constant 16 : i32
    %76 = arith.addi %75, %c16_i32_23 : i32
    call @f113(%arg0, %76) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  }
  func.func @f14(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @f140(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f15(%arg0: !llvm.ptr) -> i64 {
    %0 = llvm.getelementptr %arg0[88] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.call %2(%4) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr) -> i64
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func @f16(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[112] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %15 = arith.subi %14, %c32_i32 : i32
    llvm.store %15, %1 : i32, !llvm.ptr
    llvm.store %15, %5 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %17 = arith.addi %16, %c8_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %18 = arith.addi %17, %c16_i32 : i32
    llvm.store %18, %2 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_3, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_4 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32_4 : i32
    %c8_i32_5 = arith.constant 8 : i32
    %24 = arith.addi %23, %c8_i32_5 : i32
    llvm.store %24, %3 : i32, !llvm.ptr
    %c0_i64_6 = arith.constant 0 : i64
    %c0_i64_7 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_7 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_6, %27 {alignment = 1 : i64} : i64, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %c8_i64 = arith.constant 8 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c8_i64 : i64
    %31 = llvm.getelementptr %8[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_8, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %33 = arith.addi %32, %c8_i32_9 : i32
    %34 = llvm.call %11(%13, %33) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_10 = arith.constant 16 : i32
    %36 = arith.addi %35, %c16_i32_10 : i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_11 : i64
    %40 = llvm.getelementptr %8[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %42 = arith.extui %36 : i32 to i64
    %43 = arith.addi %42, %c0_i64_12 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_13 = arith.constant 8 : i32
    %46 = arith.addi %45, %c8_i32_13 : i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_14 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %52 = arith.extui %46 : i32 to i64
    %53 = arith.addi %52, %c0_i64_15 : i64
    %54 = llvm.getelementptr %8[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %51, %54 {alignment = 1 : i64} : i64, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_16 = arith.constant 8 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c8_i64_16 : i64
    %59 = llvm.getelementptr %8[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %61 = arith.extui %55 : i32 to i64
    %62 = arith.addi %61, %c0_i64_17 : i64
    %63 = llvm.getelementptr %8[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_18 = arith.constant 32 : i32
    %65 = arith.addi %64, %c32_i32_18 : i32
    llvm.store %65, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[136] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %15 = arith.subi %14, %c32_i32 : i32
    llvm.store %15, %1 : i32, !llvm.ptr
    llvm.store %15, %5 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %17 = arith.addi %16, %c8_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %18 = arith.addi %17, %c16_i32 : i32
    llvm.store %18, %2 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_3, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_4 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32_4 : i32
    %c8_i32_5 = arith.constant 8 : i32
    %24 = arith.addi %23, %c8_i32_5 : i32
    llvm.store %24, %3 : i32, !llvm.ptr
    %c0_i64_6 = arith.constant 0 : i64
    %c0_i64_7 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_7 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_6, %27 {alignment = 1 : i64} : i64, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %c8_i64 = arith.constant 8 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c8_i64 : i64
    %31 = llvm.getelementptr %8[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_8, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %33 = arith.addi %32, %c8_i32_9 : i32
    %34 = llvm.call %11(%13, %33) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_10 = arith.constant 16 : i32
    %36 = arith.addi %35, %c16_i32_10 : i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_11 : i64
    %40 = llvm.getelementptr %8[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %42 = arith.extui %36 : i32 to i64
    %43 = arith.addi %42, %c0_i64_12 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_13 = arith.constant 8 : i32
    %46 = arith.addi %45, %c8_i32_13 : i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_14 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %52 = arith.extui %46 : i32 to i64
    %53 = arith.addi %52, %c0_i64_15 : i64
    %54 = llvm.getelementptr %8[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %51, %54 {alignment = 1 : i64} : i64, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_16 = arith.constant 8 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c8_i64_16 : i64
    %59 = llvm.getelementptr %8[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %61 = arith.extui %55 : i32 to i64
    %62 = arith.addi %61, %c0_i64_17 : i64
    %63 = llvm.getelementptr %8[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_18 = arith.constant 32 : i32
    %65 = arith.addi %64, %c32_i32_18 : i32
    llvm.store %65, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[160] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %15 = arith.subi %14, %c32_i32 : i32
    llvm.store %15, %1 : i32, !llvm.ptr
    llvm.store %15, %5 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %17 = arith.addi %16, %c8_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %18 = arith.addi %17, %c16_i32 : i32
    llvm.store %18, %2 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_3, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_4 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32_4 : i32
    %c8_i32_5 = arith.constant 8 : i32
    %24 = arith.addi %23, %c8_i32_5 : i32
    llvm.store %24, %3 : i32, !llvm.ptr
    %c0_i64_6 = arith.constant 0 : i64
    %c0_i64_7 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_7 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_6, %27 {alignment = 1 : i64} : i64, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %c8_i64 = arith.constant 8 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c8_i64 : i64
    %31 = llvm.getelementptr %8[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_8, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %33 = arith.addi %32, %c8_i32_9 : i32
    %34 = llvm.call %11(%13, %33) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_10 = arith.constant 16 : i32
    %36 = arith.addi %35, %c16_i32_10 : i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_11 : i64
    %40 = llvm.getelementptr %8[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %42 = arith.extui %36 : i32 to i64
    %43 = arith.addi %42, %c0_i64_12 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_13 = arith.constant 8 : i32
    %46 = arith.addi %45, %c8_i32_13 : i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_14 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %52 = arith.extui %46 : i32 to i64
    %53 = arith.addi %52, %c0_i64_15 : i64
    %54 = llvm.getelementptr %8[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %51, %54 {alignment = 1 : i64} : i64, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_16 = arith.constant 8 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c8_i64_16 : i64
    %59 = llvm.getelementptr %8[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %61 = arith.extui %55 : i32 to i64
    %62 = arith.addi %61, %c0_i64_17 : i64
    %63 = llvm.getelementptr %8[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_18 = arith.constant 32 : i32
    %65 = arith.addi %64, %c32_i32_18 : i32
    llvm.store %65, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f19(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[184] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.call %2(%4) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func @f20(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[208] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.call %2(%4) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func @f21(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[232] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %15 = arith.subi %14, %c32_i32 : i32
    llvm.store %15, %1 : i32, !llvm.ptr
    llvm.store %15, %5 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %17 = arith.addi %16, %c8_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %18 = arith.addi %17, %c16_i32 : i32
    llvm.store %18, %2 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_3, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_4 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32_4 : i32
    %c8_i32_5 = arith.constant 8 : i32
    %24 = arith.addi %23, %c8_i32_5 : i32
    llvm.store %24, %3 : i32, !llvm.ptr
    %c0_i64_6 = arith.constant 0 : i64
    %c0_i64_7 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_7 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_6, %27 {alignment = 1 : i64} : i64, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %c8_i64 = arith.constant 8 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c8_i64 : i64
    %31 = llvm.getelementptr %8[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_8, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %33 = arith.addi %32, %c8_i32_9 : i32
    %34 = llvm.call %11(%13, %33) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_10 = arith.constant 16 : i32
    %36 = arith.addi %35, %c16_i32_10 : i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_11 : i64
    %40 = llvm.getelementptr %8[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %42 = arith.extui %36 : i32 to i64
    %43 = arith.addi %42, %c0_i64_12 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_13 = arith.constant 8 : i32
    %46 = arith.addi %45, %c8_i32_13 : i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_14 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %52 = arith.extui %46 : i32 to i64
    %53 = arith.addi %52, %c0_i64_15 : i64
    %54 = llvm.getelementptr %8[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %51, %54 {alignment = 1 : i64} : i64, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64_16 = arith.constant 8 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c8_i64_16 : i64
    %59 = llvm.getelementptr %8[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %61 = arith.extui %55 : i32 to i64
    %62 = arith.addi %61, %c0_i64_17 : i64
    %63 = llvm.getelementptr %8[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_18 = arith.constant 32 : i32
    %65 = arith.addi %64, %c32_i32_18 : i32
    llvm.store %65, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[256] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %8 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %18 = arith.subi %17, %c96_i32 : i32
    llvm.store %18, %1 : i32, !llvm.ptr
    llvm.store %18, %8 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %2 : i32, !llvm.ptr
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_6 = arith.constant 24 : i32
    %20 = arith.addi %19, %c24_i32_6 : i32
    llvm.store %20, %3 : i32, !llvm.ptr
    %c0_i64_7 = arith.constant 0 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64_8 : i64
    %23 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_7, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %25 = arith.addi %24, %c16_i32 : i32
    llvm.store %25, %4 : i32, !llvm.ptr
    %c0_i64_9 = arith.constant 0 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64_10 : i64
    %28 = llvm.getelementptr %11[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_9, %28 {alignment = 1 : i64} : i64, !llvm.ptr
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %30 = arith.addi %29, %c8_i32 : i32
    llvm.store %30, %5 : i32, !llvm.ptr
    %c0_i64_11 = arith.constant 0 : i64
    %c0_i64_12 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_12 : i64
    %33 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_11, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %c0_i64_14 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_14 : i64
    %37 = llvm.getelementptr %11[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_13, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %39 = llvm.call %14(%16, %38) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %41 = arith.addi %40, %c32_i32 : i32
    %c24_i32_15 = arith.constant 24 : i32
    %42 = arith.addi %41, %c24_i32_15 : i32
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_16 : i64
    %46 = llvm.getelementptr %11[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %48 = arith.extui %42 : i32 to i64
    %49 = arith.addi %48, %c0_i64_17 : i64
    %50 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i64, !llvm.ptr
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_18 = arith.constant 32 : i32
    %52 = arith.addi %51, %c32_i32_18 : i32
    %c16_i32_19 = arith.constant 16 : i32
    %53 = arith.addi %52, %c16_i32_19 : i32
    %54 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c0_i64_20 : i64
    %57 = llvm.getelementptr %11[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %59 = arith.extui %53 : i32 to i64
    %60 = arith.addi %59, %c0_i64_21 : i64
    %61 = llvm.getelementptr %11[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i64, !llvm.ptr
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_22 = arith.constant 32 : i32
    %63 = arith.addi %62, %c32_i32_22 : i32
    %c8_i32_23 = arith.constant 8 : i32
    %64 = arith.addi %63, %c8_i32_23 : i32
    %65 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c0_i64_24 : i64
    %68 = llvm.getelementptr %11[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %70 = arith.extui %64 : i32 to i64
    %71 = arith.addi %70, %c0_i64_25 : i64
    %72 = llvm.getelementptr %11[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c0_i64_26 : i64
    %77 = llvm.getelementptr %11[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %79 = arith.extui %73 : i32 to i64
    %80 = arith.addi %79, %c32_i64 : i64
    %81 = llvm.getelementptr %11[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %81 {alignment = 1 : i64} : i64, !llvm.ptr
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %83 = arith.addi %82, %c64_i32 : i32
    %c24_i32_27 = arith.constant 24 : i32
    %84 = arith.addi %83, %c24_i32_27 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %c0_i64_29 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_29 : i64
    %87 = llvm.getelementptr %11[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_28, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_30 = arith.constant 64 : i32
    %89 = arith.addi %88, %c64_i32_30 : i32
    %c16_i32_31 = arith.constant 16 : i32
    %90 = arith.addi %89, %c16_i32_31 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %c0_i64_33 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64_33 : i64
    %93 = llvm.getelementptr %11[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_32, %93 {alignment = 1 : i64} : i64, !llvm.ptr
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_34 = arith.constant 64 : i32
    %95 = arith.addi %94, %c64_i32_34 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %96 = arith.addi %95, %c8_i32_35 : i32
    %c0_i64_36 = arith.constant 0 : i64
    %c0_i64_37 = arith.constant 0 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c0_i64_37 : i64
    %99 = llvm.getelementptr %11[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_36, %99 {alignment = 1 : i64} : i64, !llvm.ptr
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_38 = arith.constant 0 : i64
    %c64_i64 = arith.constant 64 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c64_i64 : i64
    %103 = llvm.getelementptr %11[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_38, %103 {alignment = 1 : i64} : i64, !llvm.ptr
    %104 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_39 = arith.constant 64 : i32
    %105 = arith.addi %104, %c64_i32_39 : i32
    llvm.store %105, %3 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %106 = llvm.load %0 : !llvm.ptr -> i32
    %107 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i64_40 = arith.constant 64 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c64_i64_40 : i64
    %110 = llvm.getelementptr %11[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %112 = arith.extui %106 : i32 to i64
    %113 = arith.addi %112, %c0_i64_41 : i64
    %114 = llvm.getelementptr %11[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %111, %114 {alignment = 1 : i64} : i64, !llvm.ptr
    %115 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_42 = arith.constant 24 : i32
    %116 = arith.addi %115, %c24_i32_42 : i32
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_43 = arith.constant 64 : i32
    %118 = arith.addi %117, %c64_i32_43 : i32
    %c24_i32_44 = arith.constant 24 : i32
    %119 = arith.addi %118, %c24_i32_44 : i32
    %c0_i64_45 = arith.constant 0 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c0_i64_45 : i64
    %122 = llvm.getelementptr %11[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_46 = arith.constant 0 : i64
    %124 = arith.extui %116 : i32 to i64
    %125 = arith.addi %124, %c0_i64_46 : i64
    %126 = llvm.getelementptr %11[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %123, %126 {alignment = 1 : i64} : i64, !llvm.ptr
    %127 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_47 = arith.constant 16 : i32
    %128 = arith.addi %127, %c16_i32_47 : i32
    %129 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_48 = arith.constant 64 : i32
    %130 = arith.addi %129, %c64_i32_48 : i32
    %c16_i32_49 = arith.constant 16 : i32
    %131 = arith.addi %130, %c16_i32_49 : i32
    %c0_i64_50 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_50 : i64
    %134 = llvm.getelementptr %11[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_51 = arith.constant 0 : i64
    %136 = arith.extui %128 : i32 to i64
    %137 = arith.addi %136, %c0_i64_51 : i64
    %138 = llvm.getelementptr %11[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %135, %138 {alignment = 1 : i64} : i64, !llvm.ptr
    %139 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_52 = arith.constant 8 : i32
    %140 = arith.addi %139, %c8_i32_52 : i32
    %141 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_53 = arith.constant 64 : i32
    %142 = arith.addi %141, %c64_i32_53 : i32
    %c8_i32_54 = arith.constant 8 : i32
    %143 = arith.addi %142, %c8_i32_54 : i32
    %c0_i64_55 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_55 : i64
    %146 = llvm.getelementptr %11[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_56 = arith.constant 0 : i64
    %148 = arith.extui %140 : i32 to i64
    %149 = arith.addi %148, %c0_i64_56 : i64
    %150 = llvm.getelementptr %11[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %147, %150 {alignment = 1 : i64} : i64, !llvm.ptr
    %151 = llvm.load %1 : !llvm.ptr -> i32
    %c96_i32_57 = arith.constant 96 : i32
    %152 = arith.addi %151, %c96_i32_57 : i32
    llvm.store %152, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_58 = arith.constant 32 : i32
    %155 = arith.addi %154, %c32_i32_58 : i32
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %157 = arith.addi %155, %156 : i32
    %c0_i64_59 = arith.constant 0 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c0_i64_59 : i64
    %160 = llvm.getelementptr %11[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %161, %6 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %162 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %163 = scf.if %162 -> (i64) {
      %210 = arith.shli %161, %c56_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %164 = llvm.load %6 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %165 = arith.andi %164, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_60 = arith.constant 63 : i64
    %166 = arith.cmpi ule, %c40_i64, %c63_i64_60 : i64
    %167 = scf.if %166 -> (i64) {
      %210 = arith.shli %165, %c40_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %168 = arith.ori %163, %167 : i64
    %169 = llvm.load %6 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %170 = arith.andi %169, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_61 = arith.constant 63 : i64
    %171 = arith.cmpi ule, %c24_i64, %c63_i64_61 : i64
    %172 = scf.if %171 -> (i64) {
      %210 = arith.shli %170, %c24_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %173 = llvm.load %6 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %174 = arith.andi %173, %c4278190080_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %c63_i64_62 = arith.constant 63 : i64
    %175 = arith.cmpi ule, %c8_i64, %c63_i64_62 : i64
    %176 = scf.if %175 -> (i64) {
      %210 = arith.shli %174, %c8_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %177 = arith.ori %172, %176 : i64
    %178 = arith.ori %168, %177 : i64
    %179 = llvm.load %6 : !llvm.ptr -> i64
    %c8_i64_63 = arith.constant 8 : i64
    %c63_i64_64 = arith.constant 63 : i64
    %180 = arith.cmpi ule, %c8_i64_63, %c63_i64_64 : i64
    %181 = scf.if %180 -> (i64) {
      %210 = arith.shrui %179, %c8_i64_63 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %c4278190080_i64_65 = arith.constant 4278190080 : i64
    %182 = arith.andi %181, %c4278190080_i64_65 : i64
    %183 = llvm.load %6 : !llvm.ptr -> i64
    %c24_i64_66 = arith.constant 24 : i64
    %c63_i64_67 = arith.constant 63 : i64
    %184 = arith.cmpi ule, %c24_i64_66, %c63_i64_67 : i64
    %185 = scf.if %184 -> (i64) {
      %210 = arith.shrui %183, %c24_i64_66 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %c16711680_i64_68 = arith.constant 16711680 : i64
    %186 = arith.andi %185, %c16711680_i64_68 : i64
    %187 = arith.ori %182, %186 : i64
    %188 = llvm.load %6 : !llvm.ptr -> i64
    %c40_i64_69 = arith.constant 40 : i64
    %c63_i64_70 = arith.constant 63 : i64
    %189 = arith.cmpi ule, %c40_i64_69, %c63_i64_70 : i64
    %190 = scf.if %189 -> (i64) {
      %210 = arith.shrui %188, %c40_i64_69 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %c65280_i64_71 = arith.constant 65280 : i64
    %191 = arith.andi %190, %c65280_i64_71 : i64
    %192 = llvm.load %6 : !llvm.ptr -> i64
    %c56_i64_72 = arith.constant 56 : i64
    %c63_i64_73 = arith.constant 63 : i64
    %193 = arith.cmpi ule, %c56_i64_72, %c63_i64_73 : i64
    %194 = scf.if %193 -> (i64) {
      %210 = arith.shrui %192, %c56_i64_72 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %195 = arith.ori %191, %194 : i64
    %196 = arith.ori %187, %195 : i64
    %197 = arith.ori %178, %196 : i64
    %c0_i64_74 = arith.constant 0 : i64
    %198 = arith.extui %153 : i32 to i64
    %199 = arith.addi %198, %c0_i64_74 : i64
    %200 = llvm.getelementptr %11[%199] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %197, %200 {alignment = 1 : i64} : i64, !llvm.ptr
    %201 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_75 = arith.constant 8 : i32
    %202 = arith.addi %201, %c8_i32_75 : i32
    llvm.store %202, %3 : i32, !llvm.ptr
    %203 = llvm.load %2 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %204 = arith.addi %203, %c-8_i32 : i32
    llvm.store %204, %2 : i32, !llvm.ptr
    %c-8_i32_76 = arith.constant -8 : i32
    %205 = arith.cmpi eq, %204, %c-8_i32_76 : i32
    %206 = arith.extui %205 : i1 to i32
    %c0_i32_77 = arith.constant 0 : i32
    %207 = arith.cmpi eq, %206, %c0_i32_77 : i32
    %208 = arith.extui %207 : i1 to i32
    %c0_i32_78 = arith.constant 0 : i32
    %209 = arith.cmpi ne, %208, %c0_i32_78 : i32
    cf.cond_br %209, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f23(%arg0: !llvm.ptr) -> i32 {
    %0 = llvm.getelementptr %arg0[280] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.call %2(%4) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr) -> i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func @f24(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[304] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %8 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %18 = arith.subi %17, %c96_i32 : i32
    llvm.store %18, %1 : i32, !llvm.ptr
    llvm.store %18, %8 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %2 : i32, !llvm.ptr
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_6 = arith.constant 24 : i32
    %20 = arith.addi %19, %c24_i32_6 : i32
    llvm.store %20, %3 : i32, !llvm.ptr
    %c0_i64_7 = arith.constant 0 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64_8 : i64
    %23 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_7, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %25 = arith.addi %24, %c16_i32 : i32
    llvm.store %25, %4 : i32, !llvm.ptr
    %c0_i64_9 = arith.constant 0 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64_10 : i64
    %28 = llvm.getelementptr %11[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_9, %28 {alignment = 1 : i64} : i64, !llvm.ptr
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %30 = arith.addi %29, %c8_i32 : i32
    llvm.store %30, %5 : i32, !llvm.ptr
    %c0_i64_11 = arith.constant 0 : i64
    %c0_i64_12 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_12 : i64
    %33 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_11, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %c0_i64_14 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_14 : i64
    %37 = llvm.getelementptr %11[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_13, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %39 = llvm.call %14(%16, %38) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %41 = arith.addi %40, %c32_i32 : i32
    %c24_i32_15 = arith.constant 24 : i32
    %42 = arith.addi %41, %c24_i32_15 : i32
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_16 : i64
    %46 = llvm.getelementptr %11[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %48 = arith.extui %42 : i32 to i64
    %49 = arith.addi %48, %c0_i64_17 : i64
    %50 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i64, !llvm.ptr
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_18 = arith.constant 32 : i32
    %52 = arith.addi %51, %c32_i32_18 : i32
    %c16_i32_19 = arith.constant 16 : i32
    %53 = arith.addi %52, %c16_i32_19 : i32
    %54 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c0_i64_20 : i64
    %57 = llvm.getelementptr %11[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %59 = arith.extui %53 : i32 to i64
    %60 = arith.addi %59, %c0_i64_21 : i64
    %61 = llvm.getelementptr %11[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i64, !llvm.ptr
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_22 = arith.constant 32 : i32
    %63 = arith.addi %62, %c32_i32_22 : i32
    %c8_i32_23 = arith.constant 8 : i32
    %64 = arith.addi %63, %c8_i32_23 : i32
    %65 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c0_i64_24 : i64
    %68 = llvm.getelementptr %11[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %70 = arith.extui %64 : i32 to i64
    %71 = arith.addi %70, %c0_i64_25 : i64
    %72 = llvm.getelementptr %11[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c0_i64_26 : i64
    %77 = llvm.getelementptr %11[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %79 = arith.extui %73 : i32 to i64
    %80 = arith.addi %79, %c32_i64 : i64
    %81 = llvm.getelementptr %11[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %81 {alignment = 1 : i64} : i64, !llvm.ptr
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %83 = arith.addi %82, %c64_i32 : i32
    %c24_i32_27 = arith.constant 24 : i32
    %84 = arith.addi %83, %c24_i32_27 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %c0_i64_29 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_29 : i64
    %87 = llvm.getelementptr %11[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_28, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_30 = arith.constant 64 : i32
    %89 = arith.addi %88, %c64_i32_30 : i32
    %c16_i32_31 = arith.constant 16 : i32
    %90 = arith.addi %89, %c16_i32_31 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %c0_i64_33 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64_33 : i64
    %93 = llvm.getelementptr %11[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_32, %93 {alignment = 1 : i64} : i64, !llvm.ptr
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_34 = arith.constant 64 : i32
    %95 = arith.addi %94, %c64_i32_34 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %96 = arith.addi %95, %c8_i32_35 : i32
    %c0_i64_36 = arith.constant 0 : i64
    %c0_i64_37 = arith.constant 0 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c0_i64_37 : i64
    %99 = llvm.getelementptr %11[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_36, %99 {alignment = 1 : i64} : i64, !llvm.ptr
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_38 = arith.constant 0 : i64
    %c64_i64 = arith.constant 64 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c64_i64 : i64
    %103 = llvm.getelementptr %11[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_38, %103 {alignment = 1 : i64} : i64, !llvm.ptr
    %104 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_39 = arith.constant 64 : i32
    %105 = arith.addi %104, %c64_i32_39 : i32
    llvm.store %105, %3 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %106 = llvm.load %0 : !llvm.ptr -> i32
    %107 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i64_40 = arith.constant 64 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c64_i64_40 : i64
    %110 = llvm.getelementptr %11[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %112 = arith.extui %106 : i32 to i64
    %113 = arith.addi %112, %c0_i64_41 : i64
    %114 = llvm.getelementptr %11[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %111, %114 {alignment = 1 : i64} : i64, !llvm.ptr
    %115 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_42 = arith.constant 24 : i32
    %116 = arith.addi %115, %c24_i32_42 : i32
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_43 = arith.constant 64 : i32
    %118 = arith.addi %117, %c64_i32_43 : i32
    %c24_i32_44 = arith.constant 24 : i32
    %119 = arith.addi %118, %c24_i32_44 : i32
    %c0_i64_45 = arith.constant 0 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c0_i64_45 : i64
    %122 = llvm.getelementptr %11[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_46 = arith.constant 0 : i64
    %124 = arith.extui %116 : i32 to i64
    %125 = arith.addi %124, %c0_i64_46 : i64
    %126 = llvm.getelementptr %11[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %123, %126 {alignment = 1 : i64} : i64, !llvm.ptr
    %127 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_47 = arith.constant 16 : i32
    %128 = arith.addi %127, %c16_i32_47 : i32
    %129 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_48 = arith.constant 64 : i32
    %130 = arith.addi %129, %c64_i32_48 : i32
    %c16_i32_49 = arith.constant 16 : i32
    %131 = arith.addi %130, %c16_i32_49 : i32
    %c0_i64_50 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_50 : i64
    %134 = llvm.getelementptr %11[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_51 = arith.constant 0 : i64
    %136 = arith.extui %128 : i32 to i64
    %137 = arith.addi %136, %c0_i64_51 : i64
    %138 = llvm.getelementptr %11[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %135, %138 {alignment = 1 : i64} : i64, !llvm.ptr
    %139 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_52 = arith.constant 8 : i32
    %140 = arith.addi %139, %c8_i32_52 : i32
    %141 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_53 = arith.constant 64 : i32
    %142 = arith.addi %141, %c64_i32_53 : i32
    %c8_i32_54 = arith.constant 8 : i32
    %143 = arith.addi %142, %c8_i32_54 : i32
    %c0_i64_55 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_55 : i64
    %146 = llvm.getelementptr %11[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_56 = arith.constant 0 : i64
    %148 = arith.extui %140 : i32 to i64
    %149 = arith.addi %148, %c0_i64_56 : i64
    %150 = llvm.getelementptr %11[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %147, %150 {alignment = 1 : i64} : i64, !llvm.ptr
    %151 = llvm.load %1 : !llvm.ptr -> i32
    %c96_i32_57 = arith.constant 96 : i32
    %152 = arith.addi %151, %c96_i32_57 : i32
    llvm.store %152, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_58 = arith.constant 32 : i32
    %155 = arith.addi %154, %c32_i32_58 : i32
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %157 = arith.addi %155, %156 : i32
    %c0_i64_59 = arith.constant 0 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c0_i64_59 : i64
    %160 = llvm.getelementptr %11[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %161, %6 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %162 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %163 = scf.if %162 -> (i64) {
      %210 = arith.shli %161, %c56_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %164 = llvm.load %6 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %165 = arith.andi %164, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_60 = arith.constant 63 : i64
    %166 = arith.cmpi ule, %c40_i64, %c63_i64_60 : i64
    %167 = scf.if %166 -> (i64) {
      %210 = arith.shli %165, %c40_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %168 = arith.ori %163, %167 : i64
    %169 = llvm.load %6 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %170 = arith.andi %169, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_61 = arith.constant 63 : i64
    %171 = arith.cmpi ule, %c24_i64, %c63_i64_61 : i64
    %172 = scf.if %171 -> (i64) {
      %210 = arith.shli %170, %c24_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %173 = llvm.load %6 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %174 = arith.andi %173, %c4278190080_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %c63_i64_62 = arith.constant 63 : i64
    %175 = arith.cmpi ule, %c8_i64, %c63_i64_62 : i64
    %176 = scf.if %175 -> (i64) {
      %210 = arith.shli %174, %c8_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %177 = arith.ori %172, %176 : i64
    %178 = arith.ori %168, %177 : i64
    %179 = llvm.load %6 : !llvm.ptr -> i64
    %c8_i64_63 = arith.constant 8 : i64
    %c63_i64_64 = arith.constant 63 : i64
    %180 = arith.cmpi ule, %c8_i64_63, %c63_i64_64 : i64
    %181 = scf.if %180 -> (i64) {
      %210 = arith.shrui %179, %c8_i64_63 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %c4278190080_i64_65 = arith.constant 4278190080 : i64
    %182 = arith.andi %181, %c4278190080_i64_65 : i64
    %183 = llvm.load %6 : !llvm.ptr -> i64
    %c24_i64_66 = arith.constant 24 : i64
    %c63_i64_67 = arith.constant 63 : i64
    %184 = arith.cmpi ule, %c24_i64_66, %c63_i64_67 : i64
    %185 = scf.if %184 -> (i64) {
      %210 = arith.shrui %183, %c24_i64_66 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %c16711680_i64_68 = arith.constant 16711680 : i64
    %186 = arith.andi %185, %c16711680_i64_68 : i64
    %187 = arith.ori %182, %186 : i64
    %188 = llvm.load %6 : !llvm.ptr -> i64
    %c40_i64_69 = arith.constant 40 : i64
    %c63_i64_70 = arith.constant 63 : i64
    %189 = arith.cmpi ule, %c40_i64_69, %c63_i64_70 : i64
    %190 = scf.if %189 -> (i64) {
      %210 = arith.shrui %188, %c40_i64_69 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %c65280_i64_71 = arith.constant 65280 : i64
    %191 = arith.andi %190, %c65280_i64_71 : i64
    %192 = llvm.load %6 : !llvm.ptr -> i64
    %c56_i64_72 = arith.constant 56 : i64
    %c63_i64_73 = arith.constant 63 : i64
    %193 = arith.cmpi ule, %c56_i64_72, %c63_i64_73 : i64
    %194 = scf.if %193 -> (i64) {
      %210 = arith.shrui %192, %c56_i64_72 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %195 = arith.ori %191, %194 : i64
    %196 = arith.ori %187, %195 : i64
    %197 = arith.ori %178, %196 : i64
    %c0_i64_74 = arith.constant 0 : i64
    %198 = arith.extui %153 : i32 to i64
    %199 = arith.addi %198, %c0_i64_74 : i64
    %200 = llvm.getelementptr %11[%199] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %197, %200 {alignment = 1 : i64} : i64, !llvm.ptr
    %201 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_75 = arith.constant 8 : i32
    %202 = arith.addi %201, %c8_i32_75 : i32
    llvm.store %202, %3 : i32, !llvm.ptr
    %203 = llvm.load %2 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %204 = arith.addi %203, %c-8_i32 : i32
    llvm.store %204, %2 : i32, !llvm.ptr
    %c-8_i32_76 = arith.constant -8 : i32
    %205 = arith.cmpi eq, %204, %c-8_i32_76 : i32
    %206 = arith.extui %205 : i1 to i32
    %c0_i32_77 = arith.constant 0 : i32
    %207 = arith.cmpi eq, %206, %c0_i32_77 : i32
    %208 = arith.extui %207 : i1 to i32
    %c0_i32_78 = arith.constant 0 : i32
    %209 = arith.cmpi ne, %208, %c0_i32_78 : i32
    cf.cond_br %209, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f25(%arg0: !llvm.ptr) -> i64 {
    %0 = llvm.getelementptr %arg0[328] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.call %2(%4) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr) -> i64
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func @f26(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[352] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %8 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %18 = arith.subi %17, %c96_i32 : i32
    llvm.store %18, %1 : i32, !llvm.ptr
    llvm.store %18, %8 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %2 : i32, !llvm.ptr
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_6 = arith.constant 24 : i32
    %20 = arith.addi %19, %c24_i32_6 : i32
    llvm.store %20, %3 : i32, !llvm.ptr
    %c0_i64_7 = arith.constant 0 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64_8 : i64
    %23 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_7, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %25 = arith.addi %24, %c16_i32 : i32
    llvm.store %25, %4 : i32, !llvm.ptr
    %c0_i64_9 = arith.constant 0 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64_10 : i64
    %28 = llvm.getelementptr %11[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_9, %28 {alignment = 1 : i64} : i64, !llvm.ptr
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %30 = arith.addi %29, %c8_i32 : i32
    llvm.store %30, %5 : i32, !llvm.ptr
    %c0_i64_11 = arith.constant 0 : i64
    %c0_i64_12 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_12 : i64
    %33 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_11, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %c0_i64_14 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_14 : i64
    %37 = llvm.getelementptr %11[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_13, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %39 = llvm.call %14(%16, %38) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %41 = arith.addi %40, %c32_i32 : i32
    %c24_i32_15 = arith.constant 24 : i32
    %42 = arith.addi %41, %c24_i32_15 : i32
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_16 : i64
    %46 = llvm.getelementptr %11[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %48 = arith.extui %42 : i32 to i64
    %49 = arith.addi %48, %c0_i64_17 : i64
    %50 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i64, !llvm.ptr
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_18 = arith.constant 32 : i32
    %52 = arith.addi %51, %c32_i32_18 : i32
    %c16_i32_19 = arith.constant 16 : i32
    %53 = arith.addi %52, %c16_i32_19 : i32
    %54 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c0_i64_20 : i64
    %57 = llvm.getelementptr %11[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %59 = arith.extui %53 : i32 to i64
    %60 = arith.addi %59, %c0_i64_21 : i64
    %61 = llvm.getelementptr %11[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i64, !llvm.ptr
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_22 = arith.constant 32 : i32
    %63 = arith.addi %62, %c32_i32_22 : i32
    %c8_i32_23 = arith.constant 8 : i32
    %64 = arith.addi %63, %c8_i32_23 : i32
    %65 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c0_i64_24 : i64
    %68 = llvm.getelementptr %11[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %70 = arith.extui %64 : i32 to i64
    %71 = arith.addi %70, %c0_i64_25 : i64
    %72 = llvm.getelementptr %11[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c0_i64_26 : i64
    %77 = llvm.getelementptr %11[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %79 = arith.extui %73 : i32 to i64
    %80 = arith.addi %79, %c32_i64 : i64
    %81 = llvm.getelementptr %11[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %81 {alignment = 1 : i64} : i64, !llvm.ptr
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %83 = arith.addi %82, %c64_i32 : i32
    %c24_i32_27 = arith.constant 24 : i32
    %84 = arith.addi %83, %c24_i32_27 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %c0_i64_29 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_29 : i64
    %87 = llvm.getelementptr %11[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_28, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_30 = arith.constant 64 : i32
    %89 = arith.addi %88, %c64_i32_30 : i32
    %c16_i32_31 = arith.constant 16 : i32
    %90 = arith.addi %89, %c16_i32_31 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %c0_i64_33 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64_33 : i64
    %93 = llvm.getelementptr %11[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_32, %93 {alignment = 1 : i64} : i64, !llvm.ptr
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_34 = arith.constant 64 : i32
    %95 = arith.addi %94, %c64_i32_34 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %96 = arith.addi %95, %c8_i32_35 : i32
    %c0_i64_36 = arith.constant 0 : i64
    %c0_i64_37 = arith.constant 0 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c0_i64_37 : i64
    %99 = llvm.getelementptr %11[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_36, %99 {alignment = 1 : i64} : i64, !llvm.ptr
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_38 = arith.constant 0 : i64
    %c64_i64 = arith.constant 64 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c64_i64 : i64
    %103 = llvm.getelementptr %11[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_38, %103 {alignment = 1 : i64} : i64, !llvm.ptr
    %104 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_39 = arith.constant 64 : i32
    %105 = arith.addi %104, %c64_i32_39 : i32
    llvm.store %105, %3 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %106 = llvm.load %0 : !llvm.ptr -> i32
    %107 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i64_40 = arith.constant 64 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c64_i64_40 : i64
    %110 = llvm.getelementptr %11[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %112 = arith.extui %106 : i32 to i64
    %113 = arith.addi %112, %c0_i64_41 : i64
    %114 = llvm.getelementptr %11[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %111, %114 {alignment = 1 : i64} : i64, !llvm.ptr
    %115 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_42 = arith.constant 24 : i32
    %116 = arith.addi %115, %c24_i32_42 : i32
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_43 = arith.constant 64 : i32
    %118 = arith.addi %117, %c64_i32_43 : i32
    %c24_i32_44 = arith.constant 24 : i32
    %119 = arith.addi %118, %c24_i32_44 : i32
    %c0_i64_45 = arith.constant 0 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c0_i64_45 : i64
    %122 = llvm.getelementptr %11[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_46 = arith.constant 0 : i64
    %124 = arith.extui %116 : i32 to i64
    %125 = arith.addi %124, %c0_i64_46 : i64
    %126 = llvm.getelementptr %11[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %123, %126 {alignment = 1 : i64} : i64, !llvm.ptr
    %127 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_47 = arith.constant 16 : i32
    %128 = arith.addi %127, %c16_i32_47 : i32
    %129 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_48 = arith.constant 64 : i32
    %130 = arith.addi %129, %c64_i32_48 : i32
    %c16_i32_49 = arith.constant 16 : i32
    %131 = arith.addi %130, %c16_i32_49 : i32
    %c0_i64_50 = arith.constant 0 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c0_i64_50 : i64
    %134 = llvm.getelementptr %11[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_51 = arith.constant 0 : i64
    %136 = arith.extui %128 : i32 to i64
    %137 = arith.addi %136, %c0_i64_51 : i64
    %138 = llvm.getelementptr %11[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %135, %138 {alignment = 1 : i64} : i64, !llvm.ptr
    %139 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_52 = arith.constant 8 : i32
    %140 = arith.addi %139, %c8_i32_52 : i32
    %141 = llvm.load %1 : !llvm.ptr -> i32
    %c64_i32_53 = arith.constant 64 : i32
    %142 = arith.addi %141, %c64_i32_53 : i32
    %c8_i32_54 = arith.constant 8 : i32
    %143 = arith.addi %142, %c8_i32_54 : i32
    %c0_i64_55 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_55 : i64
    %146 = llvm.getelementptr %11[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_56 = arith.constant 0 : i64
    %148 = arith.extui %140 : i32 to i64
    %149 = arith.addi %148, %c0_i64_56 : i64
    %150 = llvm.getelementptr %11[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %147, %150 {alignment = 1 : i64} : i64, !llvm.ptr
    %151 = llvm.load %1 : !llvm.ptr -> i32
    %c96_i32_57 = arith.constant 96 : i32
    %152 = arith.addi %151, %c96_i32_57 : i32
    llvm.store %152, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_58 = arith.constant 32 : i32
    %155 = arith.addi %154, %c32_i32_58 : i32
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %157 = arith.addi %155, %156 : i32
    %c0_i64_59 = arith.constant 0 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c0_i64_59 : i64
    %160 = llvm.getelementptr %11[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %161, %6 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %162 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %163 = scf.if %162 -> (i64) {
      %210 = arith.shli %161, %c56_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %164 = llvm.load %6 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %165 = arith.andi %164, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_60 = arith.constant 63 : i64
    %166 = arith.cmpi ule, %c40_i64, %c63_i64_60 : i64
    %167 = scf.if %166 -> (i64) {
      %210 = arith.shli %165, %c40_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %168 = arith.ori %163, %167 : i64
    %169 = llvm.load %6 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %170 = arith.andi %169, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_61 = arith.constant 63 : i64
    %171 = arith.cmpi ule, %c24_i64, %c63_i64_61 : i64
    %172 = scf.if %171 -> (i64) {
      %210 = arith.shli %170, %c24_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %173 = llvm.load %6 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %174 = arith.andi %173, %c4278190080_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %c63_i64_62 = arith.constant 63 : i64
    %175 = arith.cmpi ule, %c8_i64, %c63_i64_62 : i64
    %176 = scf.if %175 -> (i64) {
      %210 = arith.shli %174, %c8_i64 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %177 = arith.ori %172, %176 : i64
    %178 = arith.ori %168, %177 : i64
    %179 = llvm.load %6 : !llvm.ptr -> i64
    %c8_i64_63 = arith.constant 8 : i64
    %c63_i64_64 = arith.constant 63 : i64
    %180 = arith.cmpi ule, %c8_i64_63, %c63_i64_64 : i64
    %181 = scf.if %180 -> (i64) {
      %210 = arith.shrui %179, %c8_i64_63 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %c4278190080_i64_65 = arith.constant 4278190080 : i64
    %182 = arith.andi %181, %c4278190080_i64_65 : i64
    %183 = llvm.load %6 : !llvm.ptr -> i64
    %c24_i64_66 = arith.constant 24 : i64
    %c63_i64_67 = arith.constant 63 : i64
    %184 = arith.cmpi ule, %c24_i64_66, %c63_i64_67 : i64
    %185 = scf.if %184 -> (i64) {
      %210 = arith.shrui %183, %c24_i64_66 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %c16711680_i64_68 = arith.constant 16711680 : i64
    %186 = arith.andi %185, %c16711680_i64_68 : i64
    %187 = arith.ori %182, %186 : i64
    %188 = llvm.load %6 : !llvm.ptr -> i64
    %c40_i64_69 = arith.constant 40 : i64
    %c63_i64_70 = arith.constant 63 : i64
    %189 = arith.cmpi ule, %c40_i64_69, %c63_i64_70 : i64
    %190 = scf.if %189 -> (i64) {
      %210 = arith.shrui %188, %c40_i64_69 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %c65280_i64_71 = arith.constant 65280 : i64
    %191 = arith.andi %190, %c65280_i64_71 : i64
    %192 = llvm.load %6 : !llvm.ptr -> i64
    %c56_i64_72 = arith.constant 56 : i64
    %c63_i64_73 = arith.constant 63 : i64
    %193 = arith.cmpi ule, %c56_i64_72, %c63_i64_73 : i64
    %194 = scf.if %193 -> (i64) {
      %210 = arith.shrui %192, %c56_i64_72 : i64
      scf.yield %210 : i64
    } else {
      %c0_i64_79 = arith.constant 0 : i64
      scf.yield %c0_i64_79 : i64
    }
    %195 = arith.ori %191, %194 : i64
    %196 = arith.ori %187, %195 : i64
    %197 = arith.ori %178, %196 : i64
    %c0_i64_74 = arith.constant 0 : i64
    %198 = arith.extui %153 : i32 to i64
    %199 = arith.addi %198, %c0_i64_74 : i64
    %200 = llvm.getelementptr %11[%199] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %197, %200 {alignment = 1 : i64} : i64, !llvm.ptr
    %201 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_75 = arith.constant 8 : i32
    %202 = arith.addi %201, %c8_i32_75 : i32
    llvm.store %202, %3 : i32, !llvm.ptr
    %203 = llvm.load %2 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %204 = arith.addi %203, %c-8_i32 : i32
    llvm.store %204, %2 : i32, !llvm.ptr
    %c-8_i32_76 = arith.constant -8 : i32
    %205 = arith.cmpi eq, %204, %c-8_i32_76 : i32
    %206 = arith.extui %205 : i1 to i32
    %c0_i32_77 = arith.constant 0 : i32
    %207 = arith.cmpi eq, %206, %c0_i32_77 : i32
    %208 = arith.extui %207 : i1 to i32
    %c0_i32_78 = arith.constant 0 : i32
    %209 = arith.cmpi ne, %208, %c0_i32_78 : i32
    cf.cond_br %209, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f27(%arg0: !llvm.ptr) -> i64 {
    %0 = llvm.getelementptr %arg0[376] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.call %2(%4) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr) -> i64
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func @f28(%arg0: !llvm.ptr) -> i64 {
    %0 = llvm.getelementptr %arg0[400] : (!llvm.ptr) -> !llvm.ptr, i8
    %1 = llvm.getelementptr %0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.call %2(%4) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr) -> i64
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func @f29(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %9 = arith.cmpi eq, %8, %c-2147483648_i32 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %0 : !llvm.ptr -> i32
    call @f112(%arg0, %12) : (!llvm.ptr, i32) -> ()
    %13 = llvm.load %0 : !llvm.ptr -> i32
    call @f113(%arg0, %13) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  }
  func.func @f30(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> i32
    %7 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %8 : !llvm.ptr -> i64
    %11 = arith.trunci %10 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %4[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %1 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %17 = arith.addi %16, %c-2147483647_i32 : i32
    %c0_i32_1 = arith.constant 0 : i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %19 = arith.cmpi slt, %18, %c-2147483638_i32 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_2 : i32
    %22 = arith.select %21, %17, %c0_i32_1 : i32
    llvm.store %22, %1 : i32, !llvm.ptr
    %c9_i32 = arith.constant 9 : i32
    %23 = arith.cmpi ugt, %22, %c9_i32 : i32
    %24 = arith.extui %23 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_3 : i32
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // 3 preds: ^bb3, ^bb6, ^bb15
    return
  ^bb3:  // pred: ^bb1
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %27 = arith.addi %26, %c4_i32 : i32
    call @f29(%arg0, %27) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_4 = arith.constant 1 : i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %29 = arith.cmpi ule, %28, %c31_i32 : i32
    %30 = scf.if %29 -> (i32) {
      %81 = arith.shli %c1_i32_4, %28 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_13 = arith.constant 0 : i32
      scf.yield %c0_i32_13 : i32
    }
    %c894_i32 = arith.constant 894 : i32
    %31 = arith.andi %30, %c894_i32 : i32
    %c0_i32_5 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_5 : i32
    cf.cond_br %32, ^bb6, ^bb7
  ^bb5:  // pred: ^bb7
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c12_i64 : i64
    %36 = llvm.getelementptr %4[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %37, %0 : i32, !llvm.ptr
    call @f94(%arg0, %37) : (!llvm.ptr, i32) -> ()
    %38 = llvm.load %0 : !llvm.ptr -> i32
    call @f95(%arg0, %38) : (!llvm.ptr, i32) -> ()
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %40 = arith.addi %39, %c24_i32 : i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c16_i64 : i64
    %44 = llvm.getelementptr %4[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c20_i64 : i64
    %49 = llvm.getelementptr %4[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i32
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_6 = arith.constant 12 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c12_i64_6 : i64
    %54 = llvm.getelementptr %4[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c16_i64_7 = arith.constant 16 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c16_i64_7 : i64
    %58 = llvm.getelementptr %4[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi ult, %59, %11 : i32
    cf.cond_br %60, ^bb9, ^bb10
  ^bb6:  // 2 preds: ^bb4, ^bb8
    cf.br ^bb2
  ^bb7:  // pred: ^bb4
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_8 : i32
    cf.cond_br %62, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %64 = arith.addi %63, %c12_i32 : i32
    call @f29(%arg0, %64) : (!llvm.ptr, i32) -> ()
    %65 = llvm.load %0 : !llvm.ptr -> i32
    call @f112(%arg0, %65) : (!llvm.ptr, i32) -> ()
    %66 = llvm.load %0 : !llvm.ptr -> i32
    call @f113(%arg0, %66) : (!llvm.ptr, i32) -> ()
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb5, ^bb10
    %67 = llvm.getelementptr inbounds %9[%59] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %68 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64_9 = arith.constant 0 : i64
    %70 = arith.cmpi eq, %69, %c0_i64_9 : i64
    cf.cond_br %70, ^bb12, ^bb11
  ^bb10:  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %71 = llvm.getelementptr %68[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %72 = llvm.getelementptr %68[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %73 = llvm.getelementptr %68[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %74 = llvm.load %71 : !llvm.ptr -> !llvm.ptr
    %75 = llvm.load %73 : !llvm.ptr -> !llvm.ptr
    %76 = llvm.ptrtoint %74 : !llvm.ptr to i64
    %c0_i64_10 = arith.constant 0 : i64
    %77 = arith.cmpi eq, %76, %c0_i64_10 : i64
    cf.cond_br %77, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c4_i32_11 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_11) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %78 = llvm.load %72 : !llvm.ptr -> i32
    %79 = arith.cmpi ne, %6, %78 : i32
    cf.cond_br %79, ^bb16, ^bb15
  ^bb14:  // pred: ^bb11
    %c3_i32_12 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_12) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %80 = llvm.call %74(%75, %40, %45, %50) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    cf.br ^bb2
  ^bb16:  // pred: ^bb13
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb15
  }
  func.func @f31(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %11 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.load %12 : !llvm.ptr -> i64
    %15 = arith.trunci %14 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %16 = llvm.load %5 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %17 = arith.subi %16, %c80_i32 : i32
    llvm.store %17, %3 : i32, !llvm.ptr
    llvm.store %17, %5 : i32, !llvm.ptr
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %20 = arith.extui %18 : i32 to i64
    %21 = arith.addi %20, %c4_i64 : i64
    %22 = llvm.getelementptr %8[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %19, %22 {alignment = 1 : i64} : i32, !llvm.ptr
    %23 = llvm.load %3 : !llvm.ptr -> i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %25 = arith.extui %23 : i32 to i64
    %26 = arith.addi %25, %c0_i64 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1054568_i32 = arith.constant 1054568 : i32
    llvm.store %c1054568_i32, %2 : i32, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c1054604_i64 = arith.constant 1054604 : i64
    %28 = arith.extui %c0_i32_3 : i32 to i64
    %29 = arith.addi %28, %c1054604_i64 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i8
    %32 = arith.extui %31 : i8 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %33 = arith.cmpi ne, %32, %c0_i32_4 : i32
    cf.cond_br %33, ^bb3, ^bb4
  ^bb2:  // pred: ^bb13
    return
  ^bb3:  // 2 preds: ^bb1, ^bb11
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %35 = arith.addi %34, %c8_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %36 = arith.addi %35, %c24_i32 : i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_5 = arith.constant 24 : i32
    %38 = arith.addi %37, %c24_i32_5 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c0_i64_6 : i64
    %41 = llvm.getelementptr %8[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_7 = arith.constant 0 : i64
    %43 = arith.extui %36 : i32 to i64
    %44 = arith.addi %43, %c0_i64_7 : i64
    %45 = llvm.getelementptr %8[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %42, %45 {alignment = 1 : i64} : i64, !llvm.ptr
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_8 = arith.constant 8 : i32
    %47 = arith.addi %46, %c8_i32_8 : i32
    %c16_i32 = arith.constant 16 : i32
    %48 = arith.addi %47, %c16_i32 : i32
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_9 = arith.constant 16 : i32
    %50 = arith.addi %49, %c16_i32_9 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c0_i64_10 : i64
    %53 = llvm.getelementptr %8[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %55 = arith.extui %48 : i32 to i64
    %56 = arith.addi %55, %c0_i64_11 : i64
    %57 = llvm.getelementptr %8[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %57 {alignment = 1 : i64} : i64, !llvm.ptr
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_12 = arith.constant 8 : i32
    %59 = arith.addi %58, %c8_i32_12 : i32
    %c8_i32_13 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32_13 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_14 = arith.constant 8 : i32
    %62 = arith.addi %61, %c8_i32_14 : i32
    %c0_i64_15 = arith.constant 0 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c0_i64_15 : i64
    %65 = llvm.getelementptr %8[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %67 = arith.extui %60 : i32 to i64
    %68 = arith.addi %67, %c0_i64_16 : i64
    %69 = llvm.getelementptr %8[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %66, %69 {alignment = 1 : i64} : i64, !llvm.ptr
    %70 = llvm.load %3 : !llvm.ptr -> i32
    %71 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c0_i64_17 : i64
    %74 = llvm.getelementptr %8[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = llvm.load volatile %74 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64 = arith.constant 8 : i64
    %76 = arith.extui %70 : i32 to i64
    %77 = arith.addi %76, %c8_i64 : i64
    %78 = llvm.getelementptr %8[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %75, %78 {alignment = 1 : i64} : i64, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    llvm.store %c-2147483648_i32, %2 : i32, !llvm.ptr
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %80 = arith.addi %79, %c8_i32_18 : i32
    %c1049440_i32 = arith.constant 1049440 : i32
    %81 = call @f104(%arg0, %80, %c1049440_i32) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_19 : i32
    cf.cond_br %82, ^bb13, ^bb14
  ^bb4:  // pred: ^bb1
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %84 = arith.addi %83, %c48_i32 : i32
    %c0_i32_20 = arith.constant 0 : i32
    %c1054600_i64 = arith.constant 1054600 : i64
    %85 = arith.extui %c0_i32_20 : i32 to i64
    %86 = arith.addi %85, %c1054600_i64 : i64
    %87 = llvm.getelementptr %8[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i32
    %89 = arith.cmpi ult, %88, %15 : i32
    cf.cond_br %89, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %90 = llvm.getelementptr inbounds %13[%88] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %91 = llvm.load %90 : !llvm.ptr -> !llvm.ptr
    %92 = llvm.ptrtoint %91 : !llvm.ptr to i64
    %c0_i64_21 = arith.constant 0 : i64
    %93 = arith.cmpi eq, %92, %c0_i64_21 : i64
    cf.cond_br %93, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %94 = llvm.getelementptr %91[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %95 = llvm.getelementptr %91[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %96 = llvm.getelementptr %91[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %97 = llvm.load %94 : !llvm.ptr -> !llvm.ptr
    %98 = llvm.load %96 : !llvm.ptr -> !llvm.ptr
    %99 = llvm.ptrtoint %97 : !llvm.ptr to i64
    %c0_i64_22 = arith.constant 0 : i64
    %100 = arith.cmpi eq, %99, %c0_i64_22 : i64
    cf.cond_br %100, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %101 = llvm.load %95 : !llvm.ptr -> i32
    %102 = arith.cmpi ne, %10, %101 : i32
    cf.cond_br %102, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_23 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_23) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %103 = llvm.call %97(%98, %84) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %c0_i32_24 = arith.constant 0 : i32
    %c1_i32_25 = arith.constant 1 : i32
    %c1054604_i64_26 = arith.constant 1054604 : i64
    %104 = arith.extui %c0_i32_24 : i32 to i64
    %105 = arith.addi %104, %c1054604_i64_26 : i64
    %106 = llvm.getelementptr %8[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = arith.trunci %c1_i32_25 : i32 to i8
    llvm.store volatile %107, %106 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %109 = arith.addi %108, %c72_i32 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c0_i64_28 : i64
    %112 = llvm.getelementptr %8[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = llvm.load volatile %112 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1054592_i64 = arith.constant 1054592 : i64
    %114 = arith.extui %c0_i32_27 : i32 to i64
    %115 = arith.addi %114, %c1054592_i64 : i64
    %116 = llvm.getelementptr %8[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %113, %116 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    %117 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %118 = arith.addi %117, %c64_i32 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %119 = arith.extui %118 : i32 to i64
    %120 = arith.addi %119, %c0_i64_30 : i64
    %121 = llvm.getelementptr %8[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = llvm.load volatile %121 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1054584_i64 = arith.constant 1054584 : i64
    %123 = arith.extui %c0_i32_29 : i32 to i64
    %124 = arith.addi %123, %c1054584_i64 : i64
    %125 = llvm.getelementptr %8[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %122, %125 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_31 = arith.constant 0 : i32
    %126 = llvm.load %3 : !llvm.ptr -> i32
    %c56_i32 = arith.constant 56 : i32
    %127 = arith.addi %126, %c56_i32 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %128 = arith.extui %127 : i32 to i64
    %129 = arith.addi %128, %c0_i64_32 : i64
    %130 = llvm.getelementptr %8[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = llvm.load volatile %130 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1054576_i64 = arith.constant 1054576 : i64
    %132 = arith.extui %c0_i32_31 : i32 to i64
    %133 = arith.addi %132, %c1054576_i64 : i64
    %134 = llvm.getelementptr %8[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %131, %134 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_33 = arith.constant 0 : i32
    %135 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i64 = arith.constant 48 : i64
    %136 = arith.extui %135 : i32 to i64
    %137 = arith.addi %136, %c48_i64 : i64
    %138 = llvm.getelementptr %8[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load volatile %138 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c1054568_i64 = arith.constant 1054568 : i64
    %140 = arith.extui %c0_i32_33 : i32 to i64
    %141 = arith.addi %140, %c1054568_i64 : i64
    %142 = llvm.getelementptr %8[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %139, %142 {alignment = 1 : i64} : i64, !llvm.ptr
    %143 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_34 = arith.constant 48 : i32
    %144 = arith.addi %143, %c48_i32_34 : i32
    llvm.store %144, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb3, ^bb14
    %145 = llvm.load %0 : !llvm.ptr -> i32
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %147 = arith.extui %145 : i32 to i64
    %148 = arith.addi %147, %c0_i64_35 : i64
    %149 = llvm.getelementptr %8[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %146, %149 {alignment = 1 : i64} : i32, !llvm.ptr
    %150 = llvm.load %3 : !llvm.ptr -> i32
    %c80_i32_36 = arith.constant 80 : i32
    %151 = arith.addi %150, %c80_i32_36 : i32
    llvm.store %151, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb14:  // pred: ^bb3
    %152 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c52_i64 = arith.constant 52 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c52_i64 : i64
    %155 = llvm.getelementptr %8[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %155 {alignment = 1 : i64} : i32, !llvm.ptr
    %156 = llvm.load %3 : !llvm.ptr -> i32
    %c1049492_i32 = arith.constant 1049492 : i32
    %c48_i64_37 = arith.constant 48 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c48_i64_37 : i64
    %159 = llvm.getelementptr %8[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049492_i32, %159 {alignment = 1 : i64} : i32, !llvm.ptr
    %160 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c60_i64 = arith.constant 60 : i64
    %161 = arith.extui %160 : i32 to i64
    %162 = arith.addi %161, %c60_i64 : i64
    %163 = llvm.getelementptr %8[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %163 {alignment = 1 : i64} : i64, !llvm.ptr
    %164 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %c44_i64 = arith.constant 44 : i64
    %165 = arith.extui %164 : i32 to i64
    %166 = arith.addi %165, %c44_i64 : i64
    %167 = llvm.getelementptr %8[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c36_i32, %167 {alignment = 1 : i64} : i32, !llvm.ptr
    %168 = llvm.load %3 : !llvm.ptr -> i32
    %169 = llvm.load %3 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %170 = arith.addi %169, %c40_i32 : i32
    %c56_i64 = arith.constant 56 : i64
    %171 = arith.extui %168 : i32 to i64
    %172 = arith.addi %171, %c56_i64 : i64
    %173 = llvm.getelementptr %8[%172] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %170, %173 {alignment = 1 : i64} : i32, !llvm.ptr
    %174 = llvm.load %3 : !llvm.ptr -> i32
    %175 = llvm.load %3 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %176 = arith.extui %174 : i32 to i64
    %177 = arith.addi %176, %c40_i64 : i64
    %178 = llvm.getelementptr %8[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %175, %178 {alignment = 1 : i64} : i32, !llvm.ptr
    %179 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_38 = arith.constant 8 : i32
    %180 = arith.addi %179, %c8_i32_38 : i32
    %181 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_39 = arith.constant 48 : i32
    %182 = arith.addi %181, %c48_i32_39 : i32
    call @f152(%arg0, %180, %182) : (!llvm.ptr, i32, i32) -> ()
    %183 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_40 = arith.constant 8 : i32
    %184 = arith.addi %183, %c8_i32_40 : i32
    call @f32(%arg0, %184) : (!llvm.ptr, i32) -> ()
    %185 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i64_41 = arith.constant 1 : i64
    %c4_i64_42 = arith.constant 4 : i64
    %186 = arith.extui %185 : i32 to i64
    %187 = arith.addi %186, %c4_i64_42 : i64
    %188 = llvm.getelementptr %8[%187] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64_41, %188 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_43 = arith.constant 0 : i32
    llvm.store %c0_i32_43, %2 : i32, !llvm.ptr
    cf.br ^bb13
  }
  func.func @f32(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[424] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %4[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c4_i64 : i64
    %12 = llvm.getelementptr %3[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c8_i64 : i64
    %17 = llvm.getelementptr %3[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.call %6(%8, %13, %18) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %20 = llvm.load %0 : !llvm.ptr -> i32
    call @f112(%arg0, %20) : (!llvm.ptr, i32) -> ()
    %21 = llvm.load %0 : !llvm.ptr -> i32
    call @f113(%arg0, %21) : (!llvm.ptr, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f33(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %8 = arith.subi %7, %c48_i32 : i32
    llvm.store %8, %1 : i32, !llvm.ptr
    llvm.store %8, %3 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %c20_i64 = arith.constant 20 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c20_i64 : i64
    %12 = llvm.getelementptr %6[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1, %12 {alignment = 1 : i64} : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c1049536_i32 = arith.constant 1049536 : i32
    %c16_i64 = arith.constant 16 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c16_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049536_i32, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c28_i64 = arith.constant 28 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c28_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %20 {alignment = 1 : i64} : i64, !llvm.ptr
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c37_i32 = arith.constant 37 : i32
    %c44_i64 = arith.constant 44 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c44_i64 : i64
    %24 = llvm.getelementptr %6[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c37_i32, %24 {alignment = 1 : i64} : i32, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %27 = arith.extui %25 : i32 to i64
    %28 = arith.addi %27, %c40_i64 : i64
    %29 = llvm.getelementptr %6[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %26, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %32 = arith.addi %31, %c40_i32 : i32
    %c24_i64 = arith.constant 24 : i64
    %33 = arith.extui %30 : i32 to i64
    %34 = arith.addi %33, %c24_i64 : i64
    %35 = llvm.getelementptr %6[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %37 = arith.addi %36, %c4_i32 : i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %39 = arith.addi %38, %c16_i32 : i32
    call @f152(%arg0, %37, %39) : (!llvm.ptr, i32, i32) -> ()
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_2 = arith.constant 4 : i32
    %41 = arith.addi %40, %c4_i32_2 : i32
    call @f32(%arg0, %41) : (!llvm.ptr, i32) -> ()
    %42 = llvm.load %0 : !llvm.ptr -> i32
    call @f30(%arg0, %42) : (!llvm.ptr, i32) -> ()
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c48_i32_3 = arith.constant 48 : i32
    %44 = arith.addi %43, %c48_i32_3 : i32
    llvm.store %44, %3 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f34(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[880] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %18 = llvm.load %9 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %19 = arith.subi %18, %c96_i32 : i32
    llvm.store %19, %2 : i32, !llvm.ptr
    llvm.store %19, %9 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    llvm.store %c24_i32, %3 : i32, !llvm.ptr
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_7 = arith.constant 24 : i32
    %21 = arith.addi %20, %c24_i32_7 : i32
    llvm.store %21, %4 : i32, !llvm.ptr
    %c0_i64_8 = arith.constant 0 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c0_i64_9 : i64
    %24 = llvm.getelementptr %12[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_8, %24 {alignment = 1 : i64} : i64, !llvm.ptr
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %26 = arith.addi %25, %c16_i32 : i32
    llvm.store %26, %5 : i32, !llvm.ptr
    %c0_i64_10 = arith.constant 0 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c0_i64_11 : i64
    %29 = llvm.getelementptr %12[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_10, %29 {alignment = 1 : i64} : i64, !llvm.ptr
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %31 = arith.addi %30, %c8_i32 : i32
    llvm.store %31, %6 : i32, !llvm.ptr
    %c0_i64_12 = arith.constant 0 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c0_i64_13 : i64
    %34 = llvm.getelementptr %12[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_12, %34 {alignment = 1 : i64} : i64, !llvm.ptr
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %c0_i64_15 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_15 : i64
    %38 = llvm.getelementptr %12[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_14, %38 {alignment = 1 : i64} : i64, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %41 = llvm.call %15(%17, %39, %40) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %43 = arith.addi %42, %c32_i32 : i32
    %c24_i32_16 = arith.constant 24 : i32
    %44 = arith.addi %43, %c24_i32_16 : i32
    %45 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c0_i64_17 : i64
    %48 = llvm.getelementptr %12[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_18 = arith.constant 0 : i64
    %50 = arith.extui %44 : i32 to i64
    %51 = arith.addi %50, %c0_i64_18 : i64
    %52 = llvm.getelementptr %12[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_19 = arith.constant 32 : i32
    %54 = arith.addi %53, %c32_i32_19 : i32
    %c16_i32_20 = arith.constant 16 : i32
    %55 = arith.addi %54, %c16_i32_20 : i32
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c0_i64_21 : i64
    %59 = llvm.getelementptr %12[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_22 = arith.constant 0 : i64
    %61 = arith.extui %55 : i32 to i64
    %62 = arith.addi %61, %c0_i64_22 : i64
    %63 = llvm.getelementptr %12[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_23 = arith.constant 32 : i32
    %65 = arith.addi %64, %c32_i32_23 : i32
    %c8_i32_24 = arith.constant 8 : i32
    %66 = arith.addi %65, %c8_i32_24 : i32
    %67 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_25 : i64
    %70 = llvm.getelementptr %12[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_26 = arith.constant 0 : i64
    %72 = arith.extui %66 : i32 to i64
    %73 = arith.addi %72, %c0_i64_26 : i64
    %74 = llvm.getelementptr %12[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %71, %74 {alignment = 1 : i64} : i64, !llvm.ptr
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_27 = arith.constant 0 : i64
    %77 = arith.extui %76 : i32 to i64
    %78 = arith.addi %77, %c0_i64_27 : i64
    %79 = llvm.getelementptr %12[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %81 = arith.extui %75 : i32 to i64
    %82 = arith.addi %81, %c32_i64 : i64
    %83 = llvm.getelementptr %12[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i64, !llvm.ptr
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %85 = arith.addi %84, %c64_i32 : i32
    %c24_i32_28 = arith.constant 24 : i32
    %86 = arith.addi %85, %c24_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %c0_i64_30 = arith.constant 0 : i64
    %87 = arith.extui %86 : i32 to i64
    %88 = arith.addi %87, %c0_i64_30 : i64
    %89 = llvm.getelementptr %12[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_29, %89 {alignment = 1 : i64} : i64, !llvm.ptr
    %90 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_31 = arith.constant 64 : i32
    %91 = arith.addi %90, %c64_i32_31 : i32
    %c16_i32_32 = arith.constant 16 : i32
    %92 = arith.addi %91, %c16_i32_32 : i32
    %c0_i64_33 = arith.constant 0 : i64
    %c0_i64_34 = arith.constant 0 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c0_i64_34 : i64
    %95 = llvm.getelementptr %12[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_33, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_35 = arith.constant 64 : i32
    %97 = arith.addi %96, %c64_i32_35 : i32
    %c8_i32_36 = arith.constant 8 : i32
    %98 = arith.addi %97, %c8_i32_36 : i32
    %c0_i64_37 = arith.constant 0 : i64
    %c0_i64_38 = arith.constant 0 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c0_i64_38 : i64
    %101 = llvm.getelementptr %12[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_37, %101 {alignment = 1 : i64} : i64, !llvm.ptr
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_39 = arith.constant 0 : i64
    %c64_i64 = arith.constant 64 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c64_i64 : i64
    %105 = llvm.getelementptr %12[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_39, %105 {alignment = 1 : i64} : i64, !llvm.ptr
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_40 = arith.constant 64 : i32
    %107 = arith.addi %106, %c64_i32_40 : i32
    llvm.store %107, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %108 = llvm.load %0 : !llvm.ptr -> i32
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i64_41 = arith.constant 64 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c64_i64_41 : i64
    %112 = llvm.getelementptr %12[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = llvm.load volatile %112 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_42 = arith.constant 0 : i64
    %114 = arith.extui %108 : i32 to i64
    %115 = arith.addi %114, %c0_i64_42 : i64
    %116 = llvm.getelementptr %12[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %113, %116 {alignment = 1 : i64} : i64, !llvm.ptr
    %117 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_43 = arith.constant 24 : i32
    %118 = arith.addi %117, %c24_i32_43 : i32
    %119 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_44 = arith.constant 64 : i32
    %120 = arith.addi %119, %c64_i32_44 : i32
    %c24_i32_45 = arith.constant 24 : i32
    %121 = arith.addi %120, %c24_i32_45 : i32
    %c0_i64_46 = arith.constant 0 : i64
    %122 = arith.extui %121 : i32 to i64
    %123 = arith.addi %122, %c0_i64_46 : i64
    %124 = llvm.getelementptr %12[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %125 = llvm.load volatile %124 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_47 = arith.constant 0 : i64
    %126 = arith.extui %118 : i32 to i64
    %127 = arith.addi %126, %c0_i64_47 : i64
    %128 = llvm.getelementptr %12[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %125, %128 {alignment = 1 : i64} : i64, !llvm.ptr
    %129 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_48 = arith.constant 16 : i32
    %130 = arith.addi %129, %c16_i32_48 : i32
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_49 = arith.constant 64 : i32
    %132 = arith.addi %131, %c64_i32_49 : i32
    %c16_i32_50 = arith.constant 16 : i32
    %133 = arith.addi %132, %c16_i32_50 : i32
    %c0_i64_51 = arith.constant 0 : i64
    %134 = arith.extui %133 : i32 to i64
    %135 = arith.addi %134, %c0_i64_51 : i64
    %136 = llvm.getelementptr %12[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = llvm.load volatile %136 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_52 = arith.constant 0 : i64
    %138 = arith.extui %130 : i32 to i64
    %139 = arith.addi %138, %c0_i64_52 : i64
    %140 = llvm.getelementptr %12[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %137, %140 {alignment = 1 : i64} : i64, !llvm.ptr
    %141 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_53 = arith.constant 8 : i32
    %142 = arith.addi %141, %c8_i32_53 : i32
    %143 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_54 = arith.constant 64 : i32
    %144 = arith.addi %143, %c64_i32_54 : i32
    %c8_i32_55 = arith.constant 8 : i32
    %145 = arith.addi %144, %c8_i32_55 : i32
    %c0_i64_56 = arith.constant 0 : i64
    %146 = arith.extui %145 : i32 to i64
    %147 = arith.addi %146, %c0_i64_56 : i64
    %148 = llvm.getelementptr %12[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %149 = llvm.load volatile %148 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_57 = arith.constant 0 : i64
    %150 = arith.extui %142 : i32 to i64
    %151 = arith.addi %150, %c0_i64_57 : i64
    %152 = llvm.getelementptr %12[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %149, %152 {alignment = 1 : i64} : i64, !llvm.ptr
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %c96_i32_58 = arith.constant 96 : i32
    %154 = arith.addi %153, %c96_i32_58 : i32
    llvm.store %154, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %155 = llvm.load %1 : !llvm.ptr -> i32
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_59 = arith.constant 32 : i32
    %157 = arith.addi %156, %c32_i32_59 : i32
    %158 = llvm.load %3 : !llvm.ptr -> i32
    %159 = arith.addi %157, %158 : i32
    %c0_i64_60 = arith.constant 0 : i64
    %160 = arith.extui %159 : i32 to i64
    %161 = arith.addi %160, %c0_i64_60 : i64
    %162 = llvm.getelementptr %12[%161] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %163 = llvm.load volatile %162 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %163, %7 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %164 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %165 = scf.if %164 -> (i64) {
      %212 = arith.shli %163, %c56_i64 : i64
      scf.yield %212 : i64
    } else {
      %c0_i64_80 = arith.constant 0 : i64
      scf.yield %c0_i64_80 : i64
    }
    %166 = llvm.load %7 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %167 = arith.andi %166, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_61 = arith.constant 63 : i64
    %168 = arith.cmpi ule, %c40_i64, %c63_i64_61 : i64
    %169 = scf.if %168 -> (i64) {
      %212 = arith.shli %167, %c40_i64 : i64
      scf.yield %212 : i64
    } else {
      %c0_i64_80 = arith.constant 0 : i64
      scf.yield %c0_i64_80 : i64
    }
    %170 = arith.ori %165, %169 : i64
    %171 = llvm.load %7 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %172 = arith.andi %171, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_62 = arith.constant 63 : i64
    %173 = arith.cmpi ule, %c24_i64, %c63_i64_62 : i64
    %174 = scf.if %173 -> (i64) {
      %212 = arith.shli %172, %c24_i64 : i64
      scf.yield %212 : i64
    } else {
      %c0_i64_80 = arith.constant 0 : i64
      scf.yield %c0_i64_80 : i64
    }
    %175 = llvm.load %7 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %176 = arith.andi %175, %c4278190080_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %c63_i64_63 = arith.constant 63 : i64
    %177 = arith.cmpi ule, %c8_i64, %c63_i64_63 : i64
    %178 = scf.if %177 -> (i64) {
      %212 = arith.shli %176, %c8_i64 : i64
      scf.yield %212 : i64
    } else {
      %c0_i64_80 = arith.constant 0 : i64
      scf.yield %c0_i64_80 : i64
    }
    %179 = arith.ori %174, %178 : i64
    %180 = arith.ori %170, %179 : i64
    %181 = llvm.load %7 : !llvm.ptr -> i64
    %c8_i64_64 = arith.constant 8 : i64
    %c63_i64_65 = arith.constant 63 : i64
    %182 = arith.cmpi ule, %c8_i64_64, %c63_i64_65 : i64
    %183 = scf.if %182 -> (i64) {
      %212 = arith.shrui %181, %c8_i64_64 : i64
      scf.yield %212 : i64
    } else {
      %c0_i64_80 = arith.constant 0 : i64
      scf.yield %c0_i64_80 : i64
    }
    %c4278190080_i64_66 = arith.constant 4278190080 : i64
    %184 = arith.andi %183, %c4278190080_i64_66 : i64
    %185 = llvm.load %7 : !llvm.ptr -> i64
    %c24_i64_67 = arith.constant 24 : i64
    %c63_i64_68 = arith.constant 63 : i64
    %186 = arith.cmpi ule, %c24_i64_67, %c63_i64_68 : i64
    %187 = scf.if %186 -> (i64) {
      %212 = arith.shrui %185, %c24_i64_67 : i64
      scf.yield %212 : i64
    } else {
      %c0_i64_80 = arith.constant 0 : i64
      scf.yield %c0_i64_80 : i64
    }
    %c16711680_i64_69 = arith.constant 16711680 : i64
    %188 = arith.andi %187, %c16711680_i64_69 : i64
    %189 = arith.ori %184, %188 : i64
    %190 = llvm.load %7 : !llvm.ptr -> i64
    %c40_i64_70 = arith.constant 40 : i64
    %c63_i64_71 = arith.constant 63 : i64
    %191 = arith.cmpi ule, %c40_i64_70, %c63_i64_71 : i64
    %192 = scf.if %191 -> (i64) {
      %212 = arith.shrui %190, %c40_i64_70 : i64
      scf.yield %212 : i64
    } else {
      %c0_i64_80 = arith.constant 0 : i64
      scf.yield %c0_i64_80 : i64
    }
    %c65280_i64_72 = arith.constant 65280 : i64
    %193 = arith.andi %192, %c65280_i64_72 : i64
    %194 = llvm.load %7 : !llvm.ptr -> i64
    %c56_i64_73 = arith.constant 56 : i64
    %c63_i64_74 = arith.constant 63 : i64
    %195 = arith.cmpi ule, %c56_i64_73, %c63_i64_74 : i64
    %196 = scf.if %195 -> (i64) {
      %212 = arith.shrui %194, %c56_i64_73 : i64
      scf.yield %212 : i64
    } else {
      %c0_i64_80 = arith.constant 0 : i64
      scf.yield %c0_i64_80 : i64
    }
    %197 = arith.ori %193, %196 : i64
    %198 = arith.ori %189, %197 : i64
    %199 = arith.ori %180, %198 : i64
    %c0_i64_75 = arith.constant 0 : i64
    %200 = arith.extui %155 : i32 to i64
    %201 = arith.addi %200, %c0_i64_75 : i64
    %202 = llvm.getelementptr %12[%201] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %199, %202 {alignment = 1 : i64} : i64, !llvm.ptr
    %203 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_76 = arith.constant 8 : i32
    %204 = arith.addi %203, %c8_i32_76 : i32
    llvm.store %204, %1 : i32, !llvm.ptr
    %205 = llvm.load %3 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %206 = arith.addi %205, %c-8_i32 : i32
    llvm.store %206, %3 : i32, !llvm.ptr
    %c-8_i32_77 = arith.constant -8 : i32
    %207 = arith.cmpi eq, %206, %c-8_i32_77 : i32
    %208 = arith.extui %207 : i1 to i32
    %c0_i32_78 = arith.constant 0 : i32
    %209 = arith.cmpi eq, %208, %c0_i32_78 : i32
    %210 = arith.extui %209 : i1 to i32
    %c0_i32_79 = arith.constant 0 : i32
    %211 = arith.cmpi ne, %210, %c0_i32_79 : i32
    cf.cond_br %211, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f35(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %8 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[616] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %18 = llvm.load %9 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %19 = arith.subi %18, %c32_i32 : i32
    llvm.store %19, %4 : i32, !llvm.ptr
    llvm.store %19, %9 : i32, !llvm.ptr
    %20 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %21 = arith.addi %20, %c24_i32 : i32
    llvm.store %21, %5 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c0_i64_7 = arith.constant 0 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c0_i64_7 : i64
    %24 = llvm.getelementptr %12[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %24 {alignment = 1 : i64} : i64, !llvm.ptr
    %25 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %26 = arith.addi %25, %c16_i32 : i32
    llvm.store %26, %6 : i32, !llvm.ptr
    %c0_i64_8 = arith.constant 0 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c0_i64_9 : i64
    %29 = llvm.getelementptr %12[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_8, %29 {alignment = 1 : i64} : i64, !llvm.ptr
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %31 = arith.addi %30, %c8_i32 : i32
    llvm.store %31, %7 : i32, !llvm.ptr
    %c0_i64_10 = arith.constant 0 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c0_i64_11 : i64
    %34 = llvm.getelementptr %12[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_10, %34 {alignment = 1 : i64} : i64, !llvm.ptr
    %35 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_13 : i64
    %38 = llvm.getelementptr %12[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_12, %38 {alignment = 1 : i64} : i64, !llvm.ptr
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %41 = llvm.load %4 : !llvm.ptr -> i32
    %42 = llvm.call %15(%17, %39, %40, %41) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_14 = arith.constant 24 : i32
    %44 = arith.addi %43, %c24_i32_14 : i32
    %45 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_15 = arith.constant 0 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c0_i64_15 : i64
    %48 = llvm.getelementptr %12[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %50 = arith.extui %44 : i32 to i64
    %51 = arith.addi %50, %c0_i64_16 : i64
    %52 = llvm.getelementptr %12[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_17 = arith.constant 16 : i32
    %54 = arith.addi %53, %c16_i32_17 : i32
    %55 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64_18 : i64
    %58 = llvm.getelementptr %12[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_19 = arith.constant 0 : i64
    %60 = arith.extui %54 : i32 to i64
    %61 = arith.addi %60, %c0_i64_19 : i64
    %62 = llvm.getelementptr %12[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %62 {alignment = 1 : i64} : i64, !llvm.ptr
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_20 = arith.constant 8 : i32
    %64 = arith.addi %63, %c8_i32_20 : i32
    %65 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c0_i64_21 : i64
    %68 = llvm.getelementptr %12[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_22 = arith.constant 0 : i64
    %70 = arith.extui %64 : i32 to i64
    %71 = arith.addi %70, %c0_i64_22 : i64
    %72 = llvm.getelementptr %12[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %74 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_23 = arith.constant 0 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c0_i64_23 : i64
    %77 = llvm.getelementptr %12[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_24 = arith.constant 0 : i64
    %79 = arith.extui %73 : i32 to i64
    %80 = arith.addi %79, %c0_i64_24 : i64
    %81 = llvm.getelementptr %12[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %81 {alignment = 1 : i64} : i64, !llvm.ptr
    %82 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_25 = arith.constant 32 : i32
    %83 = arith.addi %82, %c32_i32_25 : i32
    llvm.store %83, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f36(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[448] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %11[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %16 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %17 = arith.subi %16, %c16_i32 : i32
    llvm.store %17, %3 : i32, !llvm.ptr
    llvm.store %17, %7 : i32, !llvm.ptr
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %19 = arith.addi %18, %c4_i32 : i32
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    call @f111(%arg0, %19, %20, %c0_i32_5) : (!llvm.ptr, i32, i32, i32) -> ()
    %21 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c8_i64 : i64
    %24 = llvm.getelementptr %10[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load volatile %24 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %25, %4 : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c4_i64 : i64
    %29 = llvm.getelementptr %10[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %31 = arith.cmpi eq, %30, %c0_i32_6 : i32
    %32 = arith.extui %31 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %33 = arith.cmpi ne, %32, %c0_i32_7 : i32
    cf.cond_br %33, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c12_i64 : i64
    %37 = llvm.getelementptr %10[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %5 : i32, !llvm.ptr
    %39 = llvm.call %13(%15, %38) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_8 = arith.constant 8 : i64
    %42 = arith.extui %40 : i32 to i64
    %43 = arith.addi %42, %c8_i64_8 : i64
    %44 = llvm.getelementptr %10[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %46 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i64_9 = arith.constant 4 : i64
    %47 = arith.extui %45 : i32 to i64
    %48 = arith.addi %47, %c4_i64_9 : i64
    %49 = llvm.getelementptr %10[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %46, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    %50 = llvm.load %0 : !llvm.ptr -> i32
    %51 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %52 = arith.extui %50 : i32 to i64
    %53 = arith.addi %52, %c0_i64 : i64
    %54 = llvm.getelementptr %10[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %51, %54 {alignment = 1 : i64} : i32, !llvm.ptr
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_10 = arith.constant 16 : i32
    %56 = arith.addi %55, %c16_i32_10 : i32
    llvm.store %56, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %57 = llvm.load %4 : !llvm.ptr -> i32
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_11 = arith.constant 12 : i64
    %59 = arith.extui %58 : i32 to i64
    %60 = arith.addi %59, %c12_i64_11 : i64
    %61 = llvm.getelementptr %10[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = llvm.load volatile %61 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %57, %62) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f37(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %8 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[496] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %13[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %18 = llvm.load %9 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %19 = arith.subi %18, %c16_i32 : i32
    llvm.store %19, %5 : i32, !llvm.ptr
    llvm.store %19, %9 : i32, !llvm.ptr
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_7 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // pred: ^bb10
    return
  ^bb3:  // 2 preds: ^bb1, ^bb5
    %c0_i32_8 = arith.constant 0 : i32
    llvm.store %c0_i32_8, %3 : i32, !llvm.ptr
    %22 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %23 = arith.addi %22, %c4_i32 : i32
    %24 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    call @f111(%arg0, %23, %24, %c0_i32_9) : (!llvm.ptr, i32, i32, i32) -> ()
    %25 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c8_i64 : i64
    %28 = llvm.getelementptr %12[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %29, %6 : i32, !llvm.ptr
    %30 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c4_i64 : i64
    %33 = llvm.getelementptr %12[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_10 : i32
    cf.cond_br %35, ^bb8, ^bb9
  ^bb4:  // pred: ^bb1
    %c0_i32_11 = arith.constant 0 : i32
    %c1054752_i64 = arith.constant 1054752 : i64
    %36 = arith.extui %c0_i32_11 : i32 to i64
    %37 = arith.addi %36, %c1054752_i64 : i64
    %38 = llvm.getelementptr %12[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i8
    %40 = arith.extui %39 : i8 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %41 = arith.cmpi ne, %40, %c0_i32_12 : i32
    cf.cond_br %41, ^bb6, ^bb7
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %c0_i32_13 = arith.constant 0 : i32
    %42 = llvm.load %4 : !llvm.ptr -> i32
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %44 = arith.subi %42, %43 : i32
    llvm.store %44, %3 : i32, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %4 : !llvm.ptr -> i32
    %47 = arith.cmpi ugt, %45, %46 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_14 : i32
    %50 = arith.select %49, %c0_i32_13, %44 : i32
    llvm.store %50, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb4
    %c0_i32_15 = arith.constant 0 : i32
    %c1054748_i64 = arith.constant 1054748 : i64
    %51 = arith.extui %c0_i32_15 : i32 to i64
    %52 = arith.addi %51, %c1054748_i64 : i64
    %53 = llvm.getelementptr %12[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %4 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb4
    %55 = call @f23(%arg0) : (!llvm.ptr) -> i32
    llvm.store %55, %4 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %c1_i32_17 = arith.constant 1 : i32
    %c1054752_i64_18 = arith.constant 1054752 : i64
    %56 = arith.extui %c0_i32_16 : i32 to i64
    %57 = arith.addi %56, %c1054752_i64_18 : i64
    %58 = llvm.getelementptr %12[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = arith.trunci %c1_i32_17 : i32 to i8
    llvm.store volatile %59, %58 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    %60 = llvm.load %4 : !llvm.ptr -> i32
    %c1054748_i64_20 = arith.constant 1054748 : i64
    %61 = arith.extui %c0_i32_19 : i32 to i64
    %62 = arith.addi %61, %c1054748_i64_20 : i64
    %63 = llvm.getelementptr %12[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb3
    %64 = llvm.load %6 : !llvm.ptr -> i32
    %65 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c12_i64 : i64
    %68 = llvm.getelementptr %12[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %64, %69) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb9:  // pred: ^bb3
    %70 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64_21 = arith.constant 12 : i64
    %71 = arith.extui %70 : i32 to i64
    %72 = arith.addi %71, %c12_i64_21 : i64
    %73 = llvm.getelementptr %12[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %74 = llvm.load volatile %73 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %74, %7 : i32, !llvm.ptr
    %75 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_22 = arith.constant 0 : i32
    %76 = arith.cmpi eq, %75, %c0_i32_22 : i32
    %77 = arith.extui %76 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %78 = arith.cmpi ne, %77, %c0_i32_23 : i32
    cf.cond_br %78, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_24 = arith.constant 8 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c8_i64_24 : i64
    %83 = llvm.getelementptr %12[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    %84 = llvm.load %0 : !llvm.ptr -> i32
    %85 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i64_25 = arith.constant 4 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c4_i64_25 : i64
    %88 = llvm.getelementptr %12[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %89 = llvm.load %0 : !llvm.ptr -> i32
    %90 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %91 = arith.extui %89 : i32 to i64
    %92 = arith.addi %91, %c0_i64 : i64
    %93 = llvm.getelementptr %12[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %93 {alignment = 1 : i64} : i32, !llvm.ptr
    %94 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_26 = arith.constant 16 : i32
    %95 = arith.addi %94, %c16_i32_26 : i32
    llvm.store %95, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb11:  // pred: ^bb9
    %96 = llvm.load %7 : !llvm.ptr -> i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %98 = llvm.load %4 : !llvm.ptr -> i32
    %99 = llvm.call %15(%17, %96, %97, %98) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %99, %3 : i32, !llvm.ptr
    cf.br ^bb10
  }
  func.func @f38(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_1 = arith.constant 0 : i32
    %c1054752_i64 = arith.constant 1054752 : i64
    %5 = arith.extui %c0_i32_1 : i32 to i64
    %6 = arith.addi %5, %c1054752_i64 : i64
    %7 = llvm.getelementptr %4[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_2 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i32):  // 2 preds: ^bb3, ^bb4
    return %11 : i32
  ^bb3:  // pred: ^bb1
    %c0_i32_3 = arith.constant 0 : i32
    %c1054748_i64 = arith.constant 1054748 : i64
    %12 = arith.extui %c0_i32_3 : i32 to i64
    %13 = arith.addi %12, %c1054748_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %16 = call @f23(%arg0) : (!llvm.ptr) -> i32
    llvm.store %16, %1 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %c1054752_i64_6 = arith.constant 1054752 : i64
    %17 = arith.extui %c0_i32_4 : i32 to i64
    %18 = arith.addi %17, %c1054752_i64_6 : i64
    %19 = llvm.getelementptr %4[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = arith.trunci %c1_i32_5 : i32 to i8
    llvm.store volatile %20, %19 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c1054748_i64_8 = arith.constant 1054748 : i64
    %22 = arith.extui %c0_i32_7 : i32 to i64
    %23 = arith.addi %22, %c1054748_i64_8 : i64
    %24 = llvm.getelementptr %4[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %24 {alignment = 1 : i64} : i32, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%25 : i32)
  }
  func.func @f39(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[472] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %3[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %9 = llvm.load %2 : !llvm.ptr -> i32
    %10 = llvm.call %5(%7, %8, %9) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f40(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %arg0[544] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.getelementptr %14[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %19 = llvm.load %10 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %20 = arith.subi %19, %c64_i32 : i32
    llvm.store %20, %5 : i32, !llvm.ptr
    llvm.store %20, %10 : i32, !llvm.ptr
    %21 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %22 = arith.addi %21, %c32_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %23 = arith.addi %22, %c24_i32 : i32
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_8 = arith.constant 24 : i32
    %25 = arith.addi %24, %c24_i32_8 : i32
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64 : i64
    %28 = llvm.getelementptr %13[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_9 = arith.constant 0 : i64
    %30 = arith.extui %23 : i32 to i64
    %31 = arith.addi %30, %c0_i64_9 : i64
    %32 = llvm.getelementptr %13[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i64, !llvm.ptr
    %33 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32_10 = arith.constant 32 : i32
    %34 = arith.addi %33, %c32_i32_10 : i32
    %c16_i32 = arith.constant 16 : i32
    %35 = arith.addi %34, %c16_i32 : i32
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_11 = arith.constant 16 : i32
    %37 = arith.addi %36, %c16_i32_11 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64_12 : i64
    %40 = llvm.getelementptr %13[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_13 = arith.constant 0 : i64
    %42 = arith.extui %35 : i32 to i64
    %43 = arith.addi %42, %c0_i64_13 : i64
    %44 = llvm.getelementptr %13[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32_14 = arith.constant 32 : i32
    %46 = arith.addi %45, %c32_i32_14 : i32
    %c8_i32 = arith.constant 8 : i32
    %47 = arith.addi %46, %c8_i32 : i32
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_15 = arith.constant 8 : i32
    %49 = arith.addi %48, %c8_i32_15 : i32
    %c0_i64_16 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64_16 : i64
    %52 = llvm.getelementptr %13[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_17 = arith.constant 0 : i64
    %54 = arith.extui %47 : i32 to i64
    %55 = arith.addi %54, %c0_i64_17 : i64
    %56 = llvm.getelementptr %13[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %57 = llvm.load %5 : !llvm.ptr -> i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %59 = arith.extui %58 : i32 to i64
    %60 = arith.addi %59, %c0_i64_18 : i64
    %61 = llvm.getelementptr %13[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = llvm.load volatile %61 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %63 = arith.extui %57 : i32 to i64
    %64 = arith.addi %63, %c32_i64 : i64
    %65 = llvm.getelementptr %13[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %62, %65 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %2 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %66 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32_20 = arith.constant 24 : i32
    %67 = arith.addi %66, %c24_i32_20 : i32
    %68 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32_21 = arith.constant 32 : i32
    %69 = arith.addi %68, %c32_i32_21 : i32
    %c24_i32_22 = arith.constant 24 : i32
    %70 = arith.addi %69, %c24_i32_22 : i32
    %c0_i64_23 = arith.constant 0 : i64
    %71 = arith.extui %70 : i32 to i64
    %72 = arith.addi %71, %c0_i64_23 : i64
    %73 = llvm.getelementptr %13[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %74 = llvm.load volatile %73 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_24 = arith.constant 0 : i64
    %75 = arith.extui %67 : i32 to i64
    %76 = arith.addi %75, %c0_i64_24 : i64
    %77 = llvm.getelementptr %13[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %74, %77 {alignment = 1 : i64} : i64, !llvm.ptr
    %78 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_25 = arith.constant 16 : i32
    %79 = arith.addi %78, %c16_i32_25 : i32
    %80 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32_26 = arith.constant 32 : i32
    %81 = arith.addi %80, %c32_i32_26 : i32
    %c16_i32_27 = arith.constant 16 : i32
    %82 = arith.addi %81, %c16_i32_27 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c0_i64_28 : i64
    %85 = llvm.getelementptr %13[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_29 = arith.constant 0 : i64
    %87 = arith.extui %79 : i32 to i64
    %88 = arith.addi %87, %c0_i64_29 : i64
    %89 = llvm.getelementptr %13[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %86, %89 {alignment = 1 : i64} : i64, !llvm.ptr
    %90 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_30 = arith.constant 8 : i32
    %91 = arith.addi %90, %c8_i32_30 : i32
    %92 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32_31 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_31 : i32
    %c8_i32_32 = arith.constant 8 : i32
    %94 = arith.addi %93, %c8_i32_32 : i32
    %c0_i64_33 = arith.constant 0 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c0_i64_33 : i64
    %97 = llvm.getelementptr %13[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_34 = arith.constant 0 : i64
    %99 = arith.extui %91 : i32 to i64
    %100 = arith.addi %99, %c0_i64_34 : i64
    %101 = llvm.getelementptr %13[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %98, %101 {alignment = 1 : i64} : i64, !llvm.ptr
    %102 = llvm.load %5 : !llvm.ptr -> i32
    %103 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i64_35 = arith.constant 32 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c32_i64_35 : i64
    %106 = llvm.getelementptr %13[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_36 = arith.constant 0 : i64
    %108 = arith.extui %102 : i32 to i64
    %109 = arith.addi %108, %c0_i64_36 : i64
    %110 = llvm.getelementptr %13[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %107, %110 {alignment = 1 : i64} : i64, !llvm.ptr
    %111 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %112 = llvm.load %5 : !llvm.ptr -> i32
    %113 = llvm.load %3 : !llvm.ptr -> i32
    %114 = llvm.load %4 : !llvm.ptr -> i32
    %115 = llvm.call %16(%18, %111, %c20_i32, %112, %113, %114) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32, i32, i32) -> !llvm.void
    %116 = llvm.load %5 : !llvm.ptr -> i32
    %c64_i32_37 = arith.constant 64 : i32
    %117 = arith.addi %116, %c64_i32_37 : i32
    llvm.store %117, %10 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %118 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32_38 = arith.constant 32 : i32
    %119 = arith.addi %118, %c32_i32_38 : i32
    %120 = llvm.load %2 : !llvm.ptr -> i32
    %121 = arith.addi %119, %120 : i32
    llvm.store %121, %6 : i32, !llvm.ptr
    %c0_i64_39 = arith.constant 0 : i64
    %122 = arith.extui %121 : i32 to i64
    %123 = arith.addi %122, %c0_i64_39 : i64
    %124 = llvm.getelementptr %13[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %125 = llvm.load volatile %124 {alignment = 1 : i64} : !llvm.ptr -> i8
    %126 = arith.extui %125 : i8 to i32
    llvm.store %126, %7 : i32, !llvm.ptr
    %127 = llvm.load %6 : !llvm.ptr -> i32
    %128 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32_40 = arith.constant 32 : i32
    %129 = arith.addi %128, %c32_i32_40 : i32
    %130 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %131 = arith.xori %130, %c31_i32 : i32
    %132 = arith.addi %129, %131 : i32
    llvm.store %132, %8 : i32, !llvm.ptr
    %c0_i64_41 = arith.constant 0 : i64
    %133 = arith.extui %132 : i32 to i64
    %134 = arith.addi %133, %c0_i64_41 : i64
    %135 = llvm.getelementptr %13[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %136 = llvm.load volatile %135 {alignment = 1 : i64} : !llvm.ptr -> i8
    %137 = arith.extui %136 : i8 to i32
    %c0_i64_42 = arith.constant 0 : i64
    %138 = arith.extui %127 : i32 to i64
    %139 = arith.addi %138, %c0_i64_42 : i64
    %140 = llvm.getelementptr %13[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = arith.trunci %137 : i32 to i8
    llvm.store volatile %141, %140 {alignment = 1 : i64} : i8, !llvm.ptr
    %142 = llvm.load %8 : !llvm.ptr -> i32
    %143 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_43 = arith.constant 0 : i64
    %144 = arith.extui %142 : i32 to i64
    %145 = arith.addi %144, %c0_i64_43 : i64
    %146 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = arith.trunci %143 : i32 to i8
    llvm.store volatile %147, %146 {alignment = 1 : i64} : i8, !llvm.ptr
    %148 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_44 = arith.constant 1 : i32
    %149 = arith.addi %148, %c1_i32_44 : i32
    llvm.store %149, %2 : i32, !llvm.ptr
    %c16_i32_45 = arith.constant 16 : i32
    %150 = arith.cmpi eq, %149, %c16_i32_45 : i32
    %151 = arith.extui %150 : i1 to i32
    %c0_i32_46 = arith.constant 0 : i32
    %152 = arith.cmpi eq, %151, %c0_i32_46 : i32
    %153 = arith.extui %152 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %154 = arith.cmpi ne, %153, %c0_i32_47 : i32
    cf.cond_br %154, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f41(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[520] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %15[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %20 = llvm.load %11 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %21 = arith.subi %20, %c64_i32 : i32
    llvm.store %21, %6 : i32, !llvm.ptr
    llvm.store %21, %11 : i32, !llvm.ptr
    %22 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %23 = arith.addi %22, %c32_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %24 = arith.addi %23, %c24_i32 : i32
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_9 = arith.constant 24 : i32
    %26 = arith.addi %25, %c24_i32_9 : i32
    %c0_i64 = arith.constant 0 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c0_i64 : i64
    %29 = llvm.getelementptr %14[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    %31 = arith.extui %24 : i32 to i64
    %32 = arith.addi %31, %c0_i64_10 : i64
    %33 = llvm.getelementptr %14[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %30, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_11 = arith.constant 32 : i32
    %35 = arith.addi %34, %c32_i32_11 : i32
    %c16_i32 = arith.constant 16 : i32
    %36 = arith.addi %35, %c16_i32 : i32
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_12 = arith.constant 16 : i32
    %38 = arith.addi %37, %c16_i32_12 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c0_i64_13 : i64
    %41 = llvm.getelementptr %14[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_14 = arith.constant 0 : i64
    %43 = arith.extui %36 : i32 to i64
    %44 = arith.addi %43, %c0_i64_14 : i64
    %45 = llvm.getelementptr %14[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %42, %45 {alignment = 1 : i64} : i64, !llvm.ptr
    %46 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_15 = arith.constant 32 : i32
    %47 = arith.addi %46, %c32_i32_15 : i32
    %c8_i32 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32 : i32
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_16 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_16 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c0_i64_17 : i64
    %53 = llvm.getelementptr %14[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_18 = arith.constant 0 : i64
    %55 = arith.extui %48 : i32 to i64
    %56 = arith.addi %55, %c0_i64_18 : i64
    %57 = llvm.getelementptr %14[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %57 {alignment = 1 : i64} : i64, !llvm.ptr
    %58 = llvm.load %6 : !llvm.ptr -> i32
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c0_i64_19 : i64
    %62 = llvm.getelementptr %14[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %64 = arith.extui %58 : i32 to i64
    %65 = arith.addi %64, %c32_i64 : i64
    %66 = llvm.getelementptr %14[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %63, %66 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_20 = arith.constant 0 : i32
    llvm.store %c0_i32_20, %2 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %67 = llvm.load %6 : !llvm.ptr -> i32
    %c24_i32_21 = arith.constant 24 : i32
    %68 = arith.addi %67, %c24_i32_21 : i32
    %69 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_22 = arith.constant 32 : i32
    %70 = arith.addi %69, %c32_i32_22 : i32
    %c24_i32_23 = arith.constant 24 : i32
    %71 = arith.addi %70, %c24_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c0_i64_24 : i64
    %74 = llvm.getelementptr %14[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = llvm.load volatile %74 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %76 = arith.extui %68 : i32 to i64
    %77 = arith.addi %76, %c0_i64_25 : i64
    %78 = llvm.getelementptr %14[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %75, %78 {alignment = 1 : i64} : i64, !llvm.ptr
    %79 = llvm.load %6 : !llvm.ptr -> i32
    %c16_i32_26 = arith.constant 16 : i32
    %80 = arith.addi %79, %c16_i32_26 : i32
    %81 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_27 = arith.constant 32 : i32
    %82 = arith.addi %81, %c32_i32_27 : i32
    %c16_i32_28 = arith.constant 16 : i32
    %83 = arith.addi %82, %c16_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %84 = arith.extui %83 : i32 to i64
    %85 = arith.addi %84, %c0_i64_29 : i64
    %86 = llvm.getelementptr %14[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %88 = arith.extui %80 : i32 to i64
    %89 = arith.addi %88, %c0_i64_30 : i64
    %90 = llvm.getelementptr %14[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %90 {alignment = 1 : i64} : i64, !llvm.ptr
    %91 = llvm.load %6 : !llvm.ptr -> i32
    %c8_i32_31 = arith.constant 8 : i32
    %92 = arith.addi %91, %c8_i32_31 : i32
    %93 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_32 = arith.constant 32 : i32
    %94 = arith.addi %93, %c32_i32_32 : i32
    %c8_i32_33 = arith.constant 8 : i32
    %95 = arith.addi %94, %c8_i32_33 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %96 = arith.extui %95 : i32 to i64
    %97 = arith.addi %96, %c0_i64_34 : i64
    %98 = llvm.getelementptr %14[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %99 = llvm.load volatile %98 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_35 = arith.constant 0 : i64
    %100 = arith.extui %92 : i32 to i64
    %101 = arith.addi %100, %c0_i64_35 : i64
    %102 = llvm.getelementptr %14[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %99, %102 {alignment = 1 : i64} : i64, !llvm.ptr
    %103 = llvm.load %6 : !llvm.ptr -> i32
    %104 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i64_36 = arith.constant 32 : i64
    %105 = arith.extui %104 : i32 to i64
    %106 = arith.addi %105, %c32_i64_36 : i64
    %107 = llvm.getelementptr %14[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %108 = llvm.load volatile %107 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_37 = arith.constant 0 : i64
    %109 = arith.extui %103 : i32 to i64
    %110 = arith.addi %109, %c0_i64_37 : i64
    %111 = llvm.getelementptr %14[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i64, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %113 = llvm.load %6 : !llvm.ptr -> i32
    %114 = llvm.load %3 : !llvm.ptr -> i32
    %115 = llvm.load %4 : !llvm.ptr -> i32
    %116 = llvm.load %5 : !llvm.ptr -> i32
    %117 = llvm.call %17(%19, %112, %c20_i32, %113, %114, %115, %116) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> !llvm.void
    %118 = llvm.load %6 : !llvm.ptr -> i32
    %c64_i32_38 = arith.constant 64 : i32
    %119 = arith.addi %118, %c64_i32_38 : i32
    llvm.store %119, %11 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %120 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_39 = arith.constant 32 : i32
    %121 = arith.addi %120, %c32_i32_39 : i32
    %122 = llvm.load %2 : !llvm.ptr -> i32
    %123 = arith.addi %121, %122 : i32
    llvm.store %123, %7 : i32, !llvm.ptr
    %c0_i64_40 = arith.constant 0 : i64
    %124 = arith.extui %123 : i32 to i64
    %125 = arith.addi %124, %c0_i64_40 : i64
    %126 = llvm.getelementptr %14[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = llvm.load volatile %126 {alignment = 1 : i64} : !llvm.ptr -> i8
    %128 = arith.extui %127 : i8 to i32
    llvm.store %128, %8 : i32, !llvm.ptr
    %129 = llvm.load %7 : !llvm.ptr -> i32
    %130 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_41 = arith.constant 32 : i32
    %131 = arith.addi %130, %c32_i32_41 : i32
    %132 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %133 = arith.xori %132, %c31_i32 : i32
    %134 = arith.addi %131, %133 : i32
    llvm.store %134, %9 : i32, !llvm.ptr
    %c0_i64_42 = arith.constant 0 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c0_i64_42 : i64
    %137 = llvm.getelementptr %14[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load volatile %137 {alignment = 1 : i64} : !llvm.ptr -> i8
    %139 = arith.extui %138 : i8 to i32
    %c0_i64_43 = arith.constant 0 : i64
    %140 = arith.extui %129 : i32 to i64
    %141 = arith.addi %140, %c0_i64_43 : i64
    %142 = llvm.getelementptr %14[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = arith.trunci %139 : i32 to i8
    llvm.store volatile %143, %142 {alignment = 1 : i64} : i8, !llvm.ptr
    %144 = llvm.load %9 : !llvm.ptr -> i32
    %145 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %146 = arith.extui %144 : i32 to i64
    %147 = arith.addi %146, %c0_i64_44 : i64
    %148 = llvm.getelementptr %14[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %149 = arith.trunci %145 : i32 to i8
    llvm.store volatile %149, %148 {alignment = 1 : i64} : i8, !llvm.ptr
    %150 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_45 = arith.constant 1 : i32
    %151 = arith.addi %150, %c1_i32_45 : i32
    llvm.store %151, %2 : i32, !llvm.ptr
    %c16_i32_46 = arith.constant 16 : i32
    %152 = arith.cmpi eq, %151, %c16_i32_46 : i32
    %153 = arith.extui %152 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %154 = arith.cmpi eq, %153, %c0_i32_47 : i32
    %155 = arith.extui %154 : i1 to i32
    %c0_i32_48 = arith.constant 0 : i32
    %156 = arith.cmpi ne, %155, %c0_i32_48 : i32
    cf.cond_br %156, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f42(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[568] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %4[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %11 = llvm.load %3 : !llvm.ptr -> i32
    %12 = llvm.call %6(%8, %9, %10, %11) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f43(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[640] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %8 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %18 = arith.subi %17, %c64_i32 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    llvm.store %18, %8 : i32, !llvm.ptr
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %20 = arith.addi %19, %c32_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %21 = arith.addi %20, %c24_i32 : i32
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_6 = arith.constant 24 : i32
    %23 = arith.addi %22, %c24_i32_6 : i32
    %c0_i64 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64 : i64
    %26 = llvm.getelementptr %11[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_7 = arith.constant 0 : i64
    %28 = arith.extui %21 : i32 to i64
    %29 = arith.addi %28, %c0_i64_7 : i64
    %30 = llvm.getelementptr %11[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %27, %30 {alignment = 1 : i64} : i64, !llvm.ptr
    %31 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_8 = arith.constant 32 : i32
    %32 = arith.addi %31, %c32_i32_8 : i32
    %c16_i32 = arith.constant 16 : i32
    %33 = arith.addi %32, %c16_i32 : i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_9 = arith.constant 16 : i32
    %35 = arith.addi %34, %c16_i32_9 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_10 : i64
    %38 = llvm.getelementptr %11[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %40 = arith.extui %33 : i32 to i64
    %41 = arith.addi %40, %c0_i64_11 : i64
    %42 = llvm.getelementptr %11[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %42 {alignment = 1 : i64} : i64, !llvm.ptr
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_12 = arith.constant 32 : i32
    %44 = arith.addi %43, %c32_i32_12 : i32
    %c8_i32 = arith.constant 8 : i32
    %45 = arith.addi %44, %c8_i32 : i32
    %46 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_13 = arith.constant 8 : i32
    %47 = arith.addi %46, %c8_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_14 : i64
    %50 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %52 = arith.extui %45 : i32 to i64
    %53 = arith.addi %52, %c0_i64_15 : i64
    %54 = llvm.getelementptr %11[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %51, %54 {alignment = 1 : i64} : i64, !llvm.ptr
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c0_i64_16 : i64
    %59 = llvm.getelementptr %11[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %61 = arith.extui %55 : i32 to i64
    %62 = arith.addi %61, %c32_i64 : i64
    %63 = llvm.getelementptr %11[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    llvm.store %c0_i32_17, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_18 = arith.constant 24 : i32
    %65 = arith.addi %64, %c24_i32_18 : i32
    %66 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_19 = arith.constant 32 : i32
    %67 = arith.addi %66, %c32_i32_19 : i32
    %c24_i32_20 = arith.constant 24 : i32
    %68 = arith.addi %67, %c24_i32_20 : i32
    %c0_i64_21 = arith.constant 0 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c0_i64_21 : i64
    %71 = llvm.getelementptr %11[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_22 = arith.constant 0 : i64
    %73 = arith.extui %65 : i32 to i64
    %74 = arith.addi %73, %c0_i64_22 : i64
    %75 = llvm.getelementptr %11[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %72, %75 {alignment = 1 : i64} : i64, !llvm.ptr
    %76 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_23 = arith.constant 16 : i32
    %77 = arith.addi %76, %c16_i32_23 : i32
    %78 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_24 = arith.constant 32 : i32
    %79 = arith.addi %78, %c32_i32_24 : i32
    %c16_i32_25 = arith.constant 16 : i32
    %80 = arith.addi %79, %c16_i32_25 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c0_i64_26 : i64
    %83 = llvm.getelementptr %11[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load volatile %83 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_27 = arith.constant 0 : i64
    %85 = arith.extui %77 : i32 to i64
    %86 = arith.addi %85, %c0_i64_27 : i64
    %87 = llvm.getelementptr %11[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %84, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_28 = arith.constant 8 : i32
    %89 = arith.addi %88, %c8_i32_28 : i32
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_29 = arith.constant 32 : i32
    %91 = arith.addi %90, %c32_i32_29 : i32
    %c8_i32_30 = arith.constant 8 : i32
    %92 = arith.addi %91, %c8_i32_30 : i32
    %c0_i64_31 = arith.constant 0 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c0_i64_31 : i64
    %95 = llvm.getelementptr %11[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_32 = arith.constant 0 : i64
    %97 = arith.extui %89 : i32 to i64
    %98 = arith.addi %97, %c0_i64_32 : i64
    %99 = llvm.getelementptr %11[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %96, %99 {alignment = 1 : i64} : i64, !llvm.ptr
    %100 = llvm.load %3 : !llvm.ptr -> i32
    %101 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_33 = arith.constant 32 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c32_i64_33 : i64
    %104 = llvm.getelementptr %11[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_34 = arith.constant 0 : i64
    %106 = arith.extui %100 : i32 to i64
    %107 = arith.addi %106, %c0_i64_34 : i64
    %108 = llvm.getelementptr %11[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %108 {alignment = 1 : i64} : i64, !llvm.ptr
    %109 = llvm.load %3 : !llvm.ptr -> i32
    %110 = llvm.load %2 : !llvm.ptr -> i32
    %111 = llvm.call %14(%16, %109, %110) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %112 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_35 = arith.constant 64 : i32
    %113 = arith.addi %112, %c64_i32_35 : i32
    llvm.store %113, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %114 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_36 = arith.constant 32 : i32
    %115 = arith.addi %114, %c32_i32_36 : i32
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %117 = arith.addi %115, %116 : i32
    llvm.store %117, %4 : i32, !llvm.ptr
    %c0_i64_37 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_37 : i64
    %120 = llvm.getelementptr %11[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i8
    %122 = arith.extui %121 : i8 to i32
    llvm.store %122, %5 : i32, !llvm.ptr
    %123 = llvm.load %4 : !llvm.ptr -> i32
    %124 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_38 = arith.constant 32 : i32
    %125 = arith.addi %124, %c32_i32_38 : i32
    %126 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %127 = arith.xori %126, %c31_i32 : i32
    %128 = arith.addi %125, %127 : i32
    llvm.store %128, %6 : i32, !llvm.ptr
    %c0_i64_39 = arith.constant 0 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c0_i64_39 : i64
    %131 = llvm.getelementptr %11[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load volatile %131 {alignment = 1 : i64} : !llvm.ptr -> i8
    %133 = arith.extui %132 : i8 to i32
    %c0_i64_40 = arith.constant 0 : i64
    %134 = arith.extui %123 : i32 to i64
    %135 = arith.addi %134, %c0_i64_40 : i64
    %136 = llvm.getelementptr %11[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = arith.trunci %133 : i32 to i8
    llvm.store volatile %137, %136 {alignment = 1 : i64} : i8, !llvm.ptr
    %138 = llvm.load %6 : !llvm.ptr -> i32
    %139 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_41 = arith.constant 0 : i64
    %140 = arith.extui %138 : i32 to i64
    %141 = arith.addi %140, %c0_i64_41 : i64
    %142 = llvm.getelementptr %11[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = arith.trunci %139 : i32 to i8
    llvm.store volatile %143, %142 {alignment = 1 : i64} : i8, !llvm.ptr
    %144 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_42 = arith.constant 1 : i32
    %145 = arith.addi %144, %c1_i32_42 : i32
    llvm.store %145, %1 : i32, !llvm.ptr
    %c16_i32_43 = arith.constant 16 : i32
    %146 = arith.cmpi eq, %145, %c16_i32_43 : i32
    %147 = arith.extui %146 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %148 = arith.cmpi eq, %147, %c0_i32_44 : i32
    %149 = arith.extui %148 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %150 = arith.cmpi ne, %149, %c0_i32_45 : i32
    cf.cond_br %150, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f44(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[664] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %8 : !llvm.ptr -> i32
    %c96_i32 = arith.constant 96 : i32
    %18 = arith.subi %17, %c96_i32 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    llvm.store %18, %8 : i32, !llvm.ptr
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %20 = arith.addi %19, %c24_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %c0_i64_6 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64_6 : i64
    %23 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %25 = arith.addi %24, %c16_i32 : i32
    %c0_i64_7 = arith.constant 0 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64_8 : i64
    %28 = llvm.getelementptr %11[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_7, %28 {alignment = 1 : i64} : i64, !llvm.ptr
    %29 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %30 = arith.addi %29, %c8_i32 : i32
    %c0_i64_9 = arith.constant 0 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_10 : i64
    %33 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_9, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %c0_i64_12 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_12 : i64
    %37 = llvm.getelementptr %11[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_11, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %39 = arith.addi %38, %c64_i32 : i32
    %c24_i32_13 = arith.constant 24 : i32
    %40 = arith.addi %39, %c24_i32_13 : i32
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_14 = arith.constant 24 : i32
    %42 = arith.addi %41, %c24_i32_14 : i32
    %c0_i64_15 = arith.constant 0 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c0_i64_15 : i64
    %45 = llvm.getelementptr %11[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %47 = arith.extui %40 : i32 to i64
    %48 = arith.addi %47, %c0_i64_16 : i64
    %49 = llvm.getelementptr %11[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %46, %49 {alignment = 1 : i64} : i64, !llvm.ptr
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_17 = arith.constant 64 : i32
    %51 = arith.addi %50, %c64_i32_17 : i32
    %c16_i32_18 = arith.constant 16 : i32
    %52 = arith.addi %51, %c16_i32_18 : i32
    %53 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_19 = arith.constant 16 : i32
    %54 = arith.addi %53, %c16_i32_19 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c0_i64_20 : i64
    %57 = llvm.getelementptr %11[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %59 = arith.extui %52 : i32 to i64
    %60 = arith.addi %59, %c0_i64_21 : i64
    %61 = llvm.getelementptr %11[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i64, !llvm.ptr
    %62 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_22 = arith.constant 64 : i32
    %63 = arith.addi %62, %c64_i32_22 : i32
    %c8_i32_23 = arith.constant 8 : i32
    %64 = arith.addi %63, %c8_i32_23 : i32
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_24 = arith.constant 8 : i32
    %66 = arith.addi %65, %c8_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_25 : i64
    %69 = llvm.getelementptr %11[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_26 = arith.constant 0 : i64
    %71 = arith.extui %64 : i32 to i64
    %72 = arith.addi %71, %c0_i64_26 : i64
    %73 = llvm.getelementptr %11[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %70, %73 {alignment = 1 : i64} : i64, !llvm.ptr
    %74 = llvm.load %3 : !llvm.ptr -> i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_27 = arith.constant 0 : i64
    %76 = arith.extui %75 : i32 to i64
    %77 = arith.addi %76, %c0_i64_27 : i64
    %78 = llvm.getelementptr %11[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %79 = llvm.load volatile %78 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %80 = arith.extui %74 : i32 to i64
    %81 = arith.addi %80, %c64_i64 : i64
    %82 = llvm.getelementptr %11[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %79, %82 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    llvm.store %c0_i32_28, %2 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %84 = arith.addi %83, %c32_i32 : i32
    %c24_i32_29 = arith.constant 24 : i32
    %85 = arith.addi %84, %c24_i32_29 : i32
    %86 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_30 = arith.constant 64 : i32
    %87 = arith.addi %86, %c64_i32_30 : i32
    %c24_i32_31 = arith.constant 24 : i32
    %88 = arith.addi %87, %c24_i32_31 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_32 : i64
    %91 = llvm.getelementptr %11[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    %93 = arith.extui %85 : i32 to i64
    %94 = arith.addi %93, %c0_i64_33 : i64
    %95 = llvm.getelementptr %11[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %96 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_34 = arith.constant 32 : i32
    %97 = arith.addi %96, %c32_i32_34 : i32
    %c16_i32_35 = arith.constant 16 : i32
    %98 = arith.addi %97, %c16_i32_35 : i32
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_36 = arith.constant 64 : i32
    %100 = arith.addi %99, %c64_i32_36 : i32
    %c16_i32_37 = arith.constant 16 : i32
    %101 = arith.addi %100, %c16_i32_37 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_38 : i64
    %104 = llvm.getelementptr %11[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %106 = arith.extui %98 : i32 to i64
    %107 = arith.addi %106, %c0_i64_39 : i64
    %108 = llvm.getelementptr %11[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %108 {alignment = 1 : i64} : i64, !llvm.ptr
    %109 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_40 = arith.constant 32 : i32
    %110 = arith.addi %109, %c32_i32_40 : i32
    %c8_i32_41 = arith.constant 8 : i32
    %111 = arith.addi %110, %c8_i32_41 : i32
    %112 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_42 = arith.constant 64 : i32
    %113 = arith.addi %112, %c64_i32_42 : i32
    %c8_i32_43 = arith.constant 8 : i32
    %114 = arith.addi %113, %c8_i32_43 : i32
    %c0_i64_44 = arith.constant 0 : i64
    %115 = arith.extui %114 : i32 to i64
    %116 = arith.addi %115, %c0_i64_44 : i64
    %117 = llvm.getelementptr %11[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %118 = llvm.load volatile %117 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    %119 = arith.extui %111 : i32 to i64
    %120 = arith.addi %119, %c0_i64_45 : i64
    %121 = llvm.getelementptr %11[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %118, %121 {alignment = 1 : i64} : i64, !llvm.ptr
    %122 = llvm.load %3 : !llvm.ptr -> i32
    %123 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i64_46 = arith.constant 64 : i64
    %124 = arith.extui %123 : i32 to i64
    %125 = arith.addi %124, %c64_i64_46 : i64
    %126 = llvm.getelementptr %11[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = llvm.load volatile %126 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %128 = arith.extui %122 : i32 to i64
    %129 = arith.addi %128, %c32_i64 : i64
    %130 = llvm.getelementptr %11[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %127, %130 {alignment = 1 : i64} : i64, !llvm.ptr
    %131 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_47 = arith.constant 32 : i32
    %132 = arith.addi %131, %c32_i32_47 : i32
    %133 = llvm.load %3 : !llvm.ptr -> i32
    %134 = llvm.call %14(%16, %132, %133) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %135 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_48 = arith.constant 24 : i32
    %136 = arith.addi %135, %c24_i32_48 : i32
    %137 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32_49 = arith.constant 24 : i32
    %138 = arith.addi %137, %c24_i32_49 : i32
    %c0_i64_50 = arith.constant 0 : i64
    %139 = arith.extui %138 : i32 to i64
    %140 = arith.addi %139, %c0_i64_50 : i64
    %141 = llvm.getelementptr %11[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %142 = llvm.load volatile %141 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_51 = arith.constant 0 : i64
    %143 = arith.extui %136 : i32 to i64
    %144 = arith.addi %143, %c0_i64_51 : i64
    %145 = llvm.getelementptr %11[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %142, %145 {alignment = 1 : i64} : i64, !llvm.ptr
    %146 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_52 = arith.constant 16 : i32
    %147 = arith.addi %146, %c16_i32_52 : i32
    %148 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_53 = arith.constant 16 : i32
    %149 = arith.addi %148, %c16_i32_53 : i32
    %c0_i64_54 = arith.constant 0 : i64
    %150 = arith.extui %149 : i32 to i64
    %151 = arith.addi %150, %c0_i64_54 : i64
    %152 = llvm.getelementptr %11[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %153 = llvm.load volatile %152 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_55 = arith.constant 0 : i64
    %154 = arith.extui %147 : i32 to i64
    %155 = arith.addi %154, %c0_i64_55 : i64
    %156 = llvm.getelementptr %11[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %153, %156 {alignment = 1 : i64} : i64, !llvm.ptr
    %157 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_56 = arith.constant 8 : i32
    %158 = arith.addi %157, %c8_i32_56 : i32
    %159 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_57 = arith.constant 8 : i32
    %160 = arith.addi %159, %c8_i32_57 : i32
    %c0_i64_58 = arith.constant 0 : i64
    %161 = arith.extui %160 : i32 to i64
    %162 = arith.addi %161, %c0_i64_58 : i64
    %163 = llvm.getelementptr %11[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = llvm.load volatile %163 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_59 = arith.constant 0 : i64
    %165 = arith.extui %158 : i32 to i64
    %166 = arith.addi %165, %c0_i64_59 : i64
    %167 = llvm.getelementptr %11[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %164, %167 {alignment = 1 : i64} : i64, !llvm.ptr
    %168 = llvm.load %0 : !llvm.ptr -> i32
    %169 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_60 = arith.constant 0 : i64
    %170 = arith.extui %169 : i32 to i64
    %171 = arith.addi %170, %c0_i64_60 : i64
    %172 = llvm.getelementptr %11[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %173 = llvm.load volatile %172 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_61 = arith.constant 0 : i64
    %174 = arith.extui %168 : i32 to i64
    %175 = arith.addi %174, %c0_i64_61 : i64
    %176 = llvm.getelementptr %11[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %173, %176 {alignment = 1 : i64} : i64, !llvm.ptr
    %177 = llvm.load %3 : !llvm.ptr -> i32
    %c96_i32_62 = arith.constant 96 : i32
    %178 = arith.addi %177, %c96_i32_62 : i32
    llvm.store %178, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %179 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_63 = arith.constant 64 : i32
    %180 = arith.addi %179, %c64_i32_63 : i32
    %181 = llvm.load %2 : !llvm.ptr -> i32
    %182 = arith.addi %180, %181 : i32
    llvm.store %182, %4 : i32, !llvm.ptr
    %c0_i64_64 = arith.constant 0 : i64
    %183 = arith.extui %182 : i32 to i64
    %184 = arith.addi %183, %c0_i64_64 : i64
    %185 = llvm.getelementptr %11[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = llvm.load volatile %185 {alignment = 1 : i64} : !llvm.ptr -> i8
    %187 = arith.extui %186 : i8 to i32
    llvm.store %187, %5 : i32, !llvm.ptr
    %188 = llvm.load %4 : !llvm.ptr -> i32
    %189 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_65 = arith.constant 64 : i32
    %190 = arith.addi %189, %c64_i32_65 : i32
    %191 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %192 = arith.xori %191, %c31_i32 : i32
    %193 = arith.addi %190, %192 : i32
    llvm.store %193, %6 : i32, !llvm.ptr
    %c0_i64_66 = arith.constant 0 : i64
    %194 = arith.extui %193 : i32 to i64
    %195 = arith.addi %194, %c0_i64_66 : i64
    %196 = llvm.getelementptr %11[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %197 = llvm.load volatile %196 {alignment = 1 : i64} : !llvm.ptr -> i8
    %198 = arith.extui %197 : i8 to i32
    %c0_i64_67 = arith.constant 0 : i64
    %199 = arith.extui %188 : i32 to i64
    %200 = arith.addi %199, %c0_i64_67 : i64
    %201 = llvm.getelementptr %11[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %202 = arith.trunci %198 : i32 to i8
    llvm.store volatile %202, %201 {alignment = 1 : i64} : i8, !llvm.ptr
    %203 = llvm.load %6 : !llvm.ptr -> i32
    %204 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_68 = arith.constant 0 : i64
    %205 = arith.extui %203 : i32 to i64
    %206 = arith.addi %205, %c0_i64_68 : i64
    %207 = llvm.getelementptr %11[%206] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %208 = arith.trunci %204 : i32 to i8
    llvm.store volatile %208, %207 {alignment = 1 : i64} : i8, !llvm.ptr
    %209 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_69 = arith.constant 1 : i32
    %210 = arith.addi %209, %c1_i32_69 : i32
    llvm.store %210, %2 : i32, !llvm.ptr
    %c16_i32_70 = arith.constant 16 : i32
    %211 = arith.cmpi eq, %210, %c16_i32_70 : i32
    %212 = arith.extui %211 : i1 to i32
    %c0_i32_71 = arith.constant 0 : i32
    %213 = arith.cmpi eq, %212, %c0_i32_71 : i32
    %214 = arith.extui %213 : i1 to i32
    %c0_i32_72 = arith.constant 0 : i32
    %215 = arith.cmpi ne, %214, %c0_i32_72 : i32
    cf.cond_br %215, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f45(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[688] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %2[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %8 = llvm.call %4(%6, %7) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f46(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i64, %arg7: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i64, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg7, %6 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %11 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %arg0[712] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %16[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %16[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %21 = llvm.load %12 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %22 = arith.subi %21, %c64_i32 : i32
    llvm.store %22, %7 : i32, !llvm.ptr
    llvm.store %22, %12 : i32, !llvm.ptr
    %23 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %24 = arith.addi %23, %c32_i32 : i32
    %c24_i32 = arith.constant 24 : i32
    %25 = arith.addi %24, %c24_i32 : i32
    %26 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i32_10 = arith.constant 24 : i32
    %27 = arith.addi %26, %c24_i32_10 : i32
    %c0_i64 = arith.constant 0 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c0_i64 : i64
    %30 = llvm.getelementptr %15[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %32 = arith.extui %25 : i32 to i64
    %33 = arith.addi %32, %c0_i64_11 : i64
    %34 = llvm.getelementptr %15[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %34 {alignment = 1 : i64} : i64, !llvm.ptr
    %35 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32_12 = arith.constant 32 : i32
    %36 = arith.addi %35, %c32_i32_12 : i32
    %c16_i32 = arith.constant 16 : i32
    %37 = arith.addi %36, %c16_i32 : i32
    %38 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32_13 = arith.constant 16 : i32
    %39 = arith.addi %38, %c16_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c0_i64_14 : i64
    %42 = llvm.getelementptr %15[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %44 = arith.extui %37 : i32 to i64
    %45 = arith.addi %44, %c0_i64_15 : i64
    %46 = llvm.getelementptr %15[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %43, %46 {alignment = 1 : i64} : i64, !llvm.ptr
    %47 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32_16 = arith.constant 32 : i32
    %48 = arith.addi %47, %c32_i32_16 : i32
    %c8_i32 = arith.constant 8 : i32
    %49 = arith.addi %48, %c8_i32 : i32
    %50 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_17 = arith.constant 8 : i32
    %51 = arith.addi %50, %c8_i32_17 : i32
    %c0_i64_18 = arith.constant 0 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c0_i64_18 : i64
    %54 = llvm.getelementptr %15[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_19 = arith.constant 0 : i64
    %56 = arith.extui %49 : i32 to i64
    %57 = arith.addi %56, %c0_i64_19 : i64
    %58 = llvm.getelementptr %15[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i64, !llvm.ptr
    %59 = llvm.load %7 : !llvm.ptr -> i32
    %60 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64_20 : i64
    %63 = llvm.getelementptr %15[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %65 = arith.extui %59 : i32 to i64
    %66 = arith.addi %65, %c32_i64 : i64
    %67 = llvm.getelementptr %15[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    llvm.store %c0_i32_21, %4 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2(%68: i32):  // pred: ^bb3
    return %68 : i32
  ^bb3:  // pred: ^bb5
    %69 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i32_22 = arith.constant 24 : i32
    %70 = arith.addi %69, %c24_i32_22 : i32
    %71 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32_23 = arith.constant 32 : i32
    %72 = arith.addi %71, %c32_i32_23 : i32
    %c24_i32_24 = arith.constant 24 : i32
    %73 = arith.addi %72, %c24_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c0_i64_25 : i64
    %76 = llvm.getelementptr %15[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_26 = arith.constant 0 : i64
    %78 = arith.extui %70 : i32 to i64
    %79 = arith.addi %78, %c0_i64_26 : i64
    %80 = llvm.getelementptr %15[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %80 {alignment = 1 : i64} : i64, !llvm.ptr
    %81 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32_27 = arith.constant 16 : i32
    %82 = arith.addi %81, %c16_i32_27 : i32
    %83 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32_28 = arith.constant 32 : i32
    %84 = arith.addi %83, %c32_i32_28 : i32
    %c16_i32_29 = arith.constant 16 : i32
    %85 = arith.addi %84, %c16_i32_29 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c0_i64_30 : i64
    %88 = llvm.getelementptr %15[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = llvm.load volatile %88 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_31 = arith.constant 0 : i64
    %90 = arith.extui %82 : i32 to i64
    %91 = arith.addi %90, %c0_i64_31 : i64
    %92 = llvm.getelementptr %15[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %89, %92 {alignment = 1 : i64} : i64, !llvm.ptr
    %93 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_32 = arith.constant 8 : i32
    %94 = arith.addi %93, %c8_i32_32 : i32
    %95 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32_33 = arith.constant 32 : i32
    %96 = arith.addi %95, %c32_i32_33 : i32
    %c8_i32_34 = arith.constant 8 : i32
    %97 = arith.addi %96, %c8_i32_34 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c0_i64_35 : i64
    %100 = llvm.getelementptr %15[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_36 = arith.constant 0 : i64
    %102 = arith.extui %94 : i32 to i64
    %103 = arith.addi %102, %c0_i64_36 : i64
    %104 = llvm.getelementptr %15[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %101, %104 {alignment = 1 : i64} : i64, !llvm.ptr
    %105 = llvm.load %7 : !llvm.ptr -> i32
    %106 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i64_37 = arith.constant 32 : i64
    %107 = arith.extui %106 : i32 to i64
    %108 = arith.addi %107, %c32_i64_37 : i64
    %109 = llvm.getelementptr %15[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_38 = arith.constant 0 : i64
    %111 = arith.extui %105 : i32 to i64
    %112 = arith.addi %111, %c0_i64_38 : i64
    %113 = llvm.getelementptr %15[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %110, %113 {alignment = 1 : i64} : i64, !llvm.ptr
    %114 = llvm.load %1 : !llvm.ptr -> i32
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %117 = llvm.load %7 : !llvm.ptr -> i32
    %118 = llvm.load %5 : !llvm.ptr -> i64
    %119 = llvm.load %6 : !llvm.ptr -> i32
    %120 = llvm.call %18(%20, %114, %115, %116, %117, %118, %119) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32, i32, i64, i32) -> i32
    llvm.store %120, %4 : i32, !llvm.ptr
    %121 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32_39 = arith.constant 64 : i32
    %122 = arith.addi %121, %c64_i32_39 : i32
    llvm.store %122, %12 : i32, !llvm.ptr
    %123 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%123 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %124 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32_40 = arith.constant 32 : i32
    %125 = arith.addi %124, %c32_i32_40 : i32
    %126 = llvm.load %4 : !llvm.ptr -> i32
    %127 = arith.addi %125, %126 : i32
    llvm.store %127, %8 : i32, !llvm.ptr
    %c0_i64_41 = arith.constant 0 : i64
    %128 = arith.extui %127 : i32 to i64
    %129 = arith.addi %128, %c0_i64_41 : i64
    %130 = llvm.getelementptr %15[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = llvm.load volatile %130 {alignment = 1 : i64} : !llvm.ptr -> i8
    %132 = arith.extui %131 : i8 to i32
    llvm.store %132, %9 : i32, !llvm.ptr
    %133 = llvm.load %8 : !llvm.ptr -> i32
    %134 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32_42 = arith.constant 32 : i32
    %135 = arith.addi %134, %c32_i32_42 : i32
    %136 = llvm.load %4 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %137 = arith.xori %136, %c31_i32 : i32
    %138 = arith.addi %135, %137 : i32
    llvm.store %138, %10 : i32, !llvm.ptr
    %c0_i64_43 = arith.constant 0 : i64
    %139 = arith.extui %138 : i32 to i64
    %140 = arith.addi %139, %c0_i64_43 : i64
    %141 = llvm.getelementptr %15[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %142 = llvm.load volatile %141 {alignment = 1 : i64} : !llvm.ptr -> i8
    %143 = arith.extui %142 : i8 to i32
    %c0_i64_44 = arith.constant 0 : i64
    %144 = arith.extui %133 : i32 to i64
    %145 = arith.addi %144, %c0_i64_44 : i64
    %146 = llvm.getelementptr %15[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = arith.trunci %143 : i32 to i8
    llvm.store volatile %147, %146 {alignment = 1 : i64} : i8, !llvm.ptr
    %148 = llvm.load %10 : !llvm.ptr -> i32
    %149 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i64_45 = arith.constant 0 : i64
    %150 = arith.extui %148 : i32 to i64
    %151 = arith.addi %150, %c0_i64_45 : i64
    %152 = llvm.getelementptr %15[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %153 = arith.trunci %149 : i32 to i8
    llvm.store volatile %153, %152 {alignment = 1 : i64} : i8, !llvm.ptr
    %154 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_46 = arith.constant 1 : i32
    %155 = arith.addi %154, %c1_i32_46 : i32
    llvm.store %155, %4 : i32, !llvm.ptr
    %c16_i32_47 = arith.constant 16 : i32
    %156 = arith.cmpi eq, %155, %c16_i32_47 : i32
    %157 = arith.extui %156 : i1 to i32
    %c0_i32_48 = arith.constant 0 : i32
    %158 = arith.cmpi eq, %157, %c0_i32_48 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %160 = arith.cmpi ne, %159, %c0_i32_49 : i32
    cf.cond_br %160, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f47(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i64, %arg6: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i64, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[736] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %6[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %12 = llvm.load %2 : !llvm.ptr -> i32
    %13 = llvm.load %3 : !llvm.ptr -> i32
    %14 = llvm.load %4 : !llvm.ptr -> i64
    %15 = llvm.load %5 : !llvm.ptr -> i32
    %16 = llvm.call %8(%10, %11, %12, %13, %14, %15) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32, i64, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f48(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i64, %arg6: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i64, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[760] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %6[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %12 = llvm.load %2 : !llvm.ptr -> i32
    %13 = llvm.load %3 : !llvm.ptr -> i32
    %14 = llvm.load %4 : !llvm.ptr -> i64
    %15 = llvm.load %5 : !llvm.ptr -> i32
    %16 = llvm.call %8(%10, %11, %12, %13, %14, %15) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32, i64, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f49(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %3 : i64, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %19 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %20 = arith.subi %19, %c32_i32 : i32
    llvm.store %20, %2 : i32, !llvm.ptr
    llvm.store %20, %8 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1054476_i64 = arith.constant 1054476 : i64
    %21 = arith.extui %c0_i32_6 : i32 to i64
    %22 = arith.addi %21, %c1054476_i64 : i64
    %23 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i8
    %25 = arith.extui %24 : i8 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_7 : i32
    cf.cond_br %26, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb12
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_8 = arith.constant 32 : i32
    %28 = arith.addi %27, %c32_i32_8 : i32
    llvm.store %28, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %30 = arith.addi %29, %c24_i32 : i32
    %c0_i32_9 = arith.constant 0 : i32
    %c1054464_i64 = arith.constant 1054464 : i64
    %31 = arith.extui %c0_i32_9 : i32 to i64
    %32 = arith.addi %31, %c1054464_i64 : i64
    %33 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    %35 = arith.extui %30 : i32 to i64
    %36 = arith.addi %35, %c0_i64_10 : i64
    %37 = llvm.getelementptr %11[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %34, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %39 = arith.addi %38, %c16_i32 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %c1054456_i64 = arith.constant 1054456 : i64
    %40 = arith.extui %c0_i32_11 : i32 to i64
    %41 = arith.addi %40, %c1054456_i64 : i64
    %42 = llvm.getelementptr %11[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    %44 = arith.extui %39 : i32 to i64
    %45 = arith.addi %44, %c0_i64_12 : i64
    %46 = llvm.getelementptr %11[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %43, %46 {alignment = 1 : i64} : i64, !llvm.ptr
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %c1054448_i64 = arith.constant 1054448 : i64
    %49 = arith.extui %c0_i32_13 : i32 to i64
    %50 = arith.addi %49, %c1054448_i64 : i64
    %51 = llvm.getelementptr %11[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_14 = arith.constant 0 : i64
    %53 = arith.extui %48 : i32 to i64
    %54 = arith.addi %53, %c0_i64_14 : i64
    %55 = llvm.getelementptr %11[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c1054440_i64 = arith.constant 1054440 : i64
    %57 = arith.extui %c0_i32_15 : i32 to i64
    %58 = arith.addi %57, %c1054440_i64 : i64
    %59 = llvm.getelementptr %11[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %61 = arith.extui %56 : i32 to i64
    %62 = arith.addi %61, %c0_i64_16 : i64
    %63 = llvm.getelementptr %11[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %c1054472_i64 = arith.constant 1054472 : i64
    %65 = arith.extui %c0_i32_17 : i32 to i64
    %66 = arith.addi %65, %c1054472_i64 : i64
    %67 = llvm.getelementptr %11[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    %69 = arith.cmpi ult, %68, %18 : i32
    cf.cond_br %69, ^bb6, ^bb7
  ^bb6:  // 2 preds: ^bb5, ^bb7
    %70 = llvm.getelementptr inbounds %16[%68] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    %72 = llvm.ptrtoint %71 : !llvm.ptr to i64
    %c0_i64_18 = arith.constant 0 : i64
    %73 = arith.cmpi eq, %72, %c0_i64_18 : i64
    cf.cond_br %73, ^bb9, ^bb8
  ^bb7:  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %74 = llvm.getelementptr %71[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %75 = llvm.getelementptr %71[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %76 = llvm.getelementptr %71[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %77 = llvm.load %74 : !llvm.ptr -> !llvm.ptr
    %78 = llvm.load %76 : !llvm.ptr -> !llvm.ptr
    %79 = llvm.ptrtoint %77 : !llvm.ptr to i64
    %c0_i64_19 = arith.constant 0 : i64
    %80 = arith.cmpi eq, %79, %c0_i64_19 : i64
    cf.cond_br %80, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %81 = llvm.load %75 : !llvm.ptr -> i32
    %82 = arith.cmpi ne, %13, %81 : i32
    cf.cond_br %82, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_20 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_20) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %83 = llvm.call %77(%78, %64) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %c0_i32_21 = arith.constant 0 : i32
    %c1_i32_22 = arith.constant 1 : i32
    %c1054476_i64_23 = arith.constant 1054476 : i64
    %84 = arith.extui %c0_i32_21 : i32 to i64
    %85 = arith.addi %84, %c1054476_i64_23 : i64
    %86 = llvm.getelementptr %11[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = arith.trunci %c1_i32_22 : i32 to i8
    llvm.store volatile %87, %86 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_25 = arith.constant 24 : i32
    %89 = arith.addi %88, %c24_i32_25 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c0_i64_26 : i64
    %92 = llvm.getelementptr %11[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %93, %3 : i64, !llvm.ptr
    %c1054464_i64_27 = arith.constant 1054464 : i64
    %94 = arith.extui %c0_i32_24 : i32 to i64
    %95 = arith.addi %94, %c1054464_i64_27 : i64
    %96 = llvm.getelementptr %11[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %96 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_29 = arith.constant 16 : i32
    %98 = arith.addi %97, %c16_i32_29 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c0_i64_30 : i64
    %101 = llvm.getelementptr %11[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %102, %4 : i64, !llvm.ptr
    %c1054456_i64_31 = arith.constant 1054456 : i64
    %103 = arith.extui %c0_i32_28 : i32 to i64
    %104 = arith.addi %103, %c1054456_i64_31 : i64
    %105 = llvm.getelementptr %11[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %102, %105 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_33 = arith.constant 8 : i32
    %107 = arith.addi %106, %c8_i32_33 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c0_i64_34 : i64
    %110 = llvm.getelementptr %11[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %111, %5 : i64, !llvm.ptr
    %c1054448_i64_35 = arith.constant 1054448 : i64
    %112 = arith.extui %c0_i32_32 : i32 to i64
    %113 = arith.addi %112, %c1054448_i64_35 : i64
    %114 = llvm.getelementptr %11[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %111, %114 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_36 = arith.constant 0 : i32
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c0_i64_37 : i64
    %118 = llvm.getelementptr %11[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %119, %6 : i64, !llvm.ptr
    %c1054440_i64_38 = arith.constant 1054440 : i64
    %120 = arith.extui %c0_i32_36 : i32 to i64
    %121 = arith.addi %120, %c1054440_i64_38 : i64
    %122 = llvm.getelementptr %11[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %119, %122 {alignment = 1 : i64} : i64, !llvm.ptr
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %124 = llvm.load %6 : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %125 = arith.extui %123 : i32 to i64
    %126 = arith.addi %125, %c0_i64_39 : i64
    %127 = llvm.getelementptr %11[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %124, %127 {alignment = 1 : i64} : i64, !llvm.ptr
    %128 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_40 = arith.constant 8 : i32
    %129 = arith.addi %128, %c8_i32_40 : i32
    %130 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %131 = arith.extui %129 : i32 to i64
    %132 = arith.addi %131, %c0_i64_41 : i64
    %133 = llvm.getelementptr %11[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %133 {alignment = 1 : i64} : i64, !llvm.ptr
    %134 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_42 = arith.constant 16 : i32
    %135 = arith.addi %134, %c16_i32_42 : i32
    %136 = llvm.load %4 : !llvm.ptr -> i64
    %c0_i64_43 = arith.constant 0 : i64
    %137 = arith.extui %135 : i32 to i64
    %138 = arith.addi %137, %c0_i64_43 : i64
    %139 = llvm.getelementptr %11[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %139 {alignment = 1 : i64} : i64, !llvm.ptr
    %140 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_44 = arith.constant 24 : i32
    %141 = arith.addi %140, %c24_i32_44 : i32
    %142 = llvm.load %3 : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    %143 = arith.extui %141 : i32 to i64
    %144 = arith.addi %143, %c0_i64_45 : i64
    %145 = llvm.getelementptr %11[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %142, %145 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func @f50(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %13 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %14 : !llvm.ptr -> i64
    %17 = arith.trunci %16 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %18 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %19 = arith.subi %18, %c32_i32 : i32
    llvm.store %19, %2 : i32, !llvm.ptr
    llvm.store %19, %7 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1054504_i64 = arith.constant 1054504 : i64
    %20 = arith.extui %c0_i32_5 : i32 to i64
    %21 = arith.addi %20, %c1054504_i64 : i64
    %22 = llvm.getelementptr %10[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i8
    %24 = arith.extui %23 : i8 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_6 : i32
    cf.cond_br %25, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb12
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_7 = arith.constant 32 : i32
    %27 = arith.addi %26, %c32_i32_7 : i32
    llvm.store %27, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %29 = arith.addi %28, %c16_i32 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1054500_i64 = arith.constant 1054500 : i64
    %30 = arith.extui %c0_i32_8 : i32 to i64
    %31 = arith.addi %30, %c1054500_i64 : i64
    %32 = llvm.getelementptr %10[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %34 = arith.extui %29 : i32 to i64
    %35 = arith.addi %34, %c0_i64_9 : i64
    %36 = llvm.getelementptr %10[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %38 = arith.addi %37, %c8_i32 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %c1054492_i64 = arith.constant 1054492 : i64
    %39 = arith.extui %c0_i32_10 : i32 to i64
    %40 = arith.addi %39, %c1054492_i64 : i64
    %41 = llvm.getelementptr %10[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %43 = arith.extui %38 : i32 to i64
    %44 = arith.addi %43, %c0_i64_11 : i64
    %45 = llvm.getelementptr %10[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %42, %45 {alignment = 1 : i64} : i64, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %c1054484_i64 = arith.constant 1054484 : i64
    %47 = arith.extui %c0_i32_12 : i32 to i64
    %48 = arith.addi %47, %c1054484_i64 : i64
    %49 = llvm.getelementptr %10[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_13 = arith.constant 0 : i64
    %51 = arith.extui %46 : i32 to i64
    %52 = arith.addi %51, %c0_i64_13 : i64
    %53 = llvm.getelementptr %10[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %55 = arith.addi %54, %c12_i32 : i32
    %c0_i32_14 = arith.constant 0 : i32
    %c1054480_i64 = arith.constant 1054480 : i64
    %56 = arith.extui %c0_i32_14 : i32 to i64
    %57 = arith.addi %56, %c1054480_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi ult, %59, %17 : i32
    cf.cond_br %60, ^bb6, ^bb7
  ^bb6:  // 2 preds: ^bb5, ^bb7
    %61 = llvm.getelementptr inbounds %15[%59] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.ptrtoint %62 : !llvm.ptr to i64
    %c0_i64_15 = arith.constant 0 : i64
    %64 = arith.cmpi eq, %63, %c0_i64_15 : i64
    cf.cond_br %64, ^bb9, ^bb8
  ^bb7:  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %65 = llvm.getelementptr %62[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %66 = llvm.getelementptr %62[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %67 = llvm.getelementptr %62[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %68 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64_16 = arith.constant 0 : i64
    %71 = arith.cmpi eq, %70, %c0_i64_16 : i64
    cf.cond_br %71, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %72 = llvm.load %66 : !llvm.ptr -> i32
    %73 = arith.cmpi ne, %12, %72 : i32
    cf.cond_br %73, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_17 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_17) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %74 = llvm.call %68(%69, %55) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %c0_i32_18 = arith.constant 0 : i32
    %c1_i32_19 = arith.constant 1 : i32
    %c1054504_i64_20 = arith.constant 1054504 : i64
    %75 = arith.extui %c0_i32_18 : i32 to i64
    %76 = arith.addi %75, %c1054504_i64_20 : i64
    %77 = llvm.getelementptr %10[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = arith.trunci %c1_i32_19 : i32 to i8
    llvm.store volatile %78, %77 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_22 = arith.constant 12 : i32
    %80 = arith.addi %79, %c12_i32_22 : i32
    %c16_i32_23 = arith.constant 16 : i32
    %81 = arith.addi %80, %c16_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c0_i64_24 : i64
    %84 = llvm.getelementptr %10[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %85 = llvm.load volatile %84 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %85, %3 : i32, !llvm.ptr
    %c1054500_i64_25 = arith.constant 1054500 : i64
    %86 = arith.extui %c0_i32_21 : i32 to i64
    %87 = arith.addi %86, %c1054500_i64_25 : i64
    %88 = llvm.getelementptr %10[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_27 = arith.constant 12 : i32
    %90 = arith.addi %89, %c12_i32_27 : i32
    %c8_i32_28 = arith.constant 8 : i32
    %91 = arith.addi %90, %c8_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_29 : i64
    %94 = llvm.getelementptr %10[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %95, %4 : i64, !llvm.ptr
    %c1054492_i64_30 = arith.constant 1054492 : i64
    %96 = arith.extui %c0_i32_26 : i32 to i64
    %97 = arith.addi %96, %c1054492_i64_30 : i64
    %98 = llvm.getelementptr %10[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %98 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_31 = arith.constant 0 : i32
    %99 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c12_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %103, %5 : i64, !llvm.ptr
    %c1054484_i64_32 = arith.constant 1054484 : i64
    %104 = arith.extui %c0_i32_31 : i32 to i64
    %105 = arith.addi %104, %c1054484_i64_32 : i64
    %106 = llvm.getelementptr %10[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %103, %106 {alignment = 1 : i64} : i64, !llvm.ptr
    %107 = llvm.load %0 : !llvm.ptr -> i32
    %108 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    %109 = arith.extui %107 : i32 to i64
    %110 = arith.addi %109, %c0_i64_33 : i64
    %111 = llvm.getelementptr %10[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i64, !llvm.ptr
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_34 = arith.constant 8 : i32
    %113 = arith.addi %112, %c8_i32_34 : i32
    %114 = llvm.load %4 : !llvm.ptr -> i64
    %c0_i64_35 = arith.constant 0 : i64
    %115 = arith.extui %113 : i32 to i64
    %116 = arith.addi %115, %c0_i64_35 : i64
    %117 = llvm.getelementptr %10[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %114, %117 {alignment = 1 : i64} : i64, !llvm.ptr
    %118 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_36 = arith.constant 16 : i32
    %119 = arith.addi %118, %c16_i32_36 : i32
    %120 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %121 = arith.extui %119 : i32 to i64
    %122 = arith.addi %121, %c0_i64_37 : i64
    %123 = llvm.getelementptr %10[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %120, %123 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func @f51(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %1 : i64, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1054712_i64 = arith.constant 1054712 : i64
    %5 = arith.extui %c0_i32 : i32 to i64
    %6 = arith.addi %5, %c1054712_i64 : i64
    %7 = llvm.getelementptr %4[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i32
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_1 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i64):  // 2 preds: ^bb3, ^bb4
    return %11 : i64
  ^bb3:  // pred: ^bb1
    %c0_i32_2 = arith.constant 0 : i32
    %c1054704_i64 = arith.constant 1054704 : i64
    %12 = arith.extui %c0_i32_2 : i32 to i64
    %13 = arith.addi %12, %c1054704_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i64
    cf.br ^bb2(%15 : i64)
  ^bb4:  // pred: ^bb1
    %16 = call @f15(%arg0) : (!llvm.ptr) -> i64
    llvm.store %16, %1 : i64, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %c1054712_i64_5 = arith.constant 1054712 : i64
    %17 = arith.extui %c0_i32_3 : i32 to i64
    %18 = arith.addi %17, %c1054712_i64_5 : i64
    %19 = llvm.getelementptr %4[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = arith.trunci %c1_i32_4 : i32 to i8
    llvm.store volatile %20, %19 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %21 = llvm.load %1 : !llvm.ptr -> i64
    %c1054704_i64_7 = arith.constant 1054704 : i64
    %22 = arith.extui %c0_i32_6 : i32 to i64
    %23 = arith.addi %22, %c1054704_i64_7 : i64
    %24 = llvm.getelementptr %4[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %24 {alignment = 1 : i64} : i64, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb2(%25 : i64)
  }
  func.func @f52(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %1 : i64, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1054728_i64 = arith.constant 1054728 : i64
    %5 = arith.extui %c0_i32 : i32 to i64
    %6 = arith.addi %5, %c1054728_i64 : i64
    %7 = llvm.getelementptr %4[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i32
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_1 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i64):  // 2 preds: ^bb3, ^bb4
    return %11 : i64
  ^bb3:  // pred: ^bb1
    %c0_i32_2 = arith.constant 0 : i32
    %c1054720_i64 = arith.constant 1054720 : i64
    %12 = arith.extui %c0_i32_2 : i32 to i64
    %13 = arith.addi %12, %c1054720_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i64
    cf.br ^bb2(%15 : i64)
  ^bb4:  // pred: ^bb1
    %16 = call @f25(%arg0) : (!llvm.ptr) -> i64
    llvm.store %16, %1 : i64, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %c1054728_i64_5 = arith.constant 1054728 : i64
    %17 = arith.extui %c0_i32_3 : i32 to i64
    %18 = arith.addi %17, %c1054728_i64_5 : i64
    %19 = llvm.getelementptr %4[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = arith.trunci %c1_i32_4 : i32 to i8
    llvm.store volatile %20, %19 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %21 = llvm.load %1 : !llvm.ptr -> i64
    %c1054720_i64_7 = arith.constant 1054720 : i64
    %22 = arith.extui %c0_i32_6 : i32 to i64
    %23 = arith.addi %22, %c1054720_i64_7 : i64
    %24 = llvm.getelementptr %4[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %24 {alignment = 1 : i64} : i64, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb2(%25 : i64)
  }
  func.func @f53(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %1 : i64, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1054744_i64 = arith.constant 1054744 : i64
    %5 = arith.extui %c0_i32 : i32 to i64
    %6 = arith.addi %5, %c1054744_i64 : i64
    %7 = llvm.getelementptr %4[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i32
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_1 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i64):  // 2 preds: ^bb3, ^bb4
    return %11 : i64
  ^bb3:  // pred: ^bb1
    %c0_i32_2 = arith.constant 0 : i32
    %c1054736_i64 = arith.constant 1054736 : i64
    %12 = arith.extui %c0_i32_2 : i32 to i64
    %13 = arith.addi %12, %c1054736_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i64
    cf.br ^bb2(%15 : i64)
  ^bb4:  // pred: ^bb1
    %16 = call @f27(%arg0) : (!llvm.ptr) -> i64
    llvm.store %16, %1 : i64, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %c1054744_i64_5 = arith.constant 1054744 : i64
    %17 = arith.extui %c0_i32_3 : i32 to i64
    %18 = arith.addi %17, %c1054744_i64_5 : i64
    %19 = llvm.getelementptr %4[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = arith.trunci %c1_i32_4 : i32 to i8
    llvm.store volatile %20, %19 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %21 = llvm.load %1 : !llvm.ptr -> i64
    %c1054736_i64_7 = arith.constant 1054736 : i64
    %22 = arith.extui %c0_i32_6 : i32 to i64
    %23 = arith.addi %22, %c1054736_i64_7 : i64
    %24 = llvm.getelementptr %4[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %24 {alignment = 1 : i64} : i64, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb2(%25 : i64)
  }
  func.func @f54(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %1 : i64, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1054696_i64 = arith.constant 1054696 : i64
    %5 = arith.extui %c0_i32 : i32 to i64
    %6 = arith.addi %5, %c1054696_i64 : i64
    %7 = llvm.getelementptr %4[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i32
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_1 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i64):  // 2 preds: ^bb3, ^bb4
    return %11 : i64
  ^bb3:  // pred: ^bb1
    %c0_i32_2 = arith.constant 0 : i32
    %c1054688_i64 = arith.constant 1054688 : i64
    %12 = arith.extui %c0_i32_2 : i32 to i64
    %13 = arith.addi %12, %c1054688_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i64
    cf.br ^bb2(%15 : i64)
  ^bb4:  // pred: ^bb1
    %16 = call @f28(%arg0) : (!llvm.ptr) -> i64
    llvm.store %16, %1 : i64, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %c1054696_i64_5 = arith.constant 1054696 : i64
    %17 = arith.extui %c0_i32_3 : i32 to i64
    %18 = arith.addi %17, %c1054696_i64_5 : i64
    %19 = llvm.getelementptr %4[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = arith.trunci %c1_i32_4 : i32 to i8
    llvm.store volatile %20, %19 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %21 = llvm.load %1 : !llvm.ptr -> i64
    %c1054688_i64_7 = arith.constant 1054688 : i64
    %22 = arith.extui %c0_i32_6 : i32 to i64
    %23 = arith.addi %22, %c1054688_i64_7 : i64
    %24 = llvm.getelementptr %4[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %24 {alignment = 1 : i64} : i64, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb2(%25 : i64)
  }
  func.func @f55(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %2 : !llvm.ptr -> i32
    call @f34(%arg0, %3, %4) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f56(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %13 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %14 : !llvm.ptr -> i64
    %17 = arith.trunci %16 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %18 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %19 = arith.subi %18, %c32_i32 : i32
    llvm.store %19, %2 : i32, !llvm.ptr
    llvm.store %19, %7 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1054532_i64 = arith.constant 1054532 : i64
    %20 = arith.extui %c0_i32_5 : i32 to i64
    %21 = arith.addi %20, %c1054532_i64 : i64
    %22 = llvm.getelementptr %10[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i8
    %24 = arith.extui %23 : i8 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_6 : i32
    cf.cond_br %25, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb12
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_7 = arith.constant 32 : i32
    %27 = arith.addi %26, %c32_i32_7 : i32
    llvm.store %27, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %29 = arith.addi %28, %c16_i32 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1054528_i64 = arith.constant 1054528 : i64
    %30 = arith.extui %c0_i32_8 : i32 to i64
    %31 = arith.addi %30, %c1054528_i64 : i64
    %32 = llvm.getelementptr %10[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %34 = arith.extui %29 : i32 to i64
    %35 = arith.addi %34, %c0_i64_9 : i64
    %36 = llvm.getelementptr %10[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %38 = arith.addi %37, %c8_i32 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %c1054520_i64 = arith.constant 1054520 : i64
    %39 = arith.extui %c0_i32_10 : i32 to i64
    %40 = arith.addi %39, %c1054520_i64 : i64
    %41 = llvm.getelementptr %10[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %43 = arith.extui %38 : i32 to i64
    %44 = arith.addi %43, %c0_i64_11 : i64
    %45 = llvm.getelementptr %10[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %42, %45 {alignment = 1 : i64} : i64, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %c1054512_i64 = arith.constant 1054512 : i64
    %47 = arith.extui %c0_i32_12 : i32 to i64
    %48 = arith.addi %47, %c1054512_i64 : i64
    %49 = llvm.getelementptr %10[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_13 = arith.constant 0 : i64
    %51 = arith.extui %46 : i32 to i64
    %52 = arith.addi %51, %c0_i64_13 : i64
    %53 = llvm.getelementptr %10[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %55 = arith.addi %54, %c12_i32 : i32
    %c0_i32_14 = arith.constant 0 : i32
    %c1054508_i64 = arith.constant 1054508 : i64
    %56 = arith.extui %c0_i32_14 : i32 to i64
    %57 = arith.addi %56, %c1054508_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi ult, %59, %17 : i32
    cf.cond_br %60, ^bb6, ^bb7
  ^bb6:  // 2 preds: ^bb5, ^bb7
    %61 = llvm.getelementptr inbounds %15[%59] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.ptrtoint %62 : !llvm.ptr to i64
    %c0_i64_15 = arith.constant 0 : i64
    %64 = arith.cmpi eq, %63, %c0_i64_15 : i64
    cf.cond_br %64, ^bb9, ^bb8
  ^bb7:  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %65 = llvm.getelementptr %62[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %66 = llvm.getelementptr %62[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %67 = llvm.getelementptr %62[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %68 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64_16 = arith.constant 0 : i64
    %71 = arith.cmpi eq, %70, %c0_i64_16 : i64
    cf.cond_br %71, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %72 = llvm.load %66 : !llvm.ptr -> i32
    %73 = arith.cmpi ne, %12, %72 : i32
    cf.cond_br %73, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_17 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_17) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %74 = llvm.call %68(%69, %55) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %c0_i32_18 = arith.constant 0 : i32
    %c1_i32_19 = arith.constant 1 : i32
    %c1054532_i64_20 = arith.constant 1054532 : i64
    %75 = arith.extui %c0_i32_18 : i32 to i64
    %76 = arith.addi %75, %c1054532_i64_20 : i64
    %77 = llvm.getelementptr %10[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = arith.trunci %c1_i32_19 : i32 to i8
    llvm.store volatile %78, %77 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_22 = arith.constant 12 : i32
    %80 = arith.addi %79, %c12_i32_22 : i32
    %c16_i32_23 = arith.constant 16 : i32
    %81 = arith.addi %80, %c16_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c0_i64_24 : i64
    %84 = llvm.getelementptr %10[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %85 = llvm.load volatile %84 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %85, %3 : i32, !llvm.ptr
    %c1054528_i64_25 = arith.constant 1054528 : i64
    %86 = arith.extui %c0_i32_21 : i32 to i64
    %87 = arith.addi %86, %c1054528_i64_25 : i64
    %88 = llvm.getelementptr %10[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_27 = arith.constant 12 : i32
    %90 = arith.addi %89, %c12_i32_27 : i32
    %c8_i32_28 = arith.constant 8 : i32
    %91 = arith.addi %90, %c8_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_29 : i64
    %94 = llvm.getelementptr %10[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %95, %4 : i64, !llvm.ptr
    %c1054520_i64_30 = arith.constant 1054520 : i64
    %96 = arith.extui %c0_i32_26 : i32 to i64
    %97 = arith.addi %96, %c1054520_i64_30 : i64
    %98 = llvm.getelementptr %10[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %98 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_31 = arith.constant 0 : i32
    %99 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c12_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %103, %5 : i64, !llvm.ptr
    %c1054512_i64_32 = arith.constant 1054512 : i64
    %104 = arith.extui %c0_i32_31 : i32 to i64
    %105 = arith.addi %104, %c1054512_i64_32 : i64
    %106 = llvm.getelementptr %10[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %103, %106 {alignment = 1 : i64} : i64, !llvm.ptr
    %107 = llvm.load %0 : !llvm.ptr -> i32
    %108 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    %109 = arith.extui %107 : i32 to i64
    %110 = arith.addi %109, %c0_i64_33 : i64
    %111 = llvm.getelementptr %10[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i64, !llvm.ptr
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_34 = arith.constant 8 : i32
    %113 = arith.addi %112, %c8_i32_34 : i32
    %114 = llvm.load %4 : !llvm.ptr -> i64
    %c0_i64_35 = arith.constant 0 : i64
    %115 = arith.extui %113 : i32 to i64
    %116 = arith.addi %115, %c0_i64_35 : i64
    %117 = llvm.getelementptr %10[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %114, %117 {alignment = 1 : i64} : i64, !llvm.ptr
    %118 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_36 = arith.constant 16 : i32
    %119 = arith.addi %118, %c16_i32_36 : i32
    %120 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %121 = arith.extui %119 : i32 to i64
    %122 = arith.addi %121, %c0_i64_37 : i64
    %123 = llvm.getelementptr %10[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %120, %123 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func @f57(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %2 : !llvm.ptr -> i32
    call @f58(%arg0, %3, %4) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f58(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[784] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %8[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %arg0[904] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.getelementptr %16[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %16[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %21 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %22 = arith.subi %21, %c16_i32 : i32
    llvm.store %22, %2 : i32, !llvm.ptr
    llvm.store %22, %7 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %24 = arith.addi %23, %c4_i32 : i32
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %26 = llvm.call %10(%12, %25) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    llvm.store %26, %3 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    call @f111(%arg0, %24, %26, %c0_i32_5) : (!llvm.ptr, i32, i32, i32) -> ()
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c8_i64 : i64
    %30 = llvm.getelementptr %15[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %31, %4 : i32, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c4_i64 : i64
    %35 = llvm.getelementptr %15[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %37 = arith.cmpi eq, %36, %c0_i32_6 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_7 : i32
    cf.cond_br %39, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c12_i64 : i64
    %45 = llvm.getelementptr %15[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %46, %5 : i32, !llvm.ptr
    %47 = llvm.call %18(%20, %40, %c0_i32_8, %41, %46) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32, i32) -> i32
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64_9 = arith.constant 8 : i64
    %50 = arith.extui %48 : i32 to i64
    %51 = arith.addi %50, %c8_i64_9 : i64
    %52 = llvm.getelementptr %15[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i32, !llvm.ptr
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %54 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i64_10 = arith.constant 4 : i64
    %55 = arith.extui %53 : i32 to i64
    %56 = arith.addi %55, %c4_i64_10 : i64
    %57 = llvm.getelementptr %15[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %57 {alignment = 1 : i64} : i32, !llvm.ptr
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %59 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %60 = arith.extui %58 : i32 to i64
    %61 = arith.addi %60, %c0_i64 : i64
    %62 = llvm.getelementptr %15[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %62 {alignment = 1 : i64} : i32, !llvm.ptr
    %63 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_11 = arith.constant 16 : i32
    %64 = arith.addi %63, %c16_i32_11 : i32
    llvm.store %64, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %65 = llvm.load %4 : !llvm.ptr -> i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_12 = arith.constant 12 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c12_i64_12 : i64
    %69 = llvm.getelementptr %15[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %65, %70) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f59(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[784] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %2[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %8 = llvm.call %4(%6, %7) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%8 : i32)
  ^bb2(%9: i32):  // pred: ^bb1
    return %9 : i32
  }
  func.func @f60(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[808] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.getelementptr %12[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %12[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %17 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %18 = arith.subi %17, %c32_i32 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    llvm.store %18, %8 : i32, !llvm.ptr
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %20 = arith.addi %19, %c24_i32 : i32
    llvm.store %20, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c0_i64_6 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64_6 : i64
    %23 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %25 = arith.addi %24, %c16_i32 : i32
    llvm.store %25, %5 : i32, !llvm.ptr
    %c0_i64_7 = arith.constant 0 : i64
    %c0_i64_8 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64_8 : i64
    %28 = llvm.getelementptr %11[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_7, %28 {alignment = 1 : i64} : i64, !llvm.ptr
    %29 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %30 = arith.addi %29, %c8_i32 : i32
    llvm.store %30, %6 : i32, !llvm.ptr
    %c0_i64_9 = arith.constant 0 : i64
    %c0_i64_10 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_10 : i64
    %33 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_9, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %c0_i64_12 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_12 : i64
    %37 = llvm.getelementptr %11[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_11, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %40 = llvm.call %14(%16, %38, %39) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_13 = arith.constant 24 : i32
    %42 = arith.addi %41, %c24_i32_13 : i32
    %43 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_14 : i64
    %46 = llvm.getelementptr %11[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %48 = arith.extui %42 : i32 to i64
    %49 = arith.addi %48, %c0_i64_15 : i64
    %50 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i64, !llvm.ptr
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_16 = arith.constant 16 : i32
    %52 = arith.addi %51, %c16_i32_16 : i32
    %53 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_17 : i64
    %56 = llvm.getelementptr %11[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_18 = arith.constant 0 : i64
    %58 = arith.extui %52 : i32 to i64
    %59 = arith.addi %58, %c0_i64_18 : i64
    %60 = llvm.getelementptr %11[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %57, %60 {alignment = 1 : i64} : i64, !llvm.ptr
    %61 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_19 = arith.constant 8 : i32
    %62 = arith.addi %61, %c8_i32_19 : i32
    %63 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c0_i64_20 : i64
    %66 = llvm.getelementptr %11[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %68 = arith.extui %62 : i32 to i64
    %69 = arith.addi %68, %c0_i64_21 : i64
    %70 = llvm.getelementptr %11[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %67, %70 {alignment = 1 : i64} : i64, !llvm.ptr
    %71 = llvm.load %0 : !llvm.ptr -> i32
    %72 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_22 = arith.constant 0 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c0_i64_22 : i64
    %75 = llvm.getelementptr %11[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_23 = arith.constant 0 : i64
    %77 = arith.extui %71 : i32 to i64
    %78 = arith.addi %77, %c0_i64_23 : i64
    %79 = llvm.getelementptr %11[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %76, %79 {alignment = 1 : i64} : i64, !llvm.ptr
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_24 = arith.constant 32 : i32
    %81 = arith.addi %80, %c32_i32_24 : i32
    llvm.store %81, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f61(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[592] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %2[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c65535_i32 = arith.constant 65535 : i32
    %8 = arith.andi %7, %c65535_i32 : i32
    %9 = llvm.call %4(%6, %8) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f62(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_1 = arith.constant 0 : i32
    %c1054760_i64 = arith.constant 1054760 : i64
    %5 = arith.extui %c0_i32_1 : i32 to i64
    %6 = arith.addi %5, %c1054760_i64 : i64
    %7 = llvm.getelementptr %4[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_2 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i32):  // 2 preds: ^bb3, ^bb4
    return %11 : i32
  ^bb3:  // pred: ^bb1
    %c0_i32_3 = arith.constant 0 : i32
    %c1054756_i64 = arith.constant 1054756 : i64
    %12 = arith.extui %c0_i32_3 : i32 to i64
    %13 = arith.addi %12, %c1054756_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i8
    %16 = arith.extui %15 : i8 to i32
    %c1_i32_4 = arith.constant 1 : i32
    %17 = arith.andi %16, %c1_i32_4 : i32
    cf.br ^bb2(%17 : i32)
  ^bb4:  // pred: ^bb1
    %18 = call @f19(%arg0) : (!llvm.ptr) -> i32
    llvm.store %18, %1 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %c1054760_i64_7 = arith.constant 1054760 : i64
    %19 = arith.extui %c0_i32_5 : i32 to i64
    %20 = arith.addi %19, %c1054760_i64_7 : i64
    %21 = llvm.getelementptr %4[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = arith.trunci %c1_i32_6 : i32 to i8
    llvm.store volatile %22, %21 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c1054756_i64_9 = arith.constant 1054756 : i64
    %24 = arith.extui %c0_i32_8 : i32 to i64
    %25 = arith.addi %24, %c1054756_i64_9 : i64
    %26 = llvm.getelementptr %4[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = arith.trunci %23 : i32 to i8
    llvm.store volatile %27, %26 {alignment = 1 : i64} : i8, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%28 : i32)
  }
  func.func @f63(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %13 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %14 : !llvm.ptr -> i64
    %17 = arith.trunci %16 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %18 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %19 = arith.subi %18, %c32_i32 : i32
    llvm.store %19, %2 : i32, !llvm.ptr
    llvm.store %19, %7 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1054560_i64 = arith.constant 1054560 : i64
    %20 = arith.extui %c0_i32_5 : i32 to i64
    %21 = arith.addi %20, %c1054560_i64 : i64
    %22 = llvm.getelementptr %10[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i8
    %24 = arith.extui %23 : i8 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_6 : i32
    cf.cond_br %25, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb12
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_7 = arith.constant 32 : i32
    %27 = arith.addi %26, %c32_i32_7 : i32
    llvm.store %27, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %29 = arith.addi %28, %c16_i32 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1054556_i64 = arith.constant 1054556 : i64
    %30 = arith.extui %c0_i32_8 : i32 to i64
    %31 = arith.addi %30, %c1054556_i64 : i64
    %32 = llvm.getelementptr %10[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %34 = arith.extui %29 : i32 to i64
    %35 = arith.addi %34, %c0_i64_9 : i64
    %36 = llvm.getelementptr %10[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %38 = arith.addi %37, %c8_i32 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %c1054548_i64 = arith.constant 1054548 : i64
    %39 = arith.extui %c0_i32_10 : i32 to i64
    %40 = arith.addi %39, %c1054548_i64 : i64
    %41 = llvm.getelementptr %10[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %43 = arith.extui %38 : i32 to i64
    %44 = arith.addi %43, %c0_i64_11 : i64
    %45 = llvm.getelementptr %10[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %42, %45 {alignment = 1 : i64} : i64, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %c1054540_i64 = arith.constant 1054540 : i64
    %47 = arith.extui %c0_i32_12 : i32 to i64
    %48 = arith.addi %47, %c1054540_i64 : i64
    %49 = llvm.getelementptr %10[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_13 = arith.constant 0 : i64
    %51 = arith.extui %46 : i32 to i64
    %52 = arith.addi %51, %c0_i64_13 : i64
    %53 = llvm.getelementptr %10[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %55 = arith.addi %54, %c12_i32 : i32
    %c0_i32_14 = arith.constant 0 : i32
    %c1054536_i64 = arith.constant 1054536 : i64
    %56 = arith.extui %c0_i32_14 : i32 to i64
    %57 = arith.addi %56, %c1054536_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi ult, %59, %17 : i32
    cf.cond_br %60, ^bb6, ^bb7
  ^bb6:  // 2 preds: ^bb5, ^bb7
    %61 = llvm.getelementptr inbounds %15[%59] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.ptrtoint %62 : !llvm.ptr to i64
    %c0_i64_15 = arith.constant 0 : i64
    %64 = arith.cmpi eq, %63, %c0_i64_15 : i64
    cf.cond_br %64, ^bb9, ^bb8
  ^bb7:  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %65 = llvm.getelementptr %62[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %66 = llvm.getelementptr %62[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %67 = llvm.getelementptr %62[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %68 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64_16 = arith.constant 0 : i64
    %71 = arith.cmpi eq, %70, %c0_i64_16 : i64
    cf.cond_br %71, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %72 = llvm.load %66 : !llvm.ptr -> i32
    %73 = arith.cmpi ne, %12, %72 : i32
    cf.cond_br %73, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_17 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_17) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %74 = llvm.call %68(%69, %55) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %c0_i32_18 = arith.constant 0 : i32
    %c1_i32_19 = arith.constant 1 : i32
    %c1054560_i64_20 = arith.constant 1054560 : i64
    %75 = arith.extui %c0_i32_18 : i32 to i64
    %76 = arith.addi %75, %c1054560_i64_20 : i64
    %77 = llvm.getelementptr %10[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = arith.trunci %c1_i32_19 : i32 to i8
    llvm.store volatile %78, %77 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_22 = arith.constant 12 : i32
    %80 = arith.addi %79, %c12_i32_22 : i32
    %c16_i32_23 = arith.constant 16 : i32
    %81 = arith.addi %80, %c16_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c0_i64_24 : i64
    %84 = llvm.getelementptr %10[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %85 = llvm.load volatile %84 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %85, %3 : i32, !llvm.ptr
    %c1054556_i64_25 = arith.constant 1054556 : i64
    %86 = arith.extui %c0_i32_21 : i32 to i64
    %87 = arith.addi %86, %c1054556_i64_25 : i64
    %88 = llvm.getelementptr %10[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_27 = arith.constant 12 : i32
    %90 = arith.addi %89, %c12_i32_27 : i32
    %c8_i32_28 = arith.constant 8 : i32
    %91 = arith.addi %90, %c8_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_29 : i64
    %94 = llvm.getelementptr %10[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %95, %4 : i64, !llvm.ptr
    %c1054548_i64_30 = arith.constant 1054548 : i64
    %96 = arith.extui %c0_i32_26 : i32 to i64
    %97 = arith.addi %96, %c1054548_i64_30 : i64
    %98 = llvm.getelementptr %10[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %98 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_31 = arith.constant 0 : i32
    %99 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c12_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %103, %5 : i64, !llvm.ptr
    %c1054540_i64_32 = arith.constant 1054540 : i64
    %104 = arith.extui %c0_i32_31 : i32 to i64
    %105 = arith.addi %104, %c1054540_i64_32 : i64
    %106 = llvm.getelementptr %10[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %103, %106 {alignment = 1 : i64} : i64, !llvm.ptr
    %107 = llvm.load %0 : !llvm.ptr -> i32
    %108 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    %109 = arith.extui %107 : i32 to i64
    %110 = arith.addi %109, %c0_i64_33 : i64
    %111 = llvm.getelementptr %10[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i64, !llvm.ptr
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_34 = arith.constant 8 : i32
    %113 = arith.addi %112, %c8_i32_34 : i32
    %114 = llvm.load %4 : !llvm.ptr -> i64
    %c0_i64_35 = arith.constant 0 : i64
    %115 = arith.extui %113 : i32 to i64
    %116 = arith.addi %115, %c0_i64_35 : i64
    %117 = llvm.getelementptr %10[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %114, %117 {alignment = 1 : i64} : i64, !llvm.ptr
    %118 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_36 = arith.constant 16 : i32
    %119 = arith.addi %118, %c16_i32_36 : i32
    %120 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %121 = arith.extui %119 : i32 to i64
    %122 = arith.addi %121, %c0_i64_37 : i64
    %123 = llvm.getelementptr %10[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %120, %123 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func @f64(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %3 : i64, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %19 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %20 = arith.subi %19, %c32_i32 : i32
    llvm.store %20, %2 : i32, !llvm.ptr
    llvm.store %20, %8 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1054604_i64 = arith.constant 1054604 : i64
    %21 = arith.extui %c0_i32_6 : i32 to i64
    %22 = arith.addi %21, %c1054604_i64 : i64
    %23 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i8
    %25 = arith.extui %24 : i8 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_7 : i32
    cf.cond_br %26, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb12
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_8 = arith.constant 32 : i32
    %28 = arith.addi %27, %c32_i32_8 : i32
    llvm.store %28, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %30 = arith.addi %29, %c24_i32 : i32
    %c0_i32_9 = arith.constant 0 : i32
    %c1054592_i64 = arith.constant 1054592 : i64
    %31 = arith.extui %c0_i32_9 : i32 to i64
    %32 = arith.addi %31, %c1054592_i64 : i64
    %33 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    %35 = arith.extui %30 : i32 to i64
    %36 = arith.addi %35, %c0_i64_10 : i64
    %37 = llvm.getelementptr %11[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %34, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %39 = arith.addi %38, %c16_i32 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %c1054584_i64 = arith.constant 1054584 : i64
    %40 = arith.extui %c0_i32_11 : i32 to i64
    %41 = arith.addi %40, %c1054584_i64 : i64
    %42 = llvm.getelementptr %11[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    %44 = arith.extui %39 : i32 to i64
    %45 = arith.addi %44, %c0_i64_12 : i64
    %46 = llvm.getelementptr %11[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %43, %46 {alignment = 1 : i64} : i64, !llvm.ptr
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %c1054576_i64 = arith.constant 1054576 : i64
    %49 = arith.extui %c0_i32_13 : i32 to i64
    %50 = arith.addi %49, %c1054576_i64 : i64
    %51 = llvm.getelementptr %11[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_14 = arith.constant 0 : i64
    %53 = arith.extui %48 : i32 to i64
    %54 = arith.addi %53, %c0_i64_14 : i64
    %55 = llvm.getelementptr %11[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c1054568_i64 = arith.constant 1054568 : i64
    %57 = arith.extui %c0_i32_15 : i32 to i64
    %58 = arith.addi %57, %c1054568_i64 : i64
    %59 = llvm.getelementptr %11[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %61 = arith.extui %56 : i32 to i64
    %62 = arith.addi %61, %c0_i64_16 : i64
    %63 = llvm.getelementptr %11[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %c1054600_i64 = arith.constant 1054600 : i64
    %65 = arith.extui %c0_i32_17 : i32 to i64
    %66 = arith.addi %65, %c1054600_i64 : i64
    %67 = llvm.getelementptr %11[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    %69 = arith.cmpi ult, %68, %18 : i32
    cf.cond_br %69, ^bb6, ^bb7
  ^bb6:  // 2 preds: ^bb5, ^bb7
    %70 = llvm.getelementptr inbounds %16[%68] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    %72 = llvm.ptrtoint %71 : !llvm.ptr to i64
    %c0_i64_18 = arith.constant 0 : i64
    %73 = arith.cmpi eq, %72, %c0_i64_18 : i64
    cf.cond_br %73, ^bb9, ^bb8
  ^bb7:  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %74 = llvm.getelementptr %71[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %75 = llvm.getelementptr %71[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %76 = llvm.getelementptr %71[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %77 = llvm.load %74 : !llvm.ptr -> !llvm.ptr
    %78 = llvm.load %76 : !llvm.ptr -> !llvm.ptr
    %79 = llvm.ptrtoint %77 : !llvm.ptr to i64
    %c0_i64_19 = arith.constant 0 : i64
    %80 = arith.cmpi eq, %79, %c0_i64_19 : i64
    cf.cond_br %80, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %81 = llvm.load %75 : !llvm.ptr -> i32
    %82 = arith.cmpi ne, %13, %81 : i32
    cf.cond_br %82, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_20 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_20) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %83 = llvm.call %77(%78, %64) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %c0_i32_21 = arith.constant 0 : i32
    %c1_i32_22 = arith.constant 1 : i32
    %c1054604_i64_23 = arith.constant 1054604 : i64
    %84 = arith.extui %c0_i32_21 : i32 to i64
    %85 = arith.addi %84, %c1054604_i64_23 : i64
    %86 = llvm.getelementptr %11[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = arith.trunci %c1_i32_22 : i32 to i8
    llvm.store volatile %87, %86 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_25 = arith.constant 24 : i32
    %89 = arith.addi %88, %c24_i32_25 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c0_i64_26 : i64
    %92 = llvm.getelementptr %11[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %93, %3 : i64, !llvm.ptr
    %c1054592_i64_27 = arith.constant 1054592 : i64
    %94 = arith.extui %c0_i32_24 : i32 to i64
    %95 = arith.addi %94, %c1054592_i64_27 : i64
    %96 = llvm.getelementptr %11[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %96 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_29 = arith.constant 16 : i32
    %98 = arith.addi %97, %c16_i32_29 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c0_i64_30 : i64
    %101 = llvm.getelementptr %11[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %102, %4 : i64, !llvm.ptr
    %c1054584_i64_31 = arith.constant 1054584 : i64
    %103 = arith.extui %c0_i32_28 : i32 to i64
    %104 = arith.addi %103, %c1054584_i64_31 : i64
    %105 = llvm.getelementptr %11[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %102, %105 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_33 = arith.constant 8 : i32
    %107 = arith.addi %106, %c8_i32_33 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c0_i64_34 : i64
    %110 = llvm.getelementptr %11[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %111, %5 : i64, !llvm.ptr
    %c1054576_i64_35 = arith.constant 1054576 : i64
    %112 = arith.extui %c0_i32_32 : i32 to i64
    %113 = arith.addi %112, %c1054576_i64_35 : i64
    %114 = llvm.getelementptr %11[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %111, %114 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_36 = arith.constant 0 : i32
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c0_i64_37 : i64
    %118 = llvm.getelementptr %11[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %119, %6 : i64, !llvm.ptr
    %c1054568_i64_38 = arith.constant 1054568 : i64
    %120 = arith.extui %c0_i32_36 : i32 to i64
    %121 = arith.addi %120, %c1054568_i64_38 : i64
    %122 = llvm.getelementptr %11[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %119, %122 {alignment = 1 : i64} : i64, !llvm.ptr
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %124 = llvm.load %6 : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %125 = arith.extui %123 : i32 to i64
    %126 = arith.addi %125, %c0_i64_39 : i64
    %127 = llvm.getelementptr %11[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %124, %127 {alignment = 1 : i64} : i64, !llvm.ptr
    %128 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_40 = arith.constant 8 : i32
    %129 = arith.addi %128, %c8_i32_40 : i32
    %130 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %131 = arith.extui %129 : i32 to i64
    %132 = arith.addi %131, %c0_i64_41 : i64
    %133 = llvm.getelementptr %11[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %133 {alignment = 1 : i64} : i64, !llvm.ptr
    %134 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_42 = arith.constant 16 : i32
    %135 = arith.addi %134, %c16_i32_42 : i32
    %136 = llvm.load %4 : !llvm.ptr -> i64
    %c0_i64_43 = arith.constant 0 : i64
    %137 = arith.extui %135 : i32 to i64
    %138 = arith.addi %137, %c0_i64_43 : i64
    %139 = llvm.getelementptr %11[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %139 {alignment = 1 : i64} : i64, !llvm.ptr
    %140 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_44 = arith.constant 24 : i32
    %141 = arith.addi %140, %c24_i32_44 : i32
    %142 = llvm.load %3 : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    %143 = arith.extui %141 : i32 to i64
    %144 = arith.addi %143, %c0_i64_45 : i64
    %145 = llvm.getelementptr %11[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %142, %145 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func @f65(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %13 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %14 : !llvm.ptr -> i64
    %17 = arith.trunci %16 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %18 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %19 = arith.subi %18, %c32_i32 : i32
    llvm.store %19, %2 : i32, !llvm.ptr
    llvm.store %19, %7 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1054672_i64 = arith.constant 1054672 : i64
    %20 = arith.extui %c0_i32_5 : i32 to i64
    %21 = arith.addi %20, %c1054672_i64 : i64
    %22 = llvm.getelementptr %10[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i8
    %24 = arith.extui %23 : i8 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_6 : i32
    cf.cond_br %25, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb12
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_7 = arith.constant 32 : i32
    %27 = arith.addi %26, %c32_i32_7 : i32
    llvm.store %27, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %29 = arith.addi %28, %c16_i32 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %c1054668_i64 = arith.constant 1054668 : i64
    %30 = arith.extui %c0_i32_8 : i32 to i64
    %31 = arith.addi %30, %c1054668_i64 : i64
    %32 = llvm.getelementptr %10[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %34 = arith.extui %29 : i32 to i64
    %35 = arith.addi %34, %c0_i64_9 : i64
    %36 = llvm.getelementptr %10[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %38 = arith.addi %37, %c8_i32 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %c1054660_i64 = arith.constant 1054660 : i64
    %39 = arith.extui %c0_i32_10 : i32 to i64
    %40 = arith.addi %39, %c1054660_i64 : i64
    %41 = llvm.getelementptr %10[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %43 = arith.extui %38 : i32 to i64
    %44 = arith.addi %43, %c0_i64_11 : i64
    %45 = llvm.getelementptr %10[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %42, %45 {alignment = 1 : i64} : i64, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %c1054652_i64 = arith.constant 1054652 : i64
    %47 = arith.extui %c0_i32_12 : i32 to i64
    %48 = arith.addi %47, %c1054652_i64 : i64
    %49 = llvm.getelementptr %10[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_13 = arith.constant 0 : i64
    %51 = arith.extui %46 : i32 to i64
    %52 = arith.addi %51, %c0_i64_13 : i64
    %53 = llvm.getelementptr %10[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %55 = arith.addi %54, %c12_i32 : i32
    %c0_i32_14 = arith.constant 0 : i32
    %c1054648_i64 = arith.constant 1054648 : i64
    %56 = arith.extui %c0_i32_14 : i32 to i64
    %57 = arith.addi %56, %c1054648_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi ult, %59, %17 : i32
    cf.cond_br %60, ^bb6, ^bb7
  ^bb6:  // 2 preds: ^bb5, ^bb7
    %61 = llvm.getelementptr inbounds %15[%59] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.ptrtoint %62 : !llvm.ptr to i64
    %c0_i64_15 = arith.constant 0 : i64
    %64 = arith.cmpi eq, %63, %c0_i64_15 : i64
    cf.cond_br %64, ^bb9, ^bb8
  ^bb7:  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %65 = llvm.getelementptr %62[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %66 = llvm.getelementptr %62[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %67 = llvm.getelementptr %62[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %68 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64_16 = arith.constant 0 : i64
    %71 = arith.cmpi eq, %70, %c0_i64_16 : i64
    cf.cond_br %71, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %72 = llvm.load %66 : !llvm.ptr -> i32
    %73 = arith.cmpi ne, %12, %72 : i32
    cf.cond_br %73, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_17 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_17) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %74 = llvm.call %68(%69, %55) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %c0_i32_18 = arith.constant 0 : i32
    %c1_i32_19 = arith.constant 1 : i32
    %c1054672_i64_20 = arith.constant 1054672 : i64
    %75 = arith.extui %c0_i32_18 : i32 to i64
    %76 = arith.addi %75, %c1054672_i64_20 : i64
    %77 = llvm.getelementptr %10[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = arith.trunci %c1_i32_19 : i32 to i8
    llvm.store volatile %78, %77 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_22 = arith.constant 12 : i32
    %80 = arith.addi %79, %c12_i32_22 : i32
    %c16_i32_23 = arith.constant 16 : i32
    %81 = arith.addi %80, %c16_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %82 = arith.extui %81 : i32 to i64
    %83 = arith.addi %82, %c0_i64_24 : i64
    %84 = llvm.getelementptr %10[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %85 = llvm.load volatile %84 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %85, %3 : i32, !llvm.ptr
    %c1054668_i64_25 = arith.constant 1054668 : i64
    %86 = arith.extui %c0_i32_21 : i32 to i64
    %87 = arith.addi %86, %c1054668_i64_25 : i64
    %88 = llvm.getelementptr %10[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_27 = arith.constant 12 : i32
    %90 = arith.addi %89, %c12_i32_27 : i32
    %c8_i32_28 = arith.constant 8 : i32
    %91 = arith.addi %90, %c8_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_29 : i64
    %94 = llvm.getelementptr %10[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %95, %4 : i64, !llvm.ptr
    %c1054660_i64_30 = arith.constant 1054660 : i64
    %96 = arith.extui %c0_i32_26 : i32 to i64
    %97 = arith.addi %96, %c1054660_i64_30 : i64
    %98 = llvm.getelementptr %10[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %98 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_31 = arith.constant 0 : i32
    %99 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c12_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %103, %5 : i64, !llvm.ptr
    %c1054652_i64_32 = arith.constant 1054652 : i64
    %104 = arith.extui %c0_i32_31 : i32 to i64
    %105 = arith.addi %104, %c1054652_i64_32 : i64
    %106 = llvm.getelementptr %10[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %103, %106 {alignment = 1 : i64} : i64, !llvm.ptr
    %107 = llvm.load %0 : !llvm.ptr -> i32
    %108 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_33 = arith.constant 0 : i64
    %109 = arith.extui %107 : i32 to i64
    %110 = arith.addi %109, %c0_i64_33 : i64
    %111 = llvm.getelementptr %10[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i64, !llvm.ptr
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_34 = arith.constant 8 : i32
    %113 = arith.addi %112, %c8_i32_34 : i32
    %114 = llvm.load %4 : !llvm.ptr -> i64
    %c0_i64_35 = arith.constant 0 : i64
    %115 = arith.extui %113 : i32 to i64
    %116 = arith.addi %115, %c0_i64_35 : i64
    %117 = llvm.getelementptr %10[%116] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %114, %117 {alignment = 1 : i64} : i64, !llvm.ptr
    %118 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_36 = arith.constant 16 : i32
    %119 = arith.addi %118, %c16_i32_36 : i32
    %120 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %121 = arith.extui %119 : i32 to i64
    %122 = arith.addi %121, %c0_i64_37 : i64
    %123 = llvm.getelementptr %10[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %120, %123 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func @f66(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[832] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %1[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.call %3(%5) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr) -> i64
    cf.br ^bb2(%6 : i64)
  ^bb2(%7: i64):  // pred: ^bb1
    return %7 : i64
  }
  func.func @f67(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[856] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %1[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.call %3(%5) vararg(!llvm.func<i64 (...)>) : !llvm.ptr, (!llvm.ptr) -> i64
    cf.br ^bb2(%6 : i64)
  ^bb2(%7: i64):  // pred: ^bb1
    return %7 : i64
  }
  func.func @f68(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %3 : i64, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %19 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %20 = arith.subi %19, %c32_i32 : i32
    llvm.store %20, %2 : i32, !llvm.ptr
    llvm.store %20, %8 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1054644_i64 = arith.constant 1054644 : i64
    %21 = arith.extui %c0_i32_6 : i32 to i64
    %22 = arith.addi %21, %c1054644_i64 : i64
    %23 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i8
    %25 = arith.extui %24 : i8 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_7 : i32
    cf.cond_br %26, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb12
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_8 = arith.constant 32 : i32
    %28 = arith.addi %27, %c32_i32_8 : i32
    llvm.store %28, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %30 = arith.addi %29, %c24_i32 : i32
    %c0_i32_9 = arith.constant 0 : i32
    %c1054632_i64 = arith.constant 1054632 : i64
    %31 = arith.extui %c0_i32_9 : i32 to i64
    %32 = arith.addi %31, %c1054632_i64 : i64
    %33 = llvm.getelementptr %11[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    %35 = arith.extui %30 : i32 to i64
    %36 = arith.addi %35, %c0_i64_10 : i64
    %37 = llvm.getelementptr %11[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %34, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %39 = arith.addi %38, %c16_i32 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %c1054624_i64 = arith.constant 1054624 : i64
    %40 = arith.extui %c0_i32_11 : i32 to i64
    %41 = arith.addi %40, %c1054624_i64 : i64
    %42 = llvm.getelementptr %11[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    %44 = arith.extui %39 : i32 to i64
    %45 = arith.addi %44, %c0_i64_12 : i64
    %46 = llvm.getelementptr %11[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %43, %46 {alignment = 1 : i64} : i64, !llvm.ptr
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %48 = arith.addi %47, %c8_i32 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %c1054616_i64 = arith.constant 1054616 : i64
    %49 = arith.extui %c0_i32_13 : i32 to i64
    %50 = arith.addi %49, %c1054616_i64 : i64
    %51 = llvm.getelementptr %11[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_14 = arith.constant 0 : i64
    %53 = arith.extui %48 : i32 to i64
    %54 = arith.addi %53, %c0_i64_14 : i64
    %55 = llvm.getelementptr %11[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c1054608_i64 = arith.constant 1054608 : i64
    %57 = arith.extui %c0_i32_15 : i32 to i64
    %58 = arith.addi %57, %c1054608_i64 : i64
    %59 = llvm.getelementptr %11[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %61 = arith.extui %56 : i32 to i64
    %62 = arith.addi %61, %c0_i64_16 : i64
    %63 = llvm.getelementptr %11[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %c1054640_i64 = arith.constant 1054640 : i64
    %65 = arith.extui %c0_i32_17 : i32 to i64
    %66 = arith.addi %65, %c1054640_i64 : i64
    %67 = llvm.getelementptr %11[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    %69 = arith.cmpi ult, %68, %18 : i32
    cf.cond_br %69, ^bb6, ^bb7
  ^bb6:  // 2 preds: ^bb5, ^bb7
    %70 = llvm.getelementptr inbounds %16[%68] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %71 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    %72 = llvm.ptrtoint %71 : !llvm.ptr to i64
    %c0_i64_18 = arith.constant 0 : i64
    %73 = arith.cmpi eq, %72, %c0_i64_18 : i64
    cf.cond_br %73, ^bb9, ^bb8
  ^bb7:  // pred: ^bb5
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %74 = llvm.getelementptr %71[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %75 = llvm.getelementptr %71[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %76 = llvm.getelementptr %71[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %77 = llvm.load %74 : !llvm.ptr -> !llvm.ptr
    %78 = llvm.load %76 : !llvm.ptr -> !llvm.ptr
    %79 = llvm.ptrtoint %77 : !llvm.ptr to i64
    %c0_i64_19 = arith.constant 0 : i64
    %80 = arith.cmpi eq, %79, %c0_i64_19 : i64
    cf.cond_br %80, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %81 = llvm.load %75 : !llvm.ptr -> i32
    %82 = arith.cmpi ne, %13, %81 : i32
    cf.cond_br %82, ^bb13, ^bb12
  ^bb11:  // pred: ^bb8
    %c3_i32_20 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_20) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %83 = llvm.call %77(%78, %64) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32) -> !llvm.void
    %c0_i32_21 = arith.constant 0 : i32
    %c1_i32_22 = arith.constant 1 : i32
    %c1054644_i64_23 = arith.constant 1054644 : i64
    %84 = arith.extui %c0_i32_21 : i32 to i64
    %85 = arith.addi %84, %c1054644_i64_23 : i64
    %86 = llvm.getelementptr %11[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = arith.trunci %c1_i32_22 : i32 to i8
    llvm.store volatile %87, %86 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_25 = arith.constant 24 : i32
    %89 = arith.addi %88, %c24_i32_25 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c0_i64_26 : i64
    %92 = llvm.getelementptr %11[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %93, %3 : i64, !llvm.ptr
    %c1054632_i64_27 = arith.constant 1054632 : i64
    %94 = arith.extui %c0_i32_24 : i32 to i64
    %95 = arith.addi %94, %c1054632_i64_27 : i64
    %96 = llvm.getelementptr %11[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %96 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_29 = arith.constant 16 : i32
    %98 = arith.addi %97, %c16_i32_29 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c0_i64_30 : i64
    %101 = llvm.getelementptr %11[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %102, %4 : i64, !llvm.ptr
    %c1054624_i64_31 = arith.constant 1054624 : i64
    %103 = arith.extui %c0_i32_28 : i32 to i64
    %104 = arith.addi %103, %c1054624_i64_31 : i64
    %105 = llvm.getelementptr %11[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %102, %105 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    %106 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_33 = arith.constant 8 : i32
    %107 = arith.addi %106, %c8_i32_33 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c0_i64_34 : i64
    %110 = llvm.getelementptr %11[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %111, %5 : i64, !llvm.ptr
    %c1054616_i64_35 = arith.constant 1054616 : i64
    %112 = arith.extui %c0_i32_32 : i32 to i64
    %113 = arith.addi %112, %c1054616_i64_35 : i64
    %114 = llvm.getelementptr %11[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %111, %114 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_36 = arith.constant 0 : i32
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_37 = arith.constant 0 : i64
    %116 = arith.extui %115 : i32 to i64
    %117 = arith.addi %116, %c0_i64_37 : i64
    %118 = llvm.getelementptr %11[%117] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %119 = llvm.load volatile %118 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %119, %6 : i64, !llvm.ptr
    %c1054608_i64_38 = arith.constant 1054608 : i64
    %120 = arith.extui %c0_i32_36 : i32 to i64
    %121 = arith.addi %120, %c1054608_i64_38 : i64
    %122 = llvm.getelementptr %11[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %119, %122 {alignment = 1 : i64} : i64, !llvm.ptr
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %124 = llvm.load %6 : !llvm.ptr -> i64
    %c0_i64_39 = arith.constant 0 : i64
    %125 = arith.extui %123 : i32 to i64
    %126 = arith.addi %125, %c0_i64_39 : i64
    %127 = llvm.getelementptr %11[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %124, %127 {alignment = 1 : i64} : i64, !llvm.ptr
    %128 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_40 = arith.constant 8 : i32
    %129 = arith.addi %128, %c8_i32_40 : i32
    %130 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %131 = arith.extui %129 : i32 to i64
    %132 = arith.addi %131, %c0_i64_41 : i64
    %133 = llvm.getelementptr %11[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %133 {alignment = 1 : i64} : i64, !llvm.ptr
    %134 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_42 = arith.constant 16 : i32
    %135 = arith.addi %134, %c16_i32_42 : i32
    %136 = llvm.load %4 : !llvm.ptr -> i64
    %c0_i64_43 = arith.constant 0 : i64
    %137 = arith.extui %135 : i32 to i64
    %138 = arith.addi %137, %c0_i64_43 : i64
    %139 = llvm.getelementptr %11[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %139 {alignment = 1 : i64} : i64, !llvm.ptr
    %140 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_44 = arith.constant 24 : i32
    %141 = arith.addi %140, %c24_i32_44 : i32
    %142 = llvm.load %3 : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    %143 = arith.extui %141 : i32 to i64
    %144 = arith.addi %143, %c0_i64_45 : i64
    %145 = llvm.getelementptr %11[%144] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %142, %145 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb10
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb12
  }
  func.func @f69(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_1 = arith.constant 0 : i32
    %c1054768_i64 = arith.constant 1054768 : i64
    %5 = arith.extui %c0_i32_1 : i32 to i64
    %6 = arith.addi %5, %c1054768_i64 : i64
    %7 = llvm.getelementptr %4[%6] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %8 = llvm.load volatile %7 {alignment = 1 : i64} : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_2 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2(%11: i32):  // 2 preds: ^bb3, ^bb4
    return %11 : i32
  ^bb3:  // pred: ^bb1
    %c0_i32_3 = arith.constant 0 : i32
    %c1054764_i64 = arith.constant 1054764 : i64
    %12 = arith.extui %c0_i32_3 : i32 to i64
    %13 = arith.addi %12, %c1054764_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.br ^bb2(%15 : i32)
  ^bb4:  // pred: ^bb1
    %16 = call @f20(%arg0) : (!llvm.ptr) -> i32
    llvm.store %16, %1 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %c1054768_i64_6 = arith.constant 1054768 : i64
    %17 = arith.extui %c0_i32_4 : i32 to i64
    %18 = arith.addi %17, %c1054768_i64_6 : i64
    %19 = llvm.getelementptr %4[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = arith.trunci %c1_i32_5 : i32 to i8
    llvm.store volatile %20, %19 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c1054764_i64_8 = arith.constant 1054764 : i64
    %22 = arith.extui %c0_i32_7 : i32 to i64
    %23 = arith.addi %22, %c1054764_i64_8 : i64
    %24 = llvm.getelementptr %4[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %24 {alignment = 1 : i64} : i32, !llvm.ptr
    %25 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%25 : i32)
  }
  func.func @f70(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %17 = llvm.getelementptr %5[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c52_i64 = arith.constant 52 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c52_i64 : i64
    %27 = llvm.getelementptr %5[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %29 = arith.cmpi ult, %28, %12 : i32
    cf.cond_br %29, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %30 = llvm.getelementptr inbounds %10[%28] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %31 = llvm.load %30 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.ptrtoint %31 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %33 = arith.cmpi eq, %32, %c0_i64_2 : i64
    cf.cond_br %33, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %34 = llvm.getelementptr %31[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.getelementptr %31[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.getelementptr %31[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %37 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %39 = llvm.ptrtoint %37 : !llvm.ptr to i64
    %c0_i64_3 = arith.constant 0 : i64
    %40 = arith.cmpi eq, %39, %c0_i64_3 : i64
    cf.cond_br %40, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %41 = llvm.load %35 : !llvm.ptr -> i32
    %42 = arith.cmpi ne, %7, %41 : i32
    cf.cond_br %42, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_4 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_4) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %43 = llvm.call %37(%38, %13, %18, %19) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f71(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %5[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c56_i64 = arith.constant 56 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c56_i64 : i64
    %27 = llvm.getelementptr %5[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %29 = arith.cmpi ult, %28, %12 : i32
    cf.cond_br %29, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %30 = llvm.getelementptr inbounds %10[%28] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %31 = llvm.load %30 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.ptrtoint %31 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %33 = arith.cmpi eq, %32, %c0_i64_2 : i64
    cf.cond_br %33, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %34 = llvm.getelementptr %31[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.getelementptr %31[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.getelementptr %31[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %37 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %36 : !llvm.ptr -> !llvm.ptr
    %39 = llvm.ptrtoint %37 : !llvm.ptr to i64
    %c0_i64_3 = arith.constant 0 : i64
    %40 = arith.cmpi eq, %39, %c0_i64_3 : i64
    cf.cond_br %40, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %41 = llvm.load %35 : !llvm.ptr -> i32
    %42 = arith.cmpi ne, %7, %41 : i32
    cf.cond_br %42, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_4 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_4) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %43 = llvm.call %37(%38, %17, %18, %19) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> !llvm.void
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f72(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1049544_i32 = arith.constant 1049544 : i32
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = call @f75(%arg0, %c1049544_i32, %2, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f73(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f74(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1049544_i32 = arith.constant 1049544 : i32
    %4 = llvm.load %2 : !llvm.ptr -> i32
    %5 = llvm.load %3 : !llvm.ptr -> i32
    %6 = call @f75(%arg0, %c1049544_i32, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %6, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi eq, %6, %c0_i32 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32_3 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2(%10: i32):  // pred: ^bb3
    return %10 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %11 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%11 : i32)
  ^bb4:  // pred: ^bb1
    %12 = llvm.load %2 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = arith.cmpi ult, %16, %17 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_4 : i32
    %21 = arith.select %20, %14, %15 : i32
    %22 = call @f202(%arg0, %12, %13, %21) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb3
  }
  func.func @f75(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %3 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c1054772_i64 = arith.constant 1054772 : i64
    %9 = arith.extui %c0_i32_6 : i32 to i64
    %10 = arith.addi %9, %c1054772_i64 : i64
    %11 = llvm.getelementptr %8[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %12 = llvm.load volatile %11 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %12, %4 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_7 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2(%14: i32):  // pred: ^bb5
    return %14 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %15 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = arith.subi %c0_i32_8, %16 : i32
    %18 = arith.andi %15, %17 : i32
    llvm.store %18, %4 : i32, !llvm.ptr
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %20 = arith.cmpi ult, %18, %19 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_9 : i32
    cf.cond_br %22, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %c0_i32_10 = arith.constant 0 : i32
    %23 = call @dora_fn_wasm_memory_size(%arg0, %c0_i32_10) : (!llvm.ptr, i32) -> i32
    llvm.store %23, %5 : i32, !llvm.ptr
    %c0_i32_11 = arith.constant 0 : i32
    %c0_i32_12 = arith.constant 0 : i32
    %c1054816_i32 = arith.constant 1054816 : i32
    %24 = arith.subi %c0_i32_12, %c1054816_i32 : i32
    llvm.store %24, %4 : i32, !llvm.ptr
    %c1054772_i64_13 = arith.constant 1054772 : i64
    %25 = arith.extui %c0_i32_11 : i32 to i64
    %26 = arith.addi %25, %c1054772_i64_13 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %c1_i32_15 = arith.constant 1 : i32
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32 = arith.constant 31 : i32
    %29 = arith.cmpi ule, %c16_i32, %c31_i32 : i32
    %30 = scf.if %29 -> (i32) {
      %81 = arith.shli %28, %c16_i32 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_38 = arith.constant 0 : i32
      scf.yield %c0_i32_38 : i32
    }
    %31 = arith.subi %c1_i32_15, %30 : i32
    %c1054776_i64 = arith.constant 1054776 : i64
    %32 = arith.extui %c0_i32_14 : i32 to i64
    %33 = arith.addi %32, %c1054776_i64 : i64
    %34 = llvm.getelementptr %8[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb3, ^bb7, ^bb8
    %35 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb2(%35 : i32)
  ^bb6:  // pred: ^bb3
    %c0_i32_16 = arith.constant 0 : i32
    llvm.store %c0_i32_16, %3 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %c1054776_i64_18 = arith.constant 1054776 : i64
    %36 = arith.extui %c0_i32_17 : i32 to i64
    %37 = arith.addi %36, %c1054776_i64_18 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %39, %1 : i32, !llvm.ptr
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %42 = arith.subi %40, %41 : i32
    llvm.store %42, %2 : i32, !llvm.ptr
    %c1_i32_19 = arith.constant 1 : i32
    %43 = arith.addi %42, %c1_i32_19 : i32
    llvm.store %43, %5 : i32, !llvm.ptr
    %44 = arith.cmpi ule, %39, %43 : i32
    %45 = arith.extui %44 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_20 : i32
    cf.cond_br %46, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb9
    %c0_i32_21 = arith.constant 0 : i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c1054772_i64_22 = arith.constant 1054772 : i64
    %48 = arith.extui %c0_i32_21 : i32 to i64
    %49 = arith.addi %48, %c1054772_i64_22 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_23 = arith.constant 0 : i32
    %51 = llvm.load %4 : !llvm.ptr -> i32
    %52 = arith.subi %c0_i32_23, %51 : i32
    llvm.store %52, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb6
    %c0_i32_24 = arith.constant 0 : i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %54 = llvm.load %5 : !llvm.ptr -> i32
    %55 = arith.subi %53, %54 : i32
    llvm.store %55, %5 : i32, !llvm.ptr
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = arith.cmpi ugt, %56, %57 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_25 : i32
    %61 = arith.select %60, %c0_i32_24, %55 : i32
    %c-1_i32 = arith.constant -1 : i32
    %62 = arith.addi %61, %c-1_i32 : i32
    %c16_i32_26 = arith.constant 16 : i32
    %c31_i32_27 = arith.constant 31 : i32
    %63 = arith.cmpi ule, %c16_i32_26, %c31_i32_27 : i32
    %64 = scf.if %63 -> (i32) {
      %81 = arith.shrui %62, %c16_i32_26 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_38 = arith.constant 0 : i32
      scf.yield %c0_i32_38 : i32
    }
    %c1_i32_28 = arith.constant 1 : i32
    %65 = arith.addi %64, %c1_i32_28 : i32
    llvm.store %65, %1 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    %66 = call @dora_fn_wasm_memory_grow(%arg0, %65, %c0_i32_29) : (!llvm.ptr, i32, i32) -> i32
    %c-1_i32_30 = arith.constant -1 : i32
    %67 = arith.cmpi eq, %66, %c-1_i32_30 : i32
    %68 = arith.extui %67 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_31 : i32
    cf.cond_br %69, ^bb5, ^bb9
  ^bb9:  // pred: ^bb8
    %c0_i32_32 = arith.constant 0 : i32
    %c0_i32_33 = arith.constant 0 : i32
    %c1054776_i64_34 = arith.constant 1054776 : i64
    %70 = arith.extui %c0_i32_33 : i32 to i64
    %71 = arith.addi %70, %c1054776_i64_34 : i64
    %72 = llvm.getelementptr %8[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_35 = arith.constant 16 : i32
    %c31_i32_36 = arith.constant 31 : i32
    %75 = arith.cmpi ule, %c16_i32_35, %c31_i32_36 : i32
    %76 = scf.if %75 -> (i32) {
      %81 = arith.shli %74, %c16_i32_35 : i32
      scf.yield %81 : i32
    } else {
      %c0_i32_38 = arith.constant 0 : i32
      scf.yield %c0_i32_38 : i32
    }
    %77 = arith.subi %73, %76 : i32
    %c1054776_i64_37 = arith.constant 1054776 : i64
    %78 = arith.extui %c0_i32_32 : i32 to i64
    %79 = arith.addi %78, %c1054776_i64_37 : i64
    %80 = llvm.getelementptr %8[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %77, %80 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  }
  func.func @f76(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %11 = call @f107(%arg0, %9, %10) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%11 : i32)
  ^bb2(%12: i32):  // pred: ^bb1
    return %12 : i32
  }
  func.func @f77(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %10 = arith.subi %9, %c80_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %0 : i32, !llvm.ptr
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %17 = arith.addi %16, %c16_i32 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %c64_i32 = arith.constant 64 : i32
    %18 = call @f200(%arg0, %17, %c0_i32_3, %c64_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c30768_i32 = arith.constant 30768 : i32
    %c14_i64 = arith.constant 14 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c14_i64 : i64
    %22 = llvm.getelementptr %8[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = arith.trunci %c30768_i32 : i32 to i16
    llvm.store volatile %23, %22 {alignment = 1 : i64} : i16, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %25 = llvm.load %3 : !llvm.ptr -> i32
    call @f106(%arg0, %24, %c32_i32, %25) : (!llvm.ptr, i32, i32, i32) -> ()
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c14_i32 = arith.constant 14 : i32
    %28 = arith.addi %27, %c14_i32 : i32
    %c66_i32 = arith.constant 66 : i32
    %29 = call @f186(%arg0, %26, %28, %c66_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %29, %0 : i32, !llvm.ptr
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %c80_i32_4 = arith.constant 80 : i32
    %31 = arith.addi %30, %c80_i32_4 : i32
    llvm.store %31, %5 : i32, !llvm.ptr
    %32 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%32 : i32)
  ^bb2(%33: i32):  // pred: ^bb1
    return %33 : i32
  }
  func.func @f78(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %7[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_2 = arith.constant 0 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c0_i64_2 : i64
    %18 = llvm.getelementptr %7[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %19, %0 : i32, !llvm.ptr
    %c12_i32 = arith.constant 12 : i32
    %20 = arith.addi %19, %c12_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %21 = arith.extui %10 : i32 to i64
    %22 = arith.addi %21, %c12_i64 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %20, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c1049592_i32 = arith.constant 1049592 : i32
    %c7_i32 = arith.constant 7 : i32
    %c1049599_i32 = arith.constant 1049599 : i32
    %c6_i32 = arith.constant 6 : i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c1049560_i32 = arith.constant 1049560 : i32
    %c1049605_i32 = arith.constant 1049605 : i32
    %c4_i32 = arith.constant 4 : i32
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_3 = arith.constant 12 : i32
    %27 = arith.addi %26, %c12_i32_3 : i32
    %c1049576_i32 = arith.constant 1049576 : i32
    %28 = call @f187(%arg0, %24, %c1049592_i32, %c7_i32, %c1049599_i32, %c6_i32, %25, %c1049560_i32, %c1049605_i32, %c4_i32, %27, %c1049576_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %28, %0 : i32, !llvm.ptr
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %30 = arith.addi %29, %c16_i32_4 : i32
    llvm.store %30, %4 : i32, !llvm.ptr
    %31 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%31 : i32)
  ^bb2(%32: i32):  // pred: ^bb1
    return %32 : i32
  }
  func.func @f79(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %0 : i32, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c4_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c8_i64 : i64
    %17 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %20 = call @f189(%arg0, %13, %18, %19) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%20 : i32)
  ^bb2(%21: i32):  // pred: ^bb1
    return %21 : i32
  }
  func.func @f80(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %11 = call @f170(%arg0, %9, %10) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%11 : i32)
  ^bb2(%12: i32):  // pred: ^bb1
    return %12 : i32
  }
  func.func @f81(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %11 = call @f114(%arg0, %9, %10) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%11 : i32)
  ^bb2(%12: i32):  // pred: ^bb1
    return %12 : i32
  }
  func.func @f82(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %14, %0 : i32, !llvm.ptr
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_2 = arith.constant 0 : i64
    %c8_i64 = arith.constant 8 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c8_i64 : i64
    %18 = llvm.getelementptr %7[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_2, %18 {alignment = 1 : i64} : i64, !llvm.ptr
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c30768_i32 = arith.constant 30768 : i32
    %c6_i64 = arith.constant 6 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c6_i64 : i64
    %22 = llvm.getelementptr %7[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = arith.trunci %c30768_i32 : i32 to i16
    llvm.store volatile %23, %22 {alignment = 1 : i64} : i16, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %26 = arith.addi %25, %c8_i32 : i32
    call @f106(%arg0, %24, %c4_i32, %26) : (!llvm.ptr, i32, i32, i32) -> ()
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %29 = arith.addi %28, %c6_i32 : i32
    %c10_i32 = arith.constant 10 : i32
    %30 = call @f186(%arg0, %27, %29, %c10_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %30, %0 : i32, !llvm.ptr
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_3 = arith.constant 16 : i32
    %32 = arith.addi %31, %c16_i32_3 : i32
    llvm.store %32, %4 : i32, !llvm.ptr
    %33 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%33 : i32)
  ^bb2(%34: i32):  // pred: ^bb1
    return %34 : i32
  }
  func.func @f83(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %0 : i32, !llvm.ptr
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c4_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c8_i64 : i64
    %17 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %20 = call @f191(%arg0, %13, %18, %19) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%20 : i32)
  ^bb2(%21: i32):  // pred: ^bb1
    return %21 : i32
  }
  func.func @f84(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %3 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %12 = arith.addi %11, %c4_i32 : i32
    %13 = llvm.load %2 : !llvm.ptr -> i32
    call @f188(%arg0, %12, %13) : (!llvm.ptr, i32, i32) -> ()
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_3 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2(%18: i32):  // pred: ^bb3
    return %18 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb5
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_5 = arith.constant 4 : i32
    %20 = arith.addi %19, %c4_i32_5 : i32
    %21 = call @f181(%arg0, %20) : (!llvm.ptr, i32) -> i32
    llvm.store %21, %0 : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_6 = arith.constant 16 : i32
    %23 = arith.addi %22, %c16_i32_6 : i32
    llvm.store %23, %5 : i32, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%24 : i32)
  ^bb4:  // pred: ^bb1
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32 = arith.constant 31 : i32
    %26 = arith.cmpi ule, %c5_i32, %c31_i32 : i32
    %27 = scf.if %26 -> (i32) {
      %43 = arith.shli %25, %c5_i32 : i32
      scf.yield %43 : i32
    } else {
      %c0_i32_9 = arith.constant 0 : i32
      scf.yield %c0_i32_9 : i32
    }
    llvm.store %27, %1 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c12_i64 : i64
    %32 = llvm.getelementptr %8[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %33 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_7 = arith.constant 4 : i32
    %34 = arith.addi %33, %c4_i32_7 : i32
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %36 = arith.addi %35, %c12_i32 : i32
    %c1049544_i32 = arith.constant 1049544 : i32
    %37 = call @f180(%arg0, %34, %36, %c1049544_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %39 = arith.addi %38, %c32_i32 : i32
    llvm.store %39, %0 : i32, !llvm.ptr
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %41 = arith.addi %40, %c-32_i32 : i32
    llvm.store %41, %1 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_8 : i32
    cf.cond_br %42, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func @f85(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32 = arith.constant 31 : i32
    %19 = arith.cmpi ule, %c5_i32, %c31_i32 : i32
    %20 = scf.if %19 -> (i32) {
      %21 = arith.shli %18, %c5_i32 : i32
      scf.yield %21 : i32
    } else {
      %c0_i32_4 = arith.constant 0 : i32
      scf.yield %c0_i32_4 : i32
    }
    %c1_i32_3 = arith.constant 1 : i32
    call @f73(%arg0, %17, %20, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f86(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c4_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c4_i64_1 = arith.constant 4 : i64
    %11 = arith.extui %5 : i32 to i64
    %12 = arith.addi %11, %c4_i64_1 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i32, !llvm.ptr
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c8_i64 : i64
    %18 = llvm.getelementptr %4[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %19 = llvm.load volatile %18 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32 = arith.constant 31 : i32
    %20 = arith.cmpi ule, %c5_i32, %c31_i32 : i32
    %21 = scf.if %20 -> (i32) {
      %36 = arith.shli %19, %c5_i32 : i32
      scf.yield %36 : i32
    } else {
      %c0_i32 = arith.constant 0 : i32
      scf.yield %c0_i32 : i32
    }
    %c8_i64_2 = arith.constant 8 : i64
    %22 = arith.extui %14 : i32 to i64
    %23 = arith.addi %22, %c8_i64_2 : i64
    %24 = llvm.getelementptr %4[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %21, %24 {alignment = 1 : i64} : i32, !llvm.ptr
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c0_i64 : i64
    %29 = llvm.getelementptr %4[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c5_i32_3 = arith.constant 5 : i32
    %c31_i32_4 = arith.constant 31 : i32
    %31 = arith.cmpi ule, %c5_i32_3, %c31_i32_4 : i32
    %32 = scf.if %31 -> (i32) {
      %36 = arith.shli %30, %c5_i32_3 : i32
      scf.yield %36 : i32
    } else {
      %c0_i32 = arith.constant 0 : i32
      scf.yield %c0_i32 : i32
    }
    %c0_i64_5 = arith.constant 0 : i64
    %33 = arith.extui %25 : i32 to i64
    %34 = arith.addi %33, %c0_i64_5 : i64
    %35 = llvm.getelementptr %4[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f87(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %8 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %14 = arith.subi %13, %c32_i32 : i32
    llvm.store %14, %4 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %16 = llvm.load %3 : !llvm.ptr -> i32
    %17 = arith.addi %15, %16 : i32
    llvm.store %17, %3 : i32, !llvm.ptr
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_7 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb5, ^bb9, ^bb10
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %22 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %12[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %23, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %29 = arith.extui %27 : i32 to i64
    %30 = arith.addi %29, %c0_i64 : i64
    %31 = llvm.getelementptr %12[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_8 = arith.constant 32 : i32
    %33 = arith.addi %32, %c32_i32_8 : i32
    llvm.store %33, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c1_i32_9 = arith.constant 1 : i32
    llvm.store %c1_i32_9, %5 : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_10 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_10 : i64
    %37 = llvm.getelementptr %12[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %6 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %39 = arith.cmpi ule, %c1_i32_11, %c31_i32 : i32
    %40 = scf.if %39 -> (i32) {
      %120 = arith.shli %38, %c1_i32_11 : i32
      scf.yield %120 : i32
    } else {
      %c0_i32_27 = arith.constant 0 : i32
      scf.yield %c0_i32_27 : i32
    }
    llvm.store %40, %2 : i32, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %44 = arith.cmpi ugt, %42, %43 : i32
    %45 = arith.extui %44 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_12 : i32
    %47 = arith.select %46, %40, %41 : i32
    llvm.store %47, %2 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_13 = arith.constant 4 : i32
    %49 = arith.cmpi ugt, %48, %c4_i32_13 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_14 : i32
    %52 = arith.select %51, %47, %c4_i32 : i32
    llvm.store %52, %7 : i32, !llvm.ptr
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_15 = arith.constant 31 : i32
    %53 = arith.cmpi ule, %c5_i32, %c31_i32_15 : i32
    %54 = scf.if %53 -> (i32) {
      %120 = arith.shli %52, %c5_i32 : i32
      scf.yield %120 : i32
    } else {
      %c0_i32_27 = arith.constant 0 : i32
      scf.yield %c0_i32_27 : i32
    }
    llvm.store %54, %3 : i32, !llvm.ptr
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %c67108864_i32 = arith.constant 67108864 : i32
    %56 = arith.cmpi ult, %55, %c67108864_i32 : i32
    %57 = arith.extui %56 : i1 to i32
    llvm.store %57, %2 : i32, !llvm.ptr
    %58 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %59 = arith.cmpi ne, %58, %c0_i32_16 : i32
    cf.cond_br %59, ^bb7, ^bb8
  ^bb5:  // pred: ^bb1
    %c0_i32_17 = arith.constant 0 : i32
    llvm.store %c0_i32_17, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb7, ^bb8
    %60 = llvm.load %4 : !llvm.ptr -> i32
    %61 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %62 = arith.extui %60 : i32 to i64
    %63 = arith.addi %62, %c24_i64 : i64
    %64 = llvm.getelementptr %12[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %61, %64 {alignment = 1 : i64} : i32, !llvm.ptr
    %65 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %66 = arith.addi %65, %c8_i32 : i32
    %67 = llvm.load %2 : !llvm.ptr -> i32
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %70 = arith.addi %69, %c20_i32 : i32
    %71 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %72 = arith.addi %71, %c8_i32_18 : i32
    call @f110(%arg0, %66, %67, %68, %70, %72) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %73 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c8_i64 : i64
    %76 = llvm.getelementptr %12[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %78 = arith.cmpi ne, %77, %c0_i32_19 : i32
    cf.cond_br %78, ^bb9, ^bb10
  ^bb7:  // pred: ^bb4
    %79 = llvm.load %4 : !llvm.ptr -> i32
    %80 = llvm.load %6 : !llvm.ptr -> i32
    %c5_i32_20 = arith.constant 5 : i32
    %c31_i32_21 = arith.constant 31 : i32
    %81 = arith.cmpi ule, %c5_i32_20, %c31_i32_21 : i32
    %82 = scf.if %81 -> (i32) {
      %120 = arith.shli %80, %c5_i32_20 : i32
      scf.yield %120 : i32
    } else {
      %c0_i32_27 = arith.constant 0 : i32
      scf.yield %c0_i32_27 : i32
    }
    %c28_i64 = arith.constant 28 : i64
    %83 = arith.extui %79 : i32 to i64
    %84 = arith.addi %83, %c28_i64 : i64
    %85 = llvm.getelementptr %12[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %82, %85 {alignment = 1 : i64} : i32, !llvm.ptr
    %86 = llvm.load %4 : !llvm.ptr -> i32
    %87 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_22 = arith.constant 4 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c4_i64_22 : i64
    %90 = llvm.getelementptr %12[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load volatile %90 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %92 = arith.extui %86 : i32 to i64
    %93 = arith.addi %92, %c20_i64 : i64
    %94 = llvm.getelementptr %12[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %91, %94 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // pred: ^bb4
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %5 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // pred: ^bb6
    %95 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %96 = arith.extui %95 : i32 to i64
    %97 = arith.addi %96, %c16_i64 : i64
    %98 = llvm.getelementptr %12[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %99 = llvm.load volatile %98 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %99, %1 : i32, !llvm.ptr
    %100 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c12_i64 : i64
    %103 = llvm.getelementptr %12[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %104, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // pred: ^bb6
    %105 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64_24 = arith.constant 12 : i64
    %106 = arith.extui %105 : i32 to i64
    %107 = arith.addi %106, %c12_i64_24 : i64
    %108 = llvm.getelementptr %12[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %109 = llvm.load volatile %108 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %109, %2 : i32, !llvm.ptr
    %110 = llvm.load %1 : !llvm.ptr -> i32
    %111 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %112 = arith.extui %110 : i32 to i64
    %113 = arith.addi %112, %c0_i64_25 : i64
    %114 = llvm.getelementptr %12[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %111, %114 {alignment = 1 : i64} : i32, !llvm.ptr
    %115 = llvm.load %1 : !llvm.ptr -> i32
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_26 = arith.constant 4 : i64
    %117 = arith.extui %115 : i32 to i64
    %118 = arith.addi %117, %c4_i64_26 : i64
    %119 = llvm.getelementptr %12[%118] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %116, %119 {alignment = 1 : i64} : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    llvm.store %c-2147483647_i32, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f88(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %8 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %9 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %14 = arith.subi %13, %c32_i32 : i32
    llvm.store %14, %4 : i32, !llvm.ptr
    llvm.store %14, %9 : i32, !llvm.ptr
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %16 = llvm.load %3 : !llvm.ptr -> i32
    %17 = arith.addi %15, %16 : i32
    llvm.store %17, %3 : i32, !llvm.ptr
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_7 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb5, ^bb9, ^bb10
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %22 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %12[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %23, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %29 = arith.extui %27 : i32 to i64
    %30 = arith.addi %29, %c0_i64 : i64
    %31 = llvm.getelementptr %12[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32_8 = arith.constant 32 : i32
    %33 = arith.addi %32, %c32_i32_8 : i32
    llvm.store %33, %9 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %5 : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_9 : i64
    %37 = llvm.getelementptr %12[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %6 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %39 = arith.cmpi ule, %c1_i32_10, %c31_i32 : i32
    %40 = scf.if %39 -> (i32) {
      %122 = arith.shli %38, %c1_i32_10 : i32
      scf.yield %122 : i32
    } else {
      %c0_i32_29 = arith.constant 0 : i32
      scf.yield %c0_i32_29 : i32
    }
    llvm.store %40, %2 : i32, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %43 = llvm.load %3 : !llvm.ptr -> i32
    %44 = arith.cmpi ugt, %42, %43 : i32
    %45 = arith.extui %44 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_11 : i32
    %47 = arith.select %46, %40, %41 : i32
    llvm.store %47, %2 : i32, !llvm.ptr
    %c4_i32_12 = arith.constant 4 : i32
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_13 = arith.constant 4 : i32
    %49 = arith.cmpi ugt, %48, %c4_i32_13 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_14 : i32
    %52 = arith.select %51, %47, %c4_i32_12 : i32
    llvm.store %52, %7 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %c31_i32_15 = arith.constant 31 : i32
    %53 = arith.cmpi ule, %c2_i32, %c31_i32_15 : i32
    %54 = scf.if %53 -> (i32) {
      %122 = arith.shli %52, %c2_i32 : i32
      scf.yield %122 : i32
    } else {
      %c0_i32_29 = arith.constant 0 : i32
      scf.yield %c0_i32_29 : i32
    }
    llvm.store %54, %3 : i32, !llvm.ptr
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %c536870912_i32 = arith.constant 536870912 : i32
    %56 = arith.cmpi ult, %55, %c536870912_i32 : i32
    %57 = arith.extui %56 : i1 to i32
    %c2_i32_16 = arith.constant 2 : i32
    %c31_i32_17 = arith.constant 31 : i32
    %58 = arith.cmpi ule, %c2_i32_16, %c31_i32_17 : i32
    %59 = scf.if %58 -> (i32) {
      %122 = arith.shli %57, %c2_i32_16 : i32
      scf.yield %122 : i32
    } else {
      %c0_i32_29 = arith.constant 0 : i32
      scf.yield %c0_i32_29 : i32
    }
    llvm.store %59, %2 : i32, !llvm.ptr
    %60 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %61 = arith.cmpi ne, %60, %c0_i32_18 : i32
    cf.cond_br %61, ^bb7, ^bb8
  ^bb5:  // pred: ^bb1
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb7, ^bb8
    %62 = llvm.load %4 : !llvm.ptr -> i32
    %63 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %64 = arith.extui %62 : i32 to i64
    %65 = arith.addi %64, %c24_i64 : i64
    %66 = llvm.getelementptr %12[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %63, %66 {alignment = 1 : i64} : i32, !llvm.ptr
    %67 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %68 = arith.addi %67, %c8_i32 : i32
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %70 = llvm.load %3 : !llvm.ptr -> i32
    %71 = llvm.load %4 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %72 = arith.addi %71, %c20_i32 : i32
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_20 = arith.constant 8 : i32
    %74 = arith.addi %73, %c8_i32_20 : i32
    call @f110(%arg0, %68, %69, %70, %72, %74) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %75 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %76 = arith.extui %75 : i32 to i64
    %77 = arith.addi %76, %c8_i64 : i64
    %78 = llvm.getelementptr %12[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %79 = llvm.load volatile %78 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %80 = arith.cmpi ne, %79, %c0_i32_21 : i32
    cf.cond_br %80, ^bb9, ^bb10
  ^bb7:  // pred: ^bb4
    %81 = llvm.load %4 : !llvm.ptr -> i32
    %82 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_22 = arith.constant 2 : i32
    %c31_i32_23 = arith.constant 31 : i32
    %83 = arith.cmpi ule, %c2_i32_22, %c31_i32_23 : i32
    %84 = scf.if %83 -> (i32) {
      %122 = arith.shli %82, %c2_i32_22 : i32
      scf.yield %122 : i32
    } else {
      %c0_i32_29 = arith.constant 0 : i32
      scf.yield %c0_i32_29 : i32
    }
    %c28_i64 = arith.constant 28 : i64
    %85 = arith.extui %81 : i32 to i64
    %86 = arith.addi %85, %c28_i64 : i64
    %87 = llvm.getelementptr %12[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %84, %87 {alignment = 1 : i64} : i32, !llvm.ptr
    %88 = llvm.load %4 : !llvm.ptr -> i32
    %89 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_24 = arith.constant 4 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c4_i64_24 : i64
    %92 = llvm.getelementptr %12[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %94 = arith.extui %88 : i32 to i64
    %95 = arith.addi %94, %c20_i64 : i64
    %96 = llvm.getelementptr %12[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %96 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // pred: ^bb4
    %c0_i32_25 = arith.constant 0 : i32
    llvm.store %c0_i32_25, %5 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // pred: ^bb6
    %97 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c16_i64 : i64
    %100 = llvm.getelementptr %12[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %101, %1 : i32, !llvm.ptr
    %102 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c12_i64 : i64
    %105 = llvm.getelementptr %12[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %106, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // pred: ^bb6
    %107 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64_26 = arith.constant 12 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c12_i64_26 : i64
    %110 = llvm.getelementptr %12[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %111, %2 : i32, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %113 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_27 = arith.constant 0 : i64
    %114 = arith.extui %112 : i32 to i64
    %115 = arith.addi %114, %c0_i64_27 : i64
    %116 = llvm.getelementptr %12[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %113, %116 {alignment = 1 : i64} : i32, !llvm.ptr
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %118 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_28 = arith.constant 4 : i64
    %119 = arith.extui %117 : i32 to i64
    %120 = arith.addi %119, %c4_i64_28 : i64
    %121 = llvm.getelementptr %12[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %118, %121 {alignment = 1 : i64} : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    llvm.store %c-2147483647_i32, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f89(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %8 = arith.cmpi eq, %7, %c0_i32_3 : i32
    %9 = arith.extui %8 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_4 : i32
    cf.cond_br %10, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb4, ^bb6, ^bb13
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %11 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %12, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c17179869184_i64 = arith.constant 17179869184 : i64
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %6[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c17179869184_i64, %19 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %c536870912_i32 = arith.constant 536870912 : i32
    %21 = arith.cmpi ult, %20, %c536870912_i32 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_6 : i32
    cf.cond_br %23, ^bb7, ^bb8
  ^bb6:  // 2 preds: ^bb8, ^bb12
    %c1_i32_7 = arith.constant 1 : i32
    llvm.store %c1_i32_7, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb7:  // pred: ^bb5
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %25 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %26 = scf.if %25 -> (i32) {
      %65 = arith.shli %24, %c2_i32 : i32
      scf.yield %65 : i32
    } else {
      %c0_i32_20 = arith.constant 0 : i32
      scf.yield %c0_i32_20 : i32
    }
    llvm.store %26, %3 : i32, !llvm.ptr
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_8 : i32
    cf.cond_br %28, ^bb10, ^bb11
  ^bb8:  // pred: ^bb5
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %c4_i64_10 = arith.constant 4 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c4_i64_10 : i64
    %32 = llvm.getelementptr %6[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_9, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb10, ^bb11
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %34 = arith.cmpi eq, %33, %c0_i32_11 : i32
    %35 = arith.extui %34 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %36 = arith.cmpi ne, %35, %c0_i32_12 : i32
    cf.cond_br %36, ^bb12, ^bb13
  ^bb10:  // pred: ^bb7
    %37 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %38 = call @f72(%arg0, %37, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %38, %2 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // pred: ^bb7
    %c0_i32_13 = arith.constant 0 : i32
    %c1054681_i64 = arith.constant 1054681 : i64
    %39 = arith.extui %c0_i32_13 : i32 to i64
    %40 = arith.addi %39, %c1054681_i64 : i64
    %41 = llvm.getelementptr %6[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i8
    %43 = arith.extui %42 : i8 to i32
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_14 = arith.constant 4 : i32
    %45 = call @f72(%arg0, %44, %c4_i32_14) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %45, %2 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb9
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %48 = arith.extui %46 : i32 to i64
    %49 = arith.addi %48, %c8_i64 : i64
    %50 = llvm.getelementptr %6[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i32, !llvm.ptr
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_15 = arith.constant 4 : i32
    %c4_i64_16 = arith.constant 4 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c4_i64_16 : i64
    %54 = llvm.getelementptr %6[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i32_15, %54 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb13:  // pred: ^bb9
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_17 = arith.constant 8 : i64
    %57 = arith.extui %55 : i32 to i64
    %58 = arith.addi %57, %c8_i64_17 : i64
    %59 = llvm.getelementptr %6[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %56, %59 {alignment = 1 : i64} : i32, !llvm.ptr
    %60 = llvm.load %0 : !llvm.ptr -> i32
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_18 = arith.constant 4 : i64
    %62 = arith.extui %60 : i32 to i64
    %63 = arith.addi %62, %c4_i64_18 : i64
    %64 = llvm.getelementptr %6[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %61, %64 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %1 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f90(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %8 = arith.cmpi eq, %7, %c0_i32_3 : i32
    %9 = arith.extui %8 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_4 : i32
    cf.cond_br %10, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 4 preds: ^bb4, ^bb7, ^bb11, ^bb12
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %11 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %12, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %6[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %19 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %20 = llvm.load %1 : !llvm.ptr -> i32
    %c67108864_i32 = arith.constant 67108864 : i32
    %21 = arith.cmpi ult, %20, %c67108864_i32 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_6 : i32
    cf.cond_br %23, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32 = arith.constant 31 : i32
    %25 = arith.cmpi ule, %c5_i32, %c31_i32 : i32
    %26 = scf.if %25 -> (i32) {
      %65 = arith.shli %24, %c5_i32 : i32
      scf.yield %65 : i32
    } else {
      %c0_i32_22 = arith.constant 0 : i32
      scf.yield %c0_i32_22 : i32
    }
    llvm.store %26, %3 : i32, !llvm.ptr
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %28 = arith.cmpi ne, %27, %c0_i32_7 : i32
    cf.cond_br %28, ^bb9, ^bb10
  ^bb7:  // pred: ^bb5
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %c4_i64_9 = arith.constant 4 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c4_i64_9 : i64
    %32 = llvm.getelementptr %6[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_8, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    llvm.store %c1_i32_10, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // 2 preds: ^bb9, ^bb10
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %34 = arith.cmpi eq, %33, %c0_i32_11 : i32
    %35 = arith.extui %34 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %36 = arith.cmpi ne, %35, %c0_i32_12 : i32
    cf.cond_br %36, ^bb11, ^bb12
  ^bb9:  // pred: ^bb6
    %37 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_13 = arith.constant 1 : i32
    %38 = call @f72(%arg0, %37, %c1_i32_13) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %38, %2 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb10:  // pred: ^bb6
    %c0_i32_14 = arith.constant 0 : i32
    %c1054681_i64 = arith.constant 1054681 : i64
    %39 = arith.extui %c0_i32_14 : i32 to i64
    %40 = arith.addi %39, %c1054681_i64 : i64
    %41 = llvm.getelementptr %6[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i8
    %43 = arith.extui %42 : i8 to i32
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_15 = arith.constant 1 : i32
    %45 = call @f72(%arg0, %44, %c1_i32_15) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %45, %2 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb8
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %48 = arith.extui %46 : i32 to i64
    %49 = arith.addi %48, %c8_i64 : i64
    %50 = llvm.getelementptr %6[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_16 = arith.constant 1 : i32
    llvm.store %c1_i32_16, %1 : i32, !llvm.ptr
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_17 = arith.constant 1 : i32
    %c4_i64_18 = arith.constant 4 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c4_i64_18 : i64
    %54 = llvm.getelementptr %6[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_17, %54 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb8
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_19 = arith.constant 8 : i64
    %57 = arith.extui %55 : i32 to i64
    %58 = arith.addi %57, %c8_i64_19 : i64
    %59 = llvm.getelementptr %6[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %56, %59 {alignment = 1 : i64} : i32, !llvm.ptr
    %60 = llvm.load %0 : !llvm.ptr -> i32
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_20 = arith.constant 4 : i64
    %62 = arith.extui %60 : i32 to i64
    %63 = arith.addi %62, %c4_i64_20 : i64
    %64 = llvm.getelementptr %6[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %61, %64 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    llvm.store %c0_i32_21, %1 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f91(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %8 = arith.subi %7, %c16_i32 : i32
    llvm.store %8, %1 : i32, !llvm.ptr
    llvm.store %8, %3 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %10 = arith.addi %9, %c8_i32 : i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    call @f87(%arg0, %10, %11, %16, %c1_i32_1) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c8_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %0 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %22 = arith.cmpi eq, %21, %c-2147483647_i32 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_2 : i32
    cf.cond_br %24, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_3 = arith.constant 16 : i32
    %26 = arith.addi %25, %c16_i32_3 : i32
    llvm.store %26, %3 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c12_i64 : i64
    %31 = llvm.getelementptr %6[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %27, %32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f92(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %8 = arith.subi %7, %c16_i32 : i32
    llvm.store %8, %1 : i32, !llvm.ptr
    llvm.store %8, %3 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %10 = arith.addi %9, %c8_i32 : i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    call @f88(%arg0, %10, %11, %16, %c1_i32_1) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c8_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %0 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %22 = arith.cmpi eq, %21, %c-2147483647_i32 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_2 : i32
    cf.cond_br %24, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %25 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_3 = arith.constant 16 : i32
    %26 = arith.addi %25, %c16_i32_3 : i32
    llvm.store %26, %3 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c12_i64 : i64
    %31 = llvm.getelementptr %6[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %27, %32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f93(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c4_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c8_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %16 = call @f84(%arg0, %9, %14, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f94(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f95(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32 = arith.constant 31 : i32
    %19 = arith.cmpi ule, %c5_i32, %c31_i32 : i32
    %20 = scf.if %19 -> (i32) {
      %21 = arith.shli %18, %c5_i32 : i32
      scf.yield %21 : i32
    } else {
      %c0_i32_4 = arith.constant 0 : i32
      scf.yield %c0_i32_4 : i32
    }
    %c1_i32_3 = arith.constant 1 : i32
    call @f73(%arg0, %17, %20, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f96(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %19 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %20 = scf.if %19 -> (i32) {
      %21 = arith.shli %18, %c2_i32 : i32
      scf.yield %21 : i32
    } else {
      %c0_i32_3 = arith.constant 0 : i32
      scf.yield %c0_i32_3 : i32
    }
    %c4_i32 = arith.constant 4 : i32
    call @f73(%arg0, %17, %20, %c4_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f97(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %13 = arith.subi %12, %c16_i32 : i32
    llvm.store %13, %3 : i32, !llvm.ptr
    llvm.store %13, %8 : i32, !llvm.ptr
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %15 = arith.addi %14, %c4_i32 : i32
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %17 = arith.cmpi ule, %c1_i32_6, %c31_i32 : i32
    %18 = scf.if %17 -> (i32) {
      %62 = arith.shli %16, %c1_i32_6 : i32
      scf.yield %62 : i32
    } else {
      %c0_i32_14 = arith.constant 0 : i32
      scf.yield %c0_i32_14 : i32
    }
    llvm.store %18, %4 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    call @f111(%arg0, %15, %18, %c0_i32_7) : (!llvm.ptr, i32, i32, i32) -> ()
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c8_i64 : i64
    %22 = llvm.getelementptr %11[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %23, %5 : i32, !llvm.ptr
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c4_i64 : i64
    %27 = llvm.getelementptr %11[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_8 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_9 : i32
    cf.cond_br %31, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %32 = llvm.load %1 : !llvm.ptr -> i32
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c12_i64 : i64
    %37 = llvm.getelementptr %11[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %6 : i32, !llvm.ptr
    call @f106(%arg0, %32, %33, %38) : (!llvm.ptr, i32, i32, i32) -> ()
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_10 = arith.constant 8 : i64
    %41 = arith.extui %39 : i32 to i64
    %42 = arith.addi %41, %c8_i64_10 : i64
    %43 = llvm.getelementptr %11[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %45 = llvm.load %6 : !llvm.ptr -> i32
    %c4_i64_11 = arith.constant 4 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c4_i64_11 : i64
    %48 = llvm.getelementptr %11[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %50 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %51 = arith.extui %49 : i32 to i64
    %52 = arith.addi %51, %c0_i64 : i64
    %53 = llvm.getelementptr %11[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_12 = arith.constant 16 : i32
    %55 = arith.addi %54, %c16_i32_12 : i32
    llvm.store %55, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %57 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_13 = arith.constant 12 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c12_i64_13 : i64
    %60 = llvm.getelementptr %11[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %56, %61) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f98(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %10 = arith.subi %9, %c64_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %3 : i32, !llvm.ptr
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %16 = arith.addi %15, %c-2147483647_i32 : i32
    %c0_i32_3 = arith.constant 0 : i32
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %c-2147483638_i32 = arith.constant -2147483638 : i32
    %18 = arith.cmpi slt, %17, %c-2147483638_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_4 : i32
    %21 = arith.select %20, %16, %c0_i32_3 : i32
    cf.switch %21 : i32, [
      default: ^bb14,
      0: ^bb14,
      1: ^bb13,
      2: ^bb12,
      3: ^bb11,
      4: ^bb10,
      5: ^bb9,
      6: ^bb8,
      7: ^bb7,
      8: ^bb6,
      9: ^bb5,
      10: ^bb4
    ]
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 13 preds: ^bb4, ^bb6, ^bb7, ^bb8, ^bb9, ^bb10, ^bb11, ^bb12, ^bb13, ^bb14, ^bb15, ^bb16, ^bb17
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_5 = arith.constant 64 : i32
    %24 = arith.addi %23, %c64_i32_5 : i32
    llvm.store %24, %5 : i32, !llvm.ptr
    %25 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%25 : i32)
  ^bb4:  // pred: ^bb1
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c8_i64 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %31 = llvm.load volatile %30 {alignment = 1 : i64} : !llvm.ptr -> i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c12_i64 : i64
    %35 = llvm.getelementptr %8[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %37 = call @f186(%arg0, %26, %31, %36) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %37, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.addi %39, %c4_i64 : i64
    %41 = llvm.getelementptr %8[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %42, %3 : i32, !llvm.ptr
    %c-1114111_i32 = arith.constant -1114111 : i32
    %43 = arith.addi %42, %c-1114111_i32 : i32
    %c0_i32_6 = arith.constant 0 : i32
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %c2097150_i32 = arith.constant 2097150 : i32
    %45 = arith.andi %44, %c2097150_i32 : i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %46 = arith.cmpi eq, %45, %c1114112_i32 : i32
    %47 = arith.extui %46 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_7 : i32
    %49 = arith.select %48, %43, %c0_i32_6 : i32
    cf.switch %49 : i32, [
      default: ^bb17,
      0: ^bb17,
      1: ^bb16,
      2: ^bb15
    ]
  ^bb6:  // pred: ^bb1
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %52 = arith.addi %51, %c4_i32 : i32
    %c32_i64 = arith.constant 32 : i64
    %53 = arith.extui %50 : i32 to i64
    %54 = arith.addi %53, %c32_i64 : i64
    %55 = llvm.getelementptr %8[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i32, !llvm.ptr
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %58 = arith.addi %57, %c12_i32 : i32
    %c36_i64 = arith.constant 36 : i64
    %59 = arith.extui %56 : i32 to i64
    %60 = arith.addi %59, %c36_i64 : i64
    %61 = llvm.getelementptr %8[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %62 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %63 = arith.addi %62, %c8_i32 : i32
    %c12_i32_8 = arith.constant 12 : i32
    %64 = arith.addi %63, %c12_i32_8 : i32
    %c48_i32 = arith.constant 48 : i32
    %c0_i64_9 = arith.constant 0 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c0_i64_9 : i64
    %67 = llvm.getelementptr %8[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c48_i32, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c44_i64 = arith.constant 44 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c44_i64 : i64
    %71 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c1050060_i32 = arith.constant 1050060 : i32
    %c40_i64 = arith.constant 40 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c40_i64 : i64
    %75 = llvm.getelementptr %8[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050060_i32, %75 {alignment = 1 : i64} : i32, !llvm.ptr
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c52_i64 = arith.constant 52 : i64
    %77 = arith.extui %76 : i32 to i64
    %78 = arith.addi %77, %c52_i64 : i64
    %79 = llvm.getelementptr %8[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %79 {alignment = 1 : i64} : i64, !llvm.ptr
    %80 = llvm.load %2 : !llvm.ptr -> i32
    %c50_i32 = arith.constant 50 : i32
    %c12_i64_10 = arith.constant 12 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c12_i64_10 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c50_i32, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_11 = arith.constant 8 : i32
    %86 = arith.addi %85, %c8_i32_11 : i32
    %c48_i64 = arith.constant 48 : i64
    %87 = arith.extui %84 : i32 to i64
    %88 = arith.addi %87, %c48_i64 : i64
    %89 = llvm.getelementptr %8[%88] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %86, %89 {alignment = 1 : i64} : i32, !llvm.ptr
    %90 = llvm.load %2 : !llvm.ptr -> i32
    %91 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %92 = arith.addi %91, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %93 = arith.extui %90 : i32 to i64
    %94 = arith.addi %93, %c16_i64 : i64
    %95 = llvm.getelementptr %8[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %95 {alignment = 1 : i64} : i32, !llvm.ptr
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %98 = arith.addi %97, %c36_i32 : i32
    %c8_i64_12 = arith.constant 8 : i64
    %99 = arith.extui %96 : i32 to i64
    %100 = arith.addi %99, %c8_i64_12 : i64
    %101 = llvm.getelementptr %8[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %98, %101 {alignment = 1 : i64} : i32, !llvm.ptr
    %102 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %103 = arith.extui %102 : i32 to i64
    %104 = arith.addi %103, %c20_i64 : i64
    %105 = llvm.getelementptr %8[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %106 = llvm.load volatile %105 {alignment = 1 : i64} : !llvm.ptr -> i32
    %107 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c24_i64 : i64
    %110 = llvm.getelementptr %8[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i32
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %113 = arith.addi %112, %c40_i32 : i32
    %114 = call @f164(%arg0, %106, %111, %113) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %114, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb7:  // pred: ^bb1
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %116 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_13 = arith.constant 4 : i32
    %117 = arith.addi %116, %c4_i32_13 : i32
    %c32_i64_14 = arith.constant 32 : i64
    %118 = arith.extui %115 : i32 to i64
    %119 = arith.addi %118, %c32_i64_14 : i64
    %120 = llvm.getelementptr %8[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %117, %120 {alignment = 1 : i64} : i32, !llvm.ptr
    %121 = llvm.load %2 : !llvm.ptr -> i32
    %122 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_15 = arith.constant 12 : i32
    %123 = arith.addi %122, %c12_i32_15 : i32
    %c36_i64_16 = arith.constant 36 : i64
    %124 = arith.extui %121 : i32 to i64
    %125 = arith.addi %124, %c36_i64_16 : i64
    %126 = llvm.getelementptr %8[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %123, %126 {alignment = 1 : i64} : i32, !llvm.ptr
    %127 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_17 = arith.constant 8 : i32
    %128 = arith.addi %127, %c8_i32_17 : i32
    %c12_i32_18 = arith.constant 12 : i32
    %129 = arith.addi %128, %c12_i32_18 : i32
    %c49_i32 = arith.constant 49 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %130 = arith.extui %129 : i32 to i64
    %131 = arith.addi %130, %c0_i64_19 : i64
    %132 = llvm.getelementptr %8[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c49_i32, %132 {alignment = 1 : i64} : i32, !llvm.ptr
    %133 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_20 = arith.constant 2 : i32
    %c44_i64_21 = arith.constant 44 : i64
    %134 = arith.extui %133 : i32 to i64
    %135 = arith.addi %134, %c44_i64_21 : i64
    %136 = llvm.getelementptr %8[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_20, %136 {alignment = 1 : i64} : i32, !llvm.ptr
    %137 = llvm.load %2 : !llvm.ptr -> i32
    %c1050020_i32 = arith.constant 1050020 : i32
    %c40_i64_22 = arith.constant 40 : i64
    %138 = arith.extui %137 : i32 to i64
    %139 = arith.addi %138, %c40_i64_22 : i64
    %140 = llvm.getelementptr %8[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050020_i32, %140 {alignment = 1 : i64} : i32, !llvm.ptr
    %141 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i64_23 = arith.constant 2 : i64
    %c52_i64_24 = arith.constant 52 : i64
    %142 = arith.extui %141 : i32 to i64
    %143 = arith.addi %142, %c52_i64_24 : i64
    %144 = llvm.getelementptr %8[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64_23, %144 {alignment = 1 : i64} : i64, !llvm.ptr
    %145 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_25 = arith.constant 48 : i32
    %c12_i64_26 = arith.constant 12 : i64
    %146 = arith.extui %145 : i32 to i64
    %147 = arith.addi %146, %c12_i64_26 : i64
    %148 = llvm.getelementptr %8[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c48_i32_25, %148 {alignment = 1 : i64} : i32, !llvm.ptr
    %149 = llvm.load %2 : !llvm.ptr -> i32
    %150 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_27 = arith.constant 8 : i32
    %151 = arith.addi %150, %c8_i32_27 : i32
    %c48_i64_28 = arith.constant 48 : i64
    %152 = arith.extui %149 : i32 to i64
    %153 = arith.addi %152, %c48_i64_28 : i64
    %154 = llvm.getelementptr %8[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %151, %154 {alignment = 1 : i64} : i32, !llvm.ptr
    %155 = llvm.load %2 : !llvm.ptr -> i32
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %c36_i32_29 = arith.constant 36 : i32
    %157 = arith.addi %156, %c36_i32_29 : i32
    %c16_i64_30 = arith.constant 16 : i64
    %158 = arith.extui %155 : i32 to i64
    %159 = arith.addi %158, %c16_i64_30 : i64
    %160 = llvm.getelementptr %8[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %157, %160 {alignment = 1 : i64} : i32, !llvm.ptr
    %161 = llvm.load %2 : !llvm.ptr -> i32
    %162 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_31 = arith.constant 32 : i32
    %163 = arith.addi %162, %c32_i32_31 : i32
    %c8_i64_32 = arith.constant 8 : i64
    %164 = arith.extui %161 : i32 to i64
    %165 = arith.addi %164, %c8_i64_32 : i64
    %166 = llvm.getelementptr %8[%165] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %163, %166 {alignment = 1 : i64} : i32, !llvm.ptr
    %167 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_33 = arith.constant 20 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c20_i64_33 : i64
    %170 = llvm.getelementptr %8[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i32
    %172 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64_34 = arith.constant 24 : i64
    %173 = arith.extui %172 : i32 to i64
    %174 = arith.addi %173, %c24_i64_34 : i64
    %175 = llvm.getelementptr %8[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = llvm.load volatile %175 {alignment = 1 : i64} : !llvm.ptr -> i32
    %177 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_35 = arith.constant 40 : i32
    %178 = arith.addi %177, %c40_i32_35 : i32
    %179 = call @f164(%arg0, %171, %176, %178) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %179, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // pred: ^bb1
    %180 = llvm.load %2 : !llvm.ptr -> i32
    %181 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_36 = arith.constant 4 : i32
    %182 = arith.addi %181, %c4_i32_36 : i32
    %c4_i64_37 = arith.constant 4 : i64
    %183 = arith.extui %180 : i32 to i64
    %184 = arith.addi %183, %c4_i64_37 : i64
    %185 = llvm.getelementptr %8[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %182, %185 {alignment = 1 : i64} : i32, !llvm.ptr
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %187 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_38 = arith.constant 12 : i32
    %188 = arith.addi %187, %c12_i32_38 : i32
    %c32_i64_39 = arith.constant 32 : i64
    %189 = arith.extui %186 : i32 to i64
    %190 = arith.addi %189, %c32_i64_39 : i64
    %191 = llvm.getelementptr %8[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %188, %191 {alignment = 1 : i64} : i32, !llvm.ptr
    %192 = llvm.load %2 : !llvm.ptr -> i32
    %193 = llvm.load %0 : !llvm.ptr -> i32
    %c13_i32 = arith.constant 13 : i32
    %194 = arith.addi %193, %c13_i32 : i32
    %c36_i64_40 = arith.constant 36 : i64
    %195 = arith.extui %192 : i32 to i64
    %196 = arith.addi %195, %c36_i64_40 : i64
    %197 = llvm.getelementptr %8[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %194, %197 {alignment = 1 : i64} : i32, !llvm.ptr
    %198 = llvm.load %2 : !llvm.ptr -> i32
    %c60_i32 = arith.constant 60 : i32
    %199 = arith.addi %198, %c60_i32 : i32
    %c47_i32 = arith.constant 47 : i32
    %c0_i64_41 = arith.constant 0 : i64
    %200 = arith.extui %199 : i32 to i64
    %201 = arith.addi %200, %c0_i64_41 : i64
    %202 = llvm.getelementptr %8[%201] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c47_i32, %202 {alignment = 1 : i64} : i32, !llvm.ptr
    %203 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_42 = arith.constant 40 : i32
    %204 = arith.addi %203, %c40_i32_42 : i32
    %c12_i32_43 = arith.constant 12 : i32
    %205 = arith.addi %204, %c12_i32_43 : i32
    %c48_i32_44 = arith.constant 48 : i32
    %c0_i64_45 = arith.constant 0 : i64
    %206 = arith.extui %205 : i32 to i64
    %207 = arith.addi %206, %c0_i64_45 : i64
    %208 = llvm.getelementptr %8[%207] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c48_i32_44, %208 {alignment = 1 : i64} : i32, !llvm.ptr
    %209 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_46 = arith.constant 4 : i32
    %c12_i64_47 = arith.constant 12 : i64
    %210 = arith.extui %209 : i32 to i64
    %211 = arith.addi %210, %c12_i64_47 : i64
    %212 = llvm.getelementptr %8[%211] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i32_46, %212 {alignment = 1 : i64} : i32, !llvm.ptr
    %213 = llvm.load %2 : !llvm.ptr -> i32
    %c1049960_i32 = arith.constant 1049960 : i32
    %c8_i64_48 = arith.constant 8 : i64
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.addi %214, %c8_i64_48 : i64
    %216 = llvm.getelementptr %8[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049960_i32, %216 {alignment = 1 : i64} : i32, !llvm.ptr
    %217 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i64 = arith.constant 3 : i64
    %c20_i64_49 = arith.constant 20 : i64
    %218 = arith.extui %217 : i32 to i64
    %219 = arith.addi %218, %c20_i64_49 : i64
    %220 = llvm.getelementptr %8[%219] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i64, %220 {alignment = 1 : i64} : i64, !llvm.ptr
    %221 = llvm.load %2 : !llvm.ptr -> i32
    %c47_i32_50 = arith.constant 47 : i32
    %c44_i64_51 = arith.constant 44 : i64
    %222 = arith.extui %221 : i32 to i64
    %223 = arith.addi %222, %c44_i64_51 : i64
    %224 = llvm.getelementptr %8[%223] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c47_i32_50, %224 {alignment = 1 : i64} : i32, !llvm.ptr
    %225 = llvm.load %2 : !llvm.ptr -> i32
    %226 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_52 = arith.constant 40 : i32
    %227 = arith.addi %226, %c40_i32_52 : i32
    %c16_i64_53 = arith.constant 16 : i64
    %228 = arith.extui %225 : i32 to i64
    %229 = arith.addi %228, %c16_i64_53 : i64
    %230 = llvm.getelementptr %8[%229] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %227, %230 {alignment = 1 : i64} : i32, !llvm.ptr
    %231 = llvm.load %2 : !llvm.ptr -> i32
    %232 = llvm.load %2 : !llvm.ptr -> i32
    %c36_i32_54 = arith.constant 36 : i32
    %233 = arith.addi %232, %c36_i32_54 : i32
    %c56_i64 = arith.constant 56 : i64
    %234 = arith.extui %231 : i32 to i64
    %235 = arith.addi %234, %c56_i64 : i64
    %236 = llvm.getelementptr %8[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %233, %236 {alignment = 1 : i64} : i32, !llvm.ptr
    %237 = llvm.load %2 : !llvm.ptr -> i32
    %238 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_55 = arith.constant 4 : i32
    %239 = arith.addi %238, %c4_i32_55 : i32
    %c48_i64_56 = arith.constant 48 : i64
    %240 = arith.extui %237 : i32 to i64
    %241 = arith.addi %240, %c48_i64_56 : i64
    %242 = llvm.getelementptr %8[%241] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %239, %242 {alignment = 1 : i64} : i32, !llvm.ptr
    %243 = llvm.load %2 : !llvm.ptr -> i32
    %244 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_57 = arith.constant 32 : i32
    %245 = arith.addi %244, %c32_i32_57 : i32
    %c40_i64_58 = arith.constant 40 : i64
    %246 = arith.extui %243 : i32 to i64
    %247 = arith.addi %246, %c40_i64_58 : i64
    %248 = llvm.getelementptr %8[%247] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %245, %248 {alignment = 1 : i64} : i32, !llvm.ptr
    %249 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_59 = arith.constant 20 : i64
    %250 = arith.extui %249 : i32 to i64
    %251 = arith.addi %250, %c20_i64_59 : i64
    %252 = llvm.getelementptr %8[%251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %253 = llvm.load volatile %252 {alignment = 1 : i64} : !llvm.ptr -> i32
    %254 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64_60 = arith.constant 24 : i64
    %255 = arith.extui %254 : i32 to i64
    %256 = arith.addi %255, %c24_i64_60 : i64
    %257 = llvm.getelementptr %8[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %258 = llvm.load volatile %257 {alignment = 1 : i64} : !llvm.ptr -> i32
    %259 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_61 = arith.constant 8 : i32
    %260 = arith.addi %259, %c8_i32_61 : i32
    %261 = call @f164(%arg0, %253, %258, %260) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %261, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb9:  // pred: ^bb1
    %262 = llvm.load %2 : !llvm.ptr -> i32
    %263 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_62 = arith.constant 4 : i32
    %264 = arith.addi %263, %c4_i32_62 : i32
    %c36_i64_63 = arith.constant 36 : i64
    %265 = arith.extui %262 : i32 to i64
    %266 = arith.addi %265, %c36_i64_63 : i64
    %267 = llvm.getelementptr %8[%266] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %264, %267 {alignment = 1 : i64} : i32, !llvm.ptr
    %268 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_64 = arith.constant 2 : i32
    %c44_i64_65 = arith.constant 44 : i64
    %269 = arith.extui %268 : i32 to i64
    %270 = arith.addi %269, %c44_i64_65 : i64
    %271 = llvm.getelementptr %8[%270] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_64, %271 {alignment = 1 : i64} : i32, !llvm.ptr
    %272 = llvm.load %2 : !llvm.ptr -> i32
    %c1049904_i32 = arith.constant 1049904 : i32
    %c40_i64_66 = arith.constant 40 : i64
    %273 = arith.extui %272 : i32 to i64
    %274 = arith.addi %273, %c40_i64_66 : i64
    %275 = llvm.getelementptr %8[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049904_i32, %275 {alignment = 1 : i64} : i32, !llvm.ptr
    %276 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c52_i64_67 = arith.constant 52 : i64
    %277 = arith.extui %276 : i32 to i64
    %278 = arith.addi %277, %c52_i64_67 : i64
    %279 = llvm.getelementptr %8[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %279 {alignment = 1 : i64} : i64, !llvm.ptr
    %280 = llvm.load %2 : !llvm.ptr -> i32
    %c47_i32_68 = arith.constant 47 : i32
    %c12_i64_69 = arith.constant 12 : i64
    %281 = arith.extui %280 : i32 to i64
    %282 = arith.addi %281, %c12_i64_69 : i64
    %283 = llvm.getelementptr %8[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c47_i32_68, %283 {alignment = 1 : i64} : i32, !llvm.ptr
    %284 = llvm.load %2 : !llvm.ptr -> i32
    %285 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_70 = arith.constant 8 : i32
    %286 = arith.addi %285, %c8_i32_70 : i32
    %c48_i64_71 = arith.constant 48 : i64
    %287 = arith.extui %284 : i32 to i64
    %288 = arith.addi %287, %c48_i64_71 : i64
    %289 = llvm.getelementptr %8[%288] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %286, %289 {alignment = 1 : i64} : i32, !llvm.ptr
    %290 = llvm.load %2 : !llvm.ptr -> i32
    %291 = llvm.load %2 : !llvm.ptr -> i32
    %c36_i32_72 = arith.constant 36 : i32
    %292 = arith.addi %291, %c36_i32_72 : i32
    %c8_i64_73 = arith.constant 8 : i64
    %293 = arith.extui %290 : i32 to i64
    %294 = arith.addi %293, %c8_i64_73 : i64
    %295 = llvm.getelementptr %8[%294] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %292, %295 {alignment = 1 : i64} : i32, !llvm.ptr
    %296 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_74 = arith.constant 20 : i64
    %297 = arith.extui %296 : i32 to i64
    %298 = arith.addi %297, %c20_i64_74 : i64
    %299 = llvm.getelementptr %8[%298] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %300 = llvm.load volatile %299 {alignment = 1 : i64} : !llvm.ptr -> i32
    %301 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64_75 = arith.constant 24 : i64
    %302 = arith.extui %301 : i32 to i64
    %303 = arith.addi %302, %c24_i64_75 : i64
    %304 = llvm.getelementptr %8[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %305 = llvm.load volatile %304 {alignment = 1 : i64} : !llvm.ptr -> i32
    %306 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_76 = arith.constant 40 : i32
    %307 = arith.addi %306, %c40_i32_76 : i32
    %308 = call @f164(%arg0, %300, %305, %307) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %308, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb10:  // pred: ^bb1
    %309 = llvm.load %1 : !llvm.ptr -> i32
    %c1049820_i32 = arith.constant 1049820 : i32
    %c38_i32 = arith.constant 38 : i32
    %310 = call @f186(%arg0, %309, %c1049820_i32, %c38_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %310, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb11:  // pred: ^bb1
    %311 = llvm.load %1 : !llvm.ptr -> i32
    %c1049782_i32 = arith.constant 1049782 : i32
    %c38_i32_77 = arith.constant 38 : i32
    %312 = call @f186(%arg0, %311, %c1049782_i32, %c38_i32_77) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %312, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb1
    %313 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_78 = arith.constant 4 : i32
    %314 = arith.addi %313, %c4_i32_78 : i32
    %315 = llvm.load %1 : !llvm.ptr -> i32
    %316 = call @f151(%arg0, %314, %315) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %316, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb1
    %317 = llvm.load %1 : !llvm.ptr -> i32
    %c1049748_i32 = arith.constant 1049748 : i32
    %c34_i32 = arith.constant 34 : i32
    %318 = call @f186(%arg0, %317, %c1049748_i32, %c34_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %318, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // 2 preds: ^bb1, ^bb1
    %319 = llvm.load %2 : !llvm.ptr -> i32
    %320 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i32_79 = arith.constant 12 : i32
    %321 = arith.addi %320, %c12_i32_79 : i32
    %c32_i64_80 = arith.constant 32 : i64
    %322 = arith.extui %319 : i32 to i64
    %323 = arith.addi %322, %c32_i64_80 : i64
    %324 = llvm.getelementptr %8[%323] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %321, %324 {alignment = 1 : i64} : i32, !llvm.ptr
    %325 = llvm.load %2 : !llvm.ptr -> i32
    %326 = llvm.load %0 : !llvm.ptr -> i32
    %c36_i64_81 = arith.constant 36 : i64
    %327 = arith.extui %325 : i32 to i64
    %328 = arith.addi %327, %c36_i64_81 : i64
    %329 = llvm.getelementptr %8[%328] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %326, %329 {alignment = 1 : i64} : i32, !llvm.ptr
    %330 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_82 = arith.constant 8 : i32
    %331 = arith.addi %330, %c8_i32_82 : i32
    %c12_i32_83 = arith.constant 12 : i32
    %332 = arith.addi %331, %c12_i32_83 : i32
    %c45_i32 = arith.constant 45 : i32
    %c0_i64_84 = arith.constant 0 : i64
    %333 = arith.extui %332 : i32 to i64
    %334 = arith.addi %333, %c0_i64_84 : i64
    %335 = llvm.getelementptr %8[%334] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c45_i32, %335 {alignment = 1 : i64} : i32, !llvm.ptr
    %336 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_85 = arith.constant 2 : i32
    %c44_i64_86 = arith.constant 44 : i64
    %337 = arith.extui %336 : i32 to i64
    %338 = arith.addi %337, %c44_i64_86 : i64
    %339 = llvm.getelementptr %8[%338] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_85, %339 {alignment = 1 : i64} : i32, !llvm.ptr
    %340 = llvm.load %2 : !llvm.ptr -> i32
    %c1049732_i32 = arith.constant 1049732 : i32
    %c40_i64_87 = arith.constant 40 : i64
    %341 = arith.extui %340 : i32 to i64
    %342 = arith.addi %341, %c40_i64_87 : i64
    %343 = llvm.getelementptr %8[%342] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049732_i32, %343 {alignment = 1 : i64} : i32, !llvm.ptr
    %344 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i64_88 = arith.constant 2 : i64
    %c52_i64_89 = arith.constant 52 : i64
    %345 = arith.extui %344 : i32 to i64
    %346 = arith.addi %345, %c52_i64_89 : i64
    %347 = llvm.getelementptr %8[%346] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64_88, %347 {alignment = 1 : i64} : i64, !llvm.ptr
    %348 = llvm.load %2 : !llvm.ptr -> i32
    %c46_i32 = arith.constant 46 : i32
    %c12_i64_90 = arith.constant 12 : i64
    %349 = arith.extui %348 : i32 to i64
    %350 = arith.addi %349, %c12_i64_90 : i64
    %351 = llvm.getelementptr %8[%350] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c46_i32, %351 {alignment = 1 : i64} : i32, !llvm.ptr
    %352 = llvm.load %2 : !llvm.ptr -> i32
    %353 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_91 = arith.constant 8 : i32
    %354 = arith.addi %353, %c8_i32_91 : i32
    %c48_i64_92 = arith.constant 48 : i64
    %355 = arith.extui %352 : i32 to i64
    %356 = arith.addi %355, %c48_i64_92 : i64
    %357 = llvm.getelementptr %8[%356] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %354, %357 {alignment = 1 : i64} : i32, !llvm.ptr
    %358 = llvm.load %2 : !llvm.ptr -> i32
    %359 = llvm.load %2 : !llvm.ptr -> i32
    %c36_i32_93 = arith.constant 36 : i32
    %360 = arith.addi %359, %c36_i32_93 : i32
    %c16_i64_94 = arith.constant 16 : i64
    %361 = arith.extui %358 : i32 to i64
    %362 = arith.addi %361, %c16_i64_94 : i64
    %363 = llvm.getelementptr %8[%362] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %360, %363 {alignment = 1 : i64} : i32, !llvm.ptr
    %364 = llvm.load %2 : !llvm.ptr -> i32
    %365 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_95 = arith.constant 32 : i32
    %366 = arith.addi %365, %c32_i32_95 : i32
    %c8_i64_96 = arith.constant 8 : i64
    %367 = arith.extui %364 : i32 to i64
    %368 = arith.addi %367, %c8_i64_96 : i64
    %369 = llvm.getelementptr %8[%368] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %366, %369 {alignment = 1 : i64} : i32, !llvm.ptr
    %370 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_97 = arith.constant 20 : i64
    %371 = arith.extui %370 : i32 to i64
    %372 = arith.addi %371, %c20_i64_97 : i64
    %373 = llvm.getelementptr %8[%372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %374 = llvm.load volatile %373 {alignment = 1 : i64} : !llvm.ptr -> i32
    %375 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64_98 = arith.constant 24 : i64
    %376 = arith.extui %375 : i32 to i64
    %377 = arith.addi %376, %c24_i64_98 : i64
    %378 = llvm.getelementptr %8[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i32
    %380 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_99 = arith.constant 40 : i32
    %381 = arith.addi %380, %c40_i32_99 : i32
    %382 = call @f164(%arg0, %374, %379, %381) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %382, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb15:  // pred: ^bb5
    %383 = llvm.load %1 : !llvm.ptr -> i32
    %c1049676_i32 = arith.constant 1049676 : i32
    %c21_i32 = arith.constant 21 : i32
    %384 = call @f186(%arg0, %383, %c1049676_i32, %c21_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %384, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb16:  // pred: ^bb5
    %385 = llvm.load %1 : !llvm.ptr -> i32
    %c1049656_i32 = arith.constant 1049656 : i32
    %c20_i32 = arith.constant 20 : i32
    %386 = call @f186(%arg0, %385, %c1049656_i32, %c20_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %386, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb17:  // 2 preds: ^bb5, ^bb5
    %387 = llvm.load %2 : !llvm.ptr -> i32
    %388 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_100 = arith.constant 32 : i64
    %389 = arith.extui %387 : i32 to i64
    %390 = arith.addi %389, %c32_i64_100 : i64
    %391 = llvm.getelementptr %8[%390] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %388, %391 {alignment = 1 : i64} : i32, !llvm.ptr
    %392 = llvm.load %2 : !llvm.ptr -> i32
    %393 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_101 = arith.constant 8 : i64
    %394 = arith.extui %393 : i32 to i64
    %395 = arith.addi %394, %c8_i64_101 : i64
    %396 = llvm.getelementptr %8[%395] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %397 = llvm.load volatile %396 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c36_i64_102 = arith.constant 36 : i64
    %398 = arith.extui %392 : i32 to i64
    %399 = arith.addi %398, %c36_i64_102 : i64
    %400 = llvm.getelementptr %8[%399] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %397, %400 {alignment = 1 : i64} : i32, !llvm.ptr
    %401 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i32_103 = arith.constant 20 : i32
    %402 = arith.addi %401, %c20_i32_103 : i32
    %c51_i32 = arith.constant 51 : i32
    %c0_i64_104 = arith.constant 0 : i64
    %403 = arith.extui %402 : i32 to i64
    %404 = arith.addi %403, %c0_i64_104 : i64
    %405 = llvm.getelementptr %8[%404] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c51_i32, %405 {alignment = 1 : i64} : i32, !llvm.ptr
    %406 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_105 = arith.constant 2 : i32
    %c44_i64_106 = arith.constant 44 : i64
    %407 = arith.extui %406 : i32 to i64
    %408 = arith.addi %407, %c44_i64_106 : i64
    %409 = llvm.getelementptr %8[%408] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32_105, %409 {alignment = 1 : i64} : i32, !llvm.ptr
    %410 = llvm.load %2 : !llvm.ptr -> i32
    %c1049640_i32 = arith.constant 1049640 : i32
    %c40_i64_107 = arith.constant 40 : i64
    %411 = arith.extui %410 : i32 to i64
    %412 = arith.addi %411, %c40_i64_107 : i64
    %413 = llvm.getelementptr %8[%412] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1049640_i32, %413 {alignment = 1 : i64} : i32, !llvm.ptr
    %414 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i64_108 = arith.constant 2 : i64
    %c52_i64_109 = arith.constant 52 : i64
    %415 = arith.extui %414 : i32 to i64
    %416 = arith.addi %415, %c52_i64_109 : i64
    %417 = llvm.getelementptr %8[%416] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64_108, %417 {alignment = 1 : i64} : i64, !llvm.ptr
    %418 = llvm.load %2 : !llvm.ptr -> i32
    %c52_i32 = arith.constant 52 : i32
    %c12_i64_110 = arith.constant 12 : i64
    %419 = arith.extui %418 : i32 to i64
    %420 = arith.addi %419, %c12_i64_110 : i64
    %421 = llvm.getelementptr %8[%420] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c52_i32, %421 {alignment = 1 : i64} : i32, !llvm.ptr
    %422 = llvm.load %2 : !llvm.ptr -> i32
    %423 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_111 = arith.constant 8 : i32
    %424 = arith.addi %423, %c8_i32_111 : i32
    %c48_i64_112 = arith.constant 48 : i64
    %425 = arith.extui %422 : i32 to i64
    %426 = arith.addi %425, %c48_i64_112 : i64
    %427 = llvm.getelementptr %8[%426] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %424, %427 {alignment = 1 : i64} : i32, !llvm.ptr
    %428 = llvm.load %2 : !llvm.ptr -> i32
    %429 = llvm.load %2 : !llvm.ptr -> i32
    %c36_i32_113 = arith.constant 36 : i32
    %430 = arith.addi %429, %c36_i32_113 : i32
    %c16_i64_114 = arith.constant 16 : i64
    %431 = arith.extui %428 : i32 to i64
    %432 = arith.addi %431, %c16_i64_114 : i64
    %433 = llvm.getelementptr %8[%432] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %430, %433 {alignment = 1 : i64} : i32, !llvm.ptr
    %434 = llvm.load %2 : !llvm.ptr -> i32
    %435 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_115 = arith.constant 32 : i32
    %436 = arith.addi %435, %c32_i32_115 : i32
    %c8_i64_116 = arith.constant 8 : i64
    %437 = arith.extui %434 : i32 to i64
    %438 = arith.addi %437, %c8_i64_116 : i64
    %439 = llvm.getelementptr %8[%438] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %436, %439 {alignment = 1 : i64} : i32, !llvm.ptr
    %440 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_117 = arith.constant 20 : i64
    %441 = arith.extui %440 : i32 to i64
    %442 = arith.addi %441, %c20_i64_117 : i64
    %443 = llvm.getelementptr %8[%442] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %444 = llvm.load volatile %443 {alignment = 1 : i64} : !llvm.ptr -> i32
    %445 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64_118 = arith.constant 24 : i64
    %446 = arith.extui %445 : i32 to i64
    %447 = arith.addi %446, %c24_i64_118 : i64
    %448 = llvm.getelementptr %8[%447] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %449 = llvm.load volatile %448 {alignment = 1 : i64} : !llvm.ptr -> i32
    %450 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_119 = arith.constant 40 : i32
    %451 = arith.addi %450, %c40_i32_119 : i32
    %452 = call @f164(%arg0, %444, %449, %451) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %452, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f99(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %12 = arith.subi %11, %c48_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1054681_i64 = arith.constant 1054681 : i64
    %13 = arith.extui %c0_i32_5 : i32 to i64
    %14 = arith.addi %13, %c1054681_i64 : i64
    %15 = llvm.getelementptr %10[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i8
    %17 = arith.extui %16 : i8 to i32
    %c32_i32 = arith.constant 32 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %18 = call @f72(%arg0, %c32_i32, %c1_i32_6) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_7 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_8 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // pred: ^bb5
    %c4_i32 = arith.constant 4 : i32
    %c16_i32 = arith.constant 16 : i32
    call @f147(%arg0, %c4_i32, %c16_i32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c1_i32_9 = arith.constant 1 : i32
    %c32_i32_10 = arith.constant 32 : i32
    call @f147(%arg0, %c1_i32_9, %c32_i32_10) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_11 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_11) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %c0_i32_12 = arith.constant 0 : i32
    %c1054681_i64_13 = arith.constant 1054681 : i64
    %22 = arith.extui %c0_i32_12 : i32 to i64
    %23 = arith.addi %22, %c1054681_i64_13 : i64
    %24 = llvm.getelementptr %10[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load volatile %24 {alignment = 1 : i64} : !llvm.ptr -> i8
    %26 = arith.extui %25 : i8 to i32
    %c16_i32_14 = arith.constant 16 : i32
    %c4_i32_15 = arith.constant 4 : i32
    %27 = call @f72(%arg0, %c16_i32_14, %c4_i32_15) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %27, %4 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %28 = arith.cmpi eq, %27, %c0_i32_16 : i32
    %29 = arith.extui %28 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %30 = arith.cmpi ne, %29, %c0_i32_17 : i32
    cf.cond_br %30, ^bb3, ^bb6
  ^bb6:  // pred: ^bb5
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %c44_i64 = arith.constant 44 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c44_i64 : i64
    %34 = llvm.getelementptr %10[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_18, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = llvm.load %4 : !llvm.ptr -> i32
    %c40_i64 = arith.constant 40 : i64
    %37 = arith.extui %35 : i32 to i64
    %38 = arith.addi %37, %c40_i64 : i64
    %39 = llvm.getelementptr %10[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %c17179869184_i64 = arith.constant 17179869184 : i64
    %c32_i64 = arith.constant 32 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c32_i64 : i64
    %43 = llvm.getelementptr %10[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c17179869184_i64, %43 {alignment = 1 : i64} : i64, !llvm.ptr
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c28_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %c24_i64 = arith.constant 24 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c24_i64 : i64
    %52 = llvm.getelementptr %10[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_19, %52 {alignment = 1 : i64} : i32, !llvm.ptr
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %55 = arith.addi %54, %c24_i32 : i32
    call @f100(%arg0, %53, %55) : (!llvm.ptr, i32, i32) -> ()
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i64_20 = arith.constant 32 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c32_i64_20 : i64
    %59 = llvm.getelementptr %10[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %60, %3 : i32, !llvm.ptr
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_21 = arith.constant 28 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c28_i64_21 : i64
    %64 = llvm.getelementptr %10[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %65, %1 : i32, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_22 = arith.constant 24 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c24_i64_22 : i64
    %69 = llvm.getelementptr %10[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %70, %4 : i32, !llvm.ptr
    %71 = llvm.load %2 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c36_i64 : i64
    %74 = llvm.getelementptr %10[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = llvm.load volatile %74 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %75, %5 : i32, !llvm.ptr
    %c0_i32_23 = arith.constant 0 : i32
    %76 = arith.cmpi eq, %75, %c0_i32_23 : i32
    %77 = arith.extui %76 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %78 = arith.cmpi ne, %77, %c0_i32_24 : i32
    cf.cond_br %78, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %79 = llvm.load %2 : !llvm.ptr -> i32
    %80 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c16_i64 : i64
    %83 = llvm.getelementptr %10[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32 = arith.constant 31 : i32
    %86 = arith.cmpi ule, %c5_i32, %c31_i32 : i32
    %87 = scf.if %86 -> (i32) {
      %127 = arith.shli %85, %c5_i32 : i32
      scf.yield %127 : i32
    } else {
      %c0_i32_36 = arith.constant 0 : i32
      scf.yield %c0_i32_36 : i32
    }
    llvm.store %87, %3 : i32, !llvm.ptr
    %c20_i64 = arith.constant 20 : i64
    %88 = arith.extui %84 : i32 to i64
    %89 = arith.addi %88, %c20_i64 : i64
    %90 = llvm.getelementptr %10[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %87, %90 {alignment = 1 : i64} : i32, !llvm.ptr
    %91 = llvm.load %2 : !llvm.ptr -> i32
    %92 = llvm.load %4 : !llvm.ptr -> i32
    %c5_i32_25 = arith.constant 5 : i32
    %c31_i32_26 = arith.constant 31 : i32
    %93 = arith.cmpi ule, %c5_i32_25, %c31_i32_26 : i32
    %94 = scf.if %93 -> (i32) {
      %127 = arith.shli %92, %c5_i32_25 : i32
      scf.yield %127 : i32
    } else {
      %c0_i32_36 = arith.constant 0 : i32
      scf.yield %c0_i32_36 : i32
    }
    %c12_i64 = arith.constant 12 : i64
    %95 = arith.extui %91 : i32 to i64
    %96 = arith.addi %95, %c12_i64 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %94, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %100 = llvm.load %3 : !llvm.ptr -> i32
    call @f97(%arg0, %98, %99, %100) : (!llvm.ptr, i32, i32, i32) -> ()
    %101 = llvm.load %0 : !llvm.ptr -> i32
    %c9_i32_27 = arith.constant 9 : i32
    %c20_i64_28 = arith.constant 20 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c20_i64_28 : i64
    %104 = llvm.getelementptr %10[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c9_i32_27, %104 {alignment = 1 : i64} : i32, !llvm.ptr
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %c1050076_i32 = arith.constant 1050076 : i32
    %c16_i64_29 = arith.constant 16 : i64
    %106 = arith.extui %105 : i32 to i64
    %107 = arith.addi %106, %c16_i64_29 : i64
    %108 = llvm.getelementptr %10[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050076_i32, %108 {alignment = 1 : i64} : i32, !llvm.ptr
    %109 = llvm.load %0 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c12_i64_30 = arith.constant 12 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c12_i64_30 : i64
    %112 = llvm.getelementptr %10[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %112 {alignment = 1 : i64} : i32, !llvm.ptr
    %113 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %114 = arith.addi %113, %c12_i32 : i32
    call @f112(%arg0, %114) : (!llvm.ptr, i32) -> ()
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_31 = arith.constant 12 : i32
    %116 = arith.addi %115, %c12_i32_31 : i32
    call @f113(%arg0, %116) : (!llvm.ptr, i32) -> ()
    %117 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_32 = arith.constant 48 : i32
    %118 = arith.addi %117, %c48_i32_32 : i32
    llvm.store %118, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb8:  // pred: ^bb6
    %119 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_33 = arith.constant 40 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c40_i64_33 : i64
    %122 = llvm.getelementptr %10[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i32
    %124 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32_34 = arith.constant 31 : i32
    %125 = arith.cmpi ule, %c2_i32, %c31_i32_34 : i32
    %126 = scf.if %125 -> (i32) {
      %127 = arith.shli %124, %c2_i32 : i32
      scf.yield %127 : i32
    } else {
      %c0_i32_36 = arith.constant 0 : i32
      scf.yield %c0_i32_36 : i32
    }
    %c4_i32_35 = arith.constant 4 : i32
    call @f73(%arg0, %123, %126, %c4_i32_35) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb7
  }
  func.func @f100(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c20_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %11, %2 : i32, !llvm.ptr
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c12_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %17 = arith.cmpi eq, %11, %16 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_3 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_4 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c16_i64 : i64
    %25 = llvm.getelementptr %6[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %28 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %29 = scf.if %28 -> (i32) {
      %128 = arith.shli %27, %c2_i32 : i32
      scf.yield %128 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    %30 = arith.addi %26, %29 : i32
    %c32_i32 = arith.constant 32 : i32
    %c0_i64 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64 : i64
    %33 = llvm.getelementptr %6[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %33 {alignment = 1 : i64} : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_5 = arith.constant 1 : i32
    %36 = arith.addi %35, %c1_i32_5 : i32
    %c20_i64_6 = arith.constant 20 : i64
    %37 = arith.extui %34 : i32 to i64
    %38 = arith.addi %37, %c20_i64_6 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c8_i64 : i64
    %43 = llvm.getelementptr %6[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %44, %3 : i32, !llvm.ptr
    %45 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_7 = arith.constant 0 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c0_i64_7 : i64
    %48 = llvm.getelementptr %6[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i32
    %50 = arith.cmpi eq, %44, %49 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %52 = arith.cmpi eq, %51, %c0_i32_8 : i32
    %53 = arith.extui %52 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %54 = arith.cmpi ne, %53, %c0_i32_9 : i32
    cf.cond_br %54, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %56 = arith.addi %55, %c12_i32 : i32
    call @f92(%arg0, %56) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c4_i64 : i64
    %60 = llvm.getelementptr %6[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    %62 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_10 = arith.constant 31 : i32
    %63 = arith.cmpi ule, %c5_i32, %c31_i32_10 : i32
    %64 = scf.if %63 -> (i32) {
      %128 = arith.shli %62, %c5_i32 : i32
      scf.yield %128 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    %65 = arith.addi %61, %64 : i32
    llvm.store %65, %2 : i32, !llvm.ptr
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_11 : i64
    %69 = llvm.getelementptr %6[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    %71 = arith.extui %65 : i32 to i64
    %72 = arith.addi %71, %c0_i64_12 : i64
    %73 = llvm.getelementptr %6[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %70, %73 {alignment = 1 : i64} : i64, !llvm.ptr
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %75 = arith.addi %74, %c24_i32 : i32
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_13 = arith.constant 24 : i32
    %77 = arith.addi %76, %c24_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_14 : i64
    %80 = llvm.getelementptr %6[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %82 = arith.extui %75 : i32 to i64
    %83 = arith.addi %82, %c0_i64_15 : i64
    %84 = llvm.getelementptr %6[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %81, %84 {alignment = 1 : i64} : i64, !llvm.ptr
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %86 = arith.addi %85, %c16_i32 : i32
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_16 = arith.constant 16 : i32
    %88 = arith.addi %87, %c16_i32_16 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_17 : i64
    %91 = llvm.getelementptr %6[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_18 = arith.constant 0 : i64
    %93 = arith.extui %86 : i32 to i64
    %94 = arith.addi %93, %c0_i64_18 : i64
    %95 = llvm.getelementptr %6[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %97 = arith.addi %96, %c8_i32 : i32
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_19 = arith.constant 8 : i32
    %99 = arith.addi %98, %c8_i32_19 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c0_i64_20 : i64
    %102 = llvm.getelementptr %6[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %104 = arith.extui %97 : i32 to i64
    %105 = arith.addi %104, %c0_i64_21 : i64
    %106 = llvm.getelementptr %6[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %103, %106 {alignment = 1 : i64} : i64, !llvm.ptr
    %107 = llvm.load %1 : !llvm.ptr -> i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %109 = arith.addi %108, %c1_i32_22 : i32
    %c8_i64_23 = arith.constant 8 : i64
    %110 = arith.extui %107 : i32 to i64
    %111 = arith.addi %110, %c8_i64_23 : i64
    %112 = llvm.getelementptr %6[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %112 {alignment = 1 : i64} : i32, !llvm.ptr
    %113 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_24 = arith.constant 20 : i64
    %114 = arith.extui %113 : i32 to i64
    %115 = arith.addi %114, %c20_i64_24 : i64
    %116 = llvm.getelementptr %6[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %117 = llvm.load volatile %116 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %117, %0 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %118 = arith.cmpi eq, %117, %c0_i32_25 : i32
    %119 = arith.extui %118 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %120 = arith.cmpi ne, %119, %c0_i32_26 : i32
    cf.cond_br %120, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %121 = llvm.load %1 : !llvm.ptr -> i32
    call @f91(%arg0, %121) : (!llvm.ptr, i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    cf.br ^bb2
  ^bb8:  // pred: ^bb5
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %124 = arith.addi %123, %c-1_i32 : i32
    %c20_i64_27 = arith.constant 20 : i64
    %125 = arith.extui %122 : i32 to i64
    %126 = arith.addi %125, %c20_i64_27 : i64
    %127 = llvm.getelementptr %6[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %124, %127 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  }
  func.func @f101(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c20_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %11, %2 : i32, !llvm.ptr
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c12_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %17 = arith.cmpi eq, %11, %16 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_3 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_4 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2:  // pred: ^bb7
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c16_i64 : i64
    %25 = llvm.getelementptr %6[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %28 = arith.cmpi ule, %c2_i32, %c31_i32 : i32
    %29 = scf.if %28 -> (i32) {
      %128 = arith.shli %27, %c2_i32 : i32
      scf.yield %128 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    %30 = arith.addi %26, %29 : i32
    %c32_i32 = arith.constant 32 : i32
    %c0_i64 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64 : i64
    %33 = llvm.getelementptr %6[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %33 {alignment = 1 : i64} : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_5 = arith.constant 1 : i32
    %36 = arith.addi %35, %c1_i32_5 : i32
    %c20_i64_6 = arith.constant 20 : i64
    %37 = arith.extui %34 : i32 to i64
    %38 = arith.addi %37, %c20_i64_6 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c8_i64 : i64
    %43 = llvm.getelementptr %6[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %44, %3 : i32, !llvm.ptr
    %45 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_7 = arith.constant 0 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c0_i64_7 : i64
    %48 = llvm.getelementptr %6[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i32
    %50 = arith.cmpi eq, %44, %49 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %52 = arith.cmpi eq, %51, %c0_i32_8 : i32
    %53 = arith.extui %52 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %54 = arith.cmpi ne, %53, %c0_i32_9 : i32
    cf.cond_br %54, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %56 = arith.addi %55, %c12_i32 : i32
    call @f92(%arg0, %56) : (!llvm.ptr, i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c4_i64 : i64
    %60 = llvm.getelementptr %6[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    %62 = llvm.load %3 : !llvm.ptr -> i32
    %c5_i32 = arith.constant 5 : i32
    %c31_i32_10 = arith.constant 31 : i32
    %63 = arith.cmpi ule, %c5_i32, %c31_i32_10 : i32
    %64 = scf.if %63 -> (i32) {
      %128 = arith.shli %62, %c5_i32 : i32
      scf.yield %128 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    %65 = arith.addi %61, %64 : i32
    llvm.store %65, %2 : i32, !llvm.ptr
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_11 : i64
    %69 = llvm.getelementptr %6[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_12 = arith.constant 0 : i64
    %71 = arith.extui %65 : i32 to i64
    %72 = arith.addi %71, %c0_i64_12 : i64
    %73 = llvm.getelementptr %6[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %70, %73 {alignment = 1 : i64} : i64, !llvm.ptr
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %75 = arith.addi %74, %c24_i32 : i32
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_13 = arith.constant 24 : i32
    %77 = arith.addi %76, %c24_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_14 : i64
    %80 = llvm.getelementptr %6[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %82 = arith.extui %75 : i32 to i64
    %83 = arith.addi %82, %c0_i64_15 : i64
    %84 = llvm.getelementptr %6[%83] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %81, %84 {alignment = 1 : i64} : i64, !llvm.ptr
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %86 = arith.addi %85, %c16_i32 : i32
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_16 = arith.constant 16 : i32
    %88 = arith.addi %87, %c16_i32_16 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_17 : i64
    %91 = llvm.getelementptr %6[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_18 = arith.constant 0 : i64
    %93 = arith.extui %86 : i32 to i64
    %94 = arith.addi %93, %c0_i64_18 : i64
    %95 = llvm.getelementptr %6[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %92, %95 {alignment = 1 : i64} : i64, !llvm.ptr
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %97 = arith.addi %96, %c8_i32 : i32
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_19 = arith.constant 8 : i32
    %99 = arith.addi %98, %c8_i32_19 : i32
    %c0_i64_20 = arith.constant 0 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c0_i64_20 : i64
    %102 = llvm.getelementptr %6[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_21 = arith.constant 0 : i64
    %104 = arith.extui %97 : i32 to i64
    %105 = arith.addi %104, %c0_i64_21 : i64
    %106 = llvm.getelementptr %6[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %103, %106 {alignment = 1 : i64} : i64, !llvm.ptr
    %107 = llvm.load %1 : !llvm.ptr -> i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_22 = arith.constant 1 : i32
    %109 = arith.addi %108, %c1_i32_22 : i32
    %c8_i64_23 = arith.constant 8 : i64
    %110 = arith.extui %107 : i32 to i64
    %111 = arith.addi %110, %c8_i64_23 : i64
    %112 = llvm.getelementptr %6[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %109, %112 {alignment = 1 : i64} : i32, !llvm.ptr
    %113 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64_24 = arith.constant 20 : i64
    %114 = arith.extui %113 : i32 to i64
    %115 = arith.addi %114, %c20_i64_24 : i64
    %116 = llvm.getelementptr %6[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %117 = llvm.load volatile %116 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %117, %0 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %118 = arith.cmpi eq, %117, %c0_i32_25 : i32
    %119 = arith.extui %118 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %120 = arith.cmpi ne, %119, %c0_i32_26 : i32
    cf.cond_br %120, ^bb7, ^bb8
  ^bb6:  // pred: ^bb3
    %121 = llvm.load %1 : !llvm.ptr -> i32
    call @f91(%arg0, %121) : (!llvm.ptr, i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    cf.br ^bb2
  ^bb8:  // pred: ^bb5
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %123 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %124 = arith.addi %123, %c-1_i32 : i32
    %c20_i64_27 = arith.constant 20 : i64
    %125 = arith.extui %122 : i32 to i64
    %126 = arith.addi %125, %c20_i64_27 : i64
    %127 = llvm.getelementptr %6[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %124, %127 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb7
  }
  func.func @f102(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func @f103(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %11 = arith.subi %10, %c32_i32 : i32
    llvm.store %11, %2 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %12 = arith.addi %11, %c24_i32 : i32
    %c0_i64_4 = arith.constant 0 : i64
    %c0_i64_5 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64_5 : i64
    %15 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_4, %15 {alignment = 1 : i64} : i64, !llvm.ptr
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %17 = arith.addi %16, %c16_i32 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %c0_i64_7 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64_7 : i64
    %20 = llvm.getelementptr %9[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_6, %20 {alignment = 1 : i64} : i64, !llvm.ptr
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %22 = arith.addi %21, %c8_i32 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c0_i64_9 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_8, %25 {alignment = 1 : i64} : i64, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_10 = arith.constant 0 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c0_i64_11 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_10, %29 {alignment = 1 : i64} : i64, !llvm.ptr
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32_12 = arith.constant 24 : i32
    %31 = arith.addi %30, %c24_i32_12 : i32
    llvm.store %31, %1 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %3 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_14 = arith.constant 0 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c0_i64_14 : i64
    %36 = llvm.getelementptr %9[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %38 = arith.extui %32 : i32 to i64
    %39 = arith.addi %38, %c0_i64_15 : i64
    %40 = llvm.getelementptr %9[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %37, %40 {alignment = 1 : i64} : i64, !llvm.ptr
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i32_16 = arith.constant 24 : i32
    %42 = arith.addi %41, %c24_i32_16 : i32
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_17 = arith.constant 24 : i32
    %44 = arith.addi %43, %c24_i32_17 : i32
    %c0_i64_18 = arith.constant 0 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c0_i64_18 : i64
    %47 = llvm.getelementptr %9[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = llvm.load volatile %47 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_19 = arith.constant 0 : i64
    %49 = arith.extui %42 : i32 to i64
    %50 = arith.addi %49, %c0_i64_19 : i64
    %51 = llvm.getelementptr %9[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %48, %51 {alignment = 1 : i64} : i64, !llvm.ptr
    %52 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_20 = arith.constant 16 : i32
    %53 = arith.addi %52, %c16_i32_20 : i32
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_21 = arith.constant 16 : i32
    %55 = arith.addi %54, %c16_i32_21 : i32
    %c0_i64_22 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64_22 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_23 = arith.constant 0 : i64
    %60 = arith.extui %53 : i32 to i64
    %61 = arith.addi %60, %c0_i64_23 : i64
    %62 = llvm.getelementptr %9[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %59, %62 {alignment = 1 : i64} : i64, !llvm.ptr
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_24 = arith.constant 8 : i32
    %64 = arith.addi %63, %c8_i32_24 : i32
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_25 = arith.constant 8 : i32
    %66 = arith.addi %65, %c8_i32_25 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_26 : i64
    %69 = llvm.getelementptr %9[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_27 = arith.constant 0 : i64
    %71 = arith.extui %64 : i32 to i64
    %72 = arith.addi %71, %c0_i64_27 : i64
    %73 = llvm.getelementptr %9[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %70, %73 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %74 = llvm.load %2 : !llvm.ptr -> i32
    %75 = llvm.load %3 : !llvm.ptr -> i32
    %76 = arith.addi %74, %75 : i32
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_28 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_28 : i64
    %80 = llvm.getelementptr %9[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %81, %4 : i64, !llvm.ptr
    %c56_i64 = arith.constant 56 : i64
    %c63_i64 = arith.constant 63 : i64
    %82 = arith.cmpi ule, %c56_i64, %c63_i64 : i64
    %83 = scf.if %82 -> (i64) {
      %130 = arith.shli %81, %c56_i64 : i64
      scf.yield %130 : i64
    } else {
      %c0_i64_48 = arith.constant 0 : i64
      scf.yield %c0_i64_48 : i64
    }
    %84 = llvm.load %4 : !llvm.ptr -> i64
    %c65280_i64 = arith.constant 65280 : i64
    %85 = arith.andi %84, %c65280_i64 : i64
    %c40_i64 = arith.constant 40 : i64
    %c63_i64_29 = arith.constant 63 : i64
    %86 = arith.cmpi ule, %c40_i64, %c63_i64_29 : i64
    %87 = scf.if %86 -> (i64) {
      %130 = arith.shli %85, %c40_i64 : i64
      scf.yield %130 : i64
    } else {
      %c0_i64_48 = arith.constant 0 : i64
      scf.yield %c0_i64_48 : i64
    }
    %88 = arith.ori %83, %87 : i64
    %89 = llvm.load %4 : !llvm.ptr -> i64
    %c16711680_i64 = arith.constant 16711680 : i64
    %90 = arith.andi %89, %c16711680_i64 : i64
    %c24_i64 = arith.constant 24 : i64
    %c63_i64_30 = arith.constant 63 : i64
    %91 = arith.cmpi ule, %c24_i64, %c63_i64_30 : i64
    %92 = scf.if %91 -> (i64) {
      %130 = arith.shli %90, %c24_i64 : i64
      scf.yield %130 : i64
    } else {
      %c0_i64_48 = arith.constant 0 : i64
      scf.yield %c0_i64_48 : i64
    }
    %93 = llvm.load %4 : !llvm.ptr -> i64
    %c4278190080_i64 = arith.constant 4278190080 : i64
    %94 = arith.andi %93, %c4278190080_i64 : i64
    %c8_i64 = arith.constant 8 : i64
    %c63_i64_31 = arith.constant 63 : i64
    %95 = arith.cmpi ule, %c8_i64, %c63_i64_31 : i64
    %96 = scf.if %95 -> (i64) {
      %130 = arith.shli %94, %c8_i64 : i64
      scf.yield %130 : i64
    } else {
      %c0_i64_48 = arith.constant 0 : i64
      scf.yield %c0_i64_48 : i64
    }
    %97 = arith.ori %92, %96 : i64
    %98 = arith.ori %88, %97 : i64
    %99 = llvm.load %4 : !llvm.ptr -> i64
    %c8_i64_32 = arith.constant 8 : i64
    %c63_i64_33 = arith.constant 63 : i64
    %100 = arith.cmpi ule, %c8_i64_32, %c63_i64_33 : i64
    %101 = scf.if %100 -> (i64) {
      %130 = arith.shrui %99, %c8_i64_32 : i64
      scf.yield %130 : i64
    } else {
      %c0_i64_48 = arith.constant 0 : i64
      scf.yield %c0_i64_48 : i64
    }
    %c4278190080_i64_34 = arith.constant 4278190080 : i64
    %102 = arith.andi %101, %c4278190080_i64_34 : i64
    %103 = llvm.load %4 : !llvm.ptr -> i64
    %c24_i64_35 = arith.constant 24 : i64
    %c63_i64_36 = arith.constant 63 : i64
    %104 = arith.cmpi ule, %c24_i64_35, %c63_i64_36 : i64
    %105 = scf.if %104 -> (i64) {
      %130 = arith.shrui %103, %c24_i64_35 : i64
      scf.yield %130 : i64
    } else {
      %c0_i64_48 = arith.constant 0 : i64
      scf.yield %c0_i64_48 : i64
    }
    %c16711680_i64_37 = arith.constant 16711680 : i64
    %106 = arith.andi %105, %c16711680_i64_37 : i64
    %107 = arith.ori %102, %106 : i64
    %108 = llvm.load %4 : !llvm.ptr -> i64
    %c40_i64_38 = arith.constant 40 : i64
    %c63_i64_39 = arith.constant 63 : i64
    %109 = arith.cmpi ule, %c40_i64_38, %c63_i64_39 : i64
    %110 = scf.if %109 -> (i64) {
      %130 = arith.shrui %108, %c40_i64_38 : i64
      scf.yield %130 : i64
    } else {
      %c0_i64_48 = arith.constant 0 : i64
      scf.yield %c0_i64_48 : i64
    }
    %c65280_i64_40 = arith.constant 65280 : i64
    %111 = arith.andi %110, %c65280_i64_40 : i64
    %112 = llvm.load %4 : !llvm.ptr -> i64
    %c56_i64_41 = arith.constant 56 : i64
    %c63_i64_42 = arith.constant 63 : i64
    %113 = arith.cmpi ule, %c56_i64_41, %c63_i64_42 : i64
    %114 = scf.if %113 -> (i64) {
      %130 = arith.shrui %112, %c56_i64_41 : i64
      scf.yield %130 : i64
    } else {
      %c0_i64_48 = arith.constant 0 : i64
      scf.yield %c0_i64_48 : i64
    }
    %115 = arith.ori %111, %114 : i64
    %116 = arith.ori %107, %115 : i64
    %117 = arith.ori %98, %116 : i64
    %c0_i64_43 = arith.constant 0 : i64
    %118 = arith.extui %76 : i32 to i64
    %119 = arith.addi %118, %c0_i64_43 : i64
    %120 = llvm.getelementptr %9[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %117, %120 {alignment = 1 : i64} : i64, !llvm.ptr
    %121 = llvm.load %1 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %122 = arith.addi %121, %c-8_i32 : i32
    llvm.store %122, %1 : i32, !llvm.ptr
    %123 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_44 = arith.constant 8 : i32
    %124 = arith.addi %123, %c8_i32_44 : i32
    llvm.store %124, %3 : i32, !llvm.ptr
    %c32_i32_45 = arith.constant 32 : i32
    %125 = arith.cmpi eq, %124, %c32_i32_45 : i32
    %126 = arith.extui %125 : i1 to i32
    %c0_i32_46 = arith.constant 0 : i32
    %127 = arith.cmpi eq, %126, %c0_i32_46 : i32
    %128 = arith.extui %127 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %129 = arith.cmpi ne, %128, %c0_i32_47 : i32
    cf.cond_br %129, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  }
  func.func @f104(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %4 = call @f201(%arg0, %2, %3, %c32_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32 = arith.constant 0 : i32
    %5 = arith.cmpi eq, %4, %c0_i32 : i32
    %6 = arith.extui %5 : i1 to i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f105(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %13 = arith.subi %12, %c16_i32 : i32
    llvm.store %13, %3 : i32, !llvm.ptr
    llvm.store %13, %8 : i32, !llvm.ptr
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %15 = arith.addi %14, %c4_i32 : i32
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %17 = arith.cmpi ule, %c1_i32_6, %c31_i32 : i32
    %18 = scf.if %17 -> (i32) {
      %69 = arith.shli %16, %c1_i32_6 : i32
      scf.yield %69 : i32
    } else {
      %c0_i32_16 = arith.constant 0 : i32
      scf.yield %c0_i32_16 : i32
    }
    %c2_i32 = arith.constant 2 : i32
    %19 = arith.addi %18, %c2_i32 : i32
    llvm.store %19, %4 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    call @f111(%arg0, %15, %19, %c0_i32_7) : (!llvm.ptr, i32, i32, i32) -> ()
    %20 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c8_i64 : i64
    %23 = llvm.getelementptr %11[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %5 : i32, !llvm.ptr
    %25 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c4_i64 : i64
    %28 = llvm.getelementptr %11[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %30 = arith.cmpi eq, %29, %c0_i32_8 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_9 : i32
    cf.cond_br %32, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %33 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c12_i64 : i64
    %36 = llvm.getelementptr %11[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %37, %6 : i32, !llvm.ptr
    %c30768_i32 = arith.constant 30768 : i32
    %c0_i64 = arith.constant 0 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c0_i64 : i64
    %40 = llvm.getelementptr %11[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = arith.trunci %c30768_i32 : i32 to i16
    llvm.store volatile %41, %40 {alignment = 1 : i64} : i16, !llvm.ptr
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %44 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_10 = arith.constant 2 : i32
    %45 = arith.addi %44, %c2_i32_10 : i32
    call @f106(%arg0, %42, %43, %45) : (!llvm.ptr, i32, i32, i32) -> ()
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i64_11 = arith.constant 8 : i64
    %48 = arith.extui %46 : i32 to i64
    %49 = arith.addi %48, %c8_i64_11 : i64
    %50 = llvm.getelementptr %11[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i32, !llvm.ptr
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %52 = llvm.load %6 : !llvm.ptr -> i32
    %c4_i64_12 = arith.constant 4 : i64
    %53 = arith.extui %51 : i32 to i64
    %54 = arith.addi %53, %c4_i64_12 : i64
    %55 = llvm.getelementptr %11[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i32, !llvm.ptr
    %56 = llvm.load %0 : !llvm.ptr -> i32
    %57 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %58 = arith.extui %56 : i32 to i64
    %59 = arith.addi %58, %c0_i64_13 : i64
    %60 = llvm.getelementptr %11[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %57, %60 {alignment = 1 : i64} : i32, !llvm.ptr
    %61 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_14 = arith.constant 16 : i32
    %62 = arith.addi %61, %c16_i32_14 : i32
    llvm.store %62, %8 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %63 = llvm.load %5 : !llvm.ptr -> i32
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_15 = arith.constant 12 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c12_i64_15 : i64
    %67 = llvm.getelementptr %11[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %63, %68) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f106(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %8 = arith.cmpi eq, %7, %c0_i32_3 : i32
    %9 = arith.extui %8 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_4 : i32
    cf.cond_br %10, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb5
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    cf.br ^bb6
  ^bb5:  // pred: ^bb7
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb6
    %11 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_5 = arith.constant 1 : i32
    %12 = arith.addi %11, %c1_i32_5 : i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i8
    %18 = arith.extui %17 : i8 to i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %c15_i32 = arith.constant 15 : i32
    %19 = arith.andi %18, %c15_i32 : i32
    %c1050336_i32 = arith.constant 1050336 : i32
    %20 = arith.addi %19, %c1050336_i32 : i32
    %c0_i64_6 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64_6 : i64
    %23 = llvm.getelementptr %6[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i8
    %25 = arith.extui %24 : i8 to i32
    %c0_i64_7 = arith.constant 0 : i64
    %26 = arith.extui %12 : i32 to i64
    %27 = arith.addi %26, %c0_i64_7 : i64
    %28 = llvm.getelementptr %6[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = arith.trunci %25 : i32 to i8
    llvm.store volatile %29, %28 {alignment = 1 : i64} : i8, !llvm.ptr
    %30 = llvm.load %2 : !llvm.ptr -> i32
    %31 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c31_i32 = arith.constant 31 : i32
    %32 = arith.cmpi ule, %c4_i32, %c31_i32 : i32
    %33 = scf.if %32 -> (i32) {
      %51 = arith.shrui %31, %c4_i32 : i32
      scf.yield %51 : i32
    } else {
      %c0_i32_13 = arith.constant 0 : i32
      scf.yield %c0_i32_13 : i32
    }
    %c1050336_i32_8 = arith.constant 1050336 : i32
    %34 = arith.addi %33, %c1050336_i32_8 : i32
    %c0_i64_9 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64_9 : i64
    %37 = llvm.getelementptr %6[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i8
    %39 = arith.extui %38 : i8 to i32
    %c0_i64_10 = arith.constant 0 : i64
    %40 = arith.extui %30 : i32 to i64
    %41 = arith.addi %40, %c0_i64_10 : i64
    %42 = llvm.getelementptr %6[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = arith.trunci %39 : i32 to i8
    llvm.store volatile %43, %42 {alignment = 1 : i64} : i8, !llvm.ptr
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %45 = arith.addi %44, %c2_i32 : i32
    llvm.store %45, %2 : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %47 = arith.addi %46, %c1_i32_11 : i32
    llvm.store %47, %0 : i32, !llvm.ptr
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %49 = arith.addi %48, %c-1_i32 : i32
    llvm.store %49, %1 : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_12 : i32
    cf.cond_br %50, ^bb6, ^bb7
  ^bb7:  // pred: ^bb6
    cf.br ^bb5
  }
  func.func @f107(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f108(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f108(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %9 = arith.subi %8, %c16_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %11 = arith.addi %10, %c4_i32 : i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c4_i64 : i64
    %15 = llvm.getelementptr %7[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c8_i64 : i64
    %20 = llvm.getelementptr %7[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f105(%arg0, %11, %16, %21) : (!llvm.ptr, i32, i32, i32) -> ()
    %22 = llvm.load %1 : !llvm.ptr -> i32
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_2 = arith.constant 8 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c8_i64_2 : i64
    %26 = llvm.getelementptr %7[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c12_i64 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    %33 = call @f160(%arg0, %22, %27, %32) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %33, %0 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_3 = arith.constant 4 : i32
    %35 = arith.addi %34, %c4_i32_3 : i32
    call @f112(%arg0, %35) : (!llvm.ptr, i32) -> ()
    %36 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_4 = arith.constant 4 : i32
    %37 = arith.addi %36, %c4_i32_4 : i32
    call @f113(%arg0, %37) : (!llvm.ptr, i32) -> ()
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_5 = arith.constant 16 : i32
    %39 = arith.addi %38, %c16_i32_5 : i32
    llvm.store %39, %4 : i32, !llvm.ptr
    %40 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%40 : i32)
  ^bb2(%41: i32):  // pred: ^bb1
    return %41 : i32
  }
  func.func @f109(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_4 = arith.constant 0 : i32
    llvm.store %c0_i32_4, %4 : i32, !llvm.ptr
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %3 : !llvm.ptr -> i32
    %7 = arith.cmpi eq, %5, %6 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %9 = arith.cmpi eq, %8, %c0_i32_5 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_6 : i32
    cf.cond_br %11, ^bb3, ^bb4
  ^bb2(%12: i32):  // pred: ^bb3
    return %12 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %13 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%13 : i32)
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = call @f201(%arg0, %14, %15, %16) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_7 : i32
    %19 = arith.extui %18 : i1 to i32
    llvm.store %19, %4 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f110(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_5 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_6 : i32
    cf.cond_br %12, ^bb8, ^bb9
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb4, ^bb19
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %15 = arith.extui %13 : i32 to i64
    %16 = arith.addi %15, %c0_i64 : i64
    %17 = llvm.getelementptr %8[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %14, %17 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb7, ^bb8, ^bb18
    %c1_i32_7 = arith.constant 1 : i32
    llvm.store %c1_i32_7, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 3 preds: ^bb6, ^bb11, ^bb14
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %19 = arith.cmpi eq, %18, %c0_i32_8 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_9 : i32
    cf.cond_br %21, ^bb18, ^bb19
  ^bb6:  // 2 preds: ^bb12, ^bb15
    %22 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %22, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb9
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_10, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb8:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %c4_i64_12 = arith.constant 4 : i64
    %28 = arith.extui %27 : i32 to i64
    %29 = arith.addi %28, %c4_i64_12 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_11, %30 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb9:  // pred: ^bb1
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %32 = arith.cmpi sle, %31, %c-1_i32 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_13 : i32
    cf.cond_br %34, ^bb7, ^bb10
  ^bb10:  // pred: ^bb9
    %35 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_14 = arith.constant 4 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c4_i64_14 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %39, %c0_i32_15 : i32
    %41 = arith.extui %40 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_16 : i32
    cf.cond_br %42, ^bb12, ^bb13
  ^bb11:  // 2 preds: ^bb16, ^bb17
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = call @f72(%arg0, %43, %44) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %45, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb12:  // pred: ^bb10
    %46 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %47 = arith.cmpi eq, %46, %c0_i32_17 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_18 : i32
    cf.cond_br %49, ^bb6, ^bb17
  ^bb13:  // pred: ^bb10
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c8_i64 : i64
    %53 = llvm.getelementptr %8[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %5 : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_19 : i32
    cf.cond_br %55, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %56 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %57 = arith.extui %56 : i32 to i64
    %58 = arith.addi %57, %c0_i64_20 : i64
    %59 = llvm.getelementptr %8[%58] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %60 = llvm.load volatile %59 {alignment = 1 : i64} : !llvm.ptr -> i32
    %61 = llvm.load %5 : !llvm.ptr -> i32
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %63 = llvm.load %2 : !llvm.ptr -> i32
    %64 = call @f74(%arg0, %60, %61, %62, %63) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %64, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb15:  // pred: ^bb13
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %66 = arith.cmpi eq, %65, %c0_i32_21 : i32
    %67 = arith.extui %66 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %68 = arith.cmpi ne, %67, %c0_i32_22 : i32
    cf.cond_br %68, ^bb6, ^bb16
  ^bb16:  // pred: ^bb15
    %c0_i32_23 = arith.constant 0 : i32
    %c1054681_i64 = arith.constant 1054681 : i64
    %69 = arith.extui %c0_i32_23 : i32 to i64
    %70 = arith.addi %69, %c1054681_i64 : i64
    %71 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i8
    %73 = arith.extui %72 : i8 to i32
    cf.br ^bb11
  ^bb17:  // pred: ^bb12
    %c0_i32_24 = arith.constant 0 : i32
    %c1054681_i64_25 = arith.constant 1054681 : i64
    %74 = arith.extui %c0_i32_24 : i32 to i64
    %75 = arith.addi %74, %c1054681_i64_25 : i64
    %76 = llvm.getelementptr %8[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i8
    %78 = arith.extui %77 : i8 to i32
    cf.br ^bb11
  ^bb18:  // pred: ^bb5
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %80 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_26 = arith.constant 8 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c8_i64_26 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    %84 = llvm.load %0 : !llvm.ptr -> i32
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_27 = arith.constant 4 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c4_i64_27 : i64
    %88 = llvm.getelementptr %8[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb4
  ^bb19:  // pred: ^bb5
    %89 = llvm.load %0 : !llvm.ptr -> i32
    %90 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_28 = arith.constant 8 : i64
    %91 = arith.extui %89 : i32 to i64
    %92 = arith.addi %91, %c8_i64_28 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %93 {alignment = 1 : i64} : i32, !llvm.ptr
    %94 = llvm.load %0 : !llvm.ptr -> i32
    %95 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_29 = arith.constant 4 : i64
    %96 = arith.extui %94 : i32 to i64
    %97 = arith.addi %96, %c4_i64_29 : i64
    %98 = llvm.getelementptr %8[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %95, %98 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    llvm.store %c0_i32_30, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f111(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %7 = arith.cmpi eq, %6, %c0_i32 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32_2 : i32
    cf.cond_br %9, ^bb4, ^bb5
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 4 preds: ^bb4, ^bb7, ^bb11, ^bb12
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %12 = arith.extui %10 : i32 to i64
    %13 = arith.addi %12, %c0_i64 : i64
    %14 = llvm.getelementptr %5[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %11, %14 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %15 = llvm.load %0 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c4_i64 : i64
    %18 = llvm.getelementptr %5[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %18 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_3 = arith.constant 0 : i32
    llvm.store %c0_i32_3, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %20 = arith.cmpi sgt, %19, %c-1_i32 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_4 : i32
    cf.cond_br %22, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_5 : i32
    cf.cond_br %24, ^bb9, ^bb10
  ^bb7:  // pred: ^bb5
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %c4_i64_7 = arith.constant 4 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c4_i64_7 : i64
    %28 = llvm.getelementptr %5[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_6, %28 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    llvm.store %c1_i32_8, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // 2 preds: ^bb9, ^bb10
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %30 = arith.cmpi eq, %29, %c0_i32_9 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_10 : i32
    cf.cond_br %32, ^bb11, ^bb12
  ^bb9:  // pred: ^bb6
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %34 = call @f72(%arg0, %33, %c1_i32_11) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %34, %2 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb10:  // pred: ^bb6
    %c0_i32_12 = arith.constant 0 : i32
    %c1054681_i64 = arith.constant 1054681 : i64
    %35 = arith.extui %c0_i32_12 : i32 to i64
    %36 = arith.addi %35, %c1054681_i64 : i64
    %37 = llvm.getelementptr %5[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i8
    %39 = arith.extui %38 : i8 to i32
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_13 = arith.constant 1 : i32
    %41 = call @f72(%arg0, %40, %c1_i32_13) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %41, %2 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb11:  // pred: ^bb8
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %44 = arith.extui %42 : i32 to i64
    %45 = arith.addi %44, %c8_i64 : i64
    %46 = llvm.getelementptr %5[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %43, %46 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_14 = arith.constant 1 : i32
    llvm.store %c1_i32_14, %1 : i32, !llvm.ptr
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_15 = arith.constant 1 : i32
    %c4_i64_16 = arith.constant 4 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c4_i64_16 : i64
    %50 = llvm.getelementptr %5[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_15, %50 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb8
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_17 = arith.constant 8 : i64
    %53 = arith.extui %51 : i32 to i64
    %54 = arith.addi %53, %c8_i64_17 : i64
    %55 = llvm.getelementptr %5[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i32, !llvm.ptr
    %56 = llvm.load %0 : !llvm.ptr -> i32
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_18 = arith.constant 4 : i64
    %58 = arith.extui %56 : i32 to i64
    %59 = arith.addi %58, %c4_i64_18 : i64
    %60 = llvm.getelementptr %5[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %57, %60 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %1 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f112(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f113(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f73(%arg0, %17, %18, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f114(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c4_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %16 = call @f191(%arg0, %9, %14, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f115(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %3 : !llvm.ptr -> i32
    %7 = arith.cmpi eq, %5, %6 : i32
    %8 = arith.extui %7 : i1 to i32
    %c0_i32 = arith.constant 0 : i32
    %9 = arith.cmpi ne, %8, %c0_i32 : i32
    cf.cond_br %9, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %11 = llvm.load %2 : !llvm.ptr -> i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %13 = call @f202(%arg0, %10, %11, %12) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %16 = llvm.load %4 : !llvm.ptr -> i32
    call @f193(%arg0, %14, %15, %16) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f116(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c4854689474455388916_i64 = arith.constant 4854689474455388916 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4854689474455388916_i64, %8 {alignment = 1 : i64} : i64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c-1846477596472271460_i64 = arith.constant -1846477596472271460 : i64
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-1846477596472271460_i64, %12 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f117(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c7199936582794304877_i64 = arith.constant 7199936582794304877 : i64
    %c8_i64 = arith.constant 8 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c8_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c7199936582794304877_i64, %8 {alignment = 1 : i64} : i64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c-5076933981314334344_i64 = arith.constant -5076933981314334344 : i64
    %c0_i64 = arith.constant 0 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c0_i64 : i64
    %12 = llvm.getelementptr %4[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-5076933981314334344_i64, %12 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f118(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %3 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %15 = arith.addi %13, %14 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = arith.cmpi uge, %15, %16 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_5 : i32
    cf.cond_br %19, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32_6 = arith.constant 1 : i32
    llvm.store %c1_i32_6, %4 : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64 : i64
    %23 = llvm.getelementptr %10[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %5 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %25 = arith.cmpi ule, %c1_i32_7, %c31_i32 : i32
    %26 = scf.if %25 -> (i32) {
      %104 = arith.shli %24, %c1_i32_7 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_25 = arith.constant 0 : i32
      scf.yield %c0_i32_25 : i32
    }
    llvm.store %26, %1 : i32, !llvm.ptr
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_8 : i32
    %33 = arith.select %32, %26, %27 : i32
    llvm.store %33, %1 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_9 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_10 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32 : i32
    %c31_i32_11 = arith.constant 31 : i32
    %c31_i32_12 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_11, %c31_i32_12 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_11 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_25 = arith.constant 0 : i32
      scf.yield %c0_i32_25 : i32
    }
    llvm.store %41, %2 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_13 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_14 = arith.constant 0 : i32
    %c0_i32_15 = arith.constant 0 : i32
    call @f147(%arg0, %c0_i32_14, %c0_i32_15) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %45 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_16 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_16 : i32
    %51 = llvm.load %2 : !llvm.ptr -> i32
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f126(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_17 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_18 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %4 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_20 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_21 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_21 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_22 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_22 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_23 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_23 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_24 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_24) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f119(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1050352_i32 = arith.constant 1050352 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f164(%arg0, %2, %c1050352_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f120(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f73(%arg0, %17, %18, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f121(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %10 = arith.ori %9, %c-2147483648_i32 : i32
    %c-2147483648_i32_1 = arith.constant -2147483648 : i32
    %11 = arith.cmpi eq, %10, %c-2147483648_i32_1 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_2 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c4_i64 : i64
    %17 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f73(%arg0, %18, %19, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f122(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32, %8 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f123(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %12 = arith.cmpi ult, %11, %c128_i32 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb6, ^bb7
  ^bb2(%15: i32):  // pred: ^bb3
    return %15 : i32
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %16 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %17 = arith.addi %16, %c16_i32_4 : i32
    llvm.store %17, %5 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c8_i64 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    %28 = arith.subi %22, %27 : i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %30 = arith.cmpi uge, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_6 : i32
    cf.cond_br %32, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %33 = llvm.load %2 : !llvm.ptr -> i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %35 = arith.andi %34, %c63_i32 : i32
    %c128_i32_7 = arith.constant 128 : i32
    %36 = arith.ori %35, %c128_i32_7 : i32
    %c13_i64 = arith.constant 13 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c13_i64 : i64
    %39 = llvm.getelementptr %8[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = arith.trunci %36 : i32 to i8
    llvm.store volatile %40, %39 {alignment = 1 : i64} : i8, !llvm.ptr
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32 = arith.constant 31 : i32
    %43 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %44 = scf.if %43 -> (i32) {
      %187 = arith.shrui %42, %c6_i32 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c192_i32 = arith.constant 192 : i32
    %45 = arith.ori %44, %c192_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %46 = arith.extui %41 : i32 to i64
    %47 = arith.addi %46, %c12_i64 : i64
    %48 = llvm.getelementptr %8[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = arith.trunci %45 : i32 to i8
    llvm.store volatile %49, %48 {alignment = 1 : i64} : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %50 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_8 = arith.constant 8 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c8_i64_8 : i64
    %53 = llvm.getelementptr %8[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = llvm.load volatile %53 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %54, %3 : i32, !llvm.ptr
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c0_i64_9 : i64
    %58 = llvm.getelementptr %8[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %60 = arith.cmpi eq, %54, %59 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %62 = arith.cmpi eq, %61, %c0_i32_10 : i32
    %63 = arith.extui %62 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_11 : i32
    cf.cond_br %64, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %c12_i64_13 = arith.constant 12 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c12_i64_13 : i64
    %68 = llvm.getelementptr %8[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_12, %68 {alignment = 1 : i64} : i32, !llvm.ptr
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %70 = arith.cmpi ult, %69, %c2048_i32 : i32
    %71 = arith.extui %70 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_14 : i32
    cf.cond_br %72, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %73 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %74 = arith.cmpi uge, %73, %c65536_i32 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_15 : i32
    cf.cond_br %76, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %78 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_16 = arith.constant 63 : i32
    %79 = arith.andi %78, %c63_i32_16 : i32
    %c128_i32_17 = arith.constant 128 : i32
    %80 = arith.ori %79, %c128_i32_17 : i32
    %c15_i64 = arith.constant 15 : i64
    %81 = arith.extui %77 : i32 to i64
    %82 = arith.addi %81, %c15_i64 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = arith.trunci %80 : i32 to i8
    llvm.store volatile %84, %83 {alignment = 1 : i64} : i8, !llvm.ptr
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %86 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_18 = arith.constant 6 : i32
    %c31_i32_19 = arith.constant 31 : i32
    %87 = arith.cmpi ule, %c6_i32_18, %c31_i32_19 : i32
    %88 = scf.if %87 -> (i32) {
      %187 = arith.shrui %86, %c6_i32_18 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c63_i32_20 = arith.constant 63 : i32
    %89 = arith.andi %88, %c63_i32_20 : i32
    %c128_i32_21 = arith.constant 128 : i32
    %90 = arith.ori %89, %c128_i32_21 : i32
    %c14_i64 = arith.constant 14 : i64
    %91 = arith.extui %85 : i32 to i64
    %92 = arith.addi %91, %c14_i64 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = arith.trunci %90 : i32 to i8
    llvm.store volatile %94, %93 {alignment = 1 : i64} : i8, !llvm.ptr
    %95 = llvm.load %2 : !llvm.ptr -> i32
    %96 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_22 = arith.constant 31 : i32
    %97 = arith.cmpi ule, %c12_i32, %c31_i32_22 : i32
    %98 = scf.if %97 -> (i32) {
      %187 = arith.shrui %96, %c12_i32 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c63_i32_23 = arith.constant 63 : i32
    %99 = arith.andi %98, %c63_i32_23 : i32
    %c128_i32_24 = arith.constant 128 : i32
    %100 = arith.ori %99, %c128_i32_24 : i32
    %c13_i64_25 = arith.constant 13 : i64
    %101 = arith.extui %95 : i32 to i64
    %102 = arith.addi %101, %c13_i64_25 : i64
    %103 = llvm.getelementptr %8[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = arith.trunci %100 : i32 to i8
    llvm.store volatile %104, %103 {alignment = 1 : i64} : i8, !llvm.ptr
    %105 = llvm.load %2 : !llvm.ptr -> i32
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_26 = arith.constant 31 : i32
    %107 = arith.cmpi ule, %c18_i32, %c31_i32_26 : i32
    %108 = scf.if %107 -> (i32) {
      %187 = arith.shrui %106, %c18_i32 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c7_i32 = arith.constant 7 : i32
    %109 = arith.andi %108, %c7_i32 : i32
    %c240_i32 = arith.constant 240 : i32
    %110 = arith.ori %109, %c240_i32 : i32
    %c12_i64_27 = arith.constant 12 : i64
    %111 = arith.extui %105 : i32 to i64
    %112 = arith.addi %111, %c12_i64_27 : i64
    %113 = llvm.getelementptr %8[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = arith.trunci %110 : i32 to i8
    llvm.store volatile %114, %113 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_28 = arith.constant 63 : i32
    %117 = arith.andi %116, %c63_i32_28 : i32
    %c128_i32_29 = arith.constant 128 : i32
    %118 = arith.ori %117, %c128_i32_29 : i32
    %c14_i64_30 = arith.constant 14 : i64
    %119 = arith.extui %115 : i32 to i64
    %120 = arith.addi %119, %c14_i64_30 : i64
    %121 = llvm.getelementptr %8[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = arith.trunci %118 : i32 to i8
    llvm.store volatile %122, %121 {alignment = 1 : i64} : i8, !llvm.ptr
    %123 = llvm.load %2 : !llvm.ptr -> i32
    %124 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_31 = arith.constant 12 : i32
    %c31_i32_32 = arith.constant 31 : i32
    %125 = arith.cmpi ule, %c12_i32_31, %c31_i32_32 : i32
    %126 = scf.if %125 -> (i32) {
      %187 = arith.shrui %124, %c12_i32_31 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c224_i32 = arith.constant 224 : i32
    %127 = arith.ori %126, %c224_i32 : i32
    %c12_i64_33 = arith.constant 12 : i64
    %128 = arith.extui %123 : i32 to i64
    %129 = arith.addi %128, %c12_i64_33 : i64
    %130 = llvm.getelementptr %8[%129] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %131 = arith.trunci %127 : i32 to i8
    llvm.store volatile %131, %130 {alignment = 1 : i64} : i8, !llvm.ptr
    %132 = llvm.load %2 : !llvm.ptr -> i32
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_34 = arith.constant 6 : i32
    %c31_i32_35 = arith.constant 31 : i32
    %134 = arith.cmpi ule, %c6_i32_34, %c31_i32_35 : i32
    %135 = scf.if %134 -> (i32) {
      %187 = arith.shrui %133, %c6_i32_34 : i32
      scf.yield %187 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    %c63_i32_36 = arith.constant 63 : i32
    %136 = arith.andi %135, %c63_i32_36 : i32
    %c128_i32_37 = arith.constant 128 : i32
    %137 = arith.ori %136, %c128_i32_37 : i32
    %c13_i64_38 = arith.constant 13 : i64
    %138 = arith.extui %132 : i32 to i64
    %139 = arith.addi %138, %c13_i64_38 : i64
    %140 = llvm.getelementptr %8[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = arith.trunci %137 : i32 to i8
    llvm.store volatile %141, %140 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %142 = llvm.load %0 : !llvm.ptr -> i32
    %143 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_39 = arith.constant 1 : i32
    %144 = arith.addi %143, %c1_i32_39 : i32
    %c8_i64_40 = arith.constant 8 : i64
    %145 = arith.extui %142 : i32 to i64
    %146 = arith.addi %145, %c8_i64_40 : i64
    %147 = llvm.getelementptr %8[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %144, %147 {alignment = 1 : i64} : i32, !llvm.ptr
    %148 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c4_i64 : i64
    %151 = llvm.getelementptr %8[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    %153 = llvm.load %3 : !llvm.ptr -> i32
    %154 = arith.addi %152, %153 : i32
    %155 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_41 = arith.constant 0 : i64
    %156 = arith.extui %154 : i32 to i64
    %157 = arith.addi %156, %c0_i64_41 : i64
    %158 = llvm.getelementptr %8[%157] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %159 = arith.trunci %155 : i32 to i8
    llvm.store volatile %159, %158 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %160 = llvm.load %0 : !llvm.ptr -> i32
    call @f124(%arg0, %160) : (!llvm.ptr, i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %161 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_42 = arith.constant 4 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c4_i64_42 : i64
    %164 = llvm.getelementptr %8[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    %166 = llvm.load %3 : !llvm.ptr -> i32
    %167 = arith.addi %165, %166 : i32
    %168 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_43 = arith.constant 12 : i32
    %169 = arith.addi %168, %c12_i32_43 : i32
    %170 = llvm.load %1 : !llvm.ptr -> i32
    %171 = call @f202(%arg0, %167, %169, %170) : (!llvm.ptr, i32, i32, i32) -> i32
    %172 = llvm.load %0 : !llvm.ptr -> i32
    %173 = llvm.load %3 : !llvm.ptr -> i32
    %174 = llvm.load %1 : !llvm.ptr -> i32
    %175 = arith.addi %173, %174 : i32
    %c8_i64_44 = arith.constant 8 : i64
    %176 = arith.extui %172 : i32 to i64
    %177 = arith.addi %176, %c8_i64_44 : i64
    %178 = llvm.getelementptr %8[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %175, %178 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %179 = llvm.load %0 : !llvm.ptr -> i32
    %180 = llvm.load %3 : !llvm.ptr -> i32
    %181 = llvm.load %1 : !llvm.ptr -> i32
    call @f118(%arg0, %179, %180, %181) : (!llvm.ptr, i32, i32, i32) -> ()
    %182 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_45 = arith.constant 8 : i64
    %183 = arith.extui %182 : i32 to i64
    %184 = arith.addi %183, %c8_i64_45 : i64
    %185 = llvm.getelementptr %8[%184] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %186 = llvm.load volatile %185 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %186, %3 : i32, !llvm.ptr
    cf.br ^bb13
  }
  func.func @f124(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %1 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %17, %2 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %18 = arith.cmpi eq, %17, %c-1_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_5 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_6 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    llvm.store %c1_i32_7, %3 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_8 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %24 = arith.cmpi ule, %c1_i32_8, %c31_i32 : i32
    %25 = scf.if %24 -> (i32) {
      %104 = arith.shli %23, %c1_i32_8 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    llvm.store %25, %4 : i32, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    %27 = arith.addi %26, %c1_i32_9 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = llvm.load %5 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_10 : i32
    %33 = arith.select %32, %25, %27 : i32
    llvm.store %33, %4 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_11 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_11 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_12 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %4 : i32, !llvm.ptr
    %c-1_i32_13 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32_13 : i32
    %c31_i32_14 = arith.constant 31 : i32
    %c31_i32_15 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_14, %c31_i32_15 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_14 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    llvm.store %41, %5 : i32, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_16 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_17 = arith.constant 0 : i32
    %c0_i32_18 = arith.constant 0 : i32
    call @f147(%arg0, %c0_i32_17, %c0_i32_18) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_19 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_19 : i32
    %51 = llvm.load %5 : !llvm.ptr -> i32
    %52 = llvm.load %4 : !llvm.ptr -> i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f126(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_20 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_21 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_23 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_23 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_24 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_24 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_25 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_25 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_26 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_26 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_27 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_27) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f125(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = arith.subi %11, %16 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_3 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = call @f202(%arg0, %29, %30, %31) : (!llvm.ptr, i32, i32, i32) -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = arith.addi %34, %35 : i32
    %c8_i64_4 = arith.constant 8 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c8_i64_4 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // pred: ^bb1
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    call @f118(%arg0, %40, %41, %42) : (!llvm.ptr, i32, i32, i32) -> ()
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_6 = arith.constant 8 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c8_i64_6 : i64
    %46 = llvm.getelementptr %6[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %47, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f126(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_4 = arith.constant 0 : i32
    %9 = arith.cmpi eq, %8, %c0_i32_4 : i32
    %10 = arith.extui %9 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %11 = arith.cmpi ne, %10, %c0_i32_5 : i32
    cf.cond_br %11, ^bb5, ^bb6
  ^bb2:  // 2 preds: ^bb3, ^bb19
    return
  ^bb3:  // 3 preds: ^bb4, ^bb5, ^bb18
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_6 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %7[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_6, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb6
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_7 = arith.constant 0 : i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %7[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_7, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %c4_i64_9 = arith.constant 4 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c4_i64_9 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_8, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb1
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %25 = arith.cmpi sle, %24, %c-1_i32 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_10 : i32
    cf.cond_br %27, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_11 = arith.constant 4 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c4_i64_11 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %33 = arith.cmpi eq, %32, %c0_i32_12 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_13 : i32
    cf.cond_br %35, ^bb10, ^bb11
  ^bb8:  // 4 preds: ^bb9, ^bb12, ^bb15, ^bb17
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %37 = arith.cmpi eq, %36, %c0_i32_14 : i32
    %38 = arith.extui %37 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %39 = arith.cmpi ne, %38, %c0_i32_15 : i32
    cf.cond_br %39, ^bb18, ^bb19
  ^bb9:  // 2 preds: ^bb14, ^bb16
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %42 = call @f72(%arg0, %40, %41) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %42, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb10:  // pred: ^bb7
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_16 : i32
    cf.cond_br %44, ^bb16, ^bb17
  ^bb11:  // pred: ^bb7
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c8_i64 : i64
    %48 = llvm.getelementptr %7[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %49, %4 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_17 : i32
    cf.cond_br %50, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %51 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c0_i64_18 : i64
    %54 = llvm.getelementptr %7[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %56 = llvm.load %4 : !llvm.ptr -> i32
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %2 : !llvm.ptr -> i32
    %59 = call @f74(%arg0, %55, %56, %57, %58) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %59, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb13:  // pred: ^bb11
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_19 = arith.constant 0 : i32
    %61 = arith.cmpi ne, %60, %c0_i32_19 : i32
    cf.cond_br %61, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %c0_i32_20 = arith.constant 0 : i32
    %c1054681_i64 = arith.constant 1054681 : i64
    %62 = arith.extui %c0_i32_20 : i32 to i64
    %63 = arith.addi %62, %c1054681_i64 : i64
    %64 = llvm.getelementptr %7[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i8
    %66 = arith.extui %65 : i8 to i32
    cf.br ^bb9
  ^bb15:  // pred: ^bb13
    %67 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %67, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb16:  // pred: ^bb10
    %c0_i32_21 = arith.constant 0 : i32
    %c1054681_i64_22 = arith.constant 1054681 : i64
    %68 = arith.extui %c0_i32_21 : i32 to i64
    %69 = arith.addi %68, %c1054681_i64_22 : i64
    %70 = llvm.getelementptr %7[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i8
    %72 = arith.extui %71 : i8 to i32
    cf.br ^bb9
  ^bb17:  // pred: ^bb10
    %73 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %73, %3 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb18:  // pred: ^bb8
    %74 = llvm.load %0 : !llvm.ptr -> i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_23 = arith.constant 8 : i64
    %76 = arith.extui %74 : i32 to i64
    %77 = arith.addi %76, %c8_i64_23 : i64
    %78 = llvm.getelementptr %7[%77] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %75, %78 {alignment = 1 : i64} : i32, !llvm.ptr
    %79 = llvm.load %0 : !llvm.ptr -> i32
    %80 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_24 = arith.constant 4 : i64
    %81 = arith.extui %79 : i32 to i64
    %82 = arith.addi %81, %c4_i64_24 : i64
    %83 = llvm.getelementptr %7[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %80, %83 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb19:  // pred: ^bb8
    %84 = llvm.load %0 : !llvm.ptr -> i32
    %85 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_25 = arith.constant 8 : i64
    %86 = arith.extui %84 : i32 to i64
    %87 = arith.addi %86, %c8_i64_25 : i64
    %88 = llvm.getelementptr %7[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %89 = llvm.load %0 : !llvm.ptr -> i32
    %90 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_26 = arith.constant 4 : i64
    %91 = arith.extui %89 : i32 to i64
    %92 = arith.addi %91, %c4_i64_26 : i64
    %93 = llvm.getelementptr %7[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %90, %93 {alignment = 1 : i64} : i32, !llvm.ptr
    %94 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_27 = arith.constant 0 : i32
    %c0_i64_28 = arith.constant 0 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c0_i64_28 : i64
    %97 = llvm.getelementptr %7[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_27, %97 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f127(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f128(%arg0, %1) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f128(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %1 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c12_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %8[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load volatile %19 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %20 : i32, [
      default: ^bb4,
      0: ^bb6,
      1: ^bb5
    ]
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb7, ^bb8
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_3 = arith.constant 4 : i64
    %23 = arith.extui %21 : i32 to i64
    %24 = arith.addi %23, %c4_i64_3 : i64
    %25 = llvm.getelementptr %8[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %28 = arith.extui %26 : i32 to i64
    %29 = arith.addi %28, %c0_i64 : i64
    %30 = llvm.getelementptr %8[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %27, %30 {alignment = 1 : i64} : i32, !llvm.ptr
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %c1050500_i32 = arith.constant 1050500 : i32
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c24_i64 : i64
    %35 = llvm.getelementptr %8[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c28_i64 : i64
    %40 = llvm.getelementptr %8[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %41 = llvm.load volatile %40 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %41, %0 : i32, !llvm.ptr
    %c28_i64_4 = arith.constant 28 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c28_i64_4 : i64
    %44 = llvm.getelementptr %8[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i8
    %46 = arith.extui %45 : i8 to i32
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %c29_i64 = arith.constant 29 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c29_i64 : i64
    %50 = llvm.getelementptr %8[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i8
    %52 = arith.extui %51 : i8 to i32
    call @f138(%arg0, %31, %c1050500_i32, %36, %46, %52) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // 3 preds: ^bb1, ^bb5, ^bb6
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_5 : i64
    %56 = llvm.getelementptr %8[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c-2147483648_i32, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_6 = arith.constant 12 : i64
    %59 = arith.extui %57 : i32 to i64
    %60 = arith.addi %59, %c12_i64_6 : i64
    %61 = llvm.getelementptr %8[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %62 = llvm.load %1 : !llvm.ptr -> i32
    %c1050528_i32 = arith.constant 1050528 : i32
    %63 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_7 = arith.constant 24 : i64
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.addi %64, %c24_i64_7 : i64
    %66 = llvm.getelementptr %8[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %67 = llvm.load volatile %66 {alignment = 1 : i64} : !llvm.ptr -> i32
    %68 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_8 = arith.constant 28 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c28_i64_8 : i64
    %71 = llvm.getelementptr %8[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %72, %0 : i32, !llvm.ptr
    %c28_i64_9 = arith.constant 28 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c28_i64_9 : i64
    %75 = llvm.getelementptr %8[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i8
    %77 = arith.extui %76 : i8 to i32
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %c29_i64_10 = arith.constant 29 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c29_i64_10 : i64
    %81 = llvm.getelementptr %8[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i8
    %83 = arith.extui %82 : i8 to i32
    call @f138(%arg0, %62, %c1050528_i32, %67, %77, %83) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32_11 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_11) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %85 = arith.cmpi ne, %84, %c0_i32_12 : i32
    cf.cond_br %85, ^bb4, ^bb8
  ^bb6:  // pred: ^bb1
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %87 = arith.cmpi ne, %86, %c0_i32_13 : i32
    cf.cond_br %87, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %c1_i32_14 = arith.constant 1 : i32
    llvm.store %c1_i32_14, %2 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    llvm.store %c0_i32_15, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb8:  // pred: ^bb5
    %88 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %89 = arith.extui %88 : i32 to i64
    %90 = arith.addi %89, %c0_i64_16 : i64
    %91 = llvm.getelementptr %8[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = llvm.load volatile %91 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %92, %2 : i32, !llvm.ptr
    %c4_i64_17 = arith.constant 4 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c4_i64_17 : i64
    %95 = llvm.getelementptr %8[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %96, %3 : i32, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c0_i64_18 : i64
    %100 = llvm.getelementptr %8[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %101, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f129(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %9 = arith.subi %8, %c48_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %c0_i32_2 = arith.constant 0 : i32
    %c1054680_i64 = arith.constant 1054680 : i64
    %10 = arith.extui %c0_i32_2 : i32 to i64
    %11 = arith.addi %10, %c1054680_i64 : i64
    %12 = llvm.getelementptr %7[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %13 = llvm.load volatile %12 {alignment = 1 : i64} : !llvm.ptr -> i8
    %14 = arith.extui %13 : i8 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_3 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    cf.cond_br %17, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb1
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_5 = arith.constant 48 : i32
    %19 = arith.addi %18, %c48_i32_5 : i32
    llvm.store %19, %4 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c12_i64 : i64
    %23 = llvm.getelementptr %7[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %23 {alignment = 1 : i64} : i32, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c1050412_i32 = arith.constant 1050412 : i32
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050412_i32, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c20_i64 = arith.constant 20 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c20_i64 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %34 = arith.extui %32 : i32 to i64
    %35 = arith.addi %34, %c44_i64 : i64
    %36 = llvm.getelementptr %7[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %c51_i32 = arith.constant 51 : i32
    %38 = arith.extui %c51_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %39 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %40 = scf.if %39 -> (i64) {
      %56 = arith.shli %38, %c32_i64 : i64
      scf.yield %56 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %41 = llvm.load %2 : !llvm.ptr -> i32
    %c44_i32 = arith.constant 44 : i32
    %42 = arith.addi %41, %c44_i32 : i32
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.ori %40, %43 : i64
    %c32_i64_6 = arith.constant 32 : i64
    %45 = arith.extui %37 : i32 to i64
    %46 = arith.addi %45, %c32_i64_6 : i64
    %47 = llvm.getelementptr %7[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i64, !llvm.ptr
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %50 = arith.addi %49, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %51 = arith.extui %48 : i32 to i64
    %52 = arith.addi %51, %c16_i64 : i64
    %53 = llvm.getelementptr %7[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %50, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %55 = arith.addi %54, %c8_i32 : i32
    %c1050452_i32 = arith.constant 1050452 : i32
    call @f156(%arg0, %55, %c1050452_i32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f130(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %1 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c24_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %14, %2 : i32, !llvm.ptr
    %15 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %16 = arith.addi %15, %c16_i32 : i32
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_2 = arith.constant 16 : i32
    %18 = arith.addi %17, %c16_i32_2 : i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %7[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_3 = arith.constant 0 : i64
    %23 = arith.extui %16 : i32 to i64
    %24 = arith.addi %23, %c0_i64_3 : i64
    %25 = llvm.getelementptr %7[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i64, !llvm.ptr
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %27 = arith.addi %26, %c8_i32 : i32
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_4 = arith.constant 8 : i32
    %29 = arith.addi %28, %c8_i32_4 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c0_i64_5 : i64
    %32 = llvm.getelementptr %7[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %34 = arith.extui %27 : i32 to i64
    %35 = arith.addi %34, %c0_i64_6 : i64
    %36 = llvm.getelementptr %7[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i64, !llvm.ptr
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %39 = arith.extui %37 : i32 to i64
    %40 = arith.addi %39, %c28_i64 : i64
    %41 = llvm.getelementptr %7[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %38, %41 {alignment = 1 : i64} : i32, !llvm.ptr
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %43 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_7 = arith.constant 24 : i64
    %44 = arith.extui %42 : i32 to i64
    %45 = arith.addi %44, %c24_i64_7 : i64
    %46 = llvm.getelementptr %7[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %43, %46 {alignment = 1 : i64} : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c0_i64_8 : i64
    %51 = llvm.getelementptr %7[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_9 = arith.constant 0 : i64
    %53 = arith.extui %47 : i32 to i64
    %54 = arith.addi %53, %c0_i64_9 : i64
    %55 = llvm.getelementptr %7[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %1 : !llvm.ptr -> i32
    call @f127(%arg0, %56) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f131(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %12 = arith.subi %11, %c64_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %18 = arith.cmpi eq, %17, %c-2147483648_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb6
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64_8 : i64
    %26 = llvm.getelementptr %10[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %27, %5 : i64, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c0_i64_9 = arith.constant 0 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c0_i64_9 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %33 = arith.addi %32, %c8_i32 : i32
    llvm.store %33, %3 : i32, !llvm.ptr
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_10 = arith.constant 8 : i32
    %35 = arith.addi %34, %c8_i32_10 : i32
    llvm.store %35, %1 : i32, !llvm.ptr
    %c0_i64_11 = arith.constant 0 : i64
    %36 = arith.extui %35 : i32 to i64
    %37 = arith.addi %36, %c0_i64_11 : i64
    %38 = llvm.getelementptr %10[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = llvm.load volatile %38 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %40 = arith.extui %33 : i32 to i64
    %41 = arith.addi %40, %c0_i64_12 : i64
    %42 = llvm.getelementptr %10[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %39, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_14 : i64
    %46 = llvm.getelementptr %10[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %46 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %c1054681_i64 = arith.constant 1054681 : i64
    %47 = arith.extui %c0_i32_15 : i32 to i64
    %48 = arith.addi %47, %c1054681_i64 : i64
    %49 = llvm.getelementptr %10[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = llvm.load volatile %49 {alignment = 1 : i64} : !llvm.ptr -> i8
    %51 = arith.extui %50 : i8 to i32
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_16 = arith.constant 0 : i64
    %54 = arith.extui %52 : i32 to i64
    %55 = arith.addi %54, %c0_i64_16 : i64
    %56 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i64, !llvm.ptr
    %c12_i32 = arith.constant 12 : i32
    %c4_i32 = arith.constant 4 : i32
    %57 = call @f72(%arg0, %c12_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %57, %1 : i32, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %58 = arith.cmpi eq, %57, %c0_i32_17 : i32
    %59 = arith.extui %58 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_18 : i32
    cf.cond_br %60, ^bb5, ^bb6
  ^bb4:  // pred: ^bb1
    %61 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c12_i64 : i64
    %64 = llvm.getelementptr %10[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %65, %3 : i32, !llvm.ptr
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %67 = arith.addi %66, %c28_i32 : i32
    %c8_i32_19 = arith.constant 8 : i32
    %68 = arith.addi %67, %c8_i32_19 : i32
    llvm.store %68, %4 : i32, !llvm.ptr
    %c0_i32_20 = arith.constant 0 : i32
    %c0_i64_21 = arith.constant 0 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c0_i64_21 : i64
    %71 = llvm.getelementptr %10[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_20, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64_22 = arith.constant 4294967296 : i64
    %c28_i64 = arith.constant 28 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c28_i64 : i64
    %75 = llvm.getelementptr %10[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64_22, %75 {alignment = 1 : i64} : i64, !llvm.ptr
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %77 = arith.addi %76, %c40_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %78 = arith.addi %77, %c16_i32 : i32
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_23 = arith.constant 16 : i32
    %80 = arith.addi %79, %c16_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c0_i64_24 : i64
    %83 = llvm.getelementptr %10[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = llvm.load volatile %83 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_25 = arith.constant 0 : i64
    %85 = arith.extui %78 : i32 to i64
    %86 = arith.addi %85, %c0_i64_25 : i64
    %87 = llvm.getelementptr %10[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %84, %87 {alignment = 1 : i64} : i64, !llvm.ptr
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_26 = arith.constant 40 : i32
    %89 = arith.addi %88, %c40_i32_26 : i32
    %c8_i32_27 = arith.constant 8 : i32
    %90 = arith.addi %89, %c8_i32_27 : i32
    %91 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_28 = arith.constant 8 : i32
    %92 = arith.addi %91, %c8_i32_28 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c0_i64_29 : i64
    %95 = llvm.getelementptr %10[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_30 = arith.constant 0 : i64
    %97 = arith.extui %90 : i32 to i64
    %98 = arith.addi %97, %c0_i64_30 : i64
    %99 = llvm.getelementptr %10[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %96, %99 {alignment = 1 : i64} : i64, !llvm.ptr
    %100 = llvm.load %2 : !llvm.ptr -> i32
    %101 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %102 = arith.extui %101 : i32 to i64
    %103 = arith.addi %102, %c0_i64_31 : i64
    %104 = llvm.getelementptr %10[%103] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %105 = llvm.load volatile %104 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c40_i64 = arith.constant 40 : i64
    %106 = arith.extui %100 : i32 to i64
    %107 = arith.addi %106, %c40_i64 : i64
    %108 = llvm.getelementptr %10[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %108 {alignment = 1 : i64} : i64, !llvm.ptr
    %109 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i32_32 = arith.constant 28 : i32
    %110 = arith.addi %109, %c28_i32_32 : i32
    %c1050352_i32 = arith.constant 1050352 : i32
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i32_33 = arith.constant 40 : i32
    %112 = arith.addi %111, %c40_i32_33 : i32
    %113 = call @f164(%arg0, %110, %c1050352_i32, %112) : (!llvm.ptr, i32, i32, i32) -> i32
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_34 = arith.constant 16 : i32
    %115 = arith.addi %114, %c16_i32_34 : i32
    %c8_i32_35 = arith.constant 8 : i32
    %116 = arith.addi %115, %c8_i32_35 : i32
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_36 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_36 : i64
    %120 = llvm.getelementptr %10[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %121, %3 : i32, !llvm.ptr
    %c0_i64_37 = arith.constant 0 : i64
    %122 = arith.extui %116 : i32 to i64
    %123 = arith.addi %122, %c0_i64_37 : i64
    %124 = llvm.getelementptr %10[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %121, %124 {alignment = 1 : i64} : i32, !llvm.ptr
    %125 = llvm.load %2 : !llvm.ptr -> i32
    %126 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64_38 = arith.constant 28 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c28_i64_38 : i64
    %129 = llvm.getelementptr %10[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %130, %5 : i64, !llvm.ptr
    %c16_i64 = arith.constant 16 : i64
    %131 = arith.extui %125 : i32 to i64
    %132 = arith.addi %131, %c16_i64 : i64
    %133 = llvm.getelementptr %10[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %130, %133 {alignment = 1 : i64} : i64, !llvm.ptr
    %134 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_39 = arith.constant 8 : i32
    %135 = arith.addi %134, %c8_i32_39 : i32
    %136 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %137 = arith.extui %135 : i32 to i64
    %138 = arith.addi %137, %c0_i64_40 : i64
    %139 = llvm.getelementptr %10[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %139 {alignment = 1 : i64} : i32, !llvm.ptr
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %141 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_41 = arith.constant 0 : i64
    %142 = arith.extui %140 : i32 to i64
    %143 = arith.addi %142, %c0_i64_41 : i64
    %144 = llvm.getelementptr %10[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %141, %144 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb3
    %c4_i32_42 = arith.constant 4 : i32
    %c12_i32_43 = arith.constant 12 : i32
    call @f150(%arg0, %c4_i32_42, %c12_i32_43) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb6:  // pred: ^bb3
    %145 = llvm.load %1 : !llvm.ptr -> i32
    %146 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %147 = arith.extui %146 : i32 to i64
    %148 = arith.addi %147, %c0_i64_44 : i64
    %149 = llvm.getelementptr %10[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %150 = llvm.load volatile %149 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_45 = arith.constant 0 : i64
    %151 = arith.extui %145 : i32 to i64
    %152 = arith.addi %151, %c0_i64_45 : i64
    %153 = llvm.getelementptr %10[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %150, %153 {alignment = 1 : i64} : i64, !llvm.ptr
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_46 = arith.constant 8 : i32
    %155 = arith.addi %154, %c8_i32_46 : i32
    %156 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c0_i64_47 : i64
    %159 = llvm.getelementptr %10[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_48 = arith.constant 0 : i64
    %161 = arith.extui %155 : i32 to i64
    %162 = arith.addi %161, %c0_i64_48 : i64
    %163 = llvm.getelementptr %10[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %160, %163 {alignment = 1 : i64} : i32, !llvm.ptr
    %164 = llvm.load %0 : !llvm.ptr -> i32
    %c1050468_i32 = arith.constant 1050468 : i32
    %c4_i64 = arith.constant 4 : i64
    %165 = arith.extui %164 : i32 to i64
    %166 = arith.addi %165, %c4_i64 : i64
    %167 = llvm.getelementptr %10[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050468_i32, %167 {alignment = 1 : i64} : i32, !llvm.ptr
    %168 = llvm.load %0 : !llvm.ptr -> i32
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_49 = arith.constant 0 : i64
    %170 = arith.extui %168 : i32 to i64
    %171 = arith.addi %170, %c0_i64_49 : i64
    %172 = llvm.getelementptr %10[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %169, %172 {alignment = 1 : i64} : i32, !llvm.ptr
    %173 = llvm.load %2 : !llvm.ptr -> i32
    %c64_i32_50 = arith.constant 64 : i32
    %174 = arith.addi %173, %c64_i32_50 : i32
    llvm.store %174, %7 : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f132(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %12 = arith.subi %11, %c48_i32 : i32
    llvm.store %12, %2 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_5 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64_5 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %18 = arith.cmpi eq, %17, %c-2147483648_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_6 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_7 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c1050468_i32 = arith.constant 1050468 : i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %10[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050468_i32, %26 {alignment = 1 : i64} : i32, !llvm.ptr
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %29 = arith.extui %27 : i32 to i64
    %30 = arith.addi %29, %c0_i64_8 : i64
    %31 = llvm.getelementptr %10[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i32, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c48_i32_9 = arith.constant 48 : i32
    %33 = arith.addi %32, %c48_i32_9 : i32
    llvm.store %33, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c12_i64 : i64
    %37 = llvm.getelementptr %10[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %40 = arith.addi %39, %c12_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %41 = arith.addi %40, %c8_i32 : i32
    llvm.store %41, %4 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    %c0_i64_11 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64_11 : i64
    %44 = llvm.getelementptr %10[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_10, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    %45 = llvm.load %2 : !llvm.ptr -> i32
    %c4294967296_i64 = arith.constant 4294967296 : i64
    %c12_i64_12 = arith.constant 12 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c12_i64_12 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4294967296_i64, %48 {alignment = 1 : i64} : i64, !llvm.ptr
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %50 = arith.addi %49, %c24_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %51 = arith.addi %50, %c16_i32 : i32
    %52 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_13 = arith.constant 16 : i32
    %53 = arith.addi %52, %c16_i32_13 : i32
    %c0_i64_14 = arith.constant 0 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c0_i64_14 : i64
    %56 = llvm.getelementptr %10[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_15 = arith.constant 0 : i64
    %58 = arith.extui %51 : i32 to i64
    %59 = arith.addi %58, %c0_i64_15 : i64
    %60 = llvm.getelementptr %10[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %57, %60 {alignment = 1 : i64} : i64, !llvm.ptr
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_16 = arith.constant 24 : i32
    %62 = arith.addi %61, %c24_i32_16 : i32
    %c8_i32_17 = arith.constant 8 : i32
    %63 = arith.addi %62, %c8_i32_17 : i32
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_18 = arith.constant 8 : i32
    %65 = arith.addi %64, %c8_i32_18 : i32
    %c0_i64_19 = arith.constant 0 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c0_i64_19 : i64
    %68 = llvm.getelementptr %10[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_20 = arith.constant 0 : i64
    %70 = arith.extui %63 : i32 to i64
    %71 = arith.addi %70, %c0_i64_20 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i64, !llvm.ptr
    %73 = llvm.load %2 : !llvm.ptr -> i32
    %74 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_21 = arith.constant 0 : i64
    %75 = arith.extui %74 : i32 to i64
    %76 = arith.addi %75, %c0_i64_21 : i64
    %77 = llvm.getelementptr %10[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %78 = llvm.load volatile %77 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c24_i64 = arith.constant 24 : i64
    %79 = arith.extui %73 : i32 to i64
    %80 = arith.addi %79, %c24_i64 : i64
    %81 = llvm.getelementptr %10[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %78, %81 {alignment = 1 : i64} : i64, !llvm.ptr
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_22 = arith.constant 12 : i32
    %83 = arith.addi %82, %c12_i32_22 : i32
    %c1050352_i32 = arith.constant 1050352 : i32
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i32_23 = arith.constant 24 : i32
    %85 = arith.addi %84, %c24_i32_23 : i32
    %86 = call @f164(%arg0, %83, %c1050352_i32, %85) : (!llvm.ptr, i32, i32, i32) -> i32
    %87 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_24 = arith.constant 8 : i32
    %88 = arith.addi %87, %c8_i32_24 : i32
    %89 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c0_i64_25 : i64
    %92 = llvm.getelementptr %10[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %93, %3 : i32, !llvm.ptr
    %c0_i64_26 = arith.constant 0 : i64
    %94 = arith.extui %88 : i32 to i64
    %95 = arith.addi %94, %c0_i64_26 : i64
    %96 = llvm.getelementptr %10[%95] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %93, %96 {alignment = 1 : i64} : i32, !llvm.ptr
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_27 = arith.constant 12 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c12_i64_27 : i64
    %101 = llvm.getelementptr %10[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %102, %5 : i64, !llvm.ptr
    %c0_i64_28 = arith.constant 0 : i64
    %103 = arith.extui %97 : i32 to i64
    %104 = arith.addi %103, %c0_i64_28 : i64
    %105 = llvm.getelementptr %10[%104] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %102, %105 {alignment = 1 : i64} : i64, !llvm.ptr
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_29 = arith.constant 8 : i32
    %107 = arith.addi %106, %c8_i32_29 : i32
    %108 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_30 = arith.constant 0 : i64
    %109 = arith.extui %107 : i32 to i64
    %110 = arith.addi %109, %c0_i64_30 : i64
    %111 = llvm.getelementptr %10[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i32, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %113 = llvm.load %5 : !llvm.ptr -> i64
    %c0_i64_31 = arith.constant 0 : i64
    %114 = arith.extui %112 : i32 to i64
    %115 = arith.addi %114, %c0_i64_31 : i64
    %116 = llvm.getelementptr %10[%115] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %113, %116 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f133(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %10 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %14 = llvm.load volatile %13 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %15 = arith.cmpi eq, %14, %c-2147483648_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_2 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb3
    return %18 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_3 = arith.constant 32 : i32
    %20 = arith.addi %19, %c32_i32_3 : i32
    llvm.store %20, %4 : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%21 : i32)
  ^bb4:  // pred: ^bb1
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %23 = arith.addi %22, %c8_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %24 = arith.addi %23, %c16_i32 : i32
    %25 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c12_i64 : i64
    %28 = llvm.getelementptr %7[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %29, %0 : i32, !llvm.ptr
    %c16_i32_4 = arith.constant 16 : i32
    %30 = arith.addi %29, %c16_i32_4 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c0_i64_5 : i64
    %33 = llvm.getelementptr %7[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %35 = arith.extui %24 : i32 to i64
    %36 = arith.addi %35, %c0_i64_6 : i64
    %37 = llvm.getelementptr %7[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %34, %37 {alignment = 1 : i64} : i64, !llvm.ptr
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_7 = arith.constant 8 : i32
    %39 = arith.addi %38, %c8_i32_7 : i32
    %c8_i32_8 = arith.constant 8 : i32
    %40 = arith.addi %39, %c8_i32_8 : i32
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %42 = arith.addi %41, %c8_i32_9 : i32
    %c0_i64_10 = arith.constant 0 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c0_i64_10 : i64
    %45 = llvm.getelementptr %7[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_11 = arith.constant 0 : i64
    %47 = arith.extui %40 : i32 to i64
    %48 = arith.addi %47, %c0_i64_11 : i64
    %49 = llvm.getelementptr %7[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %46, %49 {alignment = 1 : i64} : i64, !llvm.ptr
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c0_i64_12 : i64
    %54 = llvm.getelementptr %7[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %50 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %7[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i64, !llvm.ptr
    %59 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %60 = arith.extui %59 : i32 to i64
    %61 = arith.addi %60, %c20_i64 : i64
    %62 = llvm.getelementptr %7[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = llvm.load volatile %62 {alignment = 1 : i64} : !llvm.ptr -> i32
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c24_i64 : i64
    %67 = llvm.getelementptr %7[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_13 = arith.constant 8 : i32
    %70 = arith.addi %69, %c8_i32_13 : i32
    %71 = call @f164(%arg0, %63, %68, %70) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %71, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c4_i64 : i64
    %76 = llvm.getelementptr %7[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i32
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_14 = arith.constant 8 : i64
    %79 = arith.extui %78 : i32 to i64
    %80 = arith.addi %79, %c8_i64_14 : i64
    %81 = llvm.getelementptr %7[%80] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %82 = llvm.load volatile %81 {alignment = 1 : i64} : !llvm.ptr -> i32
    %83 = call @f186(%arg0, %72, %77, %82) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %83, %0 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f134(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_3 = arith.constant 0 : i32
    %c1054681_i64 = arith.constant 1054681 : i64
    %7 = arith.extui %c0_i32_3 : i32 to i64
    %8 = arith.addi %7, %c1054681_i64 : i64
    %9 = llvm.getelementptr %6[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i8
    %11 = arith.extui %10 : i8 to i32
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c4_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %21, %3 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %c4_i32 = arith.constant 4 : i32
    %22 = call @f72(%arg0, %c8_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %22, %1 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %23 = arith.cmpi eq, %22, %c0_i32_4 : i32
    %24 = arith.extui %23 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_5 : i32
    cf.cond_br %25, ^bb3, ^bb4
  ^bb2:  // pred: ^bb4
    return
  ^bb3:  // pred: ^bb1
    %c4_i32_6 = arith.constant 4 : i32
    %c8_i32_7 = arith.constant 8 : i32
    call @f150(%arg0, %c4_i32_6, %c8_i32_7) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_8 = arith.constant 4 : i64
    %28 = arith.extui %26 : i32 to i64
    %29 = arith.addi %28, %c4_i64_8 : i64
    %30 = llvm.getelementptr %6[%29] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %27, %30 {alignment = 1 : i64} : i32, !llvm.ptr
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %32 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %33 = arith.extui %31 : i32 to i64
    %34 = arith.addi %33, %c0_i64_9 : i64
    %35 = llvm.getelementptr %6[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c1050484_i32 = arith.constant 1050484 : i32
    %c4_i64_10 = arith.constant 4 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c4_i64_10 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050484_i32, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %42 = arith.extui %40 : i32 to i64
    %43 = arith.addi %42, %c0_i64_11 : i64
    %44 = llvm.getelementptr %6[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  }
  func.func @f135(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c1050484_i32 = arith.constant 1050484 : i32
    %c4_i64 = arith.constant 4 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c4_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050484_i32, %8 {alignment = 1 : i64} : i32, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %11 = arith.extui %9 : i32 to i64
    %12 = arith.addi %11, %c0_i64 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f136(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_1 = arith.constant 0 : i64
    %11 = arith.extui %5 : i32 to i64
    %12 = arith.addi %11, %c0_i64_1 : i64
    %13 = llvm.getelementptr %4[%12] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %10, %13 {alignment = 1 : i64} : i64, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f137(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c4_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %16 = call @f186(%arg0, %5, %10, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f138(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    %19 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %20 = llvm.load %15 : !llvm.ptr -> i64
    %21 = arith.trunci %20 : i64 to i32
    %22 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %15 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %25 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %26 = arith.subi %25, %c32_i32 : i32
    llvm.store %26, %5 : i32, !llvm.ptr
    llvm.store %26, %8 : i32, !llvm.ptr
    %c0_i32_6 = arith.constant 0 : i32
    %c0_i32_7 = arith.constant 0 : i32
    %c1054796_i64 = arith.constant 1054796 : i64
    %27 = arith.extui %c0_i32_7 : i32 to i64
    %28 = arith.addi %27, %c1054796_i64 : i64
    %29 = llvm.getelementptr %11[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %30, %6 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %31 = arith.addi %30, %c1_i32_8 : i32
    %c1054796_i64_9 = arith.constant 1054796 : i64
    %32 = arith.extui %c0_i32_6 : i32 to i64
    %33 = arith.addi %32, %c1054796_i64_9 : i64
    %34 = llvm.getelementptr %11[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %31, %34 {alignment = 1 : i64} : i32, !llvm.ptr
    %35 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %36 = arith.cmpi slt, %35, %c0_i32_10 : i32
    %37 = arith.extui %36 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_11 : i32
    cf.cond_br %38, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 4 preds: ^bb1, ^bb6, ^bb8, ^bb33
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    %c0_i32_12 = arith.constant 0 : i32
    %c1054804_i64 = arith.constant 1054804 : i64
    %39 = arith.extui %c0_i32_12 : i32 to i64
    %40 = arith.addi %39, %c1054804_i64 : i64
    %41 = llvm.getelementptr %11[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %42 = llvm.load volatile %41 {alignment = 1 : i64} : !llvm.ptr -> i8
    %43 = arith.extui %42 : i8 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_13 : i32
    cf.cond_br %44, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %45 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %46 = arith.addi %45, %c8_i32 : i32
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c24_i64 : i64
    %51 = llvm.getelementptr %11[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    %53 = arith.cmpi ult, %52, %24 : i32
    cf.cond_br %53, ^bb27, ^bb28
  ^bb6:  // pred: ^bb4
    %c0_i32_14 = arith.constant 0 : i32
    %c1_i32_15 = arith.constant 1 : i32
    %c1054804_i64_16 = arith.constant 1054804 : i64
    %54 = arith.extui %c0_i32_14 : i32 to i64
    %55 = arith.addi %54, %c1054804_i64_16 : i64
    %56 = llvm.getelementptr %11[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = arith.trunci %c1_i32_15 : i32 to i8
    llvm.store volatile %57, %56 {alignment = 1 : i64} : i8, !llvm.ptr
    %c0_i32_17 = arith.constant 0 : i32
    %c0_i32_18 = arith.constant 0 : i32
    %c1054800_i64 = arith.constant 1054800 : i64
    %58 = arith.extui %c0_i32_18 : i32 to i64
    %59 = arith.addi %58, %c1054800_i64 : i64
    %60 = llvm.getelementptr %11[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %62 = arith.addi %61, %c1_i32_19 : i32
    %c1054800_i64_20 = arith.constant 1054800 : i64
    %63 = arith.extui %c0_i32_17 : i32 to i64
    %64 = arith.addi %63, %c1054800_i64_20 : i64
    %65 = llvm.getelementptr %11[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %62, %65 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %c1054784_i64 = arith.constant 1054784 : i64
    %66 = arith.extui %c0_i32_21 : i32 to i64
    %67 = arith.addi %66, %c1054784_i64 : i64
    %68 = llvm.getelementptr %11[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %69, %6 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %70 = arith.cmpi sle, %69, %c-1_i32 : i32
    %71 = arith.extui %70 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_22 : i32
    cf.cond_br %72, ^bb3, ^bb7
  ^bb7:  // pred: ^bb6
    %c0_i32_23 = arith.constant 0 : i32
    %73 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %74 = arith.addi %73, %c1_i32_24 : i32
    %c1054784_i64_25 = arith.constant 1054784 : i64
    %75 = arith.extui %c0_i32_23 : i32 to i64
    %76 = arith.addi %75, %c1054784_i64_25 : i64
    %77 = llvm.getelementptr %11[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %74, %77 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    %c1054788_i64 = arith.constant 1054788 : i64
    %78 = arith.extui %c0_i32_26 : i32 to i64
    %79 = arith.addi %78, %c1054788_i64 : i64
    %80 = llvm.getelementptr %11[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_27 = arith.constant 0 : i32
    %82 = arith.cmpi eq, %81, %c0_i32_27 : i32
    %83 = arith.extui %82 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_28 : i32
    cf.cond_br %84, ^bb8, ^bb9
  ^bb8:  // 2 preds: ^bb7, ^bb24
    %c0_i32_29 = arith.constant 0 : i32
    %85 = llvm.load %6 : !llvm.ptr -> i32
    %c1054784_i64_30 = arith.constant 1054784 : i64
    %86 = arith.extui %c0_i32_29 : i32 to i64
    %87 = arith.addi %86, %c1054784_i64_30 : i64
    %88 = llvm.getelementptr %11[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %85, %88 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_31 = arith.constant 0 : i32
    %c0_i32_32 = arith.constant 0 : i32
    %c1054804_i64_33 = arith.constant 1054804 : i64
    %89 = arith.extui %c0_i32_31 : i32 to i64
    %90 = arith.addi %89, %c1054804_i64_33 : i64
    %91 = llvm.getelementptr %11[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %92 = arith.trunci %c0_i32_32 : i32 to i8
    llvm.store volatile %92, %91 {alignment = 1 : i64} : i8, !llvm.ptr
    %93 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_34 = arith.constant 0 : i32
    %94 = arith.cmpi eq, %93, %c0_i32_34 : i32
    %95 = arith.extui %94 : i1 to i32
    %c0_i32_35 = arith.constant 0 : i32
    %96 = arith.cmpi ne, %95, %c0_i32_35 : i32
    cf.cond_br %96, ^bb3, ^bb26
  ^bb9:  // pred: ^bb7
    %97 = llvm.load %5 : !llvm.ptr -> i32
    %98 = llvm.load %0 : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c20_i64 : i64
    %102 = llvm.getelementptr %11[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    %104 = arith.cmpi ult, %103, %18 : i32
    cf.cond_br %104, ^bb10, ^bb11
  ^bb10:  // 2 preds: ^bb9, ^bb11
    %105 = llvm.getelementptr inbounds %16[%103] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %106 = llvm.load %105 : !llvm.ptr -> !llvm.ptr
    %107 = llvm.ptrtoint %106 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %108 = arith.cmpi eq, %107, %c0_i64 : i64
    cf.cond_br %108, ^bb13, ^bb12
  ^bb11:  // pred: ^bb9
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // 2 preds: ^bb10, ^bb13
    %109 = llvm.getelementptr %106[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %110 = llvm.getelementptr %106[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %111 = llvm.getelementptr %106[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %112 = llvm.load %109 : !llvm.ptr -> !llvm.ptr
    %113 = llvm.load %111 : !llvm.ptr -> !llvm.ptr
    %114 = llvm.ptrtoint %112 : !llvm.ptr to i64
    %c0_i64_36 = arith.constant 0 : i64
    %115 = arith.cmpi eq, %114, %c0_i64_36 : i64
    cf.cond_br %115, ^bb15, ^bb14
  ^bb13:  // pred: ^bb10
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb12
  ^bb14:  // 2 preds: ^bb12, ^bb15
    %116 = llvm.load %110 : !llvm.ptr -> i32
    %117 = arith.cmpi ne, %13, %116 : i32
    cf.cond_br %117, ^bb17, ^bb16
  ^bb15:  // pred: ^bb12
    %c3_i32_37 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_37) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %118 = llvm.call %112(%113, %97, %98) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %119 = llvm.load %5 : !llvm.ptr -> i32
    %120 = llvm.load %4 : !llvm.ptr -> i32
    %c29_i64 = arith.constant 29 : i64
    %121 = arith.extui %119 : i32 to i64
    %122 = arith.addi %121, %c29_i64 : i64
    %123 = llvm.getelementptr %11[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = arith.trunci %120 : i32 to i8
    llvm.store volatile %124, %123 {alignment = 1 : i64} : i8, !llvm.ptr
    %125 = llvm.load %5 : !llvm.ptr -> i32
    %126 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %127 = arith.extui %125 : i32 to i64
    %128 = arith.addi %127, %c28_i64 : i64
    %129 = llvm.getelementptr %11[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = arith.trunci %126 : i32 to i8
    llvm.store volatile %130, %129 {alignment = 1 : i64} : i8, !llvm.ptr
    %131 = llvm.load %5 : !llvm.ptr -> i32
    %132 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64_38 = arith.constant 24 : i64
    %133 = arith.extui %131 : i32 to i64
    %134 = arith.addi %133, %c24_i64_38 : i64
    %135 = llvm.getelementptr %11[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %132, %135 {alignment = 1 : i64} : i32, !llvm.ptr
    %136 = llvm.load %5 : !llvm.ptr -> i32
    %137 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_39 = arith.constant 0 : i64
    %138 = arith.extui %137 : i32 to i64
    %139 = arith.addi %138, %c0_i64_39 : i64
    %140 = llvm.getelementptr %11[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %141 = llvm.load volatile %140 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c16_i64 = arith.constant 16 : i64
    %142 = arith.extui %136 : i32 to i64
    %143 = arith.addi %142, %c16_i64 : i64
    %144 = llvm.getelementptr %11[%143] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %141, %144 {alignment = 1 : i64} : i64, !llvm.ptr
    %c0_i32_40 = arith.constant 0 : i32
    %c1054788_i64_41 = arith.constant 1054788 : i64
    %145 = arith.extui %c0_i32_40 : i32 to i64
    %146 = arith.addi %145, %c1054788_i64_41 : i64
    %147 = llvm.getelementptr %11[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    %149 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %150 = arith.addi %149, %c16_i32 : i32
    %c0_i32_42 = arith.constant 0 : i32
    %c1054792_i64 = arith.constant 1054792 : i64
    %151 = arith.extui %c0_i32_42 : i32 to i64
    %152 = arith.addi %151, %c1054792_i64 : i64
    %153 = llvm.getelementptr %11[%152] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %154 = llvm.load volatile %153 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64_43 = arith.constant 20 : i64
    %155 = arith.extui %154 : i32 to i64
    %156 = arith.addi %155, %c20_i64_43 : i64
    %157 = llvm.getelementptr %11[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %158 = llvm.load volatile %157 {alignment = 1 : i64} : !llvm.ptr -> i32
    %159 = arith.cmpi ult, %158, %21 : i32
    cf.cond_br %159, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %160 = llvm.getelementptr inbounds %19[%158] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %161 = llvm.load %160 : !llvm.ptr -> !llvm.ptr
    %162 = llvm.ptrtoint %161 : !llvm.ptr to i64
    %c0_i64_44 = arith.constant 0 : i64
    %163 = arith.cmpi eq, %162, %c0_i64_44 : i64
    cf.cond_br %163, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_45 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_45) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %164 = llvm.getelementptr %161[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %165 = llvm.getelementptr %161[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %166 = llvm.getelementptr %161[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %167 = llvm.load %164 : !llvm.ptr -> !llvm.ptr
    %168 = llvm.load %166 : !llvm.ptr -> !llvm.ptr
    %169 = llvm.ptrtoint %167 : !llvm.ptr to i64
    %c0_i64_46 = arith.constant 0 : i64
    %170 = arith.cmpi eq, %169, %c0_i64_46 : i64
    cf.cond_br %170, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c4_i32_47 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_47) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %171 = llvm.load %165 : !llvm.ptr -> i32
    %172 = arith.cmpi ne, %13, %171 : i32
    cf.cond_br %172, ^bb25, ^bb24
  ^bb23:  // pred: ^bb20
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %173 = llvm.call %167(%168, %148, %150) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c0_i32_49 = arith.constant 0 : i32
    %c1054784_i64_50 = arith.constant 1054784 : i64
    %174 = arith.extui %c0_i32_49 : i32 to i64
    %175 = arith.addi %174, %c1054784_i64_50 : i64
    %176 = llvm.getelementptr %11[%175] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %177 = llvm.load volatile %176 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c-1_i32_51 = arith.constant -1 : i32
    %178 = arith.addi %177, %c-1_i32_51 : i32
    llvm.store %178, %6 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb25:  // pred: ^bb22
    %c5_i32_52 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_52) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // pred: ^bb8
    %179 = llvm.load %0 : !llvm.ptr -> i32
    %180 = llvm.load %1 : !llvm.ptr -> i32
    call @f139(%arg0, %179, %180) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_53 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_53) : (i32) -> ()
    llvm.unreachable
  ^bb27:  // 2 preds: ^bb5, ^bb28
    %181 = llvm.getelementptr inbounds %22[%52] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %182 = llvm.load %181 : !llvm.ptr -> !llvm.ptr
    %183 = llvm.ptrtoint %182 : !llvm.ptr to i64
    %c0_i64_54 = arith.constant 0 : i64
    %184 = arith.cmpi eq, %183, %c0_i64_54 : i64
    cf.cond_br %184, ^bb30, ^bb29
  ^bb28:  // pred: ^bb5
    %c3_i32_55 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_55) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %185 = llvm.getelementptr %182[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %186 = llvm.getelementptr %182[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %187 = llvm.getelementptr %182[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %188 = llvm.load %185 : !llvm.ptr -> !llvm.ptr
    %189 = llvm.load %187 : !llvm.ptr -> !llvm.ptr
    %190 = llvm.ptrtoint %188 : !llvm.ptr to i64
    %c0_i64_56 = arith.constant 0 : i64
    %191 = arith.cmpi eq, %190, %c0_i64_56 : i64
    cf.cond_br %191, ^bb32, ^bb31
  ^bb30:  // pred: ^bb27
    %c4_i32_57 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_57) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %192 = llvm.load %186 : !llvm.ptr -> i32
    %193 = arith.cmpi ne, %13, %192 : i32
    cf.cond_br %193, ^bb34, ^bb33
  ^bb32:  // pred: ^bb29
    %c3_i32_58 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_58) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %194 = llvm.call %188(%189, %46, %47) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    cf.br ^bb3
  ^bb34:  // pred: ^bb31
    %c5_i32_59 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_59) : (i32) -> ()
    cf.br ^bb33
  }
  func.func @f139(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f141(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> i32
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f140(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_2 = arith.constant 0 : i32
    %c1054780_i64 = arith.constant 1054780 : i64
    %15 = arith.extui %c0_i32_2 : i32 to i64
    %16 = arith.addi %15, %c1054780_i64 : i64
    %17 = llvm.getelementptr %5[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = llvm.load volatile %17 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %18, %2 : i32, !llvm.ptr
    %c57_i32 = arith.constant 57 : i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_3 : i32
    %21 = arith.select %20, %18, %c57_i32 : i32
    %22 = arith.cmpi ult, %21, %12 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.getelementptr inbounds %10[%21] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %24 = llvm.load %23 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.ptrtoint %24 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.cmpi eq, %25, %c0_i64 : i64
    cf.cond_br %26, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %27 = llvm.getelementptr %24[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %28 = llvm.getelementptr %24[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %29 = llvm.getelementptr %24[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %30 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.ptrtoint %30 : !llvm.ptr to i64
    %c0_i64_4 = arith.constant 0 : i64
    %33 = arith.cmpi eq, %32, %c0_i64_4 : i64
    cf.cond_br %33, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %34 = llvm.load %28 : !llvm.ptr -> i32
    %35 = arith.cmpi ne, %7, %34 : i32
    cf.cond_br %35, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_5 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_5) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %36 = llvm.call %30(%31, %13, %14) vararg(!llvm.func<void (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> !llvm.void
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f141(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2(%2: i32):  // no predecessors
    return %2 : i32
  }
  func.func @f142(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1050564_i32 = arith.constant 1050564 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f164(%arg0, %2, %c1050564_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f143(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %9, %1 : i32, !llvm.ptr
    %c0_i32_1 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_1 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_2 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %4[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_3 = arith.constant 1 : i32
    call @f73(%arg0, %17, %18, %c1_i32_3) : (!llvm.ptr, i32, i32, i32) -> ()
    cf.br ^bb3
  }
  func.func @f144(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %c1050556_i32 = arith.constant 1050556 : i32
    %c5_i32 = arith.constant 5 : i32
    %3 = call @f186(%arg0, %2, %c1050556_i32, %c5_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func @f145(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %3 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %6 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %7 = arith.subi %6, %c32_i32 : i32
    llvm.store %7, %0 : i32, !llvm.ptr
    llvm.store %7, %2 : i32, !llvm.ptr
    %8 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %c24_i64 = arith.constant 24 : i64
    %9 = arith.extui %8 : i32 to i64
    %10 = arith.addi %9, %c24_i64 : i64
    %11 = llvm.getelementptr %5[%10] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_0, %11 {alignment = 1 : i64} : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %c12_i64 = arith.constant 12 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c12_i64 : i64
    %15 = llvm.getelementptr %5[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1, %15 {alignment = 1 : i64} : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i32
    %c1050608_i32 = arith.constant 1050608 : i32
    %c8_i64 = arith.constant 8 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c8_i64 : i64
    %19 = llvm.getelementptr %5[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050608_i32, %19 {alignment = 1 : i64} : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %c16_i64 = arith.constant 16 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c16_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64, %23 {alignment = 1 : i64} : i64, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %25 = arith.addi %24, %c8_i32 : i32
    %c1050644_i32 = arith.constant 1050644 : i32
    call @f156(%arg0, %25, %c1050644_i32) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f146(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %3 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %15 = arith.addi %13, %14 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %17 = arith.cmpi uge, %15, %16 : i32
    %18 = arith.extui %17 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %19 = arith.cmpi ne, %18, %c0_i32_5 : i32
    cf.cond_br %19, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32_6 = arith.constant 1 : i32
    llvm.store %c1_i32_6, %4 : i32, !llvm.ptr
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c0_i64 : i64
    %23 = llvm.getelementptr %10[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %24, %5 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %25 = arith.cmpi ule, %c1_i32_7, %c31_i32 : i32
    %26 = scf.if %25 -> (i32) {
      %104 = arith.shli %24, %c1_i32_7 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_25 = arith.constant 0 : i32
      scf.yield %c0_i32_25 : i32
    }
    llvm.store %26, %1 : i32, !llvm.ptr
    %27 = llvm.load %2 : !llvm.ptr -> i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_8 : i32
    %33 = arith.select %32, %26, %27 : i32
    llvm.store %33, %1 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_9 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_9 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_10 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32 : i32
    %c31_i32_11 = arith.constant 31 : i32
    %c31_i32_12 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_11, %c31_i32_12 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_11 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_25 = arith.constant 0 : i32
      scf.yield %c0_i32_25 : i32
    }
    llvm.store %41, %2 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_13 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_14 = arith.constant 0 : i32
    %c0_i32_15 = arith.constant 0 : i32
    call @f147(%arg0, %c0_i32_14, %c0_i32_15) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %45 = llvm.load %4 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32_16 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_16 : i32
    %51 = llvm.load %2 : !llvm.ptr -> i32
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f148(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_17 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_18 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %4 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_20 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_21 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_21 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32_22 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_22 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64_23 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_23 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_24 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_24) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f147(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2:  // no predecessors
    return
  ^bb3:  // pred: ^bb1
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %5 = llvm.load %1 : !llvm.ptr -> i32
    call @f150(%arg0, %4, %5) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb4:  // pred: ^bb1
    call @f145(%arg0) : (!llvm.ptr) -> ()
    %c9_i32_1 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_1) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f148(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %7 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_6 = arith.constant 1 : i32
    llvm.store %c1_i32_6, %4 : i32, !llvm.ptr
    %c0_i32_7 = arith.constant 0 : i32
    llvm.store %c0_i32_7, %5 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %6 : i32, !llvm.ptr
    %10 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %11 = arith.cmpi eq, %10, %c0_i32_8 : i32
    %12 = arith.extui %11 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %13 = arith.cmpi ne, %12, %c0_i32_9 : i32
    cf.cond_br %13, ^bb3, ^bb4
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 3 preds: ^bb1, ^bb4, ^bb6
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %15 = llvm.load %6 : !llvm.ptr -> i32
    %16 = arith.addi %14, %15 : i32
    %17 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %16 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %9[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %17, %20 {alignment = 1 : i64} : i32, !llvm.ptr
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %22 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_10 = arith.constant 0 : i64
    %23 = arith.extui %21 : i32 to i64
    %24 = arith.addi %23, %c0_i64_10 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %22, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb1
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %27 = arith.cmpi slt, %26, %c0_i32_11 : i32
    %28 = arith.extui %27 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %29 = arith.cmpi ne, %28, %c0_i32_12 : i32
    cf.cond_br %29, ^bb3, ^bb5
  ^bb5:  // pred: ^bb4
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c4_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %35 = arith.cmpi eq, %34, %c0_i32_13 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_14 : i32
    cf.cond_br %37, ^bb10, ^bb11
  ^bb6:  // 2 preds: ^bb7, ^bb8
    %c8_i32 = arith.constant 8 : i32
    llvm.store %c8_i32, %6 : i32, !llvm.ptr
    %38 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %38, %5 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb7:  // pred: ^bb9
    %c1_i32_15 = arith.constant 1 : i32
    llvm.store %c1_i32_15, %4 : i32, !llvm.ptr
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %c4_i64_17 = arith.constant 4 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c4_i64_17 : i64
    %42 = llvm.getelementptr %9[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_16, %42 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb6
  ^bb8:  // 3 preds: ^bb15, ^bb17, ^bb18
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %44 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_18 = arith.constant 4 : i64
    %45 = arith.extui %43 : i32 to i64
    %46 = arith.addi %45, %c4_i64_18 : i64
    %47 = llvm.getelementptr %9[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %44, %47 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_19 = arith.constant 0 : i32
    llvm.store %c0_i32_19, %4 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // 3 preds: ^bb12, ^bb14, ^bb16
    %48 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %49 = arith.cmpi eq, %48, %c0_i32_20 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_21 : i32
    cf.cond_br %51, ^bb7, ^bb18
  ^bb10:  // pred: ^bb5
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_22 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_22 : i32
    cf.cond_br %53, ^bb16, ^bb17
  ^bb11:  // pred: ^bb5
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c8_i64 : i64
    %57 = llvm.getelementptr %9[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %58, %4 : i32, !llvm.ptr
    %c0_i32_23 = arith.constant 0 : i32
    %59 = arith.cmpi ne, %58, %c0_i32_23 : i32
    cf.cond_br %59, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %60 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c0_i64_24 : i64
    %63 = llvm.getelementptr %9[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i32
    %65 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_25 = arith.constant 1 : i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %67 = call @f74(%arg0, %64, %65, %c1_i32_25, %66) : (!llvm.ptr, i32, i32, i32, i32) -> i32
    llvm.store %67, %4 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb13:  // pred: ^bb11
    %68 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_26 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_26 : i32
    cf.cond_br %69, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %c0_i32_27 = arith.constant 0 : i32
    %c1054681_i64 = arith.constant 1054681 : i64
    %70 = arith.extui %c0_i32_27 : i32 to i64
    %71 = arith.addi %70, %c1054681_i64 : i64
    %72 = llvm.getelementptr %9[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i8
    %74 = arith.extui %73 : i8 to i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_28 = arith.constant 1 : i32
    %76 = call @f72(%arg0, %75, %c1_i32_28) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %76, %4 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb15:  // pred: ^bb13
    %c1_i32_29 = arith.constant 1 : i32
    llvm.store %c1_i32_29, %4 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb16:  // pred: ^bb10
    %c0_i32_30 = arith.constant 0 : i32
    %c1054681_i64_31 = arith.constant 1054681 : i64
    %77 = arith.extui %c0_i32_30 : i32 to i64
    %78 = arith.addi %77, %c1054681_i64_31 : i64
    %79 = llvm.getelementptr %9[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %80 = llvm.load volatile %79 {alignment = 1 : i64} : !llvm.ptr -> i8
    %81 = arith.extui %80 : i8 to i32
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_32 = arith.constant 1 : i32
    %83 = call @f72(%arg0, %82, %c1_i32_32) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %83, %4 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb17:  // pred: ^bb10
    %c1_i32_33 = arith.constant 1 : i32
    llvm.store %c1_i32_33, %4 : i32, !llvm.ptr
    cf.br ^bb8
  ^bb18:  // pred: ^bb9
    cf.br ^bb8
  }
  func.func @f149(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %12 = arith.subi %11, %c32_i32 : i32
    llvm.store %12, %1 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %10[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %17, %2 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %18 = arith.cmpi eq, %17, %c-1_i32 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_5 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_6 : i32
    cf.cond_br %22, ^bb3, ^bb4
  ^bb2:  // pred: ^bb8
    return
  ^bb3:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    llvm.store %c1_i32_7, %3 : i32, !llvm.ptr
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_8 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %24 = arith.cmpi ule, %c1_i32_8, %c31_i32 : i32
    %25 = scf.if %24 -> (i32) {
      %104 = arith.shli %23, %c1_i32_8 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    llvm.store %25, %4 : i32, !llvm.ptr
    %26 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    %27 = arith.addi %26, %c1_i32_9 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = llvm.load %5 : !llvm.ptr -> i32
    %30 = arith.cmpi ugt, %28, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %32 = arith.cmpi ne, %31, %c0_i32_10 : i32
    %33 = arith.select %32, %25, %27 : i32
    llvm.store %33, %4 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    %34 = llvm.load %4 : !llvm.ptr -> i32
    %c8_i32_11 = arith.constant 8 : i32
    %35 = arith.cmpi ugt, %34, %c8_i32_11 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_12 : i32
    %38 = arith.select %37, %33, %c8_i32 : i32
    llvm.store %38, %4 : i32, !llvm.ptr
    %c-1_i32_13 = arith.constant -1 : i32
    %39 = arith.xori %38, %c-1_i32_13 : i32
    %c31_i32_14 = arith.constant 31 : i32
    %c31_i32_15 = arith.constant 31 : i32
    %40 = arith.cmpi ule, %c31_i32_14, %c31_i32_15 : i32
    %41 = scf.if %40 -> (i32) {
      %104 = arith.shrui %39, %c31_i32_14 : i32
      scf.yield %104 : i32
    } else {
      %c0_i32_28 = arith.constant 0 : i32
      scf.yield %c0_i32_28 : i32
    }
    llvm.store %41, %5 : i32, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_16 : i32
    cf.cond_br %43, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_17 = arith.constant 0 : i32
    %c0_i32_18 = arith.constant 0 : i32
    call @f147(%arg0, %c0_i32_17, %c0_i32_18) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %46 = arith.extui %44 : i32 to i64
    %47 = arith.addi %46, %c24_i64 : i64
    %48 = llvm.getelementptr %10[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %45, %48 {alignment = 1 : i64} : i32, !llvm.ptr
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_19 = arith.constant 8 : i32
    %50 = arith.addi %49, %c8_i32_19 : i32
    %51 = llvm.load %5 : !llvm.ptr -> i32
    %52 = llvm.load %4 : !llvm.ptr -> i32
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %54 = arith.addi %53, %c20_i32 : i32
    call @f148(%arg0, %50, %51, %52, %54) : (!llvm.ptr, i32, i32, i32, i32) -> ()
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %56 = arith.extui %55 : i32 to i64
    %57 = arith.addi %56, %c8_i64 : i64
    %58 = llvm.getelementptr %10[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %59 = llvm.load volatile %58 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %60 = arith.cmpi eq, %59, %c0_i32_20 : i32
    %61 = arith.extui %60 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %62 = arith.cmpi ne, %61, %c0_i32_21 : i32
    cf.cond_br %62, ^bb8, ^bb9
  ^bb6:  // pred: ^bb3
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %65 = arith.extui %63 : i32 to i64
    %66 = arith.addi %65, %c28_i64 : i64
    %67 = llvm.getelementptr %10[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %64, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %70 = arith.extui %69 : i32 to i64
    %71 = arith.addi %70, %c4_i64 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %73 = llvm.load volatile %72 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %74 = arith.extui %68 : i32 to i64
    %75 = arith.addi %74, %c20_i64 : i64
    %76 = llvm.getelementptr %10[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %73, %76 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb5
  ^bb7:  // pred: ^bb3
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb5
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %10[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %2 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_23 = arith.constant 0 : i64
    %84 = arith.extui %82 : i32 to i64
    %85 = arith.addi %84, %c0_i64_23 : i64
    %86 = llvm.getelementptr %10[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %83, %86 {alignment = 1 : i64} : i32, !llvm.ptr
    %87 = llvm.load %0 : !llvm.ptr -> i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_24 = arith.constant 4 : i64
    %89 = arith.extui %87 : i32 to i64
    %90 = arith.addi %89, %c4_i64_24 : i64
    %91 = llvm.getelementptr %10[%90] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %88, %91 {alignment = 1 : i64} : i32, !llvm.ptr
    %92 = llvm.load %1 : !llvm.ptr -> i32
    %c32_i32_25 = arith.constant 32 : i32
    %93 = arith.addi %92, %c32_i32_25 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb9:  // pred: ^bb5
    %94 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64_26 = arith.constant 12 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c12_i64_26 : i64
    %97 = llvm.getelementptr %10[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = llvm.load volatile %97 {alignment = 1 : i64} : !llvm.ptr -> i32
    %99 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c16_i64 : i64
    %102 = llvm.getelementptr %10[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    call @f147(%arg0, %98, %103) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_27 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_27) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f150(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    call @f14(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f151(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_2 = arith.constant 1 : i32
    llvm.store %c1_i32_2, %2 : i32, !llvm.ptr
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c1050660_i32 = arith.constant 1050660 : i32
    %c24_i32 = arith.constant 24 : i32
    %7 = call @f186(%arg0, %6, %c1050660_i32, %c24_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %8 = arith.cmpi ne, %7, %c0_i32_3 : i32
    cf.cond_br %8, ^bb3, ^bb4
  ^bb2(%9: i32):  // pred: ^bb3
    return %9 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %10 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%10 : i32)
  ^bb4:  // pred: ^bb1
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c1050748_i32 = arith.constant 1050748 : i32
    %c1050684_i32 = arith.constant 1050684 : i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %5[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_4 : i32
    %18 = arith.select %17, %c1050748_i32, %c1050684_i32 : i32
    %c47_i32 = arith.constant 47 : i32
    %c64_i32 = arith.constant 64 : i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_5 : i32
    %21 = arith.select %20, %c47_i32, %c64_i32 : i32
    %22 = call @f186(%arg0, %11, %18, %21) : (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %22, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f152(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.subi %14, %c16_i32 : i32
    llvm.store %15, %2 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %16 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %17 = arith.extui %16 : i32 to i64
    %18 = arith.addi %17, %c4_i64 : i64
    %19 = llvm.getelementptr %13[%18] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %20 = llvm.load volatile %19 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %20, %3 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    %21 = arith.cmpi eq, %20, %c0_i32_8 : i32
    %22 = arith.extui %21 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %23 = arith.cmpi ne, %22, %c0_i32_9 : i32
    cf.cond_br %23, ^bb7, ^bb8
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // pred: ^bb5
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c0_i64 : i64
    %28 = llvm.getelementptr %13[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_10 = arith.constant 0 : i64
    %30 = arith.extui %24 : i32 to i64
    %31 = arith.addi %30, %c0_i64_10 : i64
    %32 = llvm.getelementptr %13[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i64, !llvm.ptr
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %34 = arith.addi %33, %c8_i32 : i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32_11 = arith.constant 8 : i32
    %36 = arith.addi %35, %c8_i32_11 : i32
    %c0_i64_12 = arith.constant 0 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c0_i64_12 : i64
    %39 = llvm.getelementptr %13[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %41 = arith.extui %34 : i32 to i64
    %42 = arith.addi %41, %c0_i64_13 : i64
    %43 = llvm.getelementptr %13[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i32, !llvm.ptr
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_14 = arith.constant 16 : i32
    %45 = arith.addi %44, %c16_i32_14 : i32
    llvm.store %45, %10 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 2 preds: ^bb6, ^bb25
    %46 = llvm.load %5 : !llvm.ptr -> i32
    %47 = llvm.load %3 : !llvm.ptr -> i32
    call @f147(%arg0, %46, %47) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // 2 preds: ^bb7, ^bb26
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c8_i64 = arith.constant 8 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c8_i64 : i64
    %51 = llvm.getelementptr %13[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_15, %51 {alignment = 1 : i64} : i32, !llvm.ptr
    %52 = llvm.load %2 : !llvm.ptr -> i32
    %53 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i64_16 = arith.constant 4 : i64
    %54 = arith.extui %52 : i32 to i64
    %55 = arith.addi %54, %c4_i64_16 : i64
    %56 = llvm.getelementptr %13[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %53, %56 {alignment = 1 : i64} : i32, !llvm.ptr
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i64_17 = arith.constant 0 : i64
    %59 = arith.extui %57 : i32 to i64
    %60 = arith.addi %59, %c0_i64_17 : i64
    %61 = llvm.getelementptr %13[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %58, %61 {alignment = 1 : i64} : i32, !llvm.ptr
    %62 = llvm.load %2 : !llvm.ptr -> i32
    %c1050564_i32 = arith.constant 1050564 : i32
    %63 = llvm.load %1 : !llvm.ptr -> i32
    %64 = call @f164(%arg0, %62, %c1050564_i32, %63) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %65 = arith.cmpi eq, %64, %c0_i32_18 : i32
    %66 = arith.extui %65 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %67 = arith.cmpi ne, %66, %c0_i32_19 : i32
    cf.cond_br %67, ^bb3, ^bb27
  ^bb6:  // pred: ^bb20
    %c0_i32_20 = arith.constant 0 : i32
    llvm.store %c0_i32_20, %5 : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %69 = arith.cmpi slt, %68, %c0_i32_21 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_22 : i32
    cf.cond_br %71, ^bb4, ^bb25
  ^bb7:  // 4 preds: ^bb1, ^bb21, ^bb22, ^bb24
    %c1_i32_23 = arith.constant 1 : i32
    llvm.store %c1_i32_23, %7 : i32, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    llvm.store %c0_i32_24, %3 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb8:  // pred: ^bb1
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c0_i64_25 : i64
    %75 = llvm.getelementptr %13[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %4 : i32, !llvm.ptr
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %78 = arith.andi %77, %c3_i32 : i32
    llvm.store %78, %5 : i32, !llvm.ptr
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %80 = arith.cmpi uge, %79, %c4_i32 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_26 : i32
    cf.cond_br %82, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %83 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_27 = arith.constant 0 : i32
    %84 = arith.cmpi eq, %83, %c0_i32_27 : i32
    %85 = arith.extui %84 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %85, %c0_i32_28 : i32
    cf.cond_br %86, ^bb15, ^bb16
  ^bb10:  // pred: ^bb8
    %87 = llvm.load %4 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %88 = arith.addi %87, %c28_i32 : i32
    llvm.store %88, %7 : i32, !llvm.ptr
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %90 = arith.andi %89, %c-4_i32 : i32
    llvm.store %90, %8 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %3 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    llvm.store %c0_i32_30, %6 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c0_i32_31 = arith.constant 0 : i32
    llvm.store %c0_i32_31, %3 : i32, !llvm.ptr
    %c0_i32_32 = arith.constant 0 : i32
    llvm.store %c0_i32_32, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb14
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb13
    %91 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_33 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_33 : i64
    %94 = llvm.getelementptr %13[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    %96 = llvm.load %7 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %97 = arith.addi %96, %c-8_i32 : i32
    %c0_i64_34 = arith.constant 0 : i64
    %98 = arith.extui %97 : i32 to i64
    %99 = arith.addi %98, %c0_i64_34 : i64
    %100 = llvm.getelementptr %13[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = llvm.load volatile %100 {alignment = 1 : i64} : !llvm.ptr -> i32
    %102 = llvm.load %7 : !llvm.ptr -> i32
    %c-16_i32 = arith.constant -16 : i32
    %103 = arith.addi %102, %c-16_i32 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_35 : i64
    %106 = llvm.getelementptr %13[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i32
    %108 = llvm.load %7 : !llvm.ptr -> i32
    %c-24_i32 = arith.constant -24 : i32
    %109 = arith.addi %108, %c-24_i32 : i32
    %c0_i64_36 = arith.constant 0 : i64
    %110 = arith.extui %109 : i32 to i64
    %111 = arith.addi %110, %c0_i64_36 : i64
    %112 = llvm.getelementptr %13[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = llvm.load volatile %112 {alignment = 1 : i64} : !llvm.ptr -> i32
    %114 = llvm.load %3 : !llvm.ptr -> i32
    %115 = arith.addi %113, %114 : i32
    %116 = arith.addi %107, %115 : i32
    %117 = arith.addi %101, %116 : i32
    %118 = arith.addi %95, %117 : i32
    llvm.store %118, %3 : i32, !llvm.ptr
    %119 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %120 = arith.addi %119, %c32_i32 : i32
    llvm.store %120, %7 : i32, !llvm.ptr
    %121 = llvm.load %8 : !llvm.ptr -> i32
    %122 = llvm.load %6 : !llvm.ptr -> i32
    %c4_i32_37 = arith.constant 4 : i32
    %123 = arith.addi %122, %c4_i32_37 : i32
    llvm.store %123, %6 : i32, !llvm.ptr
    %124 = arith.cmpi eq, %121, %123 : i32
    %125 = arith.extui %124 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %126 = arith.cmpi eq, %125, %c0_i32_38 : i32
    %127 = arith.extui %126 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %128 = arith.cmpi ne, %127, %c0_i32_39 : i32
    cf.cond_br %128, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // 2 preds: ^bb9, ^bb17
    %129 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %130 = arith.extui %129 : i32 to i64
    %131 = arith.addi %130, %c12_i64 : i64
    %132 = llvm.getelementptr %13[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %133 = llvm.load volatile %132 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_40 = arith.constant 0 : i32
    %134 = arith.cmpi eq, %133, %c0_i32_40 : i32
    %135 = arith.extui %134 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %136 = arith.cmpi ne, %135, %c0_i32_41 : i32
    cf.cond_br %136, ^bb20, ^bb21
  ^bb16:  // pred: ^bb9
    %137 = llvm.load %6 : !llvm.ptr -> i32
    %c3_i32_42 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %138 = arith.cmpi ule, %c3_i32_42, %c31_i32 : i32
    %139 = scf.if %138 -> (i32) {
      %188 = arith.shli %137, %c3_i32_42 : i32
      scf.yield %188 : i32
    } else {
      %c0_i32_62 = arith.constant 0 : i32
      scf.yield %c0_i32_62 : i32
    }
    %140 = llvm.load %4 : !llvm.ptr -> i32
    %141 = arith.addi %139, %140 : i32
    %c4_i32_43 = arith.constant 4 : i32
    %142 = arith.addi %141, %c4_i32_43 : i32
    llvm.store %142, %7 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb17:  // pred: ^bb19
    cf.br ^bb15
  ^bb18:  // 2 preds: ^bb16, ^bb18
    %143 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i64_44 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_44 : i64
    %146 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i32
    %148 = llvm.load %3 : !llvm.ptr -> i32
    %149 = arith.addi %147, %148 : i32
    llvm.store %149, %3 : i32, !llvm.ptr
    %150 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32_45 = arith.constant 8 : i32
    %151 = arith.addi %150, %c8_i32_45 : i32
    llvm.store %151, %7 : i32, !llvm.ptr
    %152 = llvm.load %5 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %153 = arith.addi %152, %c-1_i32 : i32
    llvm.store %153, %5 : i32, !llvm.ptr
    %c0_i32_46 = arith.constant 0 : i32
    %154 = arith.cmpi ne, %153, %c0_i32_46 : i32
    cf.cond_br %154, ^bb18, ^bb19
  ^bb19:  // pred: ^bb18
    cf.br ^bb17
  ^bb20:  // 2 preds: ^bb15, ^bb23
    %155 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_47 = arith.constant 0 : i32
    %156 = arith.cmpi ne, %155, %c0_i32_47 : i32
    cf.cond_br %156, ^bb6, ^bb24
  ^bb21:  // pred: ^bb15
    %157 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_48 = arith.constant 0 : i32
    %158 = arith.cmpi slt, %157, %c0_i32_48 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %160 = arith.cmpi ne, %159, %c0_i32_49 : i32
    cf.cond_br %160, ^bb7, ^bb22
  ^bb22:  // pred: ^bb21
    %161 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_50 = arith.constant 16 : i32
    %162 = arith.cmpi ult, %161, %c16_i32_50 : i32
    %163 = arith.extui %162 : i1 to i32
    %164 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_51 = arith.constant 4 : i64
    %165 = arith.extui %164 : i32 to i64
    %166 = arith.addi %165, %c4_i64_51 : i64
    %167 = llvm.getelementptr %13[%166] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %168 = llvm.load volatile %167 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_52 = arith.constant 0 : i32
    %169 = arith.cmpi eq, %168, %c0_i32_52 : i32
    %170 = arith.extui %169 : i1 to i32
    %171 = arith.andi %163, %170 : i32
    %c0_i32_53 = arith.constant 0 : i32
    %172 = arith.cmpi ne, %171, %c0_i32_53 : i32
    cf.cond_br %172, ^bb7, ^bb23
  ^bb23:  // pred: ^bb22
    %173 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_54 = arith.constant 1 : i32
    %c31_i32_55 = arith.constant 31 : i32
    %174 = arith.cmpi ule, %c1_i32_54, %c31_i32_55 : i32
    %175 = scf.if %174 -> (i32) {
      %188 = arith.shli %173, %c1_i32_54 : i32
      scf.yield %188 : i32
    } else {
      %c0_i32_62 = arith.constant 0 : i32
      scf.yield %c0_i32_62 : i32
    }
    llvm.store %175, %3 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb24:  // pred: ^bb20
    cf.br ^bb7
  ^bb25:  // pred: ^bb6
    %c0_i32_56 = arith.constant 0 : i32
    %c1054681_i64 = arith.constant 1054681 : i64
    %176 = arith.extui %c0_i32_56 : i32 to i64
    %177 = arith.addi %176, %c1054681_i64 : i64
    %178 = llvm.getelementptr %13[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %179 = llvm.load volatile %178 {alignment = 1 : i64} : !llvm.ptr -> i8
    %180 = arith.extui %179 : i8 to i32
    %c1_i32_57 = arith.constant 1 : i32
    llvm.store %c1_i32_57, %5 : i32, !llvm.ptr
    %181 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_58 = arith.constant 1 : i32
    %182 = call @f72(%arg0, %181, %c1_i32_58) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %182, %7 : i32, !llvm.ptr
    %c0_i32_59 = arith.constant 0 : i32
    %183 = arith.cmpi eq, %182, %c0_i32_59 : i32
    %184 = arith.extui %183 : i1 to i32
    %c0_i32_60 = arith.constant 0 : i32
    %185 = arith.cmpi ne, %184, %c0_i32_60 : i32
    cf.cond_br %185, ^bb4, ^bb26
  ^bb26:  // pred: ^bb25
    cf.br ^bb5
  ^bb27:  // pred: ^bb5
    %c1050812_i32 = arith.constant 1050812 : i32
    %c86_i32 = arith.constant 86 : i32
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %c15_i32 = arith.constant 15 : i32
    %187 = arith.addi %186, %c15_i32 : i32
    %c1050796_i32 = arith.constant 1050796 : i32
    %c1050924_i32 = arith.constant 1050924 : i32
    call @f171(%arg0, %c1050812_i32, %c86_i32, %187, %c1050796_i32, %c1050924_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32_61 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_61) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f153(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %2 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %12 = arith.cmpi ult, %11, %c128_i32 : i32
    %13 = arith.extui %12 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %14 = arith.cmpi ne, %13, %c0_i32_3 : i32
    cf.cond_br %14, ^bb6, ^bb7
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 2 preds: ^bb11, ^bb13
    %15 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_4 = arith.constant 16 : i32
    %16 = arith.addi %15, %c16_i32_4 : i32
    llvm.store %16, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // 3 preds: ^bb5, ^bb9, ^bb10
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c0_i64 : i64
    %20 = llvm.getelementptr %8[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %21 = llvm.load volatile %20 {alignment = 1 : i64} : !llvm.ptr -> i32
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c8_i64 : i64
    %25 = llvm.getelementptr %8[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %26, %3 : i32, !llvm.ptr
    %27 = arith.subi %21, %26 : i32
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = arith.cmpi uge, %27, %28 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_5 : i32
    cf.cond_br %31, ^bb13, ^bb14
  ^bb5:  // pred: ^bb7
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32 = arith.constant 63 : i32
    %34 = arith.andi %33, %c63_i32 : i32
    %c128_i32_6 = arith.constant 128 : i32
    %35 = arith.ori %34, %c128_i32_6 : i32
    %c13_i64 = arith.constant 13 : i64
    %36 = arith.extui %32 : i32 to i64
    %37 = arith.addi %36, %c13_i64 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %39 = arith.trunci %35 : i32 to i8
    llvm.store volatile %39, %38 {alignment = 1 : i64} : i8, !llvm.ptr
    %40 = llvm.load %2 : !llvm.ptr -> i32
    %41 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32 = arith.constant 31 : i32
    %42 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %43 = scf.if %42 -> (i32) {
      %186 = arith.shrui %41, %c6_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c192_i32 = arith.constant 192 : i32
    %44 = arith.ori %43, %c192_i32 : i32
    %c12_i64 = arith.constant 12 : i64
    %45 = arith.extui %40 : i32 to i64
    %46 = arith.addi %45, %c12_i64 : i64
    %47 = llvm.getelementptr %8[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = arith.trunci %44 : i32 to i8
    llvm.store volatile %48, %47 {alignment = 1 : i64} : i8, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb6:  // pred: ^bb1
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_7 = arith.constant 8 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c8_i64_7 : i64
    %52 = llvm.getelementptr %8[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %53, %3 : i32, !llvm.ptr
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %55 = arith.extui %54 : i32 to i64
    %56 = arith.addi %55, %c0_i64_8 : i64
    %57 = llvm.getelementptr %8[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = llvm.load volatile %57 {alignment = 1 : i64} : !llvm.ptr -> i32
    %59 = arith.cmpi eq, %53, %58 : i32
    %60 = arith.extui %59 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %61 = arith.cmpi eq, %60, %c0_i32_9 : i32
    %62 = arith.extui %61 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %63 = arith.cmpi ne, %62, %c0_i32_10 : i32
    cf.cond_br %63, ^bb11, ^bb12
  ^bb7:  // pred: ^bb1
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %c12_i64_12 = arith.constant 12 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c12_i64_12 : i64
    %67 = llvm.getelementptr %8[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_11, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %1 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %69 = arith.cmpi ult, %68, %c2048_i32 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_13 : i32
    cf.cond_br %71, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %73 = arith.cmpi uge, %72, %c65536_i32 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_14 : i32
    cf.cond_br %75, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_15 = arith.constant 63 : i32
    %78 = arith.andi %77, %c63_i32_15 : i32
    %c128_i32_16 = arith.constant 128 : i32
    %79 = arith.ori %78, %c128_i32_16 : i32
    %c15_i64 = arith.constant 15 : i64
    %80 = arith.extui %76 : i32 to i64
    %81 = arith.addi %80, %c15_i64 : i64
    %82 = llvm.getelementptr %8[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %83 = arith.trunci %79 : i32 to i8
    llvm.store volatile %83, %82 {alignment = 1 : i64} : i8, !llvm.ptr
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %85 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_17 = arith.constant 6 : i32
    %c31_i32_18 = arith.constant 31 : i32
    %86 = arith.cmpi ule, %c6_i32_17, %c31_i32_18 : i32
    %87 = scf.if %86 -> (i32) {
      %186 = arith.shrui %85, %c6_i32_17 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c63_i32_19 = arith.constant 63 : i32
    %88 = arith.andi %87, %c63_i32_19 : i32
    %c128_i32_20 = arith.constant 128 : i32
    %89 = arith.ori %88, %c128_i32_20 : i32
    %c14_i64 = arith.constant 14 : i64
    %90 = arith.extui %84 : i32 to i64
    %91 = arith.addi %90, %c14_i64 : i64
    %92 = llvm.getelementptr %8[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = arith.trunci %89 : i32 to i8
    llvm.store volatile %93, %92 {alignment = 1 : i64} : i8, !llvm.ptr
    %94 = llvm.load %2 : !llvm.ptr -> i32
    %95 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_21 = arith.constant 31 : i32
    %96 = arith.cmpi ule, %c12_i32, %c31_i32_21 : i32
    %97 = scf.if %96 -> (i32) {
      %186 = arith.shrui %95, %c12_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c63_i32_22 = arith.constant 63 : i32
    %98 = arith.andi %97, %c63_i32_22 : i32
    %c128_i32_23 = arith.constant 128 : i32
    %99 = arith.ori %98, %c128_i32_23 : i32
    %c13_i64_24 = arith.constant 13 : i64
    %100 = arith.extui %94 : i32 to i64
    %101 = arith.addi %100, %c13_i64_24 : i64
    %102 = llvm.getelementptr %8[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = arith.trunci %99 : i32 to i8
    llvm.store volatile %103, %102 {alignment = 1 : i64} : i8, !llvm.ptr
    %104 = llvm.load %2 : !llvm.ptr -> i32
    %105 = llvm.load %1 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_25 = arith.constant 31 : i32
    %106 = arith.cmpi ule, %c18_i32, %c31_i32_25 : i32
    %107 = scf.if %106 -> (i32) {
      %186 = arith.shrui %105, %c18_i32 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c7_i32 = arith.constant 7 : i32
    %108 = arith.andi %107, %c7_i32 : i32
    %c240_i32 = arith.constant 240 : i32
    %109 = arith.ori %108, %c240_i32 : i32
    %c12_i64_26 = arith.constant 12 : i64
    %110 = arith.extui %104 : i32 to i64
    %111 = arith.addi %110, %c12_i64_26 : i64
    %112 = llvm.getelementptr %8[%111] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %113 = arith.trunci %109 : i32 to i8
    llvm.store volatile %113, %112 {alignment = 1 : i64} : i8, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb10:  // pred: ^bb8
    %114 = llvm.load %2 : !llvm.ptr -> i32
    %115 = llvm.load %1 : !llvm.ptr -> i32
    %c63_i32_27 = arith.constant 63 : i32
    %116 = arith.andi %115, %c63_i32_27 : i32
    %c128_i32_28 = arith.constant 128 : i32
    %117 = arith.ori %116, %c128_i32_28 : i32
    %c14_i64_29 = arith.constant 14 : i64
    %118 = arith.extui %114 : i32 to i64
    %119 = arith.addi %118, %c14_i64_29 : i64
    %120 = llvm.getelementptr %8[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = arith.trunci %117 : i32 to i8
    llvm.store volatile %121, %120 {alignment = 1 : i64} : i8, !llvm.ptr
    %122 = llvm.load %2 : !llvm.ptr -> i32
    %123 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_30 = arith.constant 12 : i32
    %c31_i32_31 = arith.constant 31 : i32
    %124 = arith.cmpi ule, %c12_i32_30, %c31_i32_31 : i32
    %125 = scf.if %124 -> (i32) {
      %186 = arith.shrui %123, %c12_i32_30 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c224_i32 = arith.constant 224 : i32
    %126 = arith.ori %125, %c224_i32 : i32
    %c12_i64_32 = arith.constant 12 : i64
    %127 = arith.extui %122 : i32 to i64
    %128 = arith.addi %127, %c12_i64_32 : i64
    %129 = llvm.getelementptr %8[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = arith.trunci %126 : i32 to i8
    llvm.store volatile %130, %129 {alignment = 1 : i64} : i8, !llvm.ptr
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %132 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32_33 = arith.constant 6 : i32
    %c31_i32_34 = arith.constant 31 : i32
    %133 = arith.cmpi ule, %c6_i32_33, %c31_i32_34 : i32
    %134 = scf.if %133 -> (i32) {
      %186 = arith.shrui %132, %c6_i32_33 : i32
      scf.yield %186 : i32
    } else {
      %c0_i32_45 = arith.constant 0 : i32
      scf.yield %c0_i32_45 : i32
    }
    %c63_i32_35 = arith.constant 63 : i32
    %135 = arith.andi %134, %c63_i32_35 : i32
    %c128_i32_36 = arith.constant 128 : i32
    %136 = arith.ori %135, %c128_i32_36 : i32
    %c13_i64_37 = arith.constant 13 : i64
    %137 = arith.extui %131 : i32 to i64
    %138 = arith.addi %137, %c13_i64_37 : i64
    %139 = llvm.getelementptr %8[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %140 = arith.trunci %136 : i32 to i8
    llvm.store volatile %140, %139 {alignment = 1 : i64} : i8, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %1 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb11:  // 2 preds: ^bb6, ^bb12
    %141 = llvm.load %0 : !llvm.ptr -> i32
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_38 = arith.constant 1 : i32
    %143 = arith.addi %142, %c1_i32_38 : i32
    %c8_i64_39 = arith.constant 8 : i64
    %144 = arith.extui %141 : i32 to i64
    %145 = arith.addi %144, %c8_i64_39 : i64
    %146 = llvm.getelementptr %8[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %146 {alignment = 1 : i64} : i32, !llvm.ptr
    %147 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %148 = arith.extui %147 : i32 to i64
    %149 = arith.addi %148, %c4_i64 : i64
    %150 = llvm.getelementptr %8[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i32
    %152 = llvm.load %3 : !llvm.ptr -> i32
    %153 = arith.addi %151, %152 : i32
    %154 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %155 = arith.extui %153 : i32 to i64
    %156 = arith.addi %155, %c0_i64_40 : i64
    %157 = llvm.getelementptr %8[%156] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %158 = arith.trunci %154 : i32 to i8
    llvm.store volatile %158, %157 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %159 = llvm.load %0 : !llvm.ptr -> i32
    call @f149(%arg0, %159) : (!llvm.ptr, i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb4, ^bb14
    %160 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64_41 = arith.constant 4 : i64
    %161 = arith.extui %160 : i32 to i64
    %162 = arith.addi %161, %c4_i64_41 : i64
    %163 = llvm.getelementptr %8[%162] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %164 = llvm.load volatile %163 {alignment = 1 : i64} : !llvm.ptr -> i32
    %165 = llvm.load %3 : !llvm.ptr -> i32
    %166 = arith.addi %164, %165 : i32
    %167 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32_42 = arith.constant 12 : i32
    %168 = arith.addi %167, %c12_i32_42 : i32
    %169 = llvm.load %1 : !llvm.ptr -> i32
    %170 = call @f202(%arg0, %166, %168, %169) : (!llvm.ptr, i32, i32, i32) -> i32
    %171 = llvm.load %0 : !llvm.ptr -> i32
    %172 = llvm.load %3 : !llvm.ptr -> i32
    %173 = llvm.load %1 : !llvm.ptr -> i32
    %174 = arith.addi %172, %173 : i32
    %c8_i64_43 = arith.constant 8 : i64
    %175 = arith.extui %171 : i32 to i64
    %176 = arith.addi %175, %c8_i64_43 : i64
    %177 = llvm.getelementptr %8[%176] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %174, %177 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb4
    %178 = llvm.load %0 : !llvm.ptr -> i32
    %179 = llvm.load %3 : !llvm.ptr -> i32
    %180 = llvm.load %1 : !llvm.ptr -> i32
    call @f146(%arg0, %178, %179, %180) : (!llvm.ptr, i32, i32, i32) -> ()
    %181 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_44 = arith.constant 8 : i64
    %182 = arith.extui %181 : i32 to i64
    %183 = arith.addi %182, %c8_i64_44 : i64
    %184 = llvm.getelementptr %8[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %185 = llvm.load volatile %184 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %185, %3 : i32, !llvm.ptr
    cf.br ^bb13
  }
  func.func @f154(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.addi %8, %c0_i64 : i64
    %10 = llvm.getelementptr %6[%9] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %11 = llvm.load volatile %10 {alignment = 1 : i64} : !llvm.ptr -> i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c8_i64 : i64
    %15 = llvm.getelementptr %6[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %17 = arith.subi %11, %16 : i32
    %18 = llvm.load %2 : !llvm.ptr -> i32
    %19 = arith.cmpi uge, %17, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_3 : i32
    cf.cond_br %21, ^bb3, ^bb4
  ^bb2(%22: i32):  // pred: ^bb3
    return %22 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c4_i64 : i64
    %26 = llvm.getelementptr %6[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = llvm.load volatile %26 {alignment = 1 : i64} : !llvm.ptr -> i32
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = arith.addi %27, %28 : i32
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %2 : !llvm.ptr -> i32
    %32 = call @f202(%arg0, %29, %30, %31) : (!llvm.ptr, i32, i32, i32) -> i32
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %36 = arith.addi %34, %35 : i32
    %c8_i64_4 = arith.constant 8 : i64
    %37 = arith.extui %33 : i32 to i64
    %38 = arith.addi %37, %c8_i64_4 : i64
    %39 = llvm.getelementptr %6[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %36, %39 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_5 : i32)
  ^bb4:  // pred: ^bb1
    %40 = llvm.load %0 : !llvm.ptr -> i32
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %42 = llvm.load %2 : !llvm.ptr -> i32
    call @f146(%arg0, %40, %41, %42) : (!llvm.ptr, i32, i32, i32) -> ()
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64_6 = arith.constant 8 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c8_i64_6 : i64
    %46 = llvm.getelementptr %6[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %47, %3 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f155(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @f153(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func @f156(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %8 = llvm.load %4 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %9 = arith.subi %8, %c32_i32 : i32
    llvm.store %9, %2 : i32, !llvm.ptr
    llvm.store %9, %4 : i32, !llvm.ptr
    %10 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %11 = arith.addi %10, %c16_i32 : i32
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_2 = arith.constant 16 : i32
    %13 = arith.addi %12, %c16_i32_2 : i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %7[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_3 = arith.constant 0 : i64
    %18 = arith.extui %11 : i32 to i64
    %19 = arith.addi %18, %c0_i64_3 : i64
    %20 = llvm.getelementptr %7[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %17, %20 {alignment = 1 : i64} : i64, !llvm.ptr
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %22 = arith.addi %21, %c8_i32 : i32
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_4 = arith.constant 8 : i32
    %24 = arith.addi %23, %c8_i32_4 : i32
    %c0_i64_5 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_5 : i64
    %27 = llvm.getelementptr %7[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_6 = arith.constant 0 : i64
    %29 = arith.extui %22 : i32 to i64
    %30 = arith.addi %29, %c0_i64_6 : i64
    %31 = llvm.getelementptr %7[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %28, %31 {alignment = 1 : i64} : i64, !llvm.ptr
    %32 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_7 = arith.constant 1 : i32
    %c28_i64 = arith.constant 28 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c28_i64 : i64
    %35 = llvm.getelementptr %7[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = arith.trunci %c1_i32_7 : i32 to i16
    llvm.store volatile %36, %35 {alignment = 1 : i64} : i16, !llvm.ptr
    %37 = llvm.load %2 : !llvm.ptr -> i32
    %38 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %39 = arith.extui %37 : i32 to i64
    %40 = arith.addi %39, %c24_i64 : i64
    %41 = llvm.getelementptr %7[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %38, %41 {alignment = 1 : i64} : i32, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c0_i64_8 : i64
    %46 = llvm.getelementptr %7[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_9 = arith.constant 0 : i64
    %48 = arith.extui %42 : i32 to i64
    %49 = arith.addi %48, %c0_i64_9 : i64
    %50 = llvm.getelementptr %7[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %47, %50 {alignment = 1 : i64} : i64, !llvm.ptr
    %51 = llvm.load %2 : !llvm.ptr -> i32
    call @f130(%arg0, %51) : (!llvm.ptr, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f157(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c0_i64_4 : i64
    %16 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c1051528_i32 = arith.constant 1051528 : i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051528_i32, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c20_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c51_i32 = arith.constant 51 : i32
    %35 = arith.extui %c51_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %36 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %37 = scf.if %36 -> (i64) {
      %62 = arith.shli %35, %c32_i64 : i64
      scf.yield %62 : i64
    } else {
      %c0_i64_6 = arith.constant 0 : i64
      scf.yield %c0_i64_6 : i64
    }
    llvm.store %37, %4 : i64, !llvm.ptr
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %39 = arith.addi %38, %c4_i32 : i32
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.ori %37, %40 : i64
    %c40_i64 = arith.constant 40 : i64
    %42 = arith.extui %34 : i32 to i64
    %43 = arith.addi %42, %c40_i64 : i64
    %44 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %4 : !llvm.ptr -> i64
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.ori %46, %48 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %50 = arith.extui %45 : i32 to i64
    %51 = arith.addi %50, %c32_i64_5 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %55 = arith.addi %54, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c16_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    call @f156(%arg0, %60, %61) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f158(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c0_i64_4 : i64
    %21 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c1051088_i32 = arith.constant 1051088 : i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051088_i32, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c20_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c51_i32 = arith.constant 51 : i32
    %35 = arith.extui %c51_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %36 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %37 = scf.if %36 -> (i64) {
      %62 = arith.shli %35, %c32_i64 : i64
      scf.yield %62 : i64
    } else {
      %c0_i64_6 = arith.constant 0 : i64
      scf.yield %c0_i64_6 : i64
    }
    llvm.store %37, %4 : i64, !llvm.ptr
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.ori %37, %39 : i64
    %c40_i64 = arith.constant 40 : i64
    %41 = arith.extui %34 : i32 to i64
    %42 = arith.addi %41, %c40_i64 : i64
    %43 = llvm.getelementptr %9[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i64, !llvm.ptr
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %45 = llvm.load %4 : !llvm.ptr -> i64
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %47 = arith.addi %46, %c4_i32 : i32
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.ori %45, %48 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %50 = arith.extui %44 : i32 to i64
    %51 = arith.addi %50, %c32_i64_5 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %55 = arith.addi %54, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c16_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    call @f156(%arg0, %60, %61) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f159(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c0_i64_4 : i64
    %16 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c1051560_i32 = arith.constant 1051560 : i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051560_i32, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c20_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c51_i32 = arith.constant 51 : i32
    %35 = arith.extui %c51_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %36 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %37 = scf.if %36 -> (i64) {
      %62 = arith.shli %35, %c32_i64 : i64
      scf.yield %62 : i64
    } else {
      %c0_i64_6 = arith.constant 0 : i64
      scf.yield %c0_i64_6 : i64
    }
    llvm.store %37, %4 : i64, !llvm.ptr
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %39 = arith.addi %38, %c4_i32 : i32
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.ori %37, %40 : i64
    %c40_i64 = arith.constant 40 : i64
    %42 = arith.extui %34 : i32 to i64
    %43 = arith.addi %42, %c40_i64 : i64
    %44 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %4 : !llvm.ptr -> i64
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.ori %46, %48 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %50 = arith.extui %45 : i32 to i64
    %51 = arith.addi %50, %c32_i64_5 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %55 = arith.addi %54, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c16_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    call @f156(%arg0, %60, %61) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f160(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> i32
    %14 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %15 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    %19 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %19 : !llvm.ptr -> i32
    %21 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %15 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    %24 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %15 : !llvm.ptr -> i64
    %26 = arith.trunci %25 : i64 to i32
    %27 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %15 : !llvm.ptr -> i64
    %29 = arith.trunci %28 : i64 to i32
    %30 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %15 : !llvm.ptr -> i64
    %32 = arith.trunci %31 : i64 to i32
    %33 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.load %15 : !llvm.ptr -> i64
    %35 = arith.trunci %34 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c0_i64 : i64
    %39 = llvm.getelementptr %11[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %40, %3 : i32, !llvm.ptr
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c8_i64 : i64
    %44 = llvm.getelementptr %11[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %45, %4 : i32, !llvm.ptr
    %46 = arith.ori %40, %45 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %47 = arith.cmpi eq, %46, %c0_i32_8 : i32
    %48 = arith.extui %47 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %49 = arith.cmpi ne, %48, %c0_i32_9 : i32
    cf.cond_br %49, ^bb3, ^bb4
  ^bb2(%50: i32):  // 5 preds: ^bb39, ^bb62, ^bb80, ^bb82, ^bb112
    return %50 : i32
  ^bb3:  // pred: ^bb1
    %51 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c20_i64 : i64
    %54 = llvm.getelementptr %11[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i32
    %56 = llvm.load %1 : !llvm.ptr -> i32
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %59 = arith.extui %58 : i32 to i64
    %60 = arith.addi %59, %c24_i64 : i64
    %61 = llvm.getelementptr %11[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = llvm.load volatile %61 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c12_i64 : i64
    %65 = llvm.getelementptr %11[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    %67 = arith.cmpi ult, %66, %35 : i32
    cf.cond_br %67, ^bb106, ^bb107
  ^bb4:  // pred: ^bb1
    %68 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %69 = arith.cmpi eq, %68, %c0_i32_10 : i32
    %70 = arith.extui %69 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %71 = arith.cmpi ne, %70, %c0_i32_11 : i32
    cf.cond_br %71, ^bb5, ^bb6
  ^bb5:  // 4 preds: ^bb4, ^bb7, ^bb11, ^bb24
    %72 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %73 = arith.cmpi ne, %72, %c0_i32_12 : i32
    cf.cond_br %73, ^bb31, ^bb32
  ^bb6:  // pred: ^bb4
    %74 = llvm.load %1 : !llvm.ptr -> i32
    %75 = llvm.load %2 : !llvm.ptr -> i32
    %76 = arith.addi %74, %75 : i32
    llvm.store %76, %5 : i32, !llvm.ptr
    %77 = llvm.load %0 : !llvm.ptr -> i32
    %c12_i64_13 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64_13 : i64
    %80 = llvm.getelementptr %11[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %6 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_14 : i32
    cf.cond_br %82, ^bb8, ^bb9
  ^bb7:  // 2 preds: ^bb9, ^bb10
    %83 = llvm.load %8 : !llvm.ptr -> i32
    %84 = llvm.load %5 : !llvm.ptr -> i32
    %85 = arith.cmpi eq, %83, %84 : i32
    %86 = arith.extui %85 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %87 = arith.cmpi ne, %86, %c0_i32_15 : i32
    cf.cond_br %87, ^bb5, ^bb21
  ^bb8:  // pred: ^bb6
    %c0_i32_16 = arith.constant 0 : i32
    llvm.store %c0_i32_16, %7 : i32, !llvm.ptr
    %88 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %88, %8 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb9:  // pred: ^bb6
    %c0_i32_17 = arith.constant 0 : i32
    llvm.store %c0_i32_17, %7 : i32, !llvm.ptr
    %89 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %89, %8 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb10:  // pred: ^bb20
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb8, ^bb13
    %90 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %90, %4 : i32, !llvm.ptr
    %91 = llvm.load %5 : !llvm.ptr -> i32
    %92 = arith.cmpi eq, %90, %91 : i32
    %93 = arith.extui %92 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %94 = arith.cmpi ne, %93, %c0_i32_18 : i32
    cf.cond_br %94, ^bb5, ^bb12
  ^bb12:  // pred: ^bb11
    %95 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i64_19 = arith.constant 0 : i64
    %96 = arith.extui %95 : i32 to i64
    %97 = arith.addi %96, %c0_i64_19 : i64
    %98 = llvm.getelementptr %11[%97] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %99 = llvm.load volatile %98 {alignment = 1 : i64} : !llvm.ptr -> i8
    %100 = arith.extsi %99 : i8 to i32
    llvm.store %100, %8 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %101 = arith.cmpi sle, %100, %c-1_i32 : i32
    %102 = arith.extui %101 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %103 = arith.cmpi ne, %102, %c0_i32_20 : i32
    cf.cond_br %103, ^bb14, ^bb15
  ^bb13:  // 4 preds: ^bb15, ^bb17, ^bb18, ^bb19
    %104 = llvm.load %8 : !llvm.ptr -> i32
    %105 = llvm.load %4 : !llvm.ptr -> i32
    %106 = arith.subi %104, %105 : i32
    %107 = llvm.load %7 : !llvm.ptr -> i32
    %108 = arith.addi %106, %107 : i32
    llvm.store %108, %7 : i32, !llvm.ptr
    %109 = llvm.load %6 : !llvm.ptr -> i32
    %c-1_i32_21 = arith.constant -1 : i32
    %110 = arith.addi %109, %c-1_i32_21 : i32
    llvm.store %110, %6 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %111 = arith.cmpi ne, %110, %c0_i32_22 : i32
    cf.cond_br %111, ^bb11, ^bb20
  ^bb14:  // pred: ^bb12
    %112 = llvm.load %8 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %113 = arith.cmpi uge, %112, %c-32_i32 : i32
    %114 = arith.extui %113 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %115 = arith.cmpi ne, %114, %c0_i32_23 : i32
    cf.cond_br %115, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %116 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %117 = arith.addi %116, %c1_i32_24 : i32
    llvm.store %117, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // pred: ^bb14
    %118 = llvm.load %8 : !llvm.ptr -> i32
    %c-16_i32 = arith.constant -16 : i32
    %119 = arith.cmpi uge, %118, %c-16_i32 : i32
    %120 = arith.extui %119 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %121 = arith.cmpi ne, %120, %c0_i32_25 : i32
    cf.cond_br %121, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %122 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %123 = arith.addi %122, %c2_i32 : i32
    llvm.store %123, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb18:  // pred: ^bb16
    %124 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %125 = arith.addi %124, %c4_i32 : i32
    llvm.store %125, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb19:  // pred: ^bb16
    %126 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %127 = arith.addi %126, %c3_i32 : i32
    llvm.store %127, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb20:  // pred: ^bb13
    cf.br ^bb10
  ^bb21:  // pred: ^bb7
    %128 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_26 = arith.constant 0 : i64
    %129 = arith.extui %128 : i32 to i64
    %130 = arith.addi %129, %c0_i64_26 : i64
    %131 = llvm.getelementptr %11[%130] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %132 = llvm.load volatile %131 {alignment = 1 : i64} : !llvm.ptr -> i8
    %133 = arith.extsi %132 : i8 to i32
    llvm.store %133, %4 : i32, !llvm.ptr
    %c-1_i32_27 = arith.constant -1 : i32
    %134 = arith.cmpi sgt, %133, %c-1_i32_27 : i32
    %135 = arith.extui %134 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %136 = arith.cmpi ne, %135, %c0_i32_28 : i32
    cf.cond_br %136, ^bb22, ^bb23
  ^bb22:  // 2 preds: ^bb21, ^bb23
    %137 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_29 = arith.constant 0 : i32
    %138 = arith.cmpi eq, %137, %c0_i32_29 : i32
    %139 = arith.extui %138 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %140 = arith.cmpi ne, %139, %c0_i32_30 : i32
    cf.cond_br %140, ^bb25, ^bb26
  ^bb23:  // pred: ^bb21
    %141 = llvm.load %4 : !llvm.ptr -> i32
    %c-32_i32_31 = arith.constant -32 : i32
    %142 = arith.cmpi ult, %141, %c-32_i32_31 : i32
    %143 = arith.extui %142 : i1 to i32
    cf.br ^bb22
  ^bb24:  // 3 preds: ^bb25, ^bb27, ^bb29
    %144 = llvm.load %7 : !llvm.ptr -> i32
    %145 = llvm.load %2 : !llvm.ptr -> i32
    %146 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_32 = arith.constant 0 : i32
    %147 = arith.cmpi ne, %146, %c0_i32_32 : i32
    %148 = arith.select %147, %144, %145 : i32
    llvm.store %148, %2 : i32, !llvm.ptr
    %149 = llvm.load %4 : !llvm.ptr -> i32
    %150 = llvm.load %1 : !llvm.ptr -> i32
    %151 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_33 = arith.constant 0 : i32
    %152 = arith.cmpi ne, %151, %c0_i32_33 : i32
    %153 = arith.select %152, %149, %150 : i32
    llvm.store %153, %1 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb25:  // 3 preds: ^bb22, ^bb28, ^bb30
    %154 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %154, %4 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb26:  // pred: ^bb22
    %155 = llvm.load %7 : !llvm.ptr -> i32
    %156 = llvm.load %2 : !llvm.ptr -> i32
    %157 = arith.cmpi uge, %155, %156 : i32
    %158 = arith.extui %157 : i1 to i32
    %c0_i32_34 = arith.constant 0 : i32
    %159 = arith.cmpi ne, %158, %c0_i32_34 : i32
    cf.cond_br %159, ^bb27, ^bb28
  ^bb27:  // pred: ^bb26
    %c0_i32_35 = arith.constant 0 : i32
    llvm.store %c0_i32_35, %4 : i32, !llvm.ptr
    %160 = llvm.load %7 : !llvm.ptr -> i32
    %161 = llvm.load %2 : !llvm.ptr -> i32
    %162 = arith.cmpi eq, %160, %161 : i32
    %163 = arith.extui %162 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %164 = arith.cmpi eq, %163, %c0_i32_36 : i32
    %165 = arith.extui %164 : i1 to i32
    %c0_i32_37 = arith.constant 0 : i32
    %166 = arith.cmpi ne, %165, %c0_i32_37 : i32
    cf.cond_br %166, ^bb24, ^bb30
  ^bb28:  // pred: ^bb26
    %c0_i32_38 = arith.constant 0 : i32
    llvm.store %c0_i32_38, %4 : i32, !llvm.ptr
    %167 = llvm.load %1 : !llvm.ptr -> i32
    %168 = llvm.load %7 : !llvm.ptr -> i32
    %169 = arith.addi %167, %168 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %170 = arith.extui %169 : i32 to i64
    %171 = arith.addi %170, %c0_i64_39 : i64
    %172 = llvm.getelementptr %11[%171] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %173 = llvm.load volatile %172 {alignment = 1 : i64} : !llvm.ptr -> i8
    %174 = arith.extsi %173 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %175 = arith.cmpi sgt, %174, %c-65_i32 : i32
    %176 = arith.extui %175 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %177 = arith.cmpi ne, %176, %c0_i32_40 : i32
    cf.cond_br %177, ^bb25, ^bb29
  ^bb29:  // pred: ^bb28
    cf.br ^bb24
  ^bb30:  // pred: ^bb27
    cf.br ^bb25
  ^bb31:  // pred: ^bb5
    %178 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %179 = arith.extui %178 : i32 to i64
    %180 = arith.addi %179, %c4_i64 : i64
    %181 = llvm.getelementptr %11[%180] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %182 = llvm.load volatile %181 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %182, %3 : i32, !llvm.ptr
    %183 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %184 = arith.cmpi ult, %183, %c16_i32 : i32
    %185 = arith.extui %184 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %186 = arith.cmpi ne, %185, %c0_i32_41 : i32
    cf.cond_br %186, ^bb42, ^bb43
  ^bb32:  // pred: ^bb5
    %187 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_42 = arith.constant 20 : i64
    %188 = arith.extui %187 : i32 to i64
    %189 = arith.addi %188, %c20_i64_42 : i64
    %190 = llvm.getelementptr %11[%189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %191 = llvm.load volatile %190 {alignment = 1 : i64} : !llvm.ptr -> i32
    %192 = llvm.load %1 : !llvm.ptr -> i32
    %193 = llvm.load %2 : !llvm.ptr -> i32
    %194 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_43 = arith.constant 24 : i64
    %195 = arith.extui %194 : i32 to i64
    %196 = arith.addi %195, %c24_i64_43 : i64
    %197 = llvm.getelementptr %11[%196] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %198 = llvm.load volatile %197 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_44 = arith.constant 12 : i64
    %199 = arith.extui %198 : i32 to i64
    %200 = arith.addi %199, %c12_i64_44 : i64
    %201 = llvm.getelementptr %11[%200] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %202 = llvm.load volatile %201 {alignment = 1 : i64} : !llvm.ptr -> i32
    %203 = arith.cmpi ult, %202, %18 : i32
    cf.cond_br %203, ^bb33, ^bb34
  ^bb33:  // 2 preds: ^bb32, ^bb34
    %204 = llvm.getelementptr inbounds %16[%202] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %205 = llvm.load %204 : !llvm.ptr -> !llvm.ptr
    %206 = llvm.ptrtoint %205 : !llvm.ptr to i64
    %c0_i64_45 = arith.constant 0 : i64
    %207 = arith.cmpi eq, %206, %c0_i64_45 : i64
    cf.cond_br %207, ^bb36, ^bb35
  ^bb34:  // pred: ^bb32
    %c3_i32_46 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_46) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %208 = llvm.getelementptr %205[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %209 = llvm.getelementptr %205[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %210 = llvm.getelementptr %205[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %211 = llvm.load %208 : !llvm.ptr -> !llvm.ptr
    %212 = llvm.load %210 : !llvm.ptr -> !llvm.ptr
    %213 = llvm.ptrtoint %211 : !llvm.ptr to i64
    %c0_i64_47 = arith.constant 0 : i64
    %214 = arith.cmpi eq, %213, %c0_i64_47 : i64
    cf.cond_br %214, ^bb38, ^bb37
  ^bb36:  // pred: ^bb33
    %c4_i32_48 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_48) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // 2 preds: ^bb35, ^bb38
    %215 = llvm.load %209 : !llvm.ptr -> i32
    %216 = arith.cmpi ne, %13, %215 : i32
    cf.cond_br %216, ^bb40, ^bb39
  ^bb38:  // pred: ^bb35
    %c3_i32_49 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_49) : (i32) -> ()
    cf.br ^bb37
  ^bb39:  // 2 preds: ^bb37, ^bb40
    %217 = llvm.call %211(%212, %191, %192, %193) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%217 : i32)
  ^bb40:  // pred: ^bb37
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 4 preds: ^bb43, ^bb45, ^bb46, ^bb53
    %218 = llvm.load %3 : !llvm.ptr -> i32
    %219 = llvm.load %4 : !llvm.ptr -> i32
    %220 = arith.cmpi ule, %218, %219 : i32
    %221 = arith.extui %220 : i1 to i32
    %c0_i32_50 = arith.constant 0 : i32
    %222 = arith.cmpi ne, %221, %c0_i32_50 : i32
    cf.cond_br %222, ^bb57, ^bb58
  ^bb42:  // pred: ^bb31
    %223 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_51 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_51 : i32
    cf.cond_br %224, ^bb44, ^bb45
  ^bb43:  // pred: ^bb31
    %225 = llvm.load %1 : !llvm.ptr -> i32
    %226 = llvm.load %2 : !llvm.ptr -> i32
    %227 = call @f184(%arg0, %225, %226) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %227, %4 : i32, !llvm.ptr
    cf.br ^bb41
  ^bb44:  // pred: ^bb42
    %228 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_52 = arith.constant 3 : i32
    %229 = arith.andi %228, %c3_i32_52 : i32
    llvm.store %229, %6 : i32, !llvm.ptr
    %230 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_53 = arith.constant 4 : i32
    %231 = arith.cmpi uge, %230, %c4_i32_53 : i32
    %232 = arith.extui %231 : i1 to i32
    %c0_i32_54 = arith.constant 0 : i32
    %233 = arith.cmpi ne, %232, %c0_i32_54 : i32
    cf.cond_br %233, ^bb47, ^bb48
  ^bb45:  // pred: ^bb42
    %c0_i32_55 = arith.constant 0 : i32
    llvm.store %c0_i32_55, %4 : i32, !llvm.ptr
    cf.br ^bb41
  ^bb46:  // 2 preds: ^bb48, ^bb49
    %234 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_56 = arith.constant 0 : i32
    %235 = arith.cmpi eq, %234, %c0_i32_56 : i32
    %236 = arith.extui %235 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %237 = arith.cmpi ne, %236, %c0_i32_57 : i32
    cf.cond_br %237, ^bb41, ^bb52
  ^bb47:  // pred: ^bb44
    %238 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %239 = arith.andi %238, %c12_i32 : i32
    llvm.store %239, %5 : i32, !llvm.ptr
    %c0_i32_58 = arith.constant 0 : i32
    llvm.store %c0_i32_58, %4 : i32, !llvm.ptr
    %c0_i32_59 = arith.constant 0 : i32
    llvm.store %c0_i32_59, %7 : i32, !llvm.ptr
    cf.br ^bb50
  ^bb48:  // pred: ^bb44
    %c0_i32_60 = arith.constant 0 : i32
    llvm.store %c0_i32_60, %4 : i32, !llvm.ptr
    %c0_i32_61 = arith.constant 0 : i32
    llvm.store %c0_i32_61, %7 : i32, !llvm.ptr
    cf.br ^bb46
  ^bb49:  // pred: ^bb51
    cf.br ^bb46
  ^bb50:  // 2 preds: ^bb47, ^bb50
    %240 = llvm.load %4 : !llvm.ptr -> i32
    %241 = llvm.load %1 : !llvm.ptr -> i32
    %242 = llvm.load %7 : !llvm.ptr -> i32
    %243 = arith.addi %241, %242 : i32
    llvm.store %243, %8 : i32, !llvm.ptr
    %c0_i64_62 = arith.constant 0 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c0_i64_62 : i64
    %246 = llvm.getelementptr %11[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load volatile %246 {alignment = 1 : i64} : !llvm.ptr -> i8
    %248 = arith.extsi %247 : i8 to i32
    %c-65_i32_63 = arith.constant -65 : i32
    %249 = arith.cmpi sgt, %248, %c-65_i32_63 : i32
    %250 = arith.extui %249 : i1 to i32
    %251 = arith.addi %240, %250 : i32
    %252 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_64 = arith.constant 1 : i32
    %253 = arith.addi %252, %c1_i32_64 : i32
    %c0_i64_65 = arith.constant 0 : i64
    %254 = arith.extui %253 : i32 to i64
    %255 = arith.addi %254, %c0_i64_65 : i64
    %256 = llvm.getelementptr %11[%255] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %257 = llvm.load volatile %256 {alignment = 1 : i64} : !llvm.ptr -> i8
    %258 = arith.extsi %257 : i8 to i32
    %c-65_i32_66 = arith.constant -65 : i32
    %259 = arith.cmpi sgt, %258, %c-65_i32_66 : i32
    %260 = arith.extui %259 : i1 to i32
    %261 = arith.addi %251, %260 : i32
    %262 = llvm.load %8 : !llvm.ptr -> i32
    %c2_i32_67 = arith.constant 2 : i32
    %263 = arith.addi %262, %c2_i32_67 : i32
    %c0_i64_68 = arith.constant 0 : i64
    %264 = arith.extui %263 : i32 to i64
    %265 = arith.addi %264, %c0_i64_68 : i64
    %266 = llvm.getelementptr %11[%265] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %267 = llvm.load volatile %266 {alignment = 1 : i64} : !llvm.ptr -> i8
    %268 = arith.extsi %267 : i8 to i32
    %c-65_i32_69 = arith.constant -65 : i32
    %269 = arith.cmpi sgt, %268, %c-65_i32_69 : i32
    %270 = arith.extui %269 : i1 to i32
    %271 = arith.addi %261, %270 : i32
    %272 = llvm.load %8 : !llvm.ptr -> i32
    %c3_i32_70 = arith.constant 3 : i32
    %273 = arith.addi %272, %c3_i32_70 : i32
    %c0_i64_71 = arith.constant 0 : i64
    %274 = arith.extui %273 : i32 to i64
    %275 = arith.addi %274, %c0_i64_71 : i64
    %276 = llvm.getelementptr %11[%275] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %277 = llvm.load volatile %276 {alignment = 1 : i64} : !llvm.ptr -> i8
    %278 = arith.extsi %277 : i8 to i32
    %c-65_i32_72 = arith.constant -65 : i32
    %279 = arith.cmpi sgt, %278, %c-65_i32_72 : i32
    %280 = arith.extui %279 : i1 to i32
    %281 = arith.addi %271, %280 : i32
    llvm.store %281, %4 : i32, !llvm.ptr
    %282 = llvm.load %5 : !llvm.ptr -> i32
    %283 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32_73 = arith.constant 4 : i32
    %284 = arith.addi %283, %c4_i32_73 : i32
    llvm.store %284, %7 : i32, !llvm.ptr
    %285 = arith.cmpi eq, %282, %284 : i32
    %286 = arith.extui %285 : i1 to i32
    %c0_i32_74 = arith.constant 0 : i32
    %287 = arith.cmpi eq, %286, %c0_i32_74 : i32
    %288 = arith.extui %287 : i1 to i32
    %c0_i32_75 = arith.constant 0 : i32
    %289 = arith.cmpi ne, %288, %c0_i32_75 : i32
    cf.cond_br %289, ^bb50, ^bb51
  ^bb51:  // pred: ^bb50
    cf.br ^bb49
  ^bb52:  // pred: ^bb46
    %290 = llvm.load %1 : !llvm.ptr -> i32
    %291 = llvm.load %7 : !llvm.ptr -> i32
    %292 = arith.addi %290, %291 : i32
    llvm.store %292, %8 : i32, !llvm.ptr
    cf.br ^bb54
  ^bb53:  // pred: ^bb55
    cf.br ^bb41
  ^bb54:  // 2 preds: ^bb52, ^bb54
    %293 = llvm.load %4 : !llvm.ptr -> i32
    %294 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_76 = arith.constant 0 : i64
    %295 = arith.extui %294 : i32 to i64
    %296 = arith.addi %295, %c0_i64_76 : i64
    %297 = llvm.getelementptr %11[%296] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %298 = llvm.load volatile %297 {alignment = 1 : i64} : !llvm.ptr -> i8
    %299 = arith.extsi %298 : i8 to i32
    %c-65_i32_77 = arith.constant -65 : i32
    %300 = arith.cmpi sgt, %299, %c-65_i32_77 : i32
    %301 = arith.extui %300 : i1 to i32
    %302 = arith.addi %293, %301 : i32
    llvm.store %302, %4 : i32, !llvm.ptr
    %303 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_78 = arith.constant 1 : i32
    %304 = arith.addi %303, %c1_i32_78 : i32
    llvm.store %304, %8 : i32, !llvm.ptr
    %305 = llvm.load %6 : !llvm.ptr -> i32
    %c-1_i32_79 = arith.constant -1 : i32
    %306 = arith.addi %305, %c-1_i32_79 : i32
    llvm.store %306, %6 : i32, !llvm.ptr
    %c0_i32_80 = arith.constant 0 : i32
    %307 = arith.cmpi ne, %306, %c0_i32_80 : i32
    cf.cond_br %307, ^bb54, ^bb55
  ^bb55:  // pred: ^bb54
    cf.br ^bb53
  ^bb56:  // pred: ^bb63
    %c1_i32_81 = arith.constant 1 : i32
    llvm.store %c1_i32_81, %4 : i32, !llvm.ptr
    %308 = llvm.load %7 : !llvm.ptr -> i32
    %309 = llvm.load %1 : !llvm.ptr -> i32
    %310 = llvm.load %2 : !llvm.ptr -> i32
    %311 = llvm.load %8 : !llvm.ptr -> i32
    %c12_i64_82 = arith.constant 12 : i64
    %312 = arith.extui %311 : i32 to i64
    %313 = arith.addi %312, %c12_i64_82 : i64
    %314 = llvm.getelementptr %11[%313] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %315 = llvm.load volatile %314 {alignment = 1 : i64} : !llvm.ptr -> i32
    %316 = arith.cmpi ult, %315, %29 : i32
    cf.cond_br %316, ^bb83, ^bb84
  ^bb57:  // pred: ^bb41
    %317 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_83 = arith.constant 20 : i64
    %318 = arith.extui %317 : i32 to i64
    %319 = arith.addi %318, %c20_i64_83 : i64
    %320 = llvm.getelementptr %11[%319] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %321 = llvm.load volatile %320 {alignment = 1 : i64} : !llvm.ptr -> i32
    %322 = llvm.load %1 : !llvm.ptr -> i32
    %323 = llvm.load %2 : !llvm.ptr -> i32
    %324 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_84 = arith.constant 24 : i64
    %325 = arith.extui %324 : i32 to i64
    %326 = arith.addi %325, %c24_i64_84 : i64
    %327 = llvm.getelementptr %11[%326] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %328 = llvm.load volatile %327 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_85 = arith.constant 12 : i64
    %329 = arith.extui %328 : i32 to i64
    %330 = arith.addi %329, %c12_i64_85 : i64
    %331 = llvm.getelementptr %11[%330] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %332 = llvm.load volatile %331 {alignment = 1 : i64} : !llvm.ptr -> i32
    %333 = arith.cmpi ult, %332, %26 : i32
    cf.cond_br %333, ^bb74, ^bb75
  ^bb58:  // pred: ^bb41
    %334 = llvm.load %3 : !llvm.ptr -> i32
    %335 = llvm.load %4 : !llvm.ptr -> i32
    %336 = arith.subi %334, %335 : i32
    llvm.store %336, %5 : i32, !llvm.ptr
    %c0_i32_86 = arith.constant 0 : i32
    llvm.store %c0_i32_86, %4 : i32, !llvm.ptr
    %337 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %338 = arith.extui %337 : i32 to i64
    %339 = arith.addi %338, %c32_i64 : i64
    %340 = llvm.getelementptr %11[%339] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %341 = llvm.load volatile %340 {alignment = 1 : i64} : !llvm.ptr -> i8
    %342 = arith.extui %341 : i8 to i32
    cf.switch %342 : i32, [
      default: ^bb59,
      0: ^bb59,
      1: ^bb61,
      2: ^bb60,
      3: ^bb59
    ]
  ^bb59:  // 5 preds: ^bb58, ^bb58, ^bb58, ^bb60, ^bb61
    %343 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_87 = arith.constant 1 : i32
    %344 = arith.addi %343, %c1_i32_87 : i32
    llvm.store %344, %4 : i32, !llvm.ptr
    %345 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %346 = arith.extui %345 : i32 to i64
    %347 = arith.addi %346, %c16_i64 : i64
    %348 = llvm.getelementptr %11[%347] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %349 = llvm.load volatile %348 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %349, %6 : i32, !llvm.ptr
    %350 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_88 = arith.constant 24 : i64
    %351 = arith.extui %350 : i32 to i64
    %352 = arith.addi %351, %c24_i64_88 : i64
    %353 = llvm.getelementptr %11[%352] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %354 = llvm.load volatile %353 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %354, %8 : i32, !llvm.ptr
    %355 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_89 = arith.constant 20 : i64
    %356 = arith.extui %355 : i32 to i64
    %357 = arith.addi %356, %c20_i64_89 : i64
    %358 = llvm.getelementptr %11[%357] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %359 = llvm.load volatile %358 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %359, %7 : i32, !llvm.ptr
    cf.br ^bb63
  ^bb60:  // pred: ^bb58
    %360 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_90 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %361 = arith.cmpi ule, %c1_i32_90, %c31_i32 : i32
    %362 = scf.if %361 -> (i32) {
      %483 = arith.shrui %360, %c1_i32_90 : i32
      scf.yield %483 : i32
    } else {
      %c0_i32_141 = arith.constant 0 : i32
      scf.yield %c0_i32_141 : i32
    }
    llvm.store %362, %4 : i32, !llvm.ptr
    %363 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_91 = arith.constant 1 : i32
    %364 = arith.addi %363, %c1_i32_91 : i32
    %c1_i32_92 = arith.constant 1 : i32
    %c31_i32_93 = arith.constant 31 : i32
    %365 = arith.cmpi ule, %c1_i32_92, %c31_i32_93 : i32
    %366 = scf.if %365 -> (i32) {
      %483 = arith.shrui %364, %c1_i32_92 : i32
      scf.yield %483 : i32
    } else {
      %c0_i32_141 = arith.constant 0 : i32
      scf.yield %c0_i32_141 : i32
    }
    llvm.store %366, %5 : i32, !llvm.ptr
    cf.br ^bb59
  ^bb61:  // pred: ^bb58
    %367 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %367, %4 : i32, !llvm.ptr
    %c0_i32_94 = arith.constant 0 : i32
    llvm.store %c0_i32_94, %5 : i32, !llvm.ptr
    cf.br ^bb59
  ^bb62:  // pred: ^bb73
    %c1_i32_95 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_95 : i32)
  ^bb63:  // 2 preds: ^bb59, ^bb71
    %368 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32_96 = arith.constant -1 : i32
    %369 = arith.addi %368, %c-1_i32_96 : i32
    llvm.store %369, %4 : i32, !llvm.ptr
    %c0_i32_97 = arith.constant 0 : i32
    %370 = arith.cmpi eq, %369, %c0_i32_97 : i32
    %371 = arith.extui %370 : i1 to i32
    %c0_i32_98 = arith.constant 0 : i32
    %372 = arith.cmpi ne, %371, %c0_i32_98 : i32
    cf.cond_br %372, ^bb56, ^bb64
  ^bb64:  // pred: ^bb63
    %373 = llvm.load %7 : !llvm.ptr -> i32
    %374 = llvm.load %6 : !llvm.ptr -> i32
    %375 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i64_99 = arith.constant 16 : i64
    %376 = arith.extui %375 : i32 to i64
    %377 = arith.addi %376, %c16_i64_99 : i64
    %378 = llvm.getelementptr %11[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i32
    %380 = arith.cmpi ult, %379, %23 : i32
    cf.cond_br %380, ^bb65, ^bb66
  ^bb65:  // 2 preds: ^bb64, ^bb66
    %381 = llvm.getelementptr inbounds %21[%379] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %382 = llvm.load %381 : !llvm.ptr -> !llvm.ptr
    %383 = llvm.ptrtoint %382 : !llvm.ptr to i64
    %c0_i64_100 = arith.constant 0 : i64
    %384 = arith.cmpi eq, %383, %c0_i64_100 : i64
    cf.cond_br %384, ^bb68, ^bb67
  ^bb66:  // pred: ^bb64
    %c3_i32_101 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_101) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %385 = llvm.getelementptr %382[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %386 = llvm.getelementptr %382[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %387 = llvm.getelementptr %382[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %388 = llvm.load %385 : !llvm.ptr -> !llvm.ptr
    %389 = llvm.load %387 : !llvm.ptr -> !llvm.ptr
    %390 = llvm.ptrtoint %388 : !llvm.ptr to i64
    %c0_i64_102 = arith.constant 0 : i64
    %391 = arith.cmpi eq, %390, %c0_i64_102 : i64
    cf.cond_br %391, ^bb70, ^bb69
  ^bb68:  // pred: ^bb65
    %c4_i32_103 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_103) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %392 = llvm.load %386 : !llvm.ptr -> i32
    %393 = arith.cmpi ne, %20, %392 : i32
    cf.cond_br %393, ^bb72, ^bb71
  ^bb70:  // pred: ^bb67
    %c3_i32_104 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_104) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // 2 preds: ^bb69, ^bb72
    %394 = llvm.call %388(%389, %373, %374) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_105 = arith.constant 0 : i32
    %395 = arith.cmpi eq, %394, %c0_i32_105 : i32
    %396 = arith.extui %395 : i1 to i32
    %c0_i32_106 = arith.constant 0 : i32
    %397 = arith.cmpi ne, %396, %c0_i32_106 : i32
    cf.cond_br %397, ^bb63, ^bb73
  ^bb72:  // pred: ^bb69
    %c5_i32_107 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_107) : (i32) -> ()
    cf.br ^bb71
  ^bb73:  // pred: ^bb71
    cf.br ^bb62
  ^bb74:  // 2 preds: ^bb57, ^bb75
    %398 = llvm.getelementptr inbounds %24[%332] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %399 = llvm.load %398 : !llvm.ptr -> !llvm.ptr
    %400 = llvm.ptrtoint %399 : !llvm.ptr to i64
    %c0_i64_108 = arith.constant 0 : i64
    %401 = arith.cmpi eq, %400, %c0_i64_108 : i64
    cf.cond_br %401, ^bb77, ^bb76
  ^bb75:  // pred: ^bb57
    %c3_i32_109 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_109) : (i32) -> ()
    cf.br ^bb74
  ^bb76:  // 2 preds: ^bb74, ^bb77
    %402 = llvm.getelementptr %399[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %403 = llvm.getelementptr %399[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %404 = llvm.getelementptr %399[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %405 = llvm.load %402 : !llvm.ptr -> !llvm.ptr
    %406 = llvm.load %404 : !llvm.ptr -> !llvm.ptr
    %407 = llvm.ptrtoint %405 : !llvm.ptr to i64
    %c0_i64_110 = arith.constant 0 : i64
    %408 = arith.cmpi eq, %407, %c0_i64_110 : i64
    cf.cond_br %408, ^bb79, ^bb78
  ^bb77:  // pred: ^bb74
    %c4_i32_111 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_111) : (i32) -> ()
    cf.br ^bb76
  ^bb78:  // 2 preds: ^bb76, ^bb79
    %409 = llvm.load %403 : !llvm.ptr -> i32
    %410 = arith.cmpi ne, %13, %409 : i32
    cf.cond_br %410, ^bb81, ^bb80
  ^bb79:  // pred: ^bb76
    %c3_i32_112 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_112) : (i32) -> ()
    cf.br ^bb78
  ^bb80:  // 2 preds: ^bb78, ^bb81
    %411 = llvm.call %405(%406, %321, %322, %323) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%411 : i32)
  ^bb81:  // pred: ^bb78
    %c5_i32_113 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_113) : (i32) -> ()
    cf.br ^bb80
  ^bb82:  // 2 preds: ^bb89, ^bb92
    %412 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%412 : i32)
  ^bb83:  // 2 preds: ^bb56, ^bb84
    %413 = llvm.getelementptr inbounds %27[%315] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %414 = llvm.load %413 : !llvm.ptr -> !llvm.ptr
    %415 = llvm.ptrtoint %414 : !llvm.ptr to i64
    %c0_i64_114 = arith.constant 0 : i64
    %416 = arith.cmpi eq, %415, %c0_i64_114 : i64
    cf.cond_br %416, ^bb86, ^bb85
  ^bb84:  // pred: ^bb56
    %c3_i32_115 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_115) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %417 = llvm.getelementptr %414[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %418 = llvm.getelementptr %414[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %419 = llvm.getelementptr %414[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %420 = llvm.load %417 : !llvm.ptr -> !llvm.ptr
    %421 = llvm.load %419 : !llvm.ptr -> !llvm.ptr
    %422 = llvm.ptrtoint %420 : !llvm.ptr to i64
    %c0_i64_116 = arith.constant 0 : i64
    %423 = arith.cmpi eq, %422, %c0_i64_116 : i64
    cf.cond_br %423, ^bb88, ^bb87
  ^bb86:  // pred: ^bb83
    %c4_i32_117 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_117) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // 2 preds: ^bb85, ^bb88
    %424 = llvm.load %418 : !llvm.ptr -> i32
    %425 = arith.cmpi ne, %13, %424 : i32
    cf.cond_br %425, ^bb90, ^bb89
  ^bb88:  // pred: ^bb85
    %c3_i32_118 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_118) : (i32) -> ()
    cf.br ^bb87
  ^bb89:  // 2 preds: ^bb87, ^bb90
    %426 = llvm.call %420(%421, %308, %309, %310) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_119 = arith.constant 0 : i32
    %427 = arith.cmpi ne, %426, %c0_i32_119 : i32
    cf.cond_br %427, ^bb82, ^bb91
  ^bb90:  // pred: ^bb87
    %c5_i32_120 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_120) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // pred: ^bb89
    %c0_i32_121 = arith.constant 0 : i32
    llvm.store %c0_i32_121, %4 : i32, !llvm.ptr
    cf.br ^bb94
  ^bb92:  // 2 preds: ^bb93, ^bb96
    %428 = llvm.load %4 : !llvm.ptr -> i32
    %429 = llvm.load %5 : !llvm.ptr -> i32
    %430 = arith.cmpi ult, %428, %429 : i32
    %431 = arith.extui %430 : i1 to i32
    llvm.store %431, %4 : i32, !llvm.ptr
    cf.br ^bb82
  ^bb93:  // pred: ^bb105
    %432 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32_122 = arith.constant -1 : i32
    %433 = arith.addi %432, %c-1_i32_122 : i32
    llvm.store %433, %4 : i32, !llvm.ptr
    cf.br ^bb92
  ^bb94:  // 2 preds: ^bb91, ^bb103
    %434 = llvm.load %5 : !llvm.ptr -> i32
    %435 = llvm.load %4 : !llvm.ptr -> i32
    %436 = arith.cmpi eq, %434, %435 : i32
    %437 = arith.extui %436 : i1 to i32
    %c0_i32_123 = arith.constant 0 : i32
    %438 = arith.cmpi eq, %437, %c0_i32_123 : i32
    %439 = arith.extui %438 : i1 to i32
    %c0_i32_124 = arith.constant 0 : i32
    %440 = arith.cmpi ne, %439, %c0_i32_124 : i32
    cf.cond_br %440, ^bb95, ^bb96
  ^bb95:  // pred: ^bb94
    %441 = llvm.load %4 : !llvm.ptr -> i32
    %c1_i32_125 = arith.constant 1 : i32
    %442 = arith.addi %441, %c1_i32_125 : i32
    llvm.store %442, %4 : i32, !llvm.ptr
    %443 = llvm.load %7 : !llvm.ptr -> i32
    %444 = llvm.load %6 : !llvm.ptr -> i32
    %445 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i64_126 = arith.constant 16 : i64
    %446 = arith.extui %445 : i32 to i64
    %447 = arith.addi %446, %c16_i64_126 : i64
    %448 = llvm.getelementptr %11[%447] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %449 = llvm.load volatile %448 {alignment = 1 : i64} : !llvm.ptr -> i32
    %450 = arith.cmpi ult, %449, %32 : i32
    cf.cond_br %450, ^bb97, ^bb98
  ^bb96:  // pred: ^bb94
    %451 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %451, %4 : i32, !llvm.ptr
    cf.br ^bb92
  ^bb97:  // 2 preds: ^bb95, ^bb98
    %452 = llvm.getelementptr inbounds %30[%449] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %453 = llvm.load %452 : !llvm.ptr -> !llvm.ptr
    %454 = llvm.ptrtoint %453 : !llvm.ptr to i64
    %c0_i64_127 = arith.constant 0 : i64
    %455 = arith.cmpi eq, %454, %c0_i64_127 : i64
    cf.cond_br %455, ^bb100, ^bb99
  ^bb98:  // pred: ^bb95
    %c3_i32_128 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_128) : (i32) -> ()
    cf.br ^bb97
  ^bb99:  // 2 preds: ^bb97, ^bb100
    %456 = llvm.getelementptr %453[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %457 = llvm.getelementptr %453[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %458 = llvm.getelementptr %453[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %459 = llvm.load %456 : !llvm.ptr -> !llvm.ptr
    %460 = llvm.load %458 : !llvm.ptr -> !llvm.ptr
    %461 = llvm.ptrtoint %459 : !llvm.ptr to i64
    %c0_i64_129 = arith.constant 0 : i64
    %462 = arith.cmpi eq, %461, %c0_i64_129 : i64
    cf.cond_br %462, ^bb102, ^bb101
  ^bb100:  // pred: ^bb97
    %c4_i32_130 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_130) : (i32) -> ()
    cf.br ^bb99
  ^bb101:  // 2 preds: ^bb99, ^bb102
    %463 = llvm.load %457 : !llvm.ptr -> i32
    %464 = arith.cmpi ne, %20, %463 : i32
    cf.cond_br %464, ^bb104, ^bb103
  ^bb102:  // pred: ^bb99
    %c3_i32_131 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_131) : (i32) -> ()
    cf.br ^bb101
  ^bb103:  // 2 preds: ^bb101, ^bb104
    %465 = llvm.call %459(%460, %443, %444) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_132 = arith.constant 0 : i32
    %466 = arith.cmpi eq, %465, %c0_i32_132 : i32
    %467 = arith.extui %466 : i1 to i32
    %c0_i32_133 = arith.constant 0 : i32
    %468 = arith.cmpi ne, %467, %c0_i32_133 : i32
    cf.cond_br %468, ^bb94, ^bb105
  ^bb104:  // pred: ^bb101
    %c5_i32_134 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_134) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // pred: ^bb103
    cf.br ^bb93
  ^bb106:  // 2 preds: ^bb3, ^bb107
    %469 = llvm.getelementptr inbounds %33[%66] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %470 = llvm.load %469 : !llvm.ptr -> !llvm.ptr
    %471 = llvm.ptrtoint %470 : !llvm.ptr to i64
    %c0_i64_135 = arith.constant 0 : i64
    %472 = arith.cmpi eq, %471, %c0_i64_135 : i64
    cf.cond_br %472, ^bb109, ^bb108
  ^bb107:  // pred: ^bb3
    %c3_i32_136 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_136) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %473 = llvm.getelementptr %470[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %474 = llvm.getelementptr %470[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %475 = llvm.getelementptr %470[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %476 = llvm.load %473 : !llvm.ptr -> !llvm.ptr
    %477 = llvm.load %475 : !llvm.ptr -> !llvm.ptr
    %478 = llvm.ptrtoint %476 : !llvm.ptr to i64
    %c0_i64_137 = arith.constant 0 : i64
    %479 = arith.cmpi eq, %478, %c0_i64_137 : i64
    cf.cond_br %479, ^bb111, ^bb110
  ^bb109:  // pred: ^bb106
    %c4_i32_138 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_138) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // 2 preds: ^bb108, ^bb111
    %480 = llvm.load %474 : !llvm.ptr -> i32
    %481 = arith.cmpi ne, %13, %480 : i32
    cf.cond_br %481, ^bb113, ^bb112
  ^bb111:  // pred: ^bb108
    %c3_i32_139 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_139) : (i32) -> ()
    cf.br ^bb110
  ^bb112:  // 2 preds: ^bb110, ^bb113
    %482 = llvm.call %476(%477, %55, %56, %57) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%482 : i32)
  ^bb113:  // pred: ^bb110
    %c5_i32_140 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_140) : (i32) -> ()
    cf.br ^bb112
  }
  func.func @f161(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %10 = arith.subi %9, %c32_i32 : i32
    llvm.store %10, %3 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %c16_i64 = arith.constant 16 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c16_i64 : i64
    %14 = llvm.getelementptr %8[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_3, %14 {alignment = 1 : i64} : i32, !llvm.ptr
    %15 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_4 = arith.constant 1 : i32
    %c4_i64 = arith.constant 4 : i64
    %16 = arith.extui %15 : i32 to i64
    %17 = arith.addi %16, %c4_i64 : i64
    %18 = llvm.getelementptr %8[%17] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_4, %18 {alignment = 1 : i64} : i32, !llvm.ptr
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_5 = arith.constant 4 : i64
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c8_i64 : i64
    %22 = llvm.getelementptr %8[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64_5, %22 {alignment = 1 : i64} : i64, !llvm.ptr
    %23 = llvm.load %3 : !llvm.ptr -> i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %25 = arith.extui %23 : i32 to i64
    %26 = arith.addi %25, %c28_i64 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c24_i64 : i64
    %32 = llvm.getelementptr %8[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %33 = llvm.load %3 : !llvm.ptr -> i32
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %35 = arith.addi %34, %c24_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %36 = arith.extui %33 : i32 to i64
    %37 = arith.addi %36, %c0_i64 : i64
    %38 = llvm.getelementptr %8[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %35, %38 {alignment = 1 : i64} : i32, !llvm.ptr
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %40 = llvm.load %2 : !llvm.ptr -> i32
    call @f156(%arg0, %39, %40) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f162(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i32
    %10 = arith.extui %9 : i32 to i64
    %c1_i32_1 = arith.constant 1 : i32
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %12 = call @f196(%arg0, %10, %c1_i32_1, %11) : (!llvm.ptr, i64, i32, i32) -> i32
    cf.br ^bb2(%12 : i32)
  ^bb2(%13: i32):  // pred: ^bb1
    return %13 : i32
  }
  func.func @f163(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %11 = arith.subi %10, %c128_i32 : i32
    llvm.store %11, %2 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c28_i64 : i64
    %15 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %3 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %17 = arith.andi %16, %c16_i32 : i32
    %c0_i32_4 = arith.constant 0 : i32
    %18 = arith.cmpi ne, %17, %c0_i32_4 : i32
    cf.cond_br %18, ^bb6, ^bb7
  ^bb2(%19: i32):  // pred: ^bb3
    return %19 : i32
  ^bb3:  // 3 preds: ^bb8, ^bb15, ^bb17
    %20 = llvm.load %2 : !llvm.ptr -> i32
    %c128_i32_5 = arith.constant 128 : i32
    %21 = arith.addi %20, %c128_i32_5 : i32
    llvm.store %21, %6 : i32, !llvm.ptr
    %22 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%22 : i32)
  ^bb4:  // pred: ^bb11
    %23 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_6 = arith.constant 128 : i32
    %24 = arith.addi %23, %c128_i32_6 : i32
    llvm.store %24, %0 : i32, !llvm.ptr
    %c129_i32 = arith.constant 129 : i32
    %25 = arith.cmpi ult, %24, %c129_i32 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_7 : i32
    cf.cond_br %27, ^bb17, ^bb18
  ^bb5:  // 2 preds: ^bb7, ^bb9
    %28 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c0_i64 : i64
    %31 = llvm.getelementptr %9[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %32, %0 : i32, !llvm.ptr
    %c0_i32_8 = arith.constant 0 : i32
    llvm.store %c0_i32_8, %3 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb6:  // pred: ^bb1
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_9 = arith.constant 0 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c0_i64_9 : i64
    %36 = llvm.getelementptr %9[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %37, %0 : i32, !llvm.ptr
    %c0_i32_10 = arith.constant 0 : i32
    llvm.store %c0_i32_10, %3 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb7:  // pred: ^bb1
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %39 = arith.andi %38, %c32_i32 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %40 = arith.cmpi ne, %39, %c0_i32_11 : i32
    cf.cond_br %40, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %41 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_12 = arith.constant 0 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c0_i64_12 : i64
    %44 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = llvm.load volatile %44 {alignment = 1 : i64} : !llvm.ptr -> i32
    %46 = arith.extui %45 : i32 to i64
    %c1_i32_13 = arith.constant 1 : i32
    %47 = llvm.load %1 : !llvm.ptr -> i32
    %48 = call @f196(%arg0, %46, %c1_i32_13, %47) : (!llvm.ptr, i64, i32, i32) -> i32
    llvm.store %48, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb9:  // no predecessors
    cf.br ^bb5
  ^bb10:  // 2 preds: ^bb6, ^bb10
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %51 = arith.addi %49, %50 : i32
    %c127_i32 = arith.constant 127 : i32
    %52 = arith.addi %51, %c127_i32 : i32
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %c15_i32 = arith.constant 15 : i32
    %54 = arith.andi %53, %c15_i32 : i32
    llvm.store %54, %4 : i32, !llvm.ptr
    %c48_i32 = arith.constant 48 : i32
    %55 = arith.ori %54, %c48_i32 : i32
    %56 = llvm.load %4 : !llvm.ptr -> i32
    %c87_i32 = arith.constant 87 : i32
    %57 = arith.addi %56, %c87_i32 : i32
    %58 = llvm.load %4 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %59 = arith.cmpi ult, %58, %c10_i32 : i32
    %60 = arith.extui %59 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %61 = arith.cmpi ne, %60, %c0_i32_14 : i32
    %62 = arith.select %61, %55, %57 : i32
    %c0_i64_15 = arith.constant 0 : i64
    %63 = arith.extui %52 : i32 to i64
    %64 = arith.addi %63, %c0_i64_15 : i64
    %65 = llvm.getelementptr %9[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = arith.trunci %62 : i32 to i8
    llvm.store volatile %66, %65 {alignment = 1 : i64} : i8, !llvm.ptr
    %67 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %68 = arith.addi %67, %c-1_i32 : i32
    llvm.store %68, %3 : i32, !llvm.ptr
    %69 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_16 = arith.constant 16 : i32
    %70 = arith.cmpi ult, %69, %c16_i32_16 : i32
    %71 = arith.extui %70 : i1 to i32
    llvm.store %71, %4 : i32, !llvm.ptr
    %72 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c31_i32 = arith.constant 31 : i32
    %73 = arith.cmpi ule, %c4_i32, %c31_i32 : i32
    %74 = scf.if %73 -> (i32) {
      %132 = arith.shrui %72, %c4_i32 : i32
      scf.yield %132 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    llvm.store %74, %0 : i32, !llvm.ptr
    %75 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %76 = arith.cmpi eq, %75, %c0_i32_17 : i32
    %77 = arith.extui %76 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %78 = arith.cmpi ne, %77, %c0_i32_18 : i32
    cf.cond_br %78, ^bb10, ^bb11
  ^bb11:  // pred: ^bb10
    cf.br ^bb4
  ^bb12:  // pred: ^bb14
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_19 = arith.constant 128 : i32
    %80 = arith.addi %79, %c128_i32_19 : i32
    llvm.store %80, %0 : i32, !llvm.ptr
    %c129_i32_20 = arith.constant 129 : i32
    %81 = arith.cmpi ult, %80, %c129_i32_20 : i32
    %82 = arith.extui %81 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %83 = arith.cmpi ne, %82, %c0_i32_21 : i32
    cf.cond_br %83, ^bb15, ^bb16
  ^bb13:  // 2 preds: ^bb5, ^bb13
    %84 = llvm.load %2 : !llvm.ptr -> i32
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %86 = arith.addi %84, %85 : i32
    %c127_i32_22 = arith.constant 127 : i32
    %87 = arith.addi %86, %c127_i32_22 : i32
    %88 = llvm.load %0 : !llvm.ptr -> i32
    %c15_i32_23 = arith.constant 15 : i32
    %89 = arith.andi %88, %c15_i32_23 : i32
    llvm.store %89, %4 : i32, !llvm.ptr
    %c48_i32_24 = arith.constant 48 : i32
    %90 = arith.ori %89, %c48_i32_24 : i32
    %91 = llvm.load %4 : !llvm.ptr -> i32
    %c55_i32 = arith.constant 55 : i32
    %92 = arith.addi %91, %c55_i32 : i32
    %93 = llvm.load %4 : !llvm.ptr -> i32
    %c10_i32_25 = arith.constant 10 : i32
    %94 = arith.cmpi ult, %93, %c10_i32_25 : i32
    %95 = arith.extui %94 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %96 = arith.cmpi ne, %95, %c0_i32_26 : i32
    %97 = arith.select %96, %90, %92 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %98 = arith.extui %87 : i32 to i64
    %99 = arith.addi %98, %c0_i64_27 : i64
    %100 = llvm.getelementptr %9[%99] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %101 = arith.trunci %97 : i32 to i8
    llvm.store volatile %101, %100 {alignment = 1 : i64} : i8, !llvm.ptr
    %102 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32_28 = arith.constant -1 : i32
    %103 = arith.addi %102, %c-1_i32_28 : i32
    llvm.store %103, %3 : i32, !llvm.ptr
    %104 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32_29 = arith.constant 16 : i32
    %105 = arith.cmpi ult, %104, %c16_i32_29 : i32
    %106 = arith.extui %105 : i1 to i32
    llvm.store %106, %4 : i32, !llvm.ptr
    %107 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_30 = arith.constant 4 : i32
    %c31_i32_31 = arith.constant 31 : i32
    %108 = arith.cmpi ule, %c4_i32_30, %c31_i32_31 : i32
    %109 = scf.if %108 -> (i32) {
      %132 = arith.shrui %107, %c4_i32_30 : i32
      scf.yield %132 : i32
    } else {
      %c0_i32_46 = arith.constant 0 : i32
      scf.yield %c0_i32_46 : i32
    }
    llvm.store %109, %0 : i32, !llvm.ptr
    %110 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_32 = arith.constant 0 : i32
    %111 = arith.cmpi eq, %110, %c0_i32_32 : i32
    %112 = arith.extui %111 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %113 = arith.cmpi ne, %112, %c0_i32_33 : i32
    cf.cond_br %113, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // pred: ^bb12
    %114 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_34 = arith.constant 1 : i32
    %c1051212_i32 = arith.constant 1051212 : i32
    %c2_i32 = arith.constant 2 : i32
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %117 = arith.addi %115, %116 : i32
    %c128_i32_35 = arith.constant 128 : i32
    %118 = arith.addi %117, %c128_i32_35 : i32
    %c0_i32_36 = arith.constant 0 : i32
    %119 = llvm.load %3 : !llvm.ptr -> i32
    %120 = arith.subi %c0_i32_36, %119 : i32
    %121 = call @f182(%arg0, %114, %c1_i32_34, %c1051212_i32, %c2_i32, %118, %120) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %121, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb16:  // pred: ^bb12
    %122 = llvm.load %0 : !llvm.ptr -> i32
    %c128_i32_37 = arith.constant 128 : i32
    %c1051196_i32 = arith.constant 1051196 : i32
    call @f157(%arg0, %122, %c128_i32_37, %c1051196_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb17:  // pred: ^bb4
    %123 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_38 = arith.constant 1 : i32
    %c1051212_i32_39 = arith.constant 1051212 : i32
    %c2_i32_40 = arith.constant 2 : i32
    %124 = llvm.load %2 : !llvm.ptr -> i32
    %125 = llvm.load %3 : !llvm.ptr -> i32
    %126 = arith.addi %124, %125 : i32
    %c128_i32_41 = arith.constant 128 : i32
    %127 = arith.addi %126, %c128_i32_41 : i32
    %c0_i32_42 = arith.constant 0 : i32
    %128 = llvm.load %3 : !llvm.ptr -> i32
    %129 = arith.subi %c0_i32_42, %128 : i32
    %130 = call @f182(%arg0, %123, %c1_i32_38, %c1051212_i32_39, %c2_i32_40, %127, %129) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %130, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb18:  // pred: ^bb4
    %131 = llvm.load %0 : !llvm.ptr -> i32
    %c128_i32_43 = arith.constant 128 : i32
    %c1051196_i32_44 = arith.constant 1051196 : i32
    call @f157(%arg0, %131, %c128_i32_43, %c1051196_i32_44) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_45 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_45) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f164(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %15 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %15[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.load %18 : !llvm.ptr -> i32
    %20 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %23 = llvm.load %21 : !llvm.ptr -> i64
    %24 = arith.trunci %23 : i64 to i32
    %25 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.load %25 : !llvm.ptr -> i32
    %27 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %21 : !llvm.ptr -> i64
    %29 = arith.trunci %28 : i64 to i32
    %30 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.load %21 : !llvm.ptr -> i64
    %32 = arith.trunci %31 : i64 to i32
    %33 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.load %21 : !llvm.ptr -> i64
    %35 = arith.trunci %34 : i64 to i32
    %36 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %21 : !llvm.ptr -> i64
    %38 = arith.trunci %37 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %39 = llvm.load %14 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %40 = arith.subi %39, %c48_i32 : i32
    llvm.store %40, %3 : i32, !llvm.ptr
    llvm.store %40, %14 : i32, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c44_i64 = arith.constant 44 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c44_i64 : i64
    %44 = llvm.getelementptr %17[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %45 = arith.trunci %c3_i32 : i32 to i8
    llvm.store volatile %45, %44 {alignment = 1 : i64} : i8, !llvm.ptr
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %c28_i64 = arith.constant 28 : i64
    %47 = arith.extui %46 : i32 to i64
    %48 = arith.addi %47, %c28_i64 : i64
    %49 = llvm.getelementptr %17[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c32_i32, %49 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_12 = arith.constant 0 : i32
    llvm.store %c0_i32_12, %4 : i32, !llvm.ptr
    %50 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c40_i64 = arith.constant 40 : i64
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.addi %51, %c40_i64 : i64
    %53 = llvm.getelementptr %17[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_13, %53 {alignment = 1 : i64} : i32, !llvm.ptr
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %55 = llvm.load %1 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %56 = arith.extui %54 : i32 to i64
    %57 = arith.addi %56, %c36_i64 : i64
    %58 = llvm.getelementptr %17[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %60 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %61 = arith.extui %59 : i32 to i64
    %62 = arith.addi %61, %c32_i64 : i64
    %63 = llvm.getelementptr %17[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %60, %63 {alignment = 1 : i64} : i32, !llvm.ptr
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %c20_i64 = arith.constant 20 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c20_i64 : i64
    %67 = llvm.getelementptr %17[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_14, %67 {alignment = 1 : i64} : i32, !llvm.ptr
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_15 = arith.constant 0 : i32
    %c12_i64 = arith.constant 12 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c12_i64 : i64
    %71 = llvm.getelementptr %17[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i32_15, %71 {alignment = 1 : i64} : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c16_i64 : i64
    %75 = llvm.getelementptr %17[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %76, %5 : i32, !llvm.ptr
    %c0_i32_16 = arith.constant 0 : i32
    %77 = arith.cmpi ne, %76, %c0_i32_16 : i32
    cf.cond_br %77, ^bb7, ^bb8
  ^bb2(%78: i32):  // pred: ^bb3
    return %78 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %79 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_17 = arith.constant 48 : i32
    %80 = arith.addi %79, %c48_i32_17 : i32
    llvm.store %80, %14 : i32, !llvm.ptr
    %81 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%81 : i32)
  ^bb4:  // 2 preds: ^bb6, ^bb72
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // 5 preds: ^bb20, ^bb29, ^bb44, ^bb61, ^bb74
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 4 preds: ^bb7, ^bb8, ^bb32, ^bb34
    %82 = llvm.load %4 : !llvm.ptr -> i32
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %84 = arith.extui %83 : i32 to i64
    %85 = arith.addi %84, %c4_i64 : i64
    %86 = llvm.getelementptr %17[%85] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %87 = llvm.load volatile %86 {alignment = 1 : i64} : !llvm.ptr -> i32
    %88 = arith.cmpi uge, %82, %87 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_20 : i32
    cf.cond_br %90, ^bb4, ^bb65
  ^bb7:  // 2 preds: ^bb1, ^bb10
    %91 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64_21 = arith.constant 20 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c20_i64_21 : i64
    %94 = llvm.getelementptr %17[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %c0_i32_22 = arith.constant 0 : i32
    %96 = arith.cmpi eq, %95, %c0_i32_22 : i32
    %97 = arith.extui %96 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %98 = arith.cmpi ne, %97, %c0_i32_23 : i32
    cf.cond_br %98, ^bb6, ^bb33
  ^bb8:  // pred: ^bb1
    %99 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_24 = arith.constant 12 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c12_i64_24 : i64
    %102 = llvm.getelementptr %17[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %103, %0 : i32, !llvm.ptr
    %c0_i32_25 = arith.constant 0 : i32
    %104 = arith.cmpi eq, %103, %c0_i32_25 : i32
    %105 = arith.extui %104 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %106 = arith.cmpi ne, %105, %c0_i32_26 : i32
    cf.cond_br %106, ^bb6, ^bb9
  ^bb9:  // pred: ^bb8
    %107 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %108 = arith.extui %107 : i32 to i64
    %109 = arith.addi %108, %c8_i64 : i64
    %110 = llvm.getelementptr %17[%109] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %111 = llvm.load volatile %110 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %111, %1 : i32, !llvm.ptr
    %112 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32_27 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %113 = arith.cmpi ule, %c3_i32_27, %c31_i32 : i32
    %114 = scf.if %113 -> (i32) {
      %472 = arith.shli %112, %c3_i32_27 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %114, %6 : i32, !llvm.ptr
    %115 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %116 = arith.addi %115, %c-1_i32 : i32
    %c536870911_i32 = arith.constant 536870911 : i32
    %117 = arith.andi %116, %c536870911_i32 : i32
    %c1_i32_28 = arith.constant 1 : i32
    %118 = arith.addi %117, %c1_i32_28 : i32
    llvm.store %118, %4 : i32, !llvm.ptr
    %119 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %120 = arith.extui %119 : i32 to i64
    %121 = arith.addi %120, %c0_i64 : i64
    %122 = llvm.getelementptr %17[%121] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %123 = llvm.load volatile %122 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %123, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb10:  // no predecessors
    cf.br ^bb7
  ^bb11:  // 2 preds: ^bb9, ^bb31
    %124 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %125 = arith.addi %124, %c4_i32 : i32
    %c0_i64_29 = arith.constant 0 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c0_i64_29 : i64
    %128 = llvm.getelementptr %17[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %129 = llvm.load volatile %128 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %129, %7 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %130 = arith.cmpi eq, %129, %c0_i32_30 : i32
    %131 = arith.extui %130 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %132 = arith.cmpi ne, %131, %c0_i32_31 : i32
    cf.cond_br %132, ^bb12, ^bb13
  ^bb12:  // 2 preds: ^bb11, ^bb22
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %134 = arith.extui %133 : i32 to i64
    %135 = arith.addi %134, %c0_i64_32 : i64
    %136 = llvm.getelementptr %17[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = llvm.load volatile %136 {alignment = 1 : i64} : !llvm.ptr -> i32
    %138 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %139 = arith.addi %138, %c12_i32 : i32
    %140 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_33 = arith.constant 4 : i64
    %141 = arith.extui %140 : i32 to i64
    %142 = arith.addi %141, %c4_i64_33 : i64
    %143 = llvm.getelementptr %17[%142] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %144 = llvm.load volatile %143 {alignment = 1 : i64} : !llvm.ptr -> i32
    %145 = arith.cmpi ult, %144, %29 : i32
    cf.cond_br %145, ^bb23, ^bb24
  ^bb13:  // pred: ^bb11
    %146 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_34 = arith.constant 32 : i64
    %147 = arith.extui %146 : i32 to i64
    %148 = arith.addi %147, %c32_i64_34 : i64
    %149 = llvm.getelementptr %17[%148] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %150 = llvm.load volatile %149 {alignment = 1 : i64} : !llvm.ptr -> i32
    %151 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c0_i64_35 : i64
    %154 = llvm.getelementptr %17[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i32
    %156 = llvm.load %7 : !llvm.ptr -> i32
    %157 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_36 = arith.constant 36 : i64
    %158 = arith.extui %157 : i32 to i64
    %159 = arith.addi %158, %c36_i64_36 : i64
    %160 = llvm.getelementptr %17[%159] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %161 = llvm.load volatile %160 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_37 = arith.constant 12 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c12_i64_37 : i64
    %164 = llvm.getelementptr %17[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    %166 = arith.cmpi ult, %165, %24 : i32
    cf.cond_br %166, ^bb14, ^bb15
  ^bb14:  // 2 preds: ^bb13, ^bb15
    %167 = llvm.getelementptr inbounds %22[%165] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %168 = llvm.load %167 : !llvm.ptr -> !llvm.ptr
    %169 = llvm.ptrtoint %168 : !llvm.ptr to i64
    %c0_i64_38 = arith.constant 0 : i64
    %170 = arith.cmpi eq, %169, %c0_i64_38 : i64
    cf.cond_br %170, ^bb17, ^bb16
  ^bb15:  // pred: ^bb13
    %c3_i32_39 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_39) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %171 = llvm.getelementptr %168[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %172 = llvm.getelementptr %168[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %173 = llvm.getelementptr %168[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %174 = llvm.load %171 : !llvm.ptr -> !llvm.ptr
    %175 = llvm.load %173 : !llvm.ptr -> !llvm.ptr
    %176 = llvm.ptrtoint %174 : !llvm.ptr to i64
    %c0_i64_40 = arith.constant 0 : i64
    %177 = arith.cmpi eq, %176, %c0_i64_40 : i64
    cf.cond_br %177, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_41 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_41) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %178 = llvm.load %172 : !llvm.ptr -> i32
    %179 = arith.cmpi ne, %19, %178 : i32
    cf.cond_br %179, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_42 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_42) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %180 = llvm.call %174(%175, %150, %155, %156) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %181 = arith.cmpi ne, %180, %c0_i32_43 : i32
    cf.cond_br %181, ^bb5, ^bb22
  ^bb21:  // pred: ^bb18
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // pred: ^bb20
    cf.br ^bb12
  ^bb23:  // 2 preds: ^bb12, ^bb24
    %182 = llvm.getelementptr inbounds %27[%144] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %183 = llvm.load %182 : !llvm.ptr -> !llvm.ptr
    %184 = llvm.ptrtoint %183 : !llvm.ptr to i64
    %c0_i64_44 = arith.constant 0 : i64
    %185 = arith.cmpi eq, %184, %c0_i64_44 : i64
    cf.cond_br %185, ^bb26, ^bb25
  ^bb24:  // pred: ^bb12
    %c3_i32_45 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_45) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb23, ^bb26
    %186 = llvm.getelementptr %183[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %187 = llvm.getelementptr %183[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %188 = llvm.getelementptr %183[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %189 = llvm.load %186 : !llvm.ptr -> !llvm.ptr
    %190 = llvm.load %188 : !llvm.ptr -> !llvm.ptr
    %191 = llvm.ptrtoint %189 : !llvm.ptr to i64
    %c0_i64_46 = arith.constant 0 : i64
    %192 = arith.cmpi eq, %191, %c0_i64_46 : i64
    cf.cond_br %192, ^bb28, ^bb27
  ^bb26:  // pred: ^bb23
    %c4_i32_47 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_47) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %193 = llvm.load %187 : !llvm.ptr -> i32
    %194 = arith.cmpi ne, %26, %193 : i32
    cf.cond_br %194, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c3_i32_48 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_48) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %195 = llvm.call %189(%190, %137, %139) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %196 = arith.cmpi ne, %195, %c0_i32_49 : i32
    cf.cond_br %196, ^bb5, ^bb31
  ^bb30:  // pred: ^bb27
    %c5_i32_50 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_50) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // pred: ^bb29
    %197 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %198 = arith.addi %197, %c8_i32 : i32
    llvm.store %198, %1 : i32, !llvm.ptr
    %199 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_51 = arith.constant 8 : i32
    %200 = arith.addi %199, %c8_i32_51 : i32
    llvm.store %200, %0 : i32, !llvm.ptr
    %201 = llvm.load %6 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %202 = arith.addi %201, %c-8_i32 : i32
    llvm.store %202, %6 : i32, !llvm.ptr
    %c0_i32_52 = arith.constant 0 : i32
    %203 = arith.cmpi ne, %202, %c0_i32_52 : i32
    cf.cond_br %203, ^bb11, ^bb32
  ^bb32:  // pred: ^bb31
    cf.br ^bb6
  ^bb33:  // pred: ^bb7
    %204 = llvm.load %1 : !llvm.ptr -> i32
    %c5_i32_53 = arith.constant 5 : i32
    %c31_i32_54 = arith.constant 31 : i32
    %205 = arith.cmpi ule, %c5_i32_53, %c31_i32_54 : i32
    %206 = scf.if %205 -> (i32) {
      %472 = arith.shli %204, %c5_i32_53 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %206, %8 : i32, !llvm.ptr
    %207 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_55 = arith.constant -1 : i32
    %208 = arith.addi %207, %c-1_i32_55 : i32
    %c134217727_i32 = arith.constant 134217727 : i32
    %209 = arith.andi %208, %c134217727_i32 : i32
    %c1_i32_56 = arith.constant 1 : i32
    %210 = arith.addi %209, %c1_i32_56 : i32
    llvm.store %210, %4 : i32, !llvm.ptr
    %211 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_57 = arith.constant 8 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c8_i64_57 : i64
    %214 = llvm.getelementptr %17[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load volatile %214 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %215, %9 : i32, !llvm.ptr
    %216 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_58 = arith.constant 0 : i64
    %217 = arith.extui %216 : i32 to i64
    %218 = arith.addi %217, %c0_i64_58 : i64
    %219 = llvm.getelementptr %17[%218] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %220 = llvm.load volatile %219 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %220, %0 : i32, !llvm.ptr
    %c0_i32_59 = arith.constant 0 : i32
    llvm.store %c0_i32_59, %6 : i32, !llvm.ptr
    cf.br ^bb35
  ^bb34:  // pred: ^bb64
    cf.br ^bb6
  ^bb35:  // 2 preds: ^bb33, ^bb63
    %221 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_60 = arith.constant 4 : i32
    %222 = arith.addi %221, %c4_i32_60 : i32
    %c0_i64_61 = arith.constant 0 : i64
    %223 = arith.extui %222 : i32 to i64
    %224 = arith.addi %223, %c0_i64_61 : i64
    %225 = llvm.getelementptr %17[%224] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %226 = llvm.load volatile %225 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %226, %1 : i32, !llvm.ptr
    %c0_i32_62 = arith.constant 0 : i32
    %227 = arith.cmpi eq, %226, %c0_i32_62 : i32
    %228 = arith.extui %227 : i1 to i32
    %c0_i32_63 = arith.constant 0 : i32
    %229 = arith.cmpi ne, %228, %c0_i32_63 : i32
    cf.cond_br %229, ^bb36, ^bb37
  ^bb36:  // 2 preds: ^bb35, ^bb46
    %230 = llvm.load %3 : !llvm.ptr -> i32
    %231 = llvm.load %5 : !llvm.ptr -> i32
    %232 = llvm.load %6 : !llvm.ptr -> i32
    %233 = arith.addi %231, %232 : i32
    llvm.store %233, %1 : i32, !llvm.ptr
    %c16_i32 = arith.constant 16 : i32
    %234 = arith.addi %233, %c16_i32 : i32
    %c0_i64_64 = arith.constant 0 : i64
    %235 = arith.extui %234 : i32 to i64
    %236 = arith.addi %235, %c0_i64_64 : i64
    %237 = llvm.getelementptr %17[%236] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %238 = llvm.load volatile %237 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c28_i64_65 = arith.constant 28 : i64
    %239 = arith.extui %230 : i32 to i64
    %240 = arith.addi %239, %c28_i64_65 : i64
    %241 = llvm.getelementptr %17[%240] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %238, %241 {alignment = 1 : i64} : i32, !llvm.ptr
    %242 = llvm.load %3 : !llvm.ptr -> i32
    %243 = llvm.load %1 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %244 = arith.addi %243, %c28_i32 : i32
    %c0_i64_66 = arith.constant 0 : i64
    %245 = arith.extui %244 : i32 to i64
    %246 = arith.addi %245, %c0_i64_66 : i64
    %247 = llvm.getelementptr %17[%246] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %248 = llvm.load volatile %247 {alignment = 1 : i64} : !llvm.ptr -> i8
    %249 = arith.extui %248 : i8 to i32
    %c44_i64_67 = arith.constant 44 : i64
    %250 = arith.extui %242 : i32 to i64
    %251 = arith.addi %250, %c44_i64_67 : i64
    %252 = llvm.getelementptr %17[%251] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %253 = arith.trunci %249 : i32 to i8
    llvm.store volatile %253, %252 {alignment = 1 : i64} : i8, !llvm.ptr
    %254 = llvm.load %3 : !llvm.ptr -> i32
    %255 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %256 = arith.addi %255, %c24_i32 : i32
    %c0_i64_68 = arith.constant 0 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c0_i64_68 : i64
    %259 = llvm.getelementptr %17[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c40_i64_69 = arith.constant 40 : i64
    %261 = arith.extui %254 : i32 to i64
    %262 = arith.addi %261, %c40_i64_69 : i64
    %263 = llvm.getelementptr %17[%262] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %260, %263 {alignment = 1 : i64} : i32, !llvm.ptr
    %264 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_70 = arith.constant 12 : i32
    %265 = arith.addi %264, %c12_i32_70 : i32
    %c0_i64_71 = arith.constant 0 : i64
    %266 = arith.extui %265 : i32 to i64
    %267 = arith.addi %266, %c0_i64_71 : i64
    %268 = llvm.getelementptr %17[%267] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %269 = llvm.load volatile %268 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %269, %7 : i32, !llvm.ptr
    %c0_i32_72 = arith.constant 0 : i32
    llvm.store %c0_i32_72, %10 : i32, !llvm.ptr
    %c0_i32_73 = arith.constant 0 : i32
    llvm.store %c0_i32_73, %11 : i32, !llvm.ptr
    %270 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_74 = arith.constant 8 : i32
    %271 = arith.addi %270, %c8_i32_74 : i32
    %c0_i64_75 = arith.constant 0 : i64
    %272 = arith.extui %271 : i32 to i64
    %273 = arith.addi %272, %c0_i64_75 : i64
    %274 = llvm.getelementptr %17[%273] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %275 = llvm.load volatile %274 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %275 : i32, [
      default: ^bb48,
      0: ^bb48,
      1: ^bb49,
      2: ^bb47
    ]
  ^bb37:  // pred: ^bb35
    %276 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_76 = arith.constant 32 : i64
    %277 = arith.extui %276 : i32 to i64
    %278 = arith.addi %277, %c32_i64_76 : i64
    %279 = llvm.getelementptr %17[%278] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %280 = llvm.load volatile %279 {alignment = 1 : i64} : !llvm.ptr -> i32
    %281 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_77 = arith.constant 0 : i64
    %282 = arith.extui %281 : i32 to i64
    %283 = arith.addi %282, %c0_i64_77 : i64
    %284 = llvm.getelementptr %17[%283] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %285 = llvm.load volatile %284 {alignment = 1 : i64} : !llvm.ptr -> i32
    %286 = llvm.load %1 : !llvm.ptr -> i32
    %287 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_78 = arith.constant 36 : i64
    %288 = arith.extui %287 : i32 to i64
    %289 = arith.addi %288, %c36_i64_78 : i64
    %290 = llvm.getelementptr %17[%289] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %291 = llvm.load volatile %290 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_79 = arith.constant 12 : i64
    %292 = arith.extui %291 : i32 to i64
    %293 = arith.addi %292, %c12_i64_79 : i64
    %294 = llvm.getelementptr %17[%293] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %295 = llvm.load volatile %294 {alignment = 1 : i64} : !llvm.ptr -> i32
    %296 = arith.cmpi ult, %295, %32 : i32
    cf.cond_br %296, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %297 = llvm.getelementptr inbounds %30[%295] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %298 = llvm.load %297 : !llvm.ptr -> !llvm.ptr
    %299 = llvm.ptrtoint %298 : !llvm.ptr to i64
    %c0_i64_80 = arith.constant 0 : i64
    %300 = arith.cmpi eq, %299, %c0_i64_80 : i64
    cf.cond_br %300, ^bb41, ^bb40
  ^bb39:  // pred: ^bb37
    %c3_i32_81 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_81) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %301 = llvm.getelementptr %298[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %302 = llvm.getelementptr %298[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %303 = llvm.getelementptr %298[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %304 = llvm.load %301 : !llvm.ptr -> !llvm.ptr
    %305 = llvm.load %303 : !llvm.ptr -> !llvm.ptr
    %306 = llvm.ptrtoint %304 : !llvm.ptr to i64
    %c0_i64_82 = arith.constant 0 : i64
    %307 = arith.cmpi eq, %306, %c0_i64_82 : i64
    cf.cond_br %307, ^bb43, ^bb42
  ^bb41:  // pred: ^bb38
    %c4_i32_83 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_83) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %308 = llvm.load %302 : !llvm.ptr -> i32
    %309 = arith.cmpi ne, %19, %308 : i32
    cf.cond_br %309, ^bb45, ^bb44
  ^bb43:  // pred: ^bb40
    %c3_i32_84 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_84) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %310 = llvm.call %304(%305, %280, %285, %286) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_85 = arith.constant 0 : i32
    %311 = arith.cmpi ne, %310, %c0_i32_85 : i32
    cf.cond_br %311, ^bb5, ^bb46
  ^bb45:  // pred: ^bb42
    %c5_i32_86 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_86) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // pred: ^bb44
    cf.br ^bb36
  ^bb47:  // 3 preds: ^bb36, ^bb48, ^bb49
    %312 = llvm.load %3 : !llvm.ptr -> i32
    %313 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i64_87 = arith.constant 16 : i64
    %314 = arith.extui %312 : i32 to i64
    %315 = arith.addi %314, %c16_i64_87 : i64
    %316 = llvm.getelementptr %17[%315] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %313, %316 {alignment = 1 : i64} : i32, !llvm.ptr
    %317 = llvm.load %3 : !llvm.ptr -> i32
    %318 = llvm.load %11 : !llvm.ptr -> i32
    %c12_i64_88 = arith.constant 12 : i64
    %319 = arith.extui %317 : i32 to i64
    %320 = arith.addi %319, %c12_i64_88 : i64
    %321 = llvm.getelementptr %17[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %318, %321 {alignment = 1 : i64} : i32, !llvm.ptr
    %322 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_89 = arith.constant 4 : i32
    %323 = arith.addi %322, %c4_i32_89 : i32
    %c0_i64_90 = arith.constant 0 : i64
    %324 = arith.extui %323 : i32 to i64
    %325 = arith.addi %324, %c0_i64_90 : i64
    %326 = llvm.getelementptr %17[%325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %327 = llvm.load volatile %326 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %327, %7 : i32, !llvm.ptr
    %328 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_91 = arith.constant 0 : i64
    %329 = arith.extui %328 : i32 to i64
    %330 = arith.addi %329, %c0_i64_91 : i64
    %331 = llvm.getelementptr %17[%330] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %332 = llvm.load volatile %331 {alignment = 1 : i64} : !llvm.ptr -> i32
    cf.switch %332 : i32, [
      default: ^bb52,
      0: ^bb52,
      1: ^bb53,
      2: ^bb51
    ]
  ^bb48:  // 3 preds: ^bb36, ^bb36, ^bb50
    %c1_i32_92 = arith.constant 1 : i32
    llvm.store %c1_i32_92, %11 : i32, !llvm.ptr
    cf.br ^bb47
  ^bb49:  // pred: ^bb36
    %333 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_93 = arith.constant 3 : i32
    %c31_i32_94 = arith.constant 31 : i32
    %334 = arith.cmpi ule, %c3_i32_93, %c31_i32_94 : i32
    %335 = scf.if %334 -> (i32) {
      %472 = arith.shli %333, %c3_i32_93 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %335, %12 : i32, !llvm.ptr
    %c0_i32_95 = arith.constant 0 : i32
    llvm.store %c0_i32_95, %11 : i32, !llvm.ptr
    %336 = llvm.load %9 : !llvm.ptr -> i32
    %337 = llvm.load %12 : !llvm.ptr -> i32
    %338 = arith.addi %336, %337 : i32
    llvm.store %338, %12 : i32, !llvm.ptr
    %c4_i64_96 = arith.constant 4 : i64
    %339 = arith.extui %338 : i32 to i64
    %340 = arith.addi %339, %c4_i64_96 : i64
    %341 = llvm.getelementptr %17[%340] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %342 = llvm.load volatile %341 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_97 = arith.constant 0 : i32
    %343 = arith.cmpi ne, %342, %c0_i32_97 : i32
    cf.cond_br %343, ^bb47, ^bb50
  ^bb50:  // pred: ^bb49
    %344 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_98 = arith.constant 0 : i64
    %345 = arith.extui %344 : i32 to i64
    %346 = arith.addi %345, %c0_i64_98 : i64
    %347 = llvm.getelementptr %17[%346] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %348 = llvm.load volatile %347 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %348, %7 : i32, !llvm.ptr
    cf.br ^bb48
  ^bb51:  // 3 preds: ^bb47, ^bb52, ^bb53
    %349 = llvm.load %3 : !llvm.ptr -> i32
    %350 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %351 = arith.extui %349 : i32 to i64
    %352 = arith.addi %351, %c24_i64 : i64
    %353 = llvm.getelementptr %17[%352] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %350, %353 {alignment = 1 : i64} : i32, !llvm.ptr
    %354 = llvm.load %3 : !llvm.ptr -> i32
    %355 = llvm.load %10 : !llvm.ptr -> i32
    %c20_i64_99 = arith.constant 20 : i64
    %356 = arith.extui %354 : i32 to i64
    %357 = arith.addi %356, %c20_i64_99 : i64
    %358 = llvm.getelementptr %17[%357] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %355, %358 {alignment = 1 : i64} : i32, !llvm.ptr
    %359 = llvm.load %9 : !llvm.ptr -> i32
    %360 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %361 = arith.addi %360, %c20_i32 : i32
    %c0_i64_100 = arith.constant 0 : i64
    %362 = arith.extui %361 : i32 to i64
    %363 = arith.addi %362, %c0_i64_100 : i64
    %364 = llvm.getelementptr %17[%363] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %365 = llvm.load volatile %364 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c3_i32_101 = arith.constant 3 : i32
    %c31_i32_102 = arith.constant 31 : i32
    %366 = arith.cmpi ule, %c3_i32_101, %c31_i32_102 : i32
    %367 = scf.if %366 -> (i32) {
      %472 = arith.shli %365, %c3_i32_101 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    %368 = arith.addi %359, %367 : i32
    llvm.store %368, %1 : i32, !llvm.ptr
    %c0_i64_103 = arith.constant 0 : i64
    %369 = arith.extui %368 : i32 to i64
    %370 = arith.addi %369, %c0_i64_103 : i64
    %371 = llvm.getelementptr %17[%370] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %372 = llvm.load volatile %371 {alignment = 1 : i64} : !llvm.ptr -> i32
    %373 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32_104 = arith.constant 12 : i32
    %374 = arith.addi %373, %c12_i32_104 : i32
    %375 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_105 = arith.constant 4 : i64
    %376 = arith.extui %375 : i32 to i64
    %377 = arith.addi %376, %c4_i64_105 : i64
    %378 = llvm.getelementptr %17[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i32
    %380 = arith.cmpi ult, %379, %35 : i32
    cf.cond_br %380, ^bb55, ^bb56
  ^bb52:  // 3 preds: ^bb47, ^bb47, ^bb54
    %c1_i32_106 = arith.constant 1 : i32
    llvm.store %c1_i32_106, %10 : i32, !llvm.ptr
    cf.br ^bb51
  ^bb53:  // pred: ^bb47
    %381 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_107 = arith.constant 3 : i32
    %c31_i32_108 = arith.constant 31 : i32
    %382 = arith.cmpi ule, %c3_i32_107, %c31_i32_108 : i32
    %383 = scf.if %382 -> (i32) {
      %472 = arith.shli %381, %c3_i32_107 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    llvm.store %383, %11 : i32, !llvm.ptr
    %384 = llvm.load %9 : !llvm.ptr -> i32
    %385 = llvm.load %11 : !llvm.ptr -> i32
    %386 = arith.addi %384, %385 : i32
    llvm.store %386, %11 : i32, !llvm.ptr
    %c4_i64_109 = arith.constant 4 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c4_i64_109 : i64
    %389 = llvm.getelementptr %17[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_110 = arith.constant 0 : i32
    %391 = arith.cmpi ne, %390, %c0_i32_110 : i32
    cf.cond_br %391, ^bb51, ^bb54
  ^bb54:  // pred: ^bb53
    %392 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i64_111 = arith.constant 0 : i64
    %393 = arith.extui %392 : i32 to i64
    %394 = arith.addi %393, %c0_i64_111 : i64
    %395 = llvm.getelementptr %17[%394] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %396 = llvm.load volatile %395 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %396, %7 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb55:  // 2 preds: ^bb51, ^bb56
    %397 = llvm.getelementptr inbounds %33[%379] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %398 = llvm.load %397 : !llvm.ptr -> !llvm.ptr
    %399 = llvm.ptrtoint %398 : !llvm.ptr to i64
    %c0_i64_112 = arith.constant 0 : i64
    %400 = arith.cmpi eq, %399, %c0_i64_112 : i64
    cf.cond_br %400, ^bb58, ^bb57
  ^bb56:  // pred: ^bb51
    %c3_i32_113 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_113) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %401 = llvm.getelementptr %398[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %402 = llvm.getelementptr %398[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %403 = llvm.getelementptr %398[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %404 = llvm.load %401 : !llvm.ptr -> !llvm.ptr
    %405 = llvm.load %403 : !llvm.ptr -> !llvm.ptr
    %406 = llvm.ptrtoint %404 : !llvm.ptr to i64
    %c0_i64_114 = arith.constant 0 : i64
    %407 = arith.cmpi eq, %406, %c0_i64_114 : i64
    cf.cond_br %407, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c4_i32_115 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_115) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %408 = llvm.load %402 : !llvm.ptr -> i32
    %409 = arith.cmpi ne, %26, %408 : i32
    cf.cond_br %409, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_116 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_116) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %410 = llvm.call %404(%405, %372, %374) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_117 = arith.constant 0 : i32
    %411 = arith.cmpi ne, %410, %c0_i32_117 : i32
    cf.cond_br %411, ^bb5, ^bb63
  ^bb62:  // pred: ^bb59
    %c5_i32_118 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_118) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // pred: ^bb61
    %412 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_119 = arith.constant 8 : i32
    %413 = arith.addi %412, %c8_i32_119 : i32
    llvm.store %413, %0 : i32, !llvm.ptr
    %414 = llvm.load %8 : !llvm.ptr -> i32
    %415 = llvm.load %6 : !llvm.ptr -> i32
    %c32_i32_120 = arith.constant 32 : i32
    %416 = arith.addi %415, %c32_i32_120 : i32
    llvm.store %416, %6 : i32, !llvm.ptr
    %417 = arith.cmpi eq, %414, %416 : i32
    %418 = arith.extui %417 : i1 to i32
    %c0_i32_121 = arith.constant 0 : i32
    %419 = arith.cmpi eq, %418, %c0_i32_121 : i32
    %420 = arith.extui %419 : i1 to i32
    %c0_i32_122 = arith.constant 0 : i32
    %421 = arith.cmpi ne, %420, %c0_i32_122 : i32
    cf.cond_br %421, ^bb35, ^bb64
  ^bb64:  // pred: ^bb63
    cf.br ^bb34
  ^bb65:  // pred: ^bb6
    %422 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_123 = arith.constant 32 : i64
    %423 = arith.extui %422 : i32 to i64
    %424 = arith.addi %423, %c32_i64_123 : i64
    %425 = llvm.getelementptr %17[%424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %426 = llvm.load volatile %425 {alignment = 1 : i64} : !llvm.ptr -> i32
    %427 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_124 = arith.constant 0 : i64
    %428 = arith.extui %427 : i32 to i64
    %429 = arith.addi %428, %c0_i64_124 : i64
    %430 = llvm.getelementptr %17[%429] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %431 = llvm.load volatile %430 {alignment = 1 : i64} : !llvm.ptr -> i32
    %432 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_125 = arith.constant 3 : i32
    %c31_i32_126 = arith.constant 31 : i32
    %433 = arith.cmpi ule, %c3_i32_125, %c31_i32_126 : i32
    %434 = scf.if %433 -> (i32) {
      %472 = arith.shli %432, %c3_i32_125 : i32
      scf.yield %472 : i32
    } else {
      %c0_i32_139 = arith.constant 0 : i32
      scf.yield %c0_i32_139 : i32
    }
    %435 = arith.addi %431, %434 : i32
    llvm.store %435, %1 : i32, !llvm.ptr
    %c0_i64_127 = arith.constant 0 : i64
    %436 = arith.extui %435 : i32 to i64
    %437 = arith.addi %436, %c0_i64_127 : i64
    %438 = llvm.getelementptr %17[%437] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %439 = llvm.load volatile %438 {alignment = 1 : i64} : !llvm.ptr -> i32
    %440 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64_128 = arith.constant 4 : i64
    %441 = arith.extui %440 : i32 to i64
    %442 = arith.addi %441, %c4_i64_128 : i64
    %443 = llvm.getelementptr %17[%442] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %444 = llvm.load volatile %443 {alignment = 1 : i64} : !llvm.ptr -> i32
    %445 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64_129 = arith.constant 36 : i64
    %446 = arith.extui %445 : i32 to i64
    %447 = arith.addi %446, %c36_i64_129 : i64
    %448 = llvm.getelementptr %17[%447] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %449 = llvm.load volatile %448 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_130 = arith.constant 12 : i64
    %450 = arith.extui %449 : i32 to i64
    %451 = arith.addi %450, %c12_i64_130 : i64
    %452 = llvm.getelementptr %17[%451] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %453 = llvm.load volatile %452 {alignment = 1 : i64} : !llvm.ptr -> i32
    %454 = arith.cmpi ult, %453, %38 : i32
    cf.cond_br %454, ^bb66, ^bb67
  ^bb66:  // 2 preds: ^bb65, ^bb67
    %455 = llvm.getelementptr inbounds %36[%453] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %456 = llvm.load %455 : !llvm.ptr -> !llvm.ptr
    %457 = llvm.ptrtoint %456 : !llvm.ptr to i64
    %c0_i64_131 = arith.constant 0 : i64
    %458 = arith.cmpi eq, %457, %c0_i64_131 : i64
    cf.cond_br %458, ^bb69, ^bb68
  ^bb67:  // pred: ^bb65
    %c3_i32_132 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_132) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %459 = llvm.getelementptr %456[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %460 = llvm.getelementptr %456[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %461 = llvm.getelementptr %456[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %462 = llvm.load %459 : !llvm.ptr -> !llvm.ptr
    %463 = llvm.load %461 : !llvm.ptr -> !llvm.ptr
    %464 = llvm.ptrtoint %462 : !llvm.ptr to i64
    %c0_i64_133 = arith.constant 0 : i64
    %465 = arith.cmpi eq, %464, %c0_i64_133 : i64
    cf.cond_br %465, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c4_i32_134 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_134) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %466 = llvm.load %460 : !llvm.ptr -> i32
    %467 = arith.cmpi ne, %19, %466 : i32
    cf.cond_br %467, ^bb73, ^bb72
  ^bb71:  // pred: ^bb68
    %c3_i32_135 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_135) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // 2 preds: ^bb70, ^bb73
    %468 = llvm.call %462(%463, %426, %439, %444) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_136 = arith.constant 0 : i32
    %469 = arith.cmpi eq, %468, %c0_i32_136 : i32
    %470 = arith.extui %469 : i1 to i32
    %c0_i32_137 = arith.constant 0 : i32
    %471 = arith.cmpi ne, %470, %c0_i32_137 : i32
    cf.cond_br %471, ^bb4, ^bb74
  ^bb73:  // pred: ^bb70
    %c5_i32_138 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_138) : (i32) -> ()
    cf.br ^bb72
  ^bb74:  // pred: ^bb72
    cf.br ^bb5
  }
  func.func @f165(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_2 = arith.constant 1 : i32
    llvm.store %c1_i32_2, %2 : i32, !llvm.ptr
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %15 = call @f163(%arg0, %13, %14) : (!llvm.ptr, i32, i32) -> i32
    %c0_i32_3 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_3 : i32
    cf.cond_br %16, ^bb3, ^bb4
  ^bb2(%17: i32):  // pred: ^bb3
    return %17 : i32
  ^bb3:  // 3 preds: ^bb1, ^bb11, ^bb13
    %18 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb2(%18 : i32)
  ^bb4:  // pred: ^bb1
    %19 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c20_i64 : i64
    %22 = llvm.getelementptr %5[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050941_i32 = arith.constant 1050941 : i32
    %c2_i32 = arith.constant 2 : i32
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c24_i64 : i64
    %27 = llvm.getelementptr %5[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %29 = arith.extui %28 : i32 to i64
    %30 = arith.addi %29, %c12_i64 : i64
    %31 = llvm.getelementptr %5[%30] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %32 = llvm.load volatile %31 {alignment = 1 : i64} : !llvm.ptr -> i32
    %33 = arith.cmpi ult, %32, %12 : i32
    cf.cond_br %33, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %34 = llvm.getelementptr inbounds %10[%32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %35 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.ptrtoint %35 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %37 = arith.cmpi eq, %36, %c0_i64 : i64
    cf.cond_br %37, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %38 = llvm.getelementptr %35[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %39 = llvm.getelementptr %35[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %40 = llvm.getelementptr %35[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %41 = llvm.load %38 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %43 = llvm.ptrtoint %41 : !llvm.ptr to i64
    %c0_i64_4 = arith.constant 0 : i64
    %44 = arith.cmpi eq, %43, %c0_i64_4 : i64
    cf.cond_br %44, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %45 = llvm.load %39 : !llvm.ptr -> i32
    %46 = arith.cmpi ne, %7, %45 : i32
    cf.cond_br %46, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_5 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_5) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %47 = llvm.call %41(%42, %23, %c1050941_i32, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_6 : i32
    cf.cond_br %48, ^bb3, ^bb13
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // pred: ^bb11
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32_7 = arith.constant 4 : i32
    %50 = arith.addi %49, %c4_i32_7 : i32
    %51 = llvm.load %1 : !llvm.ptr -> i32
    %52 = call @f163(%arg0, %50, %51) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %52, %2 : i32, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f166(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.subi %9, %c16_i32 : i32
    llvm.store %10, %3 : i32, !llvm.ptr
    llvm.store %10, %5 : i32, !llvm.ptr
    %11 = llvm.load %1 : !llvm.ptr -> i32
    cf.switch %11 : i32, [
      default: ^bb16,
      0: ^bb10,
      1: ^bb15,
      2: ^bb15,
      3: ^bb15,
      4: ^bb15,
      5: ^bb15,
      6: ^bb15,
      7: ^bb15,
      8: ^bb15,
      9: ^bb14,
      10: ^bb12,
      11: ^bb15,
      12: ^bb15,
      13: ^bb13,
      14: ^bb15,
      15: ^bb15,
      16: ^bb15,
      17: ^bb15,
      18: ^bb15,
      19: ^bb15,
      20: ^bb15,
      21: ^bb15,
      22: ^bb15,
      23: ^bb15,
      24: ^bb15,
      25: ^bb15,
      26: ^bb15,
      27: ^bb15,
      28: ^bb15,
      29: ^bb15,
      30: ^bb15,
      31: ^bb15,
      32: ^bb15,
      33: ^bb15,
      34: ^bb8,
      35: ^bb15,
      36: ^bb15,
      37: ^bb15,
      38: ^bb15,
      39: ^bb9
    ]
  ^bb2:  // pred: ^bb3
    return
  ^bb3:  // 10 preds: ^bb4, ^bb10, ^bb11, ^bb12, ^bb13, ^bb14, ^bb21, ^bb22, ^bb25, ^bb26
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_3 = arith.constant 16 : i32
    %13 = arith.addi %12, %c16_i32_3 : i32
    llvm.store %13, %5 : i32, !llvm.ptr
    cf.br ^bb2
  ^bb4:  // pred: ^bb8
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32 = arith.constant 512 : i32
    %c10_i64 = arith.constant 10 : i64
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.addi %15, %c10_i64 : i64
    %17 = llvm.getelementptr %8[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %18 = arith.trunci %c512_i32 : i32 to i16
    llvm.store volatile %18, %17 {alignment = 1 : i64} : i16, !llvm.ptr
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %c2_i64 = arith.constant 2 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c2_i64 : i64
    %22 = llvm.getelementptr %8[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64, %22 {alignment = 1 : i64} : i64, !llvm.ptr
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c8796_i32 = arith.constant 8796 : i32
    %c0_i64_4 = arith.constant 0 : i64
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.addi %24, %c0_i64_4 : i64
    %26 = llvm.getelementptr %8[%25] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %27 = arith.trunci %c8796_i32 : i32 to i16
    llvm.store volatile %27, %26 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb24
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %c1053560_i32 = arith.constant 1053560 : i32
    call @f158(%arg0, %28, %c10_i32, %c1053560_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb6:  // pred: ^bb20
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c10_i32_5 = arith.constant 10 : i32
    %c1053560_i32_6 = arith.constant 1053560 : i32
    call @f158(%arg0, %29, %c10_i32_5, %c1053560_i32_6) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_7 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_7) : (i32) -> ()
    llvm.unreachable
  ^bb7:  // 5 preds: ^bb9, ^bb15, ^bb18, ^bb19, ^bb23
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = call @f168(%arg0, %30) : (!llvm.ptr, i32) -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %32 = arith.cmpi eq, %31, %c0_i32_8 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_9 : i32
    cf.cond_br %34, ^bb24, ^bb25
  ^bb8:  // pred: ^bb1
    %35 = llvm.load %2 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %36 = arith.andi %35, %c65536_i32 : i32
    %c0_i32_10 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_10 : i32
    cf.cond_br %37, ^bb4, ^bb23
  ^bb9:  // pred: ^bb1
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %c256_i32 = arith.constant 256 : i32
    %39 = arith.andi %38, %c256_i32 : i32
    %c0_i32_11 = arith.constant 0 : i32
    %40 = arith.cmpi eq, %39, %c0_i32_11 : i32
    %41 = arith.extui %40 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_12 : i32
    cf.cond_br %42, ^bb7, ^bb22
  ^bb10:  // pred: ^bb1
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32_13 = arith.constant 512 : i32
    %c10_i64_14 = arith.constant 10 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c10_i64_14 : i64
    %46 = llvm.getelementptr %8[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = arith.trunci %c512_i32_13 : i32 to i16
    llvm.store volatile %47, %46 {alignment = 1 : i64} : i16, !llvm.ptr
    %48 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_15 = arith.constant 0 : i64
    %c2_i64_16 = arith.constant 2 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c2_i64_16 : i64
    %51 = llvm.getelementptr %8[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_15, %51 {alignment = 1 : i64} : i64, !llvm.ptr
    %52 = llvm.load %0 : !llvm.ptr -> i32
    %c12380_i32 = arith.constant 12380 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %53 = arith.extui %52 : i32 to i64
    %54 = arith.addi %53, %c0_i64_17 : i64
    %55 = llvm.getelementptr %8[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = arith.trunci %c12380_i32 : i32 to i16
    llvm.store volatile %56, %55 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb11:  // pred: ^bb16
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32_18 = arith.constant 512 : i32
    %c10_i64_19 = arith.constant 10 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c10_i64_19 : i64
    %60 = llvm.getelementptr %8[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = arith.trunci %c512_i32_18 : i32 to i16
    llvm.store volatile %61, %60 {alignment = 1 : i64} : i16, !llvm.ptr
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_20 = arith.constant 0 : i64
    %c2_i64_21 = arith.constant 2 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c2_i64_21 : i64
    %65 = llvm.getelementptr %8[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_20, %65 {alignment = 1 : i64} : i64, !llvm.ptr
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %c23644_i32 = arith.constant 23644 : i32
    %c0_i64_22 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_22 : i64
    %69 = llvm.getelementptr %8[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = arith.trunci %c23644_i32 : i32 to i16
    llvm.store volatile %70, %69 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb1
    %71 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32_23 = arith.constant 512 : i32
    %c10_i64_24 = arith.constant 10 : i64
    %72 = arith.extui %71 : i32 to i64
    %73 = arith.addi %72, %c10_i64_24 : i64
    %74 = llvm.getelementptr %8[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = arith.trunci %c512_i32_23 : i32 to i16
    llvm.store volatile %75, %74 {alignment = 1 : i64} : i16, !llvm.ptr
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_25 = arith.constant 0 : i64
    %c2_i64_26 = arith.constant 2 : i64
    %77 = arith.extui %76 : i32 to i64
    %78 = arith.addi %77, %c2_i64_26 : i64
    %79 = llvm.getelementptr %8[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_25, %79 {alignment = 1 : i64} : i64, !llvm.ptr
    %80 = llvm.load %0 : !llvm.ptr -> i32
    %c28252_i32 = arith.constant 28252 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %81 = arith.extui %80 : i32 to i64
    %82 = arith.addi %81, %c0_i64_27 : i64
    %83 = llvm.getelementptr %8[%82] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %84 = arith.trunci %c28252_i32 : i32 to i16
    llvm.store volatile %84, %83 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb13:  // pred: ^bb1
    %85 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32_28 = arith.constant 512 : i32
    %c10_i64_29 = arith.constant 10 : i64
    %86 = arith.extui %85 : i32 to i64
    %87 = arith.addi %86, %c10_i64_29 : i64
    %88 = llvm.getelementptr %8[%87] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %89 = arith.trunci %c512_i32_28 : i32 to i16
    llvm.store volatile %89, %88 {alignment = 1 : i64} : i16, !llvm.ptr
    %90 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_30 = arith.constant 0 : i64
    %c2_i64_31 = arith.constant 2 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c2_i64_31 : i64
    %93 = llvm.getelementptr %8[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_30, %93 {alignment = 1 : i64} : i64, !llvm.ptr
    %94 = llvm.load %0 : !llvm.ptr -> i32
    %c29276_i32 = arith.constant 29276 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %95 = arith.extui %94 : i32 to i64
    %96 = arith.addi %95, %c0_i64_32 : i64
    %97 = llvm.getelementptr %8[%96] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %98 = arith.trunci %c29276_i32 : i32 to i16
    llvm.store volatile %98, %97 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb14:  // pred: ^bb1
    %99 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32_33 = arith.constant 512 : i32
    %c10_i64_34 = arith.constant 10 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c10_i64_34 : i64
    %102 = llvm.getelementptr %8[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = arith.trunci %c512_i32_33 : i32 to i16
    llvm.store volatile %103, %102 {alignment = 1 : i64} : i16, !llvm.ptr
    %104 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_35 = arith.constant 0 : i64
    %c2_i64_36 = arith.constant 2 : i64
    %105 = arith.extui %104 : i32 to i64
    %106 = arith.addi %105, %c2_i64_36 : i64
    %107 = llvm.getelementptr %8[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_35, %107 {alignment = 1 : i64} : i64, !llvm.ptr
    %108 = llvm.load %0 : !llvm.ptr -> i32
    %c29788_i32 = arith.constant 29788 : i32
    %c0_i64_37 = arith.constant 0 : i64
    %109 = arith.extui %108 : i32 to i64
    %110 = arith.addi %109, %c0_i64_37 : i64
    %111 = llvm.getelementptr %8[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %112 = arith.trunci %c29788_i32 : i32 to i16
    llvm.store volatile %112, %111 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb15:  // 35 preds: ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb1, ^bb17
    %113 = llvm.load %1 : !llvm.ptr -> i32
    %c768_i32 = arith.constant 768 : i32
    %114 = arith.cmpi ult, %113, %c768_i32 : i32
    %115 = arith.extui %114 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %116 = arith.cmpi ne, %115, %c0_i32_38 : i32
    cf.cond_br %116, ^bb7, ^bb18
  ^bb16:  // pred: ^bb1
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c92_i32 = arith.constant 92 : i32
    %118 = arith.cmpi eq, %117, %c92_i32 : i32
    %119 = arith.extui %118 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %120 = arith.cmpi ne, %119, %c0_i32_39 : i32
    cf.cond_br %120, ^bb11, ^bb17
  ^bb17:  // pred: ^bb16
    cf.br ^bb15
  ^bb18:  // pred: ^bb15
    %121 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_40 = arith.constant 1 : i32
    %122 = arith.andi %121, %c1_i32_40 : i32
    %c0_i32_41 = arith.constant 0 : i32
    %123 = arith.cmpi eq, %122, %c0_i32_41 : i32
    %124 = arith.extui %123 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %125 = arith.cmpi ne, %124, %c0_i32_42 : i32
    cf.cond_br %125, ^bb7, ^bb19
  ^bb19:  // pred: ^bb18
    %126 = llvm.load %1 : !llvm.ptr -> i32
    %127 = call @f167(%arg0, %126) : (!llvm.ptr, i32) -> i32
    %c0_i32_43 = arith.constant 0 : i32
    %128 = arith.cmpi eq, %127, %c0_i32_43 : i32
    %129 = arith.extui %128 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %130 = arith.cmpi ne, %129, %c0_i32_44 : i32
    cf.cond_br %130, ^bb7, ^bb20
  ^bb20:  // pred: ^bb19
    %131 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %132 = arith.addi %131, %c6_i32 : i32
    %c2_i32 = arith.constant 2 : i32
    %133 = arith.addi %132, %c2_i32 : i32
    %c0_i32_45 = arith.constant 0 : i32
    %c0_i64_46 = arith.constant 0 : i64
    %134 = arith.extui %133 : i32 to i64
    %135 = arith.addi %134, %c0_i64_46 : i64
    %136 = llvm.getelementptr %8[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %137 = arith.trunci %c0_i32_45 : i32 to i8
    llvm.store volatile %137, %136 {alignment = 1 : i64} : i8, !llvm.ptr
    %138 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_47 = arith.constant 0 : i32
    %c6_i64 = arith.constant 6 : i64
    %139 = arith.extui %138 : i32 to i64
    %140 = arith.addi %139, %c6_i64 : i64
    %141 = llvm.getelementptr %8[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %142 = arith.trunci %c0_i32_47 : i32 to i16
    llvm.store volatile %142, %141 {alignment = 1 : i64} : i16, !llvm.ptr
    %143 = llvm.load %3 : !llvm.ptr -> i32
    %c125_i32 = arith.constant 125 : i32
    %c15_i64 = arith.constant 15 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c15_i64 : i64
    %146 = llvm.getelementptr %8[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = arith.trunci %c125_i32 : i32 to i8
    llvm.store volatile %147, %146 {alignment = 1 : i64} : i8, !llvm.ptr
    %148 = llvm.load %3 : !llvm.ptr -> i32
    %149 = llvm.load %1 : !llvm.ptr -> i32
    %c15_i32 = arith.constant 15 : i32
    %150 = arith.andi %149, %c15_i32 : i32
    %c1050943_i32 = arith.constant 1050943 : i32
    %151 = arith.addi %150, %c1050943_i32 : i32
    %c0_i64_48 = arith.constant 0 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c0_i64_48 : i64
    %154 = llvm.getelementptr %8[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i8
    %156 = arith.extui %155 : i8 to i32
    %c14_i64 = arith.constant 14 : i64
    %157 = arith.extui %148 : i32 to i64
    %158 = arith.addi %157, %c14_i64 : i64
    %159 = llvm.getelementptr %8[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = arith.trunci %156 : i32 to i8
    llvm.store volatile %160, %159 {alignment = 1 : i64} : i8, !llvm.ptr
    %161 = llvm.load %3 : !llvm.ptr -> i32
    %162 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c31_i32 = arith.constant 31 : i32
    %163 = arith.cmpi ule, %c4_i32, %c31_i32 : i32
    %164 = scf.if %163 -> (i32) {
      %485 = arith.shrui %162, %c4_i32 : i32
      scf.yield %485 : i32
    } else {
      %c0_i32_162 = arith.constant 0 : i32
      scf.yield %c0_i32_162 : i32
    }
    %c15_i32_49 = arith.constant 15 : i32
    %165 = arith.andi %164, %c15_i32_49 : i32
    %c1050943_i32_50 = arith.constant 1050943 : i32
    %166 = arith.addi %165, %c1050943_i32_50 : i32
    %c0_i64_51 = arith.constant 0 : i64
    %167 = arith.extui %166 : i32 to i64
    %168 = arith.addi %167, %c0_i64_51 : i64
    %169 = llvm.getelementptr %8[%168] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %170 = llvm.load volatile %169 {alignment = 1 : i64} : !llvm.ptr -> i8
    %171 = arith.extui %170 : i8 to i32
    %c13_i64 = arith.constant 13 : i64
    %172 = arith.extui %161 : i32 to i64
    %173 = arith.addi %172, %c13_i64 : i64
    %174 = llvm.getelementptr %8[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %175 = arith.trunci %171 : i32 to i8
    llvm.store volatile %175, %174 {alignment = 1 : i64} : i8, !llvm.ptr
    %176 = llvm.load %3 : !llvm.ptr -> i32
    %177 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %178 = arith.cmpi ule, %c8_i32, %c31_i32_52 : i32
    %179 = scf.if %178 -> (i32) {
      %485 = arith.shrui %177, %c8_i32 : i32
      scf.yield %485 : i32
    } else {
      %c0_i32_162 = arith.constant 0 : i32
      scf.yield %c0_i32_162 : i32
    }
    %c15_i32_53 = arith.constant 15 : i32
    %180 = arith.andi %179, %c15_i32_53 : i32
    %c1050943_i32_54 = arith.constant 1050943 : i32
    %181 = arith.addi %180, %c1050943_i32_54 : i32
    %c0_i64_55 = arith.constant 0 : i64
    %182 = arith.extui %181 : i32 to i64
    %183 = arith.addi %182, %c0_i64_55 : i64
    %184 = llvm.getelementptr %8[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %185 = llvm.load volatile %184 {alignment = 1 : i64} : !llvm.ptr -> i8
    %186 = arith.extui %185 : i8 to i32
    %c12_i64 = arith.constant 12 : i64
    %187 = arith.extui %176 : i32 to i64
    %188 = arith.addi %187, %c12_i64 : i64
    %189 = llvm.getelementptr %8[%188] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %190 = arith.trunci %186 : i32 to i8
    llvm.store volatile %190, %189 {alignment = 1 : i64} : i8, !llvm.ptr
    %191 = llvm.load %3 : !llvm.ptr -> i32
    %192 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_56 = arith.constant 31 : i32
    %193 = arith.cmpi ule, %c12_i32, %c31_i32_56 : i32
    %194 = scf.if %193 -> (i32) {
      %485 = arith.shrui %192, %c12_i32 : i32
      scf.yield %485 : i32
    } else {
      %c0_i32_162 = arith.constant 0 : i32
      scf.yield %c0_i32_162 : i32
    }
    %c15_i32_57 = arith.constant 15 : i32
    %195 = arith.andi %194, %c15_i32_57 : i32
    %c1050943_i32_58 = arith.constant 1050943 : i32
    %196 = arith.addi %195, %c1050943_i32_58 : i32
    %c0_i64_59 = arith.constant 0 : i64
    %197 = arith.extui %196 : i32 to i64
    %198 = arith.addi %197, %c0_i64_59 : i64
    %199 = llvm.getelementptr %8[%198] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %200 = llvm.load volatile %199 {alignment = 1 : i64} : !llvm.ptr -> i8
    %201 = arith.extui %200 : i8 to i32
    %c11_i64 = arith.constant 11 : i64
    %202 = arith.extui %191 : i32 to i64
    %203 = arith.addi %202, %c11_i64 : i64
    %204 = llvm.getelementptr %8[%203] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %205 = arith.trunci %201 : i32 to i8
    llvm.store volatile %205, %204 {alignment = 1 : i64} : i8, !llvm.ptr
    %206 = llvm.load %3 : !llvm.ptr -> i32
    %207 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_60 = arith.constant 16 : i32
    %c31_i32_61 = arith.constant 31 : i32
    %208 = arith.cmpi ule, %c16_i32_60, %c31_i32_61 : i32
    %209 = scf.if %208 -> (i32) {
      %485 = arith.shrui %207, %c16_i32_60 : i32
      scf.yield %485 : i32
    } else {
      %c0_i32_162 = arith.constant 0 : i32
      scf.yield %c0_i32_162 : i32
    }
    %c15_i32_62 = arith.constant 15 : i32
    %210 = arith.andi %209, %c15_i32_62 : i32
    %c1050943_i32_63 = arith.constant 1050943 : i32
    %211 = arith.addi %210, %c1050943_i32_63 : i32
    %c0_i64_64 = arith.constant 0 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c0_i64_64 : i64
    %214 = llvm.getelementptr %8[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load volatile %214 {alignment = 1 : i64} : !llvm.ptr -> i8
    %216 = arith.extui %215 : i8 to i32
    %c10_i64_65 = arith.constant 10 : i64
    %217 = arith.extui %206 : i32 to i64
    %218 = arith.addi %217, %c10_i64_65 : i64
    %219 = llvm.getelementptr %8[%218] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %220 = arith.trunci %216 : i32 to i8
    llvm.store volatile %220, %219 {alignment = 1 : i64} : i8, !llvm.ptr
    %221 = llvm.load %3 : !llvm.ptr -> i32
    %222 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32 = arith.constant 20 : i32
    %c31_i32_66 = arith.constant 31 : i32
    %223 = arith.cmpi ule, %c20_i32, %c31_i32_66 : i32
    %224 = scf.if %223 -> (i32) {
      %485 = arith.shrui %222, %c20_i32 : i32
      scf.yield %485 : i32
    } else {
      %c0_i32_162 = arith.constant 0 : i32
      scf.yield %c0_i32_162 : i32
    }
    %c15_i32_67 = arith.constant 15 : i32
    %225 = arith.andi %224, %c15_i32_67 : i32
    %c1050943_i32_68 = arith.constant 1050943 : i32
    %226 = arith.addi %225, %c1050943_i32_68 : i32
    %c0_i64_69 = arith.constant 0 : i64
    %227 = arith.extui %226 : i32 to i64
    %228 = arith.addi %227, %c0_i64_69 : i64
    %229 = llvm.getelementptr %8[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %230 = llvm.load volatile %229 {alignment = 1 : i64} : !llvm.ptr -> i8
    %231 = arith.extui %230 : i8 to i32
    %c9_i64 = arith.constant 9 : i64
    %232 = arith.extui %221 : i32 to i64
    %233 = arith.addi %232, %c9_i64 : i64
    %234 = llvm.getelementptr %8[%233] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %235 = arith.trunci %231 : i32 to i8
    llvm.store volatile %235, %234 {alignment = 1 : i64} : i8, !llvm.ptr
    %236 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_70 = arith.constant 1 : i32
    %237 = arith.ori %236, %c1_i32_70 : i32
    %false = arith.constant false
    %238 = llvm.call_intrinsic "llvm.ctlz.i32"(%237, %false) : (i32, i1) -> i32
    %c2_i32_71 = arith.constant 2 : i32
    %c31_i32_72 = arith.constant 31 : i32
    %239 = arith.cmpi ule, %c2_i32_71, %c31_i32_72 : i32
    %240 = scf.if %239 -> (i32) {
      %485 = arith.shrui %238, %c2_i32_71 : i32
      scf.yield %485 : i32
    } else {
      %c0_i32_162 = arith.constant 0 : i32
      scf.yield %c0_i32_162 : i32
    }
    llvm.store %240, %2 : i32, !llvm.ptr
    %c-2_i32 = arith.constant -2 : i32
    %241 = arith.addi %240, %c-2_i32 : i32
    llvm.store %241, %1 : i32, !llvm.ptr
    %c10_i32_73 = arith.constant 10 : i32
    %242 = arith.cmpi uge, %241, %c10_i32_73 : i32
    %243 = arith.extui %242 : i1 to i32
    %c0_i32_74 = arith.constant 0 : i32
    %244 = arith.cmpi ne, %243, %c0_i32_74 : i32
    cf.cond_br %244, ^bb6, ^bb21
  ^bb21:  // pred: ^bb20
    %245 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_75 = arith.constant 6 : i32
    %246 = arith.addi %245, %c6_i32_75 : i32
    %247 = llvm.load %1 : !llvm.ptr -> i32
    %248 = arith.addi %246, %247 : i32
    %c92_i32_76 = arith.constant 92 : i32
    %c0_i64_77 = arith.constant 0 : i64
    %249 = arith.extui %248 : i32 to i64
    %250 = arith.addi %249, %c0_i64_77 : i64
    %251 = llvm.getelementptr %8[%250] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %252 = arith.trunci %c92_i32_76 : i32 to i8
    llvm.store volatile %252, %251 {alignment = 1 : i64} : i8, !llvm.ptr
    %253 = llvm.load %2 : !llvm.ptr -> i32
    %254 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_78 = arith.constant 6 : i32
    %255 = arith.addi %254, %c6_i32_78 : i32
    %256 = arith.addi %253, %255 : i32
    %c-1_i32 = arith.constant -1 : i32
    %257 = arith.addi %256, %c-1_i32 : i32
    %c31605_i32 = arith.constant 31605 : i32
    %c0_i64_79 = arith.constant 0 : i64
    %258 = arith.extui %257 : i32 to i64
    %259 = arith.addi %258, %c0_i64_79 : i64
    %260 = llvm.getelementptr %8[%259] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %261 = arith.trunci %c31605_i32 : i32 to i16
    llvm.store volatile %261, %260 {alignment = 1 : i64} : i16, !llvm.ptr
    %262 = llvm.load %0 : !llvm.ptr -> i32
    %263 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i64_80 = arith.constant 6 : i64
    %264 = arith.extui %263 : i32 to i64
    %265 = arith.addi %264, %c6_i64_80 : i64
    %266 = llvm.getelementptr %8[%265] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %267 = llvm.load volatile %266 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_81 = arith.constant 0 : i64
    %268 = arith.extui %262 : i32 to i64
    %269 = arith.addi %268, %c0_i64_81 : i64
    %270 = llvm.getelementptr %8[%269] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %267, %270 {alignment = 1 : i64} : i64, !llvm.ptr
    %271 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_82 = arith.constant 8 : i32
    %272 = arith.addi %271, %c8_i32_82 : i32
    %273 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_83 = arith.constant 6 : i32
    %274 = arith.addi %273, %c6_i32_83 : i32
    %c8_i32_84 = arith.constant 8 : i32
    %275 = arith.addi %274, %c8_i32_84 : i32
    %c0_i64_85 = arith.constant 0 : i64
    %276 = arith.extui %275 : i32 to i64
    %277 = arith.addi %276, %c0_i64_85 : i64
    %278 = llvm.getelementptr %8[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i16
    %280 = arith.extui %279 : i16 to i32
    %c0_i64_86 = arith.constant 0 : i64
    %281 = arith.extui %272 : i32 to i64
    %282 = arith.addi %281, %c0_i64_86 : i64
    %283 = llvm.getelementptr %8[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %284 = arith.trunci %280 : i32 to i16
    llvm.store volatile %284, %283 {alignment = 1 : i64} : i16, !llvm.ptr
    %285 = llvm.load %0 : !llvm.ptr -> i32
    %c10_i32_87 = arith.constant 10 : i32
    %c11_i64_88 = arith.constant 11 : i64
    %286 = arith.extui %285 : i32 to i64
    %287 = arith.addi %286, %c11_i64_88 : i64
    %288 = llvm.getelementptr %8[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %289 = arith.trunci %c10_i32_87 : i32 to i8
    llvm.store volatile %289, %288 {alignment = 1 : i64} : i8, !llvm.ptr
    %290 = llvm.load %0 : !llvm.ptr -> i32
    %291 = llvm.load %1 : !llvm.ptr -> i32
    %c10_i64_89 = arith.constant 10 : i64
    %292 = arith.extui %290 : i32 to i64
    %293 = arith.addi %292, %c10_i64_89 : i64
    %294 = llvm.getelementptr %8[%293] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %295 = arith.trunci %291 : i32 to i8
    llvm.store volatile %295, %294 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb22:  // pred: ^bb9
    %296 = llvm.load %0 : !llvm.ptr -> i32
    %c512_i32_90 = arith.constant 512 : i32
    %c10_i64_91 = arith.constant 10 : i64
    %297 = arith.extui %296 : i32 to i64
    %298 = arith.addi %297, %c10_i64_91 : i64
    %299 = llvm.getelementptr %8[%298] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %300 = arith.trunci %c512_i32_90 : i32 to i16
    llvm.store volatile %300, %299 {alignment = 1 : i64} : i16, !llvm.ptr
    %301 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_92 = arith.constant 0 : i64
    %c2_i64_93 = arith.constant 2 : i64
    %302 = arith.extui %301 : i32 to i64
    %303 = arith.addi %302, %c2_i64_93 : i64
    %304 = llvm.getelementptr %8[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c0_i64_92, %304 {alignment = 1 : i64} : i64, !llvm.ptr
    %305 = llvm.load %0 : !llvm.ptr -> i32
    %c10076_i32 = arith.constant 10076 : i32
    %c0_i64_94 = arith.constant 0 : i64
    %306 = arith.extui %305 : i32 to i64
    %307 = arith.addi %306, %c0_i64_94 : i64
    %308 = llvm.getelementptr %8[%307] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %309 = arith.trunci %c10076_i32 : i32 to i16
    llvm.store volatile %309, %308 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb3
  ^bb23:  // pred: ^bb8
    cf.br ^bb7
  ^bb24:  // pred: ^bb7
    %310 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_95 = arith.constant 6 : i32
    %311 = arith.addi %310, %c6_i32_95 : i32
    %c2_i32_96 = arith.constant 2 : i32
    %312 = arith.addi %311, %c2_i32_96 : i32
    %c0_i32_97 = arith.constant 0 : i32
    %c0_i64_98 = arith.constant 0 : i64
    %313 = arith.extui %312 : i32 to i64
    %314 = arith.addi %313, %c0_i64_98 : i64
    %315 = llvm.getelementptr %8[%314] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %316 = arith.trunci %c0_i32_97 : i32 to i8
    llvm.store volatile %316, %315 {alignment = 1 : i64} : i8, !llvm.ptr
    %317 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_99 = arith.constant 0 : i32
    %c6_i64_100 = arith.constant 6 : i64
    %318 = arith.extui %317 : i32 to i64
    %319 = arith.addi %318, %c6_i64_100 : i64
    %320 = llvm.getelementptr %8[%319] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %321 = arith.trunci %c0_i32_99 : i32 to i16
    llvm.store volatile %321, %320 {alignment = 1 : i64} : i16, !llvm.ptr
    %322 = llvm.load %3 : !llvm.ptr -> i32
    %c125_i32_101 = arith.constant 125 : i32
    %c15_i64_102 = arith.constant 15 : i64
    %323 = arith.extui %322 : i32 to i64
    %324 = arith.addi %323, %c15_i64_102 : i64
    %325 = llvm.getelementptr %8[%324] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %326 = arith.trunci %c125_i32_101 : i32 to i8
    llvm.store volatile %326, %325 {alignment = 1 : i64} : i8, !llvm.ptr
    %327 = llvm.load %3 : !llvm.ptr -> i32
    %328 = llvm.load %1 : !llvm.ptr -> i32
    %c15_i32_103 = arith.constant 15 : i32
    %329 = arith.andi %328, %c15_i32_103 : i32
    %c1050943_i32_104 = arith.constant 1050943 : i32
    %330 = arith.addi %329, %c1050943_i32_104 : i32
    %c0_i64_105 = arith.constant 0 : i64
    %331 = arith.extui %330 : i32 to i64
    %332 = arith.addi %331, %c0_i64_105 : i64
    %333 = llvm.getelementptr %8[%332] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %334 = llvm.load volatile %333 {alignment = 1 : i64} : !llvm.ptr -> i8
    %335 = arith.extui %334 : i8 to i32
    %c14_i64_106 = arith.constant 14 : i64
    %336 = arith.extui %327 : i32 to i64
    %337 = arith.addi %336, %c14_i64_106 : i64
    %338 = llvm.getelementptr %8[%337] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %339 = arith.trunci %335 : i32 to i8
    llvm.store volatile %339, %338 {alignment = 1 : i64} : i8, !llvm.ptr
    %340 = llvm.load %3 : !llvm.ptr -> i32
    %341 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_107 = arith.constant 4 : i32
    %c31_i32_108 = arith.constant 31 : i32
    %342 = arith.cmpi ule, %c4_i32_107, %c31_i32_108 : i32
    %343 = scf.if %342 -> (i32) {
      %485 = arith.shrui %341, %c4_i32_107 : i32
      scf.yield %485 : i32
    } else {
      %c0_i32_162 = arith.constant 0 : i32
      scf.yield %c0_i32_162 : i32
    }
    %c15_i32_109 = arith.constant 15 : i32
    %344 = arith.andi %343, %c15_i32_109 : i32
    %c1050943_i32_110 = arith.constant 1050943 : i32
    %345 = arith.addi %344, %c1050943_i32_110 : i32
    %c0_i64_111 = arith.constant 0 : i64
    %346 = arith.extui %345 : i32 to i64
    %347 = arith.addi %346, %c0_i64_111 : i64
    %348 = llvm.getelementptr %8[%347] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %349 = llvm.load volatile %348 {alignment = 1 : i64} : !llvm.ptr -> i8
    %350 = arith.extui %349 : i8 to i32
    %c13_i64_112 = arith.constant 13 : i64
    %351 = arith.extui %340 : i32 to i64
    %352 = arith.addi %351, %c13_i64_112 : i64
    %353 = llvm.getelementptr %8[%352] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %354 = arith.trunci %350 : i32 to i8
    llvm.store volatile %354, %353 {alignment = 1 : i64} : i8, !llvm.ptr
    %355 = llvm.load %3 : !llvm.ptr -> i32
    %356 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_113 = arith.constant 8 : i32
    %c31_i32_114 = arith.constant 31 : i32
    %357 = arith.cmpi ule, %c8_i32_113, %c31_i32_114 : i32
    %358 = scf.if %357 -> (i32) {
      %485 = arith.shrui %356, %c8_i32_113 : i32
      scf.yield %485 : i32
    } else {
      %c0_i32_162 = arith.constant 0 : i32
      scf.yield %c0_i32_162 : i32
    }
    %c15_i32_115 = arith.constant 15 : i32
    %359 = arith.andi %358, %c15_i32_115 : i32
    %c1050943_i32_116 = arith.constant 1050943 : i32
    %360 = arith.addi %359, %c1050943_i32_116 : i32
    %c0_i64_117 = arith.constant 0 : i64
    %361 = arith.extui %360 : i32 to i64
    %362 = arith.addi %361, %c0_i64_117 : i64
    %363 = llvm.getelementptr %8[%362] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %364 = llvm.load volatile %363 {alignment = 1 : i64} : !llvm.ptr -> i8
    %365 = arith.extui %364 : i8 to i32
    %c12_i64_118 = arith.constant 12 : i64
    %366 = arith.extui %355 : i32 to i64
    %367 = arith.addi %366, %c12_i64_118 : i64
    %368 = llvm.getelementptr %8[%367] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %369 = arith.trunci %365 : i32 to i8
    llvm.store volatile %369, %368 {alignment = 1 : i64} : i8, !llvm.ptr
    %370 = llvm.load %3 : !llvm.ptr -> i32
    %371 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i32_119 = arith.constant 12 : i32
    %c31_i32_120 = arith.constant 31 : i32
    %372 = arith.cmpi ule, %c12_i32_119, %c31_i32_120 : i32
    %373 = scf.if %372 -> (i32) {
      %485 = arith.shrui %371, %c12_i32_119 : i32
      scf.yield %485 : i32
    } else {
      %c0_i32_162 = arith.constant 0 : i32
      scf.yield %c0_i32_162 : i32
    }
    %c15_i32_121 = arith.constant 15 : i32
    %374 = arith.andi %373, %c15_i32_121 : i32
    %c1050943_i32_122 = arith.constant 1050943 : i32
    %375 = arith.addi %374, %c1050943_i32_122 : i32
    %c0_i64_123 = arith.constant 0 : i64
    %376 = arith.extui %375 : i32 to i64
    %377 = arith.addi %376, %c0_i64_123 : i64
    %378 = llvm.getelementptr %8[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i8
    %380 = arith.extui %379 : i8 to i32
    %c11_i64_124 = arith.constant 11 : i64
    %381 = arith.extui %370 : i32 to i64
    %382 = arith.addi %381, %c11_i64_124 : i64
    %383 = llvm.getelementptr %8[%382] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %384 = arith.trunci %380 : i32 to i8
    llvm.store volatile %384, %383 {alignment = 1 : i64} : i8, !llvm.ptr
    %385 = llvm.load %3 : !llvm.ptr -> i32
    %386 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_125 = arith.constant 16 : i32
    %c31_i32_126 = arith.constant 31 : i32
    %387 = arith.cmpi ule, %c16_i32_125, %c31_i32_126 : i32
    %388 = scf.if %387 -> (i32) {
      %485 = arith.shrui %386, %c16_i32_125 : i32
      scf.yield %485 : i32
    } else {
      %c0_i32_162 = arith.constant 0 : i32
      scf.yield %c0_i32_162 : i32
    }
    %c15_i32_127 = arith.constant 15 : i32
    %389 = arith.andi %388, %c15_i32_127 : i32
    %c1050943_i32_128 = arith.constant 1050943 : i32
    %390 = arith.addi %389, %c1050943_i32_128 : i32
    %c0_i64_129 = arith.constant 0 : i64
    %391 = arith.extui %390 : i32 to i64
    %392 = arith.addi %391, %c0_i64_129 : i64
    %393 = llvm.getelementptr %8[%392] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %394 = llvm.load volatile %393 {alignment = 1 : i64} : !llvm.ptr -> i8
    %395 = arith.extui %394 : i8 to i32
    %c10_i64_130 = arith.constant 10 : i64
    %396 = arith.extui %385 : i32 to i64
    %397 = arith.addi %396, %c10_i64_130 : i64
    %398 = llvm.getelementptr %8[%397] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %399 = arith.trunci %395 : i32 to i8
    llvm.store volatile %399, %398 {alignment = 1 : i64} : i8, !llvm.ptr
    %400 = llvm.load %3 : !llvm.ptr -> i32
    %401 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i32_131 = arith.constant 20 : i32
    %c31_i32_132 = arith.constant 31 : i32
    %402 = arith.cmpi ule, %c20_i32_131, %c31_i32_132 : i32
    %403 = scf.if %402 -> (i32) {
      %485 = arith.shrui %401, %c20_i32_131 : i32
      scf.yield %485 : i32
    } else {
      %c0_i32_162 = arith.constant 0 : i32
      scf.yield %c0_i32_162 : i32
    }
    %c15_i32_133 = arith.constant 15 : i32
    %404 = arith.andi %403, %c15_i32_133 : i32
    %c1050943_i32_134 = arith.constant 1050943 : i32
    %405 = arith.addi %404, %c1050943_i32_134 : i32
    %c0_i64_135 = arith.constant 0 : i64
    %406 = arith.extui %405 : i32 to i64
    %407 = arith.addi %406, %c0_i64_135 : i64
    %408 = llvm.getelementptr %8[%407] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %409 = llvm.load volatile %408 {alignment = 1 : i64} : !llvm.ptr -> i8
    %410 = arith.extui %409 : i8 to i32
    %c9_i64_136 = arith.constant 9 : i64
    %411 = arith.extui %400 : i32 to i64
    %412 = arith.addi %411, %c9_i64_136 : i64
    %413 = llvm.getelementptr %8[%412] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %414 = arith.trunci %410 : i32 to i8
    llvm.store volatile %414, %413 {alignment = 1 : i64} : i8, !llvm.ptr
    %415 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_137 = arith.constant 1 : i32
    %416 = arith.ori %415, %c1_i32_137 : i32
    %false_138 = arith.constant false
    %417 = llvm.call_intrinsic "llvm.ctlz.i32"(%416, %false_138) : (i32, i1) -> i32
    %c2_i32_139 = arith.constant 2 : i32
    %c31_i32_140 = arith.constant 31 : i32
    %418 = arith.cmpi ule, %c2_i32_139, %c31_i32_140 : i32
    %419 = scf.if %418 -> (i32) {
      %485 = arith.shrui %417, %c2_i32_139 : i32
      scf.yield %485 : i32
    } else {
      %c0_i32_162 = arith.constant 0 : i32
      scf.yield %c0_i32_162 : i32
    }
    llvm.store %419, %2 : i32, !llvm.ptr
    %c-2_i32_141 = arith.constant -2 : i32
    %420 = arith.addi %419, %c-2_i32_141 : i32
    llvm.store %420, %1 : i32, !llvm.ptr
    %c10_i32_142 = arith.constant 10 : i32
    %421 = arith.cmpi uge, %420, %c10_i32_142 : i32
    %422 = arith.extui %421 : i1 to i32
    %c0_i32_143 = arith.constant 0 : i32
    %423 = arith.cmpi ne, %422, %c0_i32_143 : i32
    cf.cond_br %423, ^bb5, ^bb26
  ^bb25:  // pred: ^bb7
    %424 = llvm.load %0 : !llvm.ptr -> i32
    %425 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %426 = arith.extui %424 : i32 to i64
    %427 = arith.addi %426, %c4_i64 : i64
    %428 = llvm.getelementptr %8[%427] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %425, %428 {alignment = 1 : i64} : i32, !llvm.ptr
    %429 = llvm.load %0 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %c0_i64_144 = arith.constant 0 : i64
    %430 = arith.extui %429 : i32 to i64
    %431 = arith.addi %430, %c0_i64_144 : i64
    %432 = llvm.getelementptr %8[%431] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %433 = arith.trunci %c128_i32 : i32 to i8
    llvm.store volatile %433, %432 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  ^bb26:  // pred: ^bb24
    %434 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_145 = arith.constant 6 : i32
    %435 = arith.addi %434, %c6_i32_145 : i32
    %436 = llvm.load %1 : !llvm.ptr -> i32
    %437 = arith.addi %435, %436 : i32
    %c92_i32_146 = arith.constant 92 : i32
    %c0_i64_147 = arith.constant 0 : i64
    %438 = arith.extui %437 : i32 to i64
    %439 = arith.addi %438, %c0_i64_147 : i64
    %440 = llvm.getelementptr %8[%439] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %441 = arith.trunci %c92_i32_146 : i32 to i8
    llvm.store volatile %441, %440 {alignment = 1 : i64} : i8, !llvm.ptr
    %442 = llvm.load %2 : !llvm.ptr -> i32
    %443 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_148 = arith.constant 6 : i32
    %444 = arith.addi %443, %c6_i32_148 : i32
    %445 = arith.addi %442, %444 : i32
    %c-1_i32_149 = arith.constant -1 : i32
    %446 = arith.addi %445, %c-1_i32_149 : i32
    %c31605_i32_150 = arith.constant 31605 : i32
    %c0_i64_151 = arith.constant 0 : i64
    %447 = arith.extui %446 : i32 to i64
    %448 = arith.addi %447, %c0_i64_151 : i64
    %449 = llvm.getelementptr %8[%448] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %450 = arith.trunci %c31605_i32_150 : i32 to i16
    llvm.store volatile %450, %449 {alignment = 1 : i64} : i16, !llvm.ptr
    %451 = llvm.load %0 : !llvm.ptr -> i32
    %452 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i64_152 = arith.constant 6 : i64
    %453 = arith.extui %452 : i32 to i64
    %454 = arith.addi %453, %c6_i64_152 : i64
    %455 = llvm.getelementptr %8[%454] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %456 = llvm.load volatile %455 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c0_i64_153 = arith.constant 0 : i64
    %457 = arith.extui %451 : i32 to i64
    %458 = arith.addi %457, %c0_i64_153 : i64
    %459 = llvm.getelementptr %8[%458] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %456, %459 {alignment = 1 : i64} : i64, !llvm.ptr
    %460 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i32_154 = arith.constant 8 : i32
    %461 = arith.addi %460, %c8_i32_154 : i32
    %462 = llvm.load %3 : !llvm.ptr -> i32
    %c6_i32_155 = arith.constant 6 : i32
    %463 = arith.addi %462, %c6_i32_155 : i32
    %c8_i32_156 = arith.constant 8 : i32
    %464 = arith.addi %463, %c8_i32_156 : i32
    %c0_i64_157 = arith.constant 0 : i64
    %465 = arith.extui %464 : i32 to i64
    %466 = arith.addi %465, %c0_i64_157 : i64
    %467 = llvm.getelementptr %8[%466] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %468 = llvm.load volatile %467 {alignment = 1 : i64} : !llvm.ptr -> i16
    %469 = arith.extui %468 : i16 to i32
    %c0_i64_158 = arith.constant 0 : i64
    %470 = arith.extui %461 : i32 to i64
    %471 = arith.addi %470, %c0_i64_158 : i64
    %472 = llvm.getelementptr %8[%471] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %473 = arith.trunci %469 : i32 to i16
    llvm.store volatile %473, %472 {alignment = 1 : i64} : i16, !llvm.ptr
    %474 = llvm.load %0 : !llvm.ptr -> i32
    %c10_i32_159 = arith.constant 10 : i32
    %c11_i64_160 = arith.constant 11 : i64
    %475 = arith.extui %474 : i32 to i64
    %476 = arith.addi %475, %c11_i64_160 : i64
    %477 = llvm.getelementptr %8[%476] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %478 = arith.trunci %c10_i32_159 : i32 to i8
    llvm.store volatile %478, %477 {alignment = 1 : i64} : i8, !llvm.ptr
    %479 = llvm.load %0 : !llvm.ptr -> i32
    %480 = llvm.load %1 : !llvm.ptr -> i32
    %c10_i64_161 = arith.constant 10 : i64
    %481 = arith.extui %479 : i32 to i64
    %482 = arith.addi %481, %c10_i64_161 : i64
    %483 = llvm.getelementptr %8[%482] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %484 = arith.trunci %480 : i32 to i8
    llvm.store volatile %484, %483 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb3
  }
  func.func @f167(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %0 : !llvm.ptr -> i32
    %c11_i32 = arith.constant 11 : i32
    %c31_i32 = arith.constant 31 : i32
    %10 = arith.cmpi ule, %c11_i32, %c31_i32 : i32
    %11 = scf.if %10 -> (i32) {
      %140 = arith.shli %9, %c11_i32 : i32
      scf.yield %140 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    llvm.store %11, %1 : i32, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %2 : i32, !llvm.ptr
    %c33_i32 = arith.constant 33 : i32
    llvm.store %c33_i32, %3 : i32, !llvm.ptr
    %c33_i32_6 = arith.constant 33 : i32
    llvm.store %c33_i32_6, %4 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb2(%12: i32):  // pred: ^bb16
    return %12 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb8
    %13 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %14 = arith.cmpi ugt, %13, %c32_i32 : i32
    %15 = arith.extui %14 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %16 = arith.cmpi ne, %15, %c0_i32_7 : i32
    cf.cond_br %16, ^bb10, ^bb11
  ^bb4:  // 2 preds: ^bb5, ^bb6
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_8 = arith.constant 1 : i32
    %18 = arith.addi %17, %c1_i32_8 : i32
    llvm.store %18, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // no predecessors
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb1, ^bb7
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    %c31_i32_10 = arith.constant 31 : i32
    %20 = arith.cmpi ule, %c1_i32_9, %c31_i32_10 : i32
    %21 = scf.if %20 -> (i32) {
      %140 = arith.shrui %19, %c1_i32_9 : i32
      scf.yield %140 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    %22 = llvm.load %2 : !llvm.ptr -> i32
    %23 = arith.addi %21, %22 : i32
    llvm.store %23, %3 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %c31_i32_11 = arith.constant 31 : i32
    %24 = arith.cmpi ule, %c2_i32, %c31_i32_11 : i32
    %25 = scf.if %24 -> (i32) {
      %140 = arith.shli %23, %c2_i32 : i32
      scf.yield %140 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    %c1053576_i32 = arith.constant 1053576 : i32
    %26 = arith.addi %25, %c1053576_i32 : i32
    %c0_i64 = arith.constant 0 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c0_i64 : i64
    %29 = llvm.getelementptr %8[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %30 = llvm.load volatile %29 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c11_i32_12 = arith.constant 11 : i32
    %c31_i32_13 = arith.constant 31 : i32
    %31 = arith.cmpi ule, %c11_i32_12, %c31_i32_13 : i32
    %32 = scf.if %31 -> (i32) {
      %140 = arith.shli %30, %c11_i32_12 : i32
      scf.yield %140 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    llvm.store %32, %5 : i32, !llvm.ptr
    %33 = llvm.load %1 : !llvm.ptr -> i32
    %34 = arith.cmpi eq, %32, %33 : i32
    %35 = arith.extui %34 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %36 = arith.cmpi ne, %35, %c0_i32_14 : i32
    cf.cond_br %36, ^bb4, ^bb7
  ^bb7:  // pred: ^bb6
    %37 = llvm.load %3 : !llvm.ptr -> i32
    %38 = llvm.load %4 : !llvm.ptr -> i32
    %39 = llvm.load %5 : !llvm.ptr -> i32
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %41 = arith.cmpi ugt, %39, %40 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_15 : i32
    %44 = arith.select %43, %37, %38 : i32
    llvm.store %44, %4 : i32, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %46 = arith.addi %45, %c1_i32_16 : i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %48 = llvm.load %5 : !llvm.ptr -> i32
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %50 = arith.cmpi ult, %48, %49 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %52 = arith.cmpi ne, %51, %c0_i32_17 : i32
    %53 = arith.select %52, %46, %47 : i32
    llvm.store %53, %2 : i32, !llvm.ptr
    %54 = arith.subi %44, %53 : i32
    llvm.store %54, %3 : i32, !llvm.ptr
    %55 = llvm.load %4 : !llvm.ptr -> i32
    %56 = llvm.load %2 : !llvm.ptr -> i32
    %57 = arith.cmpi ugt, %55, %56 : i32
    %58 = arith.extui %57 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %59 = arith.cmpi ne, %58, %c0_i32_18 : i32
    cf.cond_br %59, ^bb6, ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb3
  ^bb9:  // pred: ^bb19
    %60 = llvm.load %3 : !llvm.ptr -> i32
    %c727_i32 = arith.constant 727 : i32
    %c1053516_i32 = arith.constant 1053516 : i32
    call @f158(%arg0, %60, %c727_i32, %c1053516_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb10:  // pred: ^bb3
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c33_i32_19 = arith.constant 33 : i32
    %c1053500_i32 = arith.constant 1053500 : i32
    call @f158(%arg0, %61, %c33_i32_19, %c1053500_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_20 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_20) : (i32) -> ()
    llvm.unreachable
  ^bb11:  // pred: ^bb3
    %62 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32_21 = arith.constant 2 : i32
    %c31_i32_22 = arith.constant 31 : i32
    %63 = arith.cmpi ule, %c2_i32_21, %c31_i32_22 : i32
    %64 = scf.if %63 -> (i32) {
      %140 = arith.shli %62, %c2_i32_21 : i32
      scf.yield %140 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    llvm.store %64, %3 : i32, !llvm.ptr
    %c1053576_i32_23 = arith.constant 1053576 : i32
    %65 = arith.addi %64, %c1053576_i32_23 : i32
    llvm.store %65, %4 : i32, !llvm.ptr
    %c0_i64_24 = arith.constant 0 : i64
    %66 = arith.extui %65 : i32 to i64
    %67 = arith.addi %66, %c0_i64_24 : i64
    %68 = llvm.getelementptr %8[%67] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %69 = llvm.load volatile %68 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c21_i32 = arith.constant 21 : i32
    %c31_i32_25 = arith.constant 31 : i32
    %70 = arith.cmpi ule, %c21_i32, %c31_i32_25 : i32
    %71 = scf.if %70 -> (i32) {
      %140 = arith.shrui %69, %c21_i32 : i32
      scf.yield %140 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    llvm.store %71, %1 : i32, !llvm.ptr
    %c727_i32_26 = arith.constant 727 : i32
    llvm.store %c727_i32_26, %5 : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c32_i32_27 = arith.constant 32 : i32
    %73 = arith.cmpi eq, %72, %c32_i32_27 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_28 : i32
    cf.cond_br %75, ^bb13, ^bb14
  ^bb12:  // 2 preds: ^bb13, ^bb15
    %76 = llvm.load %5 : !llvm.ptr -> i32
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %78 = arith.xori %77, %c-1_i32 : i32
    %79 = arith.addi %76, %78 : i32
    %c0_i32_29 = arith.constant 0 : i32
    %80 = arith.cmpi eq, %79, %c0_i32_29 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_30 : i32
    cf.cond_br %82, ^bb16, ^bb17
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %c1053572_i32 = arith.constant 1053572 : i32
    %84 = arith.addi %83, %c1053572_i32 : i32
    %c0_i64_31 = arith.constant 0 : i64
    %85 = arith.extui %84 : i32 to i64
    %86 = arith.addi %85, %c0_i64_31 : i64
    %87 = llvm.getelementptr %8[%86] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %88 = llvm.load volatile %87 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c2097151_i32 = arith.constant 2097151 : i32
    %89 = arith.andi %88, %c2097151_i32 : i32
    llvm.store %89, %2 : i32, !llvm.ptr
    cf.br ^bb12
  ^bb14:  // pred: ^bb11
    %90 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %91 = arith.addi %90, %c4_i32 : i32
    %c0_i64_32 = arith.constant 0 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c0_i64_32 : i64
    %94 = llvm.getelementptr %8[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c21_i32_33 = arith.constant 21 : i32
    %c31_i32_34 = arith.constant 31 : i32
    %96 = arith.cmpi ule, %c21_i32_33, %c31_i32_34 : i32
    %97 = scf.if %96 -> (i32) {
      %140 = arith.shrui %95, %c21_i32_33 : i32
      scf.yield %140 : i32
    } else {
      %c0_i32_49 = arith.constant 0 : i32
      scf.yield %c0_i32_49 : i32
    }
    llvm.store %97, %5 : i32, !llvm.ptr
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_35 = arith.constant 0 : i32
    %99 = arith.cmpi ne, %98, %c0_i32_35 : i32
    cf.cond_br %99, ^bb13, ^bb15
  ^bb15:  // pred: ^bb14
    %c0_i32_36 = arith.constant 0 : i32
    llvm.store %c0_i32_36, %2 : i32, !llvm.ptr
    cf.br ^bb12
  ^bb16:  // 3 preds: ^bb12, ^bb18, ^bb20
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_37 = arith.constant 1 : i32
    %101 = arith.andi %100, %c1_i32_37 : i32
    cf.br ^bb2(%101 : i32)
  ^bb17:  // pred: ^bb12
    %102 = llvm.load %0 : !llvm.ptr -> i32
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %104 = arith.subi %102, %103 : i32
    llvm.store %104, %4 : i32, !llvm.ptr
    %105 = llvm.load %1 : !llvm.ptr -> i32
    %c727_i32_38 = arith.constant 727 : i32
    %106 = llvm.load %1 : !llvm.ptr -> i32
    %c727_i32_39 = arith.constant 727 : i32
    %107 = arith.cmpi ugt, %106, %c727_i32_39 : i32
    %108 = arith.extui %107 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %109 = arith.cmpi ne, %108, %c0_i32_40 : i32
    %110 = arith.select %109, %105, %c727_i32_38 : i32
    llvm.store %110, %3 : i32, !llvm.ptr
    %111 = llvm.load %5 : !llvm.ptr -> i32
    %c-1_i32_41 = arith.constant -1 : i32
    %112 = arith.addi %111, %c-1_i32_41 : i32
    llvm.store %112, %5 : i32, !llvm.ptr
    %c0_i32_42 = arith.constant 0 : i32
    llvm.store %c0_i32_42, %2 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb18:  // pred: ^bb22
    %113 = llvm.load %5 : !llvm.ptr -> i32
    llvm.store %113, %1 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb19:  // 2 preds: ^bb17, ^bb21
    %114 = llvm.load %3 : !llvm.ptr -> i32
    %115 = llvm.load %1 : !llvm.ptr -> i32
    %116 = arith.cmpi eq, %114, %115 : i32
    %117 = arith.extui %116 : i1 to i32
    %c0_i32_43 = arith.constant 0 : i32
    %118 = arith.cmpi ne, %117, %c0_i32_43 : i32
    cf.cond_br %118, ^bb9, ^bb20
  ^bb20:  // pred: ^bb19
    %119 = llvm.load %2 : !llvm.ptr -> i32
    %120 = llvm.load %1 : !llvm.ptr -> i32
    %c1053708_i32 = arith.constant 1053708 : i32
    %121 = arith.addi %120, %c1053708_i32 : i32
    %c0_i64_44 = arith.constant 0 : i64
    %122 = arith.extui %121 : i32 to i64
    %123 = arith.addi %122, %c0_i64_44 : i64
    %124 = llvm.getelementptr %8[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %125 = llvm.load volatile %124 {alignment = 1 : i64} : !llvm.ptr -> i8
    %126 = arith.extui %125 : i8 to i32
    %127 = arith.addi %119, %126 : i32
    llvm.store %127, %2 : i32, !llvm.ptr
    %128 = llvm.load %4 : !llvm.ptr -> i32
    %129 = arith.cmpi ugt, %127, %128 : i32
    %130 = arith.extui %129 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %131 = arith.cmpi ne, %130, %c0_i32_45 : i32
    cf.cond_br %131, ^bb16, ^bb21
  ^bb21:  // pred: ^bb20
    %132 = llvm.load %5 : !llvm.ptr -> i32
    %133 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_46 = arith.constant 1 : i32
    %134 = arith.addi %133, %c1_i32_46 : i32
    llvm.store %134, %1 : i32, !llvm.ptr
    %135 = arith.cmpi eq, %132, %134 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %137 = arith.cmpi eq, %136, %c0_i32_47 : i32
    %138 = arith.extui %137 : i1 to i32
    %c0_i32_48 = arith.constant 0 : i32
    %139 = arith.cmpi ne, %138, %c0_i32_48 : i32
    cf.cond_br %139, ^bb19, ^bb22
  ^bb22:  // pred: ^bb21
    cf.br ^bb18
  }
  func.func @f168(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %3 = arith.cmpi uge, %2, %c32_i32 : i32
    %4 = arith.extui %3 : i1 to i32
    %c0_i32_1 = arith.constant 0 : i32
    %5 = arith.cmpi ne, %4, %c0_i32_1 : i32
    cf.cond_br %5, ^bb3, ^bb4
  ^bb2(%6: i32):  // 12 preds: ^bb4, ^bb5, ^bb6, ^bb10, ^bb13, ^bb15, ^bb17, ^bb19, ^bb21, ^bb23, ^bb25, ^bb26
    return %6 : i32
  ^bb3:  // pred: ^bb1
    %c1_i32_2 = arith.constant 1 : i32
    llvm.store %c1_i32_2, %1 : i32, !llvm.ptr
    %7 = llvm.load %0 : !llvm.ptr -> i32
    %c127_i32 = arith.constant 127 : i32
    %8 = arith.cmpi ult, %7, %c127_i32 : i32
    %9 = arith.extui %8 : i1 to i32
    %c0_i32_3 = arith.constant 0 : i32
    %10 = arith.cmpi ne, %9, %c0_i32_3 : i32
    cf.cond_br %10, ^bb6, ^bb7
  ^bb4:  // pred: ^bb1
    %c0_i32_4 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_4 : i32)
  ^bb5:  // pred: ^bb7
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c1052790_i32 = arith.constant 1052790 : i32
    %c40_i32 = arith.constant 40 : i32
    %c1052870_i32 = arith.constant 1052870 : i32
    %c288_i32 = arith.constant 288 : i32
    %c1053158_i32 = arith.constant 1053158 : i32
    %c301_i32 = arith.constant 301 : i32
    %12 = call @f195(%arg0, %11, %c1052790_i32, %c40_i32, %c1052870_i32, %c288_i32, %c1053158_i32, %c301_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32) -> i32
    cf.br ^bb2(%12 : i32)
  ^bb6:  // 3 preds: ^bb3, ^bb9, ^bb27
    %13 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%13 : i32)
  ^bb7:  // pred: ^bb3
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %15 = arith.cmpi ult, %14, %c65536_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_5 : i32
    cf.cond_br %17, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c131072_i32 = arith.constant 131072 : i32
    %19 = arith.cmpi ult, %18, %c131072_i32 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_6 : i32
    cf.cond_br %21, ^bb10, ^bb11
  ^bb9:  // pred: ^bb24
    %c0_i32_7 = arith.constant 0 : i32
    llvm.store %c0_i32_7, %1 : i32, !llvm.ptr
    %22 = llvm.load %0 : !llvm.ptr -> i32
    %c-177978_i32 = arith.constant -177978 : i32
    %23 = arith.addi %22, %c-177978_i32 : i32
    %c6_i32 = arith.constant 6 : i32
    %24 = arith.cmpi ult, %23, %c6_i32 : i32
    %25 = arith.extui %24 : i1 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_8 : i32
    cf.cond_br %26, ^bb6, ^bb27
  ^bb10:  // pred: ^bb8
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c1052056_i32 = arith.constant 1052056 : i32
    %c44_i32 = arith.constant 44 : i32
    %c1052144_i32 = arith.constant 1052144 : i32
    %c196_i32 = arith.constant 196 : i32
    %c1052340_i32 = arith.constant 1052340 : i32
    %c450_i32 = arith.constant 450 : i32
    %28 = call @f195(%arg0, %27, %c1052056_i32, %c44_i32, %c1052144_i32, %c196_i32, %c1052340_i32, %c450_i32) : (!llvm.ptr, i32, i32, i32, i32, i32, i32, i32) -> i32
    cf.br ^bb2(%28 : i32)
  ^bb11:  // pred: ^bb8
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c-205744_i32 = arith.constant -205744 : i32
    %30 = arith.addi %29, %c-205744_i32 : i32
    %c712016_i32 = arith.constant 712016 : i32
    %31 = arith.cmpi uge, %30, %c712016_i32 : i32
    %32 = arith.extui %31 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %33 = arith.cmpi ne, %32, %c0_i32_9 : i32
    cf.cond_br %33, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c-201547_i32 = arith.constant -201547 : i32
    %35 = arith.addi %34, %c-201547_i32 : i32
    %c5_i32 = arith.constant 5 : i32
    %36 = arith.cmpi uge, %35, %c5_i32 : i32
    %37 = arith.extui %36 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_10 : i32
    cf.cond_br %38, ^bb14, ^bb15
  ^bb13:  // pred: ^bb11
    %c0_i32_11 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_11 : i32)
  ^bb14:  // pred: ^bb12
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c-195102_i32 = arith.constant -195102 : i32
    %40 = arith.addi %39, %c-195102_i32 : i32
    %c1506_i32 = arith.constant 1506 : i32
    %41 = arith.cmpi uge, %40, %c1506_i32 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_12 : i32
    cf.cond_br %43, ^bb16, ^bb17
  ^bb15:  // pred: ^bb12
    %c0_i32_13 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_13 : i32)
  ^bb16:  // pred: ^bb14
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %c-192094_i32 = arith.constant -192094 : i32
    %45 = arith.addi %44, %c-192094_i32 : i32
    %c2466_i32 = arith.constant 2466 : i32
    %46 = arith.cmpi uge, %45, %c2466_i32 : i32
    %47 = arith.extui %46 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_14 : i32
    cf.cond_br %48, ^bb18, ^bb19
  ^bb17:  // pred: ^bb14
    %c0_i32_15 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_15 : i32)
  ^bb18:  // pred: ^bb16
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c-191457_i32 = arith.constant -191457 : i32
    %50 = arith.addi %49, %c-191457_i32 : i32
    %c15_i32 = arith.constant 15 : i32
    %51 = arith.cmpi uge, %50, %c15_i32 : i32
    %52 = arith.extui %51 : i1 to i32
    %c0_i32_16 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_16 : i32
    cf.cond_br %53, ^bb20, ^bb21
  ^bb19:  // pred: ^bb16
    %c0_i32_17 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_17 : i32)
  ^bb20:  // pred: ^bb18
    %54 = llvm.load %0 : !llvm.ptr -> i32
    %c-183970_i32 = arith.constant -183970 : i32
    %55 = arith.addi %54, %c-183970_i32 : i32
    %c14_i32 = arith.constant 14 : i32
    %56 = arith.cmpi uge, %55, %c14_i32 : i32
    %57 = arith.extui %56 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_18 : i32
    cf.cond_br %58, ^bb22, ^bb23
  ^bb21:  // pred: ^bb18
    %c0_i32_19 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_19 : i32)
  ^bb22:  // pred: ^bb20
    %59 = llvm.load %0 : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %60 = arith.andi %59, %c-2_i32 : i32
    %c178206_i32 = arith.constant 178206 : i32
    %61 = arith.cmpi eq, %60, %c178206_i32 : i32
    %62 = arith.extui %61 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %63 = arith.cmpi eq, %62, %c0_i32_20 : i32
    %64 = arith.extui %63 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %65 = arith.cmpi ne, %64, %c0_i32_21 : i32
    cf.cond_br %65, ^bb24, ^bb25
  ^bb23:  // pred: ^bb20
    %c0_i32_22 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_22 : i32)
  ^bb24:  // pred: ^bb22
    %66 = llvm.load %0 : !llvm.ptr -> i32
    %c-32_i32 = arith.constant -32 : i32
    %67 = arith.andi %66, %c-32_i32 : i32
    %c173792_i32 = arith.constant 173792 : i32
    %68 = arith.cmpi eq, %67, %c173792_i32 : i32
    %69 = arith.extui %68 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %70 = arith.cmpi eq, %69, %c0_i32_23 : i32
    %71 = arith.extui %70 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_24 : i32
    cf.cond_br %72, ^bb9, ^bb26
  ^bb25:  // pred: ^bb22
    %c0_i32_25 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_25 : i32)
  ^bb26:  // pred: ^bb24
    %c0_i32_26 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_26 : i32)
  ^bb27:  // pred: ^bb9
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c-1114112_i32 = arith.constant -1114112 : i32
    %74 = arith.addi %73, %c-1114112_i32 : i32
    %c-196112_i32 = arith.constant -196112 : i32
    %75 = arith.cmpi ult, %74, %c-196112_i32 : i32
    %76 = arith.extui %75 : i1 to i32
    llvm.store %76, %1 : i32, !llvm.ptr
    cf.br ^bb6
  }
  func.func @f169(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %10 : i64, !llvm.ptr
    %11 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %19 : !llvm.ptr -> i64
    %22 = arith.trunci %21 : i64 to i32
    %23 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %19 : !llvm.ptr -> i64
    %25 = arith.trunci %24 : i64 to i32
    %26 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %19 : !llvm.ptr -> i64
    %28 = arith.trunci %27 : i64 to i32
    %29 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %30 = llvm.load %29 : !llvm.ptr -> i32
    %31 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %19 : !llvm.ptr -> i64
    %33 = arith.trunci %32 : i64 to i32
    %34 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.load %19 : !llvm.ptr -> i64
    %36 = arith.trunci %35 : i64 to i32
    %37 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %19 : !llvm.ptr -> i64
    %39 = arith.trunci %38 : i64 to i32
    %40 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.load %19 : !llvm.ptr -> i64
    %42 = arith.trunci %41 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %43 = llvm.load %12 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %44 = arith.subi %43, %c64_i32 : i32
    llvm.store %44, %5 : i32, !llvm.ptr
    llvm.store %44, %12 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    llvm.store %c1_i32_10, %6 : i32, !llvm.ptr
    %45 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %46 = arith.extui %45 : i32 to i64
    %47 = arith.addi %46, %c4_i64 : i64
    %48 = llvm.getelementptr %15[%47] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %49 = llvm.load volatile %48 {alignment = 1 : i64} : !llvm.ptr -> i8
    %50 = arith.extui %49 : i8 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_11 : i32
    cf.cond_br %51, ^bb3, ^bb4
  ^bb2(%52: i32):  // pred: ^bb3
    return %52 : i32
  ^bb3:  // 10 preds: ^bb1, ^bb13, ^bb22, ^bb31, ^bb40, ^bb42, ^bb50, ^bb53, ^bb61, ^bb70
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_12 = arith.constant 1 : i32
    %c5_i64 = arith.constant 5 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c5_i64 : i64
    %56 = llvm.getelementptr %15[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = arith.trunci %c1_i32_12 : i32 to i8
    llvm.store volatile %57, %56 {alignment = 1 : i64} : i8, !llvm.ptr
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %59 = llvm.load %6 : !llvm.ptr -> i32
    %c4_i64_13 = arith.constant 4 : i64
    %60 = arith.extui %58 : i32 to i64
    %61 = arith.addi %60, %c4_i64_13 : i64
    %62 = llvm.getelementptr %15[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %63 = arith.trunci %59 : i32 to i8
    llvm.store volatile %63, %62 {alignment = 1 : i64} : i8, !llvm.ptr
    %64 = llvm.load %5 : !llvm.ptr -> i32
    %c64_i32_14 = arith.constant 64 : i32
    %65 = arith.addi %64, %c64_i32_14 : i32
    llvm.store %65, %12 : i32, !llvm.ptr
    %66 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%66 : i32)
  ^bb4:  // pred: ^bb1
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i64_15 = arith.constant 5 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c5_i64_15 : i64
    %70 = llvm.getelementptr %15[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i8
    %72 = arith.extui %71 : i8 to i32
    llvm.store %72, %7 : i32, !llvm.ptr
    %73 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c0_i64_16 : i64
    %76 = llvm.getelementptr %15[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %77, %8 : i32, !llvm.ptr
    %c28_i64 = arith.constant 28 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c28_i64 : i64
    %80 = llvm.getelementptr %15[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %81, %9 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %82 = arith.andi %81, %c4_i32 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %83 = arith.cmpi ne, %82, %c0_i32_17 : i32
    cf.cond_br %83, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %84 = llvm.load %7 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %85 = arith.andi %84, %c255_i32 : i32
    %c0_i32_18 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %85, %c0_i32_18 : i32
    cf.cond_br %86, ^bb42, ^bb43
  ^bb6:  // pred: ^bb4
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %6 : i32, !llvm.ptr
    %87 = llvm.load %8 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c20_i64 : i64
    %90 = llvm.getelementptr %15[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load volatile %90 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1051155_i32 = arith.constant 1051155 : i32
    %c1051152_i32 = arith.constant 1051152 : i32
    %92 = llvm.load %7 : !llvm.ptr -> i32
    %c255_i32_20 = arith.constant 255 : i32
    %93 = arith.andi %92, %c255_i32_20 : i32
    llvm.store %93, %7 : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    %94 = arith.cmpi ne, %93, %c0_i32_21 : i32
    %95 = arith.select %94, %c1051155_i32, %c1051152_i32 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %96 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_22 = arith.constant 0 : i32
    %97 = arith.cmpi ne, %96, %c0_i32_22 : i32
    %98 = arith.select %97, %c2_i32, %c3_i32 : i32
    %99 = llvm.load %8 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %100 = arith.extui %99 : i32 to i64
    %101 = arith.addi %100, %c24_i64 : i64
    %102 = llvm.getelementptr %15[%101] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %103 = llvm.load volatile %102 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c12_i64 : i64
    %106 = llvm.getelementptr %15[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i32
    %108 = arith.cmpi ult, %107, %22 : i32
    cf.cond_br %108, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %109 = llvm.getelementptr inbounds %20[%107] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %110 = llvm.load %109 : !llvm.ptr -> !llvm.ptr
    %111 = llvm.ptrtoint %110 : !llvm.ptr to i64
    %c0_i64_23 = arith.constant 0 : i64
    %112 = arith.cmpi eq, %111, %c0_i64_23 : i64
    cf.cond_br %112, ^bb10, ^bb9
  ^bb8:  // pred: ^bb6
    %c3_i32_24 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_24) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %113 = llvm.getelementptr %110[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %114 = llvm.getelementptr %110[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %115 = llvm.getelementptr %110[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %116 = llvm.load %113 : !llvm.ptr -> !llvm.ptr
    %117 = llvm.load %115 : !llvm.ptr -> !llvm.ptr
    %118 = llvm.ptrtoint %116 : !llvm.ptr to i64
    %c0_i64_25 = arith.constant 0 : i64
    %119 = arith.cmpi eq, %118, %c0_i64_25 : i64
    cf.cond_br %119, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c4_i32_26 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_26) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %120 = llvm.load %114 : !llvm.ptr -> i32
    %121 = arith.cmpi ne, %17, %120 : i32
    cf.cond_br %121, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_27 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_27) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %122 = llvm.call %116(%117, %91, %95, %98) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_28 = arith.constant 0 : i32
    %123 = arith.cmpi ne, %122, %c0_i32_28 : i32
    cf.cond_br %123, ^bb3, ^bb15
  ^bb14:  // pred: ^bb11
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb13
    %c1_i32_29 = arith.constant 1 : i32
    llvm.store %c1_i32_29, %6 : i32, !llvm.ptr
    %124 = llvm.load %8 : !llvm.ptr -> i32
    %c20_i64_30 = arith.constant 20 : i64
    %125 = arith.extui %124 : i32 to i64
    %126 = arith.addi %125, %c20_i64_30 : i64
    %127 = llvm.getelementptr %15[%126] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %128 = llvm.load volatile %127 {alignment = 1 : i64} : !llvm.ptr -> i32
    %129 = llvm.load %1 : !llvm.ptr -> i32
    %130 = llvm.load %2 : !llvm.ptr -> i32
    %131 = llvm.load %8 : !llvm.ptr -> i32
    %c24_i64_31 = arith.constant 24 : i64
    %132 = arith.extui %131 : i32 to i64
    %133 = arith.addi %132, %c24_i64_31 : i64
    %134 = llvm.getelementptr %15[%133] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %135 = llvm.load volatile %134 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_32 = arith.constant 12 : i64
    %136 = arith.extui %135 : i32 to i64
    %137 = arith.addi %136, %c12_i64_32 : i64
    %138 = llvm.getelementptr %15[%137] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %139 = llvm.load volatile %138 {alignment = 1 : i64} : !llvm.ptr -> i32
    %140 = arith.cmpi ult, %139, %25 : i32
    cf.cond_br %140, ^bb16, ^bb17
  ^bb16:  // 2 preds: ^bb15, ^bb17
    %141 = llvm.getelementptr inbounds %23[%139] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %142 = llvm.load %141 : !llvm.ptr -> !llvm.ptr
    %143 = llvm.ptrtoint %142 : !llvm.ptr to i64
    %c0_i64_33 = arith.constant 0 : i64
    %144 = arith.cmpi eq, %143, %c0_i64_33 : i64
    cf.cond_br %144, ^bb19, ^bb18
  ^bb17:  // pred: ^bb15
    %c3_i32_34 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_34) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %145 = llvm.getelementptr %142[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %146 = llvm.getelementptr %142[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %147 = llvm.getelementptr %142[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %148 = llvm.load %145 : !llvm.ptr -> !llvm.ptr
    %149 = llvm.load %147 : !llvm.ptr -> !llvm.ptr
    %150 = llvm.ptrtoint %148 : !llvm.ptr to i64
    %c0_i64_35 = arith.constant 0 : i64
    %151 = arith.cmpi eq, %150, %c0_i64_35 : i64
    cf.cond_br %151, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c4_i32_36 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_36) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %152 = llvm.load %146 : !llvm.ptr -> i32
    %153 = arith.cmpi ne, %17, %152 : i32
    cf.cond_br %153, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c3_i32_37 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_37) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %154 = llvm.call %148(%149, %128, %129, %130) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_38 = arith.constant 0 : i32
    %155 = arith.cmpi ne, %154, %c0_i32_38 : i32
    cf.cond_br %155, ^bb3, ^bb24
  ^bb23:  // pred: ^bb20
    %c5_i32_39 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_39) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // pred: ^bb22
    %c1_i32_40 = arith.constant 1 : i32
    llvm.store %c1_i32_40, %6 : i32, !llvm.ptr
    %156 = llvm.load %8 : !llvm.ptr -> i32
    %c20_i64_41 = arith.constant 20 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c20_i64_41 : i64
    %159 = llvm.getelementptr %15[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1051104_i32 = arith.constant 1051104 : i32
    %c2_i32_42 = arith.constant 2 : i32
    %161 = llvm.load %8 : !llvm.ptr -> i32
    %c24_i64_43 = arith.constant 24 : i64
    %162 = arith.extui %161 : i32 to i64
    %163 = arith.addi %162, %c24_i64_43 : i64
    %164 = llvm.getelementptr %15[%163] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %165 = llvm.load volatile %164 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_44 = arith.constant 12 : i64
    %166 = arith.extui %165 : i32 to i64
    %167 = arith.addi %166, %c12_i64_44 : i64
    %168 = llvm.getelementptr %15[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %169 = llvm.load volatile %168 {alignment = 1 : i64} : !llvm.ptr -> i32
    %170 = arith.cmpi ult, %169, %28 : i32
    cf.cond_br %170, ^bb25, ^bb26
  ^bb25:  // 2 preds: ^bb24, ^bb26
    %171 = llvm.getelementptr inbounds %26[%169] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %172 = llvm.load %171 : !llvm.ptr -> !llvm.ptr
    %173 = llvm.ptrtoint %172 : !llvm.ptr to i64
    %c0_i64_45 = arith.constant 0 : i64
    %174 = arith.cmpi eq, %173, %c0_i64_45 : i64
    cf.cond_br %174, ^bb28, ^bb27
  ^bb26:  // pred: ^bb24
    %c3_i32_46 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_46) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %175 = llvm.getelementptr %172[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %176 = llvm.getelementptr %172[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %177 = llvm.getelementptr %172[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %178 = llvm.load %175 : !llvm.ptr -> !llvm.ptr
    %179 = llvm.load %177 : !llvm.ptr -> !llvm.ptr
    %180 = llvm.ptrtoint %178 : !llvm.ptr to i64
    %c0_i64_47 = arith.constant 0 : i64
    %181 = arith.cmpi eq, %180, %c0_i64_47 : i64
    cf.cond_br %181, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c4_i32_48 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_48) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %182 = llvm.load %176 : !llvm.ptr -> i32
    %183 = arith.cmpi ne, %17, %182 : i32
    cf.cond_br %183, ^bb32, ^bb31
  ^bb30:  // pred: ^bb27
    %c3_i32_49 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_49) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %184 = llvm.call %178(%179, %160, %c1051104_i32, %c2_i32_42) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_50 = arith.constant 0 : i32
    %185 = arith.cmpi ne, %184, %c0_i32_50 : i32
    cf.cond_br %185, ^bb3, ^bb33
  ^bb32:  // pred: ^bb29
    %c5_i32_51 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_51) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // pred: ^bb31
    %186 = llvm.load %3 : !llvm.ptr -> i32
    %187 = llvm.load %8 : !llvm.ptr -> i32
    %188 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64_52 = arith.constant 12 : i64
    %189 = arith.extui %188 : i32 to i64
    %190 = arith.addi %189, %c12_i64_52 : i64
    %191 = llvm.getelementptr %15[%190] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %192 = llvm.load volatile %191 {alignment = 1 : i64} : !llvm.ptr -> i32
    %193 = arith.cmpi ult, %192, %33 : i32
    cf.cond_br %193, ^bb34, ^bb35
  ^bb34:  // 2 preds: ^bb33, ^bb35
    %194 = llvm.getelementptr inbounds %31[%192] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %195 = llvm.load %194 : !llvm.ptr -> !llvm.ptr
    %196 = llvm.ptrtoint %195 : !llvm.ptr to i64
    %c0_i64_53 = arith.constant 0 : i64
    %197 = arith.cmpi eq, %196, %c0_i64_53 : i64
    cf.cond_br %197, ^bb37, ^bb36
  ^bb35:  // pred: ^bb33
    %c3_i32_54 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_54) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %198 = llvm.getelementptr %195[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %199 = llvm.getelementptr %195[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %200 = llvm.getelementptr %195[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %201 = llvm.load %198 : !llvm.ptr -> !llvm.ptr
    %202 = llvm.load %200 : !llvm.ptr -> !llvm.ptr
    %203 = llvm.ptrtoint %201 : !llvm.ptr to i64
    %c0_i64_55 = arith.constant 0 : i64
    %204 = arith.cmpi eq, %203, %c0_i64_55 : i64
    cf.cond_br %204, ^bb39, ^bb38
  ^bb37:  // pred: ^bb34
    %c4_i32_56 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_56) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %205 = llvm.load %199 : !llvm.ptr -> i32
    %206 = arith.cmpi ne, %30, %205 : i32
    cf.cond_br %206, ^bb41, ^bb40
  ^bb39:  // pred: ^bb36
    %c3_i32_57 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_57) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %207 = llvm.call %201(%202, %186, %187) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    llvm.store %207, %6 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb41:  // pred: ^bb38
    %c5_i32_58 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_58) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb5, ^bb52
    %c1_i32_59 = arith.constant 1 : i32
    llvm.store %c1_i32_59, %6 : i32, !llvm.ptr
    %208 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_60 = arith.constant 1 : i32
    %c27_i64 = arith.constant 27 : i64
    %209 = arith.extui %208 : i32 to i64
    %210 = arith.addi %209, %c27_i64 : i64
    %211 = llvm.getelementptr %15[%210] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %212 = arith.trunci %c1_i32_60 : i32 to i8
    llvm.store volatile %212, %211 {alignment = 1 : i64} : i8, !llvm.ptr
    %213 = llvm.load %5 : !llvm.ptr -> i32
    %214 = llvm.load %8 : !llvm.ptr -> i32
    %c20_i64_61 = arith.constant 20 : i64
    %215 = arith.extui %214 : i32 to i64
    %216 = arith.addi %215, %c20_i64_61 : i64
    %217 = llvm.getelementptr %15[%216] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %218 = llvm.load volatile %217 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c12_i64_62 = arith.constant 12 : i64
    %219 = arith.extui %213 : i32 to i64
    %220 = arith.addi %219, %c12_i64_62 : i64
    %221 = llvm.getelementptr %15[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %218, %221 {alignment = 1 : i64} : i64, !llvm.ptr
    %222 = llvm.load %5 : !llvm.ptr -> i32
    %c1051124_i32 = arith.constant 1051124 : i32
    %c52_i64 = arith.constant 52 : i64
    %223 = arith.extui %222 : i32 to i64
    %224 = arith.addi %223, %c52_i64 : i64
    %225 = llvm.getelementptr %15[%224] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051124_i32, %225 {alignment = 1 : i64} : i32, !llvm.ptr
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %227 = llvm.load %5 : !llvm.ptr -> i32
    %c27_i32 = arith.constant 27 : i32
    %228 = arith.addi %227, %c27_i32 : i32
    %c20_i64_63 = arith.constant 20 : i64
    %229 = arith.extui %226 : i32 to i64
    %230 = arith.addi %229, %c20_i64_63 : i64
    %231 = llvm.getelementptr %15[%230] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %228, %231 {alignment = 1 : i64} : i32, !llvm.ptr
    %232 = llvm.load %5 : !llvm.ptr -> i32
    %233 = llvm.load %8 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %234 = arith.extui %233 : i32 to i64
    %235 = arith.addi %234, %c8_i64 : i64
    %236 = llvm.getelementptr %15[%235] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %237 = llvm.load volatile %236 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c36_i64 = arith.constant 36 : i64
    %238 = arith.extui %232 : i32 to i64
    %239 = arith.addi %238, %c36_i64 : i64
    %240 = llvm.getelementptr %15[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %237, %240 {alignment = 1 : i64} : i64, !llvm.ptr
    %241 = llvm.load %8 : !llvm.ptr -> i32
    %c0_i64_64 = arith.constant 0 : i64
    %242 = arith.extui %241 : i32 to i64
    %243 = arith.addi %242, %c0_i64_64 : i64
    %244 = llvm.getelementptr %15[%243] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %245 = llvm.load volatile %244 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %245, %10 : i64, !llvm.ptr
    %246 = llvm.load %5 : !llvm.ptr -> i32
    %247 = llvm.load %9 : !llvm.ptr -> i32
    %c56_i64 = arith.constant 56 : i64
    %248 = arith.extui %246 : i32 to i64
    %249 = arith.addi %248, %c56_i64 : i64
    %250 = llvm.getelementptr %15[%249] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %247, %250 {alignment = 1 : i64} : i32, !llvm.ptr
    %251 = llvm.load %5 : !llvm.ptr -> i32
    %252 = llvm.load %8 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %253 = arith.extui %252 : i32 to i64
    %254 = arith.addi %253, %c16_i64 : i64
    %255 = llvm.getelementptr %15[%254] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %256 = llvm.load volatile %255 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %257 = arith.extui %251 : i32 to i64
    %258 = arith.addi %257, %c44_i64 : i64
    %259 = llvm.getelementptr %15[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %256, %259 {alignment = 1 : i64} : i32, !llvm.ptr
    %260 = llvm.load %5 : !llvm.ptr -> i32
    %261 = llvm.load %8 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %262 = arith.extui %261 : i32 to i64
    %263 = arith.addi %262, %c32_i64 : i64
    %264 = llvm.getelementptr %15[%263] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %265 = llvm.load volatile %264 {alignment = 1 : i64} : !llvm.ptr -> i8
    %266 = arith.extui %265 : i8 to i32
    %c60_i64 = arith.constant 60 : i64
    %267 = arith.extui %260 : i32 to i64
    %268 = arith.addi %267, %c60_i64 : i64
    %269 = llvm.getelementptr %15[%268] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %270 = arith.trunci %266 : i32 to i8
    llvm.store volatile %270, %269 {alignment = 1 : i64} : i8, !llvm.ptr
    %271 = llvm.load %5 : !llvm.ptr -> i32
    %272 = llvm.load %10 : !llvm.ptr -> i64
    %c28_i64_65 = arith.constant 28 : i64
    %273 = arith.extui %271 : i32 to i64
    %274 = arith.addi %273, %c28_i64_65 : i64
    %275 = llvm.getelementptr %15[%274] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %272, %275 {alignment = 1 : i64} : i64, !llvm.ptr
    %276 = llvm.load %5 : !llvm.ptr -> i32
    %277 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %278 = arith.addi %277, %c12_i32 : i32
    %c48_i64 = arith.constant 48 : i64
    %279 = arith.extui %276 : i32 to i64
    %280 = arith.addi %279, %c48_i64 : i64
    %281 = llvm.getelementptr %15[%280] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %278, %281 {alignment = 1 : i64} : i32, !llvm.ptr
    %282 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i32_66 = arith.constant 12 : i32
    %283 = arith.addi %282, %c12_i32_66 : i32
    %284 = llvm.load %1 : !llvm.ptr -> i32
    %285 = llvm.load %2 : !llvm.ptr -> i32
    %286 = call @f178(%arg0, %283, %284, %285) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_67 = arith.constant 0 : i32
    %287 = arith.cmpi ne, %286, %c0_i32_67 : i32
    cf.cond_br %287, ^bb3, ^bb53
  ^bb43:  // pred: ^bb5
    %c1_i32_68 = arith.constant 1 : i32
    llvm.store %c1_i32_68, %6 : i32, !llvm.ptr
    %288 = llvm.load %8 : !llvm.ptr -> i32
    %c20_i64_69 = arith.constant 20 : i64
    %289 = arith.extui %288 : i32 to i64
    %290 = arith.addi %289, %c20_i64_69 : i64
    %291 = llvm.getelementptr %15[%290] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %292 = llvm.load volatile %291 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1051157_i32 = arith.constant 1051157 : i32
    %c3_i32_70 = arith.constant 3 : i32
    %293 = llvm.load %8 : !llvm.ptr -> i32
    %c24_i64_71 = arith.constant 24 : i64
    %294 = arith.extui %293 : i32 to i64
    %295 = arith.addi %294, %c24_i64_71 : i64
    %296 = llvm.getelementptr %15[%295] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %297 = llvm.load volatile %296 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_72 = arith.constant 12 : i64
    %298 = arith.extui %297 : i32 to i64
    %299 = arith.addi %298, %c12_i64_72 : i64
    %300 = llvm.getelementptr %15[%299] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %301 = llvm.load volatile %300 {alignment = 1 : i64} : !llvm.ptr -> i32
    %302 = arith.cmpi ult, %301, %36 : i32
    cf.cond_br %302, ^bb44, ^bb45
  ^bb44:  // 2 preds: ^bb43, ^bb45
    %303 = llvm.getelementptr inbounds %34[%301] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %304 = llvm.load %303 : !llvm.ptr -> !llvm.ptr
    %305 = llvm.ptrtoint %304 : !llvm.ptr to i64
    %c0_i64_73 = arith.constant 0 : i64
    %306 = arith.cmpi eq, %305, %c0_i64_73 : i64
    cf.cond_br %306, ^bb47, ^bb46
  ^bb45:  // pred: ^bb43
    %c3_i32_74 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_74) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb44, ^bb47
    %307 = llvm.getelementptr %304[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %308 = llvm.getelementptr %304[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %309 = llvm.getelementptr %304[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %310 = llvm.load %307 : !llvm.ptr -> !llvm.ptr
    %311 = llvm.load %309 : !llvm.ptr -> !llvm.ptr
    %312 = llvm.ptrtoint %310 : !llvm.ptr to i64
    %c0_i64_75 = arith.constant 0 : i64
    %313 = arith.cmpi eq, %312, %c0_i64_75 : i64
    cf.cond_br %313, ^bb49, ^bb48
  ^bb47:  // pred: ^bb44
    %c4_i32_76 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_76) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %314 = llvm.load %308 : !llvm.ptr -> i32
    %315 = arith.cmpi ne, %17, %314 : i32
    cf.cond_br %315, ^bb51, ^bb50
  ^bb49:  // pred: ^bb46
    %c3_i32_77 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_77) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %316 = llvm.call %310(%311, %292, %c1051157_i32, %c3_i32_70) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_78 = arith.constant 0 : i32
    %317 = arith.cmpi ne, %316, %c0_i32_78 : i32
    cf.cond_br %317, ^bb3, ^bb52
  ^bb51:  // pred: ^bb48
    %c5_i32_79 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_79) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // pred: ^bb50
    %318 = llvm.load %8 : !llvm.ptr -> i32
    %c28_i64_80 = arith.constant 28 : i64
    %319 = arith.extui %318 : i32 to i64
    %320 = arith.addi %319, %c28_i64_80 : i64
    %321 = llvm.getelementptr %15[%320] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %322 = llvm.load volatile %321 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %322, %9 : i32, !llvm.ptr
    cf.br ^bb42
  ^bb53:  // pred: ^bb42
    %323 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i32_81 = arith.constant 12 : i32
    %324 = arith.addi %323, %c12_i32_81 : i32
    %c1051104_i32_82 = arith.constant 1051104 : i32
    %c2_i32_83 = arith.constant 2 : i32
    %325 = call @f178(%arg0, %324, %c1051104_i32_82, %c2_i32_83) : (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_84 = arith.constant 0 : i32
    %326 = arith.cmpi ne, %325, %c0_i32_84 : i32
    cf.cond_br %326, ^bb3, ^bb54
  ^bb54:  // pred: ^bb53
    %327 = llvm.load %3 : !llvm.ptr -> i32
    %328 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %329 = arith.addi %328, %c28_i32 : i32
    %330 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64_85 = arith.constant 12 : i64
    %331 = arith.extui %330 : i32 to i64
    %332 = arith.addi %331, %c12_i64_85 : i64
    %333 = llvm.getelementptr %15[%332] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %334 = llvm.load volatile %333 {alignment = 1 : i64} : !llvm.ptr -> i32
    %335 = arith.cmpi ult, %334, %39 : i32
    cf.cond_br %335, ^bb55, ^bb56
  ^bb55:  // 2 preds: ^bb54, ^bb56
    %336 = llvm.getelementptr inbounds %37[%334] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %337 = llvm.load %336 : !llvm.ptr -> !llvm.ptr
    %338 = llvm.ptrtoint %337 : !llvm.ptr to i64
    %c0_i64_86 = arith.constant 0 : i64
    %339 = arith.cmpi eq, %338, %c0_i64_86 : i64
    cf.cond_br %339, ^bb58, ^bb57
  ^bb56:  // pred: ^bb54
    %c3_i32_87 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_87) : (i32) -> ()
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %340 = llvm.getelementptr %337[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %341 = llvm.getelementptr %337[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %342 = llvm.getelementptr %337[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %343 = llvm.load %340 : !llvm.ptr -> !llvm.ptr
    %344 = llvm.load %342 : !llvm.ptr -> !llvm.ptr
    %345 = llvm.ptrtoint %343 : !llvm.ptr to i64
    %c0_i64_88 = arith.constant 0 : i64
    %346 = arith.cmpi eq, %345, %c0_i64_88 : i64
    cf.cond_br %346, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c4_i32_89 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_89) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %347 = llvm.load %341 : !llvm.ptr -> i32
    %348 = arith.cmpi ne, %30, %347 : i32
    cf.cond_br %348, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c3_i32_90 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_90) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %349 = llvm.call %343(%344, %327, %329) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_91 = arith.constant 0 : i32
    %350 = arith.cmpi ne, %349, %c0_i32_91 : i32
    cf.cond_br %350, ^bb3, ^bb63
  ^bb62:  // pred: ^bb59
    %c5_i32_92 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_92) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // pred: ^bb61
    %351 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i64_93 = arith.constant 48 : i64
    %352 = arith.extui %351 : i32 to i64
    %353 = arith.addi %352, %c48_i64_93 : i64
    %354 = llvm.getelementptr %15[%353] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %355 = llvm.load volatile %354 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1051160_i32 = arith.constant 1051160 : i32
    %c2_i32_94 = arith.constant 2 : i32
    %356 = llvm.load %5 : !llvm.ptr -> i32
    %c52_i64_95 = arith.constant 52 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c52_i64_95 : i64
    %359 = llvm.getelementptr %15[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load volatile %359 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_96 = arith.constant 12 : i64
    %361 = arith.extui %360 : i32 to i64
    %362 = arith.addi %361, %c12_i64_96 : i64
    %363 = llvm.getelementptr %15[%362] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %364 = llvm.load volatile %363 {alignment = 1 : i64} : !llvm.ptr -> i32
    %365 = arith.cmpi ult, %364, %42 : i32
    cf.cond_br %365, ^bb64, ^bb65
  ^bb64:  // 2 preds: ^bb63, ^bb65
    %366 = llvm.getelementptr inbounds %40[%364] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %367 = llvm.load %366 : !llvm.ptr -> !llvm.ptr
    %368 = llvm.ptrtoint %367 : !llvm.ptr to i64
    %c0_i64_97 = arith.constant 0 : i64
    %369 = arith.cmpi eq, %368, %c0_i64_97 : i64
    cf.cond_br %369, ^bb67, ^bb66
  ^bb65:  // pred: ^bb63
    %c3_i32_98 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_98) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %370 = llvm.getelementptr %367[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %371 = llvm.getelementptr %367[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %372 = llvm.getelementptr %367[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %373 = llvm.load %370 : !llvm.ptr -> !llvm.ptr
    %374 = llvm.load %372 : !llvm.ptr -> !llvm.ptr
    %375 = llvm.ptrtoint %373 : !llvm.ptr to i64
    %c0_i64_99 = arith.constant 0 : i64
    %376 = arith.cmpi eq, %375, %c0_i64_99 : i64
    cf.cond_br %376, ^bb69, ^bb68
  ^bb67:  // pred: ^bb64
    %c4_i32_100 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_100) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %377 = llvm.load %371 : !llvm.ptr -> i32
    %378 = arith.cmpi ne, %17, %377 : i32
    cf.cond_br %378, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c3_i32_101 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_101) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %379 = llvm.call %373(%374, %355, %c1051160_i32, %c2_i32_94) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %379, %6 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb71:  // pred: ^bb68
    %c5_i32_102 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_102) : (i32) -> ()
    cf.br ^bb70
  }
  func.func @f170(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %5 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %4[%7] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %9 = llvm.load volatile %8 {alignment = 1 : i64} : !llvm.ptr -> i8
    %10 = arith.extui %9 : i8 to i64
    %c1_i32_1 = arith.constant 1 : i32
    %11 = llvm.load %1 : !llvm.ptr -> i32
    %12 = call @f196(%arg0, %10, %c1_i32_1, %11) : (!llvm.ptr, i64, i32, i32) -> i32
    cf.br ^bb2(%12 : i32)
  ^bb2(%13: i32):  // pred: ^bb1
    return %13 : i32
  }
  func.func @f171(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %11 = llvm.load %7 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %12 = arith.subi %11, %c64_i32 : i32
    llvm.store %12, %5 : i32, !llvm.ptr
    llvm.store %12, %7 : i32, !llvm.ptr
    %13 = llvm.load %5 : !llvm.ptr -> i32
    %14 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %15 = arith.extui %13 : i32 to i64
    %16 = arith.addi %15, %c12_i64 : i64
    %17 = llvm.getelementptr %10[%16] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %14, %17 {alignment = 1 : i64} : i32, !llvm.ptr
    %18 = llvm.load %5 : !llvm.ptr -> i32
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %20 = arith.extui %18 : i32 to i64
    %21 = arith.addi %20, %c8_i64 : i64
    %22 = llvm.getelementptr %10[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %19, %22 {alignment = 1 : i64} : i32, !llvm.ptr
    %23 = llvm.load %5 : !llvm.ptr -> i32
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %25 = arith.extui %23 : i32 to i64
    %26 = arith.addi %25, %c20_i64 : i64
    %27 = llvm.getelementptr %10[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %30 = arith.extui %28 : i32 to i64
    %31 = arith.addi %30, %c16_i64 : i64
    %32 = llvm.getelementptr %10[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %29, %32 {alignment = 1 : i64} : i32, !llvm.ptr
    %33 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c28_i64 = arith.constant 28 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c28_i64 : i64
    %36 = llvm.getelementptr %10[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %5 : !llvm.ptr -> i32
    %c1051108_i32 = arith.constant 1051108 : i32
    %c24_i64 = arith.constant 24 : i64
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.addi %38, %c24_i64 : i64
    %40 = llvm.getelementptr %10[%39] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051108_i32, %40 {alignment = 1 : i64} : i32, !llvm.ptr
    %41 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c36_i64 = arith.constant 36 : i64
    %42 = arith.extui %41 : i32 to i64
    %43 = arith.addi %42, %c36_i64 : i64
    %44 = llvm.getelementptr %10[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %5 : !llvm.ptr -> i32
    %c78_i32 = arith.constant 78 : i32
    %46 = arith.extui %c78_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %47 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %48 = scf.if %47 -> (i64) {
      %76 = arith.shli %46, %c32_i64 : i64
      scf.yield %76 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %49 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %50 = arith.addi %49, %c16_i32 : i32
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.ori %48, %51 : i64
    %c56_i64 = arith.constant 56 : i64
    %53 = arith.extui %45 : i32 to i64
    %54 = arith.addi %53, %c56_i64 : i64
    %55 = llvm.getelementptr %10[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i64, !llvm.ptr
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %c79_i32 = arith.constant 79 : i32
    %57 = arith.extui %c79_i32 : i32 to i64
    %c32_i64_5 = arith.constant 32 : i64
    %c63_i64_6 = arith.constant 63 : i64
    %58 = arith.cmpi ule, %c32_i64_5, %c63_i64_6 : i64
    %59 = scf.if %58 -> (i64) {
      %76 = arith.shli %57, %c32_i64_5 : i64
      scf.yield %76 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    %60 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %61 = arith.addi %60, %c8_i32 : i32
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.ori %59, %62 : i64
    %c48_i64 = arith.constant 48 : i64
    %64 = arith.extui %56 : i32 to i64
    %65 = arith.addi %64, %c48_i64 : i64
    %66 = llvm.getelementptr %10[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %63, %66 {alignment = 1 : i64} : i64, !llvm.ptr
    %67 = llvm.load %5 : !llvm.ptr -> i32
    %68 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %69 = arith.addi %68, %c48_i32 : i32
    %c32_i64_7 = arith.constant 32 : i64
    %70 = arith.extui %67 : i32 to i64
    %71 = arith.addi %70, %c32_i64_7 : i64
    %72 = llvm.getelementptr %10[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %69, %72 {alignment = 1 : i64} : i32, !llvm.ptr
    %73 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %74 = arith.addi %73, %c24_i32 : i32
    %75 = llvm.load %4 : !llvm.ptr -> i32
    call @f156(%arg0, %74, %75) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f172(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c0_i64_4 : i64
    %16 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i32, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c1051612_i32 = arith.constant 1051612 : i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051612_i32, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c20_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c51_i32 = arith.constant 51 : i32
    %35 = arith.extui %c51_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %36 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %37 = scf.if %36 -> (i64) {
      %62 = arith.shli %35, %c32_i64 : i64
      scf.yield %62 : i64
    } else {
      %c0_i64_6 = arith.constant 0 : i64
      scf.yield %c0_i64_6 : i64
    }
    llvm.store %37, %4 : i64, !llvm.ptr
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %39 = arith.addi %38, %c4_i32 : i32
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.ori %37, %40 : i64
    %c40_i64 = arith.constant 40 : i64
    %42 = arith.extui %34 : i32 to i64
    %43 = arith.addi %42, %c40_i64 : i64
    %44 = llvm.getelementptr %9[%43] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %41, %44 {alignment = 1 : i64} : i64, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %46 = llvm.load %4 : !llvm.ptr -> i64
    %47 = llvm.load %3 : !llvm.ptr -> i32
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.ori %46, %48 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %50 = arith.extui %45 : i32 to i64
    %51 = arith.addi %50, %c32_i64_5 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %55 = arith.addi %54, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c16_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    call @f156(%arg0, %60, %61) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f173(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1050969_i32 = arith.constant 1050969 : i32
    %c43_i32 = arith.constant 43 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @f161(%arg0, %c1050969_i32, %c43_i32, %1) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f174(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %6 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %10 = llvm.load volatile %9 {alignment = 1 : i64} : !llvm.ptr -> i32
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c4_i64 : i64
    %14 = llvm.getelementptr %4[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %15 = llvm.load volatile %14 {alignment = 1 : i64} : !llvm.ptr -> i32
    %16 = call @f160(%arg0, %5, %10, %15) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%16 : i32)
  ^bb2(%17: i32):  // pred: ^bb1
    return %17 : i32
  }
  func.func @f175(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %7 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %8 = arith.subi %7, %c32_i32 : i32
    llvm.store %8, %1 : i32, !llvm.ptr
    llvm.store %8, %3 : i32, !llvm.ptr
    %9 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_1 = arith.constant 1 : i32
    %c4_i64 = arith.constant 4 : i64
    %10 = arith.extui %9 : i32 to i64
    %11 = arith.addi %10, %c4_i64 : i64
    %12 = llvm.getelementptr %6[%11] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i32_1, %12 {alignment = 1 : i64} : i32, !llvm.ptr
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c1050960_i32 = arith.constant 1050960 : i32
    %c0_i64 = arith.constant 0 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c0_i64 : i64
    %16 = llvm.getelementptr %6[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1050960_i32, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %c12_i64 = arith.constant 12 : i64
    %18 = arith.extui %17 : i32 to i64
    %19 = arith.addi %18, %c12_i64 : i64
    %20 = llvm.getelementptr %6[%19] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1_i64, %20 {alignment = 1 : i64} : i64, !llvm.ptr
    %21 = llvm.load %1 : !llvm.ptr -> i32
    %c79_i32 = arith.constant 79 : i32
    %22 = arith.extui %c79_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %23 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %24 = scf.if %23 -> (i64) {
      %38 = arith.shli %22, %c32_i64 : i64
      scf.yield %38 : i64
    } else {
      %c0_i64_2 = arith.constant 0 : i64
      scf.yield %c0_i64_2 : i64
    }
    %c1051028_i32 = arith.constant 1051028 : i32
    %25 = arith.extui %c1051028_i32 : i32 to i64
    %26 = arith.ori %24, %25 : i64
    %c24_i64 = arith.constant 24 : i64
    %27 = arith.extui %21 : i32 to i64
    %28 = arith.addi %27, %c24_i64 : i64
    %29 = llvm.getelementptr %6[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %26, %29 {alignment = 1 : i64} : i64, !llvm.ptr
    %30 = llvm.load %1 : !llvm.ptr -> i32
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %32 = arith.addi %31, %c24_i32 : i32
    %c8_i64 = arith.constant 8 : i64
    %33 = arith.extui %30 : i32 to i64
    %34 = arith.addi %33, %c8_i64 : i64
    %35 = llvm.getelementptr %6[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %32, %35 {alignment = 1 : i64} : i32, !llvm.ptr
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %37 = llvm.load %0 : !llvm.ptr -> i32
    call @f156(%arg0, %36, %37) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f176(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %5 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %11 = arith.subi %10, %c128_i32 : i32
    llvm.store %11, %2 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %9[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %16, %0 : i32, !llvm.ptr
    %c0_i32_4 = arith.constant 0 : i32
    llvm.store %c0_i32_4, %3 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2(%17: i32):  // pred: ^bb6
    return %17 : i32
  ^bb3:  // pred: ^bb5
    %18 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32_5 = arith.constant 128 : i32
    %19 = arith.addi %18, %c128_i32_5 : i32
    llvm.store %19, %0 : i32, !llvm.ptr
    %c129_i32 = arith.constant 129 : i32
    %20 = arith.cmpi ult, %19, %c129_i32 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_6 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_6 : i32
    cf.cond_br %22, ^bb6, ^bb7
  ^bb4:  // 2 preds: ^bb1, ^bb4
    %23 = llvm.load %2 : !llvm.ptr -> i32
    %24 = llvm.load %3 : !llvm.ptr -> i32
    %25 = arith.addi %23, %24 : i32
    %c127_i32 = arith.constant 127 : i32
    %26 = arith.addi %25, %c127_i32 : i32
    %27 = llvm.load %0 : !llvm.ptr -> i32
    %c15_i32 = arith.constant 15 : i32
    %28 = arith.andi %27, %c15_i32 : i32
    llvm.store %28, %4 : i32, !llvm.ptr
    %c48_i32 = arith.constant 48 : i32
    %29 = arith.ori %28, %c48_i32 : i32
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %c87_i32 = arith.constant 87 : i32
    %31 = arith.addi %30, %c87_i32 : i32
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %33 = arith.cmpi ult, %32, %c10_i32 : i32
    %34 = arith.extui %33 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %35 = arith.cmpi ne, %34, %c0_i32_7 : i32
    %36 = arith.select %35, %29, %31 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %37 = arith.extui %26 : i32 to i64
    %38 = arith.addi %37, %c0_i64_8 : i64
    %39 = llvm.getelementptr %9[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = arith.trunci %36 : i32 to i8
    llvm.store volatile %40, %39 {alignment = 1 : i64} : i8, !llvm.ptr
    %41 = llvm.load %3 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %42 = arith.addi %41, %c-1_i32 : i32
    llvm.store %42, %3 : i32, !llvm.ptr
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %44 = arith.cmpi ult, %43, %c16_i32 : i32
    %45 = arith.extui %44 : i1 to i32
    llvm.store %45, %4 : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c31_i32 = arith.constant 31 : i32
    %47 = arith.cmpi ule, %c4_i32, %c31_i32 : i32
    %48 = scf.if %47 -> (i32) {
      %65 = arith.shrui %46, %c4_i32 : i32
      scf.yield %65 : i32
    } else {
      %c0_i32_16 = arith.constant 0 : i32
      scf.yield %c0_i32_16 : i32
    }
    llvm.store %48, %0 : i32, !llvm.ptr
    %49 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %50 = arith.cmpi eq, %49, %c0_i32_9 : i32
    %51 = arith.extui %50 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %52 = arith.cmpi ne, %51, %c0_i32_10 : i32
    cf.cond_br %52, ^bb4, ^bb5
  ^bb5:  // pred: ^bb4
    cf.br ^bb3
  ^bb6:  // pred: ^bb3
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %c1051212_i32 = arith.constant 1051212 : i32
    %c2_i32 = arith.constant 2 : i32
    %54 = llvm.load %2 : !llvm.ptr -> i32
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %56 = arith.addi %54, %55 : i32
    %c128_i32_12 = arith.constant 128 : i32
    %57 = arith.addi %56, %c128_i32_12 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %58 = llvm.load %3 : !llvm.ptr -> i32
    %59 = arith.subi %c0_i32_13, %58 : i32
    %60 = call @f182(%arg0, %53, %c1_i32_11, %c1051212_i32, %c2_i32, %57, %59) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %60, %0 : i32, !llvm.ptr
    %61 = llvm.load %2 : !llvm.ptr -> i32
    %c128_i32_14 = arith.constant 128 : i32
    %62 = arith.addi %61, %c128_i32_14 : i32
    llvm.store %62, %6 : i32, !llvm.ptr
    %63 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%63 : i32)
  ^bb7:  // pred: ^bb3
    %64 = llvm.load %0 : !llvm.ptr -> i32
    %c128_i32_15 = arith.constant 128 : i32
    %c1051196_i32 = arith.constant 1051196 : i32
    call @f157(%arg0, %64, %c128_i32_15, %c1051196_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  }
  func.func @f177(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> i32
    %7 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %8 : !llvm.ptr -> i64
    %11 = arith.trunci %10 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c0_i64 : i64
    %15 = llvm.getelementptr %4[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i32
    %17 = llvm.load %1 : !llvm.ptr -> i32
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c4_i64 : i64
    %21 = llvm.getelementptr %4[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %4[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = arith.cmpi ult, %26, %11 : i32
    cf.cond_br %27, ^bb3, ^bb4
  ^bb2(%28: i32):  // pred: ^bb9
    return %28 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %29 = llvm.getelementptr inbounds %9[%26] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %30 = llvm.load %29 : !llvm.ptr -> !llvm.ptr
    %31 = llvm.ptrtoint %30 : !llvm.ptr to i64
    %c0_i64_1 = arith.constant 0 : i64
    %32 = arith.cmpi eq, %31, %c0_i64_1 : i64
    cf.cond_br %32, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %33 = llvm.getelementptr %30[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %34 = llvm.getelementptr %30[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.getelementptr %30[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.load %33 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.ptrtoint %36 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %39 = arith.cmpi eq, %38, %c0_i64_2 : i64
    cf.cond_br %39, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %40 = llvm.load %34 : !llvm.ptr -> i32
    %41 = arith.cmpi ne, %6, %40 : i32
    cf.cond_br %41, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %42 = llvm.call %36(%37, %16, %17) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%42 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f178(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %c1_i32_12 = arith.constant 1 : i32
    %13 = llvm.alloca %c1_i32_12 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %13 : i32, !llvm.ptr
    %14 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %17 : !llvm.ptr -> i32
    %19 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %20 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    %24 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %20 : !llvm.ptr -> i64
    %26 = arith.trunci %25 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %27 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %28 = arith.addi %27, %c-1_i32 : i32
    llvm.store %28, %3 : i32, !llvm.ptr
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c4_i64 : i64
    %32 = llvm.getelementptr %16[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %33, %4 : i32, !llvm.ptr
    %34 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c0_i64 : i64
    %37 = llvm.getelementptr %16[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %38, %5 : i32, !llvm.ptr
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c8_i64 : i64
    %42 = llvm.getelementptr %16[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %43, %6 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %7 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    llvm.store %c0_i32_14, %8 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb2(%44: i32):  // 3 preds: ^bb3, ^bb43, ^bb54
    return %44 : i32
  ^bb3:  // pred: ^bb65
    %45 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%45 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb63
    %46 = llvm.load %7 : !llvm.ptr -> i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %48 = arith.cmpi ugt, %46, %47 : i32
    %49 = arith.extui %48 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_15 : i32
    cf.cond_br %50, ^bb6, ^bb7
  ^bb5:  // 2 preds: ^bb6, ^bb41
    %51 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %52 = arith.extui %51 : i32 to i64
    %53 = arith.addi %52, %c0_i64_16 : i64
    %54 = llvm.getelementptr %16[%53] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %55 = llvm.load volatile %54 {alignment = 1 : i64} : !llvm.ptr -> i8
    %56 = arith.extui %55 : i8 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %57 = arith.cmpi eq, %56, %c0_i32_17 : i32
    %58 = arith.extui %57 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %59 = arith.cmpi ne, %58, %c0_i32_18 : i32
    cf.cond_br %59, ^bb44, ^bb45
  ^bb6:  // 6 preds: ^bb4, ^bb8, ^bb15, ^bb28, ^bb33, ^bb34
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %9 : i32, !llvm.ptr
    %60 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %60, %11 : i32, !llvm.ptr
    %61 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %61, %0 : i32, !llvm.ptr
    %62 = llvm.load %8 : !llvm.ptr -> i32
    %63 = llvm.load %2 : !llvm.ptr -> i32
    %64 = arith.cmpi eq, %62, %63 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %66 = arith.cmpi eq, %65, %c0_i32_20 : i32
    %67 = arith.extui %66 : i1 to i32
    %c0_i32_21 = arith.constant 0 : i32
    %68 = arith.cmpi ne, %67, %c0_i32_21 : i32
    cf.cond_br %68, ^bb5, ^bb43
  ^bb7:  // pred: ^bb4
    cf.br ^bb9
  ^bb8:  // pred: ^bb42
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb7, ^bb39
    %69 = llvm.load %1 : !llvm.ptr -> i32
    %70 = llvm.load %7 : !llvm.ptr -> i32
    %71 = arith.addi %69, %70 : i32
    llvm.store %71, %9 : i32, !llvm.ptr
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %73 = llvm.load %7 : !llvm.ptr -> i32
    %74 = arith.subi %72, %73 : i32
    llvm.store %74, %10 : i32, !llvm.ptr
    %c7_i32 = arith.constant 7 : i32
    %75 = arith.cmpi ugt, %74, %c7_i32 : i32
    %76 = arith.extui %75 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %77 = arith.cmpi ne, %76, %c0_i32_22 : i32
    cf.cond_br %77, ^bb13, ^bb14
  ^bb10:  // 3 preds: ^bb20, ^bb29, ^bb37
    %78 = llvm.load %0 : !llvm.ptr -> i32
    %79 = llvm.load %7 : !llvm.ptr -> i32
    %80 = arith.addi %78, %79 : i32
    llvm.store %80, %12 : i32, !llvm.ptr
    %c1_i32_23 = arith.constant 1 : i32
    %81 = arith.addi %80, %c1_i32_23 : i32
    llvm.store %81, %7 : i32, !llvm.ptr
    %82 = llvm.load %12 : !llvm.ptr -> i32
    %83 = llvm.load %2 : !llvm.ptr -> i32
    %84 = arith.cmpi uge, %82, %83 : i32
    %85 = arith.extui %84 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %86 = arith.cmpi ne, %85, %c0_i32_24 : i32
    cf.cond_br %86, ^bb39, ^bb40
  ^bb11:  // 3 preds: ^bb23, ^bb25, ^bb27
    %87 = llvm.load %12 : !llvm.ptr -> i32
    %88 = llvm.load %10 : !llvm.ptr -> i32
    %89 = arith.cmpi eq, %87, %88 : i32
    %90 = arith.extui %89 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %91 = arith.cmpi eq, %90, %c0_i32_25 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_26 : i32
    cf.cond_br %93, ^bb32, ^bb33
  ^bb12:  // 2 preds: ^bb14, ^bb24
    %c0_i32_27 = arith.constant 0 : i32
    llvm.store %c0_i32_27, %0 : i32, !llvm.ptr
    cf.br ^bb29
  ^bb13:  // pred: ^bb9
    %94 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %95 = arith.addi %94, %c3_i32 : i32
    %c-4_i32 = arith.constant -4 : i32
    %96 = arith.andi %95, %c-4_i32 : i32
    llvm.store %96, %11 : i32, !llvm.ptr
    %97 = llvm.load %9 : !llvm.ptr -> i32
    %98 = arith.subi %96, %97 : i32
    llvm.store %98, %12 : i32, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    %99 = arith.cmpi eq, %98, %c0_i32_28 : i32
    %100 = arith.extui %99 : i1 to i32
    %c0_i32_29 = arith.constant 0 : i32
    %101 = arith.cmpi ne, %100, %c0_i32_29 : i32
    cf.cond_br %101, ^bb17, ^bb18
  ^bb14:  // pred: ^bb9
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %103 = llvm.load %7 : !llvm.ptr -> i32
    %104 = arith.cmpi eq, %102, %103 : i32
    %105 = arith.extui %104 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %106 = arith.cmpi eq, %105, %c0_i32_30 : i32
    %107 = arith.extui %106 : i1 to i32
    %c0_i32_31 = arith.constant 0 : i32
    %108 = arith.cmpi ne, %107, %c0_i32_31 : i32
    cf.cond_br %108, ^bb12, ^bb15
  ^bb15:  // pred: ^bb14
    %109 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %109, %7 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb16:  // 2 preds: ^bb17, ^bb19
    cf.br ^bb25
  ^bb17:  // pred: ^bb13
    %110 = llvm.load %10 : !llvm.ptr -> i32
    %c-8_i32 = arith.constant -8 : i32
    %111 = arith.addi %110, %c-8_i32 : i32
    llvm.store %111, %13 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb18:  // pred: ^bb13
    %c0_i32_32 = arith.constant 0 : i32
    llvm.store %c0_i32_32, %0 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb19:  // pred: ^bb22
    %112 = llvm.load %12 : !llvm.ptr -> i32
    %113 = llvm.load %10 : !llvm.ptr -> i32
    %c-8_i32_33 = arith.constant -8 : i32
    %114 = arith.addi %113, %c-8_i32_33 : i32
    llvm.store %114, %13 : i32, !llvm.ptr
    %115 = arith.cmpi ule, %112, %114 : i32
    %116 = arith.extui %115 : i1 to i32
    %c0_i32_34 = arith.constant 0 : i32
    %117 = arith.cmpi ne, %116, %c0_i32_34 : i32
    cf.cond_br %117, ^bb16, ^bb23
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %118 = llvm.load %9 : !llvm.ptr -> i32
    %119 = llvm.load %0 : !llvm.ptr -> i32
    %120 = arith.addi %118, %119 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64_35 : i64
    %123 = llvm.getelementptr %16[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i8
    %125 = arith.extui %124 : i8 to i32
    %c10_i32 = arith.constant 10 : i32
    %126 = arith.cmpi eq, %125, %c10_i32 : i32
    %127 = arith.extui %126 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %128 = arith.cmpi ne, %127, %c0_i32_36 : i32
    cf.cond_br %128, ^bb10, ^bb21
  ^bb21:  // pred: ^bb20
    %129 = llvm.load %12 : !llvm.ptr -> i32
    %130 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_37 = arith.constant 1 : i32
    %131 = arith.addi %130, %c1_i32_37 : i32
    llvm.store %131, %0 : i32, !llvm.ptr
    %132 = arith.cmpi eq, %129, %131 : i32
    %133 = arith.extui %132 : i1 to i32
    %c0_i32_38 = arith.constant 0 : i32
    %134 = arith.cmpi eq, %133, %c0_i32_38 : i32
    %135 = arith.extui %134 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %136 = arith.cmpi ne, %135, %c0_i32_39 : i32
    cf.cond_br %136, ^bb20, ^bb22
  ^bb22:  // pred: ^bb21
    cf.br ^bb19
  ^bb23:  // pred: ^bb19
    cf.br ^bb11
  ^bb24:  // no predecessors
    cf.br ^bb12
  ^bb25:  // 2 preds: ^bb16, ^bb26
    %137 = llvm.load %11 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %138 = arith.addi %137, %c4_i32 : i32
    %c0_i64_40 = arith.constant 0 : i64
    %139 = arith.extui %138 : i32 to i64
    %140 = arith.addi %139, %c0_i64_40 : i64
    %141 = llvm.getelementptr %16[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %142 = llvm.load volatile %141 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %142, %0 : i32, !llvm.ptr
    %c168430090_i32 = arith.constant 168430090 : i32
    %143 = arith.xori %142, %c168430090_i32 : i32
    %c-16843009_i32 = arith.constant -16843009 : i32
    %144 = arith.addi %143, %c-16843009_i32 : i32
    %145 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32_41 = arith.constant -1 : i32
    %146 = arith.xori %145, %c-1_i32_41 : i32
    %147 = arith.andi %144, %146 : i32
    %148 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i64_42 = arith.constant 0 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c0_i64_42 : i64
    %151 = llvm.getelementptr %16[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %152, %0 : i32, !llvm.ptr
    %c168430090_i32_43 = arith.constant 168430090 : i32
    %153 = arith.xori %152, %c168430090_i32_43 : i32
    %c-16843009_i32_44 = arith.constant -16843009 : i32
    %154 = arith.addi %153, %c-16843009_i32_44 : i32
    %155 = llvm.load %0 : !llvm.ptr -> i32
    %c-1_i32_45 = arith.constant -1 : i32
    %156 = arith.xori %155, %c-1_i32_45 : i32
    %157 = arith.andi %154, %156 : i32
    %158 = arith.ori %147, %157 : i32
    %c-2139062144_i32 = arith.constant -2139062144 : i32
    %159 = arith.andi %158, %c-2139062144_i32 : i32
    %c0_i32_46 = arith.constant 0 : i32
    %160 = arith.cmpi ne, %159, %c0_i32_46 : i32
    cf.cond_br %160, ^bb11, ^bb26
  ^bb26:  // pred: ^bb25
    %161 = llvm.load %11 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %162 = arith.addi %161, %c8_i32 : i32
    llvm.store %162, %11 : i32, !llvm.ptr
    %163 = llvm.load %12 : !llvm.ptr -> i32
    %c8_i32_47 = arith.constant 8 : i32
    %164 = arith.addi %163, %c8_i32_47 : i32
    llvm.store %164, %12 : i32, !llvm.ptr
    %165 = llvm.load %13 : !llvm.ptr -> i32
    %166 = arith.cmpi ule, %164, %165 : i32
    %167 = arith.extui %166 : i1 to i32
    %c0_i32_48 = arith.constant 0 : i32
    %168 = arith.cmpi ne, %167, %c0_i32_48 : i32
    cf.cond_br %168, ^bb25, ^bb27
  ^bb27:  // pred: ^bb26
    cf.br ^bb11
  ^bb28:  // pred: ^bb31
    %169 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %169, %7 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb29:  // 2 preds: ^bb12, ^bb30
    %170 = llvm.load %9 : !llvm.ptr -> i32
    %171 = llvm.load %0 : !llvm.ptr -> i32
    %172 = arith.addi %170, %171 : i32
    %c0_i64_49 = arith.constant 0 : i64
    %173 = arith.extui %172 : i32 to i64
    %174 = arith.addi %173, %c0_i64_49 : i64
    %175 = llvm.getelementptr %16[%174] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %176 = llvm.load volatile %175 {alignment = 1 : i64} : !llvm.ptr -> i8
    %177 = arith.extui %176 : i8 to i32
    %c10_i32_50 = arith.constant 10 : i32
    %178 = arith.cmpi eq, %177, %c10_i32_50 : i32
    %179 = arith.extui %178 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %180 = arith.cmpi ne, %179, %c0_i32_51 : i32
    cf.cond_br %180, ^bb10, ^bb30
  ^bb30:  // pred: ^bb29
    %181 = llvm.load %10 : !llvm.ptr -> i32
    %182 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_52 = arith.constant 1 : i32
    %183 = arith.addi %182, %c1_i32_52 : i32
    llvm.store %183, %0 : i32, !llvm.ptr
    %184 = arith.cmpi eq, %181, %183 : i32
    %185 = arith.extui %184 : i1 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %185, %c0_i32_53 : i32
    %187 = arith.extui %186 : i1 to i32
    %c0_i32_54 = arith.constant 0 : i32
    %188 = arith.cmpi ne, %187, %c0_i32_54 : i32
    cf.cond_br %188, ^bb29, ^bb31
  ^bb31:  // pred: ^bb30
    cf.br ^bb28
  ^bb32:  // pred: ^bb11
    cf.br ^bb35
  ^bb33:  // pred: ^bb11
    %189 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %189, %7 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb34:  // pred: ^bb38
    %190 = llvm.load %2 : !llvm.ptr -> i32
    llvm.store %190, %7 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb35:  // 2 preds: ^bb32, ^bb36
    %191 = llvm.load %9 : !llvm.ptr -> i32
    %192 = llvm.load %12 : !llvm.ptr -> i32
    %193 = arith.addi %191, %192 : i32
    %c0_i64_55 = arith.constant 0 : i64
    %194 = arith.extui %193 : i32 to i64
    %195 = arith.addi %194, %c0_i64_55 : i64
    %196 = llvm.getelementptr %16[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %197 = llvm.load volatile %196 {alignment = 1 : i64} : !llvm.ptr -> i8
    %198 = arith.extui %197 : i8 to i32
    %c10_i32_56 = arith.constant 10 : i32
    %199 = arith.cmpi eq, %198, %c10_i32_56 : i32
    %200 = arith.extui %199 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %201 = arith.cmpi eq, %200, %c0_i32_57 : i32
    %202 = arith.extui %201 : i1 to i32
    %c0_i32_58 = arith.constant 0 : i32
    %203 = arith.cmpi ne, %202, %c0_i32_58 : i32
    cf.cond_br %203, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %204 = llvm.load %10 : !llvm.ptr -> i32
    %205 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_59 = arith.constant 1 : i32
    %206 = arith.addi %205, %c1_i32_59 : i32
    llvm.store %206, %12 : i32, !llvm.ptr
    %207 = arith.cmpi eq, %204, %206 : i32
    %208 = arith.extui %207 : i1 to i32
    %c0_i32_60 = arith.constant 0 : i32
    %209 = arith.cmpi eq, %208, %c0_i32_60 : i32
    %210 = arith.extui %209 : i1 to i32
    %c0_i32_61 = arith.constant 0 : i32
    %211 = arith.cmpi ne, %210, %c0_i32_61 : i32
    cf.cond_br %211, ^bb35, ^bb38
  ^bb37:  // pred: ^bb35
    %212 = llvm.load %12 : !llvm.ptr -> i32
    llvm.store %212, %0 : i32, !llvm.ptr
    cf.br ^bb10
  ^bb38:  // pred: ^bb36
    cf.br ^bb34
  ^bb39:  // 2 preds: ^bb10, ^bb40
    %213 = llvm.load %7 : !llvm.ptr -> i32
    %214 = llvm.load %2 : !llvm.ptr -> i32
    %215 = arith.cmpi ule, %213, %214 : i32
    %216 = arith.extui %215 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %217 = arith.cmpi ne, %216, %c0_i32_62 : i32
    cf.cond_br %217, ^bb9, ^bb42
  ^bb40:  // pred: ^bb10
    %218 = llvm.load %9 : !llvm.ptr -> i32
    %219 = llvm.load %0 : !llvm.ptr -> i32
    %220 = arith.addi %218, %219 : i32
    %c0_i64_63 = arith.constant 0 : i64
    %221 = arith.extui %220 : i32 to i64
    %222 = arith.addi %221, %c0_i64_63 : i64
    %223 = llvm.getelementptr %16[%222] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %224 = llvm.load volatile %223 {alignment = 1 : i64} : !llvm.ptr -> i8
    %225 = arith.extui %224 : i8 to i32
    %c10_i32_64 = arith.constant 10 : i32
    %226 = arith.cmpi eq, %225, %c10_i32_64 : i32
    %227 = arith.extui %226 : i1 to i32
    %c0_i32_65 = arith.constant 0 : i32
    %228 = arith.cmpi eq, %227, %c0_i32_65 : i32
    %229 = arith.extui %228 : i1 to i32
    %c0_i32_66 = arith.constant 0 : i32
    %230 = arith.cmpi ne, %229, %c0_i32_66 : i32
    cf.cond_br %230, ^bb39, ^bb41
  ^bb41:  // pred: ^bb40
    %c0_i32_67 = arith.constant 0 : i32
    llvm.store %c0_i32_67, %9 : i32, !llvm.ptr
    %231 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %231, %11 : i32, !llvm.ptr
    %232 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %232, %0 : i32, !llvm.ptr
    cf.br ^bb5
  ^bb42:  // pred: ^bb39
    cf.br ^bb8
  ^bb43:  // pred: ^bb6
    %c0_i32_68 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_68 : i32)
  ^bb44:  // 2 preds: ^bb5, ^bb52
    %233 = llvm.load %0 : !llvm.ptr -> i32
    %234 = llvm.load %8 : !llvm.ptr -> i32
    %235 = arith.subi %233, %234 : i32
    llvm.store %235, %10 : i32, !llvm.ptr
    %c0_i32_69 = arith.constant 0 : i32
    llvm.store %c0_i32_69, %12 : i32, !llvm.ptr
    %236 = llvm.load %0 : !llvm.ptr -> i32
    %237 = llvm.load %8 : !llvm.ptr -> i32
    %238 = arith.cmpi eq, %236, %237 : i32
    %239 = arith.extui %238 : i1 to i32
    %c0_i32_70 = arith.constant 0 : i32
    %240 = arith.cmpi ne, %239, %c0_i32_70 : i32
    cf.cond_br %240, ^bb55, ^bb56
  ^bb45:  // pred: ^bb5
    %241 = llvm.load %5 : !llvm.ptr -> i32
    %c1051148_i32 = arith.constant 1051148 : i32
    %c4_i32_71 = arith.constant 4 : i32
    %242 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %243 = arith.extui %242 : i32 to i64
    %244 = arith.addi %243, %c12_i64 : i64
    %245 = llvm.getelementptr %16[%244] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %246 = llvm.load volatile %245 {alignment = 1 : i64} : !llvm.ptr -> i32
    %247 = arith.cmpi ult, %246, %23 : i32
    cf.cond_br %247, ^bb46, ^bb47
  ^bb46:  // 2 preds: ^bb45, ^bb47
    %248 = llvm.getelementptr inbounds %21[%246] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %249 = llvm.load %248 : !llvm.ptr -> !llvm.ptr
    %250 = llvm.ptrtoint %249 : !llvm.ptr to i64
    %c0_i64_72 = arith.constant 0 : i64
    %251 = arith.cmpi eq, %250, %c0_i64_72 : i64
    cf.cond_br %251, ^bb49, ^bb48
  ^bb47:  // pred: ^bb45
    %c3_i32_73 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_73) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %252 = llvm.getelementptr %249[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %253 = llvm.getelementptr %249[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %254 = llvm.getelementptr %249[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %255 = llvm.load %252 : !llvm.ptr -> !llvm.ptr
    %256 = llvm.load %254 : !llvm.ptr -> !llvm.ptr
    %257 = llvm.ptrtoint %255 : !llvm.ptr to i64
    %c0_i64_74 = arith.constant 0 : i64
    %258 = arith.cmpi eq, %257, %c0_i64_74 : i64
    cf.cond_br %258, ^bb51, ^bb50
  ^bb49:  // pred: ^bb46
    %c4_i32_75 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_75) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %259 = llvm.load %253 : !llvm.ptr -> i32
    %260 = arith.cmpi ne, %18, %259 : i32
    cf.cond_br %260, ^bb53, ^bb52
  ^bb51:  // pred: ^bb48
    %c3_i32_76 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_76) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %261 = llvm.call %255(%256, %241, %c1051148_i32, %c4_i32_71) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_77 = arith.constant 0 : i32
    %262 = arith.cmpi eq, %261, %c0_i32_77 : i32
    %263 = arith.extui %262 : i1 to i32
    %c0_i32_78 = arith.constant 0 : i32
    %264 = arith.cmpi ne, %263, %c0_i32_78 : i32
    cf.cond_br %264, ^bb44, ^bb54
  ^bb53:  // pred: ^bb50
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // pred: ^bb52
    %c1_i32_79 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_79 : i32)
  ^bb55:  // 2 preds: ^bb44, ^bb56
    %265 = llvm.load %1 : !llvm.ptr -> i32
    %266 = llvm.load %8 : !llvm.ptr -> i32
    %267 = arith.addi %265, %266 : i32
    llvm.store %267, %0 : i32, !llvm.ptr
    %268 = llvm.load %6 : !llvm.ptr -> i32
    %269 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_80 = arith.constant 0 : i64
    %270 = arith.extui %268 : i32 to i64
    %271 = arith.addi %270, %c0_i64_80 : i64
    %272 = llvm.getelementptr %16[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = arith.trunci %269 : i32 to i8
    llvm.store volatile %273, %272 {alignment = 1 : i64} : i8, !llvm.ptr
    %274 = llvm.load %11 : !llvm.ptr -> i32
    llvm.store %274, %8 : i32, !llvm.ptr
    %275 = llvm.load %5 : !llvm.ptr -> i32
    %276 = llvm.load %0 : !llvm.ptr -> i32
    %277 = llvm.load %10 : !llvm.ptr -> i32
    %278 = llvm.load %4 : !llvm.ptr -> i32
    %c12_i64_81 = arith.constant 12 : i64
    %279 = arith.extui %278 : i32 to i64
    %280 = arith.addi %279, %c12_i64_81 : i64
    %281 = llvm.getelementptr %16[%280] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %282 = llvm.load volatile %281 {alignment = 1 : i64} : !llvm.ptr -> i32
    %283 = arith.cmpi ult, %282, %26 : i32
    cf.cond_br %283, ^bb57, ^bb58
  ^bb56:  // pred: ^bb44
    %284 = llvm.load %3 : !llvm.ptr -> i32
    %285 = llvm.load %0 : !llvm.ptr -> i32
    %286 = arith.addi %284, %285 : i32
    %c0_i64_82 = arith.constant 0 : i64
    %287 = arith.extui %286 : i32 to i64
    %288 = arith.addi %287, %c0_i64_82 : i64
    %289 = llvm.getelementptr %16[%288] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %290 = llvm.load volatile %289 {alignment = 1 : i64} : !llvm.ptr -> i8
    %291 = arith.extui %290 : i8 to i32
    %c10_i32_83 = arith.constant 10 : i32
    %292 = arith.cmpi eq, %291, %c10_i32_83 : i32
    %293 = arith.extui %292 : i1 to i32
    llvm.store %293, %12 : i32, !llvm.ptr
    cf.br ^bb55
  ^bb57:  // 2 preds: ^bb55, ^bb58
    %294 = llvm.getelementptr inbounds %24[%282] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %295 = llvm.load %294 : !llvm.ptr -> !llvm.ptr
    %296 = llvm.ptrtoint %295 : !llvm.ptr to i64
    %c0_i64_84 = arith.constant 0 : i64
    %297 = arith.cmpi eq, %296, %c0_i64_84 : i64
    cf.cond_br %297, ^bb60, ^bb59
  ^bb58:  // pred: ^bb55
    %c3_i32_85 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_85) : (i32) -> ()
    cf.br ^bb57
  ^bb59:  // 2 preds: ^bb57, ^bb60
    %298 = llvm.getelementptr %295[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %299 = llvm.getelementptr %295[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %300 = llvm.getelementptr %295[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %301 = llvm.load %298 : !llvm.ptr -> !llvm.ptr
    %302 = llvm.load %300 : !llvm.ptr -> !llvm.ptr
    %303 = llvm.ptrtoint %301 : !llvm.ptr to i64
    %c0_i64_86 = arith.constant 0 : i64
    %304 = arith.cmpi eq, %303, %c0_i64_86 : i64
    cf.cond_br %304, ^bb62, ^bb61
  ^bb60:  // pred: ^bb57
    %c4_i32_87 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_87) : (i32) -> ()
    cf.br ^bb59
  ^bb61:  // 2 preds: ^bb59, ^bb62
    %305 = llvm.load %299 : !llvm.ptr -> i32
    %306 = arith.cmpi ne, %18, %305 : i32
    cf.cond_br %306, ^bb64, ^bb63
  ^bb62:  // pred: ^bb59
    %c3_i32_88 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_88) : (i32) -> ()
    cf.br ^bb61
  ^bb63:  // 2 preds: ^bb61, ^bb64
    %307 = llvm.call %301(%302, %275, %276, %277) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %307, %0 : i32, !llvm.ptr
    %308 = llvm.load %9 : !llvm.ptr -> i32
    %309 = arith.ori %307, %308 : i32
    %c0_i32_89 = arith.constant 0 : i32
    %310 = arith.cmpi eq, %309, %c0_i32_89 : i32
    %311 = arith.extui %310 : i1 to i32
    %c0_i32_90 = arith.constant 0 : i32
    %312 = arith.cmpi ne, %311, %c0_i32_90 : i32
    cf.cond_br %312, ^bb4, ^bb65
  ^bb64:  // pred: ^bb61
    %c5_i32_91 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_91) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // pred: ^bb63
    cf.br ^bb3
  }
  func.func @f179(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %4 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %12 = llvm.load %10 : !llvm.ptr -> i64
    %13 = arith.trunci %12 : i64 to i32
    %14 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> i32
    %16 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.load %10 : !llvm.ptr -> i64
    %18 = arith.trunci %17 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %20 = arith.extui %19 : i32 to i64
    %21 = arith.addi %20, %c4_i64 : i64
    %22 = llvm.getelementptr %6[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %23 = llvm.load volatile %22 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %23, %2 : i32, !llvm.ptr
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64 : i64
    %27 = llvm.getelementptr %6[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %28, %3 : i32, !llvm.ptr
    %29 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c8_i64 : i64
    %32 = llvm.getelementptr %6[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %33, %0 : i32, !llvm.ptr
    %c0_i64_3 = arith.constant 0 : i64
    %34 = arith.extui %33 : i32 to i64
    %35 = arith.addi %34, %c0_i64_3 : i64
    %36 = llvm.getelementptr %6[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %37 = llvm.load volatile %36 {alignment = 1 : i64} : !llvm.ptr -> i8
    %38 = arith.extui %37 : i8 to i32
    %c0_i32_4 = arith.constant 0 : i32
    %39 = arith.cmpi eq, %38, %c0_i32_4 : i32
    %40 = arith.extui %39 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %41 = arith.cmpi ne, %40, %c0_i32_5 : i32
    cf.cond_br %41, ^bb3, ^bb4
  ^bb2(%42: i32):  // 2 preds: ^bb13, ^bb20
    return %42 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb11
    %43 = llvm.load %0 : !llvm.ptr -> i32
    %44 = llvm.load %1 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %45 = arith.cmpi eq, %44, %c10_i32 : i32
    %46 = arith.extui %45 : i1 to i32
    %c0_i64_6 = arith.constant 0 : i64
    %47 = arith.extui %43 : i32 to i64
    %48 = arith.addi %47, %c0_i64_6 : i64
    %49 = llvm.getelementptr %6[%48] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %50 = arith.trunci %46 : i32 to i8
    llvm.store volatile %50, %49 {alignment = 1 : i64} : i8, !llvm.ptr
    %51 = llvm.load %3 : !llvm.ptr -> i32
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %53 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c16_i64 : i64
    %56 = llvm.getelementptr %6[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i32
    %58 = arith.cmpi ult, %57, %18 : i32
    cf.cond_br %58, ^bb14, ^bb15
  ^bb4:  // pred: ^bb1
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c1051148_i32 = arith.constant 1051148 : i32
    %c4_i32 = arith.constant 4 : i32
    %60 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %61 = arith.extui %60 : i32 to i64
    %62 = arith.addi %61, %c12_i64 : i64
    %63 = llvm.getelementptr %6[%62] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %64 = llvm.load volatile %63 {alignment = 1 : i64} : !llvm.ptr -> i32
    %65 = arith.cmpi ult, %64, %13 : i32
    cf.cond_br %65, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %66 = llvm.getelementptr inbounds %11[%64] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %67 = llvm.load %66 : !llvm.ptr -> !llvm.ptr
    %68 = llvm.ptrtoint %67 : !llvm.ptr to i64
    %c0_i64_7 = arith.constant 0 : i64
    %69 = arith.cmpi eq, %68, %c0_i64_7 : i64
    cf.cond_br %69, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %70 = llvm.getelementptr %67[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %71 = llvm.getelementptr %67[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %72 = llvm.getelementptr %67[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %73 = llvm.load %70 : !llvm.ptr -> !llvm.ptr
    %74 = llvm.load %72 : !llvm.ptr -> !llvm.ptr
    %75 = llvm.ptrtoint %73 : !llvm.ptr to i64
    %c0_i64_8 = arith.constant 0 : i64
    %76 = arith.cmpi eq, %75, %c0_i64_8 : i64
    cf.cond_br %76, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32_9 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_9) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %77 = llvm.load %71 : !llvm.ptr -> i32
    %78 = arith.cmpi ne, %8, %77 : i32
    cf.cond_br %78, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_10 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_10) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %79 = llvm.call %73(%74, %59, %c1051148_i32, %c4_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %80 = arith.cmpi eq, %79, %c0_i32_11 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_12 : i32
    cf.cond_br %82, ^bb3, ^bb13
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // pred: ^bb11
    %c1_i32_13 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_13 : i32)
  ^bb14:  // 2 preds: ^bb3, ^bb15
    %83 = llvm.getelementptr inbounds %16[%57] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %84 = llvm.load %83 : !llvm.ptr -> !llvm.ptr
    %85 = llvm.ptrtoint %84 : !llvm.ptr to i64
    %c0_i64_14 = arith.constant 0 : i64
    %86 = arith.cmpi eq, %85, %c0_i64_14 : i64
    cf.cond_br %86, ^bb17, ^bb16
  ^bb15:  // pred: ^bb3
    %c3_i32_15 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_15) : (i32) -> ()
    cf.br ^bb14
  ^bb16:  // 2 preds: ^bb14, ^bb17
    %87 = llvm.getelementptr %84[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %88 = llvm.getelementptr %84[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %89 = llvm.getelementptr %84[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %90 = llvm.load %87 : !llvm.ptr -> !llvm.ptr
    %91 = llvm.load %89 : !llvm.ptr -> !llvm.ptr
    %92 = llvm.ptrtoint %90 : !llvm.ptr to i64
    %c0_i64_16 = arith.constant 0 : i64
    %93 = arith.cmpi eq, %92, %c0_i64_16 : i64
    cf.cond_br %93, ^bb19, ^bb18
  ^bb17:  // pred: ^bb14
    %c4_i32_17 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_17) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %94 = llvm.load %88 : !llvm.ptr -> i32
    %95 = arith.cmpi ne, %15, %94 : i32
    cf.cond_br %95, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c3_i32_18 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_18) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %96 = llvm.call %90(%91, %51, %52) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    cf.br ^bb2(%96 : i32)
  ^bb21:  // pred: ^bb18
    %c5_i32_19 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_19) : (i32) -> ()
    cf.br ^bb20
  }
  func.func @f180(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %8 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.load %13 : !llvm.ptr -> i32
    %15 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %18 = llvm.load %16 : !llvm.ptr -> i64
    %19 = arith.trunci %18 : i64 to i32
    %20 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %16 : !llvm.ptr -> i64
    %22 = arith.trunci %21 : i64 to i32
    %23 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %24 = llvm.load %23 : !llvm.ptr -> i32
    %25 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %26 = llvm.load %16 : !llvm.ptr -> i64
    %27 = arith.trunci %26 : i64 to i32
    %28 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %16 : !llvm.ptr -> i64
    %30 = arith.trunci %29 : i64 to i32
    %31 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %16 : !llvm.ptr -> i64
    %33 = arith.trunci %32 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %34 = llvm.load %9 : !llvm.ptr -> i32
    %c64_i32 = arith.constant 64 : i32
    %35 = arith.subi %34, %c64_i32 : i32
    llvm.store %35, %3 : i32, !llvm.ptr
    llvm.store %35, %9 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    llvm.store %c1_i32_7, %4 : i32, !llvm.ptr
    %36 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c4_i64 : i64
    %39 = llvm.getelementptr %12[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i8
    %41 = arith.extui %40 : i8 to i32
    %c0_i32_8 = arith.constant 0 : i32
    %42 = arith.cmpi ne, %41, %c0_i32_8 : i32
    cf.cond_br %42, ^bb3, ^bb4
  ^bb2(%43: i32):  // pred: ^bb3
    return %43 : i32
  ^bb3:  // 6 preds: ^bb1, ^bb17, ^bb26, ^bb35, ^bb44, ^bb52
    %44 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_9 = arith.constant 1 : i32
    %c5_i64 = arith.constant 5 : i64
    %45 = arith.extui %44 : i32 to i64
    %46 = arith.addi %45, %c5_i64 : i64
    %47 = llvm.getelementptr %12[%46] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %48 = arith.trunci %c1_i32_9 : i32 to i8
    llvm.store volatile %48, %47 {alignment = 1 : i64} : i8, !llvm.ptr
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %50 = llvm.load %4 : !llvm.ptr -> i32
    %c4_i64_10 = arith.constant 4 : i64
    %51 = arith.extui %49 : i32 to i64
    %52 = arith.addi %51, %c4_i64_10 : i64
    %53 = llvm.getelementptr %12[%52] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %54 = arith.trunci %50 : i32 to i8
    llvm.store volatile %54, %53 {alignment = 1 : i64} : i8, !llvm.ptr
    %55 = llvm.load %3 : !llvm.ptr -> i32
    %c64_i32_11 = arith.constant 64 : i32
    %56 = arith.addi %55, %c64_i32_11 : i32
    llvm.store %56, %9 : i32, !llvm.ptr
    %57 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%57 : i32)
  ^bb4:  // pred: ^bb1
    %58 = llvm.load %0 : !llvm.ptr -> i32
    %c5_i64_12 = arith.constant 5 : i64
    %59 = arith.extui %58 : i32 to i64
    %60 = arith.addi %59, %c5_i64_12 : i64
    %61 = llvm.getelementptr %12[%60] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %62 = llvm.load volatile %61 {alignment = 1 : i64} : !llvm.ptr -> i8
    %63 = arith.extui %62 : i8 to i32
    llvm.store %63, %4 : i32, !llvm.ptr
    %64 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_13 = arith.constant 0 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c0_i64_13 : i64
    %67 = llvm.getelementptr %12[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = llvm.load volatile %67 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %68, %5 : i32, !llvm.ptr
    %c28_i64 = arith.constant 28 : i64
    %69 = arith.extui %68 : i32 to i64
    %70 = arith.addi %69, %c28_i64 : i64
    %71 = llvm.getelementptr %12[%70] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %72 = llvm.load volatile %71 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %72, %6 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %73 = arith.andi %72, %c4_i32 : i32
    %c0_i32_14 = arith.constant 0 : i32
    %74 = arith.cmpi ne, %73, %c0_i32_14 : i32
    cf.cond_br %74, ^bb6, ^bb7
  ^bb5:  // 2 preds: ^bb7, ^bb15
    %75 = llvm.load %1 : !llvm.ptr -> i32
    %76 = llvm.load %5 : !llvm.ptr -> i32
    %77 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c12_i64 : i64
    %80 = llvm.getelementptr %12[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i32
    %82 = arith.cmpi ult, %81, %33 : i32
    cf.cond_br %82, ^bb46, ^bb47
  ^bb6:  // pred: ^bb4
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %84 = arith.andi %83, %c255_i32 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %85 = arith.cmpi ne, %84, %c0_i32_15 : i32
    cf.cond_br %85, ^bb18, ^bb19
  ^bb7:  // pred: ^bb4
    %86 = llvm.load %4 : !llvm.ptr -> i32
    %c255_i32_16 = arith.constant 255 : i32
    %87 = arith.andi %86, %c255_i32_16 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %88 = arith.cmpi eq, %87, %c0_i32_17 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_18 : i32
    cf.cond_br %90, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %4 : i32, !llvm.ptr
    %91 = llvm.load %5 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c20_i64 : i64
    %94 = llvm.getelementptr %12[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1051155_i32 = arith.constant 1051155 : i32
    %c2_i32 = arith.constant 2 : i32
    %96 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c24_i64 : i64
    %99 = llvm.getelementptr %12[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_20 = arith.constant 12 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c12_i64_20 : i64
    %103 = llvm.getelementptr %12[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i32
    %105 = arith.cmpi ult, %104, %19 : i32
    cf.cond_br %105, ^bb9, ^bb10
  ^bb9:  // 2 preds: ^bb8, ^bb10
    %106 = llvm.getelementptr inbounds %17[%104] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %107 = llvm.load %106 : !llvm.ptr -> !llvm.ptr
    %108 = llvm.ptrtoint %107 : !llvm.ptr to i64
    %c0_i64_21 = arith.constant 0 : i64
    %109 = arith.cmpi eq, %108, %c0_i64_21 : i64
    cf.cond_br %109, ^bb12, ^bb11
  ^bb10:  // pred: ^bb8
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %110 = llvm.getelementptr %107[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %111 = llvm.getelementptr %107[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %112 = llvm.getelementptr %107[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %113 = llvm.load %110 : !llvm.ptr -> !llvm.ptr
    %114 = llvm.load %112 : !llvm.ptr -> !llvm.ptr
    %115 = llvm.ptrtoint %113 : !llvm.ptr to i64
    %c0_i64_22 = arith.constant 0 : i64
    %116 = arith.cmpi eq, %115, %c0_i64_22 : i64
    cf.cond_br %116, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c4_i32_23 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_23) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %117 = llvm.load %111 : !llvm.ptr -> i32
    %118 = arith.cmpi ne, %14, %117 : i32
    cf.cond_br %118, ^bb16, ^bb15
  ^bb14:  // pred: ^bb11
    %c3_i32_24 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_24) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // 2 preds: ^bb13, ^bb16
    %119 = llvm.call %113(%114, %95, %c1051155_i32, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_25 = arith.constant 0 : i32
    %120 = arith.cmpi eq, %119, %c0_i32_25 : i32
    %121 = arith.extui %120 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %122 = arith.cmpi ne, %121, %c0_i32_26 : i32
    cf.cond_br %122, ^bb5, ^bb17
  ^bb16:  // pred: ^bb13
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb15
  ^bb17:  // pred: ^bb15
    cf.br ^bb3
  ^bb18:  // 2 preds: ^bb6, ^bb28
    %c1_i32_27 = arith.constant 1 : i32
    llvm.store %c1_i32_27, %4 : i32, !llvm.ptr
    %123 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_28 = arith.constant 1 : i32
    %c27_i64 = arith.constant 27 : i64
    %124 = arith.extui %123 : i32 to i64
    %125 = arith.addi %124, %c27_i64 : i64
    %126 = llvm.getelementptr %12[%125] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %127 = arith.trunci %c1_i32_28 : i32 to i8
    llvm.store volatile %127, %126 {alignment = 1 : i64} : i8, !llvm.ptr
    %128 = llvm.load %3 : !llvm.ptr -> i32
    %129 = llvm.load %5 : !llvm.ptr -> i32
    %c20_i64_29 = arith.constant 20 : i64
    %130 = arith.extui %129 : i32 to i64
    %131 = arith.addi %130, %c20_i64_29 : i64
    %132 = llvm.getelementptr %12[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %133 = llvm.load volatile %132 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c12_i64_30 = arith.constant 12 : i64
    %134 = arith.extui %128 : i32 to i64
    %135 = arith.addi %134, %c12_i64_30 : i64
    %136 = llvm.getelementptr %12[%135] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %133, %136 {alignment = 1 : i64} : i64, !llvm.ptr
    %137 = llvm.load %3 : !llvm.ptr -> i32
    %c1051124_i32 = arith.constant 1051124 : i32
    %c52_i64 = arith.constant 52 : i64
    %138 = arith.extui %137 : i32 to i64
    %139 = arith.addi %138, %c52_i64 : i64
    %140 = llvm.getelementptr %12[%139] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051124_i32, %140 {alignment = 1 : i64} : i32, !llvm.ptr
    %141 = llvm.load %3 : !llvm.ptr -> i32
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %c27_i32 = arith.constant 27 : i32
    %143 = arith.addi %142, %c27_i32 : i32
    %c20_i64_31 = arith.constant 20 : i64
    %144 = arith.extui %141 : i32 to i64
    %145 = arith.addi %144, %c20_i64_31 : i64
    %146 = llvm.getelementptr %12[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %143, %146 {alignment = 1 : i64} : i32, !llvm.ptr
    %147 = llvm.load %3 : !llvm.ptr -> i32
    %148 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %149 = arith.extui %148 : i32 to i64
    %150 = arith.addi %149, %c8_i64 : i64
    %151 = llvm.getelementptr %12[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = llvm.load volatile %151 {alignment = 1 : i64} : !llvm.ptr -> i64
    %c36_i64 = arith.constant 36 : i64
    %153 = arith.extui %147 : i32 to i64
    %154 = arith.addi %153, %c36_i64 : i64
    %155 = llvm.getelementptr %12[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %152, %155 {alignment = 1 : i64} : i64, !llvm.ptr
    %156 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %157 = arith.extui %156 : i32 to i64
    %158 = arith.addi %157, %c0_i64_32 : i64
    %159 = llvm.getelementptr %12[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %160 = llvm.load volatile %159 {alignment = 1 : i64} : !llvm.ptr -> i64
    llvm.store %160, %7 : i64, !llvm.ptr
    %161 = llvm.load %3 : !llvm.ptr -> i32
    %162 = llvm.load %6 : !llvm.ptr -> i32
    %c56_i64 = arith.constant 56 : i64
    %163 = arith.extui %161 : i32 to i64
    %164 = arith.addi %163, %c56_i64 : i64
    %165 = llvm.getelementptr %12[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %162, %165 {alignment = 1 : i64} : i32, !llvm.ptr
    %166 = llvm.load %3 : !llvm.ptr -> i32
    %167 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c16_i64 : i64
    %170 = llvm.getelementptr %12[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c44_i64 = arith.constant 44 : i64
    %172 = arith.extui %166 : i32 to i64
    %173 = arith.addi %172, %c44_i64 : i64
    %174 = llvm.getelementptr %12[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %171, %174 {alignment = 1 : i64} : i32, !llvm.ptr
    %175 = llvm.load %3 : !llvm.ptr -> i32
    %176 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %177 = arith.extui %176 : i32 to i64
    %178 = arith.addi %177, %c32_i64 : i64
    %179 = llvm.getelementptr %12[%178] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %180 = llvm.load volatile %179 {alignment = 1 : i64} : !llvm.ptr -> i8
    %181 = arith.extui %180 : i8 to i32
    %c60_i64 = arith.constant 60 : i64
    %182 = arith.extui %175 : i32 to i64
    %183 = arith.addi %182, %c60_i64 : i64
    %184 = llvm.getelementptr %12[%183] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %185 = arith.trunci %181 : i32 to i8
    llvm.store volatile %185, %184 {alignment = 1 : i64} : i8, !llvm.ptr
    %186 = llvm.load %3 : !llvm.ptr -> i32
    %187 = llvm.load %7 : !llvm.ptr -> i64
    %c28_i64_33 = arith.constant 28 : i64
    %188 = arith.extui %186 : i32 to i64
    %189 = arith.addi %188, %c28_i64_33 : i64
    %190 = llvm.getelementptr %12[%189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %187, %190 {alignment = 1 : i64} : i64, !llvm.ptr
    %191 = llvm.load %3 : !llvm.ptr -> i32
    %192 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %193 = arith.addi %192, %c12_i32 : i32
    %c48_i64 = arith.constant 48 : i64
    %194 = arith.extui %191 : i32 to i64
    %195 = arith.addi %194, %c48_i64 : i64
    %196 = llvm.getelementptr %12[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %193, %196 {alignment = 1 : i64} : i32, !llvm.ptr
    %197 = llvm.load %1 : !llvm.ptr -> i32
    %198 = llvm.load %3 : !llvm.ptr -> i32
    %c28_i32 = arith.constant 28 : i32
    %199 = arith.addi %198, %c28_i32 : i32
    %200 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_34 = arith.constant 12 : i64
    %201 = arith.extui %200 : i32 to i64
    %202 = arith.addi %201, %c12_i64_34 : i64
    %203 = llvm.getelementptr %12[%202] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %204 = llvm.load volatile %203 {alignment = 1 : i64} : !llvm.ptr -> i32
    %205 = arith.cmpi ult, %204, %27 : i32
    cf.cond_br %205, ^bb29, ^bb30
  ^bb19:  // pred: ^bb6
    %c1_i32_35 = arith.constant 1 : i32
    llvm.store %c1_i32_35, %4 : i32, !llvm.ptr
    %206 = llvm.load %5 : !llvm.ptr -> i32
    %c20_i64_36 = arith.constant 20 : i64
    %207 = arith.extui %206 : i32 to i64
    %208 = arith.addi %207, %c20_i64_36 : i64
    %209 = llvm.getelementptr %12[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %210 = llvm.load volatile %209 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1051165_i32 = arith.constant 1051165 : i32
    %c1_i32_37 = arith.constant 1 : i32
    %211 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i64_38 = arith.constant 24 : i64
    %212 = arith.extui %211 : i32 to i64
    %213 = arith.addi %212, %c24_i64_38 : i64
    %214 = llvm.getelementptr %12[%213] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %215 = llvm.load volatile %214 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_39 = arith.constant 12 : i64
    %216 = arith.extui %215 : i32 to i64
    %217 = arith.addi %216, %c12_i64_39 : i64
    %218 = llvm.getelementptr %12[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %219 = llvm.load volatile %218 {alignment = 1 : i64} : !llvm.ptr -> i32
    %220 = arith.cmpi ult, %219, %22 : i32
    cf.cond_br %220, ^bb20, ^bb21
  ^bb20:  // 2 preds: ^bb19, ^bb21
    %221 = llvm.getelementptr inbounds %20[%219] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %222 = llvm.load %221 : !llvm.ptr -> !llvm.ptr
    %223 = llvm.ptrtoint %222 : !llvm.ptr to i64
    %c0_i64_40 = arith.constant 0 : i64
    %224 = arith.cmpi eq, %223, %c0_i64_40 : i64
    cf.cond_br %224, ^bb23, ^bb22
  ^bb21:  // pred: ^bb19
    %c3_i32_41 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_41) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %225 = llvm.getelementptr %222[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %226 = llvm.getelementptr %222[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %227 = llvm.getelementptr %222[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %228 = llvm.load %225 : !llvm.ptr -> !llvm.ptr
    %229 = llvm.load %227 : !llvm.ptr -> !llvm.ptr
    %230 = llvm.ptrtoint %228 : !llvm.ptr to i64
    %c0_i64_42 = arith.constant 0 : i64
    %231 = arith.cmpi eq, %230, %c0_i64_42 : i64
    cf.cond_br %231, ^bb25, ^bb24
  ^bb23:  // pred: ^bb20
    %c4_i32_43 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_43) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // 2 preds: ^bb22, ^bb25
    %232 = llvm.load %226 : !llvm.ptr -> i32
    %233 = arith.cmpi ne, %14, %232 : i32
    cf.cond_br %233, ^bb27, ^bb26
  ^bb25:  // pred: ^bb22
    %c3_i32_44 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_44) : (i32) -> ()
    cf.br ^bb24
  ^bb26:  // 2 preds: ^bb24, ^bb27
    %234 = llvm.call %228(%229, %210, %c1051165_i32, %c1_i32_37) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_45 = arith.constant 0 : i32
    %235 = arith.cmpi ne, %234, %c0_i32_45 : i32
    cf.cond_br %235, ^bb3, ^bb28
  ^bb27:  // pred: ^bb24
    %c5_i32_46 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_46) : (i32) -> ()
    cf.br ^bb26
  ^bb28:  // pred: ^bb26
    %236 = llvm.load %5 : !llvm.ptr -> i32
    %c28_i64_47 = arith.constant 28 : i64
    %237 = arith.extui %236 : i32 to i64
    %238 = arith.addi %237, %c28_i64_47 : i64
    %239 = llvm.getelementptr %12[%238] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %240 = llvm.load volatile %239 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %240, %6 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb29:  // 2 preds: ^bb18, ^bb30
    %241 = llvm.getelementptr inbounds %25[%204] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %242 = llvm.load %241 : !llvm.ptr -> !llvm.ptr
    %243 = llvm.ptrtoint %242 : !llvm.ptr to i64
    %c0_i64_48 = arith.constant 0 : i64
    %244 = arith.cmpi eq, %243, %c0_i64_48 : i64
    cf.cond_br %244, ^bb32, ^bb31
  ^bb30:  // pred: ^bb18
    %c3_i32_49 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_49) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %245 = llvm.getelementptr %242[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %246 = llvm.getelementptr %242[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %247 = llvm.getelementptr %242[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %248 = llvm.load %245 : !llvm.ptr -> !llvm.ptr
    %249 = llvm.load %247 : !llvm.ptr -> !llvm.ptr
    %250 = llvm.ptrtoint %248 : !llvm.ptr to i64
    %c0_i64_50 = arith.constant 0 : i64
    %251 = arith.cmpi eq, %250, %c0_i64_50 : i64
    cf.cond_br %251, ^bb34, ^bb33
  ^bb32:  // pred: ^bb29
    %c4_i32_51 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_51) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // 2 preds: ^bb31, ^bb34
    %252 = llvm.load %246 : !llvm.ptr -> i32
    %253 = arith.cmpi ne, %24, %252 : i32
    cf.cond_br %253, ^bb36, ^bb35
  ^bb34:  // pred: ^bb31
    %c3_i32_52 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_52) : (i32) -> ()
    cf.br ^bb33
  ^bb35:  // 2 preds: ^bb33, ^bb36
    %254 = llvm.call %248(%249, %197, %199) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_53 = arith.constant 0 : i32
    %255 = arith.cmpi ne, %254, %c0_i32_53 : i32
    cf.cond_br %255, ^bb3, ^bb37
  ^bb36:  // pred: ^bb33
    %c5_i32_54 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_54) : (i32) -> ()
    cf.br ^bb35
  ^bb37:  // pred: ^bb35
    %256 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i64_55 = arith.constant 48 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c48_i64_55 : i64
    %259 = llvm.getelementptr %12[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1051160_i32 = arith.constant 1051160 : i32
    %c2_i32_56 = arith.constant 2 : i32
    %261 = llvm.load %3 : !llvm.ptr -> i32
    %c52_i64_57 = arith.constant 52 : i64
    %262 = arith.extui %261 : i32 to i64
    %263 = arith.addi %262, %c52_i64_57 : i64
    %264 = llvm.getelementptr %12[%263] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %265 = llvm.load volatile %264 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_58 = arith.constant 12 : i64
    %266 = arith.extui %265 : i32 to i64
    %267 = arith.addi %266, %c12_i64_58 : i64
    %268 = llvm.getelementptr %12[%267] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %269 = llvm.load volatile %268 {alignment = 1 : i64} : !llvm.ptr -> i32
    %270 = arith.cmpi ult, %269, %30 : i32
    cf.cond_br %270, ^bb38, ^bb39
  ^bb38:  // 2 preds: ^bb37, ^bb39
    %271 = llvm.getelementptr inbounds %28[%269] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %272 = llvm.load %271 : !llvm.ptr -> !llvm.ptr
    %273 = llvm.ptrtoint %272 : !llvm.ptr to i64
    %c0_i64_59 = arith.constant 0 : i64
    %274 = arith.cmpi eq, %273, %c0_i64_59 : i64
    cf.cond_br %274, ^bb41, ^bb40
  ^bb39:  // pred: ^bb37
    %c3_i32_60 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_60) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %275 = llvm.getelementptr %272[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %276 = llvm.getelementptr %272[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %277 = llvm.getelementptr %272[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %278 = llvm.load %275 : !llvm.ptr -> !llvm.ptr
    %279 = llvm.load %277 : !llvm.ptr -> !llvm.ptr
    %280 = llvm.ptrtoint %278 : !llvm.ptr to i64
    %c0_i64_61 = arith.constant 0 : i64
    %281 = arith.cmpi eq, %280, %c0_i64_61 : i64
    cf.cond_br %281, ^bb43, ^bb42
  ^bb41:  // pred: ^bb38
    %c4_i32_62 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_62) : (i32) -> ()
    cf.br ^bb40
  ^bb42:  // 2 preds: ^bb40, ^bb43
    %282 = llvm.load %276 : !llvm.ptr -> i32
    %283 = arith.cmpi ne, %14, %282 : i32
    cf.cond_br %283, ^bb45, ^bb44
  ^bb43:  // pred: ^bb40
    %c3_i32_63 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_63) : (i32) -> ()
    cf.br ^bb42
  ^bb44:  // 2 preds: ^bb42, ^bb45
    %284 = llvm.call %278(%279, %260, %c1051160_i32, %c2_i32_56) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %284, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb45:  // pred: ^bb42
    %c5_i32_64 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_64) : (i32) -> ()
    cf.br ^bb44
  ^bb46:  // 2 preds: ^bb5, ^bb47
    %285 = llvm.getelementptr inbounds %31[%81] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %286 = llvm.load %285 : !llvm.ptr -> !llvm.ptr
    %287 = llvm.ptrtoint %286 : !llvm.ptr to i64
    %c0_i64_65 = arith.constant 0 : i64
    %288 = arith.cmpi eq, %287, %c0_i64_65 : i64
    cf.cond_br %288, ^bb49, ^bb48
  ^bb47:  // pred: ^bb5
    %c3_i32_66 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_66) : (i32) -> ()
    cf.br ^bb46
  ^bb48:  // 2 preds: ^bb46, ^bb49
    %289 = llvm.getelementptr %286[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %290 = llvm.getelementptr %286[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %291 = llvm.getelementptr %286[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %292 = llvm.load %289 : !llvm.ptr -> !llvm.ptr
    %293 = llvm.load %291 : !llvm.ptr -> !llvm.ptr
    %294 = llvm.ptrtoint %292 : !llvm.ptr to i64
    %c0_i64_67 = arith.constant 0 : i64
    %295 = arith.cmpi eq, %294, %c0_i64_67 : i64
    cf.cond_br %295, ^bb51, ^bb50
  ^bb49:  // pred: ^bb46
    %c4_i32_68 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_68) : (i32) -> ()
    cf.br ^bb48
  ^bb50:  // 2 preds: ^bb48, ^bb51
    %296 = llvm.load %290 : !llvm.ptr -> i32
    %297 = arith.cmpi ne, %24, %296 : i32
    cf.cond_br %297, ^bb53, ^bb52
  ^bb51:  // pred: ^bb48
    %c3_i32_69 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_69) : (i32) -> ()
    cf.br ^bb50
  ^bb52:  // 2 preds: ^bb50, ^bb53
    %298 = llvm.call %292(%293, %75, %76) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    llvm.store %298, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb53:  // pred: ^bb50
    %c5_i32_70 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_70) : (i32) -> ()
    cf.br ^bb52
  }
  func.func @f181(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %5 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> i32
    %7 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.load %8 : !llvm.ptr -> i64
    %11 = arith.trunci %10 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_1 = arith.constant 1 : i32
    llvm.store %c1_i32_1, %1 : i32, !llvm.ptr
    %12 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %13 = arith.extui %12 : i32 to i64
    %14 = arith.addi %13, %c4_i64 : i64
    %15 = llvm.getelementptr %4[%14] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %16 = llvm.load volatile %15 {alignment = 1 : i64} : !llvm.ptr -> i8
    %17 = arith.extui %16 : i8 to i32
    %c0_i32_2 = arith.constant 0 : i32
    %18 = arith.cmpi ne, %17, %c0_i32_2 : i32
    cf.cond_br %18, ^bb3, ^bb4
  ^bb2(%19: i32):  // pred: ^bb3
    return %19 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb11
    %20 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%20 : i32)
  ^bb4:  // pred: ^bb1
    %21 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %22 = arith.extui %21 : i32 to i64
    %23 = arith.addi %22, %c0_i64 : i64
    %24 = llvm.getelementptr %4[%23] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %25 = llvm.load volatile %24 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %25, %0 : i32, !llvm.ptr
    %c20_i64 = arith.constant 20 : i64
    %26 = arith.extui %25 : i32 to i64
    %27 = arith.addi %26, %c20_i64 : i64
    %28 = llvm.getelementptr %4[%27] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %29 = llvm.load volatile %28 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1051166_i32 = arith.constant 1051166 : i32
    %c1_i32_3 = arith.constant 1 : i32
    %30 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c24_i64 : i64
    %33 = llvm.getelementptr %4[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %34 = llvm.load volatile %33 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %35 = arith.extui %34 : i32 to i64
    %36 = arith.addi %35, %c12_i64 : i64
    %37 = llvm.getelementptr %4[%36] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %38 = llvm.load volatile %37 {alignment = 1 : i64} : !llvm.ptr -> i32
    %39 = arith.cmpi ult, %38, %11 : i32
    cf.cond_br %39, ^bb5, ^bb6
  ^bb5:  // 2 preds: ^bb4, ^bb6
    %40 = llvm.getelementptr inbounds %9[%38] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %41 = llvm.load %40 : !llvm.ptr -> !llvm.ptr
    %42 = llvm.ptrtoint %41 : !llvm.ptr to i64
    %c0_i64_4 = arith.constant 0 : i64
    %43 = arith.cmpi eq, %42, %c0_i64_4 : i64
    cf.cond_br %43, ^bb8, ^bb7
  ^bb6:  // pred: ^bb4
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %44 = llvm.getelementptr %41[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %45 = llvm.getelementptr %41[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %46 = llvm.getelementptr %41[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %47 = llvm.load %44 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    %49 = llvm.ptrtoint %47 : !llvm.ptr to i64
    %c0_i64_5 = arith.constant 0 : i64
    %50 = arith.cmpi eq, %49, %c0_i64_5 : i64
    cf.cond_br %50, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %51 = llvm.load %45 : !llvm.ptr -> i32
    %52 = arith.cmpi ne, %6, %51 : i32
    cf.cond_br %52, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c3_i32_6 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_6) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %53 = llvm.call %47(%48, %29, %c1051166_i32, %c1_i32_3) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %53, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb9
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb11
  }
  func.func @f182(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %13 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %19 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %21 = llvm.load %19 : !llvm.ptr -> i64
    %22 = arith.trunci %21 : i64 to i32
    %23 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %19 : !llvm.ptr -> i64
    %25 = arith.trunci %24 : i64 to i32
    %26 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %27 = llvm.load %26 : !llvm.ptr -> i32
    %28 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.load %19 : !llvm.ptr -> i64
    %30 = arith.trunci %29 : i64 to i32
    %31 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %19 : !llvm.ptr -> i64
    %33 = arith.trunci %32 : i64 to i32
    %34 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.load %19 : !llvm.ptr -> i64
    %36 = arith.trunci %35 : i64 to i32
    %37 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %19 : !llvm.ptr -> i64
    %39 = arith.trunci %38 : i64 to i32
    %40 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.load %19 : !llvm.ptr -> i64
    %42 = arith.trunci %41 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %44 = arith.cmpi ne, %43, %c0_i32_12 : i32
    cf.cond_br %44, ^bb4, ^bb5
  ^bb2(%45: i32):  // 7 preds: ^bb24, ^bb34, ^bb45, ^bb51, ^bb76, ^bb98, ^bb101
    return %45 : i32
  ^bb3:  // 2 preds: ^bb4, ^bb5
    %46 = llvm.load %7 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %47 = arith.andi %46, %c4_i32 : i32
    %c0_i32_13 = arith.constant 0 : i32
    %48 = arith.cmpi ne, %47, %c0_i32_13 : i32
    cf.cond_br %48, ^bb7, ^bb8
  ^bb4:  // pred: ^bb1
    %c43_i32 = arith.constant 43 : i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %49 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c28_i64 : i64
    %52 = llvm.getelementptr %15[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %53, %7 : i32, !llvm.ptr
    %c1_i32_14 = arith.constant 1 : i32
    %54 = arith.andi %53, %c1_i32_14 : i32
    llvm.store %54, %1 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %55 = arith.cmpi ne, %54, %c0_i32_15 : i32
    %56 = arith.select %55, %c43_i32, %c1114112_i32 : i32
    llvm.store %56, %8 : i32, !llvm.ptr
    %57 = llvm.load %1 : !llvm.ptr -> i32
    %58 = llvm.load %5 : !llvm.ptr -> i32
    %59 = arith.addi %57, %58 : i32
    llvm.store %59, %6 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb5:  // pred: ^bb1
    %60 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %61 = arith.addi %60, %c1_i32_16 : i32
    llvm.store %61, %6 : i32, !llvm.ptr
    %62 = llvm.load %0 : !llvm.ptr -> i32
    %c28_i64_17 = arith.constant 28 : i64
    %63 = arith.extui %62 : i32 to i64
    %64 = arith.addi %63, %c28_i64_17 : i64
    %65 = llvm.getelementptr %15[%64] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %66 = llvm.load volatile %65 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %66, %7 : i32, !llvm.ptr
    %c45_i32 = arith.constant 45 : i32
    llvm.store %c45_i32, %8 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb8, ^bb9
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64 : i64
    %70 = llvm.getelementptr %15[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i32_18 = arith.constant 0 : i32
    %72 = arith.cmpi ne, %71, %c0_i32_18 : i32
    cf.cond_br %72, ^bb25, ^bb26
  ^bb7:  // pred: ^bb3
    %73 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %74 = arith.cmpi ult, %73, %c16_i32 : i32
    %75 = arith.extui %74 : i1 to i32
    %c0_i32_19 = arith.constant 0 : i32
    %76 = arith.cmpi ne, %75, %c0_i32_19 : i32
    cf.cond_br %76, ^bb10, ^bb11
  ^bb8:  // pred: ^bb3
    %c0_i32_20 = arith.constant 0 : i32
    llvm.store %c0_i32_20, %2 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb9:  // 4 preds: ^bb11, ^bb13, ^bb14, ^bb21
    %77 = llvm.load %1 : !llvm.ptr -> i32
    %78 = llvm.load %6 : !llvm.ptr -> i32
    %79 = arith.addi %77, %78 : i32
    llvm.store %79, %6 : i32, !llvm.ptr
    cf.br ^bb6
  ^bb10:  // pred: ^bb7
    %80 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %81 = arith.cmpi ne, %80, %c0_i32_21 : i32
    cf.cond_br %81, ^bb12, ^bb13
  ^bb11:  // pred: ^bb7
    %82 = llvm.load %2 : !llvm.ptr -> i32
    %83 = llvm.load %3 : !llvm.ptr -> i32
    %84 = call @f184(%arg0, %82, %83) : (!llvm.ptr, i32, i32) -> i32
    llvm.store %84, %1 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb10
    %85 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %86 = arith.andi %85, %c3_i32 : i32
    llvm.store %86, %9 : i32, !llvm.ptr
    %87 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_22 = arith.constant 4 : i32
    %88 = arith.cmpi uge, %87, %c4_i32_22 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_23 : i32
    cf.cond_br %90, ^bb15, ^bb16
  ^bb13:  // pred: ^bb10
    %c0_i32_24 = arith.constant 0 : i32
    llvm.store %c0_i32_24, %1 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb14:  // 2 preds: ^bb16, ^bb17
    %91 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_25 = arith.constant 0 : i32
    %92 = arith.cmpi eq, %91, %c0_i32_25 : i32
    %93 = arith.extui %92 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %94 = arith.cmpi ne, %93, %c0_i32_26 : i32
    cf.cond_br %94, ^bb9, ^bb20
  ^bb15:  // pred: ^bb12
    %95 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %96 = arith.andi %95, %c12_i32 : i32
    llvm.store %96, %11 : i32, !llvm.ptr
    %c0_i32_27 = arith.constant 0 : i32
    llvm.store %c0_i32_27, %1 : i32, !llvm.ptr
    %c0_i32_28 = arith.constant 0 : i32
    llvm.store %c0_i32_28, %10 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb16:  // pred: ^bb12
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %1 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    llvm.store %c0_i32_30, %10 : i32, !llvm.ptr
    cf.br ^bb14
  ^bb17:  // pred: ^bb19
    cf.br ^bb14
  ^bb18:  // 2 preds: ^bb15, ^bb18
    %97 = llvm.load %1 : !llvm.ptr -> i32
    %98 = llvm.load %2 : !llvm.ptr -> i32
    %99 = llvm.load %10 : !llvm.ptr -> i32
    %100 = arith.addi %98, %99 : i32
    llvm.store %100, %12 : i32, !llvm.ptr
    %c0_i64_31 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_31 : i64
    %103 = llvm.getelementptr %15[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i8
    %105 = arith.extsi %104 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %106 = arith.cmpi sgt, %105, %c-65_i32 : i32
    %107 = arith.extui %106 : i1 to i32
    %108 = arith.addi %97, %107 : i32
    %109 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_32 = arith.constant 1 : i32
    %110 = arith.addi %109, %c1_i32_32 : i32
    %c0_i64_33 = arith.constant 0 : i64
    %111 = arith.extui %110 : i32 to i64
    %112 = arith.addi %111, %c0_i64_33 : i64
    %113 = llvm.getelementptr %15[%112] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %114 = llvm.load volatile %113 {alignment = 1 : i64} : !llvm.ptr -> i8
    %115 = arith.extsi %114 : i8 to i32
    %c-65_i32_34 = arith.constant -65 : i32
    %116 = arith.cmpi sgt, %115, %c-65_i32_34 : i32
    %117 = arith.extui %116 : i1 to i32
    %118 = arith.addi %108, %117 : i32
    %119 = llvm.load %12 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %120 = arith.addi %119, %c2_i32 : i32
    %c0_i64_35 = arith.constant 0 : i64
    %121 = arith.extui %120 : i32 to i64
    %122 = arith.addi %121, %c0_i64_35 : i64
    %123 = llvm.getelementptr %15[%122] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %124 = llvm.load volatile %123 {alignment = 1 : i64} : !llvm.ptr -> i8
    %125 = arith.extsi %124 : i8 to i32
    %c-65_i32_36 = arith.constant -65 : i32
    %126 = arith.cmpi sgt, %125, %c-65_i32_36 : i32
    %127 = arith.extui %126 : i1 to i32
    %128 = arith.addi %118, %127 : i32
    %129 = llvm.load %12 : !llvm.ptr -> i32
    %c3_i32_37 = arith.constant 3 : i32
    %130 = arith.addi %129, %c3_i32_37 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %131 = arith.extui %130 : i32 to i64
    %132 = arith.addi %131, %c0_i64_38 : i64
    %133 = llvm.getelementptr %15[%132] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %134 = llvm.load volatile %133 {alignment = 1 : i64} : !llvm.ptr -> i8
    %135 = arith.extsi %134 : i8 to i32
    %c-65_i32_39 = arith.constant -65 : i32
    %136 = arith.cmpi sgt, %135, %c-65_i32_39 : i32
    %137 = arith.extui %136 : i1 to i32
    %138 = arith.addi %128, %137 : i32
    llvm.store %138, %1 : i32, !llvm.ptr
    %139 = llvm.load %11 : !llvm.ptr -> i32
    %140 = llvm.load %10 : !llvm.ptr -> i32
    %c4_i32_40 = arith.constant 4 : i32
    %141 = arith.addi %140, %c4_i32_40 : i32
    llvm.store %141, %10 : i32, !llvm.ptr
    %142 = arith.cmpi eq, %139, %141 : i32
    %143 = arith.extui %142 : i1 to i32
    %c0_i32_41 = arith.constant 0 : i32
    %144 = arith.cmpi eq, %143, %c0_i32_41 : i32
    %145 = arith.extui %144 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %146 = arith.cmpi ne, %145, %c0_i32_42 : i32
    cf.cond_br %146, ^bb18, ^bb19
  ^bb19:  // pred: ^bb18
    cf.br ^bb17
  ^bb20:  // pred: ^bb14
    %147 = llvm.load %2 : !llvm.ptr -> i32
    %148 = llvm.load %10 : !llvm.ptr -> i32
    %149 = arith.addi %147, %148 : i32
    llvm.store %149, %12 : i32, !llvm.ptr
    cf.br ^bb22
  ^bb21:  // pred: ^bb23
    cf.br ^bb9
  ^bb22:  // 2 preds: ^bb20, ^bb22
    %150 = llvm.load %1 : !llvm.ptr -> i32
    %151 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_43 = arith.constant 0 : i64
    %152 = arith.extui %151 : i32 to i64
    %153 = arith.addi %152, %c0_i64_43 : i64
    %154 = llvm.getelementptr %15[%153] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %155 = llvm.load volatile %154 {alignment = 1 : i64} : !llvm.ptr -> i8
    %156 = arith.extsi %155 : i8 to i32
    %c-65_i32_44 = arith.constant -65 : i32
    %157 = arith.cmpi sgt, %156, %c-65_i32_44 : i32
    %158 = arith.extui %157 : i1 to i32
    %159 = arith.addi %150, %158 : i32
    llvm.store %159, %1 : i32, !llvm.ptr
    %160 = llvm.load %12 : !llvm.ptr -> i32
    %c1_i32_45 = arith.constant 1 : i32
    %161 = arith.addi %160, %c1_i32_45 : i32
    llvm.store %161, %12 : i32, !llvm.ptr
    %162 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %163 = arith.addi %162, %c-1_i32 : i32
    llvm.store %163, %9 : i32, !llvm.ptr
    %c0_i32_46 = arith.constant 0 : i32
    %164 = arith.cmpi ne, %163, %c0_i32_46 : i32
    cf.cond_br %164, ^bb22, ^bb23
  ^bb23:  // pred: ^bb22
    cf.br ^bb21
  ^bb24:  // 7 preds: ^bb26, ^bb37, ^bb48, ^bb69, ^bb71, ^bb75, ^bb95
    %165 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb2(%165 : i32)
  ^bb25:  // pred: ^bb6
    %166 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %167 = arith.extui %166 : i32 to i64
    %168 = arith.addi %167, %c4_i64 : i64
    %169 = llvm.getelementptr %15[%168] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %170 = llvm.load volatile %169 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %170, %9 : i32, !llvm.ptr
    %171 = llvm.load %6 : !llvm.ptr -> i32
    %172 = arith.cmpi ugt, %170, %171 : i32
    %173 = arith.extui %172 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %174 = arith.cmpi ne, %173, %c0_i32_47 : i32
    cf.cond_br %174, ^bb36, ^bb37
  ^bb26:  // pred: ^bb6
    %c1_i32_48 = arith.constant 1 : i32
    llvm.store %c1_i32_48, %1 : i32, !llvm.ptr
    %175 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %176 = arith.extui %175 : i32 to i64
    %177 = arith.addi %176, %c20_i64 : i64
    %178 = llvm.getelementptr %15[%177] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %179 = llvm.load volatile %178 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %179, %12 : i32, !llvm.ptr
    %180 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %181 = arith.extui %180 : i32 to i64
    %182 = arith.addi %181, %c24_i64 : i64
    %183 = llvm.getelementptr %15[%182] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %184 = llvm.load volatile %183 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %184, %10 : i32, !llvm.ptr
    %185 = llvm.load %8 : !llvm.ptr -> i32
    %186 = llvm.load %2 : !llvm.ptr -> i32
    %187 = llvm.load %3 : !llvm.ptr -> i32
    %188 = call @f185(%arg0, %179, %184, %185, %186, %187) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_49 = arith.constant 0 : i32
    %189 = arith.cmpi ne, %188, %c0_i32_49 : i32
    cf.cond_br %189, ^bb24, ^bb27
  ^bb27:  // pred: ^bb26
    %190 = llvm.load %12 : !llvm.ptr -> i32
    %191 = llvm.load %4 : !llvm.ptr -> i32
    %192 = llvm.load %5 : !llvm.ptr -> i32
    %193 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %194 = arith.extui %193 : i32 to i64
    %195 = arith.addi %194, %c12_i64 : i64
    %196 = llvm.getelementptr %15[%195] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %197 = llvm.load volatile %196 {alignment = 1 : i64} : !llvm.ptr -> i32
    %198 = arith.cmpi ult, %197, %22 : i32
    cf.cond_br %198, ^bb28, ^bb29
  ^bb28:  // 2 preds: ^bb27, ^bb29
    %199 = llvm.getelementptr inbounds %20[%197] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %200 = llvm.load %199 : !llvm.ptr -> !llvm.ptr
    %201 = llvm.ptrtoint %200 : !llvm.ptr to i64
    %c0_i64_50 = arith.constant 0 : i64
    %202 = arith.cmpi eq, %201, %c0_i64_50 : i64
    cf.cond_br %202, ^bb31, ^bb30
  ^bb29:  // pred: ^bb27
    %c3_i32_51 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_51) : (i32) -> ()
    cf.br ^bb28
  ^bb30:  // 2 preds: ^bb28, ^bb31
    %203 = llvm.getelementptr %200[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %204 = llvm.getelementptr %200[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %205 = llvm.getelementptr %200[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %206 = llvm.load %203 : !llvm.ptr -> !llvm.ptr
    %207 = llvm.load %205 : !llvm.ptr -> !llvm.ptr
    %208 = llvm.ptrtoint %206 : !llvm.ptr to i64
    %c0_i64_52 = arith.constant 0 : i64
    %209 = arith.cmpi eq, %208, %c0_i64_52 : i64
    cf.cond_br %209, ^bb33, ^bb32
  ^bb31:  // pred: ^bb28
    %c4_i32_53 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_53) : (i32) -> ()
    cf.br ^bb30
  ^bb32:  // 2 preds: ^bb30, ^bb33
    %210 = llvm.load %204 : !llvm.ptr -> i32
    %211 = arith.cmpi ne, %17, %210 : i32
    cf.cond_br %211, ^bb35, ^bb34
  ^bb33:  // pred: ^bb30
    %c3_i32_54 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_54) : (i32) -> ()
    cf.br ^bb32
  ^bb34:  // 2 preds: ^bb32, ^bb35
    %212 = llvm.call %206(%207, %190, %191, %192) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%212 : i32)
  ^bb35:  // pred: ^bb32
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // pred: ^bb25
    %213 = llvm.load %7 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %214 = arith.andi %213, %c8_i32 : i32
    %c0_i32_55 = arith.constant 0 : i32
    %215 = arith.cmpi eq, %214, %c0_i32_55 : i32
    %216 = arith.extui %215 : i1 to i32
    %c0_i32_56 = arith.constant 0 : i32
    %217 = arith.cmpi ne, %216, %c0_i32_56 : i32
    cf.cond_br %217, ^bb47, ^bb48
  ^bb37:  // pred: ^bb25
    %c1_i32_57 = arith.constant 1 : i32
    llvm.store %c1_i32_57, %1 : i32, !llvm.ptr
    %218 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_58 = arith.constant 20 : i64
    %219 = arith.extui %218 : i32 to i64
    %220 = arith.addi %219, %c20_i64_58 : i64
    %221 = llvm.getelementptr %15[%220] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %222 = llvm.load volatile %221 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %222, %12 : i32, !llvm.ptr
    %223 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_59 = arith.constant 24 : i64
    %224 = arith.extui %223 : i32 to i64
    %225 = arith.addi %224, %c24_i64_59 : i64
    %226 = llvm.getelementptr %15[%225] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %227 = llvm.load volatile %226 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %227, %10 : i32, !llvm.ptr
    %228 = llvm.load %8 : !llvm.ptr -> i32
    %229 = llvm.load %2 : !llvm.ptr -> i32
    %230 = llvm.load %3 : !llvm.ptr -> i32
    %231 = call @f185(%arg0, %222, %227, %228, %229, %230) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_60 = arith.constant 0 : i32
    %232 = arith.cmpi ne, %231, %c0_i32_60 : i32
    cf.cond_br %232, ^bb24, ^bb38
  ^bb38:  // pred: ^bb37
    %233 = llvm.load %12 : !llvm.ptr -> i32
    %234 = llvm.load %4 : !llvm.ptr -> i32
    %235 = llvm.load %5 : !llvm.ptr -> i32
    %236 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64_61 = arith.constant 12 : i64
    %237 = arith.extui %236 : i32 to i64
    %238 = arith.addi %237, %c12_i64_61 : i64
    %239 = llvm.getelementptr %15[%238] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %240 = llvm.load volatile %239 {alignment = 1 : i64} : !llvm.ptr -> i32
    %241 = arith.cmpi ult, %240, %25 : i32
    cf.cond_br %241, ^bb39, ^bb40
  ^bb39:  // 2 preds: ^bb38, ^bb40
    %242 = llvm.getelementptr inbounds %23[%240] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %243 = llvm.load %242 : !llvm.ptr -> !llvm.ptr
    %244 = llvm.ptrtoint %243 : !llvm.ptr to i64
    %c0_i64_62 = arith.constant 0 : i64
    %245 = arith.cmpi eq, %244, %c0_i64_62 : i64
    cf.cond_br %245, ^bb42, ^bb41
  ^bb40:  // pred: ^bb38
    %c3_i32_63 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_63) : (i32) -> ()
    cf.br ^bb39
  ^bb41:  // 2 preds: ^bb39, ^bb42
    %246 = llvm.getelementptr %243[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %247 = llvm.getelementptr %243[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %248 = llvm.getelementptr %243[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %249 = llvm.load %246 : !llvm.ptr -> !llvm.ptr
    %250 = llvm.load %248 : !llvm.ptr -> !llvm.ptr
    %251 = llvm.ptrtoint %249 : !llvm.ptr to i64
    %c0_i64_64 = arith.constant 0 : i64
    %252 = arith.cmpi eq, %251, %c0_i64_64 : i64
    cf.cond_br %252, ^bb44, ^bb43
  ^bb42:  // pred: ^bb39
    %c4_i32_65 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_65) : (i32) -> ()
    cf.br ^bb41
  ^bb43:  // 2 preds: ^bb41, ^bb44
    %253 = llvm.load %247 : !llvm.ptr -> i32
    %254 = arith.cmpi ne, %17, %253 : i32
    cf.cond_br %254, ^bb46, ^bb45
  ^bb44:  // pred: ^bb41
    %c3_i32_66 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_66) : (i32) -> ()
    cf.br ^bb43
  ^bb45:  // 2 preds: ^bb43, ^bb46
    %255 = llvm.call %249(%250, %233, %234, %235) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%255 : i32)
  ^bb46:  // pred: ^bb43
    %c5_i32_67 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_67) : (i32) -> ()
    cf.br ^bb45
  ^bb47:  // pred: ^bb36
    %256 = llvm.load %9 : !llvm.ptr -> i32
    %257 = llvm.load %6 : !llvm.ptr -> i32
    %258 = arith.subi %256, %257 : i32
    llvm.store %258, %6 : i32, !llvm.ptr
    %259 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64 = arith.constant 32 : i64
    %260 = arith.extui %259 : i32 to i64
    %261 = arith.addi %260, %c32_i64 : i64
    %262 = llvm.getelementptr %15[%261] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %263 = llvm.load volatile %262 {alignment = 1 : i64} : !llvm.ptr -> i8
    %264 = arith.extui %263 : i8 to i32
    llvm.store %264, %1 : i32, !llvm.ptr
    cf.switch %264 : i32, [
      default: ^bb72,
      0: ^bb72,
      1: ^bb74,
      2: ^bb73,
      3: ^bb74
    ]
  ^bb48:  // pred: ^bb36
    %265 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %266 = arith.extui %265 : i32 to i64
    %267 = arith.addi %266, %c16_i64 : i64
    %268 = llvm.getelementptr %15[%267] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %269 = llvm.load volatile %268 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %269, %11 : i32, !llvm.ptr
    %270 = llvm.load %0 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %c16_i64_68 = arith.constant 16 : i64
    %271 = arith.extui %270 : i32 to i64
    %272 = arith.addi %271, %c16_i64_68 : i64
    %273 = llvm.getelementptr %15[%272] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c48_i32, %273 {alignment = 1 : i64} : i32, !llvm.ptr
    %274 = llvm.load %0 : !llvm.ptr -> i32
    %c32_i64_69 = arith.constant 32 : i64
    %275 = arith.extui %274 : i32 to i64
    %276 = arith.addi %275, %c32_i64_69 : i64
    %277 = llvm.getelementptr %15[%276] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %278 = llvm.load volatile %277 {alignment = 1 : i64} : !llvm.ptr -> i8
    %279 = arith.extui %278 : i8 to i32
    llvm.store %279, %7 : i32, !llvm.ptr
    %c1_i32_70 = arith.constant 1 : i32
    llvm.store %c1_i32_70, %1 : i32, !llvm.ptr
    %280 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_71 = arith.constant 1 : i32
    %c32_i64_72 = arith.constant 32 : i64
    %281 = arith.extui %280 : i32 to i64
    %282 = arith.addi %281, %c32_i64_72 : i64
    %283 = llvm.getelementptr %15[%282] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %284 = arith.trunci %c1_i32_71 : i32 to i8
    llvm.store volatile %284, %283 {alignment = 1 : i64} : i8, !llvm.ptr
    %285 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_73 = arith.constant 20 : i64
    %286 = arith.extui %285 : i32 to i64
    %287 = arith.addi %286, %c20_i64_73 : i64
    %288 = llvm.getelementptr %15[%287] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %289 = llvm.load volatile %288 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %289, %12 : i32, !llvm.ptr
    %290 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_74 = arith.constant 24 : i64
    %291 = arith.extui %290 : i32 to i64
    %292 = arith.addi %291, %c24_i64_74 : i64
    %293 = llvm.getelementptr %15[%292] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %294 = llvm.load volatile %293 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %294, %10 : i32, !llvm.ptr
    %295 = llvm.load %8 : !llvm.ptr -> i32
    %296 = llvm.load %2 : !llvm.ptr -> i32
    %297 = llvm.load %3 : !llvm.ptr -> i32
    %298 = call @f185(%arg0, %289, %294, %295, %296, %297) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_75 = arith.constant 0 : i32
    %299 = arith.cmpi ne, %298, %c0_i32_75 : i32
    cf.cond_br %299, ^bb24, ^bb49
  ^bb49:  // pred: ^bb48
    %300 = llvm.load %9 : !llvm.ptr -> i32
    %301 = llvm.load %6 : !llvm.ptr -> i32
    %302 = arith.subi %300, %301 : i32
    %c1_i32_76 = arith.constant 1 : i32
    %303 = arith.addi %302, %c1_i32_76 : i32
    llvm.store %303, %1 : i32, !llvm.ptr
    cf.br ^bb52
  ^bb50:  // pred: ^bb52
    %c1_i32_77 = arith.constant 1 : i32
    llvm.store %c1_i32_77, %1 : i32, !llvm.ptr
    %304 = llvm.load %12 : !llvm.ptr -> i32
    %305 = llvm.load %4 : !llvm.ptr -> i32
    %306 = llvm.load %5 : !llvm.ptr -> i32
    %307 = llvm.load %10 : !llvm.ptr -> i32
    %c12_i64_78 = arith.constant 12 : i64
    %308 = arith.extui %307 : i32 to i64
    %309 = arith.addi %308, %c12_i64_78 : i64
    %310 = llvm.getelementptr %15[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load volatile %310 {alignment = 1 : i64} : !llvm.ptr -> i32
    %312 = arith.cmpi ult, %311, %33 : i32
    cf.cond_br %312, ^bb63, ^bb64
  ^bb51:  // pred: ^bb62
    %c1_i32_79 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_79 : i32)
  ^bb52:  // 2 preds: ^bb49, ^bb60
    %313 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_80 = arith.constant -1 : i32
    %314 = arith.addi %313, %c-1_i32_80 : i32
    llvm.store %314, %1 : i32, !llvm.ptr
    %c0_i32_81 = arith.constant 0 : i32
    %315 = arith.cmpi eq, %314, %c0_i32_81 : i32
    %316 = arith.extui %315 : i1 to i32
    %c0_i32_82 = arith.constant 0 : i32
    %317 = arith.cmpi ne, %316, %c0_i32_82 : i32
    cf.cond_br %317, ^bb50, ^bb53
  ^bb53:  // pred: ^bb52
    %318 = llvm.load %12 : !llvm.ptr -> i32
    %c48_i32_83 = arith.constant 48 : i32
    %319 = llvm.load %10 : !llvm.ptr -> i32
    %c16_i64_84 = arith.constant 16 : i64
    %320 = arith.extui %319 : i32 to i64
    %321 = arith.addi %320, %c16_i64_84 : i64
    %322 = llvm.getelementptr %15[%321] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %323 = llvm.load volatile %322 {alignment = 1 : i64} : !llvm.ptr -> i32
    %324 = arith.cmpi ult, %323, %30 : i32
    cf.cond_br %324, ^bb54, ^bb55
  ^bb54:  // 2 preds: ^bb53, ^bb55
    %325 = llvm.getelementptr inbounds %28[%323] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %326 = llvm.load %325 : !llvm.ptr -> !llvm.ptr
    %327 = llvm.ptrtoint %326 : !llvm.ptr to i64
    %c0_i64_85 = arith.constant 0 : i64
    %328 = arith.cmpi eq, %327, %c0_i64_85 : i64
    cf.cond_br %328, ^bb57, ^bb56
  ^bb55:  // pred: ^bb53
    %c3_i32_86 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_86) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %329 = llvm.getelementptr %326[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %330 = llvm.getelementptr %326[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %331 = llvm.getelementptr %326[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %332 = llvm.load %329 : !llvm.ptr -> !llvm.ptr
    %333 = llvm.load %331 : !llvm.ptr -> !llvm.ptr
    %334 = llvm.ptrtoint %332 : !llvm.ptr to i64
    %c0_i64_87 = arith.constant 0 : i64
    %335 = arith.cmpi eq, %334, %c0_i64_87 : i64
    cf.cond_br %335, ^bb59, ^bb58
  ^bb57:  // pred: ^bb54
    %c4_i32_88 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_88) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %336 = llvm.load %330 : !llvm.ptr -> i32
    %337 = arith.cmpi ne, %27, %336 : i32
    cf.cond_br %337, ^bb61, ^bb60
  ^bb59:  // pred: ^bb56
    %c3_i32_89 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_89) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // 2 preds: ^bb58, ^bb61
    %338 = llvm.call %332(%333, %318, %c48_i32_83) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_90 = arith.constant 0 : i32
    %339 = arith.cmpi eq, %338, %c0_i32_90 : i32
    %340 = arith.extui %339 : i1 to i32
    %c0_i32_91 = arith.constant 0 : i32
    %341 = arith.cmpi ne, %340, %c0_i32_91 : i32
    cf.cond_br %341, ^bb52, ^bb62
  ^bb61:  // pred: ^bb58
    %c5_i32_92 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_92) : (i32) -> ()
    cf.br ^bb60
  ^bb62:  // pred: ^bb60
    cf.br ^bb51
  ^bb63:  // 2 preds: ^bb50, ^bb64
    %342 = llvm.getelementptr inbounds %31[%311] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %343 = llvm.load %342 : !llvm.ptr -> !llvm.ptr
    %344 = llvm.ptrtoint %343 : !llvm.ptr to i64
    %c0_i64_93 = arith.constant 0 : i64
    %345 = arith.cmpi eq, %344, %c0_i64_93 : i64
    cf.cond_br %345, ^bb66, ^bb65
  ^bb64:  // pred: ^bb50
    %c3_i32_94 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_94) : (i32) -> ()
    cf.br ^bb63
  ^bb65:  // 2 preds: ^bb63, ^bb66
    %346 = llvm.getelementptr %343[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %347 = llvm.getelementptr %343[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %348 = llvm.getelementptr %343[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %349 = llvm.load %346 : !llvm.ptr -> !llvm.ptr
    %350 = llvm.load %348 : !llvm.ptr -> !llvm.ptr
    %351 = llvm.ptrtoint %349 : !llvm.ptr to i64
    %c0_i64_95 = arith.constant 0 : i64
    %352 = arith.cmpi eq, %351, %c0_i64_95 : i64
    cf.cond_br %352, ^bb68, ^bb67
  ^bb66:  // pred: ^bb63
    %c4_i32_96 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_96) : (i32) -> ()
    cf.br ^bb65
  ^bb67:  // 2 preds: ^bb65, ^bb68
    %353 = llvm.load %347 : !llvm.ptr -> i32
    %354 = arith.cmpi ne, %17, %353 : i32
    cf.cond_br %354, ^bb70, ^bb69
  ^bb68:  // pred: ^bb65
    %c3_i32_97 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_97) : (i32) -> ()
    cf.br ^bb67
  ^bb69:  // 2 preds: ^bb67, ^bb70
    %355 = llvm.call %349(%350, %304, %305, %306) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_98 = arith.constant 0 : i32
    %356 = arith.cmpi ne, %355, %c0_i32_98 : i32
    cf.cond_br %356, ^bb24, ^bb71
  ^bb70:  // pred: ^bb67
    %c5_i32_99 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_99) : (i32) -> ()
    cf.br ^bb69
  ^bb71:  // pred: ^bb69
    %357 = llvm.load %0 : !llvm.ptr -> i32
    %358 = llvm.load %7 : !llvm.ptr -> i32
    %c32_i64_100 = arith.constant 32 : i64
    %359 = arith.extui %357 : i32 to i64
    %360 = arith.addi %359, %c32_i64_100 : i64
    %361 = llvm.getelementptr %15[%360] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %362 = arith.trunci %358 : i32 to i8
    llvm.store volatile %362, %361 {alignment = 1 : i64} : i8, !llvm.ptr
    %363 = llvm.load %0 : !llvm.ptr -> i32
    %364 = llvm.load %11 : !llvm.ptr -> i32
    %c16_i64_101 = arith.constant 16 : i64
    %365 = arith.extui %363 : i32 to i64
    %366 = arith.addi %365, %c16_i64_101 : i64
    %367 = llvm.getelementptr %15[%366] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %364, %367 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_102 = arith.constant 0 : i32
    llvm.store %c0_i32_102, %1 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb72:  // 4 preds: ^bb47, ^bb47, ^bb73, ^bb74
    %368 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_103 = arith.constant 1 : i32
    %369 = arith.addi %368, %c1_i32_103 : i32
    llvm.store %369, %1 : i32, !llvm.ptr
    %370 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64_104 = arith.constant 16 : i64
    %371 = arith.extui %370 : i32 to i64
    %372 = arith.addi %371, %c16_i64_104 : i64
    %373 = llvm.getelementptr %15[%372] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %374 = llvm.load volatile %373 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %374, %9 : i32, !llvm.ptr
    %375 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_105 = arith.constant 24 : i64
    %376 = arith.extui %375 : i32 to i64
    %377 = arith.addi %376, %c24_i64_105 : i64
    %378 = llvm.getelementptr %15[%377] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %379 = llvm.load volatile %378 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %379, %12 : i32, !llvm.ptr
    %380 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_106 = arith.constant 20 : i64
    %381 = arith.extui %380 : i32 to i64
    %382 = arith.addi %381, %c20_i64_106 : i64
    %383 = llvm.getelementptr %15[%382] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %384 = llvm.load volatile %383 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %384, %10 : i32, !llvm.ptr
    cf.br ^bb77
  ^bb73:  // pred: ^bb47
    %385 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_107 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %386 = arith.cmpi ule, %c1_i32_107, %c31_i32 : i32
    %387 = scf.if %386 -> (i32) {
      %497 = arith.shrui %385, %c1_i32_107 : i32
      scf.yield %497 : i32
    } else {
      %c0_i32_149 = arith.constant 0 : i32
      scf.yield %c0_i32_149 : i32
    }
    llvm.store %387, %1 : i32, !llvm.ptr
    %388 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_108 = arith.constant 1 : i32
    %389 = arith.addi %388, %c1_i32_108 : i32
    %c1_i32_109 = arith.constant 1 : i32
    %c31_i32_110 = arith.constant 31 : i32
    %390 = arith.cmpi ule, %c1_i32_109, %c31_i32_110 : i32
    %391 = scf.if %390 -> (i32) {
      %497 = arith.shrui %389, %c1_i32_109 : i32
      scf.yield %497 : i32
    } else {
      %c0_i32_149 = arith.constant 0 : i32
      scf.yield %c0_i32_149 : i32
    }
    llvm.store %391, %6 : i32, !llvm.ptr
    cf.br ^bb72
  ^bb74:  // 2 preds: ^bb47, ^bb47
    %392 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %392, %1 : i32, !llvm.ptr
    %c0_i32_111 = arith.constant 0 : i32
    llvm.store %c0_i32_111, %6 : i32, !llvm.ptr
    cf.br ^bb72
  ^bb75:  // pred: ^bb77
    %c1_i32_112 = arith.constant 1 : i32
    llvm.store %c1_i32_112, %1 : i32, !llvm.ptr
    %393 = llvm.load %10 : !llvm.ptr -> i32
    %394 = llvm.load %12 : !llvm.ptr -> i32
    %395 = llvm.load %8 : !llvm.ptr -> i32
    %396 = llvm.load %2 : !llvm.ptr -> i32
    %397 = llvm.load %3 : !llvm.ptr -> i32
    %398 = call @f185(%arg0, %393, %394, %395, %396, %397) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %c0_i32_113 = arith.constant 0 : i32
    %399 = arith.cmpi ne, %398, %c0_i32_113 : i32
    cf.cond_br %399, ^bb24, ^bb88
  ^bb76:  // pred: ^bb87
    %c1_i32_114 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_114 : i32)
  ^bb77:  // 2 preds: ^bb72, ^bb85
    %400 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_115 = arith.constant -1 : i32
    %401 = arith.addi %400, %c-1_i32_115 : i32
    llvm.store %401, %1 : i32, !llvm.ptr
    %c0_i32_116 = arith.constant 0 : i32
    %402 = arith.cmpi eq, %401, %c0_i32_116 : i32
    %403 = arith.extui %402 : i1 to i32
    %c0_i32_117 = arith.constant 0 : i32
    %404 = arith.cmpi ne, %403, %c0_i32_117 : i32
    cf.cond_br %404, ^bb75, ^bb78
  ^bb78:  // pred: ^bb77
    %405 = llvm.load %10 : !llvm.ptr -> i32
    %406 = llvm.load %9 : !llvm.ptr -> i32
    %407 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_118 = arith.constant 16 : i64
    %408 = arith.extui %407 : i32 to i64
    %409 = arith.addi %408, %c16_i64_118 : i64
    %410 = llvm.getelementptr %15[%409] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %411 = llvm.load volatile %410 {alignment = 1 : i64} : !llvm.ptr -> i32
    %412 = arith.cmpi ult, %411, %36 : i32
    cf.cond_br %412, ^bb79, ^bb80
  ^bb79:  // 2 preds: ^bb78, ^bb80
    %413 = llvm.getelementptr inbounds %34[%411] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %414 = llvm.load %413 : !llvm.ptr -> !llvm.ptr
    %415 = llvm.ptrtoint %414 : !llvm.ptr to i64
    %c0_i64_119 = arith.constant 0 : i64
    %416 = arith.cmpi eq, %415, %c0_i64_119 : i64
    cf.cond_br %416, ^bb82, ^bb81
  ^bb80:  // pred: ^bb78
    %c3_i32_120 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_120) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // 2 preds: ^bb79, ^bb82
    %417 = llvm.getelementptr %414[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %418 = llvm.getelementptr %414[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %419 = llvm.getelementptr %414[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %420 = llvm.load %417 : !llvm.ptr -> !llvm.ptr
    %421 = llvm.load %419 : !llvm.ptr -> !llvm.ptr
    %422 = llvm.ptrtoint %420 : !llvm.ptr to i64
    %c0_i64_121 = arith.constant 0 : i64
    %423 = arith.cmpi eq, %422, %c0_i64_121 : i64
    cf.cond_br %423, ^bb84, ^bb83
  ^bb82:  // pred: ^bb79
    %c4_i32_122 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_122) : (i32) -> ()
    cf.br ^bb81
  ^bb83:  // 2 preds: ^bb81, ^bb84
    %424 = llvm.load %418 : !llvm.ptr -> i32
    %425 = arith.cmpi ne, %27, %424 : i32
    cf.cond_br %425, ^bb86, ^bb85
  ^bb84:  // pred: ^bb81
    %c3_i32_123 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_123) : (i32) -> ()
    cf.br ^bb83
  ^bb85:  // 2 preds: ^bb83, ^bb86
    %426 = llvm.call %420(%421, %405, %406) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_124 = arith.constant 0 : i32
    %427 = arith.cmpi eq, %426, %c0_i32_124 : i32
    %428 = arith.extui %427 : i1 to i32
    %c0_i32_125 = arith.constant 0 : i32
    %429 = arith.cmpi ne, %428, %c0_i32_125 : i32
    cf.cond_br %429, ^bb77, ^bb87
  ^bb86:  // pred: ^bb83
    %c5_i32_126 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_126) : (i32) -> ()
    cf.br ^bb85
  ^bb87:  // pred: ^bb85
    cf.br ^bb76
  ^bb88:  // pred: ^bb75
    %430 = llvm.load %10 : !llvm.ptr -> i32
    %431 = llvm.load %4 : !llvm.ptr -> i32
    %432 = llvm.load %5 : !llvm.ptr -> i32
    %433 = llvm.load %12 : !llvm.ptr -> i32
    %c12_i64_127 = arith.constant 12 : i64
    %434 = arith.extui %433 : i32 to i64
    %435 = arith.addi %434, %c12_i64_127 : i64
    %436 = llvm.getelementptr %15[%435] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %437 = llvm.load volatile %436 {alignment = 1 : i64} : !llvm.ptr -> i32
    %438 = arith.cmpi ult, %437, %39 : i32
    cf.cond_br %438, ^bb89, ^bb90
  ^bb89:  // 2 preds: ^bb88, ^bb90
    %439 = llvm.getelementptr inbounds %37[%437] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %440 = llvm.load %439 : !llvm.ptr -> !llvm.ptr
    %441 = llvm.ptrtoint %440 : !llvm.ptr to i64
    %c0_i64_128 = arith.constant 0 : i64
    %442 = arith.cmpi eq, %441, %c0_i64_128 : i64
    cf.cond_br %442, ^bb92, ^bb91
  ^bb90:  // pred: ^bb88
    %c3_i32_129 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_129) : (i32) -> ()
    cf.br ^bb89
  ^bb91:  // 2 preds: ^bb89, ^bb92
    %443 = llvm.getelementptr %440[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %444 = llvm.getelementptr %440[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %445 = llvm.getelementptr %440[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %446 = llvm.load %443 : !llvm.ptr -> !llvm.ptr
    %447 = llvm.load %445 : !llvm.ptr -> !llvm.ptr
    %448 = llvm.ptrtoint %446 : !llvm.ptr to i64
    %c0_i64_130 = arith.constant 0 : i64
    %449 = arith.cmpi eq, %448, %c0_i64_130 : i64
    cf.cond_br %449, ^bb94, ^bb93
  ^bb92:  // pred: ^bb89
    %c4_i32_131 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_131) : (i32) -> ()
    cf.br ^bb91
  ^bb93:  // 2 preds: ^bb91, ^bb94
    %450 = llvm.load %444 : !llvm.ptr -> i32
    %451 = arith.cmpi ne, %17, %450 : i32
    cf.cond_br %451, ^bb96, ^bb95
  ^bb94:  // pred: ^bb91
    %c3_i32_132 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_132) : (i32) -> ()
    cf.br ^bb93
  ^bb95:  // 2 preds: ^bb93, ^bb96
    %452 = llvm.call %446(%447, %430, %431, %432) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_133 = arith.constant 0 : i32
    %453 = arith.cmpi ne, %452, %c0_i32_133 : i32
    cf.cond_br %453, ^bb24, ^bb97
  ^bb96:  // pred: ^bb93
    %c5_i32_134 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_134) : (i32) -> ()
    cf.br ^bb95
  ^bb97:  // pred: ^bb95
    %c0_i32_135 = arith.constant 0 : i32
    llvm.store %c0_i32_135, %1 : i32, !llvm.ptr
    cf.br ^bb99
  ^bb98:  // pred: ^bb110
    %454 = llvm.load %1 : !llvm.ptr -> i32
    %c-1_i32_136 = arith.constant -1 : i32
    %455 = arith.addi %454, %c-1_i32_136 : i32
    %456 = llvm.load %6 : !llvm.ptr -> i32
    %457 = arith.cmpi ult, %455, %456 : i32
    %458 = arith.extui %457 : i1 to i32
    cf.br ^bb2(%458 : i32)
  ^bb99:  // 2 preds: ^bb97, ^bb108
    %459 = llvm.load %6 : !llvm.ptr -> i32
    %460 = llvm.load %1 : !llvm.ptr -> i32
    %461 = arith.cmpi eq, %459, %460 : i32
    %462 = arith.extui %461 : i1 to i32
    %c0_i32_137 = arith.constant 0 : i32
    %463 = arith.cmpi eq, %462, %c0_i32_137 : i32
    %464 = arith.extui %463 : i1 to i32
    %c0_i32_138 = arith.constant 0 : i32
    %465 = arith.cmpi ne, %464, %c0_i32_138 : i32
    cf.cond_br %465, ^bb100, ^bb101
  ^bb100:  // pred: ^bb99
    %466 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_139 = arith.constant 1 : i32
    %467 = arith.addi %466, %c1_i32_139 : i32
    llvm.store %467, %1 : i32, !llvm.ptr
    %468 = llvm.load %10 : !llvm.ptr -> i32
    %469 = llvm.load %9 : !llvm.ptr -> i32
    %470 = llvm.load %12 : !llvm.ptr -> i32
    %c16_i64_140 = arith.constant 16 : i64
    %471 = arith.extui %470 : i32 to i64
    %472 = arith.addi %471, %c16_i64_140 : i64
    %473 = llvm.getelementptr %15[%472] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %474 = llvm.load volatile %473 {alignment = 1 : i64} : !llvm.ptr -> i32
    %475 = arith.cmpi ult, %474, %42 : i32
    cf.cond_br %475, ^bb102, ^bb103
  ^bb101:  // pred: ^bb99
    %476 = llvm.load %6 : !llvm.ptr -> i32
    %477 = llvm.load %6 : !llvm.ptr -> i32
    %478 = arith.cmpi ult, %476, %477 : i32
    %479 = arith.extui %478 : i1 to i32
    cf.br ^bb2(%479 : i32)
  ^bb102:  // 2 preds: ^bb100, ^bb103
    %480 = llvm.getelementptr inbounds %40[%474] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %481 = llvm.load %480 : !llvm.ptr -> !llvm.ptr
    %482 = llvm.ptrtoint %481 : !llvm.ptr to i64
    %c0_i64_141 = arith.constant 0 : i64
    %483 = arith.cmpi eq, %482, %c0_i64_141 : i64
    cf.cond_br %483, ^bb105, ^bb104
  ^bb103:  // pred: ^bb100
    %c3_i32_142 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_142) : (i32) -> ()
    cf.br ^bb102
  ^bb104:  // 2 preds: ^bb102, ^bb105
    %484 = llvm.getelementptr %481[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %485 = llvm.getelementptr %481[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %486 = llvm.getelementptr %481[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %487 = llvm.load %484 : !llvm.ptr -> !llvm.ptr
    %488 = llvm.load %486 : !llvm.ptr -> !llvm.ptr
    %489 = llvm.ptrtoint %487 : !llvm.ptr to i64
    %c0_i64_143 = arith.constant 0 : i64
    %490 = arith.cmpi eq, %489, %c0_i64_143 : i64
    cf.cond_br %490, ^bb107, ^bb106
  ^bb105:  // pred: ^bb102
    %c4_i32_144 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_144) : (i32) -> ()
    cf.br ^bb104
  ^bb106:  // 2 preds: ^bb104, ^bb107
    %491 = llvm.load %485 : !llvm.ptr -> i32
    %492 = arith.cmpi ne, %27, %491 : i32
    cf.cond_br %492, ^bb109, ^bb108
  ^bb107:  // pred: ^bb104
    %c3_i32_145 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_145) : (i32) -> ()
    cf.br ^bb106
  ^bb108:  // 2 preds: ^bb106, ^bb109
    %493 = llvm.call %487(%488, %468, %469) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_146 = arith.constant 0 : i32
    %494 = arith.cmpi eq, %493, %c0_i32_146 : i32
    %495 = arith.extui %494 : i1 to i32
    %c0_i32_147 = arith.constant 0 : i32
    %496 = arith.cmpi ne, %495, %c0_i32_147 : i32
    cf.cond_br %496, ^bb99, ^bb110
  ^bb109:  // pred: ^bb106
    %c5_i32_148 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_148) : (i32) -> ()
    cf.br ^bb108
  ^bb110:  // pred: ^bb108
    cf.br ^bb98
  }
  func.func @f183(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c1051124_i32 = arith.constant 1051124 : i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = call @f164(%arg0, %2, %c1051124_i32, %3) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%4 : i32)
  ^bb2(%5: i32):  // pred: ^bb1
    return %5 : i32
  }
  func.func @f184(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %10 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %10[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %14 = llvm.load %0 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %15 = arith.addi %14, %c3_i32 : i32
    %c-4_i32 = arith.constant -4 : i32
    %16 = arith.andi %15, %c-4_i32 : i32
    llvm.store %16, %2 : i32, !llvm.ptr
    %17 = llvm.load %0 : !llvm.ptr -> i32
    %18 = arith.subi %16, %17 : i32
    llvm.store %18, %3 : i32, !llvm.ptr
    %19 = arith.cmpi ult, %13, %18 : i32
    %20 = arith.extui %19 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %21 = arith.cmpi ne, %20, %c0_i32_9 : i32
    cf.cond_br %21, ^bb4, ^bb5
  ^bb2(%22: i32):  // 3 preds: ^bb3, ^bb32, ^bb36
    return %22 : i32
  ^bb3:  // 3 preds: ^bb24, ^bb37, ^bb44
    %23 = llvm.load %8 : !llvm.ptr -> i32
    cf.br ^bb2(%23 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %25 = arith.cmpi ne, %24, %c0_i32_10 : i32
    cf.cond_br %25, ^bb35, ^bb36
  ^bb5:  // pred: ^bb1
    %26 = llvm.load %1 : !llvm.ptr -> i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %28 = arith.subi %26, %27 : i32
    llvm.store %28, %4 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %29 = arith.cmpi ult, %28, %c4_i32 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_11 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_11 : i32
    cf.cond_br %31, ^bb4, ^bb6
  ^bb6:  // pred: ^bb5
    %32 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_12 = arith.constant 3 : i32
    %33 = arith.andi %32, %c3_i32_12 : i32
    llvm.store %33, %5 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %6 : i32, !llvm.ptr
    %c0_i32_14 = arith.constant 0 : i32
    llvm.store %c0_i32_14, %1 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %36 = arith.cmpi eq, %34, %35 : i32
    %37 = arith.extui %36 : i1 to i32
    llvm.store %37, %7 : i32, !llvm.ptr
    %c0_i32_15 = arith.constant 0 : i32
    %38 = arith.cmpi ne, %37, %c0_i32_15 : i32
    cf.cond_br %38, ^bb7, ^bb8
  ^bb7:  // 3 preds: ^bb6, ^bb9, ^bb16
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %40 = llvm.load %3 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %42 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i32_16 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_16 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_17 : i32
    cf.cond_br %45, ^bb19, ^bb20
  ^bb8:  // pred: ^bb6
    %c0_i32_18 = arith.constant 0 : i32
    llvm.store %c0_i32_18, %1 : i32, !llvm.ptr
    %46 = llvm.load %0 : !llvm.ptr -> i32
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %48 = arith.subi %46, %47 : i32
    llvm.store %48, %8 : i32, !llvm.ptr
    %c-4_i32_19 = arith.constant -4 : i32
    %49 = arith.cmpi ule, %48, %c-4_i32_19 : i32
    %50 = arith.extui %49 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %51 = arith.cmpi ne, %50, %c0_i32_20 : i32
    cf.cond_br %51, ^bb10, ^bb11
  ^bb9:  // 2 preds: ^bb11, ^bb12
    %52 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %53 = arith.cmpi ne, %52, %c0_i32_21 : i32
    cf.cond_br %53, ^bb7, ^bb15
  ^bb10:  // pred: ^bb8
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %9 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb11:  // pred: ^bb8
    %c0_i32_23 = arith.constant 0 : i32
    llvm.store %c0_i32_23, %9 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb12:  // pred: ^bb14
    cf.br ^bb9
  ^bb13:  // 2 preds: ^bb10, ^bb13
    %54 = llvm.load %1 : !llvm.ptr -> i32
    %55 = llvm.load %0 : !llvm.ptr -> i32
    %56 = llvm.load %9 : !llvm.ptr -> i32
    %57 = arith.addi %55, %56 : i32
    llvm.store %57, %2 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c0_i64 : i64
    %60 = llvm.getelementptr %12[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i8
    %62 = arith.extsi %61 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %63 = arith.cmpi sgt, %62, %c-65_i32 : i32
    %64 = arith.extui %63 : i1 to i32
    %65 = arith.addi %54, %64 : i32
    %66 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %67 = arith.addi %66, %c1_i32_24 : i32
    %c0_i64_25 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_25 : i64
    %70 = llvm.getelementptr %12[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i8
    %72 = arith.extsi %71 : i8 to i32
    %c-65_i32_26 = arith.constant -65 : i32
    %73 = arith.cmpi sgt, %72, %c-65_i32_26 : i32
    %74 = arith.extui %73 : i1 to i32
    %75 = arith.addi %65, %74 : i32
    %76 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %77 = arith.addi %76, %c2_i32 : i32
    %c0_i64_27 = arith.constant 0 : i64
    %78 = arith.extui %77 : i32 to i64
    %79 = arith.addi %78, %c0_i64_27 : i64
    %80 = llvm.getelementptr %12[%79] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %81 = llvm.load volatile %80 {alignment = 1 : i64} : !llvm.ptr -> i8
    %82 = arith.extsi %81 : i8 to i32
    %c-65_i32_28 = arith.constant -65 : i32
    %83 = arith.cmpi sgt, %82, %c-65_i32_28 : i32
    %84 = arith.extui %83 : i1 to i32
    %85 = arith.addi %75, %84 : i32
    %86 = llvm.load %2 : !llvm.ptr -> i32
    %c3_i32_29 = arith.constant 3 : i32
    %87 = arith.addi %86, %c3_i32_29 : i32
    %c0_i64_30 = arith.constant 0 : i64
    %88 = arith.extui %87 : i32 to i64
    %89 = arith.addi %88, %c0_i64_30 : i64
    %90 = llvm.getelementptr %12[%89] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %91 = llvm.load volatile %90 {alignment = 1 : i64} : !llvm.ptr -> i8
    %92 = arith.extsi %91 : i8 to i32
    %c-65_i32_31 = arith.constant -65 : i32
    %93 = arith.cmpi sgt, %92, %c-65_i32_31 : i32
    %94 = arith.extui %93 : i1 to i32
    %95 = arith.addi %85, %94 : i32
    llvm.store %95, %1 : i32, !llvm.ptr
    %96 = llvm.load %9 : !llvm.ptr -> i32
    %c4_i32_32 = arith.constant 4 : i32
    %97 = arith.addi %96, %c4_i32_32 : i32
    llvm.store %97, %9 : i32, !llvm.ptr
    %c0_i32_33 = arith.constant 0 : i32
    %98 = arith.cmpi ne, %97, %c0_i32_33 : i32
    cf.cond_br %98, ^bb13, ^bb14
  ^bb14:  // pred: ^bb13
    cf.br ^bb12
  ^bb15:  // pred: ^bb9
    %99 = llvm.load %0 : !llvm.ptr -> i32
    %100 = llvm.load %9 : !llvm.ptr -> i32
    %101 = arith.addi %99, %100 : i32
    llvm.store %101, %2 : i32, !llvm.ptr
    cf.br ^bb17
  ^bb16:  // pred: ^bb18
    cf.br ^bb7
  ^bb17:  // 2 preds: ^bb15, ^bb17
    %102 = llvm.load %1 : !llvm.ptr -> i32
    %103 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_34 : i64
    %106 = llvm.getelementptr %12[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i8
    %108 = arith.extsi %107 : i8 to i32
    %c-65_i32_35 = arith.constant -65 : i32
    %109 = arith.cmpi sgt, %108, %c-65_i32_35 : i32
    %110 = arith.extui %109 : i1 to i32
    %111 = arith.addi %102, %110 : i32
    llvm.store %111, %1 : i32, !llvm.ptr
    %112 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_36 = arith.constant 1 : i32
    %113 = arith.addi %112, %c1_i32_36 : i32
    llvm.store %113, %2 : i32, !llvm.ptr
    %114 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_37 = arith.constant 1 : i32
    %115 = arith.addi %114, %c1_i32_37 : i32
    llvm.store %115, %8 : i32, !llvm.ptr
    %c0_i32_38 = arith.constant 0 : i32
    %116 = arith.cmpi ne, %115, %c0_i32_38 : i32
    cf.cond_br %116, ^bb17, ^bb18
  ^bb18:  // pred: ^bb17
    cf.br ^bb16
  ^bb19:  // 4 preds: ^bb7, ^bb20, ^bb21, ^bb22
    %117 = llvm.load %4 : !llvm.ptr -> i32
    %c2_i32_39 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %118 = arith.cmpi ule, %c2_i32_39, %c31_i32 : i32
    %119 = scf.if %118 -> (i32) {
      %421 = arith.shrui %117, %c2_i32_39 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %119, %3 : i32, !llvm.ptr
    %120 = llvm.load %6 : !llvm.ptr -> i32
    %121 = llvm.load %1 : !llvm.ptr -> i32
    %122 = arith.addi %120, %121 : i32
    llvm.store %122, %8 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb20:  // pred: ^bb7
    %123 = llvm.load %9 : !llvm.ptr -> i32
    %124 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_40 = arith.constant -4 : i32
    %125 = arith.andi %124, %c-4_i32_40 : i32
    %126 = arith.addi %123, %125 : i32
    llvm.store %126, %2 : i32, !llvm.ptr
    %c0_i64_41 = arith.constant 0 : i64
    %127 = arith.extui %126 : i32 to i64
    %128 = arith.addi %127, %c0_i64_41 : i64
    %129 = llvm.getelementptr %12[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %130 = llvm.load volatile %129 {alignment = 1 : i64} : !llvm.ptr -> i8
    %131 = arith.extsi %130 : i8 to i32
    %c-65_i32_42 = arith.constant -65 : i32
    %132 = arith.cmpi sgt, %131, %c-65_i32_42 : i32
    %133 = arith.extui %132 : i1 to i32
    llvm.store %133, %6 : i32, !llvm.ptr
    %134 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_43 = arith.constant 1 : i32
    %135 = arith.cmpi eq, %134, %c1_i32_43 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_44 : i32
    cf.cond_br %137, ^bb19, ^bb21
  ^bb21:  // pred: ^bb20
    %138 = llvm.load %6 : !llvm.ptr -> i32
    %139 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %140 = arith.extui %139 : i32 to i64
    %141 = arith.addi %140, %c1_i64 : i64
    %142 = llvm.getelementptr %12[%141] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %143 = llvm.load volatile %142 {alignment = 1 : i64} : !llvm.ptr -> i8
    %144 = arith.extsi %143 : i8 to i32
    %c-65_i32_45 = arith.constant -65 : i32
    %145 = arith.cmpi sgt, %144, %c-65_i32_45 : i32
    %146 = arith.extui %145 : i1 to i32
    %147 = arith.addi %138, %146 : i32
    llvm.store %147, %6 : i32, !llvm.ptr
    %148 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32_46 = arith.constant 2 : i32
    %149 = arith.cmpi eq, %148, %c2_i32_46 : i32
    %150 = arith.extui %149 : i1 to i32
    %c0_i32_47 = arith.constant 0 : i32
    %151 = arith.cmpi ne, %150, %c0_i32_47 : i32
    cf.cond_br %151, ^bb19, ^bb22
  ^bb22:  // pred: ^bb21
    %152 = llvm.load %6 : !llvm.ptr -> i32
    %153 = llvm.load %2 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c2_i64 : i64
    %156 = llvm.getelementptr %12[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load volatile %156 {alignment = 1 : i64} : !llvm.ptr -> i8
    %158 = arith.extsi %157 : i8 to i32
    %c-65_i32_48 = arith.constant -65 : i32
    %159 = arith.cmpi sgt, %158, %c-65_i32_48 : i32
    %160 = arith.extui %159 : i1 to i32
    %161 = arith.addi %152, %160 : i32
    llvm.store %161, %6 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb23:  // pred: ^bb31
    %162 = llvm.load %4 : !llvm.ptr -> i32
    %163 = llvm.load %6 : !llvm.ptr -> i32
    %c252_i32 = arith.constant 252 : i32
    %164 = arith.andi %163, %c252_i32 : i32
    %c2_i32_49 = arith.constant 2 : i32
    %c31_i32_50 = arith.constant 31 : i32
    %165 = arith.cmpi ule, %c2_i32_49, %c31_i32_50 : i32
    %166 = scf.if %165 -> (i32) {
      %421 = arith.shli %164, %c2_i32_49 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %167 = arith.addi %162, %166 : i32
    llvm.store %167, %2 : i32, !llvm.ptr
    %c0_i64_51 = arith.constant 0 : i64
    %168 = arith.extui %167 : i32 to i64
    %169 = arith.addi %168, %c0_i64_51 : i64
    %170 = llvm.getelementptr %12[%169] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %171 = llvm.load volatile %170 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %171, %1 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %172 = arith.xori %171, %c-1_i32 : i32
    %c7_i32 = arith.constant 7 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %173 = arith.cmpi ule, %c7_i32, %c31_i32_52 : i32
    %174 = scf.if %173 -> (i32) {
      %421 = arith.shrui %172, %c7_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %175 = llvm.load %1 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32_53 = arith.constant 31 : i32
    %176 = arith.cmpi ule, %c6_i32, %c31_i32_53 : i32
    %177 = scf.if %176 -> (i32) {
      %421 = arith.shrui %175, %c6_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %178 = arith.ori %174, %177 : i32
    %c16843009_i32 = arith.constant 16843009 : i32
    %179 = arith.andi %178, %c16843009_i32 : i32
    llvm.store %179, %1 : i32, !llvm.ptr
    %180 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_54 = arith.constant 1 : i32
    %181 = arith.cmpi eq, %180, %c1_i32_54 : i32
    %182 = arith.extui %181 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %183 = arith.cmpi ne, %182, %c0_i32_55 : i32
    cf.cond_br %183, ^bb32, ^bb33
  ^bb24:  // 2 preds: ^bb19, ^bb26
    %184 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %184, %4 : i32, !llvm.ptr
    %185 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_56 = arith.constant 0 : i32
    %186 = arith.cmpi eq, %185, %c0_i32_56 : i32
    %187 = arith.extui %186 : i1 to i32
    %c0_i32_57 = arith.constant 0 : i32
    %188 = arith.cmpi ne, %187, %c0_i32_57 : i32
    cf.cond_br %188, ^bb3, ^bb25
  ^bb25:  // pred: ^bb24
    %189 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32 = arith.constant 192 : i32
    %190 = llvm.load %3 : !llvm.ptr -> i32
    %c192_i32_58 = arith.constant 192 : i32
    %191 = arith.cmpi ult, %190, %c192_i32_58 : i32
    %192 = arith.extui %191 : i1 to i32
    %c0_i32_59 = arith.constant 0 : i32
    %193 = arith.cmpi ne, %192, %c0_i32_59 : i32
    %194 = arith.select %193, %189, %c192_i32 : i32
    llvm.store %194, %6 : i32, !llvm.ptr
    %c3_i32_60 = arith.constant 3 : i32
    %195 = arith.andi %194, %c3_i32_60 : i32
    llvm.store %195, %7 : i32, !llvm.ptr
    %196 = llvm.load %6 : !llvm.ptr -> i32
    %c2_i32_61 = arith.constant 2 : i32
    %c31_i32_62 = arith.constant 31 : i32
    %197 = arith.cmpi ule, %c2_i32_61, %c31_i32_62 : i32
    %198 = scf.if %197 -> (i32) {
      %421 = arith.shli %196, %c2_i32_61 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    llvm.store %198, %5 : i32, !llvm.ptr
    %c0_i32_63 = arith.constant 0 : i32
    llvm.store %c0_i32_63, %2 : i32, !llvm.ptr
    %199 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_64 = arith.constant 4 : i32
    %200 = arith.cmpi ult, %199, %c4_i32_64 : i32
    %201 = arith.extui %200 : i1 to i32
    %c0_i32_65 = arith.constant 0 : i32
    %202 = arith.cmpi ne, %201, %c0_i32_65 : i32
    cf.cond_br %202, ^bb26, ^bb27
  ^bb26:  // 2 preds: ^bb25, ^bb28
    %203 = llvm.load %3 : !llvm.ptr -> i32
    %204 = llvm.load %6 : !llvm.ptr -> i32
    %205 = arith.subi %203, %204 : i32
    llvm.store %205, %3 : i32, !llvm.ptr
    %206 = llvm.load %4 : !llvm.ptr -> i32
    %207 = llvm.load %5 : !llvm.ptr -> i32
    %208 = arith.addi %206, %207 : i32
    llvm.store %208, %9 : i32, !llvm.ptr
    %209 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_66 = arith.constant 31 : i32
    %210 = arith.cmpi ule, %c8_i32, %c31_i32_66 : i32
    %211 = scf.if %210 -> (i32) {
      %421 = arith.shrui %209, %c8_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %c16711935_i32 = arith.constant 16711935 : i32
    %212 = arith.andi %211, %c16711935_i32 : i32
    %213 = llvm.load %2 : !llvm.ptr -> i32
    %c16711935_i32_67 = arith.constant 16711935 : i32
    %214 = arith.andi %213, %c16711935_i32_67 : i32
    %215 = arith.addi %212, %214 : i32
    %c65537_i32 = arith.constant 65537 : i32
    %216 = arith.muli %215, %c65537_i32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c31_i32_68 = arith.constant 31 : i32
    %217 = arith.cmpi ule, %c16_i32, %c31_i32_68 : i32
    %218 = scf.if %217 -> (i32) {
      %421 = arith.shrui %216, %c16_i32 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %219 = llvm.load %8 : !llvm.ptr -> i32
    %220 = arith.addi %218, %219 : i32
    llvm.store %220, %8 : i32, !llvm.ptr
    %221 = llvm.load %7 : !llvm.ptr -> i32
    %c0_i32_69 = arith.constant 0 : i32
    %222 = arith.cmpi eq, %221, %c0_i32_69 : i32
    %223 = arith.extui %222 : i1 to i32
    %c0_i32_70 = arith.constant 0 : i32
    %224 = arith.cmpi ne, %223, %c0_i32_70 : i32
    cf.cond_br %224, ^bb24, ^bb31
  ^bb27:  // pred: ^bb25
    %225 = llvm.load %4 : !llvm.ptr -> i32
    %226 = llvm.load %5 : !llvm.ptr -> i32
    %c1008_i32 = arith.constant 1008 : i32
    %227 = arith.andi %226, %c1008_i32 : i32
    %228 = arith.addi %225, %227 : i32
    llvm.store %228, %0 : i32, !llvm.ptr
    %c0_i32_71 = arith.constant 0 : i32
    llvm.store %c0_i32_71, %2 : i32, !llvm.ptr
    %229 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %229, %1 : i32, !llvm.ptr
    cf.br ^bb29
  ^bb28:  // pred: ^bb30
    cf.br ^bb26
  ^bb29:  // 2 preds: ^bb27, ^bb29
    %230 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %231 = arith.extui %230 : i32 to i64
    %232 = arith.addi %231, %c12_i64 : i64
    %233 = llvm.getelementptr %12[%232] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %234 = llvm.load volatile %233 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %234, %9 : i32, !llvm.ptr
    %c-1_i32_72 = arith.constant -1 : i32
    %235 = arith.xori %234, %c-1_i32_72 : i32
    %c7_i32_73 = arith.constant 7 : i32
    %c31_i32_74 = arith.constant 31 : i32
    %236 = arith.cmpi ule, %c7_i32_73, %c31_i32_74 : i32
    %237 = scf.if %236 -> (i32) {
      %421 = arith.shrui %235, %c7_i32_73 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %238 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_75 = arith.constant 6 : i32
    %c31_i32_76 = arith.constant 31 : i32
    %239 = arith.cmpi ule, %c6_i32_75, %c31_i32_76 : i32
    %240 = scf.if %239 -> (i32) {
      %421 = arith.shrui %238, %c6_i32_75 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %241 = arith.ori %237, %240 : i32
    %c16843009_i32_77 = arith.constant 16843009 : i32
    %242 = arith.andi %241, %c16843009_i32_77 : i32
    %243 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c8_i64 : i64
    %246 = llvm.getelementptr %12[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load volatile %246 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %247, %9 : i32, !llvm.ptr
    %c-1_i32_78 = arith.constant -1 : i32
    %248 = arith.xori %247, %c-1_i32_78 : i32
    %c7_i32_79 = arith.constant 7 : i32
    %c31_i32_80 = arith.constant 31 : i32
    %249 = arith.cmpi ule, %c7_i32_79, %c31_i32_80 : i32
    %250 = scf.if %249 -> (i32) {
      %421 = arith.shrui %248, %c7_i32_79 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %251 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_81 = arith.constant 6 : i32
    %c31_i32_82 = arith.constant 31 : i32
    %252 = arith.cmpi ule, %c6_i32_81, %c31_i32_82 : i32
    %253 = scf.if %252 -> (i32) {
      %421 = arith.shrui %251, %c6_i32_81 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %254 = arith.ori %250, %253 : i32
    %c16843009_i32_83 = arith.constant 16843009 : i32
    %255 = arith.andi %254, %c16843009_i32_83 : i32
    %256 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %257 = arith.extui %256 : i32 to i64
    %258 = arith.addi %257, %c4_i64 : i64
    %259 = llvm.getelementptr %12[%258] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %260 = llvm.load volatile %259 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %260, %9 : i32, !llvm.ptr
    %c-1_i32_84 = arith.constant -1 : i32
    %261 = arith.xori %260, %c-1_i32_84 : i32
    %c7_i32_85 = arith.constant 7 : i32
    %c31_i32_86 = arith.constant 31 : i32
    %262 = arith.cmpi ule, %c7_i32_85, %c31_i32_86 : i32
    %263 = scf.if %262 -> (i32) {
      %421 = arith.shrui %261, %c7_i32_85 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %264 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_87 = arith.constant 6 : i32
    %c31_i32_88 = arith.constant 31 : i32
    %265 = arith.cmpi ule, %c6_i32_87, %c31_i32_88 : i32
    %266 = scf.if %265 -> (i32) {
      %421 = arith.shrui %264, %c6_i32_87 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %267 = arith.ori %263, %266 : i32
    %c16843009_i32_89 = arith.constant 16843009 : i32
    %268 = arith.andi %267, %c16843009_i32_89 : i32
    %269 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_90 = arith.constant 0 : i64
    %270 = arith.extui %269 : i32 to i64
    %271 = arith.addi %270, %c0_i64_90 : i64
    %272 = llvm.getelementptr %12[%271] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %273 = llvm.load volatile %272 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %273, %9 : i32, !llvm.ptr
    %c-1_i32_91 = arith.constant -1 : i32
    %274 = arith.xori %273, %c-1_i32_91 : i32
    %c7_i32_92 = arith.constant 7 : i32
    %c31_i32_93 = arith.constant 31 : i32
    %275 = arith.cmpi ule, %c7_i32_92, %c31_i32_93 : i32
    %276 = scf.if %275 -> (i32) {
      %421 = arith.shrui %274, %c7_i32_92 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %277 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_94 = arith.constant 6 : i32
    %c31_i32_95 = arith.constant 31 : i32
    %278 = arith.cmpi ule, %c6_i32_94, %c31_i32_95 : i32
    %279 = scf.if %278 -> (i32) {
      %421 = arith.shrui %277, %c6_i32_94 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %280 = arith.ori %276, %279 : i32
    %c16843009_i32_96 = arith.constant 16843009 : i32
    %281 = arith.andi %280, %c16843009_i32_96 : i32
    %282 = llvm.load %2 : !llvm.ptr -> i32
    %283 = arith.addi %281, %282 : i32
    %284 = arith.addi %268, %283 : i32
    %285 = arith.addi %255, %284 : i32
    %286 = arith.addi %242, %285 : i32
    llvm.store %286, %2 : i32, !llvm.ptr
    %287 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32_97 = arith.constant 16 : i32
    %288 = arith.addi %287, %c16_i32_97 : i32
    llvm.store %288, %1 : i32, !llvm.ptr
    %289 = llvm.load %0 : !llvm.ptr -> i32
    %290 = arith.cmpi eq, %288, %289 : i32
    %291 = arith.extui %290 : i1 to i32
    %c0_i32_98 = arith.constant 0 : i32
    %292 = arith.cmpi eq, %291, %c0_i32_98 : i32
    %293 = arith.extui %292 : i1 to i32
    %c0_i32_99 = arith.constant 0 : i32
    %294 = arith.cmpi ne, %293, %c0_i32_99 : i32
    cf.cond_br %294, ^bb29, ^bb30
  ^bb30:  // pred: ^bb29
    cf.br ^bb28
  ^bb31:  // pred: ^bb26
    cf.br ^bb23
  ^bb32:  // 3 preds: ^bb23, ^bb33, ^bb34
    %295 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32_100 = arith.constant 8 : i32
    %c31_i32_101 = arith.constant 31 : i32
    %296 = arith.cmpi ule, %c8_i32_100, %c31_i32_101 : i32
    %297 = scf.if %296 -> (i32) {
      %421 = arith.shrui %295, %c8_i32_100 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %c459007_i32 = arith.constant 459007 : i32
    %298 = arith.andi %297, %c459007_i32 : i32
    %299 = llvm.load %1 : !llvm.ptr -> i32
    %c16711935_i32_102 = arith.constant 16711935 : i32
    %300 = arith.andi %299, %c16711935_i32_102 : i32
    %301 = arith.addi %298, %300 : i32
    %c65537_i32_103 = arith.constant 65537 : i32
    %302 = arith.muli %301, %c65537_i32_103 : i32
    %c16_i32_104 = arith.constant 16 : i32
    %c31_i32_105 = arith.constant 31 : i32
    %303 = arith.cmpi ule, %c16_i32_104, %c31_i32_105 : i32
    %304 = scf.if %303 -> (i32) {
      %421 = arith.shrui %302, %c16_i32_104 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %305 = llvm.load %8 : !llvm.ptr -> i32
    %306 = arith.addi %304, %305 : i32
    cf.br ^bb2(%306 : i32)
  ^bb33:  // pred: ^bb23
    %307 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64_106 = arith.constant 4 : i64
    %308 = arith.extui %307 : i32 to i64
    %309 = arith.addi %308, %c4_i64_106 : i64
    %310 = llvm.getelementptr %12[%309] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %311 = llvm.load volatile %310 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %311, %9 : i32, !llvm.ptr
    %c-1_i32_107 = arith.constant -1 : i32
    %312 = arith.xori %311, %c-1_i32_107 : i32
    %c7_i32_108 = arith.constant 7 : i32
    %c31_i32_109 = arith.constant 31 : i32
    %313 = arith.cmpi ule, %c7_i32_108, %c31_i32_109 : i32
    %314 = scf.if %313 -> (i32) {
      %421 = arith.shrui %312, %c7_i32_108 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %315 = llvm.load %9 : !llvm.ptr -> i32
    %c6_i32_110 = arith.constant 6 : i32
    %c31_i32_111 = arith.constant 31 : i32
    %316 = arith.cmpi ule, %c6_i32_110, %c31_i32_111 : i32
    %317 = scf.if %316 -> (i32) {
      %421 = arith.shrui %315, %c6_i32_110 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %318 = arith.ori %314, %317 : i32
    %c16843009_i32_112 = arith.constant 16843009 : i32
    %319 = arith.andi %318, %c16843009_i32_112 : i32
    %320 = llvm.load %1 : !llvm.ptr -> i32
    %321 = arith.addi %319, %320 : i32
    llvm.store %321, %1 : i32, !llvm.ptr
    %322 = llvm.load %7 : !llvm.ptr -> i32
    %c2_i32_113 = arith.constant 2 : i32
    %323 = arith.cmpi eq, %322, %c2_i32_113 : i32
    %324 = arith.extui %323 : i1 to i32
    %c0_i32_114 = arith.constant 0 : i32
    %325 = arith.cmpi ne, %324, %c0_i32_114 : i32
    cf.cond_br %325, ^bb32, ^bb34
  ^bb34:  // pred: ^bb33
    %326 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64_115 = arith.constant 8 : i64
    %327 = arith.extui %326 : i32 to i64
    %328 = arith.addi %327, %c8_i64_115 : i64
    %329 = llvm.getelementptr %12[%328] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %330 = llvm.load volatile %329 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %330, %2 : i32, !llvm.ptr
    %c-1_i32_116 = arith.constant -1 : i32
    %331 = arith.xori %330, %c-1_i32_116 : i32
    %c7_i32_117 = arith.constant 7 : i32
    %c31_i32_118 = arith.constant 31 : i32
    %332 = arith.cmpi ule, %c7_i32_117, %c31_i32_118 : i32
    %333 = scf.if %332 -> (i32) {
      %421 = arith.shrui %331, %c7_i32_117 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %334 = llvm.load %2 : !llvm.ptr -> i32
    %c6_i32_119 = arith.constant 6 : i32
    %c31_i32_120 = arith.constant 31 : i32
    %335 = arith.cmpi ule, %c6_i32_119, %c31_i32_120 : i32
    %336 = scf.if %335 -> (i32) {
      %421 = arith.shrui %334, %c6_i32_119 : i32
      scf.yield %421 : i32
    } else {
      %c0_i32_152 = arith.constant 0 : i32
      scf.yield %c0_i32_152 : i32
    }
    %337 = arith.ori %333, %336 : i32
    %c16843009_i32_121 = arith.constant 16843009 : i32
    %338 = arith.andi %337, %c16843009_i32_121 : i32
    %339 = llvm.load %1 : !llvm.ptr -> i32
    %340 = arith.addi %338, %339 : i32
    llvm.store %340, %1 : i32, !llvm.ptr
    cf.br ^bb32
  ^bb35:  // pred: ^bb4
    %341 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_122 = arith.constant 3 : i32
    %342 = arith.andi %341, %c3_i32_122 : i32
    llvm.store %342, %9 : i32, !llvm.ptr
    %343 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_123 = arith.constant 4 : i32
    %344 = arith.cmpi uge, %343, %c4_i32_123 : i32
    %345 = arith.extui %344 : i1 to i32
    %c0_i32_124 = arith.constant 0 : i32
    %346 = arith.cmpi ne, %345, %c0_i32_124 : i32
    cf.cond_br %346, ^bb38, ^bb39
  ^bb36:  // pred: ^bb4
    %c0_i32_125 = arith.constant 0 : i32
    cf.br ^bb2(%c0_i32_125 : i32)
  ^bb37:  // 2 preds: ^bb39, ^bb40
    %347 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_126 = arith.constant 0 : i32
    %348 = arith.cmpi eq, %347, %c0_i32_126 : i32
    %349 = arith.extui %348 : i1 to i32
    %c0_i32_127 = arith.constant 0 : i32
    %350 = arith.cmpi ne, %349, %c0_i32_127 : i32
    cf.cond_br %350, ^bb3, ^bb43
  ^bb38:  // pred: ^bb35
    %351 = llvm.load %1 : !llvm.ptr -> i32
    %c-4_i32_128 = arith.constant -4 : i32
    %352 = arith.andi %351, %c-4_i32_128 : i32
    llvm.store %352, %3 : i32, !llvm.ptr
    %c0_i32_129 = arith.constant 0 : i32
    llvm.store %c0_i32_129, %8 : i32, !llvm.ptr
    %c0_i32_130 = arith.constant 0 : i32
    llvm.store %c0_i32_130, %2 : i32, !llvm.ptr
    cf.br ^bb41
  ^bb39:  // pred: ^bb35
    %c0_i32_131 = arith.constant 0 : i32
    llvm.store %c0_i32_131, %8 : i32, !llvm.ptr
    %c0_i32_132 = arith.constant 0 : i32
    llvm.store %c0_i32_132, %2 : i32, !llvm.ptr
    cf.br ^bb37
  ^bb40:  // pred: ^bb42
    cf.br ^bb37
  ^bb41:  // 2 preds: ^bb38, ^bb41
    %353 = llvm.load %8 : !llvm.ptr -> i32
    %354 = llvm.load %0 : !llvm.ptr -> i32
    %355 = llvm.load %2 : !llvm.ptr -> i32
    %356 = arith.addi %354, %355 : i32
    llvm.store %356, %1 : i32, !llvm.ptr
    %c0_i64_133 = arith.constant 0 : i64
    %357 = arith.extui %356 : i32 to i64
    %358 = arith.addi %357, %c0_i64_133 : i64
    %359 = llvm.getelementptr %12[%358] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %360 = llvm.load volatile %359 {alignment = 1 : i64} : !llvm.ptr -> i8
    %361 = arith.extsi %360 : i8 to i32
    %c-65_i32_134 = arith.constant -65 : i32
    %362 = arith.cmpi sgt, %361, %c-65_i32_134 : i32
    %363 = arith.extui %362 : i1 to i32
    %364 = arith.addi %353, %363 : i32
    %365 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_135 = arith.constant 1 : i32
    %366 = arith.addi %365, %c1_i32_135 : i32
    %c0_i64_136 = arith.constant 0 : i64
    %367 = arith.extui %366 : i32 to i64
    %368 = arith.addi %367, %c0_i64_136 : i64
    %369 = llvm.getelementptr %12[%368] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %370 = llvm.load volatile %369 {alignment = 1 : i64} : !llvm.ptr -> i8
    %371 = arith.extsi %370 : i8 to i32
    %c-65_i32_137 = arith.constant -65 : i32
    %372 = arith.cmpi sgt, %371, %c-65_i32_137 : i32
    %373 = arith.extui %372 : i1 to i32
    %374 = arith.addi %364, %373 : i32
    %375 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32_138 = arith.constant 2 : i32
    %376 = arith.addi %375, %c2_i32_138 : i32
    %c0_i64_139 = arith.constant 0 : i64
    %377 = arith.extui %376 : i32 to i64
    %378 = arith.addi %377, %c0_i64_139 : i64
    %379 = llvm.getelementptr %12[%378] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %380 = llvm.load volatile %379 {alignment = 1 : i64} : !llvm.ptr -> i8
    %381 = arith.extsi %380 : i8 to i32
    %c-65_i32_140 = arith.constant -65 : i32
    %382 = arith.cmpi sgt, %381, %c-65_i32_140 : i32
    %383 = arith.extui %382 : i1 to i32
    %384 = arith.addi %374, %383 : i32
    %385 = llvm.load %1 : !llvm.ptr -> i32
    %c3_i32_141 = arith.constant 3 : i32
    %386 = arith.addi %385, %c3_i32_141 : i32
    %c0_i64_142 = arith.constant 0 : i64
    %387 = arith.extui %386 : i32 to i64
    %388 = arith.addi %387, %c0_i64_142 : i64
    %389 = llvm.getelementptr %12[%388] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %390 = llvm.load volatile %389 {alignment = 1 : i64} : !llvm.ptr -> i8
    %391 = arith.extsi %390 : i8 to i32
    %c-65_i32_143 = arith.constant -65 : i32
    %392 = arith.cmpi sgt, %391, %c-65_i32_143 : i32
    %393 = arith.extui %392 : i1 to i32
    %394 = arith.addi %384, %393 : i32
    llvm.store %394, %8 : i32, !llvm.ptr
    %395 = llvm.load %3 : !llvm.ptr -> i32
    %396 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_144 = arith.constant 4 : i32
    %397 = arith.addi %396, %c4_i32_144 : i32
    llvm.store %397, %2 : i32, !llvm.ptr
    %398 = arith.cmpi eq, %395, %397 : i32
    %399 = arith.extui %398 : i1 to i32
    %c0_i32_145 = arith.constant 0 : i32
    %400 = arith.cmpi eq, %399, %c0_i32_145 : i32
    %401 = arith.extui %400 : i1 to i32
    %c0_i32_146 = arith.constant 0 : i32
    %402 = arith.cmpi ne, %401, %c0_i32_146 : i32
    cf.cond_br %402, ^bb41, ^bb42
  ^bb42:  // pred: ^bb41
    cf.br ^bb40
  ^bb43:  // pred: ^bb37
    %403 = llvm.load %0 : !llvm.ptr -> i32
    %404 = llvm.load %2 : !llvm.ptr -> i32
    %405 = arith.addi %403, %404 : i32
    llvm.store %405, %1 : i32, !llvm.ptr
    cf.br ^bb45
  ^bb44:  // pred: ^bb46
    cf.br ^bb3
  ^bb45:  // 2 preds: ^bb43, ^bb45
    %406 = llvm.load %8 : !llvm.ptr -> i32
    %407 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_147 = arith.constant 0 : i64
    %408 = arith.extui %407 : i32 to i64
    %409 = arith.addi %408, %c0_i64_147 : i64
    %410 = llvm.getelementptr %12[%409] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %411 = llvm.load volatile %410 {alignment = 1 : i64} : !llvm.ptr -> i8
    %412 = arith.extsi %411 : i8 to i32
    %c-65_i32_148 = arith.constant -65 : i32
    %413 = arith.cmpi sgt, %412, %c-65_i32_148 : i32
    %414 = arith.extui %413 : i1 to i32
    %415 = arith.addi %406, %414 : i32
    llvm.store %415, %8 : i32, !llvm.ptr
    %416 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_149 = arith.constant 1 : i32
    %417 = arith.addi %416, %c1_i32_149 : i32
    llvm.store %417, %1 : i32, !llvm.ptr
    %418 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32_150 = arith.constant -1 : i32
    %419 = arith.addi %418, %c-1_i32_150 : i32
    llvm.store %419, %9 : i32, !llvm.ptr
    %c0_i32_151 = arith.constant 0 : i32
    %420 = arith.cmpi ne, %419, %c0_i32_151 : i32
    cf.cond_br %420, ^bb45, ^bb46
  ^bb46:  // pred: ^bb45
    cf.br ^bb44
  }
  func.func @f185(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> i32
    %11 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.load %12 : !llvm.ptr -> i64
    %15 = arith.trunci %14 : i64 to i32
    %16 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %17 = llvm.load %16 : !llvm.ptr -> i32
    %18 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %12 : !llvm.ptr -> i64
    %20 = arith.trunci %19 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %21 = llvm.load %2 : !llvm.ptr -> i32
    %c1114112_i32 = arith.constant 1114112 : i32
    %22 = arith.cmpi eq, %21, %c1114112_i32 : i32
    %23 = arith.extui %22 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %24 = arith.cmpi ne, %23, %c0_i32_5 : i32
    cf.cond_br %24, ^bb5, ^bb6
  ^bb2(%25: i32):  // 2 preds: ^bb4, ^bb23
    return %25 : i32
  ^bb3:  // pred: ^bb5
    %26 = llvm.load %0 : !llvm.ptr -> i32
    %27 = llvm.load %3 : !llvm.ptr -> i32
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %29 = llvm.load %1 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %30 = arith.extui %29 : i32 to i64
    %31 = arith.addi %30, %c12_i64 : i64
    %32 = llvm.getelementptr %8[%31] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %33 = llvm.load volatile %32 {alignment = 1 : i64} : !llvm.ptr -> i32
    %34 = arith.cmpi ult, %33, %20 : i32
    cf.cond_br %34, ^bb17, ^bb18
  ^bb4:  // 2 preds: ^bb13, ^bb16
    %35 = llvm.load %5 : !llvm.ptr -> i32
    cf.br ^bb2(%35 : i32)
  ^bb5:  // 2 preds: ^bb1, ^bb15
    %36 = llvm.load %3 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_6 : i32
    cf.cond_br %37, ^bb3, ^bb16
  ^bb6:  // pred: ^bb1
    %c1_i32_7 = arith.constant 1 : i32
    llvm.store %c1_i32_7, %5 : i32, !llvm.ptr
    %38 = llvm.load %0 : !llvm.ptr -> i32
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c16_i64 : i64
    %43 = llvm.getelementptr %8[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    %45 = arith.cmpi ult, %44, %15 : i32
    cf.cond_br %45, ^bb7, ^bb8
  ^bb7:  // 2 preds: ^bb6, ^bb8
    %46 = llvm.getelementptr inbounds %13[%44] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %47 = llvm.load %46 : !llvm.ptr -> !llvm.ptr
    %48 = llvm.ptrtoint %47 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %49 = arith.cmpi eq, %48, %c0_i64 : i64
    cf.cond_br %49, ^bb10, ^bb9
  ^bb8:  // pred: ^bb6
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %50 = llvm.getelementptr %47[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %51 = llvm.getelementptr %47[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %52 = llvm.getelementptr %47[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %53 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %54 = llvm.load %52 : !llvm.ptr -> !llvm.ptr
    %55 = llvm.ptrtoint %53 : !llvm.ptr to i64
    %c0_i64_8 = arith.constant 0 : i64
    %56 = arith.cmpi eq, %55, %c0_i64_8 : i64
    cf.cond_br %56, ^bb12, ^bb11
  ^bb10:  // pred: ^bb7
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb9, ^bb12
    %57 = llvm.load %51 : !llvm.ptr -> i32
    %58 = arith.cmpi ne, %10, %57 : i32
    cf.cond_br %58, ^bb14, ^bb13
  ^bb12:  // pred: ^bb9
    %c3_i32_9 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_9) : (i32) -> ()
    cf.br ^bb11
  ^bb13:  // 2 preds: ^bb11, ^bb14
    %59 = llvm.call %53(%54, %38, %39) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_10 = arith.constant 0 : i32
    %60 = arith.cmpi ne, %59, %c0_i32_10 : i32
    cf.cond_br %60, ^bb4, ^bb15
  ^bb14:  // pred: ^bb11
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb13
  ^bb15:  // pred: ^bb13
    cf.br ^bb5
  ^bb16:  // pred: ^bb5
    %c0_i32_11 = arith.constant 0 : i32
    llvm.store %c0_i32_11, %5 : i32, !llvm.ptr
    cf.br ^bb4
  ^bb17:  // 2 preds: ^bb3, ^bb18
    %61 = llvm.getelementptr inbounds %18[%33] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    %63 = llvm.ptrtoint %62 : !llvm.ptr to i64
    %c0_i64_12 = arith.constant 0 : i64
    %64 = arith.cmpi eq, %63, %c0_i64_12 : i64
    cf.cond_br %64, ^bb20, ^bb19
  ^bb18:  // pred: ^bb3
    %c3_i32_13 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_13) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %65 = llvm.getelementptr %62[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %66 = llvm.getelementptr %62[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %67 = llvm.getelementptr %62[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %68 = llvm.load %65 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %70 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64_14 = arith.constant 0 : i64
    %71 = arith.cmpi eq, %70, %c0_i64_14 : i64
    cf.cond_br %71, ^bb22, ^bb21
  ^bb20:  // pred: ^bb17
    %c4_i32_15 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_15) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %72 = llvm.load %66 : !llvm.ptr -> i32
    %73 = arith.cmpi ne, %17, %72 : i32
    cf.cond_br %73, ^bb24, ^bb23
  ^bb22:  // pred: ^bb19
    %c3_i32_16 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_16) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %74 = llvm.call %68(%69, %26, %27, %28) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%74 : i32)
  ^bb24:  // pred: ^bb21
    %c5_i32_17 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_17) : (i32) -> ()
    cf.br ^bb23
  }
  func.func @f186(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c20_i64 : i64
    %16 = llvm.getelementptr %5[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %20 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %21 = arith.extui %20 : i32 to i64
    %22 = arith.addi %21, %c24_i64 : i64
    %23 = llvm.getelementptr %5[%22] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %24 = llvm.load volatile %23 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c12_i64 : i64
    %27 = llvm.getelementptr %5[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i32
    %29 = arith.cmpi ult, %28, %12 : i32
    cf.cond_br %29, ^bb3, ^bb4
  ^bb2(%30: i32):  // pred: ^bb9
    return %30 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %31 = llvm.getelementptr inbounds %10[%28] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %32 = llvm.load %31 : !llvm.ptr -> !llvm.ptr
    %33 = llvm.ptrtoint %32 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %34 = arith.cmpi eq, %33, %c0_i64 : i64
    cf.cond_br %34, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %35 = llvm.getelementptr %32[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %36 = llvm.getelementptr %32[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %37 = llvm.getelementptr %32[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %38 = llvm.load %35 : !llvm.ptr -> !llvm.ptr
    %39 = llvm.load %37 : !llvm.ptr -> !llvm.ptr
    %40 = llvm.ptrtoint %38 : !llvm.ptr to i64
    %c0_i64_2 = arith.constant 0 : i64
    %41 = arith.cmpi eq, %40, %c0_i64_2 : i64
    cf.cond_br %41, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %42 = llvm.load %36 : !llvm.ptr -> i32
    %43 = arith.cmpi ne, %7, %42 : i32
    cf.cond_br %43, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_3 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_3) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %44 = llvm.call %38(%39, %17, %18, %19) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%44 : i32)
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f187(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg7, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg8, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg9, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg10, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg11, %10 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %12 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    %17 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %17 : !llvm.ptr -> i32
    %19 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.load %20 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    %24 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %20 : !llvm.ptr -> i64
    %26 = arith.trunci %25 : i64 to i32
    %27 = llvm.load %19 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.load %20 : !llvm.ptr -> i64
    %29 = arith.trunci %28 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %30 = llvm.load %13 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %31 = arith.subi %30, %c16_i32 : i32
    llvm.store %31, %11 : i32, !llvm.ptr
    llvm.store %31, %13 : i32, !llvm.ptr
    %32 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %33 = arith.extui %32 : i32 to i64
    %34 = arith.addi %33, %c20_i64 : i64
    %35 = llvm.getelementptr %16[%34] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %36 = llvm.load volatile %35 {alignment = 1 : i64} : !llvm.ptr -> i32
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %38 = llvm.load %2 : !llvm.ptr -> i32
    %39 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %40 = arith.extui %39 : i32 to i64
    %41 = arith.addi %40, %c24_i64 : i64
    %42 = llvm.getelementptr %16[%41] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %43 = llvm.load volatile %42 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %44 = arith.extui %43 : i32 to i64
    %45 = arith.addi %44, %c12_i64 : i64
    %46 = llvm.getelementptr %16[%45] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %47 = llvm.load volatile %46 {alignment = 1 : i64} : !llvm.ptr -> i32
    %48 = arith.cmpi ult, %47, %23 : i32
    cf.cond_br %48, ^bb3, ^bb4
  ^bb2(%49: i32):  // pred: ^bb11
    return %49 : i32
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %50 = llvm.getelementptr inbounds %21[%47] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.ptrtoint %51 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %53 = arith.cmpi eq, %52, %c0_i64 : i64
    cf.cond_br %53, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %54 = llvm.getelementptr %51[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %55 = llvm.getelementptr %51[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %56 = llvm.getelementptr %51[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %57 = llvm.load %54 : !llvm.ptr -> !llvm.ptr
    %58 = llvm.load %56 : !llvm.ptr -> !llvm.ptr
    %59 = llvm.ptrtoint %57 : !llvm.ptr to i64
    %c0_i64_11 = arith.constant 0 : i64
    %60 = arith.cmpi eq, %59, %c0_i64_11 : i64
    cf.cond_br %60, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %61 = llvm.load %55 : !llvm.ptr -> i32
    %62 = arith.cmpi ne, %18, %61 : i32
    cf.cond_br %62, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_12 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_12) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %63 = llvm.call %57(%58, %36, %37, %38) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %63, %2 : i32, !llvm.ptr
    %64 = llvm.load %11 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %c13_i64 = arith.constant 13 : i64
    %65 = arith.extui %64 : i32 to i64
    %66 = arith.addi %65, %c13_i64 : i64
    %67 = llvm.getelementptr %16[%66] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %68 = arith.trunci %c0_i32_13 : i32 to i8
    llvm.store volatile %68, %67 {alignment = 1 : i64} : i8, !llvm.ptr
    %69 = llvm.load %11 : !llvm.ptr -> i32
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %c12_i64_14 = arith.constant 12 : i64
    %71 = arith.extui %69 : i32 to i64
    %72 = arith.addi %71, %c12_i64_14 : i64
    %73 = llvm.getelementptr %16[%72] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %74 = arith.trunci %70 : i32 to i8
    llvm.store volatile %74, %73 {alignment = 1 : i64} : i8, !llvm.ptr
    %75 = llvm.load %11 : !llvm.ptr -> i32
    %76 = llvm.load %0 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %77 = arith.extui %75 : i32 to i64
    %78 = arith.addi %77, %c8_i64 : i64
    %79 = llvm.getelementptr %16[%78] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %76, %79 {alignment = 1 : i64} : i32, !llvm.ptr
    %80 = llvm.load %11 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %81 = arith.addi %80, %c8_i32 : i32
    %82 = llvm.load %3 : !llvm.ptr -> i32
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %84 = llvm.load %5 : !llvm.ptr -> i32
    %85 = llvm.load %6 : !llvm.ptr -> i32
    %86 = call @f169(%arg0, %81, %82, %83, %84, %85) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    %87 = llvm.load %7 : !llvm.ptr -> i32
    %88 = llvm.load %8 : !llvm.ptr -> i32
    %89 = llvm.load %9 : !llvm.ptr -> i32
    %90 = llvm.load %10 : !llvm.ptr -> i32
    %91 = call @f169(%arg0, %86, %87, %88, %89, %90) : (!llvm.ptr, i32, i32, i32, i32, i32) -> i32
    llvm.store %91, %1 : i32, !llvm.ptr
    %92 = llvm.load %11 : !llvm.ptr -> i32
    %c12_i64_15 = arith.constant 12 : i64
    %93 = arith.extui %92 : i32 to i64
    %94 = arith.addi %93, %c12_i64_15 : i64
    %95 = llvm.getelementptr %16[%94] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %96 = llvm.load volatile %95 {alignment = 1 : i64} : !llvm.ptr -> i8
    %97 = arith.extui %96 : i8 to i32
    llvm.store %97, %2 : i32, !llvm.ptr
    %98 = llvm.load %11 : !llvm.ptr -> i32
    %c13_i64_16 = arith.constant 13 : i64
    %99 = arith.extui %98 : i32 to i64
    %100 = arith.addi %99, %c13_i64_16 : i64
    %101 = llvm.getelementptr %16[%100] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %102 = llvm.load volatile %101 {alignment = 1 : i64} : !llvm.ptr -> i8
    %103 = arith.extui %102 : i8 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %104 = arith.cmpi ne, %103, %c0_i32_17 : i32
    cf.cond_br %104, ^bb12, ^bb13
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  ^bb11:  // 4 preds: ^bb12, ^bb13, ^bb23, ^bb31
    %105 = llvm.load %11 : !llvm.ptr -> i32
    %c16_i32_18 = arith.constant 16 : i32
    %106 = arith.addi %105, %c16_i32_18 : i32
    llvm.store %106, %13 : i32, !llvm.ptr
    %107 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%107 : i32)
  ^bb12:  // pred: ^bb9
    %c1_i32_19 = arith.constant 1 : i32
    llvm.store %c1_i32_19, %0 : i32, !llvm.ptr
    %108 = llvm.load %2 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %109 = arith.andi %108, %c255_i32 : i32
    %c0_i32_20 = arith.constant 0 : i32
    %110 = arith.cmpi ne, %109, %c0_i32_20 : i32
    cf.cond_br %110, ^bb11, ^bb14
  ^bb13:  // pred: ^bb9
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %c255_i32_21 = arith.constant 255 : i32
    %112 = arith.andi %111, %c255_i32_21 : i32
    %c0_i32_22 = arith.constant 0 : i32
    %113 = arith.cmpi eq, %112, %c0_i32_22 : i32
    %114 = arith.extui %113 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %115 = arith.cmpi eq, %114, %c0_i32_23 : i32
    %116 = arith.extui %115 : i1 to i32
    llvm.store %116, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb14:  // pred: ^bb12
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_24 = arith.constant 0 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c0_i64_24 : i64
    %120 = llvm.getelementptr %16[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %121 = llvm.load volatile %120 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %121, %0 : i32, !llvm.ptr
    %c28_i64 = arith.constant 28 : i64
    %122 = arith.extui %121 : i32 to i64
    %123 = arith.addi %122, %c28_i64 : i64
    %124 = llvm.getelementptr %16[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %125 = llvm.load volatile %124 {alignment = 1 : i64} : !llvm.ptr -> i8
    %126 = arith.extui %125 : i8 to i32
    %c4_i32_25 = arith.constant 4 : i32
    %127 = arith.andi %126, %c4_i32_25 : i32
    %c0_i32_26 = arith.constant 0 : i32
    %128 = arith.cmpi ne, %127, %c0_i32_26 : i32
    cf.cond_br %128, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %129 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_27 = arith.constant 20 : i64
    %130 = arith.extui %129 : i32 to i64
    %131 = arith.addi %130, %c20_i64_27 : i64
    %132 = llvm.getelementptr %16[%131] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %133 = llvm.load volatile %132 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1051162_i32 = arith.constant 1051162 : i32
    %c1_i32_28 = arith.constant 1 : i32
    %134 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_29 = arith.constant 24 : i64
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.addi %135, %c24_i64_29 : i64
    %137 = llvm.getelementptr %16[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = llvm.load volatile %137 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_30 = arith.constant 12 : i64
    %139 = arith.extui %138 : i32 to i64
    %140 = arith.addi %139, %c12_i64_30 : i64
    %141 = llvm.getelementptr %16[%140] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %142 = llvm.load volatile %141 {alignment = 1 : i64} : !llvm.ptr -> i32
    %143 = arith.cmpi ult, %142, %29 : i32
    cf.cond_br %143, ^bb25, ^bb26
  ^bb16:  // pred: ^bb14
    %144 = llvm.load %0 : !llvm.ptr -> i32
    %c20_i64_31 = arith.constant 20 : i64
    %145 = arith.extui %144 : i32 to i64
    %146 = arith.addi %145, %c20_i64_31 : i64
    %147 = llvm.getelementptr %16[%146] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %148 = llvm.load volatile %147 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1051163_i32 = arith.constant 1051163 : i32
    %c2_i32 = arith.constant 2 : i32
    %149 = llvm.load %0 : !llvm.ptr -> i32
    %c24_i64_32 = arith.constant 24 : i64
    %150 = arith.extui %149 : i32 to i64
    %151 = arith.addi %150, %c24_i64_32 : i64
    %152 = llvm.getelementptr %16[%151] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %153 = llvm.load volatile %152 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64_33 = arith.constant 12 : i64
    %154 = arith.extui %153 : i32 to i64
    %155 = arith.addi %154, %c12_i64_33 : i64
    %156 = llvm.getelementptr %16[%155] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %157 = llvm.load volatile %156 {alignment = 1 : i64} : !llvm.ptr -> i32
    %158 = arith.cmpi ult, %157, %26 : i32
    cf.cond_br %158, ^bb17, ^bb18
  ^bb17:  // 2 preds: ^bb16, ^bb18
    %159 = llvm.getelementptr inbounds %24[%157] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %160 = llvm.load %159 : !llvm.ptr -> !llvm.ptr
    %161 = llvm.ptrtoint %160 : !llvm.ptr to i64
    %c0_i64_34 = arith.constant 0 : i64
    %162 = arith.cmpi eq, %161, %c0_i64_34 : i64
    cf.cond_br %162, ^bb20, ^bb19
  ^bb18:  // pred: ^bb16
    %c3_i32_35 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_35) : (i32) -> ()
    cf.br ^bb17
  ^bb19:  // 2 preds: ^bb17, ^bb20
    %163 = llvm.getelementptr %160[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %164 = llvm.getelementptr %160[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %165 = llvm.getelementptr %160[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %166 = llvm.load %163 : !llvm.ptr -> !llvm.ptr
    %167 = llvm.load %165 : !llvm.ptr -> !llvm.ptr
    %168 = llvm.ptrtoint %166 : !llvm.ptr to i64
    %c0_i64_36 = arith.constant 0 : i64
    %169 = arith.cmpi eq, %168, %c0_i64_36 : i64
    cf.cond_br %169, ^bb22, ^bb21
  ^bb20:  // pred: ^bb17
    %c4_i32_37 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_37) : (i32) -> ()
    cf.br ^bb19
  ^bb21:  // 2 preds: ^bb19, ^bb22
    %170 = llvm.load %164 : !llvm.ptr -> i32
    %171 = arith.cmpi ne, %18, %170 : i32
    cf.cond_br %171, ^bb24, ^bb23
  ^bb22:  // pred: ^bb19
    %c3_i32_38 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_38) : (i32) -> ()
    cf.br ^bb21
  ^bb23:  // 2 preds: ^bb21, ^bb24
    %172 = llvm.call %166(%167, %148, %c1051163_i32, %c2_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %172, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb24:  // pred: ^bb21
    %c5_i32_39 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_39) : (i32) -> ()
    cf.br ^bb23
  ^bb25:  // 2 preds: ^bb15, ^bb26
    %173 = llvm.getelementptr inbounds %27[%142] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %174 = llvm.load %173 : !llvm.ptr -> !llvm.ptr
    %175 = llvm.ptrtoint %174 : !llvm.ptr to i64
    %c0_i64_40 = arith.constant 0 : i64
    %176 = arith.cmpi eq, %175, %c0_i64_40 : i64
    cf.cond_br %176, ^bb28, ^bb27
  ^bb26:  // pred: ^bb15
    %c3_i32_41 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_41) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %177 = llvm.getelementptr %174[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %178 = llvm.getelementptr %174[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %179 = llvm.getelementptr %174[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %180 = llvm.load %177 : !llvm.ptr -> !llvm.ptr
    %181 = llvm.load %179 : !llvm.ptr -> !llvm.ptr
    %182 = llvm.ptrtoint %180 : !llvm.ptr to i64
    %c0_i64_42 = arith.constant 0 : i64
    %183 = arith.cmpi eq, %182, %c0_i64_42 : i64
    cf.cond_br %183, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c4_i32_43 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_43) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %184 = llvm.load %178 : !llvm.ptr -> i32
    %185 = arith.cmpi ne, %18, %184 : i32
    cf.cond_br %185, ^bb32, ^bb31
  ^bb30:  // pred: ^bb27
    %c3_i32_44 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_44) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %186 = llvm.call %180(%181, %133, %c1051162_i32, %c1_i32_28) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %186, %0 : i32, !llvm.ptr
    cf.br ^bb11
  ^bb32:  // pred: ^bb29
    %c5_i32_45 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_45) : (i32) -> ()
    cf.br ^bb31
  }
  func.func @f188(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %3 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> i32
    %8 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.load %9 : !llvm.ptr -> i64
    %12 = arith.trunci %11 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %14 = arith.extui %13 : i32 to i64
    %15 = arith.addi %14, %c20_i64 : i64
    %16 = llvm.getelementptr %5[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %17 = llvm.load volatile %16 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c1050968_i32 = arith.constant 1050968 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %18 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c24_i64 : i64
    %21 = llvm.getelementptr %5[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %5[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %26 = llvm.load volatile %25 {alignment = 1 : i64} : !llvm.ptr -> i32
    %27 = arith.cmpi ult, %26, %12 : i32
    cf.cond_br %27, ^bb3, ^bb4
  ^bb2:  // pred: ^bb9
    return
  ^bb3:  // 2 preds: ^bb1, ^bb4
    %28 = llvm.getelementptr inbounds %10[%26] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %29 = llvm.load %28 : !llvm.ptr -> !llvm.ptr
    %30 = llvm.ptrtoint %29 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %31 = arith.cmpi eq, %30, %c0_i64 : i64
    cf.cond_br %31, ^bb6, ^bb5
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb3
  ^bb5:  // 2 preds: ^bb3, ^bb6
    %32 = llvm.getelementptr %29[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %33 = llvm.getelementptr %29[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %34 = llvm.getelementptr %29[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %35 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %36 = llvm.load %34 : !llvm.ptr -> !llvm.ptr
    %37 = llvm.ptrtoint %35 : !llvm.ptr to i64
    %c0_i64_3 = arith.constant 0 : i64
    %38 = arith.cmpi eq, %37, %c0_i64_3 : i64
    cf.cond_br %38, ^bb8, ^bb7
  ^bb6:  // pred: ^bb3
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb5, ^bb8
    %39 = llvm.load %33 : !llvm.ptr -> i32
    %40 = arith.cmpi ne, %7, %39 : i32
    cf.cond_br %40, ^bb10, ^bb9
  ^bb8:  // pred: ^bb5
    %c3_i32_4 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_4) : (i32) -> ()
    cf.br ^bb7
  ^bb9:  // 2 preds: ^bb7, ^bb10
    %41 = llvm.call %35(%36, %17, %c1050968_i32, %c1_i32_2) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    llvm.store %41, %2 : i32, !llvm.ptr
    %42 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_5 = arith.constant 0 : i32
    %c5_i64 = arith.constant 5 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c5_i64 : i64
    %45 = llvm.getelementptr %5[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = arith.trunci %c0_i32_5 : i32 to i8
    llvm.store volatile %46, %45 {alignment = 1 : i64} : i8, !llvm.ptr
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %49 = arith.extui %47 : i32 to i64
    %50 = arith.addi %49, %c4_i64 : i64
    %51 = llvm.getelementptr %5[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = arith.trunci %48 : i32 to i8
    llvm.store volatile %52, %51 {alignment = 1 : i64} : i8, !llvm.ptr
    %53 = llvm.load %0 : !llvm.ptr -> i32
    %54 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_6 = arith.constant 0 : i64
    %55 = arith.extui %53 : i32 to i64
    %56 = arith.addi %55, %c0_i64_6 : i64
    %57 = llvm.getelementptr %5[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %54, %57 {alignment = 1 : i64} : i32, !llvm.ptr
    cf.br ^bb2
  ^bb10:  // pred: ^bb7
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb9
  }
  func.func @f189(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %c1_i32_12 = arith.constant 1 : i32
    %13 = llvm.alloca %c1_i32_12 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %13 : i32, !llvm.ptr
    %c1_i32_13 = arith.constant 1 : i32
    %14 = llvm.alloca %c1_i32_13 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %14 : i32, !llvm.ptr
    %c1_i32_14 = arith.constant 1 : i32
    %15 = llvm.alloca %c1_i32_14 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %15 : i32, !llvm.ptr
    %c1_i32_15 = arith.constant 1 : i32
    %16 = llvm.alloca %c1_i32_15 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %16 : i32, !llvm.ptr
    %17 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %18 = llvm.load %17 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %20 = llvm.getelementptr %19[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %21 = llvm.load %20 : !llvm.ptr -> !llvm.ptr
    %22 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %23 = llvm.load %22 : !llvm.ptr -> i32
    %24 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %25 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %26 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %25 : !llvm.ptr -> i64
    %28 = arith.trunci %27 : i64 to i32
    %29 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %30 = llvm.load %29 : !llvm.ptr -> i32
    %31 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %32 = llvm.load %25 : !llvm.ptr -> i64
    %33 = arith.trunci %32 : i64 to i32
    %34 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %35 = llvm.load %25 : !llvm.ptr -> i64
    %36 = arith.trunci %35 : i64 to i32
    %37 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %38 = llvm.load %25 : !llvm.ptr -> i64
    %39 = arith.trunci %38 : i64 to i32
    %40 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %41 = llvm.load %25 : !llvm.ptr -> i64
    %42 = arith.trunci %41 : i64 to i32
    %43 = llvm.load %24 : !llvm.ptr -> !llvm.ptr
    %44 = llvm.load %25 : !llvm.ptr -> i64
    %45 = arith.trunci %44 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %46 = llvm.load %18 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %47 = arith.subi %46, %c16_i32 : i32
    llvm.store %47, %3 : i32, !llvm.ptr
    llvm.store %47, %18 : i32, !llvm.ptr
    %c1_i32_16 = arith.constant 1 : i32
    llvm.store %c1_i32_16, %4 : i32, !llvm.ptr
    %48 = llvm.load %2 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %49 = arith.extui %48 : i32 to i64
    %50 = arith.addi %49, %c20_i64 : i64
    %51 = llvm.getelementptr %21[%50] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %52 = llvm.load volatile %51 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %52, %5 : i32, !llvm.ptr
    %c34_i32 = arith.constant 34 : i32
    %53 = llvm.load %2 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %54 = arith.extui %53 : i32 to i64
    %55 = arith.addi %54, %c24_i64 : i64
    %56 = llvm.getelementptr %21[%55] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %57 = llvm.load volatile %56 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %57, %6 : i32, !llvm.ptr
    %c16_i64 = arith.constant 16 : i64
    %58 = arith.extui %57 : i32 to i64
    %59 = arith.addi %58, %c16_i64 : i64
    %60 = llvm.getelementptr %21[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %61 = llvm.load volatile %60 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %61, %7 : i32, !llvm.ptr
    %62 = arith.cmpi ult, %61, %28 : i32
    cf.cond_br %62, ^bb4, ^bb5
  ^bb2(%63: i32):  // pred: ^bb3
    return %63 : i32
  ^bb3:  // 4 preds: ^bb10, ^bb19, ^bb109, ^bb118
    %64 = llvm.load %3 : !llvm.ptr -> i32
    %c16_i32_17 = arith.constant 16 : i32
    %65 = arith.addi %64, %c16_i32_17 : i32
    llvm.store %65, %18 : i32, !llvm.ptr
    %66 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%66 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %67 = llvm.getelementptr inbounds %26[%61] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %68 = llvm.load %67 : !llvm.ptr -> !llvm.ptr
    %69 = llvm.ptrtoint %68 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %70 = arith.cmpi eq, %69, %c0_i64 : i64
    cf.cond_br %70, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %71 = llvm.getelementptr %68[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %72 = llvm.getelementptr %68[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %73 = llvm.getelementptr %68[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %74 = llvm.load %71 : !llvm.ptr -> !llvm.ptr
    %75 = llvm.load %73 : !llvm.ptr -> !llvm.ptr
    %76 = llvm.ptrtoint %74 : !llvm.ptr to i64
    %c0_i64_18 = arith.constant 0 : i64
    %77 = arith.cmpi eq, %76, %c0_i64_18 : i64
    cf.cond_br %77, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %78 = llvm.load %72 : !llvm.ptr -> i32
    %79 = arith.cmpi ne, %23, %78 : i32
    cf.cond_br %79, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_19 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_19) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %80 = llvm.call %74(%75, %52, %c34_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_20 = arith.constant 0 : i32
    %81 = arith.cmpi ne, %80, %c0_i32_20 : i32
    cf.cond_br %81, ^bb3, ^bb12
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // pred: ^bb10
    %82 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %83 = arith.cmpi ne, %82, %c0_i32_21 : i32
    cf.cond_br %83, ^bb14, ^bb15
  ^bb13:  // 4 preds: ^bb15, ^bb98, ^bb99, ^bb100
    %84 = llvm.load %5 : !llvm.ptr -> i32
    %85 = llvm.load %0 : !llvm.ptr -> i32
    %86 = llvm.load %8 : !llvm.ptr -> i32
    %87 = arith.addi %85, %86 : i32
    %88 = llvm.load %2 : !llvm.ptr -> i32
    %89 = llvm.load %8 : !llvm.ptr -> i32
    %90 = arith.subi %88, %89 : i32
    %91 = llvm.load %6 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c12_i64 : i64
    %94 = llvm.getelementptr %21[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i32
    %96 = arith.cmpi ult, %95, %42 : i32
    cf.cond_br %96, ^bb103, ^bb104
  ^bb14:  // pred: ^bb12
    %c0_i32_22 = arith.constant 0 : i32
    llvm.store %c0_i32_22, %9 : i32, !llvm.ptr
    %c0_i32_23 = arith.constant 0 : i32
    %97 = llvm.load %1 : !llvm.ptr -> i32
    %98 = arith.subi %c0_i32_23, %97 : i32
    llvm.store %98, %10 : i32, !llvm.ptr
    %c0_i32_24 = arith.constant 0 : i32
    llvm.store %c0_i32_24, %11 : i32, !llvm.ptr
    %99 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %99, %12 : i32, !llvm.ptr
    %100 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %100, %13 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb15:  // pred: ^bb12
    %c0_i32_25 = arith.constant 0 : i32
    llvm.store %c0_i32_25, %2 : i32, !llvm.ptr
    %c0_i32_26 = arith.constant 0 : i32
    llvm.store %c0_i32_26, %8 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb16:  // 2 preds: ^bb17, ^bb22
    %101 = llvm.load %9 : !llvm.ptr -> i32
    %102 = llvm.load %2 : !llvm.ptr -> i32
    %103 = arith.cmpi ugt, %101, %102 : i32
    %104 = arith.extui %103 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %105 = arith.cmpi ne, %104, %c0_i32_27 : i32
    cf.cond_br %105, ^bb89, ^bb90
  ^bb17:  // pred: ^bb85
    %106 = llvm.load %8 : !llvm.ptr -> i32
    %107 = llvm.load %2 : !llvm.ptr -> i32
    %108 = arith.addi %106, %107 : i32
    llvm.store %108, %2 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb18:  // 5 preds: ^bb38, ^bb42, ^bb44, ^bb48, ^bb49
    %109 = llvm.load %0 : !llvm.ptr -> i32
    %110 = llvm.load %1 : !llvm.ptr -> i32
    %111 = llvm.load %9 : !llvm.ptr -> i32
    %112 = llvm.load %15 : !llvm.ptr -> i32
    %c1051444_i32 = arith.constant 1051444 : i32
    call @f190(%arg0, %109, %110, %111, %112, %c1051444_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb19:  // pred: ^bb35
    %c1_i32_28 = arith.constant 1 : i32
    llvm.store %c1_i32_28, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb20:  // 2 preds: ^bb14, ^bb88
    %113 = llvm.load %12 : !llvm.ptr -> i32
    %114 = llvm.load %13 : !llvm.ptr -> i32
    %115 = arith.addi %113, %114 : i32
    llvm.store %115, %14 : i32, !llvm.ptr
    %c0_i32_29 = arith.constant 0 : i32
    llvm.store %c0_i32_29, %2 : i32, !llvm.ptr
    cf.br ^bb23
  ^bb21:  // 3 preds: ^bb23, ^bb24, ^bb25
    %116 = llvm.load %15 : !llvm.ptr -> i32
    %c1_i32_30 = arith.constant 1 : i32
    %117 = arith.addi %116, %c1_i32_30 : i32
    llvm.store %117, %12 : i32, !llvm.ptr
    %118 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i64_31 = arith.constant 0 : i64
    %119 = arith.extui %118 : i32 to i64
    %120 = arith.addi %119, %c0_i64_31 : i64
    %121 = llvm.getelementptr %21[%120] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %122 = llvm.load volatile %121 {alignment = 1 : i64} : !llvm.ptr -> i8
    %123 = arith.extsi %122 : i8 to i32
    llvm.store %123, %8 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    %124 = arith.cmpi sle, %123, %c-1_i32 : i32
    %125 = arith.extui %124 : i1 to i32
    %c0_i32_32 = arith.constant 0 : i32
    %126 = arith.cmpi ne, %125, %c0_i32_32 : i32
    cf.cond_br %126, ^bb29, ^bb30
  ^bb22:  // pred: ^bb27
    %127 = llvm.load %11 : !llvm.ptr -> i32
    %128 = llvm.load %13 : !llvm.ptr -> i32
    %129 = arith.addi %127, %128 : i32
    llvm.store %129, %2 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb23:  // 2 preds: ^bb20, ^bb26
    %130 = llvm.load %12 : !llvm.ptr -> i32
    %131 = llvm.load %2 : !llvm.ptr -> i32
    %132 = arith.addi %130, %131 : i32
    llvm.store %132, %15 : i32, !llvm.ptr
    %c0_i64_33 = arith.constant 0 : i64
    %133 = arith.extui %132 : i32 to i64
    %134 = arith.addi %133, %c0_i64_33 : i64
    %135 = llvm.getelementptr %21[%134] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %136 = llvm.load volatile %135 {alignment = 1 : i64} : !llvm.ptr -> i8
    %137 = arith.extui %136 : i8 to i32
    llvm.store %137, %8 : i32, !llvm.ptr
    %c-127_i32 = arith.constant -127 : i32
    %138 = arith.addi %137, %c-127_i32 : i32
    %c255_i32 = arith.constant 255 : i32
    %139 = arith.andi %138, %c255_i32 : i32
    %c161_i32 = arith.constant 161 : i32
    %140 = arith.cmpi ult, %139, %c161_i32 : i32
    %141 = arith.extui %140 : i1 to i32
    %c0_i32_34 = arith.constant 0 : i32
    %142 = arith.cmpi ne, %141, %c0_i32_34 : i32
    cf.cond_br %142, ^bb21, ^bb24
  ^bb24:  // pred: ^bb23
    %143 = llvm.load %8 : !llvm.ptr -> i32
    %c34_i32_35 = arith.constant 34 : i32
    %144 = arith.cmpi eq, %143, %c34_i32_35 : i32
    %145 = arith.extui %144 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %146 = arith.cmpi ne, %145, %c0_i32_36 : i32
    cf.cond_br %146, ^bb21, ^bb25
  ^bb25:  // pred: ^bb24
    %147 = llvm.load %8 : !llvm.ptr -> i32
    %c92_i32 = arith.constant 92 : i32
    %148 = arith.cmpi eq, %147, %c92_i32 : i32
    %149 = arith.extui %148 : i1 to i32
    %c0_i32_37 = arith.constant 0 : i32
    %150 = arith.cmpi ne, %149, %c0_i32_37 : i32
    cf.cond_br %150, ^bb21, ^bb26
  ^bb26:  // pred: ^bb25
    %151 = llvm.load %13 : !llvm.ptr -> i32
    %152 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_38 = arith.constant 1 : i32
    %153 = arith.addi %152, %c1_i32_38 : i32
    llvm.store %153, %2 : i32, !llvm.ptr
    %154 = arith.cmpi eq, %151, %153 : i32
    %155 = arith.extui %154 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %156 = arith.cmpi eq, %155, %c0_i32_39 : i32
    %157 = arith.extui %156 : i1 to i32
    %c0_i32_40 = arith.constant 0 : i32
    %158 = arith.cmpi ne, %157, %c0_i32_40 : i32
    cf.cond_br %158, ^bb23, ^bb27
  ^bb27:  // pred: ^bb26
    cf.br ^bb22
  ^bb28:  // 4 preds: ^bb30, ^bb32, ^bb33, ^bb34
    %159 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_41 = arith.constant 4 : i32
    %160 = arith.addi %159, %c4_i32_41 : i32
    %161 = llvm.load %8 : !llvm.ptr -> i32
    %c65537_i32 = arith.constant 65537 : i32
    call @f166(%arg0, %160, %161, %c65537_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %162 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %163 = arith.extui %162 : i32 to i64
    %164 = arith.addi %163, %c4_i64 : i64
    %165 = llvm.getelementptr %21[%164] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %166 = llvm.load volatile %165 {alignment = 1 : i64} : !llvm.ptr -> i8
    %167 = arith.extui %166 : i8 to i32
    %c128_i32 = arith.constant 128 : i32
    %168 = arith.cmpi eq, %167, %c128_i32 : i32
    %169 = arith.extui %168 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %170 = arith.cmpi ne, %169, %c0_i32_42 : i32
    cf.cond_br %170, ^bb36, ^bb37
  ^bb29:  // pred: ^bb21
    %171 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_43 = arith.constant 0 : i64
    %172 = arith.extui %171 : i32 to i64
    %173 = arith.addi %172, %c0_i64_43 : i64
    %174 = llvm.getelementptr %21[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %175 = llvm.load volatile %174 {alignment = 1 : i64} : !llvm.ptr -> i8
    %176 = arith.extui %175 : i8 to i32
    %c63_i32 = arith.constant 63 : i32
    %177 = arith.andi %176, %c63_i32 : i32
    llvm.store %177, %13 : i32, !llvm.ptr
    %178 = llvm.load %8 : !llvm.ptr -> i32
    %c31_i32 = arith.constant 31 : i32
    %179 = arith.andi %178, %c31_i32 : i32
    llvm.store %179, %16 : i32, !llvm.ptr
    %180 = llvm.load %15 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %181 = arith.addi %180, %c2_i32 : i32
    llvm.store %181, %12 : i32, !llvm.ptr
    %182 = llvm.load %8 : !llvm.ptr -> i32
    %c-33_i32 = arith.constant -33 : i32
    %183 = arith.cmpi ugt, %182, %c-33_i32 : i32
    %184 = arith.extui %183 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %185 = arith.cmpi ne, %184, %c0_i32_44 : i32
    cf.cond_br %185, ^bb31, ^bb32
  ^bb30:  // pred: ^bb21
    %186 = llvm.load %8 : !llvm.ptr -> i32
    %c255_i32_45 = arith.constant 255 : i32
    %187 = arith.andi %186, %c255_i32_45 : i32
    llvm.store %187, %8 : i32, !llvm.ptr
    cf.br ^bb28
  ^bb31:  // pred: ^bb29
    %188 = llvm.load %13 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32_46 = arith.constant 31 : i32
    %189 = arith.cmpi ule, %c6_i32, %c31_i32_46 : i32
    %190 = scf.if %189 -> (i32) {
      %543 = arith.shli %188, %c6_i32 : i32
      scf.yield %543 : i32
    } else {
      %c0_i32_159 = arith.constant 0 : i32
      scf.yield %c0_i32_159 : i32
    }
    %191 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_47 = arith.constant 0 : i64
    %192 = arith.extui %191 : i32 to i64
    %193 = arith.addi %192, %c0_i64_47 : i64
    %194 = llvm.getelementptr %21[%193] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %195 = llvm.load volatile %194 {alignment = 1 : i64} : !llvm.ptr -> i8
    %196 = arith.extui %195 : i8 to i32
    %c63_i32_48 = arith.constant 63 : i32
    %197 = arith.andi %196, %c63_i32_48 : i32
    %198 = arith.ori %190, %197 : i32
    llvm.store %198, %13 : i32, !llvm.ptr
    %199 = llvm.load %15 : !llvm.ptr -> i32
    %c3_i32_49 = arith.constant 3 : i32
    %200 = arith.addi %199, %c3_i32_49 : i32
    llvm.store %200, %12 : i32, !llvm.ptr
    %201 = llvm.load %8 : !llvm.ptr -> i32
    %c-16_i32 = arith.constant -16 : i32
    %202 = arith.cmpi uge, %201, %c-16_i32 : i32
    %203 = arith.extui %202 : i1 to i32
    %c0_i32_50 = arith.constant 0 : i32
    %204 = arith.cmpi ne, %203, %c0_i32_50 : i32
    cf.cond_br %204, ^bb33, ^bb34
  ^bb32:  // pred: ^bb29
    %205 = llvm.load %16 : !llvm.ptr -> i32
    %c6_i32_51 = arith.constant 6 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %206 = arith.cmpi ule, %c6_i32_51, %c31_i32_52 : i32
    %207 = scf.if %206 -> (i32) {
      %543 = arith.shli %205, %c6_i32_51 : i32
      scf.yield %543 : i32
    } else {
      %c0_i32_159 = arith.constant 0 : i32
      scf.yield %c0_i32_159 : i32
    }
    %208 = llvm.load %13 : !llvm.ptr -> i32
    %209 = arith.ori %207, %208 : i32
    llvm.store %209, %8 : i32, !llvm.ptr
    cf.br ^bb28
  ^bb33:  // pred: ^bb31
    %210 = llvm.load %13 : !llvm.ptr -> i32
    %c6_i32_53 = arith.constant 6 : i32
    %c31_i32_54 = arith.constant 31 : i32
    %211 = arith.cmpi ule, %c6_i32_53, %c31_i32_54 : i32
    %212 = scf.if %211 -> (i32) {
      %543 = arith.shli %210, %c6_i32_53 : i32
      scf.yield %543 : i32
    } else {
      %c0_i32_159 = arith.constant 0 : i32
      scf.yield %c0_i32_159 : i32
    }
    %213 = llvm.load %12 : !llvm.ptr -> i32
    %c0_i64_55 = arith.constant 0 : i64
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.addi %214, %c0_i64_55 : i64
    %216 = llvm.getelementptr %21[%215] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %217 = llvm.load volatile %216 {alignment = 1 : i64} : !llvm.ptr -> i8
    %218 = arith.extui %217 : i8 to i32
    %c63_i32_56 = arith.constant 63 : i32
    %219 = arith.andi %218, %c63_i32_56 : i32
    %220 = arith.ori %212, %219 : i32
    %221 = llvm.load %16 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_57 = arith.constant 31 : i32
    %222 = arith.cmpi ule, %c18_i32, %c31_i32_57 : i32
    %223 = scf.if %222 -> (i32) {
      %543 = arith.shli %221, %c18_i32 : i32
      scf.yield %543 : i32
    } else {
      %c0_i32_159 = arith.constant 0 : i32
      scf.yield %c0_i32_159 : i32
    }
    %c1835008_i32 = arith.constant 1835008 : i32
    %224 = arith.andi %223, %c1835008_i32 : i32
    %225 = arith.ori %220, %224 : i32
    llvm.store %225, %8 : i32, !llvm.ptr
    %226 = llvm.load %15 : !llvm.ptr -> i32
    %c4_i32_58 = arith.constant 4 : i32
    %227 = arith.addi %226, %c4_i32_58 : i32
    llvm.store %227, %12 : i32, !llvm.ptr
    cf.br ^bb28
  ^bb34:  // pred: ^bb31
    %228 = llvm.load %13 : !llvm.ptr -> i32
    %229 = llvm.load %16 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %c31_i32_59 = arith.constant 31 : i32
    %230 = arith.cmpi ule, %c12_i32, %c31_i32_59 : i32
    %231 = scf.if %230 -> (i32) {
      %543 = arith.shli %229, %c12_i32 : i32
      scf.yield %543 : i32
    } else {
      %c0_i32_159 = arith.constant 0 : i32
      scf.yield %c0_i32_159 : i32
    }
    %232 = arith.ori %228, %231 : i32
    llvm.store %232, %8 : i32, !llvm.ptr
    cf.br ^bb28
  ^bb35:  // 3 preds: ^bb58, ^bb72, ^bb79
    cf.br ^bb19
  ^bb36:  // 3 preds: ^bb28, ^bb37, ^bb82
    %c1_i32_60 = arith.constant 1 : i32
    llvm.store %c1_i32_60, %15 : i32, !llvm.ptr
    %233 = llvm.load %8 : !llvm.ptr -> i32
    %c128_i32_61 = arith.constant 128 : i32
    %234 = arith.cmpi ult, %233, %c128_i32_61 : i32
    %235 = arith.extui %234 : i1 to i32
    %c0_i32_62 = arith.constant 0 : i32
    %236 = arith.cmpi ne, %235, %c0_i32_62 : i32
    cf.cond_br %236, ^bb85, ^bb86
  ^bb37:  // pred: ^bb28
    %237 = llvm.load %3 : !llvm.ptr -> i32
    %c15_i64 = arith.constant 15 : i64
    %238 = arith.extui %237 : i32 to i64
    %239 = arith.addi %238, %c15_i64 : i64
    %240 = llvm.getelementptr %21[%239] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %241 = llvm.load volatile %240 {alignment = 1 : i64} : !llvm.ptr -> i8
    %242 = arith.extui %241 : i8 to i32
    %243 = llvm.load %3 : !llvm.ptr -> i32
    %c14_i64 = arith.constant 14 : i64
    %244 = arith.extui %243 : i32 to i64
    %245 = arith.addi %244, %c14_i64 : i64
    %246 = llvm.getelementptr %21[%245] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %247 = llvm.load volatile %246 {alignment = 1 : i64} : !llvm.ptr -> i8
    %248 = arith.extui %247 : i8 to i32
    %249 = arith.subi %242, %248 : i32
    %c255_i32_63 = arith.constant 255 : i32
    %250 = arith.andi %249, %c255_i32_63 : i32
    %c1_i32_64 = arith.constant 1 : i32
    %251 = arith.cmpi eq, %250, %c1_i32_64 : i32
    %252 = arith.extui %251 : i1 to i32
    %c0_i32_65 = arith.constant 0 : i32
    %253 = arith.cmpi ne, %252, %c0_i32_65 : i32
    cf.cond_br %253, ^bb36, ^bb38
  ^bb38:  // pred: ^bb37
    %254 = llvm.load %9 : !llvm.ptr -> i32
    %255 = llvm.load %11 : !llvm.ptr -> i32
    %256 = llvm.load %2 : !llvm.ptr -> i32
    %257 = arith.addi %255, %256 : i32
    llvm.store %257, %15 : i32, !llvm.ptr
    %258 = arith.cmpi ugt, %254, %257 : i32
    %259 = arith.extui %258 : i1 to i32
    %c0_i32_66 = arith.constant 0 : i32
    %260 = arith.cmpi ne, %259, %c0_i32_66 : i32
    cf.cond_br %260, ^bb18, ^bb39
  ^bb39:  // pred: ^bb38
    %261 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_67 = arith.constant 0 : i32
    %262 = arith.cmpi eq, %261, %c0_i32_67 : i32
    %263 = arith.extui %262 : i1 to i32
    %c0_i32_68 = arith.constant 0 : i32
    %264 = arith.cmpi ne, %263, %c0_i32_68 : i32
    cf.cond_br %264, ^bb40, ^bb41
  ^bb40:  // 3 preds: ^bb39, ^bb43, ^bb45
    %265 = llvm.load %15 : !llvm.ptr -> i32
    %c0_i32_69 = arith.constant 0 : i32
    %266 = arith.cmpi eq, %265, %c0_i32_69 : i32
    %267 = arith.extui %266 : i1 to i32
    %c0_i32_70 = arith.constant 0 : i32
    %268 = arith.cmpi ne, %267, %c0_i32_70 : i32
    cf.cond_br %268, ^bb46, ^bb47
  ^bb41:  // pred: ^bb39
    %269 = llvm.load %9 : !llvm.ptr -> i32
    %270 = llvm.load %1 : !llvm.ptr -> i32
    %271 = arith.cmpi uge, %269, %270 : i32
    %272 = arith.extui %271 : i1 to i32
    %c0_i32_71 = arith.constant 0 : i32
    %273 = arith.cmpi ne, %272, %c0_i32_71 : i32
    cf.cond_br %273, ^bb42, ^bb43
  ^bb42:  // pred: ^bb41
    %274 = llvm.load %9 : !llvm.ptr -> i32
    %275 = llvm.load %1 : !llvm.ptr -> i32
    %276 = arith.cmpi eq, %274, %275 : i32
    %277 = arith.extui %276 : i1 to i32
    %c0_i32_72 = arith.constant 0 : i32
    %278 = arith.cmpi eq, %277, %c0_i32_72 : i32
    %279 = arith.extui %278 : i1 to i32
    %c0_i32_73 = arith.constant 0 : i32
    %280 = arith.cmpi ne, %279, %c0_i32_73 : i32
    cf.cond_br %280, ^bb18, ^bb45
  ^bb43:  // pred: ^bb41
    %281 = llvm.load %0 : !llvm.ptr -> i32
    %282 = llvm.load %9 : !llvm.ptr -> i32
    %283 = arith.addi %281, %282 : i32
    %c0_i64_74 = arith.constant 0 : i64
    %284 = arith.extui %283 : i32 to i64
    %285 = arith.addi %284, %c0_i64_74 : i64
    %286 = llvm.getelementptr %21[%285] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %287 = llvm.load volatile %286 {alignment = 1 : i64} : !llvm.ptr -> i8
    %288 = arith.extsi %287 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %289 = arith.cmpi sgt, %288, %c-65_i32 : i32
    %290 = arith.extui %289 : i1 to i32
    %c0_i32_75 = arith.constant 0 : i32
    %291 = arith.cmpi ne, %290, %c0_i32_75 : i32
    cf.cond_br %291, ^bb40, ^bb44
  ^bb44:  // pred: ^bb43
    cf.br ^bb18
  ^bb45:  // pred: ^bb42
    cf.br ^bb40
  ^bb46:  // 3 preds: ^bb40, ^bb50, ^bb51
    %292 = llvm.load %5 : !llvm.ptr -> i32
    %293 = llvm.load %0 : !llvm.ptr -> i32
    %294 = llvm.load %9 : !llvm.ptr -> i32
    %295 = arith.addi %293, %294 : i32
    %296 = llvm.load %11 : !llvm.ptr -> i32
    %297 = llvm.load %9 : !llvm.ptr -> i32
    %298 = arith.subi %296, %297 : i32
    %299 = llvm.load %2 : !llvm.ptr -> i32
    %300 = arith.addi %298, %299 : i32
    %301 = llvm.load %6 : !llvm.ptr -> i32
    %c12_i64_76 = arith.constant 12 : i64
    %302 = arith.extui %301 : i32 to i64
    %303 = arith.addi %302, %c12_i64_76 : i64
    %304 = llvm.getelementptr %21[%303] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %305 = llvm.load volatile %304 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %305, %15 : i32, !llvm.ptr
    %306 = arith.cmpi ult, %305, %33 : i32
    cf.cond_br %306, ^bb52, ^bb53
  ^bb47:  // pred: ^bb40
    %307 = llvm.load %15 : !llvm.ptr -> i32
    %308 = llvm.load %1 : !llvm.ptr -> i32
    %309 = arith.cmpi uge, %307, %308 : i32
    %310 = arith.extui %309 : i1 to i32
    %c0_i32_77 = arith.constant 0 : i32
    %311 = arith.cmpi ne, %310, %c0_i32_77 : i32
    cf.cond_br %311, ^bb48, ^bb49
  ^bb48:  // pred: ^bb47
    %312 = llvm.load %15 : !llvm.ptr -> i32
    %313 = llvm.load %10 : !llvm.ptr -> i32
    %314 = arith.addi %312, %313 : i32
    %c0_i32_78 = arith.constant 0 : i32
    %315 = arith.cmpi ne, %314, %c0_i32_78 : i32
    cf.cond_br %315, ^bb18, ^bb51
  ^bb49:  // pred: ^bb47
    %316 = llvm.load %0 : !llvm.ptr -> i32
    %317 = llvm.load %11 : !llvm.ptr -> i32
    %318 = arith.addi %316, %317 : i32
    %319 = llvm.load %2 : !llvm.ptr -> i32
    %320 = arith.addi %318, %319 : i32
    %c0_i64_79 = arith.constant 0 : i64
    %321 = arith.extui %320 : i32 to i64
    %322 = arith.addi %321, %c0_i64_79 : i64
    %323 = llvm.getelementptr %21[%322] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %324 = llvm.load volatile %323 {alignment = 1 : i64} : !llvm.ptr -> i8
    %325 = arith.extsi %324 : i8 to i32
    %c-65_i32_80 = arith.constant -65 : i32
    %326 = arith.cmpi sle, %325, %c-65_i32_80 : i32
    %327 = arith.extui %326 : i1 to i32
    %c0_i32_81 = arith.constant 0 : i32
    %328 = arith.cmpi ne, %327, %c0_i32_81 : i32
    cf.cond_br %328, ^bb18, ^bb50
  ^bb50:  // pred: ^bb49
    cf.br ^bb46
  ^bb51:  // pred: ^bb48
    cf.br ^bb46
  ^bb52:  // 2 preds: ^bb46, ^bb53
    %329 = llvm.getelementptr inbounds %31[%305] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %330 = llvm.load %329 : !llvm.ptr -> !llvm.ptr
    %331 = llvm.ptrtoint %330 : !llvm.ptr to i64
    %c0_i64_82 = arith.constant 0 : i64
    %332 = arith.cmpi eq, %331, %c0_i64_82 : i64
    cf.cond_br %332, ^bb55, ^bb54
  ^bb53:  // pred: ^bb46
    %c3_i32_83 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_83) : (i32) -> ()
    cf.br ^bb52
  ^bb54:  // 2 preds: ^bb52, ^bb55
    %333 = llvm.getelementptr %330[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %334 = llvm.getelementptr %330[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %335 = llvm.getelementptr %330[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %336 = llvm.load %333 : !llvm.ptr -> !llvm.ptr
    %337 = llvm.load %335 : !llvm.ptr -> !llvm.ptr
    %338 = llvm.ptrtoint %336 : !llvm.ptr to i64
    %c0_i64_84 = arith.constant 0 : i64
    %339 = arith.cmpi eq, %338, %c0_i64_84 : i64
    cf.cond_br %339, ^bb57, ^bb56
  ^bb55:  // pred: ^bb52
    %c4_i32_85 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_85) : (i32) -> ()
    cf.br ^bb54
  ^bb56:  // 2 preds: ^bb54, ^bb57
    %340 = llvm.load %334 : !llvm.ptr -> i32
    %341 = arith.cmpi ne, %30, %340 : i32
    cf.cond_br %341, ^bb59, ^bb58
  ^bb57:  // pred: ^bb54
    %c3_i32_86 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_86) : (i32) -> ()
    cf.br ^bb56
  ^bb58:  // 2 preds: ^bb56, ^bb59
    %342 = llvm.call %336(%337, %292, %295, %300) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_87 = arith.constant 0 : i32
    %343 = arith.cmpi ne, %342, %c0_i32_87 : i32
    cf.cond_br %343, ^bb35, ^bb60
  ^bb59:  // pred: ^bb56
    %c5_i32_88 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_88) : (i32) -> ()
    cf.br ^bb58
  ^bb60:  // pred: ^bb58
    %344 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i64_89 = arith.constant 4 : i64
    %345 = arith.extui %344 : i32 to i64
    %346 = arith.addi %345, %c4_i64_89 : i64
    %347 = llvm.getelementptr %21[%346] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %348 = llvm.load volatile %347 {alignment = 1 : i64} : !llvm.ptr -> i8
    %349 = arith.extui %348 : i8 to i32
    %c128_i32_90 = arith.constant 128 : i32
    %350 = arith.cmpi eq, %349, %c128_i32_90 : i32
    %351 = arith.extui %350 : i1 to i32
    %c0_i32_91 = arith.constant 0 : i32
    %352 = arith.cmpi eq, %351, %c0_i32_91 : i32
    %353 = arith.extui %352 : i1 to i32
    %c0_i32_92 = arith.constant 0 : i32
    %354 = arith.cmpi ne, %353, %c0_i32_92 : i32
    cf.cond_br %354, ^bb62, ^bb63
  ^bb61:  // 2 preds: ^bb70, ^bb81
    %c1_i32_93 = arith.constant 1 : i32
    llvm.store %c1_i32_93, %15 : i32, !llvm.ptr
    %355 = llvm.load %8 : !llvm.ptr -> i32
    %c128_i32_94 = arith.constant 128 : i32
    %356 = arith.cmpi ult, %355, %c128_i32_94 : i32
    %357 = arith.extui %356 : i1 to i32
    %c0_i32_95 = arith.constant 0 : i32
    %358 = arith.cmpi ne, %357, %c0_i32_95 : i32
    cf.cond_br %358, ^bb82, ^bb83
  ^bb62:  // pred: ^bb60
    %359 = llvm.load %5 : !llvm.ptr -> i32
    %360 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32_96 = arith.constant 4 : i32
    %361 = arith.addi %360, %c4_i32_96 : i32
    %362 = llvm.load %3 : !llvm.ptr -> i32
    %c14_i64_97 = arith.constant 14 : i64
    %363 = arith.extui %362 : i32 to i64
    %364 = arith.addi %363, %c14_i64_97 : i64
    %365 = llvm.getelementptr %21[%364] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %366 = llvm.load volatile %365 {alignment = 1 : i64} : !llvm.ptr -> i8
    %367 = arith.extui %366 : i8 to i32
    llvm.store %367, %13 : i32, !llvm.ptr
    %368 = arith.addi %361, %367 : i32
    %369 = llvm.load %3 : !llvm.ptr -> i32
    %c15_i64_98 = arith.constant 15 : i64
    %370 = arith.extui %369 : i32 to i64
    %371 = arith.addi %370, %c15_i64_98 : i64
    %372 = llvm.getelementptr %21[%371] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %373 = llvm.load volatile %372 {alignment = 1 : i64} : !llvm.ptr -> i8
    %374 = arith.extui %373 : i8 to i32
    %375 = llvm.load %13 : !llvm.ptr -> i32
    %376 = arith.subi %374, %375 : i32
    %377 = llvm.load %15 : !llvm.ptr -> i32
    %378 = arith.cmpi ult, %377, %39 : i32
    cf.cond_br %378, ^bb73, ^bb74
  ^bb63:  // pred: ^bb60
    %379 = llvm.load %5 : !llvm.ptr -> i32
    %380 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %381 = arith.extui %380 : i32 to i64
    %382 = arith.addi %381, %c8_i64 : i64
    %383 = llvm.getelementptr %21[%382] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %384 = llvm.load volatile %383 {alignment = 1 : i64} : !llvm.ptr -> i32
    %385 = llvm.load %7 : !llvm.ptr -> i32
    %386 = arith.cmpi ult, %385, %36 : i32
    cf.cond_br %386, ^bb64, ^bb65
  ^bb64:  // 2 preds: ^bb63, ^bb65
    %387 = llvm.getelementptr inbounds %34[%385] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %388 = llvm.load %387 : !llvm.ptr -> !llvm.ptr
    %389 = llvm.ptrtoint %388 : !llvm.ptr to i64
    %c0_i64_99 = arith.constant 0 : i64
    %390 = arith.cmpi eq, %389, %c0_i64_99 : i64
    cf.cond_br %390, ^bb67, ^bb66
  ^bb65:  // pred: ^bb63
    %c3_i32_100 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_100) : (i32) -> ()
    cf.br ^bb64
  ^bb66:  // 2 preds: ^bb64, ^bb67
    %391 = llvm.getelementptr %388[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %392 = llvm.getelementptr %388[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %393 = llvm.getelementptr %388[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %394 = llvm.load %391 : !llvm.ptr -> !llvm.ptr
    %395 = llvm.load %393 : !llvm.ptr -> !llvm.ptr
    %396 = llvm.ptrtoint %394 : !llvm.ptr to i64
    %c0_i64_101 = arith.constant 0 : i64
    %397 = arith.cmpi eq, %396, %c0_i64_101 : i64
    cf.cond_br %397, ^bb69, ^bb68
  ^bb67:  // pred: ^bb64
    %c4_i32_102 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_102) : (i32) -> ()
    cf.br ^bb66
  ^bb68:  // 2 preds: ^bb66, ^bb69
    %398 = llvm.load %392 : !llvm.ptr -> i32
    %399 = arith.cmpi ne, %23, %398 : i32
    cf.cond_br %399, ^bb71, ^bb70
  ^bb69:  // pred: ^bb66
    %c3_i32_103 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_103) : (i32) -> ()
    cf.br ^bb68
  ^bb70:  // 2 preds: ^bb68, ^bb71
    %400 = llvm.call %394(%395, %379, %384) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_104 = arith.constant 0 : i32
    %401 = arith.cmpi eq, %400, %c0_i32_104 : i32
    %402 = arith.extui %401 : i1 to i32
    %c0_i32_105 = arith.constant 0 : i32
    %403 = arith.cmpi ne, %402, %c0_i32_105 : i32
    cf.cond_br %403, ^bb61, ^bb72
  ^bb71:  // pred: ^bb68
    %c5_i32_106 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_106) : (i32) -> ()
    cf.br ^bb70
  ^bb72:  // pred: ^bb70
    cf.br ^bb35
  ^bb73:  // 2 preds: ^bb62, ^bb74
    %404 = llvm.getelementptr inbounds %37[%377] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %405 = llvm.load %404 : !llvm.ptr -> !llvm.ptr
    %406 = llvm.ptrtoint %405 : !llvm.ptr to i64
    %c0_i64_107 = arith.constant 0 : i64
    %407 = arith.cmpi eq, %406, %c0_i64_107 : i64
    cf.cond_br %407, ^bb76, ^bb75
  ^bb74:  // pred: ^bb62
    %c3_i32_108 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_108) : (i32) -> ()
    cf.br ^bb73
  ^bb75:  // 2 preds: ^bb73, ^bb76
    %408 = llvm.getelementptr %405[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %409 = llvm.getelementptr %405[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %410 = llvm.getelementptr %405[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %411 = llvm.load %408 : !llvm.ptr -> !llvm.ptr
    %412 = llvm.load %410 : !llvm.ptr -> !llvm.ptr
    %413 = llvm.ptrtoint %411 : !llvm.ptr to i64
    %c0_i64_109 = arith.constant 0 : i64
    %414 = arith.cmpi eq, %413, %c0_i64_109 : i64
    cf.cond_br %414, ^bb78, ^bb77
  ^bb76:  // pred: ^bb73
    %c4_i32_110 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_110) : (i32) -> ()
    cf.br ^bb75
  ^bb77:  // 2 preds: ^bb75, ^bb78
    %415 = llvm.load %409 : !llvm.ptr -> i32
    %416 = arith.cmpi ne, %30, %415 : i32
    cf.cond_br %416, ^bb80, ^bb79
  ^bb78:  // pred: ^bb75
    %c3_i32_111 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_111) : (i32) -> ()
    cf.br ^bb77
  ^bb79:  // 2 preds: ^bb77, ^bb80
    %417 = llvm.call %411(%412, %359, %368, %376) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_112 = arith.constant 0 : i32
    %418 = arith.cmpi ne, %417, %c0_i32_112 : i32
    cf.cond_br %418, ^bb35, ^bb81
  ^bb80:  // pred: ^bb77
    %c5_i32_113 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_113) : (i32) -> ()
    cf.br ^bb79
  ^bb81:  // pred: ^bb79
    cf.br ^bb61
  ^bb82:  // 3 preds: ^bb61, ^bb83, ^bb84
    %419 = llvm.load %15 : !llvm.ptr -> i32
    %420 = llvm.load %11 : !llvm.ptr -> i32
    %421 = arith.addi %419, %420 : i32
    %422 = llvm.load %2 : !llvm.ptr -> i32
    %423 = arith.addi %421, %422 : i32
    llvm.store %423, %9 : i32, !llvm.ptr
    cf.br ^bb36
  ^bb83:  // pred: ^bb61
    %c2_i32_114 = arith.constant 2 : i32
    llvm.store %c2_i32_114, %15 : i32, !llvm.ptr
    %424 = llvm.load %8 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %425 = arith.cmpi ult, %424, %c2048_i32 : i32
    %426 = arith.extui %425 : i1 to i32
    %c0_i32_115 = arith.constant 0 : i32
    %427 = arith.cmpi ne, %426, %c0_i32_115 : i32
    cf.cond_br %427, ^bb82, ^bb84
  ^bb84:  // pred: ^bb83
    %c3_i32_116 = arith.constant 3 : i32
    %c4_i32_117 = arith.constant 4 : i32
    %428 = llvm.load %8 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %429 = arith.cmpi ult, %428, %c65536_i32 : i32
    %430 = arith.extui %429 : i1 to i32
    %c0_i32_118 = arith.constant 0 : i32
    %431 = arith.cmpi ne, %430, %c0_i32_118 : i32
    %432 = arith.select %431, %c3_i32_116, %c4_i32_117 : i32
    llvm.store %432, %15 : i32, !llvm.ptr
    cf.br ^bb82
  ^bb85:  // 3 preds: ^bb36, ^bb86, ^bb87
    %433 = llvm.load %15 : !llvm.ptr -> i32
    %434 = llvm.load %11 : !llvm.ptr -> i32
    %435 = arith.addi %433, %434 : i32
    llvm.store %435, %8 : i32, !llvm.ptr
    %436 = llvm.load %2 : !llvm.ptr -> i32
    %437 = arith.addi %435, %436 : i32
    llvm.store %437, %11 : i32, !llvm.ptr
    %438 = llvm.load %14 : !llvm.ptr -> i32
    %439 = llvm.load %12 : !llvm.ptr -> i32
    %440 = arith.subi %438, %439 : i32
    llvm.store %440, %13 : i32, !llvm.ptr
    %c0_i32_119 = arith.constant 0 : i32
    %441 = arith.cmpi eq, %440, %c0_i32_119 : i32
    %442 = arith.extui %441 : i1 to i32
    %c0_i32_120 = arith.constant 0 : i32
    %443 = arith.cmpi ne, %442, %c0_i32_120 : i32
    cf.cond_br %443, ^bb17, ^bb88
  ^bb86:  // pred: ^bb36
    %c2_i32_121 = arith.constant 2 : i32
    llvm.store %c2_i32_121, %15 : i32, !llvm.ptr
    %444 = llvm.load %8 : !llvm.ptr -> i32
    %c2048_i32_122 = arith.constant 2048 : i32
    %445 = arith.cmpi ult, %444, %c2048_i32_122 : i32
    %446 = arith.extui %445 : i1 to i32
    %c0_i32_123 = arith.constant 0 : i32
    %447 = arith.cmpi ne, %446, %c0_i32_123 : i32
    cf.cond_br %447, ^bb85, ^bb87
  ^bb87:  // pred: ^bb86
    %c3_i32_124 = arith.constant 3 : i32
    %c4_i32_125 = arith.constant 4 : i32
    %448 = llvm.load %8 : !llvm.ptr -> i32
    %c65536_i32_126 = arith.constant 65536 : i32
    %449 = arith.cmpi ult, %448, %c65536_i32_126 : i32
    %450 = arith.extui %449 : i1 to i32
    %c0_i32_127 = arith.constant 0 : i32
    %451 = arith.cmpi ne, %450, %c0_i32_127 : i32
    %452 = arith.select %451, %c3_i32_124, %c4_i32_125 : i32
    llvm.store %452, %15 : i32, !llvm.ptr
    cf.br ^bb85
  ^bb88:  // pred: ^bb85
    cf.br ^bb20
  ^bb89:  // 5 preds: ^bb16, ^bb93, ^bb94, ^bb101, ^bb102
    %453 = llvm.load %0 : !llvm.ptr -> i32
    %454 = llvm.load %1 : !llvm.ptr -> i32
    %455 = llvm.load %9 : !llvm.ptr -> i32
    %456 = llvm.load %2 : !llvm.ptr -> i32
    %c1051460_i32 = arith.constant 1051460 : i32
    call @f190(%arg0, %453, %454, %455, %456, %c1051460_i32) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32_128 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_128) : (i32) -> ()
    llvm.unreachable
  ^bb90:  // pred: ^bb16
    %c0_i32_129 = arith.constant 0 : i32
    llvm.store %c0_i32_129, %8 : i32, !llvm.ptr
    %457 = llvm.load %9 : !llvm.ptr -> i32
    %c0_i32_130 = arith.constant 0 : i32
    %458 = arith.cmpi eq, %457, %c0_i32_130 : i32
    %459 = arith.extui %458 : i1 to i32
    %c0_i32_131 = arith.constant 0 : i32
    %460 = arith.cmpi ne, %459, %c0_i32_131 : i32
    cf.cond_br %460, ^bb91, ^bb92
  ^bb91:  // 3 preds: ^bb90, ^bb95, ^bb96
    %461 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_132 = arith.constant 0 : i32
    %462 = arith.cmpi ne, %461, %c0_i32_132 : i32
    cf.cond_br %462, ^bb97, ^bb98
  ^bb92:  // pred: ^bb90
    %463 = llvm.load %9 : !llvm.ptr -> i32
    %464 = llvm.load %1 : !llvm.ptr -> i32
    %465 = arith.cmpi uge, %463, %464 : i32
    %466 = arith.extui %465 : i1 to i32
    %c0_i32_133 = arith.constant 0 : i32
    %467 = arith.cmpi ne, %466, %c0_i32_133 : i32
    cf.cond_br %467, ^bb93, ^bb94
  ^bb93:  // pred: ^bb92
    %468 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %468, %8 : i32, !llvm.ptr
    %469 = llvm.load %9 : !llvm.ptr -> i32
    %470 = llvm.load %1 : !llvm.ptr -> i32
    %471 = arith.cmpi eq, %469, %470 : i32
    %472 = arith.extui %471 : i1 to i32
    %c0_i32_134 = arith.constant 0 : i32
    %473 = arith.cmpi eq, %472, %c0_i32_134 : i32
    %474 = arith.extui %473 : i1 to i32
    %c0_i32_135 = arith.constant 0 : i32
    %475 = arith.cmpi ne, %474, %c0_i32_135 : i32
    cf.cond_br %475, ^bb89, ^bb96
  ^bb94:  // pred: ^bb92
    %476 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %476, %8 : i32, !llvm.ptr
    %477 = llvm.load %0 : !llvm.ptr -> i32
    %478 = llvm.load %9 : !llvm.ptr -> i32
    %479 = arith.addi %477, %478 : i32
    %c0_i64_136 = arith.constant 0 : i64
    %480 = arith.extui %479 : i32 to i64
    %481 = arith.addi %480, %c0_i64_136 : i64
    %482 = llvm.getelementptr %21[%481] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %483 = llvm.load volatile %482 {alignment = 1 : i64} : !llvm.ptr -> i8
    %484 = arith.extsi %483 : i8 to i32
    %c-65_i32_137 = arith.constant -65 : i32
    %485 = arith.cmpi sle, %484, %c-65_i32_137 : i32
    %486 = arith.extui %485 : i1 to i32
    %c0_i32_138 = arith.constant 0 : i32
    %487 = arith.cmpi ne, %486, %c0_i32_138 : i32
    cf.cond_br %487, ^bb89, ^bb95
  ^bb95:  // pred: ^bb94
    cf.br ^bb91
  ^bb96:  // pred: ^bb93
    cf.br ^bb91
  ^bb97:  // pred: ^bb91
    %488 = llvm.load %2 : !llvm.ptr -> i32
    %489 = llvm.load %1 : !llvm.ptr -> i32
    %490 = arith.cmpi uge, %488, %489 : i32
    %491 = arith.extui %490 : i1 to i32
    %c0_i32_139 = arith.constant 0 : i32
    %492 = arith.cmpi ne, %491, %c0_i32_139 : i32
    cf.cond_br %492, ^bb99, ^bb100
  ^bb98:  // pred: ^bb91
    %c0_i32_140 = arith.constant 0 : i32
    llvm.store %c0_i32_140, %2 : i32, !llvm.ptr
    cf.br ^bb13
  ^bb99:  // pred: ^bb97
    %493 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %493, %9 : i32, !llvm.ptr
    %494 = llvm.load %2 : !llvm.ptr -> i32
    %495 = llvm.load %1 : !llvm.ptr -> i32
    %496 = arith.cmpi eq, %494, %495 : i32
    %497 = arith.extui %496 : i1 to i32
    %c0_i32_141 = arith.constant 0 : i32
    %498 = arith.cmpi ne, %497, %c0_i32_141 : i32
    cf.cond_br %498, ^bb13, ^bb102
  ^bb100:  // pred: ^bb97
    %499 = llvm.load %8 : !llvm.ptr -> i32
    llvm.store %499, %9 : i32, !llvm.ptr
    %500 = llvm.load %0 : !llvm.ptr -> i32
    %501 = llvm.load %2 : !llvm.ptr -> i32
    %502 = arith.addi %500, %501 : i32
    %c0_i64_142 = arith.constant 0 : i64
    %503 = arith.extui %502 : i32 to i64
    %504 = arith.addi %503, %c0_i64_142 : i64
    %505 = llvm.getelementptr %21[%504] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %506 = llvm.load volatile %505 {alignment = 1 : i64} : !llvm.ptr -> i8
    %507 = arith.extsi %506 : i8 to i32
    %c-65_i32_143 = arith.constant -65 : i32
    %508 = arith.cmpi sgt, %507, %c-65_i32_143 : i32
    %509 = arith.extui %508 : i1 to i32
    %c0_i32_144 = arith.constant 0 : i32
    %510 = arith.cmpi ne, %509, %c0_i32_144 : i32
    cf.cond_br %510, ^bb13, ^bb101
  ^bb101:  // pred: ^bb100
    cf.br ^bb89
  ^bb102:  // pred: ^bb99
    cf.br ^bb89
  ^bb103:  // 2 preds: ^bb13, ^bb104
    %511 = llvm.getelementptr inbounds %40[%95] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %512 = llvm.load %511 : !llvm.ptr -> !llvm.ptr
    %513 = llvm.ptrtoint %512 : !llvm.ptr to i64
    %c0_i64_145 = arith.constant 0 : i64
    %514 = arith.cmpi eq, %513, %c0_i64_145 : i64
    cf.cond_br %514, ^bb106, ^bb105
  ^bb104:  // pred: ^bb13
    %c3_i32_146 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_146) : (i32) -> ()
    cf.br ^bb103
  ^bb105:  // 2 preds: ^bb103, ^bb106
    %515 = llvm.getelementptr %512[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %516 = llvm.getelementptr %512[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %517 = llvm.getelementptr %512[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %518 = llvm.load %515 : !llvm.ptr -> !llvm.ptr
    %519 = llvm.load %517 : !llvm.ptr -> !llvm.ptr
    %520 = llvm.ptrtoint %518 : !llvm.ptr to i64
    %c0_i64_147 = arith.constant 0 : i64
    %521 = arith.cmpi eq, %520, %c0_i64_147 : i64
    cf.cond_br %521, ^bb108, ^bb107
  ^bb106:  // pred: ^bb103
    %c4_i32_148 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_148) : (i32) -> ()
    cf.br ^bb105
  ^bb107:  // 2 preds: ^bb105, ^bb108
    %522 = llvm.load %516 : !llvm.ptr -> i32
    %523 = arith.cmpi ne, %30, %522 : i32
    cf.cond_br %523, ^bb110, ^bb109
  ^bb108:  // pred: ^bb105
    %c3_i32_149 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_149) : (i32) -> ()
    cf.br ^bb107
  ^bb109:  // 2 preds: ^bb107, ^bb110
    %524 = llvm.call %518(%519, %84, %87, %90) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_150 = arith.constant 0 : i32
    %525 = arith.cmpi ne, %524, %c0_i32_150 : i32
    cf.cond_br %525, ^bb3, ^bb111
  ^bb110:  // pred: ^bb107
    %c5_i32_151 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_151) : (i32) -> ()
    cf.br ^bb109
  ^bb111:  // pred: ^bb109
    %526 = llvm.load %5 : !llvm.ptr -> i32
    %c34_i32_152 = arith.constant 34 : i32
    %527 = llvm.load %7 : !llvm.ptr -> i32
    %528 = arith.cmpi ult, %527, %45 : i32
    cf.cond_br %528, ^bb112, ^bb113
  ^bb112:  // 2 preds: ^bb111, ^bb113
    %529 = llvm.getelementptr inbounds %43[%527] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %530 = llvm.load %529 : !llvm.ptr -> !llvm.ptr
    %531 = llvm.ptrtoint %530 : !llvm.ptr to i64
    %c0_i64_153 = arith.constant 0 : i64
    %532 = arith.cmpi eq, %531, %c0_i64_153 : i64
    cf.cond_br %532, ^bb115, ^bb114
  ^bb113:  // pred: ^bb111
    %c3_i32_154 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_154) : (i32) -> ()
    cf.br ^bb112
  ^bb114:  // 2 preds: ^bb112, ^bb115
    %533 = llvm.getelementptr %530[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %534 = llvm.getelementptr %530[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %535 = llvm.getelementptr %530[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %536 = llvm.load %533 : !llvm.ptr -> !llvm.ptr
    %537 = llvm.load %535 : !llvm.ptr -> !llvm.ptr
    %538 = llvm.ptrtoint %536 : !llvm.ptr to i64
    %c0_i64_155 = arith.constant 0 : i64
    %539 = arith.cmpi eq, %538, %c0_i64_155 : i64
    cf.cond_br %539, ^bb117, ^bb116
  ^bb115:  // pred: ^bb112
    %c4_i32_156 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_156) : (i32) -> ()
    cf.br ^bb114
  ^bb116:  // 2 preds: ^bb114, ^bb117
    %540 = llvm.load %534 : !llvm.ptr -> i32
    %541 = arith.cmpi ne, %23, %540 : i32
    cf.cond_br %541, ^bb119, ^bb118
  ^bb117:  // pred: ^bb114
    %c3_i32_157 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_157) : (i32) -> ()
    cf.br ^bb116
  ^bb118:  // 2 preds: ^bb116, ^bb119
    %542 = llvm.call %536(%537, %526, %c34_i32_152) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    llvm.store %542, %4 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb119:  // pred: ^bb116
    %c5_i32_158 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_158) : (i32) -> ()
    cf.br ^bb118
  }
  func.func @f190(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %7 = llvm.load %2 : !llvm.ptr -> i32
    %8 = llvm.load %3 : !llvm.ptr -> i32
    %9 = llvm.load %4 : !llvm.ptr -> i32
    call @f194(%arg0, %5, %6, %7, %8, %9) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f191(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %5 = llvm.load %1 : !llvm.ptr -> i32
    %6 = call @f160(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f192(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.getelementptr %8[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> i32
    %13 = llvm.getelementptr %arg0[928] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %arg0[936] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %14 : !llvm.ptr -> i64
    %17 = arith.trunci %16 : i64 to i32
    %18 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %19 = llvm.load %14 : !llvm.ptr -> i64
    %20 = arith.trunci %19 : i64 to i32
    %21 = llvm.getelementptr %arg0[12] : (!llvm.ptr) -> !llvm.ptr, i8
    %22 = llvm.load %21 : !llvm.ptr -> i32
    %23 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %24 = llvm.load %14 : !llvm.ptr -> i64
    %25 = arith.trunci %24 : i64 to i32
    %26 = llvm.load %13 : !llvm.ptr -> !llvm.ptr
    %27 = llvm.load %14 : !llvm.ptr -> i64
    %28 = arith.trunci %27 : i64 to i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %29 = llvm.load %7 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %30 = arith.subi %29, %c16_i32 : i32
    llvm.store %30, %2 : i32, !llvm.ptr
    llvm.store %30, %7 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    llvm.store %c1_i32_5, %3 : i32, !llvm.ptr
    %31 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %32 = arith.extui %31 : i32 to i64
    %33 = arith.addi %32, %c20_i64 : i64
    %34 = llvm.getelementptr %10[%33] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %35 = llvm.load volatile %34 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %35, %4 : i32, !llvm.ptr
    %c39_i32 = arith.constant 39 : i32
    %36 = llvm.load %1 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %37 = arith.extui %36 : i32 to i64
    %38 = arith.addi %37, %c24_i64 : i64
    %39 = llvm.getelementptr %10[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %40 = llvm.load volatile %39 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %40, %5 : i32, !llvm.ptr
    %c16_i64 = arith.constant 16 : i64
    %41 = arith.extui %40 : i32 to i64
    %42 = arith.addi %41, %c16_i64 : i64
    %43 = llvm.getelementptr %10[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = llvm.load volatile %43 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %44, %1 : i32, !llvm.ptr
    %45 = arith.cmpi ult, %44, %17 : i32
    cf.cond_br %45, ^bb4, ^bb5
  ^bb2(%46: i32):  // pred: ^bb3
    return %46 : i32
  ^bb3:  // 4 preds: ^bb10, ^bb24, ^bb31, ^bb40
    %47 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32_6 = arith.constant 16 : i32
    %48 = arith.addi %47, %c16_i32_6 : i32
    llvm.store %48, %7 : i32, !llvm.ptr
    %49 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb2(%49 : i32)
  ^bb4:  // 2 preds: ^bb1, ^bb5
    %50 = llvm.getelementptr inbounds %15[%44] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %51 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.ptrtoint %51 : !llvm.ptr to i64
    %c0_i64 = arith.constant 0 : i64
    %53 = arith.cmpi eq, %52, %c0_i64 : i64
    cf.cond_br %53, ^bb7, ^bb6
  ^bb5:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32) : (i32) -> ()
    cf.br ^bb4
  ^bb6:  // 2 preds: ^bb4, ^bb7
    %54 = llvm.getelementptr %51[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %55 = llvm.getelementptr %51[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %56 = llvm.getelementptr %51[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %57 = llvm.load %54 : !llvm.ptr -> !llvm.ptr
    %58 = llvm.load %56 : !llvm.ptr -> !llvm.ptr
    %59 = llvm.ptrtoint %57 : !llvm.ptr to i64
    %c0_i64_7 = arith.constant 0 : i64
    %60 = arith.cmpi eq, %59, %c0_i64_7 : i64
    cf.cond_br %60, ^bb9, ^bb8
  ^bb7:  // pred: ^bb4
    %c4_i32 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32) : (i32) -> ()
    cf.br ^bb6
  ^bb8:  // 2 preds: ^bb6, ^bb9
    %61 = llvm.load %55 : !llvm.ptr -> i32
    %62 = arith.cmpi ne, %12, %61 : i32
    cf.cond_br %62, ^bb11, ^bb10
  ^bb9:  // pred: ^bb6
    %c3_i32_8 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_8) : (i32) -> ()
    cf.br ^bb8
  ^bb10:  // 2 preds: ^bb8, ^bb11
    %63 = llvm.call %57(%58, %35, %c39_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %64 = arith.cmpi ne, %63, %c0_i32_9 : i32
    cf.cond_br %64, ^bb3, ^bb12
  ^bb11:  // pred: ^bb8
    %c5_i32 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32) : (i32) -> ()
    cf.br ^bb10
  ^bb12:  // pred: ^bb10
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_10 = arith.constant 4 : i32
    %66 = arith.addi %65, %c4_i32_10 : i32
    %67 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_11 = arith.constant 0 : i64
    %68 = arith.extui %67 : i32 to i64
    %69 = arith.addi %68, %c0_i64_11 : i64
    %70 = llvm.getelementptr %10[%69] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %71 = llvm.load volatile %70 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c257_i32 = arith.constant 257 : i32
    call @f166(%arg0, %66, %71, %c257_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %72 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %73 = arith.extui %72 : i32 to i64
    %74 = arith.addi %73, %c4_i64 : i64
    %75 = llvm.getelementptr %10[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = llvm.load volatile %75 {alignment = 1 : i64} : !llvm.ptr -> i8
    %77 = arith.extui %76 : i8 to i32
    %c128_i32 = arith.constant 128 : i32
    %78 = arith.cmpi eq, %77, %c128_i32 : i32
    %79 = arith.extui %78 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %80 = arith.cmpi eq, %79, %c0_i32_12 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_13 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_13 : i32
    cf.cond_br %82, ^bb14, ^bb15
  ^bb13:  // 2 preds: ^bb22, ^bb33
    %83 = llvm.load %4 : !llvm.ptr -> i32
    %c39_i32_14 = arith.constant 39 : i32
    %84 = llvm.load %1 : !llvm.ptr -> i32
    %85 = arith.cmpi ult, %84, %28 : i32
    cf.cond_br %85, ^bb34, ^bb35
  ^bb14:  // pred: ^bb12
    %86 = llvm.load %4 : !llvm.ptr -> i32
    %87 = llvm.load %2 : !llvm.ptr -> i32
    %c4_i32_15 = arith.constant 4 : i32
    %88 = arith.addi %87, %c4_i32_15 : i32
    %89 = llvm.load %2 : !llvm.ptr -> i32
    %c14_i64 = arith.constant 14 : i64
    %90 = arith.extui %89 : i32 to i64
    %91 = arith.addi %90, %c14_i64 : i64
    %92 = llvm.getelementptr %10[%91] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %93 = llvm.load volatile %92 {alignment = 1 : i64} : !llvm.ptr -> i8
    %94 = arith.extui %93 : i8 to i32
    llvm.store %94, %0 : i32, !llvm.ptr
    %95 = arith.addi %88, %94 : i32
    %96 = llvm.load %2 : !llvm.ptr -> i32
    %c15_i64 = arith.constant 15 : i64
    %97 = arith.extui %96 : i32 to i64
    %98 = arith.addi %97, %c15_i64 : i64
    %99 = llvm.getelementptr %10[%98] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %100 = llvm.load volatile %99 {alignment = 1 : i64} : !llvm.ptr -> i8
    %101 = arith.extui %100 : i8 to i32
    %102 = llvm.load %0 : !llvm.ptr -> i32
    %103 = arith.subi %101, %102 : i32
    %104 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %105 = arith.extui %104 : i32 to i64
    %106 = arith.addi %105, %c12_i64 : i64
    %107 = llvm.getelementptr %10[%106] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %108 = llvm.load volatile %107 {alignment = 1 : i64} : !llvm.ptr -> i32
    %109 = arith.cmpi ult, %108, %25 : i32
    cf.cond_br %109, ^bb25, ^bb26
  ^bb15:  // pred: ^bb12
    %110 = llvm.load %4 : !llvm.ptr -> i32
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %112 = arith.extui %111 : i32 to i64
    %113 = arith.addi %112, %c8_i64 : i64
    %114 = llvm.getelementptr %10[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %115 = llvm.load volatile %114 {alignment = 1 : i64} : !llvm.ptr -> i32
    %116 = llvm.load %1 : !llvm.ptr -> i32
    %117 = arith.cmpi ult, %116, %20 : i32
    cf.cond_br %117, ^bb16, ^bb17
  ^bb16:  // 2 preds: ^bb15, ^bb17
    %118 = llvm.getelementptr inbounds %18[%116] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %119 = llvm.load %118 : !llvm.ptr -> !llvm.ptr
    %120 = llvm.ptrtoint %119 : !llvm.ptr to i64
    %c0_i64_16 = arith.constant 0 : i64
    %121 = arith.cmpi eq, %120, %c0_i64_16 : i64
    cf.cond_br %121, ^bb19, ^bb18
  ^bb17:  // pred: ^bb15
    %c3_i32_17 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_17) : (i32) -> ()
    cf.br ^bb16
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %122 = llvm.getelementptr %119[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %123 = llvm.getelementptr %119[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %124 = llvm.getelementptr %119[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %125 = llvm.load %122 : !llvm.ptr -> !llvm.ptr
    %126 = llvm.load %124 : !llvm.ptr -> !llvm.ptr
    %127 = llvm.ptrtoint %125 : !llvm.ptr to i64
    %c0_i64_18 = arith.constant 0 : i64
    %128 = arith.cmpi eq, %127, %c0_i64_18 : i64
    cf.cond_br %128, ^bb21, ^bb20
  ^bb19:  // pred: ^bb16
    %c4_i32_19 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_19) : (i32) -> ()
    cf.br ^bb18
  ^bb20:  // 2 preds: ^bb18, ^bb21
    %129 = llvm.load %123 : !llvm.ptr -> i32
    %130 = arith.cmpi ne, %12, %129 : i32
    cf.cond_br %130, ^bb23, ^bb22
  ^bb21:  // pred: ^bb18
    %c3_i32_20 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_20) : (i32) -> ()
    cf.br ^bb20
  ^bb22:  // 2 preds: ^bb20, ^bb23
    %131 = llvm.call %125(%126, %110, %115) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    %c0_i32_21 = arith.constant 0 : i32
    %132 = arith.cmpi eq, %131, %c0_i32_21 : i32
    %133 = arith.extui %132 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %134 = arith.cmpi ne, %133, %c0_i32_22 : i32
    cf.cond_br %134, ^bb13, ^bb24
  ^bb23:  // pred: ^bb20
    %c5_i32_23 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_23) : (i32) -> ()
    cf.br ^bb22
  ^bb24:  // pred: ^bb22
    cf.br ^bb3
  ^bb25:  // 2 preds: ^bb14, ^bb26
    %135 = llvm.getelementptr inbounds %23[%108] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %136 = llvm.load %135 : !llvm.ptr -> !llvm.ptr
    %137 = llvm.ptrtoint %136 : !llvm.ptr to i64
    %c0_i64_24 = arith.constant 0 : i64
    %138 = arith.cmpi eq, %137, %c0_i64_24 : i64
    cf.cond_br %138, ^bb28, ^bb27
  ^bb26:  // pred: ^bb14
    %c3_i32_25 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_25) : (i32) -> ()
    cf.br ^bb25
  ^bb27:  // 2 preds: ^bb25, ^bb28
    %139 = llvm.getelementptr %136[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %140 = llvm.getelementptr %136[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %141 = llvm.getelementptr %136[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %142 = llvm.load %139 : !llvm.ptr -> !llvm.ptr
    %143 = llvm.load %141 : !llvm.ptr -> !llvm.ptr
    %144 = llvm.ptrtoint %142 : !llvm.ptr to i64
    %c0_i64_26 = arith.constant 0 : i64
    %145 = arith.cmpi eq, %144, %c0_i64_26 : i64
    cf.cond_br %145, ^bb30, ^bb29
  ^bb28:  // pred: ^bb25
    %c4_i32_27 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_27) : (i32) -> ()
    cf.br ^bb27
  ^bb29:  // 2 preds: ^bb27, ^bb30
    %146 = llvm.load %140 : !llvm.ptr -> i32
    %147 = arith.cmpi ne, %22, %146 : i32
    cf.cond_br %147, ^bb32, ^bb31
  ^bb30:  // pred: ^bb27
    %c3_i32_28 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_28) : (i32) -> ()
    cf.br ^bb29
  ^bb31:  // 2 preds: ^bb29, ^bb32
    %148 = llvm.call %142(%143, %86, %95, %103) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32, i32) -> i32
    %c0_i32_29 = arith.constant 0 : i32
    %149 = arith.cmpi ne, %148, %c0_i32_29 : i32
    cf.cond_br %149, ^bb3, ^bb33
  ^bb32:  // pred: ^bb29
    %c5_i32_30 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_30) : (i32) -> ()
    cf.br ^bb31
  ^bb33:  // pred: ^bb31
    cf.br ^bb13
  ^bb34:  // 2 preds: ^bb13, ^bb35
    %150 = llvm.getelementptr inbounds %26[%84] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %151 = llvm.load %150 : !llvm.ptr -> !llvm.ptr
    %152 = llvm.ptrtoint %151 : !llvm.ptr to i64
    %c0_i64_31 = arith.constant 0 : i64
    %153 = arith.cmpi eq, %152, %c0_i64_31 : i64
    cf.cond_br %153, ^bb37, ^bb36
  ^bb35:  // pred: ^bb13
    %c3_i32_32 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_32) : (i32) -> ()
    cf.br ^bb34
  ^bb36:  // 2 preds: ^bb34, ^bb37
    %154 = llvm.getelementptr %151[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %155 = llvm.getelementptr %151[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %156 = llvm.getelementptr %151[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %157 = llvm.load %154 : !llvm.ptr -> !llvm.ptr
    %158 = llvm.load %156 : !llvm.ptr -> !llvm.ptr
    %159 = llvm.ptrtoint %157 : !llvm.ptr to i64
    %c0_i64_33 = arith.constant 0 : i64
    %160 = arith.cmpi eq, %159, %c0_i64_33 : i64
    cf.cond_br %160, ^bb39, ^bb38
  ^bb37:  // pred: ^bb34
    %c4_i32_34 = arith.constant 4 : i32
    call @dora_fn_wasm_raise_trap(%c4_i32_34) : (i32) -> ()
    cf.br ^bb36
  ^bb38:  // 2 preds: ^bb36, ^bb39
    %161 = llvm.load %155 : !llvm.ptr -> i32
    %162 = arith.cmpi ne, %12, %161 : i32
    cf.cond_br %162, ^bb41, ^bb40
  ^bb39:  // pred: ^bb36
    %c3_i32_35 = arith.constant 3 : i32
    call @dora_fn_wasm_raise_trap(%c3_i32_35) : (i32) -> ()
    cf.br ^bb38
  ^bb40:  // 2 preds: ^bb38, ^bb41
    %163 = llvm.call %157(%158, %83, %c39_i32_14) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (!llvm.ptr, i32, i32) -> i32
    llvm.store %163, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb41:  // pred: ^bb38
    %c5_i32_36 = arith.constant 5 : i32
    call @dora_fn_wasm_raise_trap(%c5_i32_36) : (i32) -> ()
    cf.br ^bb40
  }
  func.func @f193(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %4 : i64, !llvm.ptr
    %5 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.getelementptr %7[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %10 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %11 = arith.subi %10, %c48_i32 : i32
    llvm.store %11, %3 : i32, !llvm.ptr
    llvm.store %11, %6 : i32, !llvm.ptr
    %12 = llvm.load %3 : !llvm.ptr -> i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %14 = arith.extui %12 : i32 to i64
    %15 = arith.addi %14, %c4_i64 : i64
    %16 = llvm.getelementptr %9[%15] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %13, %16 {alignment = 1 : i64} : i32, !llvm.ptr
    %17 = llvm.load %3 : !llvm.ptr -> i32
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64_4 = arith.constant 0 : i64
    %19 = arith.extui %17 : i32 to i64
    %20 = arith.addi %19, %c0_i64_4 : i64
    %21 = llvm.getelementptr %9[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %18, %21 {alignment = 1 : i64} : i32, !llvm.ptr
    %22 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i32 = arith.constant 3 : i32
    %c12_i64 = arith.constant 12 : i64
    %23 = arith.extui %22 : i32 to i64
    %24 = arith.addi %23, %c12_i64 : i64
    %25 = llvm.getelementptr %9[%24] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32, %25 {alignment = 1 : i64} : i32, !llvm.ptr
    %26 = llvm.load %3 : !llvm.ptr -> i32
    %c1051692_i32 = arith.constant 1051692 : i32
    %c8_i64 = arith.constant 8 : i64
    %27 = arith.extui %26 : i32 to i64
    %28 = arith.addi %27, %c8_i64 : i64
    %29 = llvm.getelementptr %9[%28] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051692_i32, %29 {alignment = 1 : i64} : i32, !llvm.ptr
    %30 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %c20_i64 = arith.constant 20 : i64
    %31 = arith.extui %30 : i32 to i64
    %32 = arith.addi %31, %c20_i64 : i64
    %33 = llvm.getelementptr %9[%32] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c2_i64, %33 {alignment = 1 : i64} : i64, !llvm.ptr
    %34 = llvm.load %3 : !llvm.ptr -> i32
    %c51_i32 = arith.constant 51 : i32
    %35 = arith.extui %c51_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %36 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %37 = scf.if %36 -> (i64) {
      %62 = arith.shli %35, %c32_i64 : i64
      scf.yield %62 : i64
    } else {
      %c0_i64_6 = arith.constant 0 : i64
      scf.yield %c0_i64_6 : i64
    }
    llvm.store %37, %4 : i64, !llvm.ptr
    %38 = llvm.load %3 : !llvm.ptr -> i32
    %39 = arith.extui %38 : i32 to i64
    %40 = arith.ori %37, %39 : i64
    %c40_i64 = arith.constant 40 : i64
    %41 = arith.extui %34 : i32 to i64
    %42 = arith.addi %41, %c40_i64 : i64
    %43 = llvm.getelementptr %9[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %40, %43 {alignment = 1 : i64} : i64, !llvm.ptr
    %44 = llvm.load %3 : !llvm.ptr -> i32
    %45 = llvm.load %4 : !llvm.ptr -> i64
    %46 = llvm.load %3 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %47 = arith.addi %46, %c4_i32 : i32
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.ori %45, %48 : i64
    %c32_i64_5 = arith.constant 32 : i64
    %50 = arith.extui %44 : i32 to i64
    %51 = arith.addi %50, %c32_i64_5 : i64
    %52 = llvm.getelementptr %9[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %49, %52 {alignment = 1 : i64} : i64, !llvm.ptr
    %53 = llvm.load %3 : !llvm.ptr -> i32
    %54 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %55 = arith.addi %54, %c32_i32 : i32
    %c16_i64 = arith.constant 16 : i64
    %56 = arith.extui %53 : i32 to i64
    %57 = arith.addi %56, %c16_i64 : i64
    %58 = llvm.getelementptr %9[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %55, %58 {alignment = 1 : i64} : i32, !llvm.ptr
    %59 = llvm.load %3 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %60 = arith.addi %59, %c8_i32 : i32
    %61 = llvm.load %2 : !llvm.ptr -> i32
    call @f156(%arg0, %60, %61) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb2:  // no predecessors
    return
  }
  func.func @f194(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %10 : i64, !llvm.ptr
    %11 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.load %11 : !llvm.ptr -> !llvm.ptr
    %13 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %14 = llvm.getelementptr %13[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.load %14 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %16 = llvm.load %12 : !llvm.ptr -> i32
    %c112_i32 = arith.constant 112 : i32
    %17 = arith.subi %16, %c112_i32 : i32
    llvm.store %17, %5 : i32, !llvm.ptr
    llvm.store %17, %12 : i32, !llvm.ptr
    %18 = llvm.load %5 : !llvm.ptr -> i32
    %19 = llvm.load %3 : !llvm.ptr -> i32
    %c12_i64 = arith.constant 12 : i64
    %20 = arith.extui %18 : i32 to i64
    %21 = arith.addi %20, %c12_i64 : i64
    %22 = llvm.getelementptr %15[%21] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %19, %22 {alignment = 1 : i64} : i32, !llvm.ptr
    %23 = llvm.load %5 : !llvm.ptr -> i32
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %c8_i64 = arith.constant 8 : i64
    %25 = arith.extui %23 : i32 to i64
    %26 = arith.addi %25, %c8_i64 : i64
    %27 = llvm.getelementptr %15[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %24, %27 {alignment = 1 : i64} : i32, !llvm.ptr
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %c257_i32 = arith.constant 257 : i32
    %29 = arith.cmpi ult, %28, %c257_i32 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_10 : i32
    cf.cond_br %31, ^bb5, ^bb6
  ^bb2:  // no predecessors
    return
  ^bb3:  // 2 preds: ^bb5, ^bb10
    %32 = llvm.load %5 : !llvm.ptr -> i32
    %33 = llvm.load %6 : !llvm.ptr -> i32
    %c28_i64 = arith.constant 28 : i64
    %34 = arith.extui %32 : i32 to i64
    %35 = arith.addi %34, %c28_i64 : i64
    %36 = llvm.getelementptr %15[%35] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %33, %36 {alignment = 1 : i64} : i32, !llvm.ptr
    %37 = llvm.load %5 : !llvm.ptr -> i32
    %38 = llvm.load %7 : !llvm.ptr -> i32
    %c24_i64 = arith.constant 24 : i64
    %39 = arith.extui %37 : i32 to i64
    %40 = arith.addi %39, %c24_i64 : i64
    %41 = llvm.getelementptr %15[%40] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %38, %41 {alignment = 1 : i64} : i32, !llvm.ptr
    %42 = llvm.load %2 : !llvm.ptr -> i32
    %43 = llvm.load %1 : !llvm.ptr -> i32
    %44 = arith.cmpi ugt, %42, %43 : i32
    %45 = arith.extui %44 : i1 to i32
    llvm.store %45, %6 : i32, !llvm.ptr
    %c0_i32_11 = arith.constant 0 : i32
    %46 = arith.cmpi ne, %45, %c0_i32_11 : i32
    cf.cond_br %46, ^bb15, ^bb16
  ^bb4:  // pred: ^bb7
    %47 = llvm.load %0 : !llvm.ptr -> i32
    %48 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i32_12 = arith.constant 0 : i32
    %49 = llvm.load %6 : !llvm.ptr -> i32
    %50 = llvm.load %4 : !llvm.ptr -> i32
    call @f190(%arg0, %47, %48, %c0_i32_12, %49, %50) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb5:  // pred: ^bb1
    %51 = llvm.load %5 : !llvm.ptr -> i32
    %52 = llvm.load %1 : !llvm.ptr -> i32
    %c20_i64 = arith.constant 20 : i64
    %53 = arith.extui %51 : i32 to i64
    %54 = arith.addi %53, %c20_i64 : i64
    %55 = llvm.getelementptr %15[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %52, %55 {alignment = 1 : i64} : i32, !llvm.ptr
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %57 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64 = arith.constant 16 : i64
    %58 = arith.extui %56 : i32 to i64
    %59 = arith.addi %58, %c16_i64 : i64
    %60 = llvm.getelementptr %15[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %57, %60 {alignment = 1 : i64} : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    llvm.store %c0_i32_13, %6 : i32, !llvm.ptr
    %c1_i32_14 = arith.constant 1 : i32
    llvm.store %c1_i32_14, %7 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %6 : i32, !llvm.ptr
    %61 = llvm.load %0 : !llvm.ptr -> i32
    %c256_i64 = arith.constant 256 : i64
    %62 = arith.extui %61 : i32 to i64
    %63 = arith.addi %62, %c256_i64 : i64
    %64 = llvm.getelementptr %15[%63] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %65 = llvm.load volatile %64 {alignment = 1 : i64} : !llvm.ptr -> i8
    %66 = arith.extsi %65 : i8 to i32
    %c-65_i32 = arith.constant -65 : i32
    %67 = arith.cmpi sgt, %66, %c-65_i32 : i32
    %68 = arith.extui %67 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %69 = arith.cmpi ne, %68, %c0_i32_15 : i32
    cf.cond_br %69, ^bb7, ^bb8
  ^bb7:  // 3 preds: ^bb6, ^bb8, ^bb9
    %70 = llvm.load %0 : !llvm.ptr -> i32
    %71 = llvm.load %6 : !llvm.ptr -> i32
    %c253_i32 = arith.constant 253 : i32
    %72 = arith.addi %71, %c253_i32 : i32
    llvm.store %72, %6 : i32, !llvm.ptr
    %73 = arith.addi %70, %72 : i32
    %c0_i64_16 = arith.constant 0 : i64
    %74 = arith.extui %73 : i32 to i64
    %75 = arith.addi %74, %c0_i64_16 : i64
    %76 = llvm.getelementptr %15[%75] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %77 = llvm.load volatile %76 {alignment = 1 : i64} : !llvm.ptr -> i8
    %78 = arith.extsi %77 : i8 to i32
    %c-65_i32_17 = arith.constant -65 : i32
    %79 = arith.cmpi sle, %78, %c-65_i32_17 : i32
    %80 = arith.extui %79 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %81 = arith.cmpi ne, %80, %c0_i32_18 : i32
    cf.cond_br %81, ^bb4, ^bb10
  ^bb8:  // pred: ^bb6
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %6 : i32, !llvm.ptr
    %82 = llvm.load %0 : !llvm.ptr -> i32
    %c255_i64 = arith.constant 255 : i64
    %83 = arith.extui %82 : i32 to i64
    %84 = arith.addi %83, %c255_i64 : i64
    %85 = llvm.getelementptr %15[%84] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %86 = llvm.load volatile %85 {alignment = 1 : i64} : !llvm.ptr -> i8
    %87 = arith.extsi %86 : i8 to i32
    %c-65_i32_19 = arith.constant -65 : i32
    %88 = arith.cmpi sgt, %87, %c-65_i32_19 : i32
    %89 = arith.extui %88 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %90 = arith.cmpi ne, %89, %c0_i32_20 : i32
    cf.cond_br %90, ^bb7, ^bb9
  ^bb9:  // pred: ^bb8
    %91 = llvm.load %0 : !llvm.ptr -> i32
    %c254_i64 = arith.constant 254 : i64
    %92 = arith.extui %91 : i32 to i64
    %93 = arith.addi %92, %c254_i64 : i64
    %94 = llvm.getelementptr %15[%93] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %95 = llvm.load volatile %94 {alignment = 1 : i64} : !llvm.ptr -> i8
    %96 = arith.extsi %95 : i8 to i32
    %c-65_i32_21 = arith.constant -65 : i32
    %97 = arith.cmpi sgt, %96, %c-65_i32_21 : i32
    %98 = arith.extui %97 : i1 to i32
    llvm.store %98, %6 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb10:  // pred: ^bb7
    %99 = llvm.load %5 : !llvm.ptr -> i32
    %100 = llvm.load %6 : !llvm.ptr -> i32
    %c20_i64_22 = arith.constant 20 : i64
    %101 = arith.extui %99 : i32 to i64
    %102 = arith.addi %101, %c20_i64_22 : i64
    %103 = llvm.getelementptr %15[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %100, %103 {alignment = 1 : i64} : i32, !llvm.ptr
    %104 = llvm.load %5 : !llvm.ptr -> i32
    %105 = llvm.load %0 : !llvm.ptr -> i32
    %c16_i64_23 = arith.constant 16 : i64
    %106 = arith.extui %104 : i32 to i64
    %107 = arith.addi %106, %c16_i64_23 : i64
    %108 = llvm.getelementptr %15[%107] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %105, %108 {alignment = 1 : i64} : i32, !llvm.ptr
    %c5_i32 = arith.constant 5 : i32
    llvm.store %c5_i32, %6 : i32, !llvm.ptr
    %c1051716_i32 = arith.constant 1051716 : i32
    llvm.store %c1051716_i32, %7 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb11:  // 2 preds: ^bb41, ^bb43
    %109 = llvm.load %0 : !llvm.ptr -> i32
    %110 = llvm.load %1 : !llvm.ptr -> i32
    %111 = llvm.load %2 : !llvm.ptr -> i32
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %113 = llvm.load %4 : !llvm.ptr -> i32
    call @f190(%arg0, %109, %110, %111, %112, %113) : (!llvm.ptr, i32, i32, i32, i32, i32) -> ()
    %c9_i32_24 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_24) : (i32) -> ()
    llvm.unreachable
  ^bb12:  // 2 preds: ^bb39, ^bb52
    %114 = llvm.load %4 : !llvm.ptr -> i32
    call @f173(%arg0, %114) : (!llvm.ptr, i32) -> ()
    %c9_i32_25 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_25) : (i32) -> ()
    llvm.unreachable
  ^bb13:  // pred: ^bb23
    %115 = llvm.load %2 : !llvm.ptr -> i32
    %116 = llvm.load %6 : !llvm.ptr -> i32
    %c1051968_i32 = arith.constant 1051968 : i32
    call @f172(%arg0, %115, %116, %c1051968_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_26 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_26) : (i32) -> ()
    llvm.unreachable
  ^bb14:  // pred: ^bb17
    %117 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %c52_i64 = arith.constant 52 : i64
    %118 = arith.extui %117 : i32 to i64
    %119 = arith.addi %118, %c52_i64 : i64
    %120 = llvm.getelementptr %15[%119] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i32, %120 {alignment = 1 : i64} : i32, !llvm.ptr
    %121 = llvm.load %5 : !llvm.ptr -> i32
    %c1051756_i32 = arith.constant 1051756 : i32
    %c48_i64 = arith.constant 48 : i64
    %122 = arith.extui %121 : i32 to i64
    %123 = arith.addi %122, %c48_i64 : i64
    %124 = llvm.getelementptr %15[%123] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051756_i32, %124 {alignment = 1 : i64} : i32, !llvm.ptr
    %125 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i64 = arith.constant 4 : i64
    %c60_i64 = arith.constant 60 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c60_i64 : i64
    %128 = llvm.getelementptr %15[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c4_i64, %128 {alignment = 1 : i64} : i64, !llvm.ptr
    %129 = llvm.load %5 : !llvm.ptr -> i32
    %c79_i32 = arith.constant 79 : i32
    %130 = arith.extui %c79_i32 : i32 to i64
    %c32_i64 = arith.constant 32 : i64
    %c63_i64 = arith.constant 63 : i64
    %131 = arith.cmpi ule, %c32_i64, %c63_i64 : i64
    %132 = scf.if %131 -> (i64) {
      %598 = arith.shli %130, %c32_i64 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_149 = arith.constant 0 : i64
      scf.yield %c0_i64_149 : i64
    }
    llvm.store %132, %10 : i64, !llvm.ptr
    %133 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32 = arith.constant 24 : i32
    %134 = arith.addi %133, %c24_i32 : i32
    %135 = arith.extui %134 : i32 to i64
    %136 = arith.ori %132, %135 : i64
    %c96_i64 = arith.constant 96 : i64
    %137 = arith.extui %129 : i32 to i64
    %138 = arith.addi %137, %c96_i64 : i64
    %139 = llvm.getelementptr %15[%138] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %136, %139 {alignment = 1 : i64} : i64, !llvm.ptr
    %140 = llvm.load %5 : !llvm.ptr -> i32
    %141 = llvm.load %10 : !llvm.ptr -> i64
    %142 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %143 = arith.addi %142, %c16_i32 : i32
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.ori %141, %144 : i64
    %c88_i64 = arith.constant 88 : i64
    %146 = arith.extui %140 : i32 to i64
    %147 = arith.addi %146, %c88_i64 : i64
    %148 = llvm.getelementptr %15[%147] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %145, %148 {alignment = 1 : i64} : i64, !llvm.ptr
    %149 = llvm.load %5 : !llvm.ptr -> i32
    %c51_i32 = arith.constant 51 : i32
    %150 = arith.extui %c51_i32 : i32 to i64
    %c32_i64_27 = arith.constant 32 : i64
    %c63_i64_28 = arith.constant 63 : i64
    %151 = arith.cmpi ule, %c32_i64_27, %c63_i64_28 : i64
    %152 = scf.if %151 -> (i64) {
      %598 = arith.shli %150, %c32_i64_27 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_149 = arith.constant 0 : i64
      scf.yield %c0_i64_149 : i64
    }
    llvm.store %152, %10 : i64, !llvm.ptr
    %153 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i32 = arith.constant 12 : i32
    %154 = arith.addi %153, %c12_i32 : i32
    %155 = arith.extui %154 : i32 to i64
    %156 = arith.ori %152, %155 : i64
    %c80_i64 = arith.constant 80 : i64
    %157 = arith.extui %149 : i32 to i64
    %158 = arith.addi %157, %c80_i64 : i64
    %159 = llvm.getelementptr %15[%158] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %156, %159 {alignment = 1 : i64} : i64, !llvm.ptr
    %160 = llvm.load %5 : !llvm.ptr -> i32
    %161 = llvm.load %10 : !llvm.ptr -> i64
    %162 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %163 = arith.addi %162, %c8_i32 : i32
    %164 = arith.extui %163 : i32 to i64
    %165 = arith.ori %161, %164 : i64
    %c72_i64 = arith.constant 72 : i64
    %166 = arith.extui %160 : i32 to i64
    %167 = arith.addi %166, %c72_i64 : i64
    %168 = llvm.getelementptr %15[%167] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %165, %168 {alignment = 1 : i64} : i64, !llvm.ptr
    %169 = llvm.load %5 : !llvm.ptr -> i32
    %170 = llvm.load %5 : !llvm.ptr -> i32
    %c72_i32 = arith.constant 72 : i32
    %171 = arith.addi %170, %c72_i32 : i32
    %c56_i64 = arith.constant 56 : i64
    %172 = arith.extui %169 : i32 to i64
    %173 = arith.addi %172, %c56_i64 : i64
    %174 = llvm.getelementptr %15[%173] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %171, %174 {alignment = 1 : i64} : i32, !llvm.ptr
    %175 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %176 = arith.addi %175, %c48_i32 : i32
    %177 = llvm.load %4 : !llvm.ptr -> i32
    call @f156(%arg0, %176, %177) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_29 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_29) : (i32) -> ()
    llvm.unreachable
  ^bb15:  // 2 preds: ^bb3, ^bb16
    %178 = llvm.load %5 : !llvm.ptr -> i32
    %179 = llvm.load %2 : !llvm.ptr -> i32
    %180 = llvm.load %3 : !llvm.ptr -> i32
    %181 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_30 = arith.constant 0 : i32
    %182 = arith.cmpi ne, %181, %c0_i32_30 : i32
    %183 = arith.select %182, %179, %180 : i32
    %c40_i64 = arith.constant 40 : i64
    %184 = arith.extui %178 : i32 to i64
    %185 = arith.addi %184, %c40_i64 : i64
    %186 = llvm.getelementptr %15[%185] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %183, %186 {alignment = 1 : i64} : i32, !llvm.ptr
    %187 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i32_31 = arith.constant 3 : i32
    %c52_i64_32 = arith.constant 52 : i64
    %188 = arith.extui %187 : i32 to i64
    %189 = arith.addi %188, %c52_i64_32 : i64
    %190 = llvm.getelementptr %15[%189] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i32_31, %190 {alignment = 1 : i64} : i32, !llvm.ptr
    %191 = llvm.load %5 : !llvm.ptr -> i32
    %c1051916_i32 = arith.constant 1051916 : i32
    %c48_i64_33 = arith.constant 48 : i64
    %192 = arith.extui %191 : i32 to i64
    %193 = arith.addi %192, %c48_i64_33 : i64
    %194 = llvm.getelementptr %15[%193] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051916_i32, %194 {alignment = 1 : i64} : i32, !llvm.ptr
    %195 = llvm.load %5 : !llvm.ptr -> i32
    %c3_i64 = arith.constant 3 : i64
    %c60_i64_34 = arith.constant 60 : i64
    %196 = arith.extui %195 : i32 to i64
    %197 = arith.addi %196, %c60_i64_34 : i64
    %198 = llvm.getelementptr %15[%197] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c3_i64, %198 {alignment = 1 : i64} : i64, !llvm.ptr
    %199 = llvm.load %5 : !llvm.ptr -> i32
    %c79_i32_35 = arith.constant 79 : i32
    %200 = arith.extui %c79_i32_35 : i32 to i64
    %c32_i64_36 = arith.constant 32 : i64
    %c63_i64_37 = arith.constant 63 : i64
    %201 = arith.cmpi ule, %c32_i64_36, %c63_i64_37 : i64
    %202 = scf.if %201 -> (i64) {
      %598 = arith.shli %200, %c32_i64_36 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_149 = arith.constant 0 : i64
      scf.yield %c0_i64_149 : i64
    }
    llvm.store %202, %10 : i64, !llvm.ptr
    %203 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32_38 = arith.constant 24 : i32
    %204 = arith.addi %203, %c24_i32_38 : i32
    %205 = arith.extui %204 : i32 to i64
    %206 = arith.ori %202, %205 : i64
    %c88_i64_39 = arith.constant 88 : i64
    %207 = arith.extui %199 : i32 to i64
    %208 = arith.addi %207, %c88_i64_39 : i64
    %209 = llvm.getelementptr %15[%208] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %206, %209 {alignment = 1 : i64} : i64, !llvm.ptr
    %210 = llvm.load %5 : !llvm.ptr -> i32
    %211 = llvm.load %10 : !llvm.ptr -> i64
    %212 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_40 = arith.constant 16 : i32
    %213 = arith.addi %212, %c16_i32_40 : i32
    %214 = arith.extui %213 : i32 to i64
    %215 = arith.ori %211, %214 : i64
    %c80_i64_41 = arith.constant 80 : i64
    %216 = arith.extui %210 : i32 to i64
    %217 = arith.addi %216, %c80_i64_41 : i64
    %218 = llvm.getelementptr %15[%217] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %215, %218 {alignment = 1 : i64} : i64, !llvm.ptr
    %219 = llvm.load %5 : !llvm.ptr -> i32
    %c51_i32_42 = arith.constant 51 : i32
    %220 = arith.extui %c51_i32_42 : i32 to i64
    %c32_i64_43 = arith.constant 32 : i64
    %c63_i64_44 = arith.constant 63 : i64
    %221 = arith.cmpi ule, %c32_i64_43, %c63_i64_44 : i64
    %222 = scf.if %221 -> (i64) {
      %598 = arith.shli %220, %c32_i64_43 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_149 = arith.constant 0 : i64
      scf.yield %c0_i64_149 : i64
    }
    %223 = llvm.load %5 : !llvm.ptr -> i32
    %c40_i32 = arith.constant 40 : i32
    %224 = arith.addi %223, %c40_i32 : i32
    %225 = arith.extui %224 : i32 to i64
    %226 = arith.ori %222, %225 : i64
    %c72_i64_45 = arith.constant 72 : i64
    %227 = arith.extui %219 : i32 to i64
    %228 = arith.addi %227, %c72_i64_45 : i64
    %229 = llvm.getelementptr %15[%228] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %226, %229 {alignment = 1 : i64} : i64, !llvm.ptr
    %230 = llvm.load %5 : !llvm.ptr -> i32
    %231 = llvm.load %5 : !llvm.ptr -> i32
    %c72_i32_46 = arith.constant 72 : i32
    %232 = arith.addi %231, %c72_i32_46 : i32
    %c56_i64_47 = arith.constant 56 : i64
    %233 = arith.extui %230 : i32 to i64
    %234 = arith.addi %233, %c56_i64_47 : i64
    %235 = llvm.getelementptr %15[%234] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %232, %235 {alignment = 1 : i64} : i32, !llvm.ptr
    %236 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32_48 = arith.constant 48 : i32
    %237 = arith.addi %236, %c48_i32_48 : i32
    %238 = llvm.load %4 : !llvm.ptr -> i32
    call @f156(%arg0, %237, %238) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_49 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_49) : (i32) -> ()
    llvm.unreachable
  ^bb16:  // pred: ^bb3
    %239 = llvm.load %3 : !llvm.ptr -> i32
    %240 = llvm.load %1 : !llvm.ptr -> i32
    %241 = arith.cmpi ugt, %239, %240 : i32
    %242 = arith.extui %241 : i1 to i32
    %c0_i32_50 = arith.constant 0 : i32
    %243 = arith.cmpi ne, %242, %c0_i32_50 : i32
    cf.cond_br %243, ^bb15, ^bb17
  ^bb17:  // pred: ^bb16
    %244 = llvm.load %2 : !llvm.ptr -> i32
    %245 = llvm.load %3 : !llvm.ptr -> i32
    %246 = arith.cmpi ugt, %244, %245 : i32
    %247 = arith.extui %246 : i1 to i32
    %c0_i32_51 = arith.constant 0 : i32
    %248 = arith.cmpi ne, %247, %c0_i32_51 : i32
    cf.cond_br %248, ^bb14, ^bb18
  ^bb18:  // pred: ^bb17
    %249 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_52 = arith.constant 0 : i32
    %250 = arith.cmpi eq, %249, %c0_i32_52 : i32
    %251 = arith.extui %250 : i1 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %252 = arith.cmpi ne, %251, %c0_i32_53 : i32
    cf.cond_br %252, ^bb19, ^bb20
  ^bb19:  // 3 preds: ^bb18, ^bb20, ^bb21
    %253 = llvm.load %5 : !llvm.ptr -> i32
    %254 = llvm.load %3 : !llvm.ptr -> i32
    %c32_i64_54 = arith.constant 32 : i64
    %255 = arith.extui %253 : i32 to i64
    %256 = arith.addi %255, %c32_i64_54 : i64
    %257 = llvm.getelementptr %15[%256] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %254, %257 {alignment = 1 : i64} : i32, !llvm.ptr
    %258 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %258, %2 : i32, !llvm.ptr
    %259 = llvm.load %3 : !llvm.ptr -> i32
    %260 = llvm.load %1 : !llvm.ptr -> i32
    %261 = arith.cmpi uge, %259, %260 : i32
    %262 = arith.extui %261 : i1 to i32
    %c0_i32_55 = arith.constant 0 : i32
    %263 = arith.cmpi ne, %262, %c0_i32_55 : i32
    cf.cond_br %263, ^bb22, ^bb23
  ^bb20:  // pred: ^bb18
    %264 = llvm.load %2 : !llvm.ptr -> i32
    %265 = llvm.load %1 : !llvm.ptr -> i32
    %266 = arith.cmpi uge, %264, %265 : i32
    %267 = arith.extui %266 : i1 to i32
    %c0_i32_56 = arith.constant 0 : i32
    %268 = arith.cmpi ne, %267, %c0_i32_56 : i32
    cf.cond_br %268, ^bb19, ^bb21
  ^bb21:  // pred: ^bb20
    %269 = llvm.load %5 : !llvm.ptr -> i32
    %c12_i32_57 = arith.constant 12 : i32
    %270 = arith.addi %269, %c12_i32_57 : i32
    %271 = llvm.load %5 : !llvm.ptr -> i32
    %c8_i32_58 = arith.constant 8 : i32
    %272 = arith.addi %271, %c8_i32_58 : i32
    %273 = llvm.load %0 : !llvm.ptr -> i32
    %274 = llvm.load %2 : !llvm.ptr -> i32
    %275 = arith.addi %273, %274 : i32
    %c0_i64_59 = arith.constant 0 : i64
    %276 = arith.extui %275 : i32 to i64
    %277 = arith.addi %276, %c0_i64_59 : i64
    %278 = llvm.getelementptr %15[%277] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %279 = llvm.load volatile %278 {alignment = 1 : i64} : !llvm.ptr -> i8
    %280 = arith.extsi %279 : i8 to i32
    %c-65_i32_60 = arith.constant -65 : i32
    %281 = arith.cmpi sgt, %280, %c-65_i32_60 : i32
    %282 = arith.extui %281 : i1 to i32
    %c0_i32_61 = arith.constant 0 : i32
    %283 = arith.cmpi ne, %282, %c0_i32_61 : i32
    %284 = arith.select %283, %270, %272 : i32
    %c0_i64_62 = arith.constant 0 : i64
    %285 = arith.extui %284 : i32 to i64
    %286 = arith.addi %285, %c0_i64_62 : i64
    %287 = llvm.getelementptr %15[%286] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %288 = llvm.load volatile %287 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %288, %3 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb22:  // 2 preds: ^bb19, ^bb25
    %289 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_63 = arith.constant 0 : i32
    %290 = arith.cmpi eq, %289, %c0_i32_63 : i32
    %291 = arith.extui %290 : i1 to i32
    %c0_i32_64 = arith.constant 0 : i32
    %292 = arith.cmpi ne, %291, %c0_i32_64 : i32
    cf.cond_br %292, ^bb39, ^bb40
  ^bb23:  // pred: ^bb19
    %293 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_65 = arith.constant 1 : i32
    %294 = arith.addi %293, %c1_i32_65 : i32
    llvm.store %294, %6 : i32, !llvm.ptr
    %c0_i32_66 = arith.constant 0 : i32
    %295 = llvm.load %3 : !llvm.ptr -> i32
    %c-3_i32 = arith.constant -3 : i32
    %296 = arith.addi %295, %c-3_i32 : i32
    llvm.store %296, %2 : i32, !llvm.ptr
    %297 = llvm.load %2 : !llvm.ptr -> i32
    %298 = llvm.load %3 : !llvm.ptr -> i32
    %299 = arith.cmpi ugt, %297, %298 : i32
    %300 = arith.extui %299 : i1 to i32
    %c0_i32_67 = arith.constant 0 : i32
    %301 = arith.cmpi ne, %300, %c0_i32_67 : i32
    %302 = arith.select %301, %c0_i32_66, %296 : i32
    llvm.store %302, %2 : i32, !llvm.ptr
    %303 = arith.cmpi ult, %294, %302 : i32
    %304 = arith.extui %303 : i1 to i32
    %c0_i32_68 = arith.constant 0 : i32
    %305 = arith.cmpi ne, %304, %c0_i32_68 : i32
    cf.cond_br %305, ^bb13, ^bb24
  ^bb24:  // pred: ^bb23
    %306 = llvm.load %2 : !llvm.ptr -> i32
    %307 = llvm.load %6 : !llvm.ptr -> i32
    %308 = arith.cmpi eq, %306, %307 : i32
    %309 = arith.extui %308 : i1 to i32
    %c0_i32_69 = arith.constant 0 : i32
    %310 = arith.cmpi ne, %309, %c0_i32_69 : i32
    cf.cond_br %310, ^bb25, ^bb26
  ^bb25:  // 10 preds: ^bb24, ^bb27, ^bb28, ^bb30, ^bb31, ^bb33, ^bb34, ^bb36, ^bb37, ^bb38
    %311 = llvm.load %7 : !llvm.ptr -> i32
    %312 = llvm.load %2 : !llvm.ptr -> i32
    %313 = arith.addi %311, %312 : i32
    llvm.store %313, %2 : i32, !llvm.ptr
    cf.br ^bb22
  ^bb26:  // pred: ^bb24
    %314 = llvm.load %0 : !llvm.ptr -> i32
    %315 = llvm.load %6 : !llvm.ptr -> i32
    %316 = arith.addi %314, %315 : i32
    %317 = llvm.load %0 : !llvm.ptr -> i32
    %318 = llvm.load %2 : !llvm.ptr -> i32
    %319 = arith.addi %317, %318 : i32
    llvm.store %319, %8 : i32, !llvm.ptr
    %320 = arith.subi %316, %319 : i32
    llvm.store %320, %6 : i32, !llvm.ptr
    %321 = llvm.load %0 : !llvm.ptr -> i32
    %322 = llvm.load %3 : !llvm.ptr -> i32
    %323 = arith.addi %321, %322 : i32
    llvm.store %323, %9 : i32, !llvm.ptr
    %c0_i64_70 = arith.constant 0 : i64
    %324 = arith.extui %323 : i32 to i64
    %325 = arith.addi %324, %c0_i64_70 : i64
    %326 = llvm.getelementptr %15[%325] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %327 = llvm.load volatile %326 {alignment = 1 : i64} : !llvm.ptr -> i8
    %328 = arith.extsi %327 : i8 to i32
    %c-65_i32_71 = arith.constant -65 : i32
    %329 = arith.cmpi sle, %328, %c-65_i32_71 : i32
    %330 = arith.extui %329 : i1 to i32
    %c0_i32_72 = arith.constant 0 : i32
    %331 = arith.cmpi ne, %330, %c0_i32_72 : i32
    cf.cond_br %331, ^bb27, ^bb28
  ^bb27:  // pred: ^bb26
    %332 = llvm.load %2 : !llvm.ptr -> i32
    %333 = llvm.load %3 : !llvm.ptr -> i32
    %334 = arith.cmpi eq, %332, %333 : i32
    %335 = arith.extui %334 : i1 to i32
    %c0_i32_73 = arith.constant 0 : i32
    %336 = arith.cmpi ne, %335, %c0_i32_73 : i32
    cf.cond_br %336, ^bb25, ^bb29
  ^bb28:  // pred: ^bb26
    %337 = llvm.load %6 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %338 = arith.addi %337, %c-1_i32 : i32
    llvm.store %338, %7 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb29:  // pred: ^bb27
    %339 = llvm.load %9 : !llvm.ptr -> i32
    %c-1_i32_74 = arith.constant -1 : i32
    %340 = arith.addi %339, %c-1_i32_74 : i32
    llvm.store %340, %3 : i32, !llvm.ptr
    %c0_i64_75 = arith.constant 0 : i64
    %341 = arith.extui %340 : i32 to i64
    %342 = arith.addi %341, %c0_i64_75 : i64
    %343 = llvm.getelementptr %15[%342] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %344 = llvm.load volatile %343 {alignment = 1 : i64} : !llvm.ptr -> i8
    %345 = arith.extsi %344 : i8 to i32
    %c-65_i32_76 = arith.constant -65 : i32
    %346 = arith.cmpi sle, %345, %c-65_i32_76 : i32
    %347 = arith.extui %346 : i1 to i32
    %c0_i32_77 = arith.constant 0 : i32
    %348 = arith.cmpi ne, %347, %c0_i32_77 : i32
    cf.cond_br %348, ^bb30, ^bb31
  ^bb30:  // pred: ^bb29
    %349 = llvm.load %8 : !llvm.ptr -> i32
    %350 = llvm.load %3 : !llvm.ptr -> i32
    %351 = arith.cmpi eq, %349, %350 : i32
    %352 = arith.extui %351 : i1 to i32
    %c0_i32_78 = arith.constant 0 : i32
    %353 = arith.cmpi ne, %352, %c0_i32_78 : i32
    cf.cond_br %353, ^bb25, ^bb32
  ^bb31:  // pred: ^bb29
    %354 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %355 = arith.addi %354, %c-2_i32 : i32
    llvm.store %355, %7 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb32:  // pred: ^bb30
    %356 = llvm.load %9 : !llvm.ptr -> i32
    %c-2_i32_79 = arith.constant -2 : i32
    %357 = arith.addi %356, %c-2_i32_79 : i32
    llvm.store %357, %3 : i32, !llvm.ptr
    %c0_i64_80 = arith.constant 0 : i64
    %358 = arith.extui %357 : i32 to i64
    %359 = arith.addi %358, %c0_i64_80 : i64
    %360 = llvm.getelementptr %15[%359] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %361 = llvm.load volatile %360 {alignment = 1 : i64} : !llvm.ptr -> i8
    %362 = arith.extsi %361 : i8 to i32
    %c-65_i32_81 = arith.constant -65 : i32
    %363 = arith.cmpi sle, %362, %c-65_i32_81 : i32
    %364 = arith.extui %363 : i1 to i32
    %c0_i32_82 = arith.constant 0 : i32
    %365 = arith.cmpi ne, %364, %c0_i32_82 : i32
    cf.cond_br %365, ^bb33, ^bb34
  ^bb33:  // pred: ^bb32
    %366 = llvm.load %8 : !llvm.ptr -> i32
    %367 = llvm.load %3 : !llvm.ptr -> i32
    %368 = arith.cmpi eq, %366, %367 : i32
    %369 = arith.extui %368 : i1 to i32
    %c0_i32_83 = arith.constant 0 : i32
    %370 = arith.cmpi ne, %369, %c0_i32_83 : i32
    cf.cond_br %370, ^bb25, ^bb35
  ^bb34:  // pred: ^bb32
    %371 = llvm.load %6 : !llvm.ptr -> i32
    %c-3_i32_84 = arith.constant -3 : i32
    %372 = arith.addi %371, %c-3_i32_84 : i32
    llvm.store %372, %7 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb35:  // pred: ^bb33
    %373 = llvm.load %9 : !llvm.ptr -> i32
    %c-3_i32_85 = arith.constant -3 : i32
    %374 = arith.addi %373, %c-3_i32_85 : i32
    llvm.store %374, %3 : i32, !llvm.ptr
    %c0_i64_86 = arith.constant 0 : i64
    %375 = arith.extui %374 : i32 to i64
    %376 = arith.addi %375, %c0_i64_86 : i64
    %377 = llvm.getelementptr %15[%376] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %378 = llvm.load volatile %377 {alignment = 1 : i64} : !llvm.ptr -> i8
    %379 = arith.extsi %378 : i8 to i32
    %c-65_i32_87 = arith.constant -65 : i32
    %380 = arith.cmpi sle, %379, %c-65_i32_87 : i32
    %381 = arith.extui %380 : i1 to i32
    %c0_i32_88 = arith.constant 0 : i32
    %382 = arith.cmpi ne, %381, %c0_i32_88 : i32
    cf.cond_br %382, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %383 = llvm.load %8 : !llvm.ptr -> i32
    %384 = llvm.load %3 : !llvm.ptr -> i32
    %385 = arith.cmpi eq, %383, %384 : i32
    %386 = arith.extui %385 : i1 to i32
    %c0_i32_89 = arith.constant 0 : i32
    %387 = arith.cmpi ne, %386, %c0_i32_89 : i32
    cf.cond_br %387, ^bb25, ^bb38
  ^bb37:  // pred: ^bb35
    %388 = llvm.load %6 : !llvm.ptr -> i32
    %c-4_i32 = arith.constant -4 : i32
    %389 = arith.addi %388, %c-4_i32 : i32
    llvm.store %389, %7 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb38:  // pred: ^bb36
    %390 = llvm.load %6 : !llvm.ptr -> i32
    %c-5_i32 = arith.constant -5 : i32
    %391 = arith.addi %390, %c-5_i32 : i32
    llvm.store %391, %7 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb39:  // 3 preds: ^bb22, ^bb42, ^bb44
    %392 = llvm.load %2 : !llvm.ptr -> i32
    %393 = llvm.load %1 : !llvm.ptr -> i32
    %394 = arith.cmpi eq, %392, %393 : i32
    %395 = arith.extui %394 : i1 to i32
    %c0_i32_90 = arith.constant 0 : i32
    %396 = arith.cmpi ne, %395, %c0_i32_90 : i32
    cf.cond_br %396, ^bb12, ^bb45
  ^bb40:  // pred: ^bb22
    %397 = llvm.load %2 : !llvm.ptr -> i32
    %398 = llvm.load %1 : !llvm.ptr -> i32
    %399 = arith.cmpi uge, %397, %398 : i32
    %400 = arith.extui %399 : i1 to i32
    %c0_i32_91 = arith.constant 0 : i32
    %401 = arith.cmpi ne, %400, %c0_i32_91 : i32
    cf.cond_br %401, ^bb41, ^bb42
  ^bb41:  // pred: ^bb40
    %402 = llvm.load %2 : !llvm.ptr -> i32
    %403 = llvm.load %1 : !llvm.ptr -> i32
    %404 = arith.cmpi eq, %402, %403 : i32
    %405 = arith.extui %404 : i1 to i32
    %c0_i32_92 = arith.constant 0 : i32
    %406 = arith.cmpi eq, %405, %c0_i32_92 : i32
    %407 = arith.extui %406 : i1 to i32
    %c0_i32_93 = arith.constant 0 : i32
    %408 = arith.cmpi ne, %407, %c0_i32_93 : i32
    cf.cond_br %408, ^bb11, ^bb44
  ^bb42:  // pred: ^bb40
    %409 = llvm.load %0 : !llvm.ptr -> i32
    %410 = llvm.load %2 : !llvm.ptr -> i32
    %411 = arith.addi %409, %410 : i32
    %c0_i64_94 = arith.constant 0 : i64
    %412 = arith.extui %411 : i32 to i64
    %413 = arith.addi %412, %c0_i64_94 : i64
    %414 = llvm.getelementptr %15[%413] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %415 = llvm.load volatile %414 {alignment = 1 : i64} : !llvm.ptr -> i8
    %416 = arith.extsi %415 : i8 to i32
    %c-65_i32_95 = arith.constant -65 : i32
    %417 = arith.cmpi sgt, %416, %c-65_i32_95 : i32
    %418 = arith.extui %417 : i1 to i32
    %c0_i32_96 = arith.constant 0 : i32
    %419 = arith.cmpi ne, %418, %c0_i32_96 : i32
    cf.cond_br %419, ^bb39, ^bb43
  ^bb43:  // pred: ^bb42
    cf.br ^bb11
  ^bb44:  // pred: ^bb41
    cf.br ^bb39
  ^bb45:  // pred: ^bb39
    %420 = llvm.load %0 : !llvm.ptr -> i32
    %421 = llvm.load %2 : !llvm.ptr -> i32
    %422 = arith.addi %420, %421 : i32
    llvm.store %422, %3 : i32, !llvm.ptr
    %c0_i64_97 = arith.constant 0 : i64
    %423 = arith.extui %422 : i32 to i64
    %424 = arith.addi %423, %c0_i64_97 : i64
    %425 = llvm.getelementptr %15[%424] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %426 = llvm.load volatile %425 {alignment = 1 : i64} : !llvm.ptr -> i8
    %427 = arith.extsi %426 : i8 to i32
    llvm.store %427, %1 : i32, !llvm.ptr
    %c-1_i32_98 = arith.constant -1 : i32
    %428 = arith.cmpi sgt, %427, %c-1_i32_98 : i32
    %429 = arith.extui %428 : i1 to i32
    %c0_i32_99 = arith.constant 0 : i32
    %430 = arith.cmpi ne, %429, %c0_i32_99 : i32
    cf.cond_br %430, ^bb49, ^bb50
  ^bb46:  // 4 preds: ^bb47, ^bb49, ^bb55, ^bb56
    %431 = llvm.load %5 : !llvm.ptr -> i32
    %432 = llvm.load %2 : !llvm.ptr -> i32
    %c40_i64_100 = arith.constant 40 : i64
    %433 = arith.extui %431 : i32 to i64
    %434 = arith.addi %433, %c40_i64_100 : i64
    %435 = llvm.getelementptr %15[%434] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %432, %435 {alignment = 1 : i64} : i32, !llvm.ptr
    %436 = llvm.load %5 : !llvm.ptr -> i32
    %437 = llvm.load %1 : !llvm.ptr -> i32
    %438 = llvm.load %2 : !llvm.ptr -> i32
    %439 = arith.addi %437, %438 : i32
    %c44_i64 = arith.constant 44 : i64
    %440 = arith.extui %436 : i32 to i64
    %441 = arith.addi %440, %c44_i64 : i64
    %442 = llvm.getelementptr %15[%441] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %439, %442 {alignment = 1 : i64} : i32, !llvm.ptr
    %443 = llvm.load %5 : !llvm.ptr -> i32
    %c5_i32_101 = arith.constant 5 : i32
    %c52_i64_102 = arith.constant 52 : i64
    %444 = arith.extui %443 : i32 to i64
    %445 = arith.addi %444, %c52_i64_102 : i64
    %446 = llvm.getelementptr %15[%445] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c5_i32_101, %446 {alignment = 1 : i64} : i32, !llvm.ptr
    %447 = llvm.load %5 : !llvm.ptr -> i32
    %c1051852_i32 = arith.constant 1051852 : i32
    %c48_i64_103 = arith.constant 48 : i64
    %448 = arith.extui %447 : i32 to i64
    %449 = arith.addi %448, %c48_i64_103 : i64
    %450 = llvm.getelementptr %15[%449] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c1051852_i32, %450 {alignment = 1 : i64} : i32, !llvm.ptr
    %451 = llvm.load %5 : !llvm.ptr -> i32
    %c5_i64 = arith.constant 5 : i64
    %c60_i64_104 = arith.constant 60 : i64
    %452 = arith.extui %451 : i32 to i64
    %453 = arith.addi %452, %c60_i64_104 : i64
    %454 = llvm.getelementptr %15[%453] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %c5_i64, %454 {alignment = 1 : i64} : i64, !llvm.ptr
    %455 = llvm.load %5 : !llvm.ptr -> i32
    %c79_i32_105 = arith.constant 79 : i32
    %456 = arith.extui %c79_i32_105 : i32 to i64
    %c32_i64_106 = arith.constant 32 : i64
    %c63_i64_107 = arith.constant 63 : i64
    %457 = arith.cmpi ule, %c32_i64_106, %c63_i64_107 : i64
    %458 = scf.if %457 -> (i64) {
      %598 = arith.shli %456, %c32_i64_106 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_149 = arith.constant 0 : i64
      scf.yield %c0_i64_149 : i64
    }
    llvm.store %458, %10 : i64, !llvm.ptr
    %459 = llvm.load %5 : !llvm.ptr -> i32
    %c24_i32_108 = arith.constant 24 : i32
    %460 = arith.addi %459, %c24_i32_108 : i32
    %461 = arith.extui %460 : i32 to i64
    %462 = arith.ori %458, %461 : i64
    %c104_i64 = arith.constant 104 : i64
    %463 = arith.extui %455 : i32 to i64
    %464 = arith.addi %463, %c104_i64 : i64
    %465 = llvm.getelementptr %15[%464] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %462, %465 {alignment = 1 : i64} : i64, !llvm.ptr
    %466 = llvm.load %5 : !llvm.ptr -> i32
    %467 = llvm.load %10 : !llvm.ptr -> i64
    %468 = llvm.load %5 : !llvm.ptr -> i32
    %c16_i32_109 = arith.constant 16 : i32
    %469 = arith.addi %468, %c16_i32_109 : i32
    %470 = arith.extui %469 : i32 to i64
    %471 = arith.ori %467, %470 : i64
    %c96_i64_110 = arith.constant 96 : i64
    %472 = arith.extui %466 : i32 to i64
    %473 = arith.addi %472, %c96_i64_110 : i64
    %474 = llvm.getelementptr %15[%473] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %471, %474 {alignment = 1 : i64} : i64, !llvm.ptr
    %475 = llvm.load %5 : !llvm.ptr -> i32
    %c80_i32 = arith.constant 80 : i32
    %476 = arith.extui %c80_i32 : i32 to i64
    %c32_i64_111 = arith.constant 32 : i64
    %c63_i64_112 = arith.constant 63 : i64
    %477 = arith.cmpi ule, %c32_i64_111, %c63_i64_112 : i64
    %478 = scf.if %477 -> (i64) {
      %598 = arith.shli %476, %c32_i64_111 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_149 = arith.constant 0 : i64
      scf.yield %c0_i64_149 : i64
    }
    %479 = llvm.load %5 : !llvm.ptr -> i32
    %c40_i32_113 = arith.constant 40 : i32
    %480 = arith.addi %479, %c40_i32_113 : i32
    %481 = arith.extui %480 : i32 to i64
    %482 = arith.ori %478, %481 : i64
    %c88_i64_114 = arith.constant 88 : i64
    %483 = arith.extui %475 : i32 to i64
    %484 = arith.addi %483, %c88_i64_114 : i64
    %485 = llvm.getelementptr %15[%484] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %482, %485 {alignment = 1 : i64} : i64, !llvm.ptr
    %486 = llvm.load %5 : !llvm.ptr -> i32
    %c52_i32 = arith.constant 52 : i32
    %487 = arith.extui %c52_i32 : i32 to i64
    %c32_i64_115 = arith.constant 32 : i64
    %c63_i64_116 = arith.constant 63 : i64
    %488 = arith.cmpi ule, %c32_i64_115, %c63_i64_116 : i64
    %489 = scf.if %488 -> (i64) {
      %598 = arith.shli %487, %c32_i64_115 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_149 = arith.constant 0 : i64
      scf.yield %c0_i64_149 : i64
    }
    %490 = llvm.load %5 : !llvm.ptr -> i32
    %c36_i32 = arith.constant 36 : i32
    %491 = arith.addi %490, %c36_i32 : i32
    %492 = arith.extui %491 : i32 to i64
    %493 = arith.ori %489, %492 : i64
    %c80_i64_117 = arith.constant 80 : i64
    %494 = arith.extui %486 : i32 to i64
    %495 = arith.addi %494, %c80_i64_117 : i64
    %496 = llvm.getelementptr %15[%495] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %493, %496 {alignment = 1 : i64} : i64, !llvm.ptr
    %497 = llvm.load %5 : !llvm.ptr -> i32
    %c51_i32_118 = arith.constant 51 : i32
    %498 = arith.extui %c51_i32_118 : i32 to i64
    %c32_i64_119 = arith.constant 32 : i64
    %c63_i64_120 = arith.constant 63 : i64
    %499 = arith.cmpi ule, %c32_i64_119, %c63_i64_120 : i64
    %500 = scf.if %499 -> (i64) {
      %598 = arith.shli %498, %c32_i64_119 : i64
      scf.yield %598 : i64
    } else {
      %c0_i64_149 = arith.constant 0 : i64
      scf.yield %c0_i64_149 : i64
    }
    %501 = llvm.load %5 : !llvm.ptr -> i32
    %c32_i32 = arith.constant 32 : i32
    %502 = arith.addi %501, %c32_i32 : i32
    %503 = arith.extui %502 : i32 to i64
    %504 = arith.ori %500, %503 : i64
    %c72_i64_121 = arith.constant 72 : i64
    %505 = arith.extui %497 : i32 to i64
    %506 = arith.addi %505, %c72_i64_121 : i64
    %507 = llvm.getelementptr %15[%506] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %504, %507 {alignment = 1 : i64} : i64, !llvm.ptr
    %508 = llvm.load %5 : !llvm.ptr -> i32
    %509 = llvm.load %5 : !llvm.ptr -> i32
    %c72_i32_122 = arith.constant 72 : i32
    %510 = arith.addi %509, %c72_i32_122 : i32
    %c56_i64_123 = arith.constant 56 : i64
    %511 = arith.extui %508 : i32 to i64
    %512 = arith.addi %511, %c56_i64_123 : i64
    %513 = llvm.getelementptr %15[%512] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %510, %513 {alignment = 1 : i64} : i32, !llvm.ptr
    %514 = llvm.load %5 : !llvm.ptr -> i32
    %c48_i32_124 = arith.constant 48 : i32
    %515 = arith.addi %514, %c48_i32_124 : i32
    %516 = llvm.load %4 : !llvm.ptr -> i32
    call @f156(%arg0, %515, %516) : (!llvm.ptr, i32, i32) -> ()
    %c9_i32_125 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_125) : (i32) -> ()
    llvm.unreachable
  ^bb47:  // 3 preds: ^bb51, ^bb53, ^bb54
    %517 = llvm.load %5 : !llvm.ptr -> i32
    %518 = llvm.load %3 : !llvm.ptr -> i32
    %c36_i64 = arith.constant 36 : i64
    %519 = arith.extui %517 : i32 to i64
    %520 = arith.addi %519, %c36_i64 : i64
    %521 = llvm.getelementptr %15[%520] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %518, %521 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_126 = arith.constant 1 : i32
    llvm.store %c1_i32_126, %1 : i32, !llvm.ptr
    %522 = llvm.load %3 : !llvm.ptr -> i32
    %c128_i32 = arith.constant 128 : i32
    %523 = arith.cmpi ult, %522, %c128_i32 : i32
    %524 = arith.extui %523 : i1 to i32
    %c0_i32_127 = arith.constant 0 : i32
    %525 = arith.cmpi ne, %524, %c0_i32_127 : i32
    cf.cond_br %525, ^bb46, ^bb55
  ^bb48:  // pred: ^bb50
    %526 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    %c31_i32 = arith.constant 31 : i32
    %527 = arith.cmpi ule, %c6_i32, %c31_i32 : i32
    %528 = scf.if %527 -> (i32) {
      %598 = arith.shli %526, %c6_i32 : i32
      scf.yield %598 : i32
    } else {
      %c0_i32_149 = arith.constant 0 : i32
      scf.yield %c0_i32_149 : i32
    }
    %529 = llvm.load %3 : !llvm.ptr -> i32
    %c2_i64 = arith.constant 2 : i64
    %530 = arith.extui %529 : i32 to i64
    %531 = arith.addi %530, %c2_i64 : i64
    %532 = llvm.getelementptr %15[%531] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %533 = llvm.load volatile %532 {alignment = 1 : i64} : !llvm.ptr -> i8
    %534 = arith.extui %533 : i8 to i32
    %c63_i32 = arith.constant 63 : i32
    %535 = arith.andi %534, %c63_i32 : i32
    %536 = arith.ori %528, %535 : i32
    llvm.store %536, %0 : i32, !llvm.ptr
    %537 = llvm.load %1 : !llvm.ptr -> i32
    %c-16_i32 = arith.constant -16 : i32
    %538 = arith.cmpi uge, %537, %c-16_i32 : i32
    %539 = arith.extui %538 : i1 to i32
    %c0_i32_128 = arith.constant 0 : i32
    %540 = arith.cmpi ne, %539, %c0_i32_128 : i32
    cf.cond_br %540, ^bb52, ^bb53
  ^bb49:  // pred: ^bb45
    %541 = llvm.load %5 : !llvm.ptr -> i32
    %542 = llvm.load %1 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %543 = arith.andi %542, %c255_i32 : i32
    %c36_i64_129 = arith.constant 36 : i64
    %544 = arith.extui %541 : i32 to i64
    %545 = arith.addi %544, %c36_i64_129 : i64
    %546 = llvm.getelementptr %15[%545] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %543, %546 {alignment = 1 : i64} : i32, !llvm.ptr
    %c1_i32_130 = arith.constant 1 : i32
    llvm.store %c1_i32_130, %1 : i32, !llvm.ptr
    cf.br ^bb46
  ^bb50:  // pred: ^bb45
    %547 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %548 = arith.extui %547 : i32 to i64
    %549 = arith.addi %548, %c1_i64 : i64
    %550 = llvm.getelementptr %15[%549] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %551 = llvm.load volatile %550 {alignment = 1 : i64} : !llvm.ptr -> i8
    %552 = arith.extui %551 : i8 to i32
    %c63_i32_131 = arith.constant 63 : i32
    %553 = arith.andi %552, %c63_i32_131 : i32
    llvm.store %553, %0 : i32, !llvm.ptr
    %554 = llvm.load %1 : !llvm.ptr -> i32
    %c31_i32_132 = arith.constant 31 : i32
    %555 = arith.andi %554, %c31_i32_132 : i32
    llvm.store %555, %6 : i32, !llvm.ptr
    %556 = llvm.load %1 : !llvm.ptr -> i32
    %c-33_i32 = arith.constant -33 : i32
    %557 = arith.cmpi ugt, %556, %c-33_i32 : i32
    %558 = arith.extui %557 : i1 to i32
    %c0_i32_133 = arith.constant 0 : i32
    %559 = arith.cmpi ne, %558, %c0_i32_133 : i32
    cf.cond_br %559, ^bb48, ^bb51
  ^bb51:  // pred: ^bb50
    %560 = llvm.load %6 : !llvm.ptr -> i32
    %c6_i32_134 = arith.constant 6 : i32
    %c31_i32_135 = arith.constant 31 : i32
    %561 = arith.cmpi ule, %c6_i32_134, %c31_i32_135 : i32
    %562 = scf.if %561 -> (i32) {
      %598 = arith.shli %560, %c6_i32_134 : i32
      scf.yield %598 : i32
    } else {
      %c0_i32_149 = arith.constant 0 : i32
      scf.yield %c0_i32_149 : i32
    }
    %563 = llvm.load %0 : !llvm.ptr -> i32
    %564 = arith.ori %562, %563 : i32
    llvm.store %564, %3 : i32, !llvm.ptr
    cf.br ^bb47
  ^bb52:  // pred: ^bb48
    %565 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i32_136 = arith.constant 6 : i32
    %c31_i32_137 = arith.constant 31 : i32
    %566 = arith.cmpi ule, %c6_i32_136, %c31_i32_137 : i32
    %567 = scf.if %566 -> (i32) {
      %598 = arith.shli %565, %c6_i32_136 : i32
      scf.yield %598 : i32
    } else {
      %c0_i32_149 = arith.constant 0 : i32
      scf.yield %c0_i32_149 : i32
    }
    %568 = llvm.load %3 : !llvm.ptr -> i32
    %c3_i64_138 = arith.constant 3 : i64
    %569 = arith.extui %568 : i32 to i64
    %570 = arith.addi %569, %c3_i64_138 : i64
    %571 = llvm.getelementptr %15[%570] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %572 = llvm.load volatile %571 {alignment = 1 : i64} : !llvm.ptr -> i8
    %573 = arith.extui %572 : i8 to i32
    %c63_i32_139 = arith.constant 63 : i32
    %574 = arith.andi %573, %c63_i32_139 : i32
    %575 = arith.ori %567, %574 : i32
    %576 = llvm.load %6 : !llvm.ptr -> i32
    %c18_i32 = arith.constant 18 : i32
    %c31_i32_140 = arith.constant 31 : i32
    %577 = arith.cmpi ule, %c18_i32, %c31_i32_140 : i32
    %578 = scf.if %577 -> (i32) {
      %598 = arith.shli %576, %c18_i32 : i32
      scf.yield %598 : i32
    } else {
      %c0_i32_149 = arith.constant 0 : i32
      scf.yield %c0_i32_149 : i32
    }
    %c1835008_i32 = arith.constant 1835008 : i32
    %579 = arith.andi %578, %c1835008_i32 : i32
    %580 = arith.ori %575, %579 : i32
    llvm.store %580, %3 : i32, !llvm.ptr
    %c1114112_i32 = arith.constant 1114112 : i32
    %581 = arith.cmpi eq, %580, %c1114112_i32 : i32
    %582 = arith.extui %581 : i1 to i32
    %c0_i32_141 = arith.constant 0 : i32
    %583 = arith.cmpi ne, %582, %c0_i32_141 : i32
    cf.cond_br %583, ^bb12, ^bb54
  ^bb53:  // pred: ^bb48
    %584 = llvm.load %0 : !llvm.ptr -> i32
    %585 = llvm.load %6 : !llvm.ptr -> i32
    %c12_i32_142 = arith.constant 12 : i32
    %c31_i32_143 = arith.constant 31 : i32
    %586 = arith.cmpi ule, %c12_i32_142, %c31_i32_143 : i32
    %587 = scf.if %586 -> (i32) {
      %598 = arith.shli %585, %c12_i32_142 : i32
      scf.yield %598 : i32
    } else {
      %c0_i32_149 = arith.constant 0 : i32
      scf.yield %c0_i32_149 : i32
    }
    %588 = arith.ori %584, %587 : i32
    llvm.store %588, %3 : i32, !llvm.ptr
    cf.br ^bb47
  ^bb54:  // pred: ^bb52
    cf.br ^bb47
  ^bb55:  // pred: ^bb47
    %c2_i32_144 = arith.constant 2 : i32
    llvm.store %c2_i32_144, %1 : i32, !llvm.ptr
    %589 = llvm.load %3 : !llvm.ptr -> i32
    %c2048_i32 = arith.constant 2048 : i32
    %590 = arith.cmpi ult, %589, %c2048_i32 : i32
    %591 = arith.extui %590 : i1 to i32
    %c0_i32_145 = arith.constant 0 : i32
    %592 = arith.cmpi ne, %591, %c0_i32_145 : i32
    cf.cond_br %592, ^bb46, ^bb56
  ^bb56:  // pred: ^bb55
    %c3_i32_146 = arith.constant 3 : i32
    %c4_i32_147 = arith.constant 4 : i32
    %593 = llvm.load %3 : !llvm.ptr -> i32
    %c65536_i32 = arith.constant 65536 : i32
    %594 = arith.cmpi ult, %593, %c65536_i32 : i32
    %595 = arith.extui %594 : i1 to i32
    %c0_i32_148 = arith.constant 0 : i32
    %596 = arith.cmpi ne, %595, %c0_i32_148 : i32
    %597 = arith.select %596, %c3_i32_146, %c4_i32_147 : i32
    llvm.store %597, %1 : i32, !llvm.ptr
    cf.br ^bb46
  }
  func.func @f195(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg6, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg7, %6 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %c1_i32_10 = arith.constant 1 : i32
    %11 = llvm.alloca %c1_i32_10 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %11 : i32, !llvm.ptr
    %c1_i32_11 = arith.constant 1 : i32
    %12 = llvm.alloca %c1_i32_11 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %12 : i32, !llvm.ptr
    %c1_i32_12 = arith.constant 1 : i32
    %13 = llvm.alloca %c1_i32_12 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %13 : i32, !llvm.ptr
    %14 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %15 = llvm.getelementptr %14[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %16 = llvm.load %15 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_13 = arith.constant 1 : i32
    llvm.store %c1_i32_13, %7 : i32, !llvm.ptr
    %17 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %18 = arith.cmpi eq, %17, %c0_i32_14 : i32
    %19 = arith.extui %18 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_15 : i32
    cf.cond_br %20, ^bb4, ^bb5
  ^bb2(%21: i32):  // pred: ^bb3
    return %21 : i32
  ^bb3:  // 4 preds: ^bb4, ^bb17, ^bb23, ^bb25
    %22 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_16 = arith.constant 1 : i32
    %23 = arith.andi %22, %c1_i32_16 : i32
    cf.br ^bb2(%23 : i32)
  ^bb4:  // 4 preds: ^bb1, ^bb6, ^bb9, ^bb10
    %24 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_17 = arith.constant 0 : i32
    %25 = arith.cmpi eq, %24, %c0_i32_17 : i32
    %26 = arith.extui %25 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %27 = arith.cmpi ne, %26, %c0_i32_18 : i32
    cf.cond_br %27, ^bb3, ^bb22
  ^bb5:  // pred: ^bb1
    %28 = llvm.load %1 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %30 = arith.cmpi ule, %c1_i32_19, %c31_i32 : i32
    %31 = scf.if %30 -> (i32) {
      %170 = arith.shli %29, %c1_i32_19 : i32
      scf.yield %170 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    %32 = arith.addi %28, %31 : i32
    llvm.store %32, %8 : i32, !llvm.ptr
    %33 = llvm.load %0 : !llvm.ptr -> i32
    %c65280_i32 = arith.constant 65280 : i32
    %34 = arith.andi %33, %c65280_i32 : i32
    %c8_i32 = arith.constant 8 : i32
    %c31_i32_20 = arith.constant 31 : i32
    %35 = arith.cmpi ule, %c8_i32, %c31_i32_20 : i32
    %36 = scf.if %35 -> (i32) {
      %170 = arith.shrui %34, %c8_i32 : i32
      scf.yield %170 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    llvm.store %36, %9 : i32, !llvm.ptr
    %c0_i32_21 = arith.constant 0 : i32
    llvm.store %c0_i32_21, %10 : i32, !llvm.ptr
    %37 = llvm.load %0 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %38 = arith.andi %37, %c255_i32 : i32
    llvm.store %38, %11 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb6:  // pred: ^bb21
    cf.br ^bb4
  ^bb7:  // 3 preds: ^bb5, ^bb11, ^bb12
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %40 = arith.addi %39, %c2_i32 : i32
    llvm.store %40, %12 : i32, !llvm.ptr
    %41 = llvm.load %10 : !llvm.ptr -> i32
    %42 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i64 = arith.constant 1 : i64
    %43 = arith.extui %42 : i32 to i64
    %44 = arith.addi %43, %c1_i64 : i64
    %45 = llvm.getelementptr %16[%44] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %46 = llvm.load volatile %45 {alignment = 1 : i64} : !llvm.ptr -> i8
    %47 = arith.extui %46 : i8 to i32
    llvm.store %47, %2 : i32, !llvm.ptr
    %48 = arith.addi %41, %47 : i32
    llvm.store %48, %13 : i32, !llvm.ptr
    %49 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64 : i64
    %52 = llvm.getelementptr %16[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i8
    %54 = arith.extui %53 : i8 to i32
    llvm.store %54, %1 : i32, !llvm.ptr
    %55 = llvm.load %9 : !llvm.ptr -> i32
    %56 = arith.cmpi eq, %54, %55 : i32
    %57 = arith.extui %56 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %58 = arith.cmpi ne, %57, %c0_i32_22 : i32
    cf.cond_br %58, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %59 = llvm.load %13 : !llvm.ptr -> i32
    %60 = llvm.load %10 : !llvm.ptr -> i32
    %61 = arith.cmpi ult, %59, %60 : i32
    %62 = arith.extui %61 : i1 to i32
    %c0_i32_23 = arith.constant 0 : i32
    %63 = arith.cmpi ne, %62, %c0_i32_23 : i32
    cf.cond_br %63, ^bb14, ^bb15
  ^bb9:  // pred: ^bb7
    %64 = llvm.load %1 : !llvm.ptr -> i32
    %65 = llvm.load %9 : !llvm.ptr -> i32
    %66 = arith.cmpi ugt, %64, %65 : i32
    %67 = arith.extui %66 : i1 to i32
    %c0_i32_24 = arith.constant 0 : i32
    %68 = arith.cmpi ne, %67, %c0_i32_24 : i32
    cf.cond_br %68, ^bb4, ^bb10
  ^bb10:  // pred: ^bb9
    %69 = llvm.load %13 : !llvm.ptr -> i32
    llvm.store %69, %10 : i32, !llvm.ptr
    %70 = llvm.load %12 : !llvm.ptr -> i32
    llvm.store %70, %1 : i32, !llvm.ptr
    %71 = llvm.load %12 : !llvm.ptr -> i32
    %72 = llvm.load %8 : !llvm.ptr -> i32
    %73 = arith.cmpi eq, %71, %72 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_25 : i32
    cf.cond_br %75, ^bb4, ^bb11
  ^bb11:  // pred: ^bb10
    cf.br ^bb7
  ^bb12:  // pred: ^bb18
    %76 = llvm.load %13 : !llvm.ptr -> i32
    llvm.store %76, %10 : i32, !llvm.ptr
    %77 = llvm.load %12 : !llvm.ptr -> i32
    llvm.store %77, %1 : i32, !llvm.ptr
    %78 = llvm.load %12 : !llvm.ptr -> i32
    %79 = llvm.load %8 : !llvm.ptr -> i32
    %80 = arith.cmpi eq, %78, %79 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_26 = arith.constant 0 : i32
    %82 = arith.cmpi eq, %81, %c0_i32_26 : i32
    %83 = arith.extui %82 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_27 : i32
    cf.cond_br %84, ^bb7, ^bb21
  ^bb13:  // pred: ^bb15
    %85 = llvm.load %13 : !llvm.ptr -> i32
    %86 = llvm.load %4 : !llvm.ptr -> i32
    %c1052040_i32 = arith.constant 1052040 : i32
    call @f159(%arg0, %85, %86, %c1052040_i32) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32) : (i32) -> ()
    llvm.unreachable
  ^bb14:  // pred: ^bb8
    %87 = llvm.load %10 : !llvm.ptr -> i32
    %88 = llvm.load %13 : !llvm.ptr -> i32
    %c1052040_i32_28 = arith.constant 1052040 : i32
    call @f172(%arg0, %87, %88, %c1052040_i32_28) : (!llvm.ptr, i32, i32, i32) -> ()
    %c9_i32_29 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_29) : (i32) -> ()
    llvm.unreachable
  ^bb15:  // pred: ^bb8
    %89 = llvm.load %13 : !llvm.ptr -> i32
    %90 = llvm.load %4 : !llvm.ptr -> i32
    %91 = arith.cmpi ugt, %89, %90 : i32
    %92 = arith.extui %91 : i1 to i32
    %c0_i32_30 = arith.constant 0 : i32
    %93 = arith.cmpi ne, %92, %c0_i32_30 : i32
    cf.cond_br %93, ^bb13, ^bb16
  ^bb16:  // pred: ^bb15
    %94 = llvm.load %3 : !llvm.ptr -> i32
    %95 = llvm.load %10 : !llvm.ptr -> i32
    %96 = arith.addi %94, %95 : i32
    llvm.store %96, %1 : i32, !llvm.ptr
    cf.br ^bb18
  ^bb17:  // pred: ^bb20
    %c0_i32_31 = arith.constant 0 : i32
    llvm.store %c0_i32_31, %7 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb18:  // 2 preds: ^bb16, ^bb19
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_32 = arith.constant 0 : i32
    %98 = arith.cmpi eq, %97, %c0_i32_32 : i32
    %99 = arith.extui %98 : i1 to i32
    %c0_i32_33 = arith.constant 0 : i32
    %100 = arith.cmpi ne, %99, %c0_i32_33 : i32
    cf.cond_br %100, ^bb12, ^bb19
  ^bb19:  // pred: ^bb18
    %101 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %102 = arith.addi %101, %c-1_i32 : i32
    llvm.store %102, %2 : i32, !llvm.ptr
    %103 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %104 = arith.extui %103 : i32 to i64
    %105 = arith.addi %104, %c0_i64_34 : i64
    %106 = llvm.getelementptr %16[%105] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %107 = llvm.load volatile %106 {alignment = 1 : i64} : !llvm.ptr -> i8
    %108 = arith.extui %107 : i8 to i32
    llvm.store %108, %10 : i32, !llvm.ptr
    %109 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_35 = arith.constant 1 : i32
    %110 = arith.addi %109, %c1_i32_35 : i32
    llvm.store %110, %1 : i32, !llvm.ptr
    %111 = llvm.load %10 : !llvm.ptr -> i32
    %112 = llvm.load %11 : !llvm.ptr -> i32
    %113 = arith.cmpi eq, %111, %112 : i32
    %114 = arith.extui %113 : i1 to i32
    %c0_i32_36 = arith.constant 0 : i32
    %115 = arith.cmpi eq, %114, %c0_i32_36 : i32
    %116 = arith.extui %115 : i1 to i32
    %c0_i32_37 = arith.constant 0 : i32
    %117 = arith.cmpi ne, %116, %c0_i32_37 : i32
    cf.cond_br %117, ^bb18, ^bb20
  ^bb20:  // pred: ^bb19
    cf.br ^bb17
  ^bb21:  // pred: ^bb12
    cf.br ^bb6
  ^bb22:  // pred: ^bb4
    %118 = llvm.load %5 : !llvm.ptr -> i32
    %119 = llvm.load %6 : !llvm.ptr -> i32
    %120 = arith.addi %118, %119 : i32
    llvm.store %120, %11 : i32, !llvm.ptr
    %121 = llvm.load %0 : !llvm.ptr -> i32
    %c65535_i32 = arith.constant 65535 : i32
    %122 = arith.andi %121, %c65535_i32 : i32
    llvm.store %122, %1 : i32, !llvm.ptr
    %c1_i32_38 = arith.constant 1 : i32
    llvm.store %c1_i32_38, %7 : i32, !llvm.ptr
    cf.br ^bb24
  ^bb23:  // pred: ^bb31
    cf.br ^bb3
  ^bb24:  // 2 preds: ^bb22, ^bb30
    %123 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i32_39 = arith.constant 1 : i32
    %124 = arith.addi %123, %c1_i32_39 : i32
    llvm.store %124, %10 : i32, !llvm.ptr
    %125 = llvm.load %5 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %126 = arith.extui %125 : i32 to i64
    %127 = arith.addi %126, %c0_i64_40 : i64
    %128 = llvm.getelementptr %16[%127] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %129 = llvm.load volatile %128 {alignment = 1 : i64} : !llvm.ptr -> i8
    %130 = arith.extui %129 : i8 to i32
    llvm.store %130, %2 : i32, !llvm.ptr
    %131 = arith.trunci %130 : i32 to i8
    %132 = arith.extsi %131 : i8 to i32
    llvm.store %132, %13 : i32, !llvm.ptr
    %c0_i32_41 = arith.constant 0 : i32
    %133 = arith.cmpi slt, %132, %c0_i32_41 : i32
    %134 = arith.extui %133 : i1 to i32
    %c0_i32_42 = arith.constant 0 : i32
    %135 = arith.cmpi ne, %134, %c0_i32_42 : i32
    cf.cond_br %135, ^bb26, ^bb27
  ^bb25:  // 2 preds: ^bb27, ^bb29
    %136 = llvm.load %1 : !llvm.ptr -> i32
    %137 = llvm.load %2 : !llvm.ptr -> i32
    %138 = arith.subi %136, %137 : i32
    llvm.store %138, %1 : i32, !llvm.ptr
    %c0_i32_43 = arith.constant 0 : i32
    %139 = arith.cmpi slt, %138, %c0_i32_43 : i32
    %140 = arith.extui %139 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %141 = arith.cmpi ne, %140, %c0_i32_44 : i32
    cf.cond_br %141, ^bb3, ^bb30
  ^bb26:  // pred: ^bb24
    %142 = llvm.load %10 : !llvm.ptr -> i32
    %143 = llvm.load %11 : !llvm.ptr -> i32
    %144 = arith.cmpi eq, %142, %143 : i32
    %145 = arith.extui %144 : i1 to i32
    %c0_i32_45 = arith.constant 0 : i32
    %146 = arith.cmpi ne, %145, %c0_i32_45 : i32
    cf.cond_br %146, ^bb28, ^bb29
  ^bb27:  // pred: ^bb24
    %147 = llvm.load %10 : !llvm.ptr -> i32
    llvm.store %147, %5 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb28:  // pred: ^bb26
    %c1052024_i32 = arith.constant 1052024 : i32
    call @f173(%arg0, %c1052024_i32) : (!llvm.ptr, i32) -> ()
    %c9_i32_46 = arith.constant 9 : i32
    call @dora_fn_wasm_raise_trap(%c9_i32_46) : (i32) -> ()
    llvm.unreachable
  ^bb29:  // pred: ^bb26
    %148 = llvm.load %13 : !llvm.ptr -> i32
    %c127_i32 = arith.constant 127 : i32
    %149 = arith.andi %148, %c127_i32 : i32
    %c8_i32_47 = arith.constant 8 : i32
    %c31_i32_48 = arith.constant 31 : i32
    %150 = arith.cmpi ule, %c8_i32_47, %c31_i32_48 : i32
    %151 = scf.if %150 -> (i32) {
      %170 = arith.shli %149, %c8_i32_47 : i32
      scf.yield %170 : i32
    } else {
      %c0_i32_54 = arith.constant 0 : i32
      scf.yield %c0_i32_54 : i32
    }
    %152 = llvm.load %5 : !llvm.ptr -> i32
    %c1_i64_49 = arith.constant 1 : i64
    %153 = arith.extui %152 : i32 to i64
    %154 = arith.addi %153, %c1_i64_49 : i64
    %155 = llvm.getelementptr %16[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %156 = llvm.load volatile %155 {alignment = 1 : i64} : !llvm.ptr -> i8
    %157 = arith.extui %156 : i8 to i32
    %158 = arith.ori %151, %157 : i32
    llvm.store %158, %2 : i32, !llvm.ptr
    %159 = llvm.load %5 : !llvm.ptr -> i32
    %c2_i32_50 = arith.constant 2 : i32
    %160 = arith.addi %159, %c2_i32_50 : i32
    llvm.store %160, %5 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb30:  // pred: ^bb25
    %161 = llvm.load %7 : !llvm.ptr -> i32
    %c1_i32_51 = arith.constant 1 : i32
    %162 = arith.xori %161, %c1_i32_51 : i32
    llvm.store %162, %7 : i32, !llvm.ptr
    %163 = llvm.load %5 : !llvm.ptr -> i32
    %164 = llvm.load %11 : !llvm.ptr -> i32
    %165 = arith.cmpi eq, %163, %164 : i32
    %166 = arith.extui %165 : i1 to i32
    %c0_i32_52 = arith.constant 0 : i32
    %167 = arith.cmpi eq, %166, %c0_i32_52 : i32
    %168 = arith.extui %167 : i1 to i32
    %c0_i32_53 = arith.constant 0 : i32
    %169 = arith.cmpi ne, %168, %c0_i32_53 : i32
    cf.cond_br %169, ^bb24, ^bb31
  ^bb31:  // pred: ^bb30
    cf.br ^bb23
  }
  func.func @f196(%arg0: !llvm.ptr, %arg1: i64, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i64 : (i32) -> !llvm.ptr
    llvm.store %c0_i64, %5 : i64, !llvm.ptr
    %c0_i32_5 = arith.constant 0 : i32
    %c1_i32_6 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_5, %6 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_5, %7 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32_5, %8 : i32, !llvm.ptr
    %9 = llvm.getelementptr %arg0[960] : (!llvm.ptr) -> !llvm.ptr, i8
    %10 = llvm.load %9 : !llvm.ptr -> !llvm.ptr
    %11 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %10 : !llvm.ptr -> i32
    %c48_i32 = arith.constant 48 : i32
    %15 = arith.subi %14, %c48_i32 : i32
    llvm.store %15, %3 : i32, !llvm.ptr
    llvm.store %15, %10 : i32, !llvm.ptr
    %c39_i32 = arith.constant 39 : i32
    llvm.store %c39_i32, %4 : i32, !llvm.ptr
    %16 = llvm.load %0 : !llvm.ptr -> i64
    %c10000_i64 = arith.constant 10000 : i64
    %17 = arith.cmpi uge, %16, %c10000_i64 : i64
    %18 = arith.extui %17 : i1 to i64
    %19 = arith.trunci %18 : i64 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %20 = arith.cmpi ne, %19, %c0_i32_9 : i32
    cf.cond_br %20, ^bb4, ^bb5
  ^bb2(%21: i32):  // pred: ^bb11
    return %21 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb6
    %22 = llvm.load %5 : !llvm.ptr -> i64
    %23 = arith.trunci %22 : i64 to i32
    llvm.store %23, %6 : i32, !llvm.ptr
    %c99_i32 = arith.constant 99 : i32
    %24 = arith.cmpi ule, %23, %c99_i32 : i32
    %25 = arith.extui %24 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_10 : i32
    cf.cond_br %26, ^bb9, ^bb10
  ^bb4:  // pred: ^bb1
    %c39_i32_11 = arith.constant 39 : i32
    llvm.store %c39_i32_11, %4 : i32, !llvm.ptr
    cf.br ^bb7
  ^bb5:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i64
    llvm.store %27, %5 : i64, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // pred: ^bb8
    cf.br ^bb3
  ^bb7:  // 2 preds: ^bb4, ^bb7
    %28 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32 = arith.constant 9 : i32
    %29 = arith.addi %28, %c9_i32 : i32
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %31 = arith.addi %29, %30 : i32
    llvm.store %31, %6 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %32 = arith.addi %31, %c-4_i32 : i32
    %33 = llvm.load %0 : !llvm.ptr -> i64
    %34 = llvm.load %0 : !llvm.ptr -> i64
    %c10000_i64_12 = arith.constant 10000 : i64
    %35 = arith.divui %34, %c10000_i64_12 : i64
    %c0_i64_13 = arith.constant 0 : i64
    %36 = arith.cmpi eq, %c10000_i64_12, %c0_i64_13 : i64
    %37 = arith.select %36, %c0_i64_13, %35 : i64
    llvm.store %37, %5 : i64, !llvm.ptr
    %c10000_i64_14 = arith.constant 10000 : i64
    %38 = arith.muli %37, %c10000_i64_14 : i64
    %39 = arith.subi %33, %38 : i64
    %40 = arith.trunci %39 : i64 to i32
    llvm.store %40, %7 : i32, !llvm.ptr
    %c65535_i32 = arith.constant 65535 : i32
    %41 = arith.andi %40, %c65535_i32 : i32
    %c100_i32 = arith.constant 100 : i32
    %42 = arith.divui %41, %c100_i32 : i32
    %c0_i32_15 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %c100_i32, %c0_i32_15 : i32
    %44 = arith.select %43, %c0_i32_15, %42 : i32
    llvm.store %44, %8 : i32, !llvm.ptr
    %c1_i32_16 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %45 = arith.cmpi ule, %c1_i32_16, %c31_i32 : i32
    %46 = scf.if %45 -> (i32) {
      %157 = arith.shli %44, %c1_i32_16 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_56 = arith.constant 0 : i32
      scf.yield %c0_i32_56 : i32
    }
    %c1051214_i32 = arith.constant 1051214 : i32
    %47 = arith.addi %46, %c1051214_i32 : i32
    %c0_i64_17 = arith.constant 0 : i64
    %48 = arith.extui %47 : i32 to i64
    %49 = arith.addi %48, %c0_i64_17 : i64
    %50 = llvm.getelementptr %13[%49] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %51 = llvm.load volatile %50 {alignment = 1 : i64} : !llvm.ptr -> i16
    %52 = arith.extui %51 : i16 to i32
    %c0_i64_18 = arith.constant 0 : i64
    %53 = arith.extui %32 : i32 to i64
    %54 = arith.addi %53, %c0_i64_18 : i64
    %55 = llvm.getelementptr %13[%54] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %56 = arith.trunci %52 : i32 to i16
    llvm.store volatile %56, %55 {alignment = 1 : i64} : i16, !llvm.ptr
    %57 = llvm.load %6 : !llvm.ptr -> i32
    %c-2_i32 = arith.constant -2 : i32
    %58 = arith.addi %57, %c-2_i32 : i32
    %59 = llvm.load %7 : !llvm.ptr -> i32
    %60 = llvm.load %8 : !llvm.ptr -> i32
    %c100_i32_19 = arith.constant 100 : i32
    %61 = arith.muli %60, %c100_i32_19 : i32
    %62 = arith.subi %59, %61 : i32
    %c65535_i32_20 = arith.constant 65535 : i32
    %63 = arith.andi %62, %c65535_i32_20 : i32
    %c1_i32_21 = arith.constant 1 : i32
    %c31_i32_22 = arith.constant 31 : i32
    %64 = arith.cmpi ule, %c1_i32_21, %c31_i32_22 : i32
    %65 = scf.if %64 -> (i32) {
      %157 = arith.shli %63, %c1_i32_21 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_56 = arith.constant 0 : i32
      scf.yield %c0_i32_56 : i32
    }
    %c1051214_i32_23 = arith.constant 1051214 : i32
    %66 = arith.addi %65, %c1051214_i32_23 : i32
    %c0_i64_24 = arith.constant 0 : i64
    %67 = arith.extui %66 : i32 to i64
    %68 = arith.addi %67, %c0_i64_24 : i64
    %69 = llvm.getelementptr %13[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %70 = llvm.load volatile %69 {alignment = 1 : i64} : !llvm.ptr -> i16
    %71 = arith.extui %70 : i16 to i32
    %c0_i64_25 = arith.constant 0 : i64
    %72 = arith.extui %58 : i32 to i64
    %73 = arith.addi %72, %c0_i64_25 : i64
    %74 = llvm.getelementptr %13[%73] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %75 = arith.trunci %71 : i32 to i16
    llvm.store volatile %75, %74 {alignment = 1 : i64} : i16, !llvm.ptr
    %76 = llvm.load %4 : !llvm.ptr -> i32
    %c-4_i32_26 = arith.constant -4 : i32
    %77 = arith.addi %76, %c-4_i32_26 : i32
    llvm.store %77, %4 : i32, !llvm.ptr
    %78 = llvm.load %0 : !llvm.ptr -> i64
    %c99999999_i64 = arith.constant 99999999 : i64
    %79 = arith.cmpi ugt, %78, %c99999999_i64 : i64
    %80 = arith.extui %79 : i1 to i64
    %81 = arith.trunci %80 : i64 to i32
    llvm.store %81, %6 : i32, !llvm.ptr
    %82 = llvm.load %5 : !llvm.ptr -> i64
    llvm.store %82, %0 : i64, !llvm.ptr
    %83 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i32_27 = arith.constant 0 : i32
    %84 = arith.cmpi ne, %83, %c0_i32_27 : i32
    cf.cond_br %84, ^bb7, ^bb8
  ^bb8:  // pred: ^bb7
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb3, ^bb10
    %85 = llvm.load %6 : !llvm.ptr -> i32
    %c10_i32 = arith.constant 10 : i32
    %86 = arith.cmpi ult, %85, %c10_i32 : i32
    %87 = arith.extui %86 : i1 to i32
    %c0_i32_28 = arith.constant 0 : i32
    %88 = arith.cmpi ne, %87, %c0_i32_28 : i32
    cf.cond_br %88, ^bb12, ^bb13
  ^bb10:  // pred: ^bb3
    %89 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_29 = arith.constant 9 : i32
    %90 = arith.addi %89, %c9_i32_29 : i32
    %91 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_30 = arith.constant -2 : i32
    %92 = arith.addi %91, %c-2_i32_30 : i32
    llvm.store %92, %4 : i32, !llvm.ptr
    %93 = arith.addi %90, %92 : i32
    %94 = llvm.load %5 : !llvm.ptr -> i64
    %95 = arith.trunci %94 : i64 to i32
    llvm.store %95, %6 : i32, !llvm.ptr
    %96 = llvm.load %6 : !llvm.ptr -> i32
    %c65535_i32_31 = arith.constant 65535 : i32
    %97 = arith.andi %96, %c65535_i32_31 : i32
    %c100_i32_32 = arith.constant 100 : i32
    %98 = arith.divui %97, %c100_i32_32 : i32
    %c0_i32_33 = arith.constant 0 : i32
    %99 = arith.cmpi eq, %c100_i32_32, %c0_i32_33 : i32
    %100 = arith.select %99, %c0_i32_33, %98 : i32
    llvm.store %100, %6 : i32, !llvm.ptr
    %c100_i32_34 = arith.constant 100 : i32
    %101 = arith.muli %100, %c100_i32_34 : i32
    %102 = arith.subi %95, %101 : i32
    %c65535_i32_35 = arith.constant 65535 : i32
    %103 = arith.andi %102, %c65535_i32_35 : i32
    %c1_i32_36 = arith.constant 1 : i32
    %c31_i32_37 = arith.constant 31 : i32
    %104 = arith.cmpi ule, %c1_i32_36, %c31_i32_37 : i32
    %105 = scf.if %104 -> (i32) {
      %157 = arith.shli %103, %c1_i32_36 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_56 = arith.constant 0 : i32
      scf.yield %c0_i32_56 : i32
    }
    %c1051214_i32_38 = arith.constant 1051214 : i32
    %106 = arith.addi %105, %c1051214_i32_38 : i32
    %c0_i64_39 = arith.constant 0 : i64
    %107 = arith.extui %106 : i32 to i64
    %108 = arith.addi %107, %c0_i64_39 : i64
    %109 = llvm.getelementptr %13[%108] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %110 = llvm.load volatile %109 {alignment = 1 : i64} : !llvm.ptr -> i16
    %111 = arith.extui %110 : i16 to i32
    %c0_i64_40 = arith.constant 0 : i64
    %112 = arith.extui %93 : i32 to i64
    %113 = arith.addi %112, %c0_i64_40 : i64
    %114 = llvm.getelementptr %13[%113] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %115 = arith.trunci %111 : i32 to i16
    llvm.store volatile %115, %114 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb9
  ^bb11:  // 2 preds: ^bb12, ^bb13
    %116 = llvm.load %2 : !llvm.ptr -> i32
    %117 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_41 = arith.constant 1 : i32
    %c0_i32_42 = arith.constant 0 : i32
    %118 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_43 = arith.constant 9 : i32
    %119 = arith.addi %118, %c9_i32_43 : i32
    %120 = llvm.load %4 : !llvm.ptr -> i32
    %121 = arith.addi %119, %120 : i32
    %c39_i32_44 = arith.constant 39 : i32
    %122 = llvm.load %4 : !llvm.ptr -> i32
    %123 = arith.subi %c39_i32_44, %122 : i32
    %124 = call @f182(%arg0, %116, %117, %c1_i32_41, %c0_i32_42, %121, %123) : (!llvm.ptr, i32, i32, i32, i32, i32, i32) -> i32
    llvm.store %124, %4 : i32, !llvm.ptr
    %125 = llvm.load %3 : !llvm.ptr -> i32
    %c48_i32_45 = arith.constant 48 : i32
    %126 = arith.addi %125, %c48_i32_45 : i32
    llvm.store %126, %10 : i32, !llvm.ptr
    %127 = llvm.load %4 : !llvm.ptr -> i32
    cf.br ^bb2(%127 : i32)
  ^bb12:  // pred: ^bb9
    %128 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_46 = arith.constant 9 : i32
    %129 = arith.addi %128, %c9_i32_46 : i32
    %130 = llvm.load %4 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %131 = arith.addi %130, %c-1_i32 : i32
    llvm.store %131, %4 : i32, !llvm.ptr
    %132 = arith.addi %129, %131 : i32
    %133 = llvm.load %6 : !llvm.ptr -> i32
    %c48_i32_47 = arith.constant 48 : i32
    %134 = arith.ori %133, %c48_i32_47 : i32
    %c0_i64_48 = arith.constant 0 : i64
    %135 = arith.extui %132 : i32 to i64
    %136 = arith.addi %135, %c0_i64_48 : i64
    %137 = llvm.getelementptr %13[%136] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %138 = arith.trunci %134 : i32 to i8
    llvm.store volatile %138, %137 {alignment = 1 : i64} : i8, !llvm.ptr
    cf.br ^bb11
  ^bb13:  // pred: ^bb9
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %c9_i32_49 = arith.constant 9 : i32
    %140 = arith.addi %139, %c9_i32_49 : i32
    %141 = llvm.load %4 : !llvm.ptr -> i32
    %c-2_i32_50 = arith.constant -2 : i32
    %142 = arith.addi %141, %c-2_i32_50 : i32
    llvm.store %142, %4 : i32, !llvm.ptr
    %143 = arith.addi %140, %142 : i32
    %144 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_51 = arith.constant 1 : i32
    %c31_i32_52 = arith.constant 31 : i32
    %145 = arith.cmpi ule, %c1_i32_51, %c31_i32_52 : i32
    %146 = scf.if %145 -> (i32) {
      %157 = arith.shli %144, %c1_i32_51 : i32
      scf.yield %157 : i32
    } else {
      %c0_i32_56 = arith.constant 0 : i32
      scf.yield %c0_i32_56 : i32
    }
    %c1051214_i32_53 = arith.constant 1051214 : i32
    %147 = arith.addi %146, %c1051214_i32_53 : i32
    %c0_i64_54 = arith.constant 0 : i64
    %148 = arith.extui %147 : i32 to i64
    %149 = arith.addi %148, %c0_i64_54 : i64
    %150 = llvm.getelementptr %13[%149] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %151 = llvm.load volatile %150 {alignment = 1 : i64} : !llvm.ptr -> i16
    %152 = arith.extui %151 : i16 to i32
    %c0_i64_55 = arith.constant 0 : i64
    %153 = arith.extui %143 : i32 to i64
    %154 = arith.addi %153, %c0_i64_55 : i64
    %155 = llvm.getelementptr %13[%154] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %156 = arith.trunci %152 : i32 to i16
    llvm.store volatile %156, %155 {alignment = 1 : i64} : i16, !llvm.ptr
    cf.br ^bb11
  }
  func.func @f197(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %c1_i32_5 = arith.constant 1 : i32
    %6 = llvm.alloca %c1_i32_5 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %6 : i32, !llvm.ptr
    %c1_i32_6 = arith.constant 1 : i32
    %7 = llvm.alloca %c1_i32_6 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %7 : i32, !llvm.ptr
    %c1_i32_7 = arith.constant 1 : i32
    %8 = llvm.alloca %c1_i32_7 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %8 : i32, !llvm.ptr
    %c1_i32_8 = arith.constant 1 : i32
    %9 = llvm.alloca %c1_i32_8 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %9 : i32, !llvm.ptr
    %c1_i32_9 = arith.constant 1 : i32
    %10 = llvm.alloca %c1_i32_9 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %10 : i32, !llvm.ptr
    %11 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %11[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %15 = arith.cmpi uge, %14, %c16_i32 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_10 : i32
    cf.cond_br %17, ^bb4, ^bb5
  ^bb2(%18: i32):  // pred: ^bb22
    return %18 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb11
    %19 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_11 = arith.constant 0 : i32
    %20 = arith.cmpi eq, %19, %c0_i32_11 : i32
    %21 = arith.extui %20 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %22 = arith.cmpi ne, %21, %c0_i32_12 : i32
    cf.cond_br %22, ^bb22, ^bb23
  ^bb4:  // pred: ^bb1
    %23 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_13 = arith.constant 0 : i32
    %24 = llvm.load %0 : !llvm.ptr -> i32
    %25 = arith.subi %c0_i32_13, %24 : i32
    %c3_i32 = arith.constant 3 : i32
    %26 = arith.andi %25, %c3_i32 : i32
    llvm.store %26, %4 : i32, !llvm.ptr
    %27 = arith.addi %23, %26 : i32
    llvm.store %27, %5 : i32, !llvm.ptr
    %28 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_14 = arith.constant 0 : i32
    %29 = arith.cmpi eq, %28, %c0_i32_14 : i32
    %30 = arith.extui %29 : i1 to i32
    %c0_i32_15 = arith.constant 0 : i32
    %31 = arith.cmpi ne, %30, %c0_i32_15 : i32
    cf.cond_br %31, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %32 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %32, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb8
    %33 = llvm.load %5 : !llvm.ptr -> i32
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %4 : !llvm.ptr -> i32
    %36 = arith.subi %34, %35 : i32
    llvm.store %36, %7 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %37 = arith.andi %36, %c-4_i32 : i32
    llvm.store %37, %8 : i32, !llvm.ptr
    %38 = arith.addi %33, %37 : i32
    llvm.store %38, %3 : i32, !llvm.ptr
    %39 = llvm.load %1 : !llvm.ptr -> i32
    %40 = llvm.load %4 : !llvm.ptr -> i32
    %41 = arith.addi %39, %40 : i32
    llvm.store %41, %9 : i32, !llvm.ptr
    %c3_i32_16 = arith.constant 3 : i32
    %42 = arith.andi %41, %c3_i32_16 : i32
    %c0_i32_17 = arith.constant 0 : i32
    %43 = arith.cmpi eq, %42, %c0_i32_17 : i32
    %44 = arith.extui %43 : i1 to i32
    %c0_i32_18 = arith.constant 0 : i32
    %45 = arith.cmpi ne, %44, %c0_i32_18 : i32
    cf.cond_br %45, ^bb12, ^bb13
  ^bb7:  // pred: ^bb4
    %46 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %46, %3 : i32, !llvm.ptr
    %47 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %47, %6 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb8:  // pred: ^bb10
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb7, ^bb9
    %48 = llvm.load %3 : !llvm.ptr -> i32
    %49 = llvm.load %6 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %50 = arith.extui %49 : i32 to i64
    %51 = arith.addi %50, %c0_i64 : i64
    %52 = llvm.getelementptr %13[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %53 = llvm.load volatile %52 {alignment = 1 : i64} : !llvm.ptr -> i8
    %54 = arith.extui %53 : i8 to i32
    %c0_i64_19 = arith.constant 0 : i64
    %55 = arith.extui %48 : i32 to i64
    %56 = arith.addi %55, %c0_i64_19 : i64
    %57 = llvm.getelementptr %13[%56] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %58 = arith.trunci %54 : i32 to i8
    llvm.store volatile %58, %57 {alignment = 1 : i64} : i8, !llvm.ptr
    %59 = llvm.load %6 : !llvm.ptr -> i32
    %c1_i32_20 = arith.constant 1 : i32
    %60 = arith.addi %59, %c1_i32_20 : i32
    llvm.store %60, %6 : i32, !llvm.ptr
    %61 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_21 = arith.constant 1 : i32
    %62 = arith.addi %61, %c1_i32_21 : i32
    llvm.store %62, %3 : i32, !llvm.ptr
    %63 = llvm.load %5 : !llvm.ptr -> i32
    %64 = arith.cmpi ult, %62, %63 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_22 = arith.constant 0 : i32
    %66 = arith.cmpi ne, %65, %c0_i32_22 : i32
    cf.cond_br %66, ^bb9, ^bb10
  ^bb10:  // pred: ^bb9
    cf.br ^bb8
  ^bb11:  // 4 preds: ^bb12, ^bb13, ^bb17, ^bb19
    %67 = llvm.load %7 : !llvm.ptr -> i32
    %c3_i32_23 = arith.constant 3 : i32
    %68 = arith.andi %67, %c3_i32_23 : i32
    llvm.store %68, %2 : i32, !llvm.ptr
    %69 = llvm.load %9 : !llvm.ptr -> i32
    %70 = llvm.load %8 : !llvm.ptr -> i32
    %71 = arith.addi %69, %70 : i32
    llvm.store %71, %1 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // 2 preds: ^bb6, ^bb15
    %72 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_24 = arith.constant 1 : i32
    %73 = arith.cmpi slt, %72, %c1_i32_24 : i32
    %74 = arith.extui %73 : i1 to i32
    %c0_i32_25 = arith.constant 0 : i32
    %75 = arith.cmpi ne, %74, %c0_i32_25 : i32
    cf.cond_br %75, ^bb11, ^bb18
  ^bb13:  // pred: ^bb6
    %76 = llvm.load %8 : !llvm.ptr -> i32
    %c1_i32_26 = arith.constant 1 : i32
    %77 = arith.cmpi slt, %76, %c1_i32_26 : i32
    %78 = arith.extui %77 : i1 to i32
    %c0_i32_27 = arith.constant 0 : i32
    %79 = arith.cmpi ne, %78, %c0_i32_27 : i32
    cf.cond_br %79, ^bb11, ^bb14
  ^bb14:  // pred: ^bb13
    %80 = llvm.load %9 : !llvm.ptr -> i32
    %c3_i32_28 = arith.constant 3 : i32
    %c31_i32 = arith.constant 31 : i32
    %81 = arith.cmpi ule, %c3_i32_28, %c31_i32 : i32
    %82 = scf.if %81 -> (i32) {
      %161 = arith.shli %80, %c3_i32_28 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_50 = arith.constant 0 : i32
      scf.yield %c0_i32_50 : i32
    }
    llvm.store %82, %6 : i32, !llvm.ptr
    %c24_i32 = arith.constant 24 : i32
    %83 = arith.andi %82, %c24_i32 : i32
    llvm.store %83, %2 : i32, !llvm.ptr
    %84 = llvm.load %9 : !llvm.ptr -> i32
    %c-4_i32_29 = arith.constant -4 : i32
    %85 = arith.andi %84, %c-4_i32_29 : i32
    llvm.store %85, %10 : i32, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    %86 = arith.addi %85, %c4_i32 : i32
    llvm.store %86, %1 : i32, !llvm.ptr
    %c0_i32_30 = arith.constant 0 : i32
    %87 = llvm.load %6 : !llvm.ptr -> i32
    %88 = arith.subi %c0_i32_30, %87 : i32
    %c24_i32_31 = arith.constant 24 : i32
    %89 = arith.andi %88, %c24_i32_31 : i32
    llvm.store %89, %4 : i32, !llvm.ptr
    %90 = llvm.load %10 : !llvm.ptr -> i32
    %c0_i64_32 = arith.constant 0 : i64
    %91 = arith.extui %90 : i32 to i64
    %92 = arith.addi %91, %c0_i64_32 : i64
    %93 = llvm.getelementptr %13[%92] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %94 = llvm.load volatile %93 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %94, %6 : i32, !llvm.ptr
    cf.br ^bb16
  ^bb15:  // no predecessors
    cf.br ^bb12
  ^bb16:  // 2 preds: ^bb14, ^bb16
    %95 = llvm.load %5 : !llvm.ptr -> i32
    %96 = llvm.load %6 : !llvm.ptr -> i32
    %97 = llvm.load %2 : !llvm.ptr -> i32
    %c31_i32_33 = arith.constant 31 : i32
    %98 = arith.cmpi ule, %97, %c31_i32_33 : i32
    %99 = scf.if %98 -> (i32) {
      %161 = arith.shrui %96, %97 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_50 = arith.constant 0 : i32
      scf.yield %c0_i32_50 : i32
    }
    %100 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_34 = arith.constant 0 : i64
    %101 = arith.extui %100 : i32 to i64
    %102 = arith.addi %101, %c0_i64_34 : i64
    %103 = llvm.getelementptr %13[%102] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %104 = llvm.load volatile %103 {alignment = 1 : i64} : !llvm.ptr -> i32
    llvm.store %104, %6 : i32, !llvm.ptr
    %105 = llvm.load %4 : !llvm.ptr -> i32
    %c31_i32_35 = arith.constant 31 : i32
    %106 = arith.cmpi ule, %105, %c31_i32_35 : i32
    %107 = scf.if %106 -> (i32) {
      %161 = arith.shli %104, %105 : i32
      scf.yield %161 : i32
    } else {
      %c0_i32_50 = arith.constant 0 : i32
      scf.yield %c0_i32_50 : i32
    }
    %108 = arith.ori %99, %107 : i32
    %c0_i64_36 = arith.constant 0 : i64
    %109 = arith.extui %95 : i32 to i64
    %110 = arith.addi %109, %c0_i64_36 : i64
    %111 = llvm.getelementptr %13[%110] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %108, %111 {alignment = 1 : i64} : i32, !llvm.ptr
    %112 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_37 = arith.constant 4 : i32
    %113 = arith.addi %112, %c4_i32_37 : i32
    llvm.store %113, %1 : i32, !llvm.ptr
    %114 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_38 = arith.constant 4 : i32
    %115 = arith.addi %114, %c4_i32_38 : i32
    llvm.store %115, %5 : i32, !llvm.ptr
    %116 = llvm.load %3 : !llvm.ptr -> i32
    %117 = arith.cmpi ult, %115, %116 : i32
    %118 = arith.extui %117 : i1 to i32
    %c0_i32_39 = arith.constant 0 : i32
    %119 = arith.cmpi ne, %118, %c0_i32_39 : i32
    cf.cond_br %119, ^bb16, ^bb17
  ^bb17:  // pred: ^bb16
    cf.br ^bb11
  ^bb18:  // pred: ^bb12
    %120 = llvm.load %9 : !llvm.ptr -> i32
    llvm.store %120, %1 : i32, !llvm.ptr
    cf.br ^bb20
  ^bb19:  // pred: ^bb21
    cf.br ^bb11
  ^bb20:  // 2 preds: ^bb18, ^bb20
    %121 = llvm.load %5 : !llvm.ptr -> i32
    %122 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_40 = arith.constant 0 : i64
    %123 = arith.extui %122 : i32 to i64
    %124 = arith.addi %123, %c0_i64_40 : i64
    %125 = llvm.getelementptr %13[%124] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %126 = llvm.load volatile %125 {alignment = 1 : i64} : !llvm.ptr -> i32
    %c0_i64_41 = arith.constant 0 : i64
    %127 = arith.extui %121 : i32 to i64
    %128 = arith.addi %127, %c0_i64_41 : i64
    %129 = llvm.getelementptr %13[%128] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %126, %129 {alignment = 1 : i64} : i32, !llvm.ptr
    %130 = llvm.load %1 : !llvm.ptr -> i32
    %c4_i32_42 = arith.constant 4 : i32
    %131 = arith.addi %130, %c4_i32_42 : i32
    llvm.store %131, %1 : i32, !llvm.ptr
    %132 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32_43 = arith.constant 4 : i32
    %133 = arith.addi %132, %c4_i32_43 : i32
    llvm.store %133, %5 : i32, !llvm.ptr
    %134 = llvm.load %3 : !llvm.ptr -> i32
    %135 = arith.cmpi ult, %133, %134 : i32
    %136 = arith.extui %135 : i1 to i32
    %c0_i32_44 = arith.constant 0 : i32
    %137 = arith.cmpi ne, %136, %c0_i32_44 : i32
    cf.cond_br %137, ^bb20, ^bb21
  ^bb21:  // pred: ^bb20
    cf.br ^bb19
  ^bb22:  // 2 preds: ^bb3, ^bb24
    %138 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%138 : i32)
  ^bb23:  // pred: ^bb3
    %139 = llvm.load %3 : !llvm.ptr -> i32
    %140 = llvm.load %2 : !llvm.ptr -> i32
    %141 = arith.addi %139, %140 : i32
    llvm.store %141, %5 : i32, !llvm.ptr
    cf.br ^bb25
  ^bb24:  // pred: ^bb26
    cf.br ^bb22
  ^bb25:  // 2 preds: ^bb23, ^bb25
    %142 = llvm.load %3 : !llvm.ptr -> i32
    %143 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_45 = arith.constant 0 : i64
    %144 = arith.extui %143 : i32 to i64
    %145 = arith.addi %144, %c0_i64_45 : i64
    %146 = llvm.getelementptr %13[%145] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %147 = llvm.load volatile %146 {alignment = 1 : i64} : !llvm.ptr -> i8
    %148 = arith.extui %147 : i8 to i32
    %c0_i64_46 = arith.constant 0 : i64
    %149 = arith.extui %142 : i32 to i64
    %150 = arith.addi %149, %c0_i64_46 : i64
    %151 = llvm.getelementptr %13[%150] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %152 = arith.trunci %148 : i32 to i8
    llvm.store volatile %152, %151 {alignment = 1 : i64} : i8, !llvm.ptr
    %153 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_47 = arith.constant 1 : i32
    %154 = arith.addi %153, %c1_i32_47 : i32
    llvm.store %154, %1 : i32, !llvm.ptr
    %155 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_48 = arith.constant 1 : i32
    %156 = arith.addi %155, %c1_i32_48 : i32
    llvm.store %156, %3 : i32, !llvm.ptr
    %157 = llvm.load %5 : !llvm.ptr -> i32
    %158 = arith.cmpi ult, %156, %157 : i32
    %159 = arith.extui %158 : i1 to i32
    %c0_i32_49 = arith.constant 0 : i32
    %160 = arith.cmpi ne, %159, %c0_i32_49 : i32
    cf.cond_br %160, ^bb25, ^bb26
  ^bb26:  // pred: ^bb25
    cf.br ^bb24
  }
  func.func @f198(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %9 = llvm.load %2 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %10 = arith.cmpi uge, %9, %c16_i32 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_5 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_5 : i32
    cf.cond_br %12, ^bb4, ^bb5
  ^bb2(%13: i32):  // pred: ^bb16
    return %13 : i32
  ^bb3:  // 2 preds: ^bb5, ^bb11
    %14 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %15 = arith.cmpi eq, %14, %c0_i32_6 : i32
    %16 = arith.extui %15 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %17 = arith.cmpi ne, %16, %c0_i32_7 : i32
    cf.cond_br %17, ^bb16, ^bb17
  ^bb4:  // pred: ^bb1
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32_8 = arith.constant 0 : i32
    %19 = llvm.load %0 : !llvm.ptr -> i32
    %20 = arith.subi %c0_i32_8, %19 : i32
    %c3_i32 = arith.constant 3 : i32
    %21 = arith.andi %20, %c3_i32 : i32
    llvm.store %21, %4 : i32, !llvm.ptr
    %22 = arith.addi %18, %21 : i32
    llvm.store %22, %5 : i32, !llvm.ptr
    %23 = llvm.load %4 : !llvm.ptr -> i32
    %c0_i32_9 = arith.constant 0 : i32
    %24 = arith.cmpi eq, %23, %c0_i32_9 : i32
    %25 = arith.extui %24 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %26 = arith.cmpi ne, %25, %c0_i32_10 : i32
    cf.cond_br %26, ^bb6, ^bb7
  ^bb5:  // pred: ^bb1
    %27 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %27, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // 2 preds: ^bb4, ^bb8
    %28 = llvm.load %5 : !llvm.ptr -> i32
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %30 = llvm.load %4 : !llvm.ptr -> i32
    %31 = arith.subi %29, %30 : i32
    llvm.store %31, %4 : i32, !llvm.ptr
    %c-4_i32 = arith.constant -4 : i32
    %32 = arith.andi %31, %c-4_i32 : i32
    llvm.store %32, %2 : i32, !llvm.ptr
    %33 = arith.addi %28, %32 : i32
    llvm.store %33, %3 : i32, !llvm.ptr
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %35 = arith.cmpi slt, %34, %c1_i32_11 : i32
    %36 = arith.extui %35 : i1 to i32
    %c0_i32_12 = arith.constant 0 : i32
    %37 = arith.cmpi ne, %36, %c0_i32_12 : i32
    cf.cond_br %37, ^bb11, ^bb12
  ^bb7:  // pred: ^bb4
    %38 = llvm.load %0 : !llvm.ptr -> i32
    llvm.store %38, %3 : i32, !llvm.ptr
    cf.br ^bb9
  ^bb8:  // pred: ^bb10
    cf.br ^bb6
  ^bb9:  // 2 preds: ^bb7, ^bb9
    %39 = llvm.load %3 : !llvm.ptr -> i32
    %40 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %41 = arith.extui %39 : i32 to i64
    %42 = arith.addi %41, %c0_i64 : i64
    %43 = llvm.getelementptr %8[%42] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %44 = arith.trunci %40 : i32 to i8
    llvm.store volatile %44, %43 {alignment = 1 : i64} : i8, !llvm.ptr
    %45 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_13 = arith.constant 1 : i32
    %46 = arith.addi %45, %c1_i32_13 : i32
    llvm.store %46, %3 : i32, !llvm.ptr
    %47 = llvm.load %5 : !llvm.ptr -> i32
    %48 = arith.cmpi ult, %46, %47 : i32
    %49 = arith.extui %48 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %50 = arith.cmpi ne, %49, %c0_i32_14 : i32
    cf.cond_br %50, ^bb9, ^bb10
  ^bb10:  // pred: ^bb9
    cf.br ^bb8
  ^bb11:  // 2 preds: ^bb6, ^bb13
    %51 = llvm.load %4 : !llvm.ptr -> i32
    %c3_i32_15 = arith.constant 3 : i32
    %52 = arith.andi %51, %c3_i32_15 : i32
    llvm.store %52, %2 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb12:  // pred: ^bb6
    %53 = llvm.load %1 : !llvm.ptr -> i32
    %c255_i32 = arith.constant 255 : i32
    %54 = arith.andi %53, %c255_i32 : i32
    %c16843009_i32 = arith.constant 16843009 : i32
    %55 = arith.muli %54, %c16843009_i32 : i32
    llvm.store %55, %2 : i32, !llvm.ptr
    cf.br ^bb14
  ^bb13:  // pred: ^bb15
    cf.br ^bb11
  ^bb14:  // 2 preds: ^bb12, ^bb14
    %56 = llvm.load %5 : !llvm.ptr -> i32
    %57 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i64_16 = arith.constant 0 : i64
    %58 = arith.extui %56 : i32 to i64
    %59 = arith.addi %58, %c0_i64_16 : i64
    %60 = llvm.getelementptr %8[%59] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    llvm.store volatile %57, %60 {alignment = 1 : i64} : i32, !llvm.ptr
    %61 = llvm.load %5 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %62 = arith.addi %61, %c4_i32 : i32
    llvm.store %62, %5 : i32, !llvm.ptr
    %63 = llvm.load %3 : !llvm.ptr -> i32
    %64 = arith.cmpi ult, %62, %63 : i32
    %65 = arith.extui %64 : i1 to i32
    %c0_i32_17 = arith.constant 0 : i32
    %66 = arith.cmpi ne, %65, %c0_i32_17 : i32
    cf.cond_br %66, ^bb14, ^bb15
  ^bb15:  // pred: ^bb14
    cf.br ^bb13
  ^bb16:  // 2 preds: ^bb3, ^bb18
    %67 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb2(%67 : i32)
  ^bb17:  // pred: ^bb3
    %68 = llvm.load %3 : !llvm.ptr -> i32
    %69 = llvm.load %2 : !llvm.ptr -> i32
    %70 = arith.addi %68, %69 : i32
    llvm.store %70, %5 : i32, !llvm.ptr
    cf.br ^bb19
  ^bb18:  // pred: ^bb20
    cf.br ^bb16
  ^bb19:  // 2 preds: ^bb17, ^bb19
    %71 = llvm.load %3 : !llvm.ptr -> i32
    %72 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_18 = arith.constant 0 : i64
    %73 = arith.extui %71 : i32 to i64
    %74 = arith.addi %73, %c0_i64_18 : i64
    %75 = llvm.getelementptr %8[%74] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %76 = arith.trunci %72 : i32 to i8
    llvm.store volatile %76, %75 {alignment = 1 : i64} : i8, !llvm.ptr
    %77 = llvm.load %3 : !llvm.ptr -> i32
    %c1_i32_19 = arith.constant 1 : i32
    %78 = arith.addi %77, %c1_i32_19 : i32
    llvm.store %78, %3 : i32, !llvm.ptr
    %79 = llvm.load %5 : !llvm.ptr -> i32
    %80 = arith.cmpi ult, %78, %79 : i32
    %81 = arith.extui %80 : i1 to i32
    %c0_i32_20 = arith.constant 0 : i32
    %82 = arith.cmpi ne, %81, %c0_i32_20 : i32
    cf.cond_br %82, ^bb19, ^bb20
  ^bb20:  // pred: ^bb19
    cf.br ^bb18
  }
  func.func @f199(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32_2 = arith.constant 1 : i32
    %3 = llvm.alloca %c1_i32_2 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %c1_i32_3 = arith.constant 1 : i32
    %4 = llvm.alloca %c1_i32_3 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %4 : i32, !llvm.ptr
    %c1_i32_4 = arith.constant 1 : i32
    %5 = llvm.alloca %c1_i32_4 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %5 : i32, !llvm.ptr
    %6 = llvm.getelementptr %arg0[944] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32_5 = arith.constant 0 : i32
    llvm.store %c0_i32_5, %3 : i32, !llvm.ptr
    %9 = llvm.load %2 : !llvm.ptr -> i32
    %c0_i32_6 = arith.constant 0 : i32
    %10 = arith.cmpi eq, %9, %c0_i32_6 : i32
    %11 = arith.extui %10 : i1 to i32
    %c0_i32_7 = arith.constant 0 : i32
    %12 = arith.cmpi ne, %11, %c0_i32_7 : i32
    cf.cond_br %12, ^bb3, ^bb4
  ^bb2(%13: i32):  // pred: ^bb3
    return %13 : i32
  ^bb3:  // 3 preds: ^bb1, ^bb5, ^bb8
    %14 = llvm.load %3 : !llvm.ptr -> i32
    cf.br ^bb2(%14 : i32)
  ^bb4:  // pred: ^bb1
    cf.br ^bb7
  ^bb5:  // 2 preds: ^bb6, ^bb7
    %15 = llvm.load %4 : !llvm.ptr -> i32
    %16 = llvm.load %5 : !llvm.ptr -> i32
    %17 = arith.subi %15, %16 : i32
    llvm.store %17, %3 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb6:  // no predecessors
    cf.br ^bb5
  ^bb7:  // 2 preds: ^bb4, ^bb9
    %18 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %19 = arith.extui %18 : i32 to i64
    %20 = arith.addi %19, %c0_i64 : i64
    %21 = llvm.getelementptr %8[%20] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %22 = llvm.load volatile %21 {alignment = 1 : i64} : !llvm.ptr -> i8
    %23 = arith.extui %22 : i8 to i32
    llvm.store %23, %4 : i32, !llvm.ptr
    %24 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64_8 = arith.constant 0 : i64
    %25 = arith.extui %24 : i32 to i64
    %26 = arith.addi %25, %c0_i64_8 : i64
    %27 = llvm.getelementptr %8[%26] : (!llvm.ptr, i64) -> !llvm.ptr, i8
    %28 = llvm.load volatile %27 {alignment = 1 : i64} : !llvm.ptr -> i8
    %29 = arith.extui %28 : i8 to i32
    llvm.store %29, %5 : i32, !llvm.ptr
    %30 = arith.cmpi eq, %23, %29 : i32
    %31 = arith.extui %30 : i1 to i32
    %c0_i32_9 = arith.constant 0 : i32
    %32 = arith.cmpi eq, %31, %c0_i32_9 : i32
    %33 = arith.extui %32 : i1 to i32
    %c0_i32_10 = arith.constant 0 : i32
    %34 = arith.cmpi ne, %33, %c0_i32_10 : i32
    cf.cond_br %34, ^bb5, ^bb8
  ^bb8:  // pred: ^bb7
    %35 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32_11 = arith.constant 1 : i32
    %36 = arith.addi %35, %c1_i32_11 : i32
    llvm.store %36, %0 : i32, !llvm.ptr
    %37 = llvm.load %1 : !llvm.ptr -> i32
    %c1_i32_12 = arith.constant 1 : i32
    %38 = arith.addi %37, %c1_i32_12 : i32
    llvm.store %38, %1 : i32, !llvm.ptr
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %c-1_i32 = arith.constant -1 : i32
    %40 = arith.addi %39, %c-1_i32 : i32
    llvm.store %40, %2 : i32, !llvm.ptr
    %c0_i32_13 = arith.constant 0 : i32
    %41 = arith.cmpi eq, %40, %c0_i32_13 : i32
    %42 = arith.extui %41 : i1 to i32
    %c0_i32_14 = arith.constant 0 : i32
    %43 = arith.cmpi ne, %42, %c0_i32_14 : i32
    cf.cond_br %43, ^bb3, ^bb9
  ^bb9:  // pred: ^bb8
    cf.br ^bb7
  }
  func.func @f200(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = call @f198(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f201(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = call @f199(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func @f202(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %4 = llvm.load %1 : !llvm.ptr -> i32
    %5 = llvm.load %2 : !llvm.ptr -> i32
    %6 = call @f197(%arg0, %3, %4, %5) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
  func.func private @dora_fn_wasm_gas_limit() -> i64
}
