---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @"const-i32"(%arg0: !llvm.ptr) -> i32 {
    %c306_i32 = arith.constant 306 : i32
    cf.br ^bb1(%c306_i32 : i32)
  ^bb1(%0: i32):  // pred: ^bb0
    return %0 : i32
  }
  func.func @"const-i64"(%arg0: !llvm.ptr) -> i64 {
    %c356_i64 = arith.constant 356 : i64
    cf.br ^bb1(%c356_i64 : i64)
  ^bb1(%0: i64):  // pred: ^bb0
    return %0 : i64
  }
  func.func @"const-f32"(%arg0: !llvm.ptr) -> f32 {
    %cst = arith.constant 1.16517274E+9 : f32
    cf.br ^bb1(%cst : f32)
  ^bb1(%0: f32):  // pred: ^bb0
    return %0 : f32
  }
  func.func @"const-f64"(%arg0: !llvm.ptr) -> f64 {
    %cst = arith.constant 4.6608825667005972E+18 : f64
    cf.br ^bb1(%cst : f64)
  ^bb1(%0: f64):  // pred: ^bb0
    return %0 : f64
  }
  func.func @"const-i32-i64"(%arg0: !llvm.ptr) -> (i32, i64) {
    %c306_i32 = arith.constant 306 : i32
    %c356_i64 = arith.constant 356 : i64
    cf.br ^bb1(%c306_i32, %c356_i64 : i32, i64)
  ^bb1(%0: i32, %1: i64):  // pred: ^bb0
    return %0, %1 : i32, i64
  }
  func.func @"id-i32"(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @"id-i64"(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i64
    cf.br ^bb1(%1 : i64)
  ^bb1(%2: i64):  // pred: ^bb0
    return %2 : i64
  }
  func.func @"id-f32"(%arg0: !llvm.ptr, %arg1: f32) -> f32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    cf.br ^bb1(%1 : f32)
  ^bb1(%2: f32):  // pred: ^bb0
    return %2 : f32
  }
  func.func @"id-f64"(%arg0: !llvm.ptr, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f64
    cf.br ^bb1(%1 : f64)
  ^bb1(%2: f64):  // pred: ^bb0
    return %2 : f64
  }
  func.func @"id-i32-f64"(%arg0: !llvm.ptr, %arg1: i32, %arg2: f64) -> (i32, f64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> f64
    cf.br ^bb1(%2, %3 : i32, f64)
  ^bb1(%4: i32, %5: f64):  // pred: ^bb0
    return %4, %5 : i32, f64
  }
  func.func @"swap-i32-i32"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> (i32, i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%2, %3 : i32, i32)
  ^bb1(%4: i32, %5: i32):  // pred: ^bb0
    return %4, %5 : i32, i32
  }
  func.func @"swap-f32-f64"(%arg0: !llvm.ptr, %arg1: f32, %arg2: f64) -> (f64, f32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f64
    %3 = llvm.load %0 : !llvm.ptr -> f32
    cf.br ^bb1(%2, %3 : f64, f32)
  ^bb1(%4: f64, %5: f32):  // pred: ^bb0
    return %4, %5 : f64, f32
  }
  func.func @"swap-f64-i32"(%arg0: !llvm.ptr, %arg1: f64, %arg2: i32) -> (i32, f64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.load %0 : !llvm.ptr -> f64
    cf.br ^bb1(%2, %3 : i32, f64)
  ^bb1(%4: i32, %5: f64):  // pred: ^bb0
    return %4, %5 : i32, f64
  }
  func.func @"f32-i32"(%arg0: !llvm.ptr, %arg1: f32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @"i32-i64"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb1(%2 : i64)
  ^bb1(%3: i64):  // pred: ^bb0
    return %3 : i64
  }
  func.func @"f64-f32"(%arg0: !llvm.ptr, %arg1: f64, %arg2: f32) -> f32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    cf.br ^bb1(%2 : f32)
  ^bb1(%3: f32):  // pred: ^bb0
    return %3 : f32
  }
  func.func @"i64-f64"(%arg0: !llvm.ptr, %arg1: i64, %arg2: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f64, !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f64
    cf.br ^bb1(%2 : f64)
  ^bb1(%3: f64):  // pred: ^bb0
    return %3 : f64
  }
  func.func @f17(%arg0: !llvm.ptr) -> i32 {
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%0 : i32)
  ^bb1(%1: i32):  // pred: ^bb0
    return %1 : i32
  }
  func.func @f18(%arg0: !llvm.ptr) -> i64 {
    %0 = call @"const-i64"(%arg0) : (!llvm.ptr) -> i64
    cf.br ^bb1(%0 : i64)
  ^bb1(%1: i64):  // pred: ^bb0
    return %1 : i64
  }
  func.func @f19(%arg0: !llvm.ptr) -> f32 {
    %0 = call @"const-f32"(%arg0) : (!llvm.ptr) -> f32
    cf.br ^bb1(%0 : f32)
  ^bb1(%1: f32):  // pred: ^bb0
    return %1 : f32
  }
  func.func @f20(%arg0: !llvm.ptr) -> f64 {
    %0 = call @"const-f64"(%arg0) : (!llvm.ptr) -> f64
    cf.br ^bb1(%0 : f64)
  ^bb1(%1: f64):  // pred: ^bb0
    return %1 : f64
  }
  func.func @f21(%arg0: !llvm.ptr) -> (i32, i64) {
    %0:2 = call @"const-i32-i64"(%arg0) : (!llvm.ptr) -> (i32, i64)
    cf.br ^bb1(%0#0, %0#1 : i32, i64)
  ^bb1(%1: i32, %2: i64):  // pred: ^bb0
    return %1, %2 : i32, i64
  }
  func.func @f22(%arg0: !llvm.ptr) -> i32 {
    %c32_i32 = arith.constant 32 : i32
    %0 = call @"id-i32"(%arg0, %c32_i32) : (!llvm.ptr, i32) -> i32
    cf.br ^bb1(%0 : i32)
  ^bb1(%1: i32):  // pred: ^bb0
    return %1 : i32
  }
  func.func @f23(%arg0: !llvm.ptr) -> i64 {
    %c64_i64 = arith.constant 64 : i64
    %0 = call @"id-i64"(%arg0, %c64_i64) : (!llvm.ptr, i64) -> i64
    cf.br ^bb1(%0 : i64)
  ^bb1(%1: i64):  // pred: ^bb0
    return %1 : i64
  }
  func.func @f24(%arg0: !llvm.ptr) -> f32 {
    %cst = arith.constant 1.06803757E+9 : f32
    %0 = call @"id-f32"(%arg0, %cst) : (!llvm.ptr, f32) -> f32
    cf.br ^bb1(%0 : f32)
  ^bb1(%1: f32):  // pred: ^bb0
    return %1 : f32
  }
  func.func @f25(%arg0: !llvm.ptr) -> f64 {
    %cst = arith.constant 4.6100647225615345E+18 : f64
    %0 = call @"id-f64"(%arg0, %cst) : (!llvm.ptr, f64) -> f64
    cf.br ^bb1(%0 : f64)
  ^bb1(%1: f64):  // pred: ^bb0
    return %1 : f64
  }
  func.func @f26(%arg0: !llvm.ptr) -> i32 {
    %cst = arith.constant 1.1073225E+9 : f32
    %c32_i32 = arith.constant 32 : i32
    %0 = call @"f32-i32"(%arg0, %cst, %c32_i32) : (!llvm.ptr, f32, i32) -> i32
    cf.br ^bb1(%0 : i32)
  ^bb1(%1: i32):  // pred: ^bb0
    return %1 : i32
  }
  func.func @f27(%arg0: !llvm.ptr) -> i64 {
    %c32_i32 = arith.constant 32 : i32
    %c64_i64 = arith.constant 64 : i64
    %0 = call @"i32-i64"(%arg0, %c32_i32, %c64_i64) : (!llvm.ptr, i32, i64) -> i64
    cf.br ^bb1(%0 : i64)
  ^bb1(%1: i64):  // pred: ^bb0
    return %1 : i64
  }
  func.func @f28(%arg0: !llvm.ptr) -> f32 {
    %cst = arith.constant 4.6342040165642404E+18 : f64
    %cst_0 = arith.constant 1.10729626E+9 : f32
    %0 = call @"f64-f32"(%arg0, %cst, %cst_0) : (!llvm.ptr, f64, f32) -> f32
    cf.br ^bb1(%0 : f32)
  ^bb1(%1: f32):  // pred: ^bb0
    return %1 : f32
  }
  func.func @f29(%arg0: !llvm.ptr) -> f64 {
    %c64_i64 = arith.constant 64 : i64
    %cst = arith.constant 4.6342110534386586E+18 : f64
    %0 = call @"i64-f64"(%arg0, %c64_i64, %cst) : (!llvm.ptr, i64, f64) -> f64
    cf.br ^bb1(%0 : f64)
  ^bb1(%1: f64):  // pred: ^bb0
    return %1 : f64
  }
  func.func @f30(%arg0: !llvm.ptr) -> (i32, f64) {
    %c32_i32 = arith.constant 32 : i32
    %cst = arith.constant 4.6100647225615345E+18 : f64
    %0:2 = call @"id-i32-f64"(%arg0, %c32_i32, %cst) : (!llvm.ptr, i32, f64) -> (i32, f64)
    cf.br ^bb1(%0#0, %0#1 : i32, f64)
  ^bb1(%1: i32, %2: f64):  // pred: ^bb0
    return %1, %2 : i32, f64
  }
  func.func @f31(%arg0: !llvm.ptr) -> (i32, i32) {
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %0:2 = call @"swap-i32-i32"(%arg0, %c1_i32, %c2_i32) : (!llvm.ptr, i32, i32) -> (i32, i32)
    cf.br ^bb1(%0#0, %0#1 : i32, i32)
  ^bb1(%1: i32, %2: i32):  // pred: ^bb0
    return %1, %2 : i32, i32
  }
  func.func @f32(%arg0: !llvm.ptr) -> (f64, f32) {
    %cst = arith.constant 1.06535322E+9 : f32
    %cst_0 = arith.constant 4.6116860184273879E+18 : f64
    %0:2 = call @"swap-f32-f64"(%arg0, %cst, %cst_0) : (!llvm.ptr, f32, f64) -> (f64, f32)
    cf.br ^bb1(%0#0, %0#1 : f64, f32)
  ^bb1(%1: f64, %2: f32):  // pred: ^bb0
    return %1, %2 : f64, f32
  }
  func.func @f33(%arg0: !llvm.ptr) -> (i32, f64) {
    %cst = arith.constant 4.6071824188000174E+18 : f64
    %c2_i32 = arith.constant 2 : i32
    %0:2 = call @"swap-f64-i32"(%arg0, %cst, %c2_i32) : (!llvm.ptr, f64, i32) -> (i32, f64)
    cf.br ^bb1(%0#0, %0#1 : i32, f64)
  ^bb1(%1: i32, %2: f64):  // pred: ^bb0
    return %1, %2 : i32, f64
  }
  func.func @f34(%arg0: !llvm.ptr) -> i32 {
    %c3_i32 = arith.constant 3 : i32
    %c4_i32 = arith.constant 4 : i32
    %0:2 = call @"swap-i32-i32"(%arg0, %c3_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> (i32, i32)
    %1 = "wasm.add"(%0#0, %0#1) : (i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f35(%arg0: !llvm.ptr) -> i32 {
    %c3_i32 = arith.constant 3 : i32
    %c4_i32 = arith.constant 4 : i32
    %0:2 = call @"swap-i32-i32"(%arg0, %c3_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> (i32, i32)
    %c5_i32 = arith.constant 5 : i32
    %1 = "wasm.add"(%0#1, %c5_i32) : (i32, i32) -> i32
    %2 = "wasm.mul"(%0#0, %1) : (i32, i32) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f36(%arg0: !llvm.ptr) -> (i32, i32) {
    %c3_i32 = arith.constant 3 : i32
    %c4_i32 = arith.constant 4 : i32
    %0:2 = call @"swap-i32-i32"(%arg0, %c3_i32, %c4_i32) : (!llvm.ptr, i32, i32) -> (i32, i32)
    %1:2 = call @"swap-i32-i32"(%arg0, %0#0, %0#1) : (!llvm.ptr, i32, i32) -> (i32, i32)
    cf.br ^bb1(%1#0, %1#1 : i32, i32)
  ^bb1(%2: i32, %3: i32):  // pred: ^bb0
    return %2, %3 : i32, i32
  }
  func.func @fac(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.eqz"(%1) : (i64) -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb2, ^bb3
  ^bb1(%4: i64):  // pred: ^bb4
    return %4 : i64
  ^bb2:  // pred: ^bb0
    %c1_i64_0 = arith.constant 1 : i64
    cf.br ^bb4(%c1_i64_0 : i64)
  ^bb3:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i64
    %6 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %7 = "wasm.sub"(%6, %c1_i64_1) : (i64, i64) -> i64
    %8 = call @fac(%arg0, %7) : (!llvm.ptr, i64) -> i64
    %9 = "wasm.mul"(%5, %8) : (i64, i64) -> i64
    cf.br ^bb4(%9 : i64)
  ^bb4(%10: i64):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%10 : i64)
  }
  func.func @"fac-acc"(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = "wasm.eqz"(%2) : (i64) -> i32
    %c0_i32 = arith.constant 0 : i32
    %4 = arith.cmpi ne, %3, %c0_i32 : i32
    cf.cond_br %4, ^bb2, ^bb3
  ^bb1(%5: i64):  // pred: ^bb4
    return %5 : i64
  ^bb2:  // pred: ^bb0
    %6 = llvm.load %1 : !llvm.ptr -> i64
    cf.br ^bb4(%6 : i64)
  ^bb3:  // pred: ^bb0
    %7 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_1 = arith.constant 1 : i64
    %8 = "wasm.sub"(%7, %c1_i64_1) : (i64, i64) -> i64
    %9 = llvm.load %0 : !llvm.ptr -> i64
    %10 = llvm.load %1 : !llvm.ptr -> i64
    %11 = "wasm.mul"(%9, %10) : (i64, i64) -> i64
    %12 = call @"fac-acc"(%arg0, %8, %11) : (!llvm.ptr, i64, i64) -> i64
    cf.br ^bb4(%12 : i64)
  ^bb4(%13: i64):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%13 : i64)
  }
  func.func @fib(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %2 = "wasm.leu"(%1, %c1_i64_0) : (i64, i64) -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb2, ^bb3
  ^bb1(%4: i64):  // pred: ^bb4
    return %4 : i64
  ^bb2:  // pred: ^bb0
    %c1_i64_1 = arith.constant 1 : i64
    cf.br ^bb4(%c1_i64_1 : i64)
  ^bb3:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i64
    %c2_i64 = arith.constant 2 : i64
    %6 = "wasm.sub"(%5, %c2_i64) : (i64, i64) -> i64
    %7 = call @fib(%arg0, %6) : (!llvm.ptr, i64) -> i64
    %8 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_2 = arith.constant 1 : i64
    %9 = "wasm.sub"(%8, %c1_i64_2) : (i64, i64) -> i64
    %10 = call @fib(%arg0, %9) : (!llvm.ptr, i64) -> i64
    %11 = "wasm.add"(%7, %10) : (i64, i64) -> i64
    cf.br ^bb4(%11 : i64)
  ^bb4(%12: i64):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%12 : i64)
  }
  func.func @even(%arg0: !llvm.ptr, %arg1: i64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.eqz"(%1) : (i64) -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb2, ^bb3
  ^bb1(%4: i32):  // pred: ^bb4
    return %4 : i32
  ^bb2:  // pred: ^bb0
    %c44_i32 = arith.constant 44 : i32
    cf.br ^bb4(%c44_i32 : i32)
  ^bb3:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %6 = "wasm.sub"(%5, %c1_i64_0) : (i64, i64) -> i64
    %7 = call @odd(%arg0, %6) : (!llvm.ptr, i64) -> i32
    cf.br ^bb4(%7 : i32)
  ^bb4(%8: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%8 : i32)
  }
  func.func @odd(%arg0: !llvm.ptr, %arg1: i64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.eqz"(%1) : (i64) -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb2, ^bb3
  ^bb1(%4: i32):  // pred: ^bb4
    return %4 : i32
  ^bb2:  // pred: ^bb0
    %c99_i32 = arith.constant 99 : i32
    cf.br ^bb4(%c99_i32 : i32)
  ^bb3:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i64
    %c1_i64_0 = arith.constant 1 : i64
    %6 = "wasm.sub"(%5, %c1_i64_0) : (i64, i64) -> i64
    %7 = call @even(%arg0, %6) : (!llvm.ptr, i64) -> i32
    cf.br ^bb4(%7 : i32)
  ^bb4(%8: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%8 : i32)
  }
  func.func @runaway(%arg0: !llvm.ptr) {
    call @runaway(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @"mutual-runaway1"(%arg0: !llvm.ptr) {
    call @"mutual-runaway2"(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @"mutual-runaway2"(%arg0: !llvm.ptr) {
    call @"mutual-runaway1"(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f45(%arg0: !llvm.ptr) -> i32 {
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %1 = "wasm.select"(%0, %c2_i32, %c3_i32) : (i32, i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f46(%arg0: !llvm.ptr) -> i32 {
    %c2_i32 = arith.constant 2 : i32
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %c3_i32 = arith.constant 3 : i32
    %1 = "wasm.select"(%c2_i32, %0, %c3_i32) : (i32, i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f47(%arg0: !llvm.ptr) -> i32 {
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %1 = "wasm.select"(%c2_i32, %c3_i32, %0) : (i32, i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f48(%arg0: !llvm.ptr) -> i32 {
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %0, %c0_i32 : i32
    cf.cond_br %1, ^bb2, ^bb3
  ^bb1(%2: i32):  // pred: ^bb4
    return %2 : i32
  ^bb2:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb3:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb4(%c2_i32 : i32)
  ^bb4(%3: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%3 : i32)
  }
  func.func @f49(%arg0: !llvm.ptr) -> i32 {
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c2_i32, %c0_i32 : i32
    cf.cond_br %1, ^bb2(%0 : i32), ^bb3(%0 : i32)
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1(%3 : i32)
  ^bb3(%4: i32):  // pred: ^bb0
    cf.br ^bb2(%0 : i32)
  }
  func.func @f50(%arg0: !llvm.ptr) -> i32 {
    %c2_i32 = arith.constant 2 : i32
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %0, %c0_i32 : i32
    cf.cond_br %1, ^bb2(%c2_i32 : i32), ^bb3(%c2_i32 : i32)
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1(%3 : i32)
  ^bb3(%4: i32):  // pred: ^bb0
    cf.br ^bb2(%c2_i32 : i32)
  }
  func.func @f51(%arg0: !llvm.ptr) -> i32 {
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i64 = arith.constant 0 : i64
    cf.switch %c2_i32 : i32, [
      default: ^bb2(%0 : i32),
      0: ^bb2(%0 : i32)
    ]
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // 2 preds: ^bb0, ^bb0
    cf.br ^bb1(%2 : i32)
  }
  func.func @f52(%arg0: !llvm.ptr) -> i32 {
    %c2_i32 = arith.constant 2 : i32
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %c0_i64 = arith.constant 0 : i64
    cf.switch %0 : i32, [
      default: ^bb2(%c2_i32 : i32),
      0: ^bb2(%c2_i32 : i32)
    ]
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // 2 preds: ^bb0, ^bb0
    cf.br ^bb1(%2 : i32)
  }
  func.func @func(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f54(%arg0: !llvm.ptr) {
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.extui %0 : i32 to i64
    %2 = arith.addi %1, %c0_i64 : i64
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %5[%2] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c1_i32, %6 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f55(%arg0: !llvm.ptr) {
    %c10_i32 = arith.constant 10 : i32
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.extui %c10_i32 : i32 to i64
    %2 = arith.addi %1, %c0_i64 : i64
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %5[%2] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %0, %6 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f56(%arg0: !llvm.ptr) -> i32 {
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %c0_i32 = arith.constant 0 : i32
    %1 = "wasm.mem_grow"(%0, %c0_i32) : (i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f57(%arg0: !llvm.ptr) -> i32 {
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1(%0 : i32)
  ^bb1(%1: i32):  // pred: ^bb0
    return %1 : i32
  }
  func.func @f58(%arg0: !llvm.ptr) {
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f59(%arg0: !llvm.ptr) -> i32 {
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    cf.br ^bb2(%0 : i32)
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // pred: ^bb0
    cf.br ^bb1(%2 : i32)
  }
  func.func @f60(%arg0: !llvm.ptr) -> i32 {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    llvm.store %1, %0 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f61(%arg0: !llvm.ptr) -> i32 {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    llvm.store %1, %0 : i32, !llvm.ptr
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f62(%arg0: !llvm.ptr) -> i32 {
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %1 = llvm.getelementptr %arg0[144] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    llvm.store %0, %2 : i32, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    cf.br ^bb1(%3 : i32)
  ^bb1(%4: i32):  // pred: ^bb0
    return %4 : i32
  }
  func.func @f63(%arg0: !llvm.ptr) -> i32 {
    %0 = call @"const-i32"(%arg0) : (!llvm.ptr) -> i32
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.extui %0 : i32 to i64
    %2 = arith.addi %1, %c0_i64 : i64
    %3 = llvm.getelementptr %arg0[120] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %5[%2] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %7 = llvm.load %6 : !llvm.ptr -> i32
    cf.br ^bb1(%7 : i32)
  ^bb1(%8: i32):  // pred: ^bb0
    return %8 : i32
  }
  func.func @dummy(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @du(%arg0: !llvm.ptr, %arg1: f32) -> f32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    cf.br ^bb1(%1 : f32)
  ^bb1(%2: f32):  // pred: ^bb0
    return %2 : f32
  }
  func.func @f66(%arg0: !llvm.ptr) -> f32 {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = call @du(%arg0, %cst) : (!llvm.ptr, f32) -> f32
    %1 = "wasm.sqrt"(%0) : (f32) -> f32
    cf.br ^bb2(%1 : f32)
  ^bb1(%2: f32):  // pred: ^bb2
    return %2 : f32
  ^bb2(%3: f32):  // pred: ^bb0
    cf.br ^bb1(%3 : f32)
  }
  func.func @f67(%arg0: !llvm.ptr) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = call @dummy(%arg0, %c1_i32) : (!llvm.ptr, i32) -> i32
    %c10_i32 = arith.constant 10 : i32
    %1 = "wasm.add"(%0, %c10_i32) : (i32, i32) -> i32
    cf.br ^bb2(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // pred: ^bb0
    cf.br ^bb1(%3 : i32)
  }
  func.func @f68(%arg0: !llvm.ptr) -> i32 {
    %c10_i32 = arith.constant 10 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = call @dummy(%arg0, %c1_i32) : (!llvm.ptr, i32) -> i32
    %1 = "wasm.sub"(%c10_i32, %0) : (i32, i32) -> i32
    cf.br ^bb2(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // pred: ^bb0
    cf.br ^bb1(%3 : i32)
  }
  func.func @f69(%arg0: !llvm.ptr) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = call @dummy(%arg0, %c1_i32) : (!llvm.ptr, i32) -> i32
    %1 = "wasm.eqz"(%0) : (i32) -> i32
    cf.br ^bb2(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // pred: ^bb0
    cf.br ^bb1(%3 : i32)
  }
  func.func @f70(%arg0: !llvm.ptr) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = call @dummy(%arg0, %c1_i32) : (!llvm.ptr, i32) -> i32
    %c10_i32 = arith.constant 10 : i32
    %1 = "wasm.leu"(%0, %c10_i32) : (i32, i32) -> i32
    cf.br ^bb2(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // pred: ^bb0
    cf.br ^bb1(%3 : i32)
  }
  func.func @f71(%arg0: !llvm.ptr) -> i32 {
    %c10_i32 = arith.constant 10 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = call @dummy(%arg0, %c1_i32) : (!llvm.ptr, i32) -> i32
    %1 = "wasm.ne"(%c10_i32, %0) : (i32, i32) -> i32
    cf.br ^bb2(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // pred: ^bb0
    cf.br ^bb1(%3 : i32)
  }
  func.func @f72(%arg0: !llvm.ptr) -> i64 {
    %c1_i32 = arith.constant 1 : i32
    %0 = call @dummy(%arg0, %c1_i32) : (!llvm.ptr, i32) -> i32
    %1 = "wasm.i64_extend_i32s"(%0) : (i32) -> i64
    cf.br ^bb2(%1 : i64)
  ^bb1(%2: i64):  // pred: ^bb2
    return %2 : i64
  ^bb2(%3: i64):  // pred: ^bb0
    cf.br ^bb1(%3 : i64)
  }
  func.func @"return-from-long-argument-list-helper"(%arg0: !llvm.ptr, %arg1: f32, %arg2: i32, %arg3: i32, %arg4: f64, %arg5: f32, %arg6: f32, %arg7: f32, %arg8: f64, %arg9: f32, %arg10: i32, %arg11: i32, %arg12: f32, %arg13: f64, %arg14: i64, %arg15: i64, %arg16: i32, %arg17: i64, %arg18: i64, %arg19: f32, %arg20: i64, %arg21: i64, %arg22: i64, %arg23: i32, %arg24: f32, %arg25: f32, %arg26: f32, %arg27: f64, %arg28: f32, %arg29: i32, %arg30: i64, %arg31: f32, %arg32: f64, %arg33: f64, %arg34: f32, %arg35: i32, %arg36: f32, %arg37: f32, %arg38: f64, %arg39: i64, %arg40: f64, %arg41: i32, %arg42: i64, %arg43: f32, %arg44: f64, %arg45: i32, %arg46: i32, %arg47: i32, %arg48: i64, %arg49: f64, %arg50: i32, %arg51: i64, %arg52: i64, %arg53: f64, %arg54: f64, %arg55: f64, %arg56: f64, %arg57: f64, %arg58: f64, %arg59: i32, %arg60: f32, %arg61: f64, %arg62: f64, %arg63: i32, %arg64: i64, %arg65: f32, %arg66: f32, %arg67: f32, %arg68: i32, %arg69: f64, %arg70: f64, %arg71: f64, %arg72: f64, %arg73: f64, %arg74: f32, %arg75: i64, %arg76: i64, %arg77: i32, %arg78: i32, %arg79: i32, %arg80: f32, %arg81: f64, %arg82: i32, %arg83: i64, %arg84: f32, %arg85: f32, %arg86: f32, %arg87: i32, %arg88: i32, %arg89: f32, %arg90: f64, %arg91: i64, %arg92: f32, %arg93: f64, %arg94: f32, %arg95: f32, %arg96: f32, %arg97: i32, %arg98: f32, %arg99: i64, %arg100: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : f64, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : f32, !llvm.ptr
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg6, %5 : f32, !llvm.ptr
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg7, %6 : f32, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg8, %7 : f64, !llvm.ptr
    %c1_i64_7 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_7 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg9, %8 : f32, !llvm.ptr
    %c1_i64_8 = arith.constant 1 : i64
    %9 = llvm.alloca %c1_i64_8 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg10, %9 : i32, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    %10 = llvm.alloca %c1_i64_9 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg11, %10 : i32, !llvm.ptr
    %c1_i64_10 = arith.constant 1 : i64
    %11 = llvm.alloca %c1_i64_10 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg12, %11 : f32, !llvm.ptr
    %c1_i64_11 = arith.constant 1 : i64
    %12 = llvm.alloca %c1_i64_11 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg13, %12 : f64, !llvm.ptr
    %c1_i64_12 = arith.constant 1 : i64
    %13 = llvm.alloca %c1_i64_12 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg14, %13 : i64, !llvm.ptr
    %c1_i64_13 = arith.constant 1 : i64
    %14 = llvm.alloca %c1_i64_13 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg15, %14 : i64, !llvm.ptr
    %c1_i64_14 = arith.constant 1 : i64
    %15 = llvm.alloca %c1_i64_14 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg16, %15 : i32, !llvm.ptr
    %c1_i64_15 = arith.constant 1 : i64
    %16 = llvm.alloca %c1_i64_15 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg17, %16 : i64, !llvm.ptr
    %c1_i64_16 = arith.constant 1 : i64
    %17 = llvm.alloca %c1_i64_16 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg18, %17 : i64, !llvm.ptr
    %c1_i64_17 = arith.constant 1 : i64
    %18 = llvm.alloca %c1_i64_17 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg19, %18 : f32, !llvm.ptr
    %c1_i64_18 = arith.constant 1 : i64
    %19 = llvm.alloca %c1_i64_18 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg20, %19 : i64, !llvm.ptr
    %c1_i64_19 = arith.constant 1 : i64
    %20 = llvm.alloca %c1_i64_19 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg21, %20 : i64, !llvm.ptr
    %c1_i64_20 = arith.constant 1 : i64
    %21 = llvm.alloca %c1_i64_20 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg22, %21 : i64, !llvm.ptr
    %c1_i64_21 = arith.constant 1 : i64
    %22 = llvm.alloca %c1_i64_21 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg23, %22 : i32, !llvm.ptr
    %c1_i64_22 = arith.constant 1 : i64
    %23 = llvm.alloca %c1_i64_22 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg24, %23 : f32, !llvm.ptr
    %c1_i64_23 = arith.constant 1 : i64
    %24 = llvm.alloca %c1_i64_23 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg25, %24 : f32, !llvm.ptr
    %c1_i64_24 = arith.constant 1 : i64
    %25 = llvm.alloca %c1_i64_24 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg26, %25 : f32, !llvm.ptr
    %c1_i64_25 = arith.constant 1 : i64
    %26 = llvm.alloca %c1_i64_25 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg27, %26 : f64, !llvm.ptr
    %c1_i64_26 = arith.constant 1 : i64
    %27 = llvm.alloca %c1_i64_26 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg28, %27 : f32, !llvm.ptr
    %c1_i64_27 = arith.constant 1 : i64
    %28 = llvm.alloca %c1_i64_27 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg29, %28 : i32, !llvm.ptr
    %c1_i64_28 = arith.constant 1 : i64
    %29 = llvm.alloca %c1_i64_28 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg30, %29 : i64, !llvm.ptr
    %c1_i64_29 = arith.constant 1 : i64
    %30 = llvm.alloca %c1_i64_29 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg31, %30 : f32, !llvm.ptr
    %c1_i64_30 = arith.constant 1 : i64
    %31 = llvm.alloca %c1_i64_30 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg32, %31 : f64, !llvm.ptr
    %c1_i64_31 = arith.constant 1 : i64
    %32 = llvm.alloca %c1_i64_31 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg33, %32 : f64, !llvm.ptr
    %c1_i64_32 = arith.constant 1 : i64
    %33 = llvm.alloca %c1_i64_32 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg34, %33 : f32, !llvm.ptr
    %c1_i64_33 = arith.constant 1 : i64
    %34 = llvm.alloca %c1_i64_33 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg35, %34 : i32, !llvm.ptr
    %c1_i64_34 = arith.constant 1 : i64
    %35 = llvm.alloca %c1_i64_34 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg36, %35 : f32, !llvm.ptr
    %c1_i64_35 = arith.constant 1 : i64
    %36 = llvm.alloca %c1_i64_35 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg37, %36 : f32, !llvm.ptr
    %c1_i64_36 = arith.constant 1 : i64
    %37 = llvm.alloca %c1_i64_36 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg38, %37 : f64, !llvm.ptr
    %c1_i64_37 = arith.constant 1 : i64
    %38 = llvm.alloca %c1_i64_37 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg39, %38 : i64, !llvm.ptr
    %c1_i64_38 = arith.constant 1 : i64
    %39 = llvm.alloca %c1_i64_38 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg40, %39 : f64, !llvm.ptr
    %c1_i64_39 = arith.constant 1 : i64
    %40 = llvm.alloca %c1_i64_39 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg41, %40 : i32, !llvm.ptr
    %c1_i64_40 = arith.constant 1 : i64
    %41 = llvm.alloca %c1_i64_40 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg42, %41 : i64, !llvm.ptr
    %c1_i64_41 = arith.constant 1 : i64
    %42 = llvm.alloca %c1_i64_41 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg43, %42 : f32, !llvm.ptr
    %c1_i64_42 = arith.constant 1 : i64
    %43 = llvm.alloca %c1_i64_42 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg44, %43 : f64, !llvm.ptr
    %c1_i64_43 = arith.constant 1 : i64
    %44 = llvm.alloca %c1_i64_43 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg45, %44 : i32, !llvm.ptr
    %c1_i64_44 = arith.constant 1 : i64
    %45 = llvm.alloca %c1_i64_44 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg46, %45 : i32, !llvm.ptr
    %c1_i64_45 = arith.constant 1 : i64
    %46 = llvm.alloca %c1_i64_45 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg47, %46 : i32, !llvm.ptr
    %c1_i64_46 = arith.constant 1 : i64
    %47 = llvm.alloca %c1_i64_46 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg48, %47 : i64, !llvm.ptr
    %c1_i64_47 = arith.constant 1 : i64
    %48 = llvm.alloca %c1_i64_47 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg49, %48 : f64, !llvm.ptr
    %c1_i64_48 = arith.constant 1 : i64
    %49 = llvm.alloca %c1_i64_48 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg50, %49 : i32, !llvm.ptr
    %c1_i64_49 = arith.constant 1 : i64
    %50 = llvm.alloca %c1_i64_49 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg51, %50 : i64, !llvm.ptr
    %c1_i64_50 = arith.constant 1 : i64
    %51 = llvm.alloca %c1_i64_50 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg52, %51 : i64, !llvm.ptr
    %c1_i64_51 = arith.constant 1 : i64
    %52 = llvm.alloca %c1_i64_51 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg53, %52 : f64, !llvm.ptr
    %c1_i64_52 = arith.constant 1 : i64
    %53 = llvm.alloca %c1_i64_52 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg54, %53 : f64, !llvm.ptr
    %c1_i64_53 = arith.constant 1 : i64
    %54 = llvm.alloca %c1_i64_53 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg55, %54 : f64, !llvm.ptr
    %c1_i64_54 = arith.constant 1 : i64
    %55 = llvm.alloca %c1_i64_54 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg56, %55 : f64, !llvm.ptr
    %c1_i64_55 = arith.constant 1 : i64
    %56 = llvm.alloca %c1_i64_55 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg57, %56 : f64, !llvm.ptr
    %c1_i64_56 = arith.constant 1 : i64
    %57 = llvm.alloca %c1_i64_56 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg58, %57 : f64, !llvm.ptr
    %c1_i64_57 = arith.constant 1 : i64
    %58 = llvm.alloca %c1_i64_57 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg59, %58 : i32, !llvm.ptr
    %c1_i64_58 = arith.constant 1 : i64
    %59 = llvm.alloca %c1_i64_58 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg60, %59 : f32, !llvm.ptr
    %c1_i64_59 = arith.constant 1 : i64
    %60 = llvm.alloca %c1_i64_59 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg61, %60 : f64, !llvm.ptr
    %c1_i64_60 = arith.constant 1 : i64
    %61 = llvm.alloca %c1_i64_60 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg62, %61 : f64, !llvm.ptr
    %c1_i64_61 = arith.constant 1 : i64
    %62 = llvm.alloca %c1_i64_61 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg63, %62 : i32, !llvm.ptr
    %c1_i64_62 = arith.constant 1 : i64
    %63 = llvm.alloca %c1_i64_62 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg64, %63 : i64, !llvm.ptr
    %c1_i64_63 = arith.constant 1 : i64
    %64 = llvm.alloca %c1_i64_63 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg65, %64 : f32, !llvm.ptr
    %c1_i64_64 = arith.constant 1 : i64
    %65 = llvm.alloca %c1_i64_64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg66, %65 : f32, !llvm.ptr
    %c1_i64_65 = arith.constant 1 : i64
    %66 = llvm.alloca %c1_i64_65 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg67, %66 : f32, !llvm.ptr
    %c1_i64_66 = arith.constant 1 : i64
    %67 = llvm.alloca %c1_i64_66 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg68, %67 : i32, !llvm.ptr
    %c1_i64_67 = arith.constant 1 : i64
    %68 = llvm.alloca %c1_i64_67 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg69, %68 : f64, !llvm.ptr
    %c1_i64_68 = arith.constant 1 : i64
    %69 = llvm.alloca %c1_i64_68 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg70, %69 : f64, !llvm.ptr
    %c1_i64_69 = arith.constant 1 : i64
    %70 = llvm.alloca %c1_i64_69 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg71, %70 : f64, !llvm.ptr
    %c1_i64_70 = arith.constant 1 : i64
    %71 = llvm.alloca %c1_i64_70 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg72, %71 : f64, !llvm.ptr
    %c1_i64_71 = arith.constant 1 : i64
    %72 = llvm.alloca %c1_i64_71 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg73, %72 : f64, !llvm.ptr
    %c1_i64_72 = arith.constant 1 : i64
    %73 = llvm.alloca %c1_i64_72 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg74, %73 : f32, !llvm.ptr
    %c1_i64_73 = arith.constant 1 : i64
    %74 = llvm.alloca %c1_i64_73 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg75, %74 : i64, !llvm.ptr
    %c1_i64_74 = arith.constant 1 : i64
    %75 = llvm.alloca %c1_i64_74 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg76, %75 : i64, !llvm.ptr
    %c1_i64_75 = arith.constant 1 : i64
    %76 = llvm.alloca %c1_i64_75 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg77, %76 : i32, !llvm.ptr
    %c1_i64_76 = arith.constant 1 : i64
    %77 = llvm.alloca %c1_i64_76 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg78, %77 : i32, !llvm.ptr
    %c1_i64_77 = arith.constant 1 : i64
    %78 = llvm.alloca %c1_i64_77 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg79, %78 : i32, !llvm.ptr
    %c1_i64_78 = arith.constant 1 : i64
    %79 = llvm.alloca %c1_i64_78 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg80, %79 : f32, !llvm.ptr
    %c1_i64_79 = arith.constant 1 : i64
    %80 = llvm.alloca %c1_i64_79 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg81, %80 : f64, !llvm.ptr
    %c1_i64_80 = arith.constant 1 : i64
    %81 = llvm.alloca %c1_i64_80 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg82, %81 : i32, !llvm.ptr
    %c1_i64_81 = arith.constant 1 : i64
    %82 = llvm.alloca %c1_i64_81 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg83, %82 : i64, !llvm.ptr
    %c1_i64_82 = arith.constant 1 : i64
    %83 = llvm.alloca %c1_i64_82 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg84, %83 : f32, !llvm.ptr
    %c1_i64_83 = arith.constant 1 : i64
    %84 = llvm.alloca %c1_i64_83 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg85, %84 : f32, !llvm.ptr
    %c1_i64_84 = arith.constant 1 : i64
    %85 = llvm.alloca %c1_i64_84 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg86, %85 : f32, !llvm.ptr
    %c1_i64_85 = arith.constant 1 : i64
    %86 = llvm.alloca %c1_i64_85 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg87, %86 : i32, !llvm.ptr
    %c1_i64_86 = arith.constant 1 : i64
    %87 = llvm.alloca %c1_i64_86 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg88, %87 : i32, !llvm.ptr
    %c1_i64_87 = arith.constant 1 : i64
    %88 = llvm.alloca %c1_i64_87 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg89, %88 : f32, !llvm.ptr
    %c1_i64_88 = arith.constant 1 : i64
    %89 = llvm.alloca %c1_i64_88 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg90, %89 : f64, !llvm.ptr
    %c1_i64_89 = arith.constant 1 : i64
    %90 = llvm.alloca %c1_i64_89 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg91, %90 : i64, !llvm.ptr
    %c1_i64_90 = arith.constant 1 : i64
    %91 = llvm.alloca %c1_i64_90 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg92, %91 : f32, !llvm.ptr
    %c1_i64_91 = arith.constant 1 : i64
    %92 = llvm.alloca %c1_i64_91 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg93, %92 : f64, !llvm.ptr
    %c1_i64_92 = arith.constant 1 : i64
    %93 = llvm.alloca %c1_i64_92 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg94, %93 : f32, !llvm.ptr
    %c1_i64_93 = arith.constant 1 : i64
    %94 = llvm.alloca %c1_i64_93 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg95, %94 : f32, !llvm.ptr
    %c1_i64_94 = arith.constant 1 : i64
    %95 = llvm.alloca %c1_i64_94 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg96, %95 : f32, !llvm.ptr
    %c1_i64_95 = arith.constant 1 : i64
    %96 = llvm.alloca %c1_i64_95 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg97, %96 : i32, !llvm.ptr
    %c1_i64_96 = arith.constant 1 : i64
    %97 = llvm.alloca %c1_i64_96 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg98, %97 : f32, !llvm.ptr
    %c1_i64_97 = arith.constant 1 : i64
    %98 = llvm.alloca %c1_i64_97 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg99, %98 : i64, !llvm.ptr
    %c1_i64_98 = arith.constant 1 : i64
    %99 = llvm.alloca %c1_i64_98 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg100, %99 : i32, !llvm.ptr
    %100 = llvm.load %99 : !llvm.ptr -> i32
    cf.br ^bb1(%100 : i32)
  ^bb1(%101: i32):  // pred: ^bb0
    return %101 : i32
  }
  func.func @f74(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f32
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_0 = arith.constant 0 : i32
    %cst_1 = arith.constant 0.000000e+00 : f64
    %cst_2 = arith.constant 0.000000e+00 : f32
    %cst_3 = arith.constant 0.000000e+00 : f32
    %cst_4 = arith.constant 0.000000e+00 : f32
    %cst_5 = arith.constant 0.000000e+00 : f64
    %cst_6 = arith.constant 0.000000e+00 : f32
    %c0_i32_7 = arith.constant 0 : i32
    %c0_i32_8 = arith.constant 0 : i32
    %cst_9 = arith.constant 0.000000e+00 : f32
    %cst_10 = arith.constant 0.000000e+00 : f64
    %c0_i64 = arith.constant 0 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %c0_i64_14 = arith.constant 0 : i64
    %cst_15 = arith.constant 0.000000e+00 : f32
    %c0_i64_16 = arith.constant 0 : i64
    %c0_i64_17 = arith.constant 0 : i64
    %c0_i64_18 = arith.constant 0 : i64
    %c0_i32_19 = arith.constant 0 : i32
    %cst_20 = arith.constant 0.000000e+00 : f32
    %cst_21 = arith.constant 0.000000e+00 : f32
    %cst_22 = arith.constant 0.000000e+00 : f32
    %cst_23 = arith.constant 0.000000e+00 : f64
    %cst_24 = arith.constant 0.000000e+00 : f32
    %c0_i32_25 = arith.constant 0 : i32
    %c0_i64_26 = arith.constant 0 : i64
    %cst_27 = arith.constant 0.000000e+00 : f32
    %cst_28 = arith.constant 0.000000e+00 : f64
    %cst_29 = arith.constant 0.000000e+00 : f64
    %cst_30 = arith.constant 0.000000e+00 : f32
    %c0_i32_31 = arith.constant 0 : i32
    %cst_32 = arith.constant 0.000000e+00 : f32
    %cst_33 = arith.constant 0.000000e+00 : f32
    %cst_34 = arith.constant 0.000000e+00 : f64
    %c0_i64_35 = arith.constant 0 : i64
    %cst_36 = arith.constant 0.000000e+00 : f64
    %c0_i32_37 = arith.constant 0 : i32
    %c0_i64_38 = arith.constant 0 : i64
    %cst_39 = arith.constant 0.000000e+00 : f32
    %cst_40 = arith.constant 0.000000e+00 : f64
    %c0_i32_41 = arith.constant 0 : i32
    %c0_i32_42 = arith.constant 0 : i32
    %c0_i32_43 = arith.constant 0 : i32
    %c0_i64_44 = arith.constant 0 : i64
    %cst_45 = arith.constant 0.000000e+00 : f64
    %c0_i32_46 = arith.constant 0 : i32
    %c0_i64_47 = arith.constant 0 : i64
    %c0_i64_48 = arith.constant 0 : i64
    %cst_49 = arith.constant 0.000000e+00 : f64
    %cst_50 = arith.constant 0.000000e+00 : f64
    %cst_51 = arith.constant 0.000000e+00 : f64
    %cst_52 = arith.constant 0.000000e+00 : f64
    %cst_53 = arith.constant 0.000000e+00 : f64
    %cst_54 = arith.constant 0.000000e+00 : f64
    %c0_i32_55 = arith.constant 0 : i32
    %cst_56 = arith.constant 0.000000e+00 : f32
    %cst_57 = arith.constant 0.000000e+00 : f64
    %cst_58 = arith.constant 0.000000e+00 : f64
    %c0_i32_59 = arith.constant 0 : i32
    %c0_i64_60 = arith.constant 0 : i64
    %cst_61 = arith.constant 0.000000e+00 : f32
    %cst_62 = arith.constant 0.000000e+00 : f32
    %cst_63 = arith.constant 0.000000e+00 : f32
    %c0_i32_64 = arith.constant 0 : i32
    %cst_65 = arith.constant 0.000000e+00 : f64
    %cst_66 = arith.constant 0.000000e+00 : f64
    %cst_67 = arith.constant 0.000000e+00 : f64
    %cst_68 = arith.constant 0.000000e+00 : f64
    %cst_69 = arith.constant 0.000000e+00 : f64
    %cst_70 = arith.constant 0.000000e+00 : f32
    %c0_i64_71 = arith.constant 0 : i64
    %c0_i64_72 = arith.constant 0 : i64
    %c0_i32_73 = arith.constant 0 : i32
    %c0_i32_74 = arith.constant 0 : i32
    %c0_i32_75 = arith.constant 0 : i32
    %cst_76 = arith.constant 0.000000e+00 : f32
    %cst_77 = arith.constant 0.000000e+00 : f64
    %c0_i32_78 = arith.constant 0 : i32
    %c0_i64_79 = arith.constant 0 : i64
    %cst_80 = arith.constant 0.000000e+00 : f32
    %cst_81 = arith.constant 0.000000e+00 : f32
    %cst_82 = arith.constant 0.000000e+00 : f32
    %c0_i32_83 = arith.constant 0 : i32
    %c0_i32_84 = arith.constant 0 : i32
    %cst_85 = arith.constant 0.000000e+00 : f32
    %cst_86 = arith.constant 0.000000e+00 : f64
    %c0_i64_87 = arith.constant 0 : i64
    %cst_88 = arith.constant 0.000000e+00 : f32
    %cst_89 = arith.constant 0.000000e+00 : f64
    %cst_90 = arith.constant 0.000000e+00 : f32
    %cst_91 = arith.constant 0.000000e+00 : f32
    %cst_92 = arith.constant 0.000000e+00 : f32
    %c0_i32_93 = arith.constant 0 : i32
    %cst_94 = arith.constant 0.000000e+00 : f32
    %c0_i64_95 = arith.constant 0 : i64
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = call @"return-from-long-argument-list-helper"(%arg0, %cst, %c0_i32, %c0_i32_0, %cst_1, %cst_2, %cst_3, %cst_4, %cst_5, %cst_6, %c0_i32_7, %c0_i32_8, %cst_9, %cst_10, %c0_i64, %c0_i64_11, %c0_i32_12, %c0_i64_13, %c0_i64_14, %cst_15, %c0_i64_16, %c0_i64_17, %c0_i64_18, %c0_i32_19, %cst_20, %cst_21, %cst_22, %cst_23, %cst_24, %c0_i32_25, %c0_i64_26, %cst_27, %cst_28, %cst_29, %cst_30, %c0_i32_31, %cst_32, %cst_33, %cst_34, %c0_i64_35, %cst_36, %c0_i32_37, %c0_i64_38, %cst_39, %cst_40, %c0_i32_41, %c0_i32_42, %c0_i32_43, %c0_i64_44, %cst_45, %c0_i32_46, %c0_i64_47, %c0_i64_48, %cst_49, %cst_50, %cst_51, %cst_52, %cst_53, %cst_54, %c0_i32_55, %cst_56, %cst_57, %cst_58, %c0_i32_59, %c0_i64_60, %cst_61, %cst_62, %cst_63, %c0_i32_64, %cst_65, %cst_66, %cst_67, %cst_68, %cst_69, %cst_70, %c0_i64_71, %c0_i64_72, %c0_i32_73, %c0_i32_74, %c0_i32_75, %cst_76, %cst_77, %c0_i32_78, %c0_i64_79, %cst_80, %cst_81, %cst_82, %c0_i32_83, %c0_i32_84, %cst_85, %cst_86, %c0_i64_87, %cst_88, %cst_89, %cst_90, %cst_91, %cst_92, %c0_i32_93, %cst_94, %c0_i64_95, %1) : (!llvm.ptr, f32, i32, i32, f64, f32, f32, f32, f64, f32, i32, i32, f32, f64, i64, i64, i32, i64, i64, f32, i64, i64, i64, i32, f32, f32, f32, f64, f32, i32, i64, f32, f64, f64, f32, i32, f32, f32, f64, i64, f64, i32, i64, f32, f64, i32, i32, i32, i64, f64, i32, i64, i64, f64, f64, f64, f64, f64, f64, i32, f32, f64, f64, i32, i64, f32, f32, f32, i32, f64, f64, f64, f64, f64, f32, i64, i64, i32, i32, i32, f32, f64, i32, i64, f32, f32, f32, i32, i32, f32, f64, i64, f32, f64, f32, f32, f32, i32, f32, i64, i32) -> i32
    cf.br ^bb1(%2 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
}
