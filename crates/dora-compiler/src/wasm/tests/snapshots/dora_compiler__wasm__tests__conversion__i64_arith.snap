---
source: crates/dora-compiler/src/wasm/tests/conversion.rs
expression: op
snapshot_kind: text
---
module {
  func.func public @add(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.addi %2, %3 : i64
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @sub(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.subi %2, %3 : i64
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @mul(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.muli %2, %3 : i64
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @div_s(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.cmpi eq, %3, %c0_i64 : i64
    %5 = scf.if %4 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %c-9223372036854775808_i64 = arith.constant -9223372036854775808 : i64
      %7 = arith.cmpi eq, %2, %c-9223372036854775808_i64 : i64
      %c-1_i64 = arith.constant -1 : i64
      %8 = arith.cmpi eq, %3, %c-1_i64 : i64
      %9 = arith.andi %7, %8 : i1
      %10 = arith.divsi %2, %3 : i64
      %11 = arith.select %9, %c-9223372036854775808_i64, %10 : i64
      scf.yield %11 : i64
    }
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func public @div_u(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.divui %2, %3 : i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.cmpi eq, %3, %c0_i64 : i64
    %6 = arith.select %5, %c0_i64, %4 : i64
    cf.br ^bb2(%6 : i64)
  ^bb2(%7: i64):  // pred: ^bb1
    return %7 : i64
  }
  func.func public @rem_s(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.cmpi eq, %3, %c0_i64 : i64
    %5 = scf.if %4 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %7 = arith.remsi %2, %3 : i64
      scf.yield %7 : i64
    }
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func public @rem_u(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.cmpi eq, %3, %c0_i64 : i64
    %5 = scf.if %4 -> (i64) {
      scf.yield %c0_i64 : i64
    } else {
      %7 = arith.remui %2, %3 : i64
      scf.yield %7 : i64
    }
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func public @and(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.andi %2, %3 : i64
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @or(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.ori %2, %3 : i64
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @xor(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.xori %2, %3 : i64
    cf.br ^bb2(%4 : i64)
  ^bb2(%5: i64):  // pred: ^bb1
    return %5 : i64
  }
  func.func public @shl(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c63_i64 = arith.constant 63 : i64
    %4 = arith.cmpi ule, %2, %c63_i64 : i64
    %5 = scf.if %4 -> (i64) {
      %7 = arith.shli %3, %2 : i64
      scf.yield %7 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func public @shr_s(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c63_i64 = arith.constant 63 : i64
    %4 = arith.minui %2, %c63_i64 : i64
    %5 = arith.shrsi %3, %4 : i64
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func public @shr_u(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c63_i64 = arith.constant 63 : i64
    %4 = arith.cmpi ule, %2, %c63_i64 : i64
    %5 = scf.if %4 -> (i64) {
      %7 = arith.shrui %3, %2 : i64
      scf.yield %7 : i64
    } else {
      %c0_i64 = arith.constant 0 : i64
      scf.yield %c0_i64 : i64
    }
    cf.br ^bb2(%5 : i64)
  ^bb2(%6: i64):  // pred: ^bb1
    return %6 : i64
  }
  func.func public @rotl(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %4 = arith.remui %3, %c64_i64 : i64
    %5 = arith.shli %2, %4 : i64
    %6 = arith.subi %c64_i64, %4 : i64
    %7 = arith.shrui %2, %6 : i64
    %8 = arith.ori %5, %7 : i64
    cf.br ^bb2(%8 : i64)
  ^bb2(%9: i64):  // pred: ^bb1
    return %9 : i64
  }
  func.func public @rotr(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %c64_i64 = arith.constant 64 : i64
    %4 = arith.remui %3, %c64_i64 : i64
    %5 = arith.shrui %2, %4 : i64
    %6 = arith.subi %c64_i64, %4 : i64
    %7 = arith.shli %2, %6 : i64
    %8 = arith.ori %5, %7 : i64
    cf.br ^bb2(%8 : i64)
  ^bb2(%9: i64):  // pred: ^bb1
    return %9 : i64
  }
  func.func public @clz(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %false = arith.constant false
    %2 = llvm.call_intrinsic "llvm.ctlz.i64"(%1, %false) : (i64, i1) -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @ctz(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %false = arith.constant false
    %2 = llvm.call_intrinsic "llvm.cttz.i64"(%1, %false) : (i64, i1) -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @popcnt(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %false = arith.constant false
    %2 = llvm.call_intrinsic "llvm.ctpop.i64"(%1, %false) : (i64, i1) -> i64
    cf.br ^bb2(%2 : i64)
  ^bb2(%3: i64):  // pred: ^bb1
    return %3 : i64
  }
  func.func public @extend8_s(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = arith.trunci %1 : i64 to i8
    %3 = arith.extsi %2 : i8 to i64
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @extend16_s(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = arith.trunci %1 : i64 to i16
    %3 = arith.extsi %2 : i16 to i64
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @extend32_s(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = arith.trunci %1 : i64 to i32
    %3 = arith.extsi %2 : i32 to i64
    cf.br ^bb2(%3 : i64)
  ^bb2(%4: i64):  // pred: ^bb1
    return %4 : i64
  }
  func.func public @eqz(%arg0: !llvm.ptr, %arg1: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.cmpi eq, %1, %c0_i64 : i64
    %3 = arith.extui %2 : i1 to i32
    cf.br ^bb2(%3 : i32)
  ^bb2(%4: i32):  // pred: ^bb1
    return %4 : i32
  }
  func.func public @eq(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.cmpi eq, %2, %3 : i64
    %5 = arith.extui %4 : i1 to i32
    cf.br ^bb2(%5 : i32)
  ^bb2(%6: i32):  // pred: ^bb1
    return %6 : i32
  }
  func.func public @ne(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.cmpi eq, %2, %3 : i64
    %5 = arith.extui %4 : i1 to i64
    %c-1_i64 = arith.constant -1 : i64
    %6 = arith.xori %5, %c-1_i64 : i64
    %7 = arith.trunci %6 : i64 to i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func public @lt_s(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.cmpi slt, %2, %3 : i64
    %5 = arith.extui %4 : i1 to i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func public @lt_u(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.cmpi ult, %2, %3 : i64
    %5 = arith.extui %4 : i1 to i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func public @le_s(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.cmpi sle, %2, %3 : i64
    %5 = arith.extui %4 : i1 to i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func public @le_u(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.cmpi ule, %2, %3 : i64
    %5 = arith.extui %4 : i1 to i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func public @gt_s(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.cmpi sgt, %2, %3 : i64
    %5 = arith.extui %4 : i1 to i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func public @gt_u(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.cmpi ugt, %2, %3 : i64
    %5 = arith.extui %4 : i1 to i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func public @ge_s(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.cmpi sge, %2, %3 : i64
    %5 = arith.extui %4 : i1 to i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func public @ge_u(%arg0: !llvm.ptr, %arg1: i64, %arg2: i64) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i64
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = arith.cmpi uge, %2, %3 : i64
    %5 = arith.extui %4 : i1 to i64
    %6 = arith.trunci %5 : i64 to i32
    cf.br ^bb2(%6 : i32)
  ^bb2(%7: i32):  // pred: ^bb1
    return %7 : i32
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
