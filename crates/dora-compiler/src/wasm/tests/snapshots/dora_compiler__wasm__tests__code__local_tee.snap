---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @f0(%arg0: !llvm.ptr) -> i32 {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    llvm.store %c0_i32_0, %0 : i32, !llvm.ptr
    cf.br ^bb1(%c0_i32_0 : i32)
  ^bb1(%1: i32):  // pred: ^bb0
    return %1 : i32
  }
  func.func @f1(%arg0: !llvm.ptr) -> i64 {
    %c0_i64 = arith.constant 0 : i64
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %0 : i64, !llvm.ptr
    %c0_i64_0 = arith.constant 0 : i64
    llvm.store %c0_i64_0, %0 : i64, !llvm.ptr
    cf.br ^bb1(%c0_i64_0 : i64)
  ^bb1(%1: i64):  // pred: ^bb0
    return %1 : i64
  }
  func.func @f2(%arg0: !llvm.ptr) -> f32 {
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f32, !llvm.ptr
    %cst_0 = arith.constant 0.000000e+00 : f32
    llvm.store %cst_0, %0 : f32, !llvm.ptr
    cf.br ^bb1(%cst_0 : f32)
  ^bb1(%1: f32):  // pred: ^bb0
    return %1 : f32
  }
  func.func @f3(%arg0: !llvm.ptr) -> f64 {
    %cst = arith.constant 0.000000e+00 : f64
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f64, !llvm.ptr
    %cst_0 = arith.constant 0.000000e+00 : f64
    llvm.store %cst_0, %0 : f64, !llvm.ptr
    cf.br ^bb1(%cst_0 : f64)
  ^bb1(%1: f64):  // pred: ^bb0
    return %1 : f64
  }
  func.func @f4(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c10_i32 = arith.constant 10 : i32
    llvm.store %c10_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1(%c10_i32 : i32)
  ^bb1(%1: i32):  // pred: ^bb0
    return %1 : i32
  }
  func.func @f5(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c11_i64 = arith.constant 11 : i64
    llvm.store %c11_i64, %0 : i64, !llvm.ptr
    cf.br ^bb1(%c11_i64 : i64)
  ^bb1(%1: i64):  // pred: ^bb0
    return %1 : i64
  }
  func.func @f6(%arg0: !llvm.ptr, %arg1: f32) -> f32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %cst = arith.constant 1.0937696E+9 : f32
    llvm.store %cst, %0 : f32, !llvm.ptr
    cf.br ^bb1(%cst : f32)
  ^bb1(%1: f32):  // pred: ^bb0
    return %1 : f32
  }
  func.func @f7(%arg0: !llvm.ptr, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %cst = arith.constant 4.6230576074864988E+18 : f64
    llvm.store %cst, %0 : f64, !llvm.ptr
    cf.br ^bb1(%cst : f64)
  ^bb1(%1: f64):  // pred: ^bb0
    return %1 : f64
  }
  func.func @f8(%arg0: !llvm.ptr, %arg1: i64, %arg2: f32, %arg3: f64, %arg4: i32, %arg5: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : f64, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %5 : f32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %cst_7 = arith.constant 0.000000e+00 : f64
    %c1_i64_8 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_8 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst_7, %8 : f64, !llvm.ptr
    %c0_i64_9 = arith.constant 0 : i64
    llvm.store %c0_i64_9, %0 : i64, !llvm.ptr
    %9 = "wasm.eqz"(%c0_i64_9) : (i64) -> i32
    %cst_10 = arith.constant 0.000000e+00 : f32
    llvm.store %cst_10, %1 : f32, !llvm.ptr
    %10 = "wasm.neg"(%cst_10) : (f32) -> f32
    %cst_11 = arith.constant 0.000000e+00 : f64
    llvm.store %cst_11, %2 : f64, !llvm.ptr
    %11 = "wasm.neg"(%cst_11) : (f64) -> f64
    %c0_i32 = arith.constant 0 : i32
    llvm.store %c0_i32, %3 : i32, !llvm.ptr
    %12 = "wasm.eqz"(%c0_i32) : (i32) -> i32
    %c0_i32_12 = arith.constant 0 : i32
    llvm.store %c0_i32_12, %4 : i32, !llvm.ptr
    %13 = "wasm.eqz"(%c0_i32_12) : (i32) -> i32
    %cst_13 = arith.constant 0.000000e+00 : f32
    llvm.store %cst_13, %5 : f32, !llvm.ptr
    %14 = "wasm.neg"(%cst_13) : (f32) -> f32
    %c0_i64_14 = arith.constant 0 : i64
    llvm.store %c0_i64_14, %6 : i64, !llvm.ptr
    %15 = "wasm.eqz"(%c0_i64_14) : (i64) -> i32
    %c0_i64_15 = arith.constant 0 : i64
    llvm.store %c0_i64_15, %7 : i64, !llvm.ptr
    %16 = "wasm.eqz"(%c0_i64_15) : (i64) -> i32
    %cst_16 = arith.constant 0.000000e+00 : f64
    llvm.store %cst_16, %8 : f64, !llvm.ptr
    %17 = "wasm.neg"(%cst_16) : (f64) -> f64
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f9(%arg0: !llvm.ptr, %arg1: i64, %arg2: f32, %arg3: f64, %arg4: i32, %arg5: i32) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : f64, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %5 : f32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %cst_7 = arith.constant 0.000000e+00 : f64
    %c1_i64_8 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_8 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst_7, %8 : f64, !llvm.ptr
    %cst_9 = arith.constant 3.19773747E+9 : f32
    llvm.store %cst_9, %1 : f32, !llvm.ptr
    %c40_i32 = arith.constant 40 : i32
    llvm.store %c40_i32, %3 : i32, !llvm.ptr
    %c-7_i32 = arith.constant -7 : i32
    llvm.store %c-7_i32, %4 : i32, !llvm.ptr
    %cst_10 = arith.constant 1.08527616E+9 : f32
    llvm.store %cst_10, %5 : f32, !llvm.ptr
    %c6_i64 = arith.constant 6 : i64
    llvm.store %c6_i64, %6 : i64, !llvm.ptr
    %cst_11 = arith.constant 4.6206932176821289E+18 : f64
    llvm.store %cst_11, %8 : f64, !llvm.ptr
    %9 = llvm.load %0 : !llvm.ptr -> i64
    %10 = "wasm.f64_convert_i64u"(%9) : (i64) -> f64
    %11 = llvm.load %1 : !llvm.ptr -> f32
    %12 = "wasm.f64_promote_f32"(%11) : (f32) -> f64
    %13 = llvm.load %2 : !llvm.ptr -> f64
    %14 = llvm.load %3 : !llvm.ptr -> i32
    %15 = "wasm.f64_convert_i32u"(%14) : (i32) -> f64
    %16 = llvm.load %4 : !llvm.ptr -> i32
    %17 = "wasm.f64_convert_i32s"(%16) : (i32) -> f64
    %18 = llvm.load %5 : !llvm.ptr -> f32
    %19 = "wasm.f64_promote_f32"(%18) : (f32) -> f64
    %20 = llvm.load %6 : !llvm.ptr -> i64
    %21 = "wasm.f64_convert_i64u"(%20) : (i64) -> f64
    %22 = llvm.load %7 : !llvm.ptr -> i64
    %23 = "wasm.f64_convert_i64u"(%22) : (i64) -> f64
    %24 = llvm.load %8 : !llvm.ptr -> f64
    %25 = "wasm.add"(%23, %24) : (f64, f64) -> f64
    %26 = "wasm.add"(%21, %25) : (f64, f64) -> f64
    %27 = "wasm.add"(%19, %26) : (f64, f64) -> f64
    %28 = "wasm.add"(%17, %27) : (f64, f64) -> f64
    %29 = "wasm.add"(%15, %28) : (f64, f64) -> f64
    %30 = "wasm.add"(%13, %29) : (f64, f64) -> f64
    %31 = "wasm.add"(%12, %30) : (f64, f64) -> f64
    %32 = "wasm.add"(%10, %31) : (f64, f64) -> f64
    %33 = "wasm.i64_trunc_f64s"(%32) : (f64) -> i64
    cf.br ^bb1(%33 : i64)
  ^bb1(%34: i64):  // pred: ^bb0
    return %34 : i64
  }
  func.func @f10(%arg0: !llvm.ptr, %arg1: i64, %arg2: f32, %arg3: f64, %arg4: i32, %arg5: i32) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : f32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : f64, !llvm.ptr
    %c1_i64_2 = arith.constant 1 : i64
    %3 = llvm.alloca %c1_i64_2 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg4, %3 : i32, !llvm.ptr
    %c1_i64_3 = arith.constant 1 : i64
    %4 = llvm.alloca %c1_i64_3 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg5, %4 : i32, !llvm.ptr
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64_4 = arith.constant 1 : i64
    %5 = llvm.alloca %c1_i64_4 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %5 : f32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_5 = arith.constant 1 : i64
    %6 = llvm.alloca %c1_i64_5 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %6 : i64, !llvm.ptr
    %c1_i64_6 = arith.constant 1 : i64
    %7 = llvm.alloca %c1_i64_6 x i64 : (i64) -> !llvm.ptr
    llvm.store %c0_i64, %7 : i64, !llvm.ptr
    %cst_7 = arith.constant 0.000000e+00 : f64
    %c1_i64_8 = arith.constant 1 : i64
    %8 = llvm.alloca %c1_i64_8 x f64 : (i64) -> !llvm.ptr
    llvm.store %cst_7, %8 : f64, !llvm.ptr
    %c1_i64_9 = arith.constant 1 : i64
    llvm.store %c1_i64_9, %0 : i64, !llvm.ptr
    %9 = "wasm.f64_convert_i64u"(%c1_i64_9) : (i64) -> f64
    %cst_10 = arith.constant 1.07374182E+9 : f32
    llvm.store %cst_10, %1 : f32, !llvm.ptr
    %10 = "wasm.f64_promote_f32"(%cst_10) : (f32) -> f64
    %cst_11 = arith.constant 4.6146133581851791E+18 : f64
    llvm.store %cst_11, %2 : f64, !llvm.ptr
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %3 : i32, !llvm.ptr
    %11 = "wasm.f64_convert_i32u"(%c4_i32) : (i32) -> f64
    %c5_i32 = arith.constant 5 : i32
    llvm.store %c5_i32, %4 : i32, !llvm.ptr
    %12 = "wasm.f64_convert_i32s"(%c5_i32) : (i32) -> f64
    %cst_12 = arith.constant 1.08527616E+9 : f32
    llvm.store %cst_12, %5 : f32, !llvm.ptr
    %13 = "wasm.f64_promote_f32"(%cst_12) : (f32) -> f64
    %c6_i64 = arith.constant 6 : i64
    llvm.store %c6_i64, %6 : i64, !llvm.ptr
    %14 = "wasm.f64_convert_i64u"(%c6_i64) : (i64) -> f64
    %c0_i64_13 = arith.constant 0 : i64
    llvm.store %c0_i64_13, %7 : i64, !llvm.ptr
    %15 = "wasm.f64_convert_i64u"(%c0_i64_13) : (i64) -> f64
    %cst_14 = arith.constant 4.6206932176821289E+18 : f64
    llvm.store %cst_14, %8 : f64, !llvm.ptr
    %16 = "wasm.add"(%15, %cst_14) : (f64, f64) -> f64
    %17 = "wasm.add"(%14, %16) : (f64, f64) -> f64
    %18 = "wasm.add"(%13, %17) : (f64, f64) -> f64
    %19 = "wasm.add"(%12, %18) : (f64, f64) -> f64
    %20 = "wasm.add"(%11, %19) : (f64, f64) -> f64
    %21 = "wasm.add"(%cst_11, %20) : (f64, f64) -> f64
    %22 = "wasm.add"(%10, %21) : (f64, f64) -> f64
    %23 = "wasm.add"(%9, %22) : (f64, f64) -> f64
    cf.br ^bb1(%23 : f64)
  ^bb1(%24: f64):  // pred: ^bb0
    return %24 : f64
  }
  func.func @dummy(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f12(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2(%c1_i32 : i32)
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // pred: ^bb0
    cf.br ^bb1(%2 : i32)
  }
  func.func @f13(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2(%c1_i32 : i32)
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // pred: ^bb0
    cf.br ^bb1(%2 : i32)
  }
  func.func @f14(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    cf.br ^bb2(%c1_i32 : i32)
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // pred: ^bb0
    cf.br ^bb1(%2 : i32)
  }
  func.func @f15(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // pred: ^bb3
    cf.br ^bb1(%2 : i32)
  ^bb3:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %0 : i32, !llvm.ptr
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2(%c3_i32 : i32)
  }
  func.func @f16(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // pred: ^bb3
    cf.br ^bb1(%2 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %0 : i32, !llvm.ptr
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2(%c4_i32 : i32)
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb3
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // pred: ^bb3
    cf.br ^bb1(%2 : i32)
  ^bb3:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c5_i32 = arith.constant 5 : i32
    llvm.store %c5_i32, %0 : i32, !llvm.ptr
    cf.br ^bb2(%c5_i32 : i32)
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c9_i32 = arith.constant 9 : i32
    llvm.store %c9_i32, %0 : i32, !llvm.ptr
    cf.br ^bb2(%c9_i32 : i32)
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // pred: ^bb0
    cf.br ^bb1(%2 : i32)
  }
  func.func @f19(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %1, ^bb2, ^bb3
  ^bb1:  // pred: ^bb2
    return
  ^bb2:  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1
  ^bb3:  // pred: ^bb0
    cf.br ^bb2
  }
  func.func @f20(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c8_i32 = arith.constant 8 : i32
    llvm.store %c8_i32, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c1_i32, %c0_i32 : i32
    cf.cond_br %1, ^bb2(%c8_i32 : i32), ^bb3(%c8_i32 : i32)
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1(%3 : i32)
  ^bb3(%4: i32):  // pred: ^bb0
    %c7_i32 = arith.constant 7 : i32
    cf.br ^bb2(%c7_i32 : i32)
  }
  func.func @f21(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c6_i32 = arith.constant 6 : i32
    %c9_i32 = arith.constant 9 : i32
    llvm.store %c9_i32, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c9_i32, %c0_i32 : i32
    cf.cond_br %1, ^bb2(%c6_i32 : i32), ^bb3(%c6_i32 : i32)
  ^bb1(%2: i32):  // pred: ^bb2
    return %2 : i32
  ^bb2(%3: i32):  // 2 preds: ^bb0, ^bb3
    cf.br ^bb1(%3 : i32)
  ^bb3(%4: i32):  // pred: ^bb0
    %c7_i32 = arith.constant 7 : i32
    cf.br ^bb2(%c7_i32 : i32)
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_0 = arith.constant 1 : i64
    cf.switch %c0_i32 : i32, [
      default: ^bb2,
      0: ^bb2,
      1: ^bb2
    ]
  ^bb1:  // pred: ^bb2
    return
  ^bb2:  // 3 preds: ^bb0, ^bb0, ^bb0
    cf.br ^bb1
  }
  func.func @f23(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c10_i32 = arith.constant 10 : i32
    llvm.store %c10_i32, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c0_i64 = arith.constant 0 : i64
    %c1_i64_0 = arith.constant 1 : i64
    cf.switch %c1_i32 : i32, [
      default: ^bb2(%c10_i32 : i32),
      0: ^bb2(%c10_i32 : i32),
      1: ^bb2(%c10_i32 : i32)
    ]
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // 3 preds: ^bb0, ^bb0, ^bb0
    cf.br ^bb1(%2 : i32)
  }
  func.func @f24(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c6_i32 = arith.constant 6 : i32
    %c11_i32 = arith.constant 11 : i32
    llvm.store %c11_i32, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    cf.switch %c11_i32 : i32, [
      default: ^bb2(%c6_i32 : i32),
      0: ^bb2(%c6_i32 : i32)
    ]
  ^bb1(%1: i32):  // pred: ^bb2
    return %1 : i32
  ^bb2(%2: i32):  // 2 preds: ^bb0, ^bb0
    cf.br ^bb1(%2 : i32)
  }
  func.func @f25(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c7_i32 = arith.constant 7 : i32
    llvm.store %c7_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1(%c7_i32 : i32)
  ^bb1(%1: i32):  // pred: ^bb0
    return %1 : i32
  }
  func.func @f26(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.cmpi ne, %c2_i32, %c0_i32 : i32
    cf.cond_br %1, ^bb2, ^bb3
  ^bb1(%2: i32):  // pred: ^bb4
    return %2 : i32
  ^bb2:  // pred: ^bb0
    %c0_i32_0 = arith.constant 0 : i32
    cf.br ^bb4(%c0_i32_0 : i32)
  ^bb3:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb4(%c1_i32 : i32)
  ^bb4(%3: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%3 : i32)
  }
  func.func @f27(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %0 : i32, !llvm.ptr
    cf.br ^bb4(%c3_i32 : i32)
  ^bb3:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb4(%4 : i32)
  ^bb4(%5: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%5 : i32)
  }
  func.func @f28(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %2 = arith.cmpi ne, %1, %c0_i32 : i32
    cf.cond_br %2, ^bb2, ^bb3
  ^bb1(%3: i32):  // pred: ^bb4
    return %3 : i32
  ^bb2:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    cf.br ^bb4(%4 : i32)
  ^bb3:  // pred: ^bb0
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %0 : i32, !llvm.ptr
    cf.br ^bb4(%c4_i32 : i32)
  ^bb4(%5: i32):  // 2 preds: ^bb2, ^bb3
    cf.br ^bb1(%5 : i32)
  }
  func.func @f29(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c5_i32 = arith.constant 5 : i32
    llvm.store %c5_i32, %0 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = "wasm.select"(%c5_i32, %2, %3) : (i32, i32, i32) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f30(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    llvm.store %c6_i32, %0 : i32, !llvm.ptr
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %4 = "wasm.select"(%2, %c6_i32, %3) : (i32, i32, i32) -> i32
    cf.br ^bb1(%4 : i32)
  ^bb1(%5: i32):  // pred: ^bb0
    return %5 : i32
  }
  func.func @f31(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c7_i32 = arith.constant 7 : i32
    llvm.store %c7_i32, %0 : i32, !llvm.ptr
    %1 = "wasm.select"(%c0_i32, %c1_i32, %c7_i32) : (i32, i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb1(%c-1_i32 : i32)
  ^bb1(%3: i32):  // pred: ^bb0
    return %3 : i32
  }
  func.func @f33(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c12_i32 = arith.constant 12 : i32
    llvm.store %c12_i32, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %1 = call @f(%arg0, %c12_i32, %c2_i32, %c3_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f34(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c13_i32 = arith.constant 13 : i32
    llvm.store %c13_i32, %0 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %1 = call @f(%arg0, %c1_i32, %c13_i32, %c3_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f35(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c14_i32 = arith.constant 14 : i32
    llvm.store %c14_i32, %0 : i32, !llvm.ptr
    %1 = call @f(%arg0, %c1_i32, %c2_i32, %c14_i32) : (!llvm.ptr, i32, i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f36(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    %7 = arith.cmpi ult, %c0_i32, %6 : i32
    %8 = llvm.getelementptr %5[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.load %11 : !llvm.ptr -> i32
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %17 = arith.cmpi eq, %16, %c0_i32_0 : i32
    %18 = llvm.call %13(%c1_i32, %c2_i32, %c3_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (i32, i32, i32) -> i32
    cf.br ^bb1(%18 : i32)
  ^bb1(%19: i32):  // pred: ^bb0
    return %19 : i32
  }
  func.func @f37(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    llvm.store %c2_i32, %0 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    %7 = arith.cmpi ult, %c0_i32, %6 : i32
    %8 = llvm.getelementptr %5[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.load %11 : !llvm.ptr -> i32
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %17 = arith.cmpi eq, %16, %c0_i32_0 : i32
    %18 = llvm.call %13(%c1_i32, %c2_i32, %c3_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (i32, i32, i32) -> i32
    cf.br ^bb1(%18 : i32)
  ^bb1(%19: i32):  // pred: ^bb0
    return %19 : i32
  }
  func.func @f38(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    %7 = arith.cmpi ult, %c0_i32, %6 : i32
    %8 = llvm.getelementptr %5[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.load %11 : !llvm.ptr -> i32
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %17 = arith.cmpi eq, %16, %c0_i32_0 : i32
    %18 = llvm.call %13(%c1_i32, %c2_i32, %c3_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (i32, i32, i32) -> i32
    cf.br ^bb1(%18 : i32)
  ^bb1(%19: i32):  // pred: ^bb0
    return %19 : i32
  }
  func.func @f39(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c0_i32 = arith.constant 0 : i32
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> i32
    %3 = llvm.getelementptr %arg0[64] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %arg0[72] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.load %4 : !llvm.ptr -> i32
    %7 = arith.cmpi ult, %c0_i32, %6 : i32
    %8 = llvm.getelementptr %5[%c0_i32] : (!llvm.ptr, i32) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> !llvm.ptr
    %10 = llvm.getelementptr %9[0] : (!llvm.ptr) -> !llvm.ptr, i8
    %11 = llvm.getelementptr %9[8] : (!llvm.ptr) -> !llvm.ptr, i8
    %12 = llvm.getelementptr %9[16] : (!llvm.ptr) -> !llvm.ptr, i8
    %13 = llvm.load %10 : !llvm.ptr -> !llvm.ptr
    %14 = llvm.load %11 : !llvm.ptr -> i32
    %15 = llvm.load %12 : !llvm.ptr -> !llvm.ptr
    %16 = llvm.load %13 : !llvm.ptr -> i32
    %c0_i32_0 = arith.constant 0 : i32
    %17 = arith.cmpi eq, %16, %c0_i32_0 : i32
    %18 = llvm.call %13(%c1_i32, %c2_i32, %c3_i32) vararg(!llvm.func<i32 (...)>) : !llvm.ptr, (i32, i32, i32) -> i32
    cf.br ^bb1(%18 : i32)
  ^bb1(%19: i32):  // pred: ^bb0
    return %19 : i32
  }
  func.func @f40(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f41(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1(%c1_i32 : i32)
  ^bb1(%1: i32):  // pred: ^bb0
    return %1 : i32
  }
  func.func @f42(%arg0: !llvm.ptr) {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[96] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    llvm.store %c1_i32, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f43(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.extui %c1_i32 : i32 to i64
    %2 = arith.addi %1, %c0_i64 : i64
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %5[%2] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %7 = llvm.load %6 : !llvm.ptr -> i32
    cf.br ^bb1(%7 : i32)
  ^bb1(%8: i32):  // pred: ^bb0
    return %8 : i32
  }
  func.func @f44(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.extui %c3_i32 : i32 to i64
    %2 = arith.addi %1, %c0_i64 : i64
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %5[%2] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %7 = llvm.load %6 : !llvm.ptr -> i8
    %8 = arith.extui %7 : i8 to i32
    cf.br ^bb1(%8 : i32)
  ^bb1(%9: i32):  // pred: ^bb0
    return %9 : i32
  }
  func.func @f45(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c30_i32 = arith.constant 30 : i32
    llvm.store %c30_i32, %0 : i32, !llvm.ptr
    %c7_i32 = arith.constant 7 : i32
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.extui %c30_i32 : i32 to i64
    %2 = arith.addi %1, %c0_i64 : i64
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %5[%2] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c7_i32, %6 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f46(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.extui %c2_i32 : i32 to i64
    %2 = arith.addi %1, %c0_i64 : i64
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %5[%2] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %c1_i32, %6 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f47(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    %c7_i32 = arith.constant 7 : i32
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.extui %c1_i32 : i32 to i64
    %2 = arith.addi %1, %c0_i64 : i64
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %5[%2] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %7 = arith.trunci %c7_i32 : i32 to i8
    llvm.store %7, %6 : i8, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f48(%arg0: !llvm.ptr, %arg1: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    llvm.store %c1_i32, %0 : i32, !llvm.ptr
    %c0_i64 = arith.constant 0 : i64
    %1 = arith.extui %c2_i32 : i32 to i64
    %2 = arith.addi %1, %c0_i64 : i64
    %3 = llvm.getelementptr %arg0[80] : (!llvm.ptr) -> !llvm.ptr, i8
    %4 = llvm.getelementptr %3[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %5 = llvm.load %4 : !llvm.ptr -> !llvm.ptr
    %6 = llvm.getelementptr %5[%2] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %7 = arith.trunci %c1_i32 : i32 to i16
    llvm.store %7, %6 : i16, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @f49(%arg0: !llvm.ptr, %arg1: f32) -> f32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %cst = arith.constant 2.13915699E+9 : f32
    llvm.store %cst, %0 : f32, !llvm.ptr
    %1 = "wasm.neg"(%cst) : (f32) -> f32
    cf.br ^bb1(%1 : f32)
  ^bb1(%2: f32):  // pred: ^bb0
    return %2 : f32
  }
  func.func @f50(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c3_i32 = arith.constant 3 : i32
    llvm.store %c3_i32, %0 : i32, !llvm.ptr
    %c10_i32 = arith.constant 10 : i32
    %1 = "wasm.add"(%c3_i32, %c10_i32) : (i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f51(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c10_i32 = arith.constant 10 : i32
    %c4_i32 = arith.constant 4 : i32
    llvm.store %c4_i32, %0 : i32, !llvm.ptr
    %1 = "wasm.sub"(%c10_i32, %c4_i32) : (i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f52(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    %1 = "wasm.eqz"(%c0_i32) : (i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f53(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c43_i32 = arith.constant 43 : i32
    llvm.store %c43_i32, %0 : i32, !llvm.ptr
    %c10_i32 = arith.constant 10 : i32
    %1 = "wasm.les"(%c43_i32, %c10_i32) : (i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f54(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c10_i32 = arith.constant 10 : i32
    %c42_i32 = arith.constant 42 : i32
    llvm.store %c42_i32, %0 : i32, !llvm.ptr
    %1 = "wasm.ne"(%c10_i32, %c42_i32) : (i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f55(%arg0: !llvm.ptr, %arg1: i64) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c41_i64 = arith.constant 41 : i64
    llvm.store %c41_i64, %0 : i64, !llvm.ptr
    %1 = "wasm.i32_wrap_i64"(%c41_i64) : (i64) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
  func.func @f56(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c40_i32 = arith.constant 40 : i32
    llvm.store %c40_i32, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = "wasm.mem_grow"(%c40_i32, %c0_i32) : (i32, i32) -> i32
    cf.br ^bb1(%1 : i32)
  ^bb1(%2: i32):  // pred: ^bb0
    return %2 : i32
  }
}
