---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @i16_store_little(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %3 = llvm.getelementptr %2[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %4 = llvm.load %3 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %7 = arith.extui %5 : i32 to i64
    %8 = arith.addi %7, %c0_i64 : i64
    %9 = llvm.getelementptr %4[%8] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %10 = arith.trunci %6 : i32 to i8
    llvm.store %10, %9 : i8, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %12 = "wasm.add"(%11, %c1_i32) : (i32, i32) -> i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %14 = "wasm.shru"(%13, %c8_i32) : (i32, i32) -> i32
    %c0_i64_1 = arith.constant 0 : i64
    %15 = arith.extui %12 : i32 to i64
    %16 = arith.addi %15, %c0_i64_1 : i64
    %17 = llvm.getelementptr %4[%16] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %18 = arith.trunci %14 : i32 to i8
    llvm.store %18, %17 : i8, !llvm.ptr
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @i32_store_little(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @i16_store_little(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %5 = "wasm.add"(%4, %c2_i32) : (i32, i32) -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %7 = "wasm.shru"(%6, %c16_i32) : (i32, i32) -> i32
    call @i16_store_little(%arg0, %5, %7) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @i64_store_little(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = "wasm.i32_wrap_i64"(%3) : (i64) -> i32
    call @i32_store_little(%arg0, %2, %4) : (!llvm.ptr, i32, i32) -> ()
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %6 = "wasm.add"(%5, %c4_i32) : (i32, i32) -> i32
    %7 = llvm.load %1 : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %8 = "wasm.shru"(%7, %c32_i64) : (i64, i64) -> i64
    %9 = "wasm.i32_wrap_i64"(%8) : (i64) -> i32
    call @i32_store_little(%arg0, %6, %9) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @i16_load_little(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %4 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %11 = "wasm.add"(%10, %c1_i32) : (i32, i32) -> i32
    %c0_i64_0 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64_0 : i64
    %14 = llvm.getelementptr %3[%13] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> i8
    %16 = arith.extui %15 : i8 to i32
    %c8_i32 = arith.constant 8 : i32
    %17 = "wasm.shl"(%16, %c8_i32) : (i32, i32) -> i32
    %18 = "wasm.or"(%9, %17) : (i32, i32) -> i32
    cf.br ^bb2(%18 : i32)
  ^bb2(%19: i32):  // pred: ^bb1
    return %19 : i32
  }
  func.func @i32_load_little(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = call @i16_load_little(%arg0, %1) : (!llvm.ptr, i32) -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %4 = "wasm.add"(%3, %c2_i32) : (i32, i32) -> i32
    %5 = call @i16_load_little(%arg0, %4) : (!llvm.ptr, i32) -> i32
    %c16_i32 = arith.constant 16 : i32
    %6 = "wasm.shl"(%5, %c16_i32) : (i32, i32) -> i32
    %7 = "wasm.or"(%2, %6) : (i32, i32) -> i32
    cf.br ^bb2(%7 : i32)
  ^bb2(%8: i32):  // pred: ^bb1
    return %8 : i32
  }
  func.func @i64_load_little(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = call @i32_load_little(%arg0, %1) : (!llvm.ptr, i32) -> i32
    %3 = "wasm.i64_extend_i32u"(%2) : (i32) -> i64
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %5 = "wasm.add"(%4, %c4_i32) : (i32, i32) -> i32
    %6 = call @i32_load_little(%arg0, %5) : (!llvm.ptr, i32) -> i32
    %7 = "wasm.i64_extend_i32u"(%6) : (i32) -> i64
    %c32_i64 = arith.constant 32 : i64
    %8 = "wasm.shl"(%7, %c32_i64) : (i64, i64) -> i64
    %9 = "wasm.or"(%3, %8) : (i64, i64) -> i64
    cf.br ^bb2(%9 : i64)
  ^bb2(%10: i64):  // pred: ^bb1
    return %10 : i64
  }
  func.func public @i32_load16_s(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    call @i16_store_little(%arg0, %c0_i32, %4) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32_0 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i16
    %9 = arith.extui %8 : i16 to i32
    cf.br ^bb2(%9 : i32)
  ^bb2(%10: i32):  // pred: ^bb1
    return %10 : i32
  }
  func.func public @i32_load16_u(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    call @i16_store_little(%arg0, %c0_i32, %4) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32_0 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i16
    %9 = arith.extui %8 : i16 to i32
    cf.br ^bb2(%9 : i32)
  ^bb2(%10: i32):  // pred: ^bb1
    return %10 : i32
  }
  func.func public @i32_load(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    call @i32_store_little(%arg0, %c0_i32, %4) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32_0 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i32
    cf.br ^bb2(%8 : i32)
  ^bb2(%9: i32):  // pred: ^bb1
    return %9 : i32
  }
  func.func public @i64_load16_s(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %5 = "wasm.i32_wrap_i64"(%4) : (i64) -> i32
    call @i16_store_little(%arg0, %c0_i32, %5) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %c0_i32_0 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %3[%7] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> i16
    %10 = arith.extui %9 : i16 to i64
    cf.br ^bb2(%10 : i64)
  ^bb2(%11: i64):  // pred: ^bb1
    return %11 : i64
  }
  func.func public @i64_load16_u(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %5 = "wasm.i32_wrap_i64"(%4) : (i64) -> i32
    call @i16_store_little(%arg0, %c0_i32, %5) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %c0_i32_0 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %3[%7] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> i16
    %10 = arith.extui %9 : i16 to i64
    cf.br ^bb2(%10 : i64)
  ^bb2(%11: i64):  // pred: ^bb1
    return %11 : i64
  }
  func.func public @i64_load32_s(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %5 = "wasm.i32_wrap_i64"(%4) : (i64) -> i32
    call @i32_store_little(%arg0, %c0_i32, %5) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %c0_i32_0 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %3[%7] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %10 = arith.extui %9 : i32 to i64
    cf.br ^bb2(%10 : i64)
  ^bb2(%11: i64):  // pred: ^bb1
    return %11 : i64
  }
  func.func public @i64_load32_u(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %5 = "wasm.i32_wrap_i64"(%4) : (i64) -> i32
    call @i32_store_little(%arg0, %c0_i32, %5) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %c0_i32_0 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %3[%7] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %10 = arith.extui %9 : i32 to i64
    cf.br ^bb2(%10 : i64)
  ^bb2(%11: i64):  // pred: ^bb1
    return %11 : i64
  }
  func.func public @i64_load(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    call @i64_store_little(%arg0, %c0_i32, %4) : (!llvm.ptr, i32, i64) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32_0 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i64
    cf.br ^bb2(%8 : i64)
  ^bb2(%9: i64):  // pred: ^bb1
    return %9 : i64
  }
  func.func public @f32_load(%arg0: !llvm.ptr, %arg1: f32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> f32
    %5 = "wasm.i32_reinterpret_f32"(%4) : (f32) -> i32
    call @i32_store_little(%arg0, %c0_i32, %5) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %c0_i32_0 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %3[%7] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> f32
    cf.br ^bb2(%9 : f32)
  ^bb2(%10: f32):  // pred: ^bb1
    return %10 : f32
  }
  func.func public @f64_load(%arg0: !llvm.ptr, %arg1: f64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> f64
    %5 = "wasm.i64_reinterpret_f64"(%4) : (f64) -> i64
    call @i64_store_little(%arg0, %c0_i32, %5) : (!llvm.ptr, i32, i64) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %6 = arith.extui %c0_i32_0 : i32 to i64
    %7 = arith.addi %6, %c0_i64 : i64
    %8 = llvm.getelementptr %3[%7] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> f64
    cf.br ^bb2(%9 : f64)
  ^bb2(%10: f64):  // pred: ^bb1
    return %10 : f64
  }
  func.func public @i32_store16(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = arith.trunci %4 : i32 to i16
    llvm.store %8, %7 : i16, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %9 = call @i16_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%9 : i32)
  ^bb2(%10: i32):  // pred: ^bb1
    return %10 : i32
  }
  func.func public @i32_store(%arg0: !llvm.ptr, %arg1: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %4, %7 : i32, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %8 = call @i32_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    cf.br ^bb2(%8 : i32)
  ^bb2(%9: i32):  // pred: ^bb1
    return %9 : i32
  }
  func.func public @i64_store16(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = arith.trunci %4 : i64 to i16
    llvm.store %8, %7 : i16, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %9 = call @i16_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %10 = "wasm.i64_extend_i32u"(%9) : (i32) -> i64
    cf.br ^bb2(%10 : i64)
  ^bb2(%11: i64):  // pred: ^bb1
    return %11 : i64
  }
  func.func public @i64_store32(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = arith.trunci %4 : i64 to i32
    llvm.store %8, %7 : i32, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %9 = call @i32_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %10 = "wasm.i64_extend_i32u"(%9) : (i32) -> i64
    cf.br ^bb2(%10 : i64)
  ^bb2(%11: i64):  // pred: ^bb1
    return %11 : i64
  }
  func.func public @i64_store(%arg0: !llvm.ptr, %arg1: i64) -> i64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %4, %7 : i64, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %8 = call @i64_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i64
    cf.br ^bb2(%8 : i64)
  ^bb2(%9: i64):  // pred: ^bb1
    return %9 : i64
  }
  func.func public @f32_store(%arg0: !llvm.ptr, %arg1: f32) -> f32 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> f32
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %4, %7 : f32, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %8 = call @i32_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %9 = "wasm.f32_reinterpret_i32"(%8) : (i32) -> f32
    cf.br ^bb2(%9 : f32)
  ^bb2(%10: f32):  // pred: ^bb1
    return %10 : f32
  }
  func.func public @f64_store(%arg0: !llvm.ptr, %arg1: f64) -> f64 attributes {llvm.emit_c_interface} {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %1 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %2 = llvm.getelementptr %1[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %4 = llvm.load %0 : !llvm.ptr -> f64
    %c0_i64 = arith.constant 0 : i64
    %5 = arith.extui %c0_i32 : i32 to i64
    %6 = arith.addi %5, %c0_i64 : i64
    %7 = llvm.getelementptr %3[%6] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %4, %7 : f64, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %8 = call @i64_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i64
    %9 = "wasm.f64_reinterpret_i64"(%8) : (i64) -> f64
    cf.br ^bb2(%9 : f64)
  ^bb2(%10: f64):  // pred: ^bb1
    return %10 : f64
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
