---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @i16_store_little(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %4 = arith.extui %2 : i32 to i64
    %5 = arith.addi %4, %c0_i64 : i64
    %6 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %7 = llvm.getelementptr %6[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> !llvm.ptr
    %9 = llvm.getelementptr %8[%5] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %10 = arith.trunci %3 : i32 to i8
    llvm.store %10, %9 : i8, !llvm.ptr
    %11 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %12 = "wasm.add"(%11, %c1_i32) : (i32, i32) -> i32
    %13 = llvm.load %1 : !llvm.ptr -> i32
    %c8_i32 = arith.constant 8 : i32
    %14 = "wasm.shru"(%13, %c8_i32) : (i32, i32) -> i32
    %c0_i64_1 = arith.constant 0 : i64
    %15 = arith.extui %12 : i32 to i64
    %16 = arith.addi %15, %c0_i64_1 : i64
    %17 = llvm.getelementptr %8[%16] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %18 = arith.trunci %14 : i32 to i8
    llvm.store %18, %17 : i8, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @i32_store_little(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i32
    call @i16_store_little(%arg0, %2, %3) : (!llvm.ptr, i32, i32) -> ()
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %5 = "wasm.add"(%4, %c2_i32) : (i32, i32) -> i32
    %6 = llvm.load %1 : !llvm.ptr -> i32
    %c16_i32 = arith.constant 16 : i32
    %7 = "wasm.shru"(%6, %c16_i32) : (i32, i32) -> i32
    call @i16_store_little(%arg0, %5, %7) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @i64_store_little(%arg0: !llvm.ptr, %arg1: i32, %arg2: i64) {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i64, !llvm.ptr
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %3 = llvm.load %1 : !llvm.ptr -> i64
    %4 = "wasm.i32_wrap_i64"(%3) : (i64) -> i32
    call @i32_store_little(%arg0, %2, %4) : (!llvm.ptr, i32, i32) -> ()
    %5 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %6 = "wasm.add"(%5, %c4_i32) : (i32, i32) -> i32
    %7 = llvm.load %1 : !llvm.ptr -> i64
    %c32_i64 = arith.constant 32 : i64
    %8 = "wasm.shru"(%7, %c32_i64) : (i64, i64) -> i64
    %9 = "wasm.i32_wrap_i64"(%8) : (i64) -> i32
    call @i32_store_little(%arg0, %6, %9) : (!llvm.ptr, i32, i32) -> ()
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    return
  }
  func.func @i16_load_little(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %1 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i8
    %9 = arith.extui %8 : i8 to i32
    %10 = llvm.load %0 : !llvm.ptr -> i32
    %c1_i32 = arith.constant 1 : i32
    %11 = "wasm.add"(%10, %c1_i32) : (i32, i32) -> i32
    %c0_i64_0 = arith.constant 0 : i64
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.addi %12, %c0_i64_0 : i64
    %14 = llvm.getelementptr %6[%13] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %15 = llvm.load %14 : !llvm.ptr -> i8
    %16 = arith.extui %15 : i8 to i32
    %c8_i32 = arith.constant 8 : i32
    %17 = "wasm.shl"(%16, %c8_i32) : (i32, i32) -> i32
    %18 = "wasm.or"(%9, %17) : (i32, i32) -> i32
    cf.br ^bb1(%18 : i32)
  ^bb1(%19: i32):  // pred: ^bb0
    return %19 : i32
  }
  func.func @i32_load_little(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = call @i16_load_little(%arg0, %1) : (!llvm.ptr, i32) -> i32
    %3 = llvm.load %0 : !llvm.ptr -> i32
    %c2_i32 = arith.constant 2 : i32
    %4 = "wasm.add"(%3, %c2_i32) : (i32, i32) -> i32
    %5 = call @i16_load_little(%arg0, %4) : (!llvm.ptr, i32) -> i32
    %c16_i32 = arith.constant 16 : i32
    %6 = "wasm.shl"(%5, %c16_i32) : (i32, i32) -> i32
    %7 = "wasm.or"(%2, %6) : (i32, i32) -> i32
    cf.br ^bb1(%7 : i32)
  ^bb1(%8: i32):  // pred: ^bb0
    return %8 : i32
  }
  func.func @i64_load_little(%arg0: !llvm.ptr, %arg1: i32) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %2 = call @i32_load_little(%arg0, %1) : (!llvm.ptr, i32) -> i32
    %3 = "wasm.i64_extend_i32u"(%2) : (i32) -> i64
    %4 = llvm.load %0 : !llvm.ptr -> i32
    %c4_i32 = arith.constant 4 : i32
    %5 = "wasm.add"(%4, %c4_i32) : (i32, i32) -> i32
    %6 = call @i32_load_little(%arg0, %5) : (!llvm.ptr, i32) -> i32
    %7 = "wasm.i64_extend_i32u"(%6) : (i32) -> i64
    %c32_i64 = arith.constant 32 : i64
    %8 = "wasm.shl"(%7, %c32_i64) : (i64, i64) -> i64
    %9 = "wasm.or"(%3, %8) : (i64, i64) -> i64
    cf.br ^bb1(%9 : i64)
  ^bb1(%10: i64):  // pred: ^bb0
    return %10 : i64
  }
  func.func @f6(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @i16_store_little(%arg0, %c0_i32, %1) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %c0_i32_0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i16
    %9 = arith.extui %8 : i16 to i32
    cf.br ^bb1(%9 : i32)
  ^bb1(%10: i32):  // pred: ^bb0
    return %10 : i32
  }
  func.func @f7(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @i16_store_little(%arg0, %c0_i32, %1) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %c0_i32_0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i16
    %9 = arith.extui %8 : i16 to i32
    cf.br ^bb1(%9 : i32)
  ^bb1(%10: i32):  // pred: ^bb0
    return %10 : i32
  }
  func.func @f8(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    call @i32_store_little(%arg0, %c0_i32, %1) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %c0_i32_0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i32
    cf.br ^bb1(%8 : i32)
  ^bb1(%9: i32):  // pred: ^bb0
    return %9 : i32
  }
  func.func @f9(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.i32_wrap_i64"(%1) : (i64) -> i32
    call @i16_store_little(%arg0, %c0_i32, %2) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32_0 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %7[%4] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> i16
    %10 = arith.extui %9 : i16 to i64
    cf.br ^bb1(%10 : i64)
  ^bb1(%11: i64):  // pred: ^bb0
    return %11 : i64
  }
  func.func @f10(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.i32_wrap_i64"(%1) : (i64) -> i32
    call @i16_store_little(%arg0, %c0_i32, %2) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32_0 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %7[%4] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> i16
    %10 = arith.extui %9 : i16 to i64
    cf.br ^bb1(%10 : i64)
  ^bb1(%11: i64):  // pred: ^bb0
    return %11 : i64
  }
  func.func @f11(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.i32_wrap_i64"(%1) : (i64) -> i32
    call @i32_store_little(%arg0, %c0_i32, %2) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32_0 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %7[%4] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %10 = arith.extui %9 : i32 to i64
    cf.br ^bb1(%10 : i64)
  ^bb1(%11: i64):  // pred: ^bb0
    return %11 : i64
  }
  func.func @f12(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %2 = "wasm.i32_wrap_i64"(%1) : (i64) -> i32
    call @i32_store_little(%arg0, %c0_i32, %2) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32_0 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %7[%4] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> i32
    %10 = arith.extui %9 : i32 to i64
    cf.br ^bb1(%10 : i64)
  ^bb1(%11: i64):  // pred: ^bb0
    return %11 : i64
  }
  func.func @f13(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i64
    call @i64_store_little(%arg0, %c0_i32, %1) : (!llvm.ptr, i32, i64) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %c0_i32_0 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = llvm.load %7 : !llvm.ptr -> i64
    cf.br ^bb1(%8 : i64)
  ^bb1(%9: i64):  // pred: ^bb0
    return %9 : i64
  }
  func.func @f14(%arg0: !llvm.ptr, %arg1: f32) -> f32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "wasm.i32_reinterpret_f32"(%1) : (f32) -> i32
    call @i32_store_little(%arg0, %c0_i32, %2) : (!llvm.ptr, i32, i32) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32_0 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %7[%4] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> f32
    cf.br ^bb1(%9 : f32)
  ^bb1(%10: f32):  // pred: ^bb0
    return %10 : f32
  }
  func.func @f15(%arg0: !llvm.ptr, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %2 = "wasm.i64_reinterpret_f64"(%1) : (f64) -> i64
    call @i64_store_little(%arg0, %c0_i32, %2) : (!llvm.ptr, i32, i64) -> ()
    %c0_i32_0 = arith.constant 0 : i32
    %c0_i64 = arith.constant 0 : i64
    %3 = arith.extui %c0_i32_0 : i32 to i64
    %4 = arith.addi %3, %c0_i64 : i64
    %5 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %6 = llvm.getelementptr %5[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %7 = llvm.load %6 : !llvm.ptr -> !llvm.ptr
    %8 = llvm.getelementptr %7[%4] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %9 = llvm.load %8 : !llvm.ptr -> f64
    cf.br ^bb1(%9 : f64)
  ^bb1(%10: f64):  // pred: ^bb0
    return %10 : f64
  }
  func.func @f16(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %c0_i32 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = arith.trunci %1 : i32 to i16
    llvm.store %8, %7 : i16, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %9 = call @i16_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    cf.br ^bb1(%9 : i32)
  ^bb1(%10: i32):  // pred: ^bb0
    return %10 : i32
  }
  func.func @f17(%arg0: !llvm.ptr, %arg1: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %c0_i32 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %1, %7 : i32, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %8 = call @i32_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    cf.br ^bb1(%8 : i32)
  ^bb1(%9: i32):  // pred: ^bb0
    return %9 : i32
  }
  func.func @f18(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %c0_i32 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = arith.trunci %1 : i64 to i16
    llvm.store %8, %7 : i16, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %9 = call @i16_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %10 = "wasm.i64_extend_i32u"(%9) : (i32) -> i64
    cf.br ^bb1(%10 : i64)
  ^bb1(%11: i64):  // pred: ^bb0
    return %11 : i64
  }
  func.func @f19(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %c0_i32 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    %8 = arith.trunci %1 : i64 to i32
    llvm.store %8, %7 : i32, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %9 = call @i32_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %10 = "wasm.i64_extend_i32u"(%9) : (i32) -> i64
    cf.br ^bb1(%10 : i64)
  ^bb1(%11: i64):  // pred: ^bb0
    return %11 : i64
  }
  func.func @f20(%arg0: !llvm.ptr, %arg1: i64) -> i64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i64, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> i64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %c0_i32 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %1, %7 : i64, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %8 = call @i64_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i64
    cf.br ^bb1(%8 : i64)
  ^bb1(%9: i64):  // pred: ^bb0
    return %9 : i64
  }
  func.func @f21(%arg0: !llvm.ptr, %arg1: f32) -> f32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f32, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %c0_i32 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %1, %7 : f32, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %8 = call @i32_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i32
    %9 = "wasm.f32_reinterpret_i32"(%8) : (i32) -> f32
    cf.br ^bb1(%9 : f32)
  ^bb1(%10: f32):  // pred: ^bb0
    return %10 : f32
  }
  func.func @f22(%arg0: !llvm.ptr, %arg1: f64) -> f64 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f64 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : f64, !llvm.ptr
    %c0_i32 = arith.constant 0 : i32
    %1 = llvm.load %0 : !llvm.ptr -> f64
    %c0_i64 = arith.constant 0 : i64
    %2 = arith.extui %c0_i32 : i32 to i64
    %3 = arith.addi %2, %c0_i64 : i64
    %4 = llvm.getelementptr %arg0[32] : (!llvm.ptr) -> !llvm.ptr, i8
    %5 = llvm.getelementptr %4[0] : (!llvm.ptr) -> !llvm.ptr, !llvm.ptr
    %6 = llvm.load %5 : !llvm.ptr -> !llvm.ptr
    %7 = llvm.getelementptr %6[%3] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.ptr
    llvm.store %1, %7 : f64, !llvm.ptr
    %c0_i32_0 = arith.constant 0 : i32
    %8 = call @i64_load_little(%arg0, %c0_i32_0) : (!llvm.ptr, i32) -> i64
    %9 = "wasm.f64_reinterpret_i64"(%8) : (i64) -> f64
    cf.br ^bb1(%9 : f64)
  ^bb1(%10: f64):  // pred: ^bb0
    return %10 : f64
  }
}
