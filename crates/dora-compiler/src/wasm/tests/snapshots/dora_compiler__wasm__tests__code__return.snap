---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @dummy(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f1(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f2(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f3(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f4(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f5(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func @f6(%arg0: !llvm.ptr) -> i64 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i64 = arith.constant 2 : i64
    cf.br ^bb2(%c2_i64 : i64)
  ^bb2(%0: i64):  // 2 preds: ^bb1, ^bb3
    return %0 : i64
  ^bb3(%1: i64):  // no predecessors
    cf.br ^bb2(%1 : i64)
  }
  func.func @f7(%arg0: !llvm.ptr) -> f32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.07793613E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // 2 preds: ^bb1, ^bb3
    return %0 : f32
  ^bb3(%1: f32):  // no predecessors
    cf.br ^bb2(%1 : f32)
  }
  func.func @f8(%arg0: !llvm.ptr) -> f64 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6161896180547584E+18 : f64
    cf.br ^bb2(%cst : f64)
  ^bb2(%0: f64):  // 2 preds: ^bb1, ^bb3
    return %0 : f64
  ^bb3(%1: f64):  // no predecessors
    cf.br ^bb2(%1 : f64)
  }
  func.func @f9(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f10(%arg0: !llvm.ptr) -> f64 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 4.6139378182410732E+18 : f64
    cf.br ^bb2(%cst : f64)
  ^bb2(%0: f64):  // pred: ^bb1
    return %0 : f64
  }
  func.func @f11(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f12(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f13(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func @f14(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f15(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // 2 preds: ^bb1, ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  }
  func.func @f16(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2
  ^bb2:  // 2 preds: ^bb1, ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  }
  func.func @f17(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2
  ^bb2:  // 2 preds: ^bb1, ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  }
  func.func @f18(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func @f19(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // 2 preds: ^bb3, ^bb4
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  }
  func.func @f20(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // 2 preds: ^bb3, ^bb4
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb2(%c4_i32 : i32)
  }
  func.func @f21(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // 2 preds: ^bb3, ^bb4
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c5_i32 = arith.constant 5 : i32
    cf.br ^bb2(%c5_i32 : i32)
  }
  func.func @f22(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func @f23(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // 2 preds: ^bb1, ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  }
  func.func @f24(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    cf.br ^bb2(%c8_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func @f25(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c6_i32 = arith.constant 6 : i32
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func @f26(%arg0: !llvm.ptr) -> i64 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i64 = arith.constant 9 : i64
    cf.br ^bb2(%c9_i64 : i64)
  ^bb2(%0: i64):  // 2 preds: ^bb1, ^bb3
    return %0 : i64
  ^bb3:  // no predecessors
    %c-1_i64 = arith.constant -1 : i64
    cf.br ^bb2(%c-1_i64 : i64)
  }
  func.func @f27(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    cf.br ^bb2(%c10_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func @f28(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c6_i32 = arith.constant 6 : i32
    %c11_i32 = arith.constant 11 : i32
    cf.br ^bb2(%c11_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func @f29(%arg0: !llvm.ptr) -> i64 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c7_i64 = arith.constant 7 : i64
    cf.br ^bb2(%c7_i64 : i64)
  ^bb2(%0: i64):  // pred: ^bb1
    return %0 : i64
  }
  func.func @f30(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f31(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2(%4: i32):  // 2 preds: ^bb3, ^bb5
    return %4 : i32
  ^bb3:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  ^bb4:  // pred: ^bb1
    %5 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb5(%5 : i32)
  ^bb5(%6: i32):  // pred: ^bb4
    cf.br ^bb2(%6 : i32)
  }
  func.func @f32(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2(%4: i32):  // 2 preds: ^bb4, ^bb5
    return %4 : i32
  ^bb3:  // pred: ^bb1
    %5 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb5(%5 : i32)
  ^bb4:  // pred: ^bb1
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb2(%c4_i32 : i32)
  ^bb5(%6: i32):  // pred: ^bb3
    cf.br ^bb2(%6 : i32)
  }
  func.func @f33(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c5_i32 = arith.constant 5 : i32
    cf.br ^bb2(%c5_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func @f34(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    cf.br ^bb2(%c6_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func @f35(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c7_i32 = arith.constant 7 : i32
    cf.br ^bb2(%c7_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i64_0 = arith.constant 1 : i64
    %1 = llvm.alloca %c1_i64_0 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i64_1 = arith.constant 1 : i64
    %2 = llvm.alloca %c1_i64_1 x i32 : (i64) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb2(%c-1_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func @f37(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c12_i32 = arith.constant 12 : i32
    cf.br ^bb2(%c12_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f38(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c13_i32 = arith.constant 13 : i32
    cf.br ^bb2(%c13_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f39(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c14_i32 = arith.constant 14 : i32
    cf.br ^bb2(%c14_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f40(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c20_i32 = arith.constant 20 : i32
    cf.br ^bb2(%c20_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f41(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c21_i32 = arith.constant 21 : i32
    cf.br ^bb2(%c21_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f42(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c22_i32 = arith.constant 22 : i32
    cf.br ^bb2(%c22_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f43(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c23_i32 = arith.constant 23 : i32
    cf.br ^bb2(%c23_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f44(%arg0: !llvm.ptr) -> i32 {
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x f32 : (i64) -> !llvm.ptr
    llvm.store %cst, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c17_i32 = arith.constant 17 : i32
    cf.br ^bb2(%c17_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func @f45(%arg0: !llvm.ptr) -> i32 {
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x i32 : (i64) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func @f46(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f47(%arg0: !llvm.ptr) -> f32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.07122522E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // pred: ^bb1
    return %0 : f32
  }
  func.func @f48(%arg0: !llvm.ptr) -> i64 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c30_i64 = arith.constant 30 : i64
    cf.br ^bb2(%c30_i64 : i64)
  ^bb2(%0: i64):  // pred: ^bb1
    return %0 : i64
  }
  func.func @f49(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c30_i32 = arith.constant 30 : i32
    cf.br ^bb2(%c30_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f50(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    cf.br ^bb2(%c31_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f51(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c32_i32 = arith.constant 32 : i32
    cf.br ^bb2(%c32_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f52(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c33_i32 = arith.constant 33 : i32
    cf.br ^bb2(%c33_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f53(%arg0: !llvm.ptr) -> f32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.07961382E+9 : f32
    cf.br ^bb2(%cst : f32)
  ^bb2(%0: f32):  // pred: ^bb1
    return %0 : f32
  }
  func.func @f54(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f55(%arg0: !llvm.ptr) -> i64 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i64 = arith.constant 10 : i64
    %c45_i64 = arith.constant 45 : i64
    cf.br ^bb2(%c45_i64 : i64)
  ^bb2(%0: i64):  // pred: ^bb1
    return %0 : i64
  }
  func.func @f56(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c44_i32 = arith.constant 44 : i32
    cf.br ^bb2(%c44_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f57(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c43_i32 = arith.constant 43 : i32
    cf.br ^bb2(%c43_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f58(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.09261619E+9 : f32
    %c42_i32 = arith.constant 42 : i32
    cf.br ^bb2(%c42_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f59(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c41_i32 = arith.constant 41 : i32
    cf.br ^bb2(%c41_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f60(%arg0: !llvm.ptr) -> i32 {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c40_i32 = arith.constant 40 : i32
    cf.br ^bb2(%c40_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
