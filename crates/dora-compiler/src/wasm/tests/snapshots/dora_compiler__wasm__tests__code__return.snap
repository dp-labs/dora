---
source: crates/dora-compiler/src/wasm/tests/code.rs
expression: op
snapshot_kind: text
---
module {
  func.func @dummy(%arg0: !llvm.ptr) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"type-i32"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"type-i64"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"type-f32"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"type-f64"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"type-i32-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"type-i64-value"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i64 = arith.constant 2 : i64
    cf.br ^bb2(%c2_i64 : i64)
  ^bb2(%0: i64):  // 2 preds: ^bb1, ^bb3
    return %0 : i64
  ^bb3(%1: i64):  // no predecessors
    cf.br ^bb2(%1 : i64)
  }
  func.func public @"type-f32-value"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1077936128_i32 = arith.constant 1077936128 : i32
    %0 = arith.bitcast %c1077936128_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // 2 preds: ^bb1, ^bb3
    return %1 : f32
  ^bb3(%2: f32):  // no predecessors
    cf.br ^bb2(%2 : f32)
  }
  func.func public @"type-f64-value"(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4616189618054758400_i64 = arith.constant 4616189618054758400 : i64
    %0 = arith.bitcast %c4616189618054758400_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // 2 preds: ^bb1, ^bb3
    return %1 : f64
  ^bb3(%2: f64):  // no predecessors
    cf.br ^bb2(%2 : f64)
  }
  func.func public @nullary(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @unary(%arg0: !llvm.ptr) -> f64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4613937818241073152_i64 = arith.constant 4613937818241073152 : i64
    %0 = arith.bitcast %c4613937818241073152_i64 : i64 to f64
    cf.br ^bb2(%0 : f64)
  ^bb2(%1: f64):  // pred: ^bb1
    return %1 : f64
  }
  func.func public @"as-func-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-func-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-func-last"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2
  ^bb2:  // pred: ^bb1
    return
  }
  func.func public @"as-func-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-block-first"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // 2 preds: ^bb1, ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  }
  func.func public @"as-block-mid"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2
  ^bb2:  // 2 preds: ^bb1, ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  }
  func.func public @"as-block-last"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    cf.br ^bb2
  ^bb2:  // 2 preds: ^bb1, ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  }
  func.func public @"as-block-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-loop-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // 2 preds: ^bb3, ^bb4
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  }
  func.func public @"as-loop-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // 2 preds: ^bb3, ^bb4
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb2(%c4_i32 : i32)
  }
  func.func public @"as-loop-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb4
  ^bb2(%0: i32):  // 2 preds: ^bb3, ^bb4
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  ^bb4:  // pred: ^bb1
    call @dummy(%arg0) : (!llvm.ptr) -> ()
    %c5_i32 = arith.constant 5 : i32
    cf.br ^bb2(%c5_i32 : i32)
  }
  func.func public @"as-br-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-br_if-cond"(%arg0: !llvm.ptr) attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2
  ^bb2:  // 2 preds: ^bb1, ^bb3
    return
  ^bb3:  // no predecessors
    cf.br ^bb2
  }
  func.func public @"as-br_if-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c8_i32 = arith.constant 8 : i32
    cf.br ^bb2(%c8_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-br_if-value-cond"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c6_i32 = arith.constant 6 : i32
    %c9_i32 = arith.constant 9 : i32
    cf.br ^bb2(%c9_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-br_table-index"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c9_i64 = arith.constant 9 : i64
    cf.br ^bb2(%c9_i64 : i64)
  ^bb2(%0: i64):  // 2 preds: ^bb1, ^bb3
    return %0 : i64
  ^bb3:  // no predecessors
    %c-1_i64 = arith.constant -1 : i64
    cf.br ^bb2(%c-1_i64 : i64)
  }
  func.func public @"as-br_table-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i32 = arith.constant 10 : i32
    cf.br ^bb2(%c10_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-br_table-value-index"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c6_i32 = arith.constant 6 : i32
    %c11_i32 = arith.constant 11 : i32
    cf.br ^bb2(%c11_i32 : i32)
  ^bb2(%0: i32):  // 2 preds: ^bb1, ^bb3
    return %0 : i32
  ^bb3(%1: i32):  // no predecessors
    cf.br ^bb2(%1 : i32)
  }
  func.func public @"as-return-value"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c7_i64 = arith.constant 7 : i64
    cf.br ^bb2(%c7_i64 : i64)
  ^bb2(%0: i64):  // pred: ^bb1
    return %0 : i64
  }
  func.func public @"as-if-cond"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    cf.br ^bb2(%c2_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-if-then"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2(%4: i32):  // 2 preds: ^bb3, ^bb5
    return %4 : i32
  ^bb3:  // pred: ^bb1
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  ^bb4:  // pred: ^bb1
    %5 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb5(%5 : i32)
  ^bb5(%6: i32):  // pred: ^bb4
    cf.br ^bb2(%6 : i32)
  }
  func.func public @"as-if-else"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c0_i32 = arith.constant 0 : i32
    %3 = arith.cmpi ne, %2, %c0_i32 : i32
    cf.cond_br %3, ^bb3, ^bb4
  ^bb2(%4: i32):  // 2 preds: ^bb4, ^bb5
    return %4 : i32
  ^bb3:  // pred: ^bb1
    %5 = llvm.load %1 : !llvm.ptr -> i32
    cf.br ^bb5(%5 : i32)
  ^bb4:  // pred: ^bb1
    %c4_i32 = arith.constant 4 : i32
    cf.br ^bb2(%c4_i32 : i32)
  ^bb5(%6: i32):  // pred: ^bb3
    cf.br ^bb2(%6 : i32)
  }
  func.func public @"as-select-first"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c5_i32 = arith.constant 5 : i32
    cf.br ^bb2(%c5_i32 : i32)
  ^bb2(%2: i32):  // pred: ^bb1
    return %2 : i32
  }
  func.func public @"as-select-second"(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.emit_c_interface} {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %2 = llvm.load %0 : !llvm.ptr -> i32
    %c6_i32 = arith.constant 6 : i32
    cf.br ^bb2(%c6_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"as-select-cond"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c7_i32 = arith.constant 7 : i32
    cf.br ^bb2(%c7_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func @f(%arg0: !llvm.ptr, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 {
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %c1_i32_0 = arith.constant 1 : i32
    %1 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %c1_i32_1 = arith.constant 1 : i32
    %2 = llvm.alloca %c1_i32_1 x i32 : (i32) -> !llvm.ptr
    llvm.store %arg3, %2 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c-1_i32 = arith.constant -1 : i32
    cf.br ^bb2(%c-1_i32 : i32)
  ^bb2(%3: i32):  // pred: ^bb1
    return %3 : i32
  }
  func.func public @"as-call-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c12_i32 = arith.constant 12 : i32
    cf.br ^bb2(%c12_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-call-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c13_i32 = arith.constant 13 : i32
    cf.br ^bb2(%c13_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-call-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c14_i32 = arith.constant 14 : i32
    cf.br ^bb2(%c14_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-call_indirect-func"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c20_i32 = arith.constant 20 : i32
    cf.br ^bb2(%c20_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-call_indirect-first"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c21_i32 = arith.constant 21 : i32
    cf.br ^bb2(%c21_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-call_indirect-mid"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c22_i32 = arith.constant 22 : i32
    cf.br ^bb2(%c22_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-call_indirect-last"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c23_i32 = arith.constant 23 : i32
    cf.br ^bb2(%c23_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-local.set-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr
    llvm.store %cst, %0 : f32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c17_i32 = arith.constant 17 : i32
    cf.br ^bb2(%c17_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @"as-local.tee-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr
    llvm.store %c0_i32, %0 : i32, !llvm.ptr
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32_0 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32_0 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @"as-global.set-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1_i32 = arith.constant 1 : i32
    cf.br ^bb2(%c1_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-load-address"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1071225242_i32 = arith.constant 1071225242 : i32
    %0 = arith.bitcast %c1071225242_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"as-loadN-address"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c30_i64 = arith.constant 30 : i64
    cf.br ^bb2(%c30_i64 : i64)
  ^bb2(%0: i64):  // pred: ^bb1
    return %0 : i64
  }
  func.func public @"as-store-address"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c30_i32 = arith.constant 30 : i32
    cf.br ^bb2(%c30_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-store-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    cf.br ^bb2(%c31_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-storeN-address"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c32_i32 = arith.constant 32 : i32
    cf.br ^bb2(%c32_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-storeN-value"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c2_i32 = arith.constant 2 : i32
    %c33_i32 = arith.constant 33 : i32
    cf.br ^bb2(%c33_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-unary-operand"(%arg0: !llvm.ptr) -> f32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1079613850_i32 = arith.constant 1079613850 : i32
    %0 = arith.bitcast %c1079613850_i32 : i32 to f32
    cf.br ^bb2(%0 : f32)
  ^bb2(%1: f32):  // pred: ^bb1
    return %1 : f32
  }
  func.func public @"as-binary-left"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c3_i32 = arith.constant 3 : i32
    cf.br ^bb2(%c3_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-binary-right"(%arg0: !llvm.ptr) -> i64 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c10_i64 = arith.constant 10 : i64
    %c45_i64 = arith.constant 45 : i64
    cf.br ^bb2(%c45_i64 : i64)
  ^bb2(%0: i64):  // pred: ^bb1
    return %0 : i64
  }
  func.func public @"as-test-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c44_i32 = arith.constant 44 : i32
    cf.br ^bb2(%c44_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-compare-left"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c43_i32 = arith.constant 43 : i32
    cf.br ^bb2(%c43_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-compare-right"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c1092616192_i32 = arith.constant 1092616192 : i32
    %0 = arith.bitcast %c1092616192_i32 : i32 to f32
    %c42_i32 = arith.constant 42 : i32
    cf.br ^bb2(%c42_i32 : i32)
  ^bb2(%1: i32):  // pred: ^bb1
    return %1 : i32
  }
  func.func public @"as-convert-operand"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c41_i32 = arith.constant 41 : i32
    cf.br ^bb2(%c41_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func public @"as-memory.grow-size"(%arg0: !llvm.ptr) -> i32 attributes {llvm.emit_c_interface} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c40_i32 = arith.constant 40 : i32
    cf.br ^bb2(%c40_i32 : i32)
  ^bb2(%0: i32):  // pred: ^bb1
    return %0 : i32
  }
  func.func private @dora_fn_wasm_table_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_copy(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_table_fill(!llvm.ptr, i32, i32, !llvm.ptr, i32)
  func.func private @dora_fn_wasm_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_table_set(!llvm.ptr, i32, i32, !llvm.ptr)
  func.func private @dora_fn_wasm_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_table_get(!llvm.ptr, i32, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_imported_table_grow(!llvm.ptr, !llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_init(!llvm.ptr, i32, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_size(!llvm.ptr, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_grow(!llvm.ptr, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_copy(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_fill(!llvm.ptr, i32, i32, i32, i32)
  func.func private @dora_fn_wasm_imported_memory_notify(!llvm.ptr, i32, i32, i32) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait32(!llvm.ptr, i32, i32, i32, i64) -> i32
  func.func private @dora_fn_wasm_imported_memory_wait64(!llvm.ptr, i32, i32, i64, i64) -> i32
  func.func private @dora_fn_wasm_func_ref(!llvm.ptr, i32) -> !llvm.ptr
  func.func private @dora_fn_wasm_data_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_elem_drop(!llvm.ptr, i32)
  func.func private @dora_fn_wasm_raise_trap(i32)
}
