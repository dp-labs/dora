use wasmer_compiler::wasmparser::Operator;

/// Get the gas info of the WASM operator.
pub fn op_gas_cost(op: &Operator) -> u64 {
    match op {
        Operator::Unreachable => 0,
        Operator::Nop => 1,
        Operator::Block { .. } => 1,
        Operator::Loop { .. } => 1,
        Operator::If { .. } => 1,
        Operator::Else => 1,
        Operator::TryTable { .. } => 10,
        Operator::Throw { .. } => 8,
        Operator::ThrowRef => 8,
        Operator::Try { .. } => 10,
        Operator::Catch { .. } => 8,
        Operator::Rethrow { .. } => 10,
        Operator::Delegate { .. } => 8,
        Operator::CatchAll => 8,
        Operator::End => 1,
        Operator::Br { .. } => 1,
        Operator::BrIf { .. } => 1,
        Operator::BrTable { .. } => 1,
        Operator::Return => 1,
        Operator::Call { .. } => 6,
        Operator::CallIndirect { .. } => 7,
        Operator::ReturnCall { .. } => 6,
        Operator::ReturnCallIndirect { .. } => 7,
        Operator::Drop => 1,
        Operator::Select => 1,
        Operator::TypedSelect { .. } => 1,
        Operator::LocalGet { .. } => 3,
        Operator::LocalSet { .. } => 3,
        Operator::LocalTee { .. } => 3,
        Operator::GlobalGet { .. } => 3,
        Operator::GlobalSet { .. } => 3,
        Operator::I32Load { .. } => 3,
        Operator::I64Load { .. } => 3,
        Operator::F32Load { .. } => 3,
        Operator::F64Load { .. } => 3,
        Operator::I32Load8S { .. } => 3,
        Operator::I32Load8U { .. } => 3,
        Operator::I32Load16S { .. } => 3,
        Operator::I32Load16U { .. } => 3,
        Operator::I64Load8S { .. } => 3,
        Operator::I64Load8U { .. } => 3,
        Operator::I64Load16S { .. } => 3,
        Operator::I64Load16U { .. } => 3,
        Operator::I64Load32S { .. } => 3,
        Operator::I64Load32U { .. } => 3,
        Operator::I32Store { .. } => 3,
        Operator::I64Store { .. } => 3,
        Operator::F32Store { .. } => 3,
        Operator::F64Store { .. } => 3,
        Operator::I32Store8 { .. } => 3,
        Operator::I32Store16 { .. } => 3,
        Operator::I64Store8 { .. } => 3,
        Operator::I64Store16 { .. } => 3,
        Operator::I64Store32 { .. } => 3,
        Operator::MemorySize { .. } => 2,
        Operator::MemoryGrow { .. } => 20,
        Operator::I32Const { .. } => 1,
        Operator::I64Const { .. } => 1,
        Operator::F32Const { .. } => 1,
        Operator::F64Const { .. } => 1,
        Operator::RefNull { .. } => 3,
        Operator::RefIsNull => 3,
        Operator::RefFunc { .. } => 4,
        Operator::RefEq => 3,
        Operator::I32Eqz => 3,
        Operator::I32Eq => 3,
        Operator::I32Ne => 3,
        Operator::I32LtS => 3,
        Operator::I32LtU => 3,
        Operator::I32GtS => 3,
        Operator::I32GtU => 3,
        Operator::I32LeS => 3,
        Operator::I32LeU => 3,
        Operator::I32GeS => 3,
        Operator::I32GeU => 3,
        Operator::I64Eqz => 3,
        Operator::I64Eq => 3,
        Operator::I64Ne => 3,
        Operator::I64LtS => 3,
        Operator::I64LtU => 3,
        Operator::I64GtS => 3,
        Operator::I64GtU => 3,
        Operator::I64LeS => 3,
        Operator::I64LeU => 3,
        Operator::I64GeS => 3,
        Operator::I64GeU => 3,
        Operator::F32Eq => 3,
        Operator::F32Ne => 3,
        Operator::F32Lt => 3,
        Operator::F32Gt => 3,
        Operator::F32Le => 3,
        Operator::F32Ge => 3,
        Operator::F64Eq => 3,
        Operator::F64Ne => 3,
        Operator::F64Lt => 3,
        Operator::F64Gt => 3,
        Operator::F64Le => 3,
        Operator::F64Ge => 3,
        Operator::I32Clz => 3,
        Operator::I32Ctz => 3,
        Operator::I32Popcnt => 3,
        Operator::I32Add => 3,
        Operator::I32Sub => 3,
        Operator::I32Mul => 5,
        Operator::I32DivS => 20,
        Operator::I32DivU => 20,
        Operator::I32RemS => 20,
        Operator::I32RemU => 20,
        Operator::I32And => 3,
        Operator::I32Or => 3,
        Operator::I32Xor => 3,
        Operator::I32Shl => 3,
        Operator::I32ShrS => 3,
        Operator::I32ShrU => 3,
        Operator::I32Rotl => 3,
        Operator::I32Rotr => 3,
        Operator::I64Clz => 3,
        Operator::I64Ctz => 3,
        Operator::I64Popcnt => 3,
        Operator::I64Add => 3,
        Operator::I64Sub => 3,
        Operator::I64Mul => 5,
        Operator::I64DivS => 24,
        Operator::I64DivU => 24,
        Operator::I64RemS => 24,
        Operator::I64RemU => 24,
        Operator::I64And => 3,
        Operator::I64Or => 3,
        Operator::I64Xor => 3,
        Operator::I64Shl => 3,
        Operator::I64ShrS => 3,
        Operator::I64ShrU => 3,
        Operator::I64Rotl => 3,
        Operator::I64Rotr => 3,
        Operator::F32Abs => 10,
        Operator::F32Neg => 3,
        Operator::F32Ceil => 3,
        Operator::F32Floor => 3,
        Operator::F32Trunc => 4,
        Operator::F32Nearest => 3,
        Operator::F32Sqrt => 3,
        Operator::F32Add => 3,
        Operator::F32Sub => 3,
        Operator::F32Mul => 5,
        Operator::F32Div => 20,
        Operator::F32Min => 4,
        Operator::F32Max => 4,
        Operator::F32Copysign => 4,
        Operator::F64Abs => 10,
        Operator::F64Neg => 3,
        Operator::F64Ceil => 3,
        Operator::F64Floor => 3,
        Operator::F64Trunc => 4,
        Operator::F64Nearest => 3,
        Operator::F64Sqrt => 3,
        Operator::F64Add => 3,
        Operator::F64Sub => 3,
        Operator::F64Mul => 5,
        Operator::F64Div => 20,
        Operator::F64Min => 4,
        Operator::F64Max => 4,
        Operator::F64Copysign => 4,
        Operator::I32WrapI64 => 4,
        Operator::I32TruncF32S => 4,
        Operator::I32TruncF32U => 4,
        Operator::I32TruncF64S => 4,
        Operator::I32TruncF64U => 4,
        Operator::I64ExtendI32S => 4,
        Operator::I64ExtendI32U => 4,
        Operator::I64TruncF32S => 4,
        Operator::I64TruncF32U => 4,
        Operator::I64TruncF64S => 4,
        Operator::I64TruncF64U => 4,
        Operator::F32ConvertI32S => 4,
        Operator::F32ConvertI32U => 4,
        Operator::F32ConvertI64S => 4,
        Operator::F32ConvertI64U => 4,
        Operator::F32DemoteF64 => 4,
        Operator::F64ConvertI32S => 4,
        Operator::F64ConvertI32U => 4,
        Operator::F64ConvertI64S => 4,
        Operator::F64ConvertI64U => 4,
        Operator::F64PromoteF32 => 4,
        Operator::I32ReinterpretF32 => 4,
        Operator::I64ReinterpretF64 => 4,
        Operator::F32ReinterpretI32 => 4,
        Operator::F64ReinterpretI64 => 4,
        Operator::I32Extend8S => 4,
        Operator::I32Extend16S => 4,
        Operator::I64Extend8S => 4,
        Operator::I64Extend16S => 4,
        Operator::I64Extend32S => 4,
        Operator::I32TruncSatF32S => 4,
        Operator::I32TruncSatF32U => 4,
        Operator::I32TruncSatF64S => 4,
        Operator::I32TruncSatF64U => 4,
        Operator::I64TruncSatF32S => 4,
        Operator::I64TruncSatF32U => 4,
        Operator::I64TruncSatF64S => 4,
        Operator::I64TruncSatF64U => 4,
        Operator::MemoryInit { .. } => 3,
        Operator::DataDrop { .. } => 3,
        Operator::MemoryCopy { .. } => 3,
        Operator::MemoryFill { .. } => 3,
        Operator::TableInit { .. } => 3,
        Operator::ElemDrop { .. } => 3,
        Operator::TableCopy { .. } => 3,
        Operator::TableFill { .. } => 3,
        Operator::TableGet { .. } => 3,
        Operator::TableSet { .. } => 3,
        Operator::TableGrow { .. } => 3,
        Operator::TableSize { .. } => 3,
        Operator::MemoryDiscard { .. } => 3,
        Operator::MemoryAtomicNotify { .. } => 3,
        Operator::MemoryAtomicWait32 { .. } => 3,
        Operator::MemoryAtomicWait64 { .. } => 3,
        Operator::I32AtomicLoad { .. } => 4,
        Operator::I64AtomicLoad { .. } => 4,
        Operator::I32AtomicLoad8U { .. } => 4,
        Operator::I32AtomicLoad16U { .. } => 4,
        Operator::I64AtomicLoad8U { .. } => 4,
        Operator::I64AtomicLoad16U { .. } => 4,
        Operator::I64AtomicLoad32U { .. } => 4,
        Operator::I32AtomicStore { .. } => 4,
        Operator::I64AtomicStore { .. } => 4,
        Operator::I32AtomicStore8 { .. } => 4,
        Operator::I32AtomicStore16 { .. } => 4,
        Operator::I64AtomicStore8 { .. } => 4,
        Operator::I64AtomicStore16 { .. } => 4,
        Operator::I64AtomicStore32 { .. } => 4,
        Operator::I32AtomicRmwAdd { .. } => 4,
        Operator::I64AtomicRmwAdd { .. } => 4,
        Operator::I32AtomicRmw8AddU { .. } => 4,
        Operator::I32AtomicRmw16AddU { .. } => 4,
        Operator::I64AtomicRmw8AddU { .. } => 4,
        Operator::I64AtomicRmw16AddU { .. } => 4,
        Operator::I64AtomicRmw32AddU { .. } => 4,
        Operator::I32AtomicRmwSub { .. } => 4,
        Operator::I64AtomicRmwSub { .. } => 4,
        Operator::I32AtomicRmw8SubU { .. } => 4,
        Operator::I32AtomicRmw16SubU { .. } => 4,
        Operator::I64AtomicRmw8SubU { .. } => 4,
        Operator::I64AtomicRmw16SubU { .. } => 4,
        Operator::I64AtomicRmw32SubU { .. } => 4,
        Operator::I32AtomicRmwAnd { .. } => 4,
        Operator::I64AtomicRmwAnd { .. } => 4,
        Operator::I32AtomicRmw8AndU { .. } => 4,
        Operator::I32AtomicRmw16AndU { .. } => 4,
        Operator::I64AtomicRmw8AndU { .. } => 4,
        Operator::I64AtomicRmw16AndU { .. } => 4,
        Operator::I64AtomicRmw32AndU { .. } => 4,
        Operator::I32AtomicRmwOr { .. } => 4,
        Operator::I64AtomicRmwOr { .. } => 4,
        Operator::I32AtomicRmw8OrU { .. } => 4,
        Operator::I32AtomicRmw16OrU { .. } => 4,
        Operator::I64AtomicRmw8OrU { .. } => 4,
        Operator::I64AtomicRmw16OrU { .. } => 4,
        Operator::I64AtomicRmw32OrU { .. } => 4,
        Operator::I32AtomicRmwXor { .. } => 4,
        Operator::I64AtomicRmwXor { .. } => 4,
        Operator::I32AtomicRmw8XorU { .. } => 4,
        Operator::I32AtomicRmw16XorU { .. } => 4,
        Operator::I64AtomicRmw8XorU { .. } => 4,
        Operator::I64AtomicRmw16XorU { .. } => 4,
        Operator::I64AtomicRmw32XorU { .. } => 4,
        Operator::I32AtomicRmwXchg { .. } => 4,
        Operator::I64AtomicRmwXchg { .. } => 4,
        Operator::I32AtomicRmw8XchgU { .. } => 4,
        Operator::I32AtomicRmw16XchgU { .. } => 4,
        Operator::I64AtomicRmw8XchgU { .. } => 4,
        Operator::I64AtomicRmw16XchgU { .. } => 4,
        Operator::I64AtomicRmw32XchgU { .. } => 4,
        Operator::I32AtomicRmwCmpxchg { .. } => 4,
        Operator::I64AtomicRmwCmpxchg { .. } => 4,
        Operator::I32AtomicRmw8CmpxchgU { .. } => 4,
        Operator::I32AtomicRmw16CmpxchgU { .. } => 4,
        Operator::I64AtomicRmw8CmpxchgU { .. } => 4,
        Operator::I64AtomicRmw16CmpxchgU { .. } => 4,
        Operator::I64AtomicRmw32CmpxchgU { .. } => 4,
        // For unspport ops, return u64::MAX
        _ => u64::MAX,
    }
}
